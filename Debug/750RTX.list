
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015564  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d78  08015808  08015808  00025808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a580  0801a580  00051800  2**0
                  CONTENTS
  4 .ARM          00000008  0801a580  0801a580  0002a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a588  0801a588  00051800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a588  0801a588  0002a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a58c  0801a58c  0002a58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  24000000  0801a590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cf28  24000520  0801aaa8  00030520  2**5
                  ALLOC
 10 ._user_heap_stack 00000640  2400d448  0801aaa8  0003d448  2**0
                  ALLOC
 11 .dtcm         00011800  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00051800  2**0
                  CONTENTS, READONLY
 13 .debug_line   0004b677  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000504e6  00000000  00000000  0009cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008d67  00000000  00000000  000ed38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d50  00000000  00000000  000f60f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00198fb8  00000000  00000000  000f7e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003d163  00000000  00000000  00290e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00007ae0  00000000  00000000  002cdf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000aef1  00000000  00000000  002d5a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002e0939  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007914  00000000  00000000  002e098c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000520 	.word	0x24000520
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080157ec 	.word	0x080157ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000524 	.word	0x24000524
 80002dc:	080157ec 	.word	0x080157ec

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	; 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b974 	b.w	8000ac8 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f806 	bl	80007f8 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad0:	4605      	mov	r5, r0
 8000ad2:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 8000ad4:	f8b5 8000 	ldrh.w	r8, [r5]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000ad8:	686a      	ldr	r2, [r5, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 8000ada:	ea4f 0158 	mov.w	r1, r8, lsr #1
  float32_t * p2 = p1 + L;
 8000ade:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000ae2:	ea5f 08d8 	movs.w	r8, r8, lsr #3
{
 8000ae6:	ed2d 8b08 	vpush	{d8-d11}
 8000aea:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
 8000aec:	f000 80a9 	beq.w	8000c42 <arm_cfft_radix8by2_f32+0x176>
 8000af0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8000af4:	f100 0310 	add.w	r3, r0, #16
 8000af8:	f102 0710 	add.w	r7, r2, #16
 8000afc:	f106 0e10 	add.w	lr, r6, #16
 8000b00:	f10c 0c10 	add.w	ip, ip, #16
 8000b04:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 8000b08:	eb00 040c 	add.w	r4, r0, ip
 8000b0c:	44b4      	add	ip, r6
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
    t4[1] = pMid2[1];
 8000b0e:	ed1c 5a03 	vldr	s10, [ip, #-12]
  for (l = L >> 2; l > 0; l-- )
 8000b12:	f10e 0e10 	add.w	lr, lr, #16
    t4[0] = pMid2[0];
 8000b16:	ed1c 2a04 	vldr	s4, [ip, #-16]
  for (l = L >> 2; l > 0; l-- )
 8000b1a:	f10c 0c10 	add.w	ip, ip, #16
    t2[0] = p2[0];
 8000b1e:	ed5e 2a08 	vldr	s5, [lr, #-32]	; 0xffffffe0
  for (l = L >> 2; l > 0; l-- )
 8000b22:	3710      	adds	r7, #16
    t2[1] = p2[1];
 8000b24:	ed1e 3a07 	vldr	s6, [lr, #-28]	; 0xffffffe4
  for (l = L >> 2; l > 0; l-- )
 8000b28:	3310      	adds	r3, #16
    t2[2] = p2[2];
 8000b2a:	ed5e 3a06 	vldr	s7, [lr, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 8000b2e:	3410      	adds	r4, #16
    t2[3] = p2[3];
 8000b30:	ed1e 4a05 	vldr	s8, [lr, #-20]	; 0xffffffec
    t4[2] = pMid2[2];
 8000b34:	ed5c 7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
    t4[3] = pMid2[3];
 8000b38:	ed5c 6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
    t1[0] = p1[0];
 8000b3c:	ed13 1a08 	vldr	s2, [r3, #-32]	; 0xffffffe0
    t1[1] = p1[1];
 8000b40:	ed53 1a07 	vldr	s3, [r3, #-28]	; 0xffffffe4
    t1[2] = p1[2];
 8000b44:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8

    *p1++ = t1[0] + t2[0];
 8000b48:	ee71 ba22 	vadd.f32	s23, s2, s5
    t1[3] = p1[3];
 8000b4c:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
    *p1++ = t1[1] + t2[1];
 8000b50:	ee31 ba83 	vadd.f32	s22, s3, s6
    t3[0] = pMid1[0];
 8000b54:	ed54 4a08 	vldr	s9, [r4, #-32]	; 0xffffffe0
    *p1++ = t1[2] + t2[2];
 8000b58:	ee76 aa23 	vadd.f32	s21, s12, s7
    t3[1] = pMid1[1];
 8000b5c:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000b60:	ee37 aa04 	vadd.f32	s20, s14, s8
    t3[2] = pMid1[2];
 8000b64:	ed54 0a06 	vldr	s1, [r4, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
 8000b68:	ee74 9a82 	vadd.f32	s19, s9, s4
    t3[3] = pMid1[3];
 8000b6c:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    *pMid1++ = t3[1] + t4[1];
 8000b70:	ee35 9a85 	vadd.f32	s18, s11, s10
    *pMid1++ = t3[2] + t4[2];
 8000b74:	ee70 8aa7 	vadd.f32	s17, s1, s15
    *p1++ = t1[0] + t2[0];
 8000b78:	ed43 ba08 	vstr	s23, [r3, #-32]	; 0xffffffe0
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000b7c:	ee30 8a26 	vadd.f32	s16, s0, s13
    *p1++ = t1[1] + t2[1];
 8000b80:	ed03 ba07 	vstr	s22, [r3, #-28]	; 0xffffffe4
    *p1++ = t1[2] + t2[2];
 8000b84:	ed43 aa06 	vstr	s21, [r3, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
 8000b88:	ee31 1a62 	vsub.f32	s2, s2, s5
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000b8c:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
    t2[1] = t1[1] - t2[1];
 8000b90:	ee71 1ac3 	vsub.f32	s3, s3, s6
    *pMid1++ = t3[0] + t4[0];
 8000b94:	ed44 9a08 	vstr	s19, [r4, #-32]	; 0xffffffe0

    t4[0] = t4[0] - t3[0];
 8000b98:	ee32 2a64 	vsub.f32	s4, s4, s9
    *pMid1++ = t3[1] + t4[1];
 8000b9c:	ed04 9a07 	vstr	s18, [r4, #-28]	; 0xffffffe4
    t4[1] = t4[1] - t3[1];
 8000ba0:	ee75 5a65 	vsub.f32	s11, s10, s11
    *pMid1++ = t3[2] + t4[2];
 8000ba4:	ed44 8a06 	vstr	s17, [r4, #-24]	; 0xffffffe8
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000ba8:	ee37 7a44 	vsub.f32	s14, s14, s8
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000bac:	ed04 8a05 	vstr	s16, [r4, #-20]	; 0xffffffec
    t2[2] = t1[2] - t2[2];
 8000bb0:	ee36 6a63 	vsub.f32	s12, s12, s7
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
 8000bb4:	ed57 4a08 	vldr	s9, [r7, #-32]	; 0xffffffe0
    t4[2] = t4[2] - t3[2];
 8000bb8:	ee77 7ae0 	vsub.f32	s15, s15, s1
    twI = *tw++;
 8000bbc:	ed17 5a07 	vldr	s10, [r7, #-28]	; 0xffffffe4
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000bc0:	ee76 6ac0 	vsub.f32	s13, s13, s0
    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
    m1 = t4[1] * twR;
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
 8000bc4:	ee22 4a24 	vmul.f32	s8, s4, s9
  for (l = L >> 2; l > 0; l-- )
 8000bc8:	4543      	cmp	r3, r8
    m1 = t2[1] * twI;
 8000bca:	ee61 2a85 	vmul.f32	s5, s3, s10
    *p2++ = m2 - m3;
 8000bce:	ee25 3a41 	vnmul.f32	s6, s10, s2

    *pMid2++ = m0 - m1;
 8000bd2:	ee64 3ae5 	vnmul.f32	s7, s9, s11
    *p2++ = m0 + m1;
 8000bd6:	eee1 2a24 	vfma.f32	s5, s2, s9
    *p2++ = m2 - m3;
 8000bda:	eea1 3aa4 	vfma.f32	s6, s3, s9
    *pMid2++ = m2 + m3;
 8000bde:	eef0 4a44 	vmov.f32	s9, s8
    *pMid2++ = m0 - m1;
 8000be2:	eee2 3a05 	vfma.f32	s7, s4, s10
    *pMid2++ = m2 + m3;
 8000be6:	eee5 4a85 	vfma.f32	s9, s11, s10
    *p2++ = m0 + m1;
 8000bea:	ed4e 2a08 	vstr	s5, [lr, #-32]	; 0xffffffe0
    *p2++ = m2 - m3;
 8000bee:	ed0e 3a07 	vstr	s6, [lr, #-28]	; 0xffffffe4
    *pMid2++ = m0 - m1;
 8000bf2:	ed4c 3a08 	vstr	s7, [ip, #-32]	; 0xffffffe0
    *pMid2++ = m2 + m3;
 8000bf6:	ed4c 4a07 	vstr	s9, [ip, #-28]	; 0xffffffe4

    twR = *tw++;
 8000bfa:	ed17 5a06 	vldr	s10, [r7, #-24]	; 0xffffffe8
    twI = *tw++;
 8000bfe:	ed57 5a05 	vldr	s11, [r7, #-20]	; 0xffffffec
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
    m1 = t4[3] * twR;
    m2 = t4[3] * twI;
    m3 = t4[2] * twR;
 8000c02:	ee67 4a85 	vmul.f32	s9, s15, s10
    m1 = t2[3] * twI;
 8000c06:	ee27 3a25 	vmul.f32	s6, s14, s11
    *p2++ = m2 - m3;
 8000c0a:	ee65 3ac6 	vnmul.f32	s7, s11, s12

    *pMid2++ = m0 - m1;
 8000c0e:	ee25 4a66 	vnmul.f32	s8, s10, s13
    *p2++ = m0 + m1;
 8000c12:	eea6 3a05 	vfma.f32	s6, s12, s10
    *pMid2++ = m2 + m3;
 8000c16:	eeb0 6a64 	vmov.f32	s12, s9
 8000c1a:	eea6 6aa5 	vfma.f32	s12, s13, s11
    *p2++ = m2 - m3;
 8000c1e:	eef0 6a63 	vmov.f32	s13, s7
    *p2++ = m0 + m1;
 8000c22:	ed0e 3a06 	vstr	s6, [lr, #-24]	; 0xffffffe8
    *p2++ = m2 - m3;
 8000c26:	eee7 6a05 	vfma.f32	s13, s14, s10
    *pMid2++ = m0 - m1;
 8000c2a:	eeb0 7a44 	vmov.f32	s14, s8
 8000c2e:	eea7 7aa5 	vfma.f32	s14, s15, s11
    *p2++ = m2 - m3;
 8000c32:	ed4e 6a05 	vstr	s13, [lr, #-20]	; 0xffffffec
    *pMid2++ = m2 + m3;
 8000c36:	ed0c 6a05 	vstr	s12, [ip, #-20]	; 0xffffffec
    *pMid2++ = m0 - m1;
 8000c3a:	ed0c 7a06 	vstr	s14, [ip, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 8000c3e:	f47f af66 	bne.w	8000b0e <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000c42:	b289      	uxth	r1, r1
 8000c44:	2302      	movs	r3, #2
 8000c46:	9101      	str	r1, [sp, #4]
 8000c48:	f000 face 	bl	80011e8 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	686a      	ldr	r2, [r5, #4]
 8000c50:	9901      	ldr	r1, [sp, #4]
 8000c52:	4630      	mov	r0, r6
}
 8000c54:	b002      	add	sp, #8
 8000c56:	ecbd 8b08 	vpop	{d8-d11}
 8000c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000c5e:	f000 bac3 	b.w	80011e8 <arm_radix8_butterfly_f32>
 8000c62:	bf00      	nop

08000c64 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	4607      	mov	r7, r0
 8000c6a:	ed2d 8b06 	vpush	{d8-d10}
 8000c6e:	b08f      	sub	sp, #60	; 0x3c
 8000c70:	900b      	str	r0, [sp, #44]	; 0x2c
 8000c72:	4608      	mov	r0, r1
 8000c74:	910c      	str	r1, [sp, #48]	; 0x30
    uint32_t    L  = S->fftLen >> 1;
 8000c76:	8839      	ldrh	r1, [r7, #0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c78:	4606      	mov	r6, r0
    p1ap3_0 = p1[0] + p3[0];
 8000c7a:	edd0 7a00 	vldr	s15, [r0]
    uint32_t    L  = S->fftLen >> 1;
 8000c7e:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000c80:	ed90 7a01 	vldr	s14, [r0, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000c84:	687f      	ldr	r7, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c86:	3608      	adds	r6, #8
    float32_t * p3 = p2 + L;
 8000c88:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    float32_t * p2 = p1 + L;
 8000c8c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c90:	9604      	str	r6, [sp, #16]
    p1ap3_0 = p1[0] + p3[0];
 8000c92:	edd2 6a00 	vldr	s13, [r2]
    float32_t * p4 = p3 + L;
 8000c96:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 8000c9a:	edd2 5a01 	vldr	s11, [r2, #4]
    float32_t * p2 = p1 + L;
 8000c9e:	008b      	lsls	r3, r1, #2
    p1ap3_0 = p1[0] + p3[0];
 8000ca0:	ee37 6aa6 	vadd.f32	s12, s15, s13
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ca4:	ed95 5a00 	vldr	s10, [r5]
    p1sp3_0 = p1[0] - p3[0];
 8000ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
    L >>= 1;
 8000cac:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000cae:	ee77 6a25 	vadd.f32	s13, s14, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000cb2:	edd5 2a01 	vldr	s5, [r5, #4]
    p1sp3_1 = p1[1] - p3[1];
 8000cb6:	ee37 7a65 	vsub.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cba:	edd4 5a00 	vldr	s11, [r4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cbe:	ee76 3a45 	vsub.f32	s7, s12, s10
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000cc2:	ed94 2a01 	vldr	s4, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000cc6:	ee35 6a86 	vadd.f32	s12, s11, s12
    L >>= 1;
 8000cca:	9107      	str	r1, [sp, #28]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000ccc:	ee75 4a07 	vadd.f32	s9, s10, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000cd0:	4629      	mov	r1, r5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cd2:	ee35 7a87 	vadd.f32	s14, s11, s14
    float32_t * p3 = p2 + L;
 8000cd6:	9209      	str	r2, [sp, #36]	; 0x24
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000cd8:	ee36 6a05 	vadd.f32	s12, s12, s10
    *p2++ = t2[0];
 8000cdc:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000cde:	ee32 3aa7 	vadd.f32	s6, s5, s15
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
 8000ce2:	f107 0608 	add.w	r6, r7, #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ce6:	ee37 7a45 	vsub.f32	s14, s14, s10
    *p2++ = t2[0];
 8000cea:	9106      	str	r1, [sp, #24]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000cec:	ed80 6a00 	vstr	s12, [r0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cf0:	ee36 4ae2 	vsub.f32	s8, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cf4:	ed94 5a01 	vldr	s10, [r4, #4]
    *p3++ = t3[0];
 8000cf8:	4611      	mov	r1, r2
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cfa:	ed95 6a01 	vldr	s12, [r5, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cfe:	ee73 3ae5 	vsub.f32	s7, s7, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000d02:	ee76 6a85 	vadd.f32	s13, s13, s10
    *p3++ = t3[0];
 8000d06:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000d08:	ee33 3a42 	vsub.f32	s6, s6, s4
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000d0c:	970a      	str	r7, [sp, #40]	; 0x28
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000d0e:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p3++ = t3[0];
 8000d12:	9100      	str	r1, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000d14:	ee76 6a86 	vadd.f32	s13, s13, s12
    *p3++ = t3[1];
 8000d18:	4611      	mov	r1, r2
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000d1a:	ee72 7a27 	vadd.f32	s15, s4, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000d1e:	ee74 5ae5 	vsub.f32	s11, s9, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000d22:	edc0 6a01 	vstr	s13, [r0, #4]
    *p2++ = t2[0];
 8000d26:	ed85 3a00 	vstr	s6, [r5]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000d2a:	ee77 7ae2 	vsub.f32	s15, s15, s5
    *p2++ = t2[1];
 8000d2e:	ed85 7a01 	vstr	s14, [r5, #4]
    *p3++ = t3[0];
 8000d32:	edc2 3a00 	vstr	s7, [r2]
    *p3++ = t3[1];
 8000d36:	ed82 4a01 	vstr	s8, [r2, #4]
    *p4++ = t4[0];
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	edc4 7a00 	vstr	s15, [r4]
 8000d40:	3208      	adds	r2, #8
    *p4++ = t4[1];
 8000d42:	edc4 5a01 	vstr	s11, [r4, #4]
    *p4++ = t4[0];
 8000d46:	9205      	str	r2, [sp, #20]
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
 8000d48:	9a07      	ldr	r2, [sp, #28]
    tw2 += twMod2;
 8000d4a:	9603      	str	r6, [sp, #12]
    tw3 += twMod3;
 8000d4c:	f107 0610 	add.w	r6, r7, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000d50:	3a02      	subs	r2, #2
    tw3 += twMod3;
 8000d52:	9601      	str	r6, [sp, #4]
    tw4 += twMod4;
 8000d54:	f107 0618 	add.w	r6, r7, #24
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000d58:	0852      	lsrs	r2, r2, #1
    tw4 += twMod4;
 8000d5a:	9602      	str	r6, [sp, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000d5c:	9208      	str	r2, [sp, #32]
 8000d5e:	f000 8134 	beq.w	8000fca <arm_cfft_radix8by4_f32+0x366>
 8000d62:	4693      	mov	fp, r2
 8000d64:	f100 0210 	add.w	r2, r0, #16
 8000d68:	3b0c      	subs	r3, #12
 8000d6a:	f107 0920 	add.w	r9, r7, #32
 8000d6e:	920d      	str	r2, [sp, #52]	; 0x34
 8000d70:	460a      	mov	r2, r1
 8000d72:	f107 0830 	add.w	r8, r7, #48	; 0x30
 8000d76:	4423      	add	r3, r4
 8000d78:	f102 0e10 	add.w	lr, r2, #16
 8000d7c:	f1a5 060c 	sub.w	r6, r5, #12
 8000d80:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000d84:	f105 0010 	add.w	r0, r5, #16
 8000d88:	390c      	subs	r1, #12
 8000d8a:	f1a4 0c0c 	sub.w	ip, r4, #12
 8000d8e:	f104 0210 	add.w	r2, r4, #16
 8000d92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000d94:	ed52 5a02 	vldr	s11, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000d98:	f1bb 0b01 	subs.w	fp, fp, #1
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000d9c:	ed10 5a02 	vldr	s10, [r0, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000da0:	f107 0708 	add.w	r7, r7, #8
      p1ap3_0 = p1[0] + p3[0];
 8000da4:	ed5e 3a02 	vldr	s7, [lr, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000da8:	f1a6 0608 	sub.w	r6, r6, #8
      p1ap3_0 = p1[0] + p3[0];
 8000dac:	ed17 7a04 	vldr	s14, [r7, #-16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000db0:	ee35 4a25 	vadd.f32	s8, s10, s11
      p1ap3_1 = p1[1] + p3[1];
 8000db4:	ed5e 6a01 	vldr	s13, [lr, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000db8:	f10a 0a08 	add.w	sl, sl, #8
      p1ap3_0 = p1[0] + p3[0];
 8000dbc:	ee37 1a23 	vadd.f32	s2, s14, s7
      p1ap3_1 = p1[1] + p3[1];
 8000dc0:	ed57 7a03 	vldr	s15, [r7, #-12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000dc4:	ed52 4a01 	vldr	s9, [r2, #-4]
      p1sp3_0 = p1[0] - p3[0];
 8000dc8:	ee37 7a63 	vsub.f32	s14, s14, s7
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000dcc:	ed10 6a01 	vldr	s12, [r0, #-4]
      p1ap3_1 = p1[1] + p3[1];
 8000dd0:	ee77 3aa6 	vadd.f32	s7, s15, s13
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000dd4:	ee34 4a01 	vadd.f32	s8, s8, s2
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000dd8:	f100 0008 	add.w	r0, r0, #8
      p1sp3_1 = p1[1] - p3[1];
 8000ddc:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000de0:	f1a1 0108 	sub.w	r1, r1, #8
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000de4:	ee31 1a45 	vsub.f32	s2, s2, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000de8:	f109 0910 	add.w	r9, r9, #16
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000dec:	ed07 4a04 	vstr	s8, [r7, #-16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000df0:	ee77 0a64 	vsub.f32	s1, s14, s9
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000df4:	ed12 4a01 	vldr	s8, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000df8:	ee37 0ac5 	vsub.f32	s0, s15, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000dfc:	ed50 6a03 	vldr	s13, [r0, #-12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000e00:	ee77 7ae5 	vsub.f32	s15, s15, s11
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000e04:	ee31 1a65 	vsub.f32	s2, s2, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e08:	f10e 0e08 	add.w	lr, lr, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000e0c:	ee76 6a84 	vadd.f32	s13, s13, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e10:	f1ac 0c08 	sub.w	ip, ip, #8
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000e14:	ee30 0a25 	vadd.f32	s0, s0, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e18:	f108 0818 	add.w	r8, r8, #24
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000e1c:	ee37 5a85 	vadd.f32	s10, s15, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e20:	f102 0208 	add.w	r2, r2, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000e24:	ee76 6aa3 	vadd.f32	s13, s13, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e28:	f1a3 0308 	sub.w	r3, r3, #8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000e2c:	ee70 0a86 	vadd.f32	s1, s1, s12
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000e30:	ee37 7a46 	vsub.f32	s14, s14, s12
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000e34:	ed47 6a03 	vstr	s13, [r7, #-12]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000e38:	ee33 6ac6 	vsub.f32	s12, s7, s12

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000e3c:	eddc 7a04 	vldr	s15, [ip, #16]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000e40:	edd3 9a04 	vldr	s19, [r3, #16]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000e44:	ee37 7a24 	vadd.f32	s14, s14, s9
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000e48:	ed96 8a04 	vldr	s16, [r6, #16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000e4c:	ee36 4a64 	vsub.f32	s8, s12, s9
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000e50:	edd1 5a04 	vldr	s11, [r1, #16]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000e54:	ee38 3a27 	vadd.f32	s6, s16, s15
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000e58:	ed93 9a03 	vldr	s18, [r3, #12]
 8000e5c:	ee75 2aa9 	vadd.f32	s5, s11, s19
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000e60:	ed9c 2a03 	vldr	s4, [ip, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000e64:	ee75 3ae9 	vsub.f32	s7, s11, s19
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000e68:	edd1 8a03 	vldr	s17, [r1, #12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000e6c:	edd6 4a03 	vldr	s9, [r6, #12]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000e70:	ee78 6a09 	vadd.f32	s13, s16, s18
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000e74:	ee33 6a22 	vadd.f32	s12, s6, s5
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000e78:	ee34 aa82 	vadd.f32	s20, s9, s4
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000e7c:	ee73 1ac2 	vsub.f32	s3, s7, s4
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000e80:	ed86 6a04 	vstr	s12, [r6, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000e84:	ee76 6ae7 	vsub.f32	s13, s13, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000e88:	edd3 aa03 	vldr	s21, [r3, #12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000e8c:	ee77 7a89 	vadd.f32	s15, s15, s18
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000e90:	ed91 6a03 	vldr	s12, [r1, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000e94:	ee71 1aa4 	vadd.f32	s3, s3, s9
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000e98:	ee73 4ae4 	vsub.f32	s9, s7, s9
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000e9c:	ee36 6a2a 	vadd.f32	s12, s12, s21
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000ea0:	ee76 6ae8 	vsub.f32	s13, s13, s17
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000ea4:	ee77 7ae8 	vsub.f32	s15, s15, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000ea8:	ee36 6a0a 	vadd.f32	s12, s12, s20
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000eac:	ee73 5a65 	vsub.f32	s11, s6, s11
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000eb0:	ee72 2ac3 	vsub.f32	s5, s5, s6
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000eb4:	ee3a 3a68 	vsub.f32	s6, s20, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000eb8:	ed86 6a03 	vstr	s12, [r6, #12]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000ebc:	ee74 4a82 	vadd.f32	s9, s9, s4
      twR = *tw2++;
 8000ec0:	ed5a 3a04 	vldr	s7, [sl, #-16]
      twI = *tw2++;
 8000ec4:	ed1a 2a03 	vldr	s4, [sl, #-12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000ec8:	ee37 6ac8 	vsub.f32	s12, s15, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000ecc:	ee33 3a49 	vsub.f32	s6, s6, s18
      m3 = t2[3] * twR;
 8000ed0:	ee66 7aa3 	vmul.f32	s15, s13, s7
      *pEnd2-- = m0 - m1;
 8000ed4:	ee23 8ae1 	vnmul.f32	s16, s7, s3
      *p2++ = m2 - m3;
 8000ed8:	ee62 8a60 	vnmul.f32	s17, s4, s1
      m1 = t2[1] * twI;
 8000edc:	ee20 9a02 	vmul.f32	s18, s0, s4
      *pEnd2-- = m2 + m3;
 8000ee0:	eee1 7a82 	vfma.f32	s15, s3, s4
      *pEnd2-- = m0 - m1;
 8000ee4:	eea6 8a82 	vfma.f32	s16, s13, s4
      *p2++ = m0 + m1;
 8000ee8:	eeb0 2a49 	vmov.f32	s4, s18
      *p2++ = m2 - m3;
 8000eec:	eef0 6a68 	vmov.f32	s13, s17
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000ef0:	ee75 5ae9 	vsub.f32	s11, s11, s19
      *p2++ = m0 + m1;
 8000ef4:	eea0 2aa3 	vfma.f32	s4, s1, s7
      *p2++ = m2 - m3;
 8000ef8:	eee0 6a23 	vfma.f32	s13, s0, s7
      *p2++ = m0 + m1;
 8000efc:	ed00 2a04 	vstr	s4, [r0, #-16]
      *p2++ = m2 - m3;
 8000f00:	ed40 6a03 	vstr	s13, [r0, #-12]
      *pEnd2-- = m0 - m1;
 8000f04:	ed81 8a04 	vstr	s16, [r1, #16]
      *pEnd2-- = m2 + m3;
 8000f08:	edc1 7a03 	vstr	s15, [r1, #12]
      twI = tw3[1];
 8000f0c:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
      twR = tw3[0];
 8000f10:	ed59 3a08 	vldr	s7, [r9, #-32]	; 0xffffffe0
      *p3++ = m2 - m3;
 8000f14:	ee27 2ac1 	vnmul.f32	s4, s15, s2
      m1 = t3[1] * twI;
 8000f18:	ee64 1a27 	vmul.f32	s3, s8, s15
      m1 =  t3[2] * twI;
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
 8000f1c:	ee65 6aa7 	vmul.f32	s13, s11, s15

      *pEnd3-- = m0 - m1;
 8000f20:	ee67 7ac3 	vnmul.f32	s15, s15, s6
      *p3++ = m2 - m3;
 8000f24:	eef0 5a42 	vmov.f32	s11, s4
      *pEnd3-- = m3 - m2;
 8000f28:	eee3 6a63 	vfms.f32	s13, s6, s7
      *pEnd3-- = m0 - m1;
 8000f2c:	eee2 7aa3 	vfma.f32	s15, s5, s7
      *p3++ = m2 - m3;
 8000f30:	eee4 5a23 	vfma.f32	s11, s8, s7
      *p3++ = m0 + m1;
 8000f34:	eee1 1a23 	vfma.f32	s3, s2, s7
 8000f38:	ed4e 1a04 	vstr	s3, [lr, #-16]
      *p3++ = m2 - m3;
 8000f3c:	ed4e 5a03 	vstr	s11, [lr, #-12]
      *pEnd3-- = m0 - m1;
 8000f40:	edcc 7a04 	vstr	s15, [ip, #16]
      *pEnd3-- = m3 - m2;
 8000f44:	edcc 6a03 	vstr	s13, [ip, #12]

      /* COL 4 */
      twR = tw4[0];
 8000f48:	ed58 6a0c 	vldr	s13, [r8, #-48]	; 0xffffffd0
      twI = tw4[1];
 8000f4c:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
 8000f50:	ee66 5a26 	vmul.f32	s11, s12, s13
      *p4++ = m2 - m3;
 8000f54:	ee67 3ac7 	vnmul.f32	s7, s15, s14
      m1 = t4[1] * twI;
 8000f58:	ee25 3a27 	vmul.f32	s6, s10, s15

      *pEnd4-- = m0 - m1;
 8000f5c:	ee26 4ae4 	vnmul.f32	s8, s13, s9
      *p4++ = m2 - m3;
 8000f60:	eee5 3a26 	vfma.f32	s7, s10, s13
      *p4++ = m0 + m1;
 8000f64:	eea7 3a26 	vfma.f32	s6, s14, s13
      *pEnd4-- = m0 - m1;
 8000f68:	eef0 6a44 	vmov.f32	s13, s8
      *pEnd4-- = m2 + m3;
 8000f6c:	eeb0 7a65 	vmov.f32	s14, s11
      *pEnd4-- = m0 - m1;
 8000f70:	eee6 6a27 	vfma.f32	s13, s12, s15
      *pEnd4-- = m2 + m3;
 8000f74:	eea4 7aa7 	vfma.f32	s14, s9, s15
      *p4++ = m2 - m3;
 8000f78:	ed42 3a03 	vstr	s7, [r2, #-12]
      *p4++ = m0 + m1;
 8000f7c:	ed02 3a04 	vstr	s6, [r2, #-16]
      *pEnd4-- = m0 - m1;
 8000f80:	edc3 6a04 	vstr	s13, [r3, #16]
      *pEnd4-- = m2 + m3;
 8000f84:	ed83 7a03 	vstr	s14, [r3, #12]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000f88:	f47f af04 	bne.w	8000d94 <arm_cfft_radix8by4_f32+0x130>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000f8c:	9b08      	ldr	r3, [sp, #32]
 8000f8e:	9a04      	ldr	r2, [sp, #16]
 8000f90:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000f94:	9204      	str	r2, [sp, #16]
      twI = *tw2++;
 8000f96:	9a03      	ldr	r2, [sp, #12]
 8000f98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000f9c:	9203      	str	r2, [sp, #12]
      *p2++ = m2 - m3;
 8000f9e:	9a06      	ldr	r2, [sp, #24]
 8000fa0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000fa4:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
 8000fa6:	9a01      	ldr	r2, [sp, #4]
 8000fa8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000fac:	9201      	str	r2, [sp, #4]
      *p3++ = m2 - m3;
 8000fae:	9a00      	ldr	r2, [sp, #0]
 8000fb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000fb4:	9200      	str	r2, [sp, #0]
      *p4++ = m2 - m3;
 8000fb6:	9a05      	ldr	r2, [sp, #20]
 8000fb8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      tw4 += twMod4;
 8000fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      *p4++ = m2 - m3;
 8000fc0:	9205      	str	r2, [sp, #20]
      tw4 += twMod4;
 8000fc2:	9a02      	ldr	r2, [sp, #8]
 8000fc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000fc8:	9302      	str	r3, [sp, #8]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000fca:	9b06      	ldr	r3, [sp, #24]
 8000fcc:	9e05      	ldr	r6, [sp, #20]
    p1ap3_0 = p1[0] + p3[0];
 8000fce:	9f04      	ldr	r7, [sp, #16]
 8000fd0:	9900      	ldr	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000fd2:	edd6 2a00 	vldr	s5, [r6]
 8000fd6:	ed93 3a00 	vldr	s6, [r3]
    p1ap3_0 = p1[0] + p3[0];
 8000fda:	edd1 6a00 	vldr	s13, [r1]
 8000fde:	ed97 7a00 	vldr	s14, [r7]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000fe2:	ee33 6a22 	vadd.f32	s12, s6, s5
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000fe6:	ed96 2a01 	vldr	s4, [r6, #4]
    p1ap3_0 = p1[0] + p3[0];
 8000fea:	ee37 5a26 	vadd.f32	s10, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000fee:	edd1 4a01 	vldr	s9, [r1, #4]
    p1sp3_0 = p1[0] - p3[0];
 8000ff2:	ee37 7a66 	vsub.f32	s14, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000ff6:	edd7 5a01 	vldr	s11, [r7, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000ffe:	ee36 6a05 	vadd.f32	s12, s12, s10

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001002:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001006:	ee77 3a42 	vsub.f32	s7, s14, s4
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800100a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    p1sp3_1 = p1[1] - p3[1];
 800100c:	ee75 6ae4 	vsub.f32	s13, s11, s9
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001010:	980c      	ldr	r0, [sp, #48]	; 0x30
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001012:	ed87 6a00 	vstr	s12, [r7]
    p1ap3_1 = p1[1] + p3[1];
 8001016:	ee75 5aa4 	vadd.f32	s11, s11, s9
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800101a:	edd6 1a01 	vldr	s3, [r6, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800101e:	ee73 3aa7 	vadd.f32	s7, s7, s15
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001022:	ed93 6a01 	vldr	s12, [r3, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001026:	ee75 4a43 	vsub.f32	s9, s10, s6
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800102a:	ee36 4ac3 	vsub.f32	s8, s13, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800102e:	ee36 6a21 	vadd.f32	s12, s12, s3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001032:	ee35 5ae7 	vsub.f32	s10, s11, s15
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001036:	ee77 7a67 	vsub.f32	s15, s14, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800103a:	ee36 7ae2 	vsub.f32	s14, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800103e:	ee76 6a25 	vadd.f32	s13, s12, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001042:	ee34 4a22 	vadd.f32	s8, s8, s5
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001046:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800104a:	edc7 6a01 	vstr	s13, [r7, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800104e:	ee35 5a42 	vsub.f32	s10, s10, s4
    twI = tw2[1];
 8001052:	9f03      	ldr	r7, [sp, #12]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001054:	ee77 7a82 	vadd.f32	s15, s15, s4
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001058:	ee37 7a03 	vadd.f32	s14, s14, s6
    twI = tw2[1];
 800105c:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw2[0];
 8001060:	edd7 5a00 	vldr	s11, [r7]
    m1 = t2[1] * twI;
 8001064:	ee24 6a26 	vmul.f32	s12, s8, s13
    twI = tw3[1];
 8001068:	9f01      	ldr	r7, [sp, #4]
    *p2++ = m2 - m3;
 800106a:	ee66 6ae3 	vnmul.f32	s13, s13, s7
    *p2++ = m0 + m1;
 800106e:	eea3 6aa5 	vfma.f32	s12, s7, s11
    *p2++ = m2 - m3;
 8001072:	eee4 6a25 	vfma.f32	s13, s8, s11
    *p2++ = m0 + m1;
 8001076:	ed83 6a00 	vstr	s12, [r3]
    *p2++ = m2 - m3;
 800107a:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw3[1];
 800107e:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw3[0];
 8001082:	edd7 5a00 	vldr	s11, [r7]
    m1 = t3[1] * twI;
 8001086:	ee25 6a26 	vmul.f32	s12, s10, s13
    *p3++ = m0 + m1;
 800108a:	9b00      	ldr	r3, [sp, #0]
    *p3++ = m2 - m3;
 800108c:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *p3++ = m0 + m1;
 8001090:	eea4 6aa5 	vfma.f32	s12, s9, s11
    *p3++ = m2 - m3;
 8001094:	eee5 6a25 	vfma.f32	s13, s10, s11
    *p3++ = m0 + m1;
 8001098:	ed83 6a00 	vstr	s12, [r3]
    *p3++ = m2 - m3;
 800109c:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw4[1];
 80010a0:	9b02      	ldr	r3, [sp, #8]
 80010a2:	edd3 6a01 	vldr	s13, [r3, #4]
    twR = tw4[0];
 80010a6:	edd3 5a00 	vldr	s11, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80010aa:	2304      	movs	r3, #4
    m1 = t4[1] * twI;
 80010ac:	ee27 6a26 	vmul.f32	s12, s14, s13
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80010b0:	9100      	str	r1, [sp, #0]
    *p4++ = m2 - m3;
 80010b2:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    *p4++ = m0 + m1;
 80010b6:	eea7 6aa5 	vfma.f32	s12, s15, s11
    *p4++ = m2 - m3;
 80010ba:	eee7 6a25 	vfma.f32	s13, s14, s11
    *p4++ = m0 + m1;
 80010be:	ed86 6a00 	vstr	s12, [r6]
    *p4++ = m2 - m3;
 80010c2:	edc6 6a01 	vstr	s13, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80010c6:	f000 f88f 	bl	80011e8 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80010ca:	4628      	mov	r0, r5
 80010cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80010ce:	2304      	movs	r3, #4
 80010d0:	9900      	ldr	r1, [sp, #0]
 80010d2:	686a      	ldr	r2, [r5, #4]
 80010d4:	f000 f888 	bl	80011e8 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80010d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80010da:	686a      	ldr	r2, [r5, #4]
 80010dc:	2304      	movs	r3, #4
 80010de:	9900      	ldr	r1, [sp, #0]
 80010e0:	f000 f882 	bl	80011e8 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80010e4:	2304      	movs	r3, #4
 80010e6:	686a      	ldr	r2, [r5, #4]
 80010e8:	4620      	mov	r0, r4
 80010ea:	9900      	ldr	r1, [sp, #0]
}
 80010ec:	b00f      	add	sp, #60	; 0x3c
 80010ee:	ecbd 8b06 	vpop	{d8-d10}
 80010f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80010f6:	f000 b877 	b.w	80011e8 <arm_radix8_butterfly_f32>
 80010fa:	bf00      	nop

080010fc <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80010fc:	2a01      	cmp	r2, #1
{
 80010fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001102:	4606      	mov	r6, r0
 8001104:	4617      	mov	r7, r2
 8001106:	460c      	mov	r4, r1
 8001108:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 800110a:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 800110c:	d059      	beq.n	80011c2 <arm_cfft_f32+0xc6>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 800110e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001112:	d051      	beq.n	80011b8 <arm_cfft_f32+0xbc>
 8001114:	d80f      	bhi.n	8001136 <arm_cfft_f32+0x3a>
 8001116:	2d40      	cmp	r5, #64	; 0x40
 8001118:	d014      	beq.n	8001144 <arm_cfft_f32+0x48>
 800111a:	d949      	bls.n	80011b0 <arm_cfft_f32+0xb4>
 800111c:	2d80      	cmp	r5, #128	; 0x80
 800111e:	d103      	bne.n	8001128 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001120:	4621      	mov	r1, r4
 8001122:	4630      	mov	r0, r6
 8001124:	f7ff fcd2 	bl	8000acc <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8001128:	f1b8 0f00 	cmp.w	r8, #0
 800112c:	d113      	bne.n	8001156 <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
 800112e:	2f01      	cmp	r7, #1
 8001130:	d018      	beq.n	8001164 <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 8001132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8001136:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800113a:	d03d      	beq.n	80011b8 <arm_cfft_f32+0xbc>
 800113c:	d931      	bls.n	80011a2 <arm_cfft_f32+0xa6>
 800113e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8001142:	d1f1      	bne.n	8001128 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8001144:	2301      	movs	r3, #1
 8001146:	6872      	ldr	r2, [r6, #4]
 8001148:	4629      	mov	r1, r5
 800114a:	4620      	mov	r0, r4
 800114c:	f000 f84c 	bl	80011e8 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
 8001150:	f1b8 0f00 	cmp.w	r8, #0
 8001154:	d0eb      	beq.n	800112e <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8001156:	68b2      	ldr	r2, [r6, #8]
 8001158:	4620      	mov	r0, r4
 800115a:	89b1      	ldrh	r1, [r6, #12]
 800115c:	f7ff f8c0 	bl	80002e0 <arm_bitreversal_32>
  if (ifftFlag == 1U)
 8001160:	2f01      	cmp	r7, #1
 8001162:	d1e6      	bne.n	8001132 <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
 8001164:	ee07 5a90 	vmov	s15, r5
 8001168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001170:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
 8001174:	2d00      	cmp	r5, #0
 8001176:	d0dc      	beq.n	8001132 <arm_cfft_f32+0x36>
 8001178:	f104 0108 	add.w	r1, r4, #8
 800117c:	2300      	movs	r3, #0
      *pSrc++ *=   invL ;
 800117e:	ed11 7a02 	vldr	s14, [r1, #-8]
    for (l= 0; l < L; l++)
 8001182:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 8001184:	ed51 7a01 	vldr	s15, [r1, #-4]
    for (l= 0; l < L; l++)
 8001188:	3108      	adds	r1, #8
 800118a:	429d      	cmp	r5, r3
      *pSrc++ *=   invL ;
 800118c:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
 8001190:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
 8001194:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
 8001198:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
 800119c:	d1ef      	bne.n	800117e <arm_cfft_f32+0x82>
}
 800119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 80011a2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80011a6:	d0cd      	beq.n	8001144 <arm_cfft_f32+0x48>
 80011a8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80011ac:	d0b8      	beq.n	8001120 <arm_cfft_f32+0x24>
 80011ae:	e7bb      	b.n	8001128 <arm_cfft_f32+0x2c>
 80011b0:	2d10      	cmp	r5, #16
 80011b2:	d0b5      	beq.n	8001120 <arm_cfft_f32+0x24>
 80011b4:	2d20      	cmp	r5, #32
 80011b6:	d1b7      	bne.n	8001128 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80011b8:	4621      	mov	r1, r4
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff fd52 	bl	8000c64 <arm_cfft_radix8by4_f32>
    break;
 80011c0:	e7b2      	b.n	8001128 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
 80011c2:	b175      	cbz	r5, 80011e2 <arm_cfft_f32+0xe6>
 80011c4:	310c      	adds	r1, #12
 80011c6:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
 80011ca:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
 80011ce:	f10c 0c01 	add.w	ip, ip, #1
 80011d2:	3108      	adds	r1, #8
      *pSrc = -*pSrc;
 80011d4:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 80011d8:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
 80011da:	ed41 7a04 	vstr	s15, [r1, #-16]
    for (l = 0; l < L; l++)
 80011de:	d1f4      	bne.n	80011ca <arm_cfft_f32+0xce>
 80011e0:	e795      	b.n	800110e <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0a5      	beq.n	8001132 <arm_cfft_f32+0x36>
 80011e6:	e7b6      	b.n	8001156 <arm_cfft_f32+0x5a>

080011e8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80011e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ec:	ed2d 8b10 	vpush	{d8-d15}
 80011f0:	b091      	sub	sp, #68	; 0x44
 80011f2:	468a      	mov	sl, r1
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 80011f4:	468b      	mov	fp, r1
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80011f6:	eddf babe 	vldr	s23, [pc, #760]	; 80014f0 <arm_radix8_butterfly_f32+0x308>
{
 80011fa:	900e      	str	r0, [sp, #56]	; 0x38
 80011fc:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8001200:	4603      	mov	r3, r0
 8001202:	3304      	adds	r3, #4
 8001204:	930f      	str	r3, [sp, #60]	; 0x3c
      n2 = n2 >> 3;
 8001206:	ea4f 07db 	mov.w	r7, fp, lsr #3
 800120a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800120c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
      i1 = 0;
 8001210:	f04f 0e00 	mov.w	lr, #0
 8001214:	eb02 1147 	add.w	r1, r2, r7, lsl #5
      n2 = n2 >> 3;
 8001218:	970b      	str	r7, [sp, #44]	; 0x2c
      i1 = 0;
 800121a:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 800121e:	eb01 1007 	add.w	r0, r1, r7, lsl #4
 8001222:	eba7 0287 	sub.w	r2, r7, r7, lsl #2
 8001226:	00e4      	lsls	r4, r4, #3
 8001228:	9001      	str	r0, [sp, #4]
 800122a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800122e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 8001232:	9403      	str	r4, [sp, #12]
 8001234:	017d      	lsls	r5, r7, #5
 8001236:	00c4      	lsls	r4, r0, #3
 8001238:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800123c:	9502      	str	r5, [sp, #8]
 800123e:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8001242:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001244:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8001248:	9406      	str	r4, [sp, #24]
 800124a:	f108 0004 	add.w	r0, r8, #4
 800124e:	f109 0404 	add.w	r4, r9, #4
 8001252:	eb01 0cc7 	add.w	ip, r1, r7, lsl #3
 8001256:	442c      	add	r4, r5
 8001258:	4428      	add	r0, r5
 800125a:	0135      	lsls	r5, r6, #4
 800125c:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 8001260:	9504      	str	r5, [sp, #16]
 8001262:	00f5      	lsls	r5, r6, #3
 8001264:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8001266:	9505      	str	r5, [sp, #20]
 8001268:	9d01      	ldr	r5, [sp, #4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800126a:	ed10 7a01 	vldr	s14, [r0, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
 800126e:	44de      	add	lr, fp
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001270:	edd2 9a00 	vldr	s19, [r2]
 8001274:	ed97 5a00 	vldr	s10, [r7]
      } while (i1 < fftLen);
 8001278:	45f2      	cmp	sl, lr
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800127a:	edd5 4a00 	vldr	s9, [r5]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800127e:	ed16 6a01 	vldr	s12, [r6, #-4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001282:	ee39 9a85 	vadd.f32	s18, s19, s10
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001286:	ed9c 4a00 	vldr	s8, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800128a:	ee77 5a24 	vadd.f32	s11, s14, s9
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800128e:	edd1 6a00 	vldr	s13, [r1]
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001292:	ee77 0a64 	vsub.f32	s1, s14, s9
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001296:	ed54 7a01 	vldr	s15, [r4, #-4]
 800129a:	ee74 4ac7 	vsub.f32	s9, s9, s14
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800129e:	ee36 1a26 	vadd.f32	s2, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80012a2:	ee77 8a84 	vadd.f32	s17, s15, s8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80012a6:	ee76 6a66 	vsub.f32	s13, s12, s13
         r1 = r1 + r3;
 80012aa:	ee31 7a25 	vadd.f32	s14, s2, s11
         r2 = r2 + r4;
 80012ae:	ee38 6a89 	vadd.f32	s12, s17, s18
         t1 = r1 - r3;
 80012b2:	ee31 1a65 	vsub.f32	s2, s2, s11
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80012b6:	ee77 7ac4 	vsub.f32	s15, s15, s8
         pSrc[2 * i1] = r1 + r2;
 80012ba:	ee77 5a06 	vadd.f32	s11, s14, s12
         pSrc[2 * i5] = r1 - r2;
 80012be:	ee37 7a46 	vsub.f32	s14, s14, s12
         r1 = (r6 - r8) * C81;
 80012c2:	ee77 2ae9 	vsub.f32	s5, s15, s19
         pSrc[2 * i1] = r1 + r2;
 80012c6:	ed46 5a01 	vstr	s11, [r6, #-4]
         t1 = r5 - r1;
 80012ca:	eeb0 8a66 	vmov.f32	s16, s13
         pSrc[2 * i5] = r1 - r2;
 80012ce:	ed81 7a00 	vstr	s14, [r1]
         r6 = (r6 + r8) * C81;
 80012d2:	ee77 7ac5 	vsub.f32	s15, s15, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80012d6:	ed94 aa00 	vldr	s20, [r4]
         r1 = (r6 - r8) * C81;
 80012da:	ee72 2a85 	vadd.f32	s5, s5, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80012de:	eddc 1a01 	vldr	s3, [ip, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80012e2:	ed91 7a01 	vldr	s14, [r1, #4]
         r6 = (r6 + r8) * C81;
 80012e6:	ee77 7aa9 	vadd.f32	s15, s15, s19
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80012ea:	ee7a 3a61 	vsub.f32	s7, s20, s3
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80012ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80012f2:	ed92 2a01 	vldr	s4, [r2, #4]
         t1 = r5 - r1;
 80012f6:	eea2 8aeb 	vfms.f32	s16, s5, s23
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80012fa:	edd6 5a00 	vldr	s11, [r6]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80012fe:	ee7a 1a21 	vadd.f32	s3, s20, s3
         r2 = (s6 - s8) * C81;
 8001302:	ee33 3ac2 	vsub.f32	s6, s7, s4
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001306:	ed90 0a00 	vldr	s0, [r0]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800130a:	ee35 4ac7 	vsub.f32	s8, s11, s14
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800130e:	ed95 5a01 	vldr	s10, [r5, #4]
         s6 = (s6 + s8) * C81;
 8001312:	ee73 3ac6 	vsub.f32	s7, s7, s12
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001316:	ee70 aa05 	vadd.f32	s21, s0, s10
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800131a:	ee75 5a87 	vadd.f32	s11, s11, s14
         r2 = (s6 - s8) * C81;
 800131e:	ee33 3a06 	vadd.f32	s6, s6, s12
         s6 = (s6 + s8) * C81;
 8001322:	ee33 7a82 	vadd.f32	s14, s7, s4
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8001326:	ee70 3a45 	vsub.f32	s7, s0, s10
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800132a:	ee35 5a40 	vsub.f32	s10, s10, s0
         t2 = s5 - r2;
 800132e:	eeb0 0a44 	vmov.f32	s0, s8
         s7 = s7 + s6;
 8001332:	eeb0 aa63 	vmov.f32	s20, s7
 8001336:	eef0 9a48 	vmov.f32	s19, s16
         t2 = s5 - r2;
 800133a:	eea3 0a6b 	vfms.f32	s0, s6, s23
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800133e:	ee32 2a06 	vadd.f32	s4, s4, s12
         r5 = r5 + r1;
 8001342:	eee2 6aab 	vfma.f32	s13, s5, s23
         t2 = r1 - s3;
 8001346:	ee35 6aea 	vsub.f32	s12, s11, s21
         s7 = s7 + s6;
 800134a:	eea7 aa2b 	vfma.f32	s20, s14, s23
 800134e:	eee7 9a6b 	vfms.f32	s19, s14, s23
 8001352:	eea7 5a2b 	vfma.f32	s10, s14, s23
         r7 = r7 + r6;
 8001356:	eef0 2a60 	vmov.f32	s5, s1
         r1 = r1 + s3;
 800135a:	ee35 7aaa 	vadd.f32	s14, s11, s21
 800135e:	eef0 5a40 	vmov.f32	s11, s0
         r7 = r7 + r6;
 8001362:	eee7 2aab 	vfma.f32	s5, s15, s23
         s5 = s5 + r2;
 8001366:	eea3 4a2b 	vfma.f32	s8, s6, s23
 800136a:	eee7 4aab 	vfma.f32	s9, s15, s23
 800136e:	eee7 5aeb 	vfms.f32	s11, s15, s23
         r2 = r2 + r4;
 8001372:	ee71 aa82 	vadd.f32	s21, s3, s4
         pSrc[2 * i3]     = t1 + s3;
 8001376:	ee31 ba42 	vsub.f32	s22, s2, s4
         pSrc[2 * i7]     = t1 - s3;
 800137a:	ee71 7a61 	vsub.f32	s15, s2, s3
         pSrc[2 * i3 + 1] = t2 - r3;
 800137e:	ee36 3a68 	vsub.f32	s6, s12, s17
         pSrc[2 * i7 + 1] = t2 + r3;
 8001382:	ee36 6a49 	vsub.f32	s12, s12, s18
         pSrc[2 * i1 + 1] = r1 + r2;
 8001386:	ee37 1a2a 	vadd.f32	s2, s14, s21
         pSrc[2 * i7]     = t1 - s3;
 800138a:	ee77 7a82 	vadd.f32	s15, s15, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 800138e:	ee33 9a09 	vadd.f32	s18, s6, s18
         pSrc[2 * i2]     = r5 + s7;
 8001392:	ee36 2a8a 	vadd.f32	s4, s13, s20
         pSrc[2 * i1 + 1] = r1 + r2;
 8001396:	ed86 1a00 	vstr	s2, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 800139a:	ee34 3a62 	vsub.f32	s6, s8, s5
      } while (i1 < fftLen);
 800139e:	441e      	add	r6, r3
         pSrc[2 * i5 + 1] = r1 - r2;
 80013a0:	ee37 7a6a 	vsub.f32	s14, s14, s21
         pSrc[2 * i3]     = t1 + s3;
 80013a4:	ee7b 1a21 	vadd.f32	s3, s22, s3
         pSrc[2 * i7 + 1] = t2 + r3;
 80013a8:	ee36 6a28 	vadd.f32	s12, s12, s17
         pSrc[2 * i8]     = r5 - s7;
 80013ac:	ee76 6aca 	vsub.f32	s13, s13, s20
         pSrc[2 * i5 + 1] = r1 - r2;
 80013b0:	ed81 7a01 	vstr	s14, [r1, #4]
         pSrc[2 * i6]     = t1 + s8;
 80013b4:	ee73 3aa9 	vadd.f32	s7, s7, s19
         pSrc[2 * i3]     = t1 + s3;
 80013b8:	ed40 1a01 	vstr	s3, [r0, #-4]
         pSrc[2 * i4]     = t1 - s8;
 80013bc:	ee38 5a05 	vadd.f32	s10, s16, s10
         pSrc[2 * i7]     = t1 - s3;
 80013c0:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 80013c4:	ee32 4a84 	vadd.f32	s8, s5, s8
         pSrc[2 * i3 + 1] = t2 - r3;
 80013c8:	ed80 9a00 	vstr	s18, [r0]
         pSrc[2 * i6 + 1] = t2 - r8;
 80013cc:	ee70 4a24 	vadd.f32	s9, s0, s9
         pSrc[2 * i7 + 1] = t2 + r3;
 80013d0:	ed85 6a01 	vstr	s12, [r5, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 80013d4:	ee70 5aa5 	vadd.f32	s11, s1, s11
         pSrc[2 * i2]     = r5 + s7;
 80013d8:	ed04 2a01 	vstr	s4, [r4, #-4]
      } while (i1 < fftLen);
 80013dc:	4419      	add	r1, r3
         pSrc[2 * i8]     = r5 - s7;
 80013de:	edc7 6a00 	vstr	s13, [r7]
      } while (i1 < fftLen);
 80013e2:	4418      	add	r0, r3
         pSrc[2 * i6]     = t1 + s8;
 80013e4:	edcc 3a00 	vstr	s7, [ip]
      } while (i1 < fftLen);
 80013e8:	441d      	add	r5, r3
         pSrc[2 * i4]     = t1 - s8;
 80013ea:	ed82 5a00 	vstr	s10, [r2]
         pSrc[2 * i2 + 1] = s5 - r7;
 80013ee:	ed84 3a00 	vstr	s6, [r4]
      } while (i1 < fftLen);
 80013f2:	441c      	add	r4, r3
         pSrc[2 * i8 + 1] = s5 + r7;
 80013f4:	ed87 4a01 	vstr	s8, [r7, #4]
      } while (i1 < fftLen);
 80013f8:	441f      	add	r7, r3
         pSrc[2 * i6 + 1] = t2 - r8;
 80013fa:	edcc 4a01 	vstr	s9, [ip, #4]
      } while (i1 < fftLen);
 80013fe:	449c      	add	ip, r3
         pSrc[2 * i4 + 1] = t2 + r8;
 8001400:	edc2 5a01 	vstr	s11, [r2, #4]
      } while (i1 < fftLen);
 8001404:	441a      	add	r2, r3
 8001406:	f63f af30 	bhi.w	800126a <arm_radix8_butterfly_f32+0x82>

      if (n2 < 8)
 800140a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800140c:	2a07      	cmp	r2, #7
 800140e:	f240 819f 	bls.w	8001750 <arm_radix8_butterfly_f32+0x568>
 8001412:	9d02      	ldr	r5, [sp, #8]
 8001414:	f109 0908 	add.w	r9, r9, #8
 8001418:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800141a:	f108 080c 	add.w	r8, r8, #12
 800141e:	3508      	adds	r5, #8
 8001420:	9a06      	ldr	r2, [sp, #24]
 8001422:	9905      	ldr	r1, [sp, #20]
 8001424:	1975      	adds	r5, r6, r5
 8001426:	3208      	adds	r2, #8
 8001428:	9c03      	ldr	r4, [sp, #12]
 800142a:	3108      	adds	r1, #8
 800142c:	950a      	str	r5, [sp, #40]	; 0x28
 800142e:	4635      	mov	r5, r6
 8001430:	9804      	ldr	r0, [sp, #16]
 8001432:	3408      	adds	r4, #8
 8001434:	18aa      	adds	r2, r5, r2
 8001436:	1869      	adds	r1, r5, r1
 8001438:	3008      	adds	r0, #8
 800143a:	444e      	add	r6, r9
 800143c:	9205      	str	r2, [sp, #20]
 800143e:	462a      	mov	r2, r5
 8001440:	192c      	adds	r4, r5, r4
 8001442:	1828      	adds	r0, r5, r0
 8001444:	320c      	adds	r2, #12
 8001446:	9106      	str	r1, [sp, #24]
         break;

      ia1 = 0;
      j = 1;
 8001448:	f04f 0901 	mov.w	r9, #1
 800144c:	eb05 0108 	add.w	r1, r5, r8
      ia1 = 0;
 8001450:	f04f 0800 	mov.w	r8, #0
 8001454:	9609      	str	r6, [sp, #36]	; 0x24
 8001456:	9408      	str	r4, [sp, #32]
 8001458:	9007      	str	r0, [sp, #28]
 800145a:	9103      	str	r1, [sp, #12]
 800145c:	9204      	str	r2, [sp, #16]

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800145e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 8001460:	46ce      	mov	lr, r9
         si8 = pCoef[2 * ia7 + 1];
 8001462:	9e05      	ldr	r6, [sp, #20]
         id  = ia1 + twidCoefModifier;
 8001464:	4490      	add	r8, r2
         co2 = pCoef[2 * ia1];
 8001466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001468:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800146c:	eba8 0188 	sub.w	r1, r8, r8, lsl #2
 8001470:	ed92 fa00 	vldr	s30, [r2]
         co3 = pCoef[2 * ia2];
 8001474:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001478:	edd2 ea00 	vldr	s29, [r2]
         co4 = pCoef[2 * ia3];
 800147c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001480:	ed92 ea00 	vldr	s28, [r2]
         co5 = pCoef[2 * ia4];
 8001484:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001488:	edd2 da00 	vldr	s27, [r2]
         co6 = pCoef[2 * ia5];
 800148c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001490:	ed92 da00 	vldr	s26, [r2]
         co7 = pCoef[2 * ia6];
 8001494:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001498:	edd2 ca00 	vldr	s25, [r2]
         co8 = pCoef[2 * ia7];
 800149c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80014a0:	ed92 ca00 	vldr	s24, [r2]
         si8 = pCoef[2 * ia7 + 1];
 80014a4:	ed92 ba01 	vldr	s22, [r2, #4]
 80014a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
 80014ac:	edd2 aa01 	vldr	s21, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
 80014b0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80014b4:	ed92 aa01 	vldr	s20, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
 80014b8:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80014bc:	edd2 9a01 	vldr	s19, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
 80014c0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80014c4:	ed92 9a01 	vldr	s18, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
 80014c8:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80014cc:	edd2 7a01 	vldr	s15, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
 80014d0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
         si6 = pCoef[2 * ia5 + 1];
 80014d4:	edcd 7a01 	vstr	s15, [sp, #4]
         si7 = pCoef[2 * ia6 + 1];
 80014d8:	edd2 7a01 	vldr	s15, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
 80014dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         si7 = pCoef[2 * ia6 + 1];
 80014de:	edcd 7a02 	vstr	s15, [sp, #8]
         si8 = pCoef[2 * ia7 + 1];
 80014e2:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 80014e6:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80014ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80014ee:	e001      	b.n	80014f4 <arm_radix8_butterfly_f32+0x30c>
 80014f0:	3f3504f3 	.word	0x3f3504f3
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80014f4:	edd5 3a00 	vldr	s7, [r5]
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
 80014f8:	44de      	add	lr, fp
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80014fa:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80014fe:	edd4 6a00 	vldr	s13, [r4]
         } while (i1 < fftLen);
 8001502:	45f2      	cmp	sl, lr
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001504:	edd6 4a00 	vldr	s9, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001508:	ed17 4a01 	vldr	s8, [r7, #-4]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800150c:	ee37 6a26 	vadd.f32	s12, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001510:	ed91 3a00 	vldr	s6, [r1]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001514:	ee33 0aa4 	vadd.f32	s0, s7, s9
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001518:	edd2 5a00 	vldr	s11, [r2]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800151c:	ee77 8a66 	vsub.f32	s17, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001520:	edd0 7a00 	vldr	s15, [r0]
 8001524:	ee76 6ac7 	vsub.f32	s13, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001528:	ee34 5a25 	vadd.f32	s10, s8, s11
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800152c:	ed97 1a00 	vldr	s2, [r7]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001530:	ee73 0a27 	vadd.f32	s1, s6, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8001534:	ee73 7a67 	vsub.f32	s15, s6, s15
            r1 = r1 + r3;
 8001538:	ee35 2a06 	vadd.f32	s4, s10, s12
            r2 = r2 + r4;
 800153c:	ee30 7a80 	vadd.f32	s14, s1, s0
            t1 = r1 - r3;
 8001540:	ee35 6a46 	vsub.f32	s12, s10, s12
            r1 = (r6 - r8) * C81;
 8001544:	ee77 fae3 	vsub.f32	s31, s15, s7
            pSrc[2 * i1] = r1 + r2;
 8001548:	ee32 5a07 	vadd.f32	s10, s4, s14
            r6 = (r6 + r8) * C81;
 800154c:	ee77 7ae4 	vsub.f32	s15, s15, s9
            r2 = r1 - r2;
 8001550:	ee32 2a47 	vsub.f32	s4, s4, s14
            pSrc[2 * i1] = r1 + r2;
 8001554:	ed07 5a01 	vstr	s10, [r7, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001558:	ee74 5a65 	vsub.f32	s11, s8, s11
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800155c:	ed90 7a01 	vldr	s14, [r0, #4]
            r6 = (r6 + r8) * C81;
 8001560:	ee77 7aa3 	vadd.f32	s15, s15, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001564:	ed91 3a01 	vldr	s6, [r1, #4]
            r1 = (r6 - r8) * C81;
 8001568:	ee7f 4aa4 	vadd.f32	s9, s31, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800156c:	ed92 4a01 	vldr	s8, [r2, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001570:	ee33 5a47 	vsub.f32	s10, s6, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001574:	edd6 3a01 	vldr	s7, [r6, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001578:	ee71 2a44 	vsub.f32	s5, s2, s8
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800157c:	ed9c 8a00 	vldr	s16, [ip]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001580:	ee31 1a04 	vadd.f32	s2, s2, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001584:	ed95 4a01 	vldr	s8, [r5, #4]
 8001588:	eee7 6aab 	vfma.f32	s13, s15, s23
            s1 = (s6 - s8) * C81;
 800158c:	ee75 fa44 	vsub.f32	s31, s10, s8
            s6 = (s6 + s8) * C81;
 8001590:	ee35 5a63 	vsub.f32	s10, s10, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001594:	ee33 3a07 	vadd.f32	s6, s6, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001598:	ed94 7a01 	vldr	s14, [r4, #4]
            s1 = (s6 - s8) * C81;
 800159c:	ee7f faa3 	vadd.f32	s31, s31, s7
            s6 = (s6 + s8) * C81;
 80015a0:	ee35 5a04 	vadd.f32	s10, s10, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80015a4:	ee74 3a23 	vadd.f32	s7, s8, s7
            t1 = r5 - r1;
 80015a8:	eeb0 4a65 	vmov.f32	s8, s11
            r5 = r5 + r1;
 80015ac:	eee4 5aab 	vfma.f32	s11, s9, s23
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80015b0:	ee78 1a07 	vadd.f32	s3, s16, s14
            t1 = r5 - r1;
 80015b4:	eea4 4aeb 	vfms.f32	s8, s9, s23
            t2 = s5 - s1;
 80015b8:	eef0 4a62 	vmov.f32	s9, s5
            s5 = s5 + s1;
 80015bc:	eeef 2aab 	vfma.f32	s5, s31, s23
            t2 = s5 - s1;
 80015c0:	eeef 4aeb 	vfms.f32	s9, s31, s23
            r7 = r7 + r6;
 80015c4:	eef0 fa68 	vmov.f32	s31, s17
 80015c8:	eee7 faab 	vfma.f32	s31, s15, s23
            s6 = t2 - r8;
 80015cc:	ee74 6aa6 	vadd.f32	s13, s9, s13
 80015d0:	eee7 4aeb 	vfms.f32	s9, s15, s23
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80015d4:	ee78 7a47 	vsub.f32	s15, s16, s14
            t2 = s1 - s3;
 80015d8:	ee37 7a48 	vsub.f32	s14, s14, s16
            s7 = s7 + s6;
 80015dc:	eeb0 8a67 	vmov.f32	s16, s15
 80015e0:	eea5 7a2b 	vfma.f32	s14, s10, s23
            t2 = t2 + r8;
 80015e4:	ee78 4aa4 	vadd.f32	s9, s17, s9
            s7 = s7 + s6;
 80015e8:	eea5 8a2b 	vfma.f32	s16, s10, s23
            r1 = t1 + s3;
 80015ec:	ee76 8a63 	vsub.f32	s17, s12, s7
 80015f0:	ee36 6a43 	vsub.f32	s12, s12, s6
            t1 = t1 - s8;
 80015f4:	ee37 7a04 	vadd.f32	s14, s14, s8
 80015f8:	eea5 4a6b 	vfms.f32	s8, s10, s23
            t2 = s1 - s3;
 80015fc:	ee31 5a61 	vsub.f32	s10, s2, s3
            s1 = s1 + s3;
 8001600:	ee71 1a21 	vadd.f32	s3, s2, s3
            t1 = t1 - s3;
 8001604:	ee33 6a86 	vadd.f32	s12, s7, s12
            r6 = t1 + s8;
 8001608:	ee74 7a27 	vadd.f32	s15, s8, s15
            s2 = s2 + s4;
 800160c:	ee33 4a23 	vadd.f32	s8, s6, s7
            r1 = t1 + s3;
 8001610:	ee38 3a83 	vadd.f32	s6, s17, s6
            p2 = si6 * s6;
 8001614:	eddd 8a01 	vldr	s17, [sp, #4]
            pSrc[2 * i1 + 1] = s1 + s2;
 8001618:	ee71 3a84 	vadd.f32	s7, s3, s8
            s2 = s1 - s2;
 800161c:	ee71 1ac4 	vsub.f32	s3, s3, s8
            s1 = t2 - r3;
 8001620:	ee35 4a60 	vsub.f32	s8, s10, s1
 8001624:	ee35 5a40 	vsub.f32	s10, s10, s0
            pSrc[2 * i1 + 1] = s1 + s2;
 8001628:	edc7 3a00 	vstr	s7, [r7]
            p2 = si5 * s2;
 800162c:	ee29 1a21 	vmul.f32	s2, s18, s3
         } while (i1 < fftLen);
 8001630:	441f      	add	r7, r3
            s1 = t2 - r3;
 8001632:	ee34 0a00 	vadd.f32	s0, s8, s0
            t2 = t2 + r3;
 8001636:	ee70 0a85 	vadd.f32	s1, s1, s10
            pSrc[2 * i3 + 1] = p3 - p4;
 800163a:	ee23 5a4a 	vnmul.f32	s10, s6, s20
            p2 = si3 * s1;
 800163e:	ee2a 4a00 	vmul.f32	s8, s20, s0
            pSrc[2 * i5]     = p1 + p2;
 8001642:	eead 1a82 	vfma.f32	s2, s27, s4
            pSrc[2 * i3 + 1] = p3 - p4;
 8001646:	eeae 5a80 	vfma.f32	s10, s29, s0
            p2 = si7 * t2;
 800164a:	ed9d 0a02 	vldr	s0, [sp, #8]
            pSrc[2 * i3]     = p1 + p2;
 800164e:	eeae 4a83 	vfma.f32	s8, s29, s6
            pSrc[2 * i5 + 1] = p3 - p4;
 8001652:	ee62 3a49 	vnmul.f32	s7, s4, s18
            p2 = si7 * t2;
 8001656:	ee20 3a20 	vmul.f32	s6, s0, s1
            r1 = r5 + s7;
 800165a:	ee35 2a88 	vadd.f32	s4, s11, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 800165e:	eeed 3aa1 	vfma.f32	s7, s27, s3
            pSrc[2 * i5]     = p1 + p2;
 8001662:	ed82 1a00 	vstr	s2, [r2]
            s1 = s5 - r7;
 8001666:	ee72 1aef 	vsub.f32	s3, s5, s31
            pSrc[2 * i7]     = p1 + p2;
 800166a:	eeac 3a86 	vfma.f32	s6, s25, s12
            pSrc[2 * i7 + 1] = p3 - p4;
 800166e:	ee26 0a40 	vnmul.f32	s0, s12, s0
            pSrc[2 * i2 + 1] = p3 - p4;
 8001672:	ee22 6a6a 	vnmul.f32	s12, s4, s21
            r5 = r5 - s7;
 8001676:	ee75 5ac8 	vsub.f32	s11, s11, s16
            s5 = s5 + r7;
 800167a:	ee7f 2aa2 	vadd.f32	s5, s31, s5
            pSrc[2 * i5 + 1] = p3 - p4;
 800167e:	edc2 3a01 	vstr	s7, [r2, #4]
            pSrc[2 * i2 + 1] = p3 - p4;
 8001682:	eeaf 6a21 	vfma.f32	s12, s30, s3
            pSrc[2 * i3]     = p1 + p2;
 8001686:	ed0c 4a01 	vstr	s8, [ip, #-4]
            p2 = si2 * s1;
 800168a:	ee2a 8aa1 	vmul.f32	s16, s21, s3
            pSrc[2 * i3 + 1] = p3 - p4;
 800168e:	ed8c 5a00 	vstr	s10, [ip]
            pSrc[2 * i7 + 1] = p3 - p4;
 8001692:	eeac 0aa0 	vfma.f32	s0, s25, s1
            pSrc[2 * i7]     = p1 + p2;
 8001696:	ed84 3a00 	vstr	s6, [r4]
            p2 = si8 * s5;
 800169a:	ee6b 0a22 	vmul.f32	s1, s22, s5
         } while (i1 < fftLen);
 800169e:	441a      	add	r2, r3
            pSrc[2 * i2]     = p1 + p2;
 80016a0:	eeaf 8a02 	vfma.f32	s16, s30, s4
         } while (i1 < fftLen);
 80016a4:	449c      	add	ip, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 80016a6:	ee25 1acb 	vnmul.f32	s2, s11, s22
            pSrc[2 * i2 + 1] = p3 - p4;
 80016aa:	eeb0 2a46 	vmov.f32	s4, s12
            p2 = si6 * s6;
 80016ae:	ee68 3aa6 	vmul.f32	s7, s17, s13
            pSrc[2 * i6 + 1] = p3 - p4;
 80016b2:	ee67 1ae8 	vnmul.f32	s3, s15, s17
            pSrc[2 * i7 + 1] = p3 - p4;
 80016b6:	ed84 0a01 	vstr	s0, [r4, #4]
            p2 = si4 * t2;
 80016ba:	ee29 4aa4 	vmul.f32	s8, s19, s9
            pSrc[2 * i2 + 1] = p3 - p4;
 80016be:	ed81 2a01 	vstr	s4, [r1, #4]
            pSrc[2 * i4 + 1] = p3 - p4;
 80016c2:	ee27 6a69 	vnmul.f32	s12, s14, s19
            pSrc[2 * i2]     = p1 + p2;
 80016c6:	ed81 8a00 	vstr	s16, [r1]
            pSrc[2 * i8]     = p1 + p2;
 80016ca:	eeec 0a25 	vfma.f32	s1, s24, s11
         } while (i1 < fftLen);
 80016ce:	441c      	add	r4, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 80016d0:	eeac 1a22 	vfma.f32	s2, s24, s5
         } while (i1 < fftLen);
 80016d4:	4419      	add	r1, r3
            pSrc[2 * i6]     = p1 + p2;
 80016d6:	eeed 3a27 	vfma.f32	s7, s26, s15
            pSrc[2 * i6 + 1] = p3 - p4;
 80016da:	eeed 1a26 	vfma.f32	s3, s26, s13
            pSrc[2 * i4]     = p1 + p2;
 80016de:	eeae 4a07 	vfma.f32	s8, s28, s14
            pSrc[2 * i4 + 1] = p3 - p4;
 80016e2:	eeae 6a24 	vfma.f32	s12, s28, s9
            pSrc[2 * i8]     = p1 + p2;
 80016e6:	edc6 0a00 	vstr	s1, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
 80016ea:	ed86 1a01 	vstr	s2, [r6, #4]
         } while (i1 < fftLen);
 80016ee:	441e      	add	r6, r3
            pSrc[2 * i6]     = p1 + p2;
 80016f0:	edc0 3a00 	vstr	s7, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
 80016f4:	edc0 1a01 	vstr	s3, [r0, #4]
         } while (i1 < fftLen);
 80016f8:	4418      	add	r0, r3
            pSrc[2 * i4]     = p1 + p2;
 80016fa:	ed85 4a00 	vstr	s8, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
 80016fe:	ed85 6a01 	vstr	s12, [r5, #4]
         } while (i1 < fftLen);
 8001702:	441d      	add	r5, r3
 8001704:	f63f aef6 	bhi.w	80014f4 <arm_radix8_butterfly_f32+0x30c>

         j++;
      } while (j < n2);
 8001708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         j++;
 800170a:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 800170e:	3208      	adds	r2, #8
 8001710:	920a      	str	r2, [sp, #40]	; 0x28
 8001712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001714:	3208      	adds	r2, #8
 8001716:	9209      	str	r2, [sp, #36]	; 0x24
 8001718:	9a08      	ldr	r2, [sp, #32]
 800171a:	3208      	adds	r2, #8
 800171c:	9208      	str	r2, [sp, #32]
 800171e:	9a07      	ldr	r2, [sp, #28]
 8001720:	3208      	adds	r2, #8
 8001722:	9207      	str	r2, [sp, #28]
 8001724:	9a06      	ldr	r2, [sp, #24]
 8001726:	3208      	adds	r2, #8
 8001728:	9206      	str	r2, [sp, #24]
 800172a:	9a05      	ldr	r2, [sp, #20]
 800172c:	3208      	adds	r2, #8
 800172e:	9205      	str	r2, [sp, #20]
 8001730:	9a04      	ldr	r2, [sp, #16]
 8001732:	3208      	adds	r2, #8
 8001734:	9204      	str	r2, [sp, #16]
 8001736:	9a03      	ldr	r2, [sp, #12]
 8001738:	3208      	adds	r2, #8
 800173a:	9203      	str	r2, [sp, #12]
 800173c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800173e:	454a      	cmp	r2, r9
 8001740:	f47f ae8d 	bne.w	800145e <arm_radix8_butterfly_f32+0x276>

      twidCoefModifier <<= 3;
 8001744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001746:	4693      	mov	fp, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	b29b      	uxth	r3, r3
 800174c:	930c      	str	r3, [sp, #48]	; 0x30
   } while (n2 > 7);
 800174e:	e55a      	b.n	8001206 <arm_radix8_butterfly_f32+0x1e>
}
 8001750:	b011      	add	sp, #68	; 0x44
 8001752:	ecbd 8b10 	vpop	{d8-d15}
 8001756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800175a:	bf00      	nop

0800175c <arm_cmplx_mult_cmplx_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800175c:	b1eb      	cbz	r3, 800179a <arm_cmplx_mult_cmplx_f32+0x3e>
 800175e:	3008      	adds	r0, #8
 8001760:	3108      	adds	r1, #8
 8001762:	3208      	adds	r2, #8
  {
    /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */

    a = *pSrcA++;
    b = *pSrcA++;
 8001764:	ed50 7a01 	vldr	s15, [r0, #-4]
  while (blkCnt > 0U)
 8001768:	3208      	adds	r2, #8
    c = *pSrcB++;
 800176a:	ed51 6a02 	vldr	s13, [r1, #-8]
  while (blkCnt > 0U)
 800176e:	3b01      	subs	r3, #1
    d = *pSrcB++;
 8001770:	ed51 5a01 	vldr	s11, [r1, #-4]
  while (blkCnt > 0U)
 8001774:	f100 0008 	add.w	r0, r0, #8

    /* store result in destination buffer. */
    *pDst++ = (a * c) - (b * d);
    *pDst++ = (a * d) + (b * c);
 8001778:	ee27 7aa6 	vmul.f32	s14, s15, s13
    a = *pSrcA++;
 800177c:	ed10 6a04 	vldr	s12, [r0, #-16]
    *pDst++ = (a * c) - (b * d);
 8001780:	ee65 7ae7 	vnmul.f32	s15, s11, s15
  while (blkCnt > 0U)
 8001784:	f101 0108 	add.w	r1, r1, #8
    *pDst++ = (a * d) + (b * c);
 8001788:	eea6 7a25 	vfma.f32	s14, s12, s11
    *pDst++ = (a * c) - (b * d);
 800178c:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pDst++ = (a * d) + (b * c);
 8001790:	ed02 7a03 	vstr	s14, [r2, #-12]
    *pDst++ = (a * c) - (b * d);
 8001794:	ed42 7a04 	vstr	s15, [r2, #-16]
  while (blkCnt > 0U)
 8001798:	d1e4      	bne.n	8001764 <arm_cmplx_mult_cmplx_f32+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 800179a:	4770      	bx	lr

0800179c <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80017a0:	8844      	ldrh	r4, [r0, #2]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 80017a2:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80017a6:	f890 8000 	ldrb.w	r8, [r0]
        float32_t *pState = S->pState;                 /* State pointer */
 80017aa:	6887      	ldr	r7, [r0, #8]
  pStateCur = S->pState + (numTaps - 1U);
 80017ac:	44a6      	add	lr, r4
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80017ae:	4598      	cmp	r8, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80017b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
  pStateCur = S->pState + (numTaps - 1U);
 80017b4:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80017b8:	fbb3 faf8 	udiv	sl, r3, r8
  while (blkCnt > 0U)
 80017bc:	d834      	bhi.n	8001828 <arm_fir_decimate_f32+0x8c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 80017be:	ea4f 0c88 	mov.w	ip, r8, lsl #2
  blkCnt = outBlockSize;
 80017c2:	4655      	mov	r5, sl
        float32_t *pState = S->pState;                 /* State pointer */
 80017c4:	463e      	mov	r6, r7
 80017c6:	46f3      	mov	fp, lr
 80017c8:	4643      	mov	r3, r8
 80017ca:	4608      	mov	r0, r1
      *pStateCur++ = *pSrc++;
 80017cc:	ecf0 7a01 	vldmia	r0!, {s15}
    } while (--i);
 80017d0:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 80017d2:	eceb 7a01 	vstmia	fp!, {s15}
    } while (--i);
 80017d6:	d1f9      	bne.n	80017cc <arm_fir_decimate_f32+0x30>
      *pStateCur++ = *pSrc++;
 80017d8:	4461      	add	r1, ip
 80017da:	44e6      	add	lr, ip
    while (tapCnt > 0U)
 80017dc:	b1e4      	cbz	r4, 8001818 <arm_fir_decimate_f32+0x7c>
 80017de:	4623      	mov	r3, r4
    acc0 = 0.0f;
 80017e0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800182c <arm_fir_decimate_f32+0x90>
    pb = pCoeffs;
 80017e4:	46cb      	mov	fp, r9
    while (tapCnt > 0U)
 80017e6:	4630      	mov	r0, r6
      acc0 += x0 * c0;
 80017e8:	ecfb 6a01 	vldmia	fp!, {s13}
    while (tapCnt > 0U)
 80017ec:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 80017ee:	ecb0 7a01 	vldmia	r0!, {s14}
 80017f2:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 80017f6:	d1f7      	bne.n	80017e8 <arm_fir_decimate_f32+0x4c>
  while (blkCnt > 0U)
 80017f8:	3d01      	subs	r5, #1
    pState = pState + S->M;
 80017fa:	4466      	add	r6, ip

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 80017fc:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001800:	d1e1      	bne.n	80017c6 <arm_fir_decimate_f32+0x2a>
    pState = pState + S->M;
 8001802:	fb0a 7c0c 	mla	ip, sl, ip, r7
 8001806:	e003      	b.n	8001810 <arm_fir_decimate_f32+0x74>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8001808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800180c:	f847 3b04 	str.w	r3, [r7], #4
  while (tapCnt > 0U)
 8001810:	3c01      	subs	r4, #1
 8001812:	d1f9      	bne.n	8001808 <arm_fir_decimate_f32+0x6c>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8001814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc0 = 0.0f;
 8001818:	eddf 7a04 	vldr	s15, [pc, #16]	; 800182c <arm_fir_decimate_f32+0x90>
  while (blkCnt > 0U)
 800181c:	3d01      	subs	r5, #1
    pState = pState + S->M;
 800181e:	4466      	add	r6, ip
    *pDst++ = acc0;
 8001820:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001824:	d1cf      	bne.n	80017c6 <arm_fir_decimate_f32+0x2a>
 8001826:	e7ec      	b.n	8001802 <arm_fir_decimate_f32+0x66>
        float32_t *pState = S->pState;                 /* State pointer */
 8001828:	46bc      	mov	ip, r7
 800182a:	e7f1      	b.n	8001810 <arm_fir_decimate_f32+0x74>
 800182c:	00000000 	.word	0x00000000

08001830 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	4616      	mov	r6, r2
 8001834:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8001838:	fbb2 f4f6 	udiv	r4, r2, r6
 800183c:	fb06 2414 	mls	r4, r6, r4, r2
 8001840:	b96c      	cbnz	r4, 800185e <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8001842:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8001844:	1e4b      	subs	r3, r1, #1
 8001846:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 8001848:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800184a:	441a      	add	r2, r3
 800184c:	4621      	mov	r1, r4
 800184e:	4638      	mov	r0, r7
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	f00f fe51 	bl	80114f8 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 8001856:	4620      	mov	r0, r4
    S->pState = pState;
 8001858:	60af      	str	r7, [r5, #8]
    S->M = M;
 800185a:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 800185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800185e:	f06f 0001 	mvn.w	r0, #1
}
 8001862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001864 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8001864:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8001866:	4c05      	ldr	r4, [pc, #20]	; (800187c <loadWPM+0x18>)
{
 8001868:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800186a:	17c3      	asrs	r3, r0, #31
 800186c:	2100      	movs	r1, #0
 800186e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001872:	f7fe ffa9 	bl	80007c8 <__aeabi_uldivmod>
 8001876:	6020      	str	r0, [r4, #0]

}
 8001878:	bd10      	pop	{r4, pc}
 800187a:	bf00      	nop
 800187c:	24007b5c 	.word	0x24007b5c

08001880 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8001884:	4c9a      	ldr	r4, [pc, #616]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d12f      	bne.n	80018ec <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 800188c:	4a99      	ldr	r2, [pc, #612]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	2a02      	cmp	r2, #2
 8001892:	d029      	beq.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 8001894:	4d98      	ldr	r5, [pc, #608]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001896:	782a      	ldrb	r2, [r5, #0]
 8001898:	2a05      	cmp	r2, #5
 800189a:	d825      	bhi.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
 800189c:	e8df f012 	tbh	[pc, r2, lsl #1]
 80018a0:	009f0070 	.word	0x009f0070
 80018a4:	000600d9 	.word	0x000600d9
 80018a8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80018ac:	4a93      	ldr	r2, [pc, #588]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018ae:	2001      	movs	r0, #1
 80018b0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80e2 	beq.w	8001a7c <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80018b8:	4f91      	ldr	r7, [pc, #580]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80018ba:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80018bc:	2300      	movs	r3, #0
			CarrierEnable(1);
 80018be:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80018c0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80018c2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80018c4:	f004 f860 	bl	8005988 <CarrierEnable>
		TXSwitch(1);
 80018c8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80018ca:	2404      	movs	r4, #4
		TXSwitch(1);
 80018cc:	f003 fff8 	bl	80058c0 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 80018d0:	f005 ff50 	bl	8007774 <HAL_GetTick>
 80018d4:	498b      	ldr	r1, [pc, #556]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 80018d6:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 80018d8:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 80018da:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 80018dc:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 80018de:	7813      	ldrb	r3, [r2, #0]
 80018e0:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 80018e4:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 80018e6:	7013      	strb	r3, [r2, #0]
}
 80018e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80018ec:	f005 ff42 	bl	8007774 <HAL_GetTick>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80018f6:	4290      	cmp	r0, r2
 80018f8:	f200 80b9 	bhi.w	8001a6e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0c5      	beq.n	800188c <HAL_TIM_PeriodElapsedCallback+0xc>
 8001900:	f005 ff38 	bl	8007774 <HAL_GetTick>
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	4298      	cmp	r0, r3
 8001908:	d9c0      	bls.n	800188c <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800190a:	4f80      	ldr	r7, [pc, #512]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f003 ffd7 	bl	80058c0 <TXSwitch>
						pk = Saved_pk;
 8001912:	4e7f      	ldr	r6, [pc, #508]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8001914:	2200      	movs	r2, #0
						pk = Saved_pk;
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800191a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800191c:	6031      	str	r1, [r6, #0]
 800191e:	e7b5      	b.n	800188c <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	487c      	ldr	r0, [pc, #496]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001924:	f008 ffca 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001928:	b948      	cbnz	r0, 800193e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800192a:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800192c:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	7811      	ldrb	r1, [r2, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2302      	movne	r3, #2
 8001938:	2301      	moveq	r3, #1
 800193a:	430b      	orrs	r3, r1
 800193c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	4874      	ldr	r0, [pc, #464]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001942:	f008 ffbb 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001946:	b948      	cbnz	r0, 800195c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8001948:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800194a:	4a6f      	ldr	r2, [pc, #444]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	7811      	ldrb	r1, [r2, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2302      	moveq	r3, #2
 8001958:	430b      	orrs	r3, r1
 800195a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800195c:	f005 ff0a 	bl	8007774 <HAL_GetTick>
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4298      	cmp	r0, r3
 8001966:	d9bf      	bls.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8001968:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800196a:	7813      	ldrb	r3, [r2, #0]
 800196c:	f013 0104 	ands.w	r1, r3, #4
 8001970:	f000 80b9 	beq.w	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 8001974:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 8001978:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 800197a:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 800197c:	7029      	strb	r1, [r5, #0]
 800197e:	e7b3      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 8001980:	2140      	movs	r1, #64	; 0x40
 8001982:	4864      	ldr	r0, [pc, #400]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001984:	f008 ff9a 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001988:	b140      	cbz	r0, 800199c <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	4861      	ldr	r0, [pc, #388]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800198e:	f008 ff95 	bl	800a8bc <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 8001992:	b118      	cbz	r0, 800199c <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 8001994:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	0798      	lsls	r0, r3, #30
 800199a:	d0a5      	beq.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	485d      	ldr	r0, [pc, #372]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80019a0:	f008 ff8c 	bl	800a8bc <HAL_GPIO_ReadPin>
 80019a4:	b948      	cbnz	r0, 80019ba <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	7811      	ldrb	r1, [r2, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf14      	ite	ne
 80019b2:	2302      	movne	r3, #2
 80019b4:	2301      	moveq	r3, #1
 80019b6:	430b      	orrs	r3, r1
 80019b8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	4855      	ldr	r0, [pc, #340]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80019be:	f008 ff7d 	bl	800a8bc <HAL_GPIO_ReadPin>
 80019c2:	b948      	cbnz	r0, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80019c4:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80019c6:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	7811      	ldrb	r1, [r2, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2302      	moveq	r3, #2
 80019d4:	430b      	orrs	r3, r1
 80019d6:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 80019d8:	2301      	movs	r3, #1
 80019da:	702b      	strb	r3, [r5, #0]
 80019dc:	e784      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019e0:	7813      	ldrb	r3, [r2, #0]
 80019e2:	07d9      	lsls	r1, r3, #31
 80019e4:	d55e      	bpl.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 80019e6:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 80019ea:	484c      	ldr	r0, [pc, #304]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80019ec:	4945      	ldr	r1, [pc, #276]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019ee:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 80019f0:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 80019f2:	2303      	movs	r3, #3
				ktimer = ditTime;
 80019f4:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 80019f6:	702b      	strb	r3, [r5, #0]
 80019f8:	e776      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 80019fa:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>
 80019fe:	f005 feb9 	bl	8007774 <HAL_GetTick>
 8001a02:	f8d8 3000 	ldr.w	r3, [r8]
 8001a06:	4298      	cmp	r0, r3
 8001a08:	d84f      	bhi.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 8001a0a:	4c3f      	ldr	r4, [pc, #252]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a0c:	7823      	ldrb	r3, [r4, #0]
 8001a0e:	06db      	lsls	r3, r3, #27
 8001a10:	f57f af6a 	bpl.w	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8001a14:	2140      	movs	r1, #64	; 0x40
 8001a16:	483f      	ldr	r0, [pc, #252]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a18:	f008 ff50 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001a1c:	b940      	cbnz	r0, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001a20:	7822      	ldrb	r2, [r4, #0]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2302      	movne	r3, #2
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4838      	ldr	r0, [pc, #224]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a34:	f008 ff42 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	f47f af55 	bne.w	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001a40:	7822      	ldrb	r2, [r4, #0]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2302      	moveq	r3, #2
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	7023      	strb	r3, [r4, #0]
}
 8001a50:	e74a      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f013 0302 	ands.w	r3, r3, #2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 8001a5e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001a62:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8001a64:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8001a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a6a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8001a6c:	e73c      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f003 ff26 	bl	80058c0 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	e741      	b.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 8001a78:	702b      	strb	r3, [r5, #0]
 8001a7a:	e735      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 8001a7c:	4e28      	ldr	r6, [pc, #160]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001a7e:	4f20      	ldr	r7, [pc, #128]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a80:	7833      	ldrb	r3, [r6, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f43f af19 	beq.w	80018ba <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001a88:	783b      	ldrb	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f af15 	bne.w	80018ba <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a96:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 8001a98:	f003 ff12 	bl	80058c0 <TXSwitch>
			HAL_Delay(txdelay);
 8001a9c:	7830      	ldrb	r0, [r6, #0]
 8001a9e:	f005 fe6f 	bl	8007780 <HAL_Delay>
 8001aa2:	e70a      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	702b      	strb	r3, [r5, #0]
 8001aa8:	e71e      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001aac:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 8001aae:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 8001ab0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 8001ab2:	bbb8      	cbnz	r0, 8001b24 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001ab6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 8001aba:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 8001abc:	f003 ff64 	bl	8005988 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001ac0:	f005 fe58 	bl	8007774 <HAL_GetTick>
 8001ac4:	f8d9 3000 	ldr.w	r3, [r9]
 8001ac8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001acc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d039      	beq.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001ad2:	f005 fe4f 	bl	8007774 <HAL_GetTick>
 8001ad6:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 8001ada:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001adc:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 8001ade:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001ae0:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8001ae4:	e700      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8001aea:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001aec:	7013      	strb	r3, [r2, #0]
}
 8001aee:	e6fb      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001af0:	2400b11c 	.word	0x2400b11c
 8001af4:	2400ac86 	.word	0x2400ac86
 8001af8:	2400ac85 	.word	0x2400ac85
 8001afc:	24005174 	.word	0x24005174
 8001b00:	2400c764 	.word	0x2400c764
 8001b04:	2400ac90 	.word	0x2400ac90
 8001b08:	2400ac84 	.word	0x2400ac84
 8001b0c:	240061b0 	.word	0x240061b0
 8001b10:	2400afc8 	.word	0x2400afc8
 8001b14:	58020000 	.word	0x58020000
 8001b18:	2400ac8c 	.word	0x2400ac8c
 8001b1c:	24007b5c 	.word	0x24007b5c
 8001b20:	2400c765 	.word	0x2400c765
	tx = tx_enable;
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8001b26:	4f0a      	ldr	r7, [pc, #40]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b28:	4e0a      	ldr	r6, [pc, #40]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 8001b2a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 8001b2c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 8001b2e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f003 fec2 	bl	80058c0 <TXSwitch>
						pk = Saved_pk;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8001b44:	e7c5      	b.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x252>
 8001b46:	4e03      	ldr	r6, [pc, #12]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b48:	4f01      	ldr	r7, [pc, #4]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b4a:	e7f4      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 8001b4c:	2400c764 	.word	0x2400c764
 8001b50:	240061b0 	.word	0x240061b0
 8001b54:	2400afc8 	.word	0x2400afc8
 8001b58:	24007b5c 	.word	0x24007b5c

08001b5c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 8001b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8001b60:	497d      	ldr	r1, [pc, #500]	; (8001d58 <cw_tx_char+0x1fc>)
 8001b62:	237e      	movs	r3, #126	; 0x7e
 8001b64:	2500      	movs	r5, #0
 8001b66:	e004      	b.n	8001b72 <cw_tx_char+0x16>
 8001b68:	b2d5      	uxtb	r5, r2
 8001b6a:	5d4b      	ldrb	r3, [r1, r5]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 808b 	beq.w	8001c88 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 8001b72:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8001b74:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 8001b78:	d1f6      	bne.n	8001b68 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8001b7a:	062b      	lsls	r3, r5, #24
 8001b7c:	f100 80e6 	bmi.w	8001d4c <cw_tx_char+0x1f0>
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	461e      	mov	r6, r3
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	422b      	tst	r3, r5
 8001b88:	d0fb      	beq.n	8001b82 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001b8a:	08b6      	lsrs	r6, r6, #2
 8001b8c:	f000 80b2 	beq.w	8001cf4 <cw_tx_char+0x198>
 8001b90:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8001d6c <cw_tx_char+0x210>
 8001b94:	4f71      	ldr	r7, [pc, #452]	; (8001d5c <cw_tx_char+0x200>)
 8001b96:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8001d74 <cw_tx_char+0x218>
					Saved_pk = pk;
 8001b9a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8001d70 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b93b      	cbnz	r3, 8001bb2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <cw_tx_char+0x204>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b123      	cbz	r3, 8001bb2 <cw_tx_char+0x56>
 8001ba8:	f898 3000 	ldrb.w	r3, [r8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8095 	beq.w	8001cdc <cw_tx_char+0x180>
	tx = tx_enable;
 8001bb2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 8001bb4:	2300      	movs	r3, #0
			CarrierEnable(1);
 8001bb6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 8001bb8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 8001bba:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 8001bbe:	f003 fee3 	bl	8005988 <CarrierEnable>
		TXSwitch(1);
 8001bc2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 8001bc4:	4c67      	ldr	r4, [pc, #412]	; (8001d64 <cw_tx_char+0x208>)
		TXSwitch(1);
 8001bc6:	f003 fe7b 	bl	80058c0 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001bca:	422e      	tst	r6, r5
 8001bcc:	f8d9 0000 	ldr.w	r0, [r9]
 8001bd0:	bf14      	ite	ne
 8001bd2:	f04f 0b03 	movne.w	fp, #3
 8001bd6:	f04f 0b01 	moveq.w	fp, #1
 8001bda:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8001bde:	f005 fdc9 	bl	8007774 <HAL_GetTick>
 8001be2:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8001be4:	e00a      	b.n	8001bfc <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8001be6:	f008 fe69 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	4620      	mov	r0, r4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04c      	beq.n	8001c8e <cw_tx_char+0x132>
 8001bf4:	f008 fe62 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d048      	beq.n	8001c8e <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8001bfc:	f005 fdba 	bl	8007774 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8001c06:	459b      	cmp	fp, r3
 8001c08:	d8ed      	bhi.n	8001be6 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8001c0a:	6838      	ldr	r0, [r7, #0]
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d151      	bne.n	8001cb4 <cw_tx_char+0x158>
	tx = tx_enable;
 8001c10:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001c14:	f003 feb8 	bl	8005988 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001c18:	f005 fdac 	bl	8007774 <HAL_GetTick>
 8001c1c:	f8d9 b000 	ldr.w	fp, [r9]
 8001c20:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8001c24:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d04c      	beq.n	8001cc4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8001c2a:	f005 fda3 	bl	8007774 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8001c2e:	4c4d      	ldr	r4, [pc, #308]	; (8001d64 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8001c30:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8001c32:	e008      	b.n	8001c46 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8001c34:	f008 fe42 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	b3b3      	cbz	r3, 8001cae <cw_tx_char+0x152>
 8001c40:	f008 fe3c 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001c44:	b398      	cbz	r0, 8001cae <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8001c46:	f005 fd95 	bl	8007774 <HAL_GetTick>
 8001c4a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001c4c:	2140      	movs	r1, #64	; 0x40
 8001c4e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8001c50:	459b      	cmp	fp, r3
 8001c52:	d8ef      	bhi.n	8001c34 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8001c54:	0876      	lsrs	r6, r6, #1
 8001c56:	d1a2      	bne.n	8001b9e <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8001c58:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8001c5c:	f005 fd8a 	bl	8007774 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8001c60:	4c40      	ldr	r4, [pc, #256]	; (8001d64 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8001c62:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8001c64:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8001c66:	e008      	b.n	8001c7a <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8001c68:	f008 fe28 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	4620      	mov	r0, r4
 8001c72:	b1e3      	cbz	r3, 8001cae <cw_tx_char+0x152>
 8001c74:	f008 fe22 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001c78:	b1c8      	cbz	r0, 8001cae <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8001c7a:	f005 fd7b 	bl	8007774 <HAL_GetTick>
 8001c7e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001c80:	2140      	movs	r1, #64	; 0x40
 8001c82:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8001c84:	429e      	cmp	r6, r3
 8001c86:	d8ef      	bhi.n	8001c68 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8001c88:	2000      	movs	r0, #0
}
 8001c8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d14a      	bne.n	8001d2a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8001c94:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001c98:	f003 fe76 	bl	8005988 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001c9c:	f005 fd6a 	bl	8007774 <HAL_GetTick>
 8001ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ca4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001ca8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d050      	beq.n	8001d50 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8001cb4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001cb8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001cbc:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001cbe:	f8da 3000 	ldr.w	r3, [sl]
 8001cc2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f003 fdfb 	bl	80058c0 <TXSwitch>
			semi_qsk_timeout = 0;
 8001cca:	2300      	movs	r3, #0
						pk = Saved_pk;
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8001cce:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8001cd0:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8001cd4:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e7a6      	b.n	8001c2a <cw_tx_char+0xce>
					Saved_pk = pk;
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8001cde:	2001      	movs	r0, #1
					Saved_pk = pk;
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8001ce6:	f003 fdeb 	bl	80058c0 <TXSwitch>
			HAL_Delay(txdelay);
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <cw_tx_char+0x204>)
 8001cec:	7818      	ldrb	r0, [r3, #0]
 8001cee:	f005 fd47 	bl	8007780 <HAL_Delay>
 8001cf2:	e75e      	b.n	8001bb2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8001cf6:	4c1b      	ldr	r4, [pc, #108]	; (8001d64 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001cf8:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8001cfa:	f005 fd3b 	bl	8007774 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001cfe:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8001d00:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8001d02:	e00a      	b.n	8001d1a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8001d04:	f008 fdda 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ba      	beq.n	8001c88 <cw_tx_char+0x12c>
 8001d12:	f008 fdd3 	bl	800a8bc <HAL_GPIO_ReadPin>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0b6      	beq.n	8001c88 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8001d1a:	f005 fd2b 	bl	8007774 <HAL_GetTick>
 8001d1e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8001d24:	429e      	cmp	r6, r3
 8001d26:	d8ed      	bhi.n	8001d04 <cw_tx_char+0x1a8>
 8001d28:	e7ae      	b.n	8001c88 <cw_tx_char+0x12c>
	tx = tx_enable;
 8001d2a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8001d2c:	4d10      	ldr	r5, [pc, #64]	; (8001d70 <cw_tx_char+0x214>)
 8001d2e:	4c0e      	ldr	r4, [pc, #56]	; (8001d68 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001d30:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001d34:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f003 fdc0 	bl	80058c0 <TXSwitch>
			semi_qsk_timeout = 0;
 8001d40:	2200      	movs	r2, #0
						pk = Saved_pk;
 8001d42:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001d44:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8001d46:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	e79e      	b.n	8001c8a <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8001d4c:	2640      	movs	r6, #64	; 0x40
 8001d4e:	e71f      	b.n	8001b90 <cw_tx_char+0x34>
 8001d50:	4d07      	ldr	r5, [pc, #28]	; (8001d70 <cw_tx_char+0x214>)
 8001d52:	4c05      	ldr	r4, [pc, #20]	; (8001d68 <cw_tx_char+0x20c>)
 8001d54:	e7f1      	b.n	8001d3a <cw_tx_char+0x1de>
 8001d56:	bf00      	nop
 8001d58:	08018658 	.word	0x08018658
 8001d5c:	2400b11c 	.word	0x2400b11c
 8001d60:	2400c765 	.word	0x2400c765
 8001d64:	58020000 	.word	0x58020000
 8001d68:	2400afc8 	.word	0x2400afc8
 8001d6c:	24007b5c 	.word	0x24007b5c
 8001d70:	240061b0 	.word	0x240061b0
 8001d74:	2400c764 	.word	0x2400c764

08001d78 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8001d78:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8001d7a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SendCWMessage+0x28>)
 8001d80:	012a      	lsls	r2, r5, #4
 8001d82:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8001d86:	5c98      	ldrb	r0, [r3, r2]
 8001d88:	b148      	cbz	r0, 8001d9e <SendCWMessage+0x26>
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	e002      	b.n	8001d94 <SendCWMessage+0x1c>
 8001d8e:	b2e4      	uxtb	r4, r4
 8001d90:	5d28      	ldrb	r0, [r5, r4]
 8001d92:	b120      	cbz	r0, 8001d9e <SendCWMessage+0x26>
 8001d94:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8001d96:	f7ff fee1 	bl	8001b5c <cw_tx_char>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d0f7      	beq.n	8001d8e <SendCWMessage+0x16>
}
 8001d9e:	bd38      	pop	{r3, r4, r5, pc}
 8001da0:	24000000 	.word	0x24000000

08001da4 <DecodeDCF77>:
{
	uint8_t i;
	static uint8_t MinParity, HourParity;
	MinParity = HourParity = 0;
	for (i = 21 ; i < 28; i++)
		if (DCF77Message[i])
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <DecodeDCF77+0x14c>)
{
 8001da6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (DCF77Message[i])
 8001daa:	7d5a      	ldrb	r2, [r3, #21]
{
 8001dac:	b085      	sub	sp, #20
		if (DCF77Message[i])
 8001dae:	f893 a016 	ldrb.w	sl, [r3, #22]
			MinParity ^= 1;
 8001db2:	1e11      	subs	r1, r2, #0
 8001db4:	bf18      	it	ne
 8001db6:	2101      	movne	r1, #1
		if (DCF77Message[i])
 8001db8:	f1ba 0f00 	cmp.w	sl, #0
 8001dbc:	d001      	beq.n	8001dc2 <DecodeDCF77+0x1e>
			MinParity ^= 1;
 8001dbe:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001dc2:	7ddf      	ldrb	r7, [r3, #23]
 8001dc4:	b10f      	cbz	r7, 8001dca <DecodeDCF77+0x26>
			MinParity ^= 1;
 8001dc6:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001dca:	7e18      	ldrb	r0, [r3, #24]
 8001dcc:	9003      	str	r0, [sp, #12]
 8001dce:	b108      	cbz	r0, 8001dd4 <DecodeDCF77+0x30>
			MinParity ^= 1;
 8001dd0:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001dd4:	7e5c      	ldrb	r4, [r3, #25]
 8001dd6:	b10c      	cbz	r4, 8001ddc <DecodeDCF77+0x38>
			MinParity ^= 1;
 8001dd8:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001ddc:	f893 901a 	ldrb.w	r9, [r3, #26]
 8001de0:	f1b9 0f00 	cmp.w	r9, #0
 8001de4:	d001      	beq.n	8001dea <DecodeDCF77+0x46>
			MinParity ^= 1;
 8001de6:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001dea:	7ede      	ldrb	r6, [r3, #27]
 8001dec:	b10e      	cbz	r6, 8001df2 <DecodeDCF77+0x4e>
			MinParity ^= 1;
 8001dee:	f081 0101 	eor.w	r1, r1, #1
	for (i = 21 ; i < 28; i++)
 8001df2:	4840      	ldr	r0, [pc, #256]	; (8001ef4 <DecodeDCF77+0x150>)
	for (i = 29 ; i < 35; i++)
		if (DCF77Message[i])
 8001df4:	f893 801e 	ldrb.w	r8, [r3, #30]
 8001df8:	7001      	strb	r1, [r0, #0]
 8001dfa:	7f58      	ldrb	r0, [r3, #29]
			HourParity ^= 1;
 8001dfc:	f1b0 0c00 	subs.w	ip, r0, #0
 8001e00:	bf18      	it	ne
 8001e02:	f04f 0c01 	movne.w	ip, #1
		if (DCF77Message[i])
 8001e06:	f1b8 0f00 	cmp.w	r8, #0
 8001e0a:	d001      	beq.n	8001e10 <DecodeDCF77+0x6c>
			HourParity ^= 1;
 8001e0c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001e10:	7fdd      	ldrb	r5, [r3, #31]
 8001e12:	9501      	str	r5, [sp, #4]
 8001e14:	b10d      	cbz	r5, 8001e1a <DecodeDCF77+0x76>
			HourParity ^= 1;
 8001e16:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001e1a:	f893 5020 	ldrb.w	r5, [r3, #32]
 8001e1e:	9502      	str	r5, [sp, #8]
 8001e20:	b10d      	cbz	r5, 8001e26 <DecodeDCF77+0x82>
			HourParity ^= 1;
 8001e22:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001e26:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 8001e2a:	b10d      	cbz	r5, 8001e30 <DecodeDCF77+0x8c>
			HourParity ^= 1;
 8001e2c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001e30:	f893 e022 	ldrb.w	lr, [r3, #34]	; 0x22
 8001e34:	f1be 0f00 	cmp.w	lr, #0
 8001e38:	d141      	bne.n	8001ebe <DecodeDCF77+0x11a>
	for (i = 29 ; i < 35; i++)
 8001e3a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8001f10 <DecodeDCF77+0x16c>
 8001e3e:	f88b c000 	strb.w	ip, [fp]

	if (MinParity != DCF77Message[28] && HourParity != DCF77Message[35])
 8001e42:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8001e46:	458b      	cmp	fp, r1
 8001e48:	d006      	beq.n	8001e58 <DecodeDCF77+0xb4>
 8001e4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e4e:	4563      	cmp	r3, ip
 8001e50:	d002      	beq.n	8001e58 <DecodeDCF77+0xb4>
		}
		break;
	case SEND_WSPR:
		break;
	}
}
 8001e52:	b005      	add	sp, #20
 8001e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001e58:	eb04 0449 	add.w	r4, r4, r9, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001e5c:	9b01      	ldr	r3, [sp, #4]
		DCF77Min += DCF77Message[21+i] << i;
 8001e5e:	eb02 024a 	add.w	r2, r2, sl, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001e62:	eb00 0048 	add.w	r0, r0, r8, lsl #1
		DCF77Min += DCF77Message[21+i] << i;
 8001e66:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	switch (WSPRBeaconState)
 8001e6a:	4f23      	ldr	r7, [pc, #140]	; (8001ef8 <DecodeDCF77+0x154>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001e6c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001e70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		DCF77Min += DCF77Message[21+i] << i;
 8001e74:	9b03      	ldr	r3, [sp, #12]
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001e76:	eb05 054e 	add.w	r5, r5, lr, lsl #1
	switch (WSPRBeaconState)
 8001e7a:	783c      	ldrb	r4, [r7, #0]
		DCF77Min += DCF77Message[21+i] << i;
 8001e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		DCF77Hour += (DCF77Message[29+i] << i);
 8001e80:	9b02      	ldr	r3, [sp, #8]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001e82:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001e86:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <DecodeDCF77+0x158>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001e8c:	eb02 0646 	add.w	r6, r2, r6, lsl #1
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <DecodeDCF77+0x15c>)
 8001e92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001e96:	b2f6      	uxtb	r6, r6
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001e98:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8001e9c:	701e      	strb	r6, [r3, #0]
 8001e9e:	7015      	strb	r5, [r2, #0]
	switch (WSPRBeaconState)
 8001ea0:	b184      	cbz	r4, 8001ec4 <DecodeDCF77+0x120>
 8001ea2:	2c01      	cmp	r4, #1
 8001ea4:	d1d5      	bne.n	8001e52 <DecodeDCF77+0xae>
		if (SystemMinutes == DCF77Min)
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <DecodeDCF77+0x160>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4296      	cmp	r6, r2
 8001eac:	d013      	beq.n	8001ed6 <DecodeDCF77+0x132>
			SystemSeconds = 0;
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <DecodeDCF77+0x164>)
			SystemMinutes = DCF77Min;
 8001eb0:	601e      	str	r6, [r3, #0]
			SystemSeconds = 0;
 8001eb2:	2300      	movs	r3, #0
			WSPRBeaconState = FIRST_FIX;
 8001eb4:	703c      	strb	r4, [r7, #0]
			SystemSeconds = 0;
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	b005      	add	sp, #20
 8001eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HourParity ^= 1;
 8001ebe:	f08c 0c01 	eor.w	ip, ip, #1
 8001ec2:	e7ba      	b.n	8001e3a <DecodeDCF77+0x96>
		SystemMinutes = DCF77Min;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <DecodeDCF77+0x160>)
		SystemSeconds = 0;
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <DecodeDCF77+0x164>)
		SystemMinutes = DCF77Min;
 8001ec8:	601e      	str	r6, [r3, #0]
		WSPRBeaconState = FIRST_FIX;
 8001eca:	2301      	movs	r3, #1
		SystemSeconds = 0;
 8001ecc:	6014      	str	r4, [r2, #0]
		WSPRBeaconState = FIRST_FIX;
 8001ece:	703b      	strb	r3, [r7, #0]
}
 8001ed0:	b005      	add	sp, #20
 8001ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SystemSeconds = 0;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <DecodeDCF77+0x164>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
			srand((unsigned) HAL_GetTick());
 8001edc:	f005 fc4a 	bl	8007774 <HAL_GetTick>
 8001ee0:	f010 f8b0 	bl	8012044 <srand>
			TransmittingWSPR = 1;
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <DecodeDCF77+0x168>)
			WSPRBeaconState = SEND_WSPR;
 8001ee6:	2302      	movs	r3, #2
			TransmittingWSPR = 1;
 8001ee8:	7014      	strb	r4, [r2, #0]
			WSPRBeaconState = SEND_WSPR;
 8001eea:	703b      	strb	r3, [r7, #0]
 8001eec:	e7b1      	b.n	8001e52 <DecodeDCF77+0xae>
 8001eee:	bf00      	nop
 8001ef0:	2400054c 	.word	0x2400054c
 8001ef4:	2400058a 	.word	0x2400058a
 8001ef8:	24007321 	.word	0x24007321
 8001efc:	24000f3c 	.word	0x24000f3c
 8001f00:	24000f39 	.word	0x24000f39
 8001f04:	240061f8 	.word	0x240061f8
 8001f08:	240061fc 	.word	0x240061fc
 8001f0c:	2400620d 	.word	0x2400620d
 8001f10:	24000589 	.word	0x24000589

08001f14 <DoDCF77>:

void DoDCF77(uint16_t DCF77In)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
//100 mSec (DCF77 0) is 3200 samples
//200 mSec (DCF77 1) is 6400 samples
//2 Sec (DCF77 Sync) is 64000 samples


	if (DCF77In && !LastDCF77In)
 8001f16:	4d3c      	ldr	r5, [pc, #240]	; (8002008 <DoDCF77+0xf4>)
{
 8001f18:	b083      	sub	sp, #12
	if (DCF77In && !LastDCF77In)
 8001f1a:	b1f8      	cbz	r0, 8001f5c <DoDCF77+0x48>
 8001f1c:	8829      	ldrh	r1, [r5, #0]
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	d141      	bne.n	8001fa6 <DoDCF77+0x92>
		RisingEdge = 1;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <DoDCF77+0xf8>)
 8001f24:	2201      	movs	r2, #1
		DCF77LowSampleCounter = 0;
	}

	if (RisingEdge)
	{
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001f26:	f640 34b6 	movw	r4, #2998	; 0xbb6
		RisingEdge = 1;
 8001f2a:	701a      	strb	r2, [r3, #0]
	if (!DCF77In && LastDCF77In)
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <DoDCF77+0xfc>)
 8001f2e:	7019      	strb	r1, [r3, #0]
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <DoDCF77+0x100>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f6a3 36b9 	subw	r6, r3, #3001	; 0xbb9
 8001f38:	42a6      	cmp	r6, r4
 8001f3a:	d855      	bhi.n	8001fe8 <DoDCF77+0xd4>
			DCF77Message[DCF77BitCounter++] = 0;
 8001f3c:	4c36      	ldr	r4, [pc, #216]	; (8002018 <DoDCF77+0x104>)
 8001f3e:	4a37      	ldr	r2, [pc, #220]	; (800201c <DoDCF77+0x108>)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	54d1      	strb	r1, [r2, r3]
 8001f44:	3301      	adds	r3, #1
 8001f46:	6023      	str	r3, [r4, #0]
{
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4935      	ldr	r1, [pc, #212]	; (8002020 <DoDCF77+0x10c>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
				DCF77Message[DCF77BitCounter++] = 1;
		DCF77HighSampleCounter = 0;
	}
	if (DCF77In && DCF77HighSampleCounter < 100000)
		DCF77HighSampleCounter++;
 8001f4c:	600a      	str	r2, [r1, #0]

	if (!DCF77In && DCF77LowSampleCounter < 100000)
		DCF77LowSampleCounter++;

	if (DCF77BitCounter > 59)
 8001f4e:	2b3b      	cmp	r3, #59	; 0x3b
 8001f50:	d901      	bls.n	8001f56 <DoDCF77+0x42>
		DCF77BitCounter = 59;
 8001f52:	233b      	movs	r3, #59	; 0x3b
 8001f54:	6023      	str	r3, [r4, #0]
	LastDCF77In = DCF77In;
 8001f56:	8028      	strh	r0, [r5, #0]
}
 8001f58:	b003      	add	sp, #12
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!DCF77In && LastDCF77In)
 8001f5c:	882a      	ldrh	r2, [r5, #0]
		RisingEdge = 0;
 8001f5e:	4f2b      	ldr	r7, [pc, #172]	; (800200c <DoDCF77+0xf8>)
	if (!DCF77In && LastDCF77In)
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <DoDCF77+0xfc>)
		RisingEdge = 0;
 8001f64:	7038      	strb	r0, [r7, #0]
	if (!DCF77In && LastDCF77In)
 8001f66:	bf14      	ite	ne
 8001f68:	2201      	movne	r2, #1
 8001f6a:	2200      	moveq	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
	if (FallingEdge)
 8001f6e:	d027      	beq.n	8001fc0 <DoDCF77+0xac>
		if (DCF77HighSampleCounter > 40000 && DCF77HighSampleCounter < 90000)
 8001f70:	4e2b      	ldr	r6, [pc, #172]	; (8002020 <DoDCF77+0x10c>)
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <DoDCF77+0x110>)
 8001f74:	6832      	ldr	r2, [r6, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	f24c 324e 	movw	r2, #49998	; 0xc34e
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d90a      	bls.n	8001f96 <DoDCF77+0x82>
		DCF77LowSampleCounter = 0;
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <DoDCF77+0x100>)
 8001f82:	4c25      	ldr	r4, [pc, #148]	; (8002018 <DoDCF77+0x104>)
 8001f84:	6010      	str	r0, [r2, #0]
	if (DCF77BitCounter > 59)
 8001f86:	6823      	ldr	r3, [r4, #0]
	if (!DCF77In && DCF77LowSampleCounter < 100000)
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	4e27      	ldr	r6, [pc, #156]	; (8002028 <DoDCF77+0x114>)
 8001f8c:	42b1      	cmp	r1, r6
 8001f8e:	d8de      	bhi.n	8001f4e <DoDCF77+0x3a>
		DCF77LowSampleCounter++;
 8001f90:	3101      	adds	r1, #1
 8001f92:	6011      	str	r1, [r2, #0]
 8001f94:	e7db      	b.n	8001f4e <DoDCF77+0x3a>
			if (DCF77BitCounter == 59)
 8001f96:	4c20      	ldr	r4, [pc, #128]	; (8002018 <DoDCF77+0x104>)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f9c:	d013      	beq.n	8001fc6 <DoDCF77+0xb2>
		DCF77LowSampleCounter = 0;
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <DoDCF77+0x100>)
			DCF77BitCounter = 0;
 8001fa0:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001fa2:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8001fa4:	e7ef      	b.n	8001f86 <DoDCF77+0x72>
		RisingEdge = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	4a18      	ldr	r2, [pc, #96]	; (800200c <DoDCF77+0xf8>)
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001faa:	491d      	ldr	r1, [pc, #116]	; (8002020 <DoDCF77+0x10c>)
		RisingEdge = 0;
 8001fac:	7013      	strb	r3, [r2, #0]
	if (!DCF77In && LastDCF77In)
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <DoDCF77+0xfc>)
 8001fb0:	7013      	strb	r3, [r2, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001fb2:	680a      	ldr	r2, [r1, #0]
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <DoDCF77+0x114>)
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d912      	bls.n	8001fe0 <DoDCF77+0xcc>
	if (DCF77BitCounter > 59)
 8001fba:	4c17      	ldr	r4, [pc, #92]	; (8002018 <DoDCF77+0x104>)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	e7c6      	b.n	8001f4e <DoDCF77+0x3a>
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <DoDCF77+0x100>)
 8001fc2:	4c15      	ldr	r4, [pc, #84]	; (8002018 <DoDCF77+0x104>)
 8001fc4:	e7df      	b.n	8001f86 <DoDCF77+0x72>
				DecodeDCF77();
 8001fc6:	9001      	str	r0, [sp, #4]
 8001fc8:	f7ff feec 	bl	8001da4 <DecodeDCF77>
			DCF77BitCounter = 0;
 8001fcc:	9801      	ldr	r0, [sp, #4]
		DCF77LowSampleCounter = 0;
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <DoDCF77+0x100>)
	if (RisingEdge)
 8001fd0:	783b      	ldrb	r3, [r7, #0]
			DCF77BitCounter = 0;
 8001fd2:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001fd4:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0d5      	beq.n	8001f86 <DoDCF77+0x72>
	if (DCF77BitCounter > 59)
 8001fda:	4603      	mov	r3, r0
		DCF77HighSampleCounter = 0;
 8001fdc:	6030      	str	r0, [r6, #0]
 8001fde:	e7d3      	b.n	8001f88 <DoDCF77+0x74>
	if (DCF77BitCounter > 59)
 8001fe0:	4c0d      	ldr	r4, [pc, #52]	; (8002018 <DoDCF77+0x104>)
		DCF77HighSampleCounter++;
 8001fe2:	3201      	adds	r2, #1
	if (DCF77BitCounter > 59)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	e7b1      	b.n	8001f4c <DoDCF77+0x38>
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001fe8:	4910      	ldr	r1, [pc, #64]	; (800202c <DoDCF77+0x118>)
				DCF77Message[DCF77BitCounter++] = 1;
 8001fea:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <DoDCF77+0x104>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001fec:	4419      	add	r1, r3
 8001fee:	f241 736e 	movw	r3, #5998	; 0x176e
 8001ff2:	4299      	cmp	r1, r3
				DCF77Message[DCF77BitCounter++] = 1;
 8001ff4:	6823      	ldr	r3, [r4, #0]
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001ff6:	d901      	bls.n	8001ffc <DoDCF77+0xe8>
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <DoDCF77+0x10c>)
 8001ffa:	e7a7      	b.n	8001f4c <DoDCF77+0x38>
				DCF77Message[DCF77BitCounter++] = 1;
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <DoDCF77+0x108>)
 8001ffe:	54ca      	strb	r2, [r1, r3]
 8002000:	3301      	adds	r3, #1
 8002002:	6023      	str	r3, [r4, #0]
 8002004:	e7a0      	b.n	8001f48 <DoDCF77+0x34>
 8002006:	bf00      	nop
 8002008:	2400617e 	.word	0x2400617e
 800200c:	2400058b 	.word	0x2400058b
 8002010:	24000588 	.word	0x24000588
 8002014:	24000548 	.word	0x24000548
 8002018:	2400053c 	.word	0x2400053c
 800201c:	2400054c 	.word	0x2400054c
 8002020:	24000544 	.word	0x24000544
 8002024:	ffff63bf 	.word	0xffff63bf
 8002028:	0001869f 	.word	0x0001869f
 800202c:	ffffe88f 	.word	0xffffe88f

08002030 <DCF77StatusDisplay>:

void DCF77StatusDisplay(void)
{
	static uint16_t DCF77DisplayCounter, DCF77DisplayPrescaler;

	if (DCF77DisplayPrescaler++ == 1)
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <DCF77StatusDisplay+0x64>)
{
 8002032:	b538      	push	{r3, r4, r5, lr}
	if (DCF77DisplayPrescaler++ == 1)
 8002034:	8813      	ldrh	r3, [r2, #0]
	{
		DCF77DisplayPrescaler = 0;
		DCF77DisplayCounter++;
 8002036:	4c18      	ldr	r4, [pc, #96]	; (8002098 <DCF77StatusDisplay+0x68>)
	if (DCF77DisplayPrescaler++ == 1)
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	8011      	strh	r1, [r2, #0]
 800203e:	d019      	beq.n	8002074 <DCF77StatusDisplay+0x44>
	}
	if (DCF77DisplayCounter % 2 == 0)
 8002040:	8823      	ldrh	r3, [r4, #0]
 8002042:	f013 0201 	ands.w	r2, r3, #1
 8002046:	d01e      	beq.n	8002086 <DCF77StatusDisplay+0x56>
		LED_GREEN_OFF;
	else
	{
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8002048:	4d14      	ldr	r5, [pc, #80]	; (800209c <DCF77StatusDisplay+0x6c>)
			LED_GREEN_ON;
		else
			LED_GREEN_OFF;
 800204a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204e:	4814      	ldr	r0, [pc, #80]	; (80020a0 <DCF77StatusDisplay+0x70>)
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8002050:	782a      	ldrb	r2, [r5, #0]
 8002052:	3201      	adds	r2, #1
 8002054:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
			LED_GREEN_ON;
 8002058:	bfd4      	ite	le
 800205a:	2201      	movle	r2, #1
			LED_GREEN_OFF;
 800205c:	2200      	movgt	r2, #0
 800205e:	f008 fc33 	bl	800a8c8 <HAL_GPIO_WritePin>
		if (DCF77DisplayCounter > (WSPRBeaconState + 3) * 2 )
 8002062:	782b      	ldrb	r3, [r5, #0]
 8002064:	8822      	ldrh	r2, [r4, #0]
 8002066:	3303      	adds	r3, #3
 8002068:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800206c:	dd01      	ble.n	8002072 <DCF77StatusDisplay+0x42>
			DCF77DisplayCounter = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	8023      	strh	r3, [r4, #0]
	}

}
 8002072:	bd38      	pop	{r3, r4, r5, pc}
		DCF77DisplayCounter++;
 8002074:	8823      	ldrh	r3, [r4, #0]
		DCF77DisplayPrescaler = 0;
 8002076:	2100      	movs	r1, #0
		DCF77DisplayCounter++;
 8002078:	3301      	adds	r3, #1
		DCF77DisplayPrescaler = 0;
 800207a:	8011      	strh	r1, [r2, #0]
		DCF77DisplayCounter++;
 800207c:	b29b      	uxth	r3, r3
	if (DCF77DisplayCounter % 2 == 0)
 800207e:	f013 0201 	ands.w	r2, r3, #1
		DCF77DisplayCounter++;
 8002082:	8023      	strh	r3, [r4, #0]
	if (DCF77DisplayCounter % 2 == 0)
 8002084:	d1e0      	bne.n	8002048 <DCF77StatusDisplay+0x18>
		LED_GREEN_OFF;
 8002086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <DCF77StatusDisplay+0x70>)
}
 800208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LED_GREEN_OFF;
 8002090:	f008 bc1a 	b.w	800a8c8 <HAL_GPIO_WritePin>
 8002094:	24000542 	.word	0x24000542
 8002098:	24000540 	.word	0x24000540
 800209c:	24007321 	.word	0x24007321
 80020a0:	58020400 	.word	0x58020400

080020a4 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <Load_Presets+0x40>)
{
 80020a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020aa:	4c0f      	ldr	r4, [pc, #60]	; (80020e8 <Load_Presets+0x44>)
 80020ac:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 80020b0:	4f0e      	ldr	r7, [pc, #56]	; (80020ec <Load_Presets+0x48>)
 80020b2:	4e0f      	ldr	r6, [pc, #60]	; (80020f0 <Load_Presets+0x4c>)
 80020b4:	4d0f      	ldr	r5, [pc, #60]	; (80020f4 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 80020b6:	4621      	mov	r1, r4
 80020b8:	4618      	mov	r0, r3
 80020ba:	f010 f84f 	bl	801215c <strcpy>
 80020be:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 80020c0:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 80020c4:	3410      	adds	r4, #16
 80020c6:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 80020c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 80020cc:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 80020d0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 80020d4:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 80020d6:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 80020da:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 80020de:	d1ea      	bne.n	80020b6 <Load_Presets+0x12>
	}
}
 80020e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e4:	2400afcc 	.word	0x2400afcc
 80020e8:	24000120 	.word	0x24000120
 80020ec:	080186e8 	.word	0x080186e8
 80020f0:	0801871f 	.word	0x0801871f
 80020f4:	080186d7 	.word	0x080186d7

080020f8 <SetBW>:
//-----------------------------------------------------------------------------
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	if (newbw == CurrentBW)
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <SetBW+0x94>)
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	4282      	cmp	r2, r0
 80020fe:	d008      	beq.n	8002112 <SetBW+0x1a>
		return;

	CurrentBW = newbw;
	switch(CurrentMode)
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <SetBW+0x98>)
	CurrentBW = newbw;
 8002102:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8002104:	7813      	ldrb	r3, [r2, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d803      	bhi.n	8002112 <SetBW+0x1a>
 800210a:	e8df f003 	tbb	[pc, r3]
 800210e:	190e      	.short	0x190e
 8002110:	032c      	.short	0x032c
		break;

	default :
		break;
	}
}	
 8002112:	4770      	bx	lr
		bw[CW] = newbw;
 8002114:	491f      	ldr	r1, [pc, #124]	; (8002194 <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8002116:	2200      	movs	r2, #0
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <SetBW+0xa0>)
		bw[CW] = newbw;
 800211a:	70c8      	strb	r0, [r1, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 800211c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800219c <SetBW+0xa4>
 8002120:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80021a0 <SetBW+0xa8>
		CWindex = 0; // TODO toglimi
 8002124:	801a      	strh	r2, [r3, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8002126:	f001 bdab 	b.w	8003c80 <SetMask>
		bw[AM] = newbw;
 800212a:	491a      	ldr	r1, [pc, #104]	; (8002194 <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 800212c:	2200      	movs	r2, #0
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <SetBW+0xac>)
		bw[AM] = newbw;
 8002130:	7008      	strb	r0, [r1, #0]
		SetMask(-3000.0f, 3000.0f);
 8002132:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80021a8 <SetBW+0xb0>
 8002136:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80021ac <SetBW+0xb4>
		AMindex = 0; // TODO toglimi
 800213a:	801a      	strh	r2, [r3, #0]
		SetMask(-3000.0f, 3000.0f);
 800213c:	f001 bda0 	b.w	8003c80 <SetMask>
		bw[LSB] = newbw;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <SetBW+0x9c>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002142:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <SetBW+0xac>)
		bw[LSB] = newbw;
 8002148:	7050      	strb	r0, [r2, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800214a:	bf18      	it	ne
 800214c:	f04f 0c01 	movne.w	ip, #1
		LSBindex = 0; // TODO toglimi
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <SetBW+0xb8>)
 8002152:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002154:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 8002158:	eddf 0a16 	vldr	s1, [pc, #88]	; 80021b4 <SetBW+0xbc>
 800215c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80021b8 <SetBW+0xc0>
		LSBindex = 0; // TODO toglimi
 8002160:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8002162:	f001 bd8d 	b.w	8003c80 <SetMask>
		bw[USB] = newbw;
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <SetBW+0x9c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002168:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 800216c:	490d      	ldr	r1, [pc, #52]	; (80021a4 <SetBW+0xac>)
		bw[USB] = newbw;
 800216e:	7090      	strb	r0, [r2, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002170:	bf18      	it	ne
 8002172:	f04f 0c01 	movne.w	ip, #1
		USBindex = 0; // TODO toglimi
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <SetBW+0xc4>)
 8002178:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 800217a:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 800217e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80021b4 <SetBW+0xbc>
 8002182:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80021b8 <SetBW+0xc0>
		USBindex = 0; // TODO toglimi
 8002186:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8002188:	f001 bd7a 	b.w	8003c80 <SetMask>
 800218c:	24000f37 	.word	0x24000f37
 8002190:	24000f38 	.word	0x24000f38
 8002194:	24007b50 	.word	0x24007b50
 8002198:	24000f34 	.word	0x24000f34
 800219c:	44480000 	.word	0x44480000
 80021a0:	43fa0000 	.word	0x43fa0000
 80021a4:	24000700 	.word	0x24000700
 80021a8:	453b8000 	.word	0x453b8000
 80021ac:	c53b8000 	.word	0xc53b8000
 80021b0:	2400617c 	.word	0x2400617c
 80021b4:	451c4000 	.word	0x451c4000
 80021b8:	43960000 	.word	0x43960000
 80021bc:	24006218 	.word	0x24006218

080021c0 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 80021c2:	4a26      	ldr	r2, [pc, #152]	; (800225c <SetAGC+0x9c>)
{
 80021c4:	b410      	push	{r4}
	switch(CurrentMode)
 80021c6:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 80021c8:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d811      	bhi.n	80021f2 <SetAGC+0x32>
 80021ce:	e8df f003 	tbb	[pc, r3]
 80021d2:	2333      	.short	0x2333
 80021d4:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 80021d8:	4922      	ldr	r1, [pc, #136]	; (8002264 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80021da:	4c23      	ldr	r4, [pc, #140]	; (8002268 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 80021dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80021e2:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 80021e6:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 80021e8:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80021ea:	4921      	ldr	r1, [pc, #132]	; (8002270 <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 80021ec:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80021ee:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 80021f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021f6:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 80021fa:	491a      	ldr	r1, [pc, #104]	; (8002264 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80021fc:	4c1a      	ldr	r4, [pc, #104]	; (8002268 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 80021fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8002202:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8002204:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 800220a:	4919      	ldr	r1, [pc, #100]	; (8002270 <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 800220c:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800220e:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8002210:	6093      	str	r3, [r2, #8]
}	
 8002212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002216:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 800221a:	4912      	ldr	r1, [pc, #72]	; (8002264 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800221c:	4c12      	ldr	r4, [pc, #72]	; (8002268 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 800221e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8002222:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8002224:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8002228:	4a10      	ldr	r2, [pc, #64]	; (800226c <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800222a:	4911      	ldr	r1, [pc, #68]	; (8002270 <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 800222c:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800222e:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8002230:	6053      	str	r3, [r2, #4]
}	
 8002232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002236:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 800223a:	490a      	ldr	r1, [pc, #40]	; (8002264 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 800223e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8002242:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8002244:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8002248:	4a08      	ldr	r2, [pc, #32]	; (800226c <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 800224a:	4909      	ldr	r1, [pc, #36]	; (8002270 <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 800224c:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 800224e:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8002250:	6013      	str	r3, [r2, #0]
}	
 8002252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	24000f38 	.word	0x24000f38
 800225c:	24000f36 	.word	0x24000f36
 8002260:	240006f8 	.word	0x240006f8
 8002264:	24007b40 	.word	0x24007b40
 8002268:	24005168 	.word	0x24005168
 800226c:	24000f40 	.word	0x24000f40
 8002270:	2400516c 	.word	0x2400516c

08002274 <Tune_Preset>:
{
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq = psets[Idx].freq;
 8002276:	4e45      	ldr	r6, [pc, #276]	; (800238c <Tune_Preset+0x118>)
 8002278:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800227c:	4a44      	ldr	r2, [pc, #272]	; (8002390 <Tune_Preset+0x11c>)
{
 800227e:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8002280:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	if (CurrentMode == newmode)
 8002284:	4f43      	ldr	r7, [pc, #268]	; (8002394 <Tune_Preset+0x120>)
	LOfreq = psets[Idx].freq;
 8002286:	0045      	lsls	r5, r0, #1
 8002288:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 800228a:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 800228c:	6011      	str	r1, [r2, #0]
	if (CurrentMode == newmode)
 800228e:	783a      	ldrb	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d00e      	beq.n	80022b2 <Tune_Preset+0x3e>
		return;

	CurrentMode = newmode;
 8002294:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8002296:	2b03      	cmp	r3, #3
 8002298:	d80b      	bhi.n	80022b2 <Tune_Preset+0x3e>
 800229a:	e8df f003 	tbb	[pc, r3]
 800229e:	372e      	.short	0x372e
 80022a0:	0240      	.short	0x0240
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <Tune_Preset+0x124>)
 80022a4:	78d8      	ldrb	r0, [r3, #3]
 80022a6:	f7ff ff27 	bl	80020f8 <SetBW>
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <Tune_Preset+0x128>)
 80022ac:	78d8      	ldrb	r0, [r3, #3]
 80022ae:	f7ff ff87 	bl	80021c0 <SetAGC>
	SetBW( psets[Idx].bw);
 80022b2:	4425      	add	r5, r4
	if (newbw == CurrentBW)
 80022b4:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <Tune_Preset+0x12c>)
	SetBW( psets[Idx].bw);
 80022b6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	if (newbw == CurrentBW)
 80022ba:	7811      	ldrb	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 80022bc:	7d6b      	ldrb	r3, [r5, #21]
	if (newbw == CurrentBW)
 80022be:	4299      	cmp	r1, r3
 80022c0:	d012      	beq.n	80022e8 <Tune_Preset+0x74>
	switch(CurrentMode)
 80022c2:	7839      	ldrb	r1, [r7, #0]
	CurrentBW = newbw;
 80022c4:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 80022c6:	2903      	cmp	r1, #3
 80022c8:	d80e      	bhi.n	80022e8 <Tune_Preset+0x74>
 80022ca:	e8df f001 	tbb	[pc, r1]
 80022ce:	3d31      	.short	0x3d31
 80022d0:	024e      	.short	0x024e
		bw[CW] = newbw;
 80022d2:	4931      	ldr	r1, [pc, #196]	; (8002398 <Tune_Preset+0x124>)
		CWindex = 0; // TODO toglimi
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <Tune_Preset+0x130>)
		bw[CW] = newbw;
 80022d6:	70cb      	strb	r3, [r1, #3]
		CWindex = 0; // TODO toglimi
 80022d8:	2300      	movs	r3, #0
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 80022da:	eddf 0a33 	vldr	s1, [pc, #204]	; 80023a8 <Tune_Preset+0x134>
 80022de:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80023ac <Tune_Preset+0x138>
		CWindex = 0; // TODO toglimi
 80022e2:	8013      	strh	r3, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 80022e4:	f001 fccc 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 80022e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80022ec:	4830      	ldr	r0, [pc, #192]	; (80023b0 <Tune_Preset+0x13c>)
 80022ee:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 80022f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 80022f6:	f00f bf31 	b.w	801215c <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <Tune_Preset+0x124>)
 80022fc:	7818      	ldrb	r0, [r3, #0]
 80022fe:	f7ff fefb 	bl	80020f8 <SetBW>
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <Tune_Preset+0x128>)
 8002304:	7818      	ldrb	r0, [r3, #0]
 8002306:	f7ff ff5b 	bl	80021c0 <SetAGC>
		break;
 800230a:	e7d2      	b.n	80022b2 <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <Tune_Preset+0x124>)
 800230e:	7858      	ldrb	r0, [r3, #1]
 8002310:	f7ff fef2 	bl	80020f8 <SetBW>
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <Tune_Preset+0x128>)
 8002316:	7858      	ldrb	r0, [r3, #1]
 8002318:	f7ff ff52 	bl	80021c0 <SetAGC>
		break;
 800231c:	e7c9      	b.n	80022b2 <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <Tune_Preset+0x124>)
 8002320:	7898      	ldrb	r0, [r3, #2]
 8002322:	f7ff fee9 	bl	80020f8 <SetBW>
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <Tune_Preset+0x128>)
 8002328:	7898      	ldrb	r0, [r3, #2]
 800232a:	f7ff ff49 	bl	80021c0 <SetAGC>
		break;
 800232e:	e7c0      	b.n	80022b2 <Tune_Preset+0x3e>
		bw[AM] = newbw;
 8002330:	4919      	ldr	r1, [pc, #100]	; (8002398 <Tune_Preset+0x124>)
		AMindex = 0; // TODO toglimi
 8002332:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <Tune_Preset+0x140>)
		bw[AM] = newbw;
 8002334:	700b      	strb	r3, [r1, #0]
		AMindex = 0; // TODO toglimi
 8002336:	2300      	movs	r3, #0
		SetMask(-3000.0f, 3000.0f);
 8002338:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80023b8 <Tune_Preset+0x144>
 800233c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80023bc <Tune_Preset+0x148>
		AMindex = 0; // TODO toglimi
 8002340:	8013      	strh	r3, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8002342:	f001 fc9d 	bl	8003c80 <SetMask>
		break;
 8002346:	e7cf      	b.n	80022e8 <Tune_Preset+0x74>
		bw[LSB] = newbw;
 8002348:	4913      	ldr	r1, [pc, #76]	; (8002398 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <Tune_Preset+0x140>)
		bw[LSB] = newbw;
 800234c:	704b      	strb	r3, [r1, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800234e:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8002350:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80023c0 <Tune_Preset+0x14c>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002354:	bf18      	it	ne
 8002356:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 8002358:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80023c4 <Tune_Preset+0x150>
		AMindex = (newbw == Narrow) ? 0 : 1;
 800235c:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 800235e:	2200      	movs	r2, #0
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <Tune_Preset+0x154>)
 8002362:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8002364:	f001 fc8c 	bl	8003c80 <SetMask>
		break;
 8002368:	e7be      	b.n	80022e8 <Tune_Preset+0x74>
		bw[USB] = newbw;
 800236a:	490b      	ldr	r1, [pc, #44]	; (8002398 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <Tune_Preset+0x140>)
		bw[USB] = newbw;
 800236e:	708b      	strb	r3, [r1, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002370:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8002372:	eddf 0a13 	vldr	s1, [pc, #76]	; 80023c0 <Tune_Preset+0x14c>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002376:	bf18      	it	ne
 8002378:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 800237a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80023c4 <Tune_Preset+0x150>
		AMindex = (newbw == Narrow) ? 0 : 1;
 800237e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8002380:	2200      	movs	r2, #0
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <Tune_Preset+0x158>)
 8002384:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8002386:	f001 fc7b 	bl	8003c80 <SetMask>
		break;
 800238a:	e7ad      	b.n	80022e8 <Tune_Preset+0x74>
 800238c:	2400afcc 	.word	0x2400afcc
 8002390:	24006178 	.word	0x24006178
 8002394:	24000f38 	.word	0x24000f38
 8002398:	24007b50 	.word	0x24007b50
 800239c:	24007b40 	.word	0x24007b40
 80023a0:	24000f37 	.word	0x24000f37
 80023a4:	24000f34 	.word	0x24000f34
 80023a8:	44480000 	.word	0x44480000
 80023ac:	43fa0000 	.word	0x43fa0000
 80023b0:	2400afa0 	.word	0x2400afa0
 80023b4:	24000700 	.word	0x24000700
 80023b8:	453b8000 	.word	0x453b8000
 80023bc:	c53b8000 	.word	0xc53b8000
 80023c0:	451c4000 	.word	0x451c4000
 80023c4:	43960000 	.word	0x43960000
 80023c8:	2400617c 	.word	0x2400617c
 80023cc:	24006218 	.word	0x24006218

080023d0 <SetMode>:
{
 80023d0:	b508      	push	{r3, lr}
	if (CurrentMode == newmode)
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <SetMode+0x6c>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4282      	cmp	r2, r0
 80023d8:	d006      	beq.n	80023e8 <SetMode+0x18>
	CurrentMode = newmode;
 80023da:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 80023dc:	2803      	cmp	r0, #3
 80023de:	d803      	bhi.n	80023e8 <SetMode+0x18>
 80023e0:	e8df f000 	tbb	[pc, r0]
 80023e4:	0321170d 	.word	0x0321170d
		break;

	default :
		break;
	}
}	
 80023e8:	bd08      	pop	{r3, pc}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <SetMode+0x70>)
 80023ec:	78d8      	ldrb	r0, [r3, #3]
 80023ee:	f7ff fe83 	bl	80020f8 <SetBW>
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <SetMode+0x74>)
 80023f4:	78d8      	ldrb	r0, [r3, #3]
}	
 80023f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80023fa:	f7ff bee1 	b.w	80021c0 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <SetMode+0x70>)
 8002400:	7818      	ldrb	r0, [r3, #0]
 8002402:	f7ff fe79 	bl	80020f8 <SetBW>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <SetMode+0x74>)
 8002408:	7818      	ldrb	r0, [r3, #0]
}	
 800240a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800240e:	f7ff bed7 	b.w	80021c0 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SetMode+0x70>)
 8002414:	7858      	ldrb	r0, [r3, #1]
 8002416:	f7ff fe6f 	bl	80020f8 <SetBW>
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <SetMode+0x74>)
 800241c:	7858      	ldrb	r0, [r3, #1]
}	
 800241e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8002422:	f7ff becd 	b.w	80021c0 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SetMode+0x70>)
 8002428:	7898      	ldrb	r0, [r3, #2]
 800242a:	f7ff fe65 	bl	80020f8 <SetBW>
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SetMode+0x74>)
 8002430:	7898      	ldrb	r0, [r3, #2]
}	
 8002432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002436:	f7ff bec3 	b.w	80021c0 <SetAGC>
 800243a:	bf00      	nop
 800243c:	24000f38 	.word	0x24000f38
 8002440:	24007b50 	.word	0x24007b50
 8002444:	24007b40 	.word	0x24007b40

08002448 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8002448:	2809      	cmp	r0, #9
{
 800244a:	b508      	push	{r3, lr}
	if (idx == 9)
 800244c:	d012      	beq.n	8002474 <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 800244e:	f1c0 0005 	rsb	r0, r0, #5
 8002452:	ee07 0a90 	vmov	s15, r0
 8002456:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002480 <SetFstep+0x38>
 800245a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800245e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8002462:	f011 ffbd 	bl	80143e0 <exp>
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <SetFstep+0x40>)
 8002468:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 800246c:	ee17 3a90 	vmov	r3, s15
 8002470:	6013      	str	r3, [r2, #0]
}	
 8002472:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8002474:	f242 3328 	movw	r3, #9000	; 0x2328
 8002478:	4a03      	ldr	r2, [pc, #12]	; (8002488 <SetFstep+0x40>)
 800247a:	6013      	str	r3, [r2, #0]
}	
 800247c:	bd08      	pop	{r3, pc}
 800247e:	bf00      	nop
 8002480:	bbb55516 	.word	0xbbb55516
 8002484:	40026bb1 	.word	0x40026bb1
 8002488:	24005160 	.word	0x24005160

0800248c <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800248c:	4a3f      	ldr	r2, [pc, #252]	; (800258c <FplusClicked+0x100>)
 800248e:	ee07 0a90 	vmov	s15, r0
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <FplusClicked+0x104>)
 8002494:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002498:	ed92 6a00 	vldr	s12, [r2]
 800249c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <FplusClicked+0x108>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80024aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = min(LOfreq, 50000000.f);
 80024ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002598 <FplusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80024b2:	493a      	ldr	r1, [pc, #232]	; (800259c <FplusClicked+0x110>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80024b4:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 80024b8:	4839      	ldr	r0, [pc, #228]	; (80025a0 <FplusClicked+0x114>)
{	
 80024ba:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80024bc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80024c0:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 80024c2:	4c38      	ldr	r4, [pc, #224]	; (80025a4 <FplusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80024c4:	750a      	strb	r2, [r1, #20]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80024c6:	eea6 7b04 	vfma.f64	d7, d6, d4
 80024ca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 80024ce:	fe87 7a65 	vminnm.f32	s14, s14, s11
 80024d2:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 80024d6:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80024d8:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 80024dc:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 80024de:	7801      	ldrb	r1, [r0, #0]
 80024e0:	4299      	cmp	r1, r3
 80024e2:	d010      	beq.n	8002506 <FplusClicked+0x7a>
	CurrentBW = newbw;
 80024e4:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 80024e6:	2a03      	cmp	r2, #3
 80024e8:	d80d      	bhi.n	8002506 <FplusClicked+0x7a>
 80024ea:	e8df f002 	tbb	[pc, r2]
 80024ee:	2212      	.short	0x2212
 80024f0:	0238      	.short	0x0238
		CWindex = 0; // TODO toglimi
 80024f2:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <FplusClicked+0x11c>)
 80024f4:	2100      	movs	r1, #0
		bw[CW] = newbw;
 80024f6:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 80024f8:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80025ac <FplusClicked+0x120>
 80024fc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80025b0 <FplusClicked+0x124>
		CWindex = 0; // TODO toglimi
 8002500:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8002502:	f001 fbbd 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 8002506:	4925      	ldr	r1, [pc, #148]	; (800259c <FplusClicked+0x110>)
 8002508:	482a      	ldr	r0, [pc, #168]	; (80025b4 <FplusClicked+0x128>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 800250a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800250e:	f00f be25 	b.w	801215c <strcpy>
		AMindex = 0; // TODO toglimi
 8002512:	2100      	movs	r1, #0
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <FplusClicked+0x12c>)
		bw[AM] = newbw;
 8002516:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8002518:	eddf 0a28 	vldr	s1, [pc, #160]	; 80025bc <FplusClicked+0x130>
		AMindex = 0; // TODO toglimi
 800251c:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 800251e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80025c0 <FplusClicked+0x134>
 8002522:	f001 fbad 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 8002526:	491d      	ldr	r1, [pc, #116]	; (800259c <FplusClicked+0x110>)
 8002528:	4822      	ldr	r0, [pc, #136]	; (80025b4 <FplusClicked+0x128>)
}	
 800252a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800252e:	f00f be15 	b.w	801215c <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002532:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 8002534:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002536:	4920      	ldr	r1, [pc, #128]	; (80025b8 <FplusClicked+0x12c>)
		LSBindex = 0; // TODO toglimi
 8002538:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800253c:	bf18      	it	ne
 800253e:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <FplusClicked+0x138>)
		SetMask(300.0f, 2500.0f);
 8002542:	eddf 0a21 	vldr	s1, [pc, #132]	; 80025c8 <FplusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002546:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002548:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80025cc <FplusClicked+0x140>
		LSBindex = 0; // TODO toglimi
 800254c:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 800254e:	f001 fb97 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 8002552:	4912      	ldr	r1, [pc, #72]	; (800259c <FplusClicked+0x110>)
 8002554:	4817      	ldr	r0, [pc, #92]	; (80025b4 <FplusClicked+0x128>)
}	
 8002556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800255a:	f00f bdff 	b.w	801215c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 800255e:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 8002560:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002562:	4915      	ldr	r1, [pc, #84]	; (80025b8 <FplusClicked+0x12c>)
		USBindex = 0; // TODO toglimi
 8002564:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002568:	bf18      	it	ne
 800256a:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 800256c:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <FplusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 800256e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80025c8 <FplusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002572:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002574:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80025cc <FplusClicked+0x140>
		USBindex = 0; // TODO toglimi
 8002578:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 800257a:	f001 fb81 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 800257e:	4907      	ldr	r1, [pc, #28]	; (800259c <FplusClicked+0x110>)
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <FplusClicked+0x128>)
}	
 8002582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002586:	f00f bde9 	b.w	801215c <strcpy>
 800258a:	bf00      	nop
 800258c:	24005160 	.word	0x24005160
 8002590:	24006178 	.word	0x24006178
 8002594:	24000f38 	.word	0x24000f38
 8002598:	4c3ebc20 	.word	0x4c3ebc20
 800259c:	2400afcc 	.word	0x2400afcc
 80025a0:	24000f37 	.word	0x24000f37
 80025a4:	24007b50 	.word	0x24007b50
 80025a8:	24000f34 	.word	0x24000f34
 80025ac:	44480000 	.word	0x44480000
 80025b0:	43fa0000 	.word	0x43fa0000
 80025b4:	2400afa0 	.word	0x2400afa0
 80025b8:	24000700 	.word	0x24000700
 80025bc:	453b8000 	.word	0x453b8000
 80025c0:	c53b8000 	.word	0xc53b8000
 80025c4:	2400617c 	.word	0x2400617c
 80025c8:	451c4000 	.word	0x451c4000
 80025cc:	43960000 	.word	0x43960000
 80025d0:	24006218 	.word	0x24006218

080025d4 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80025d4:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <FminusClicked+0x100>)
 80025d6:	ee07 0a90 	vmov	s15, r0
 80025da:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <FminusClicked+0x104>)
 80025dc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80025e0:	ed92 6a00 	vldr	s12, [r2]
 80025e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80025f0:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <FminusClicked+0x108>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80025f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = max(LOfreq, 8000.f);
 80025f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80026e0 <FminusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80025fa:	493a      	ldr	r1, [pc, #232]	; (80026e4 <FminusClicked+0x110>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80025fc:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8002600:	4839      	ldr	r0, [pc, #228]	; (80026e8 <FminusClicked+0x114>)
{	
 8002602:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002604:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002608:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 800260a:	4c38      	ldr	r4, [pc, #224]	; (80026ec <FminusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800260c:	750a      	strb	r2, [r1, #20]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 800260e:	eea6 7b44 	vfms.f64	d7, d6, d4
 8002612:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8002616:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 800261a:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 800261e:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002620:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8002624:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 8002626:	7801      	ldrb	r1, [r0, #0]
 8002628:	4299      	cmp	r1, r3
 800262a:	d010      	beq.n	800264e <FminusClicked+0x7a>
	CurrentBW = newbw;
 800262c:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 800262e:	2a03      	cmp	r2, #3
 8002630:	d80d      	bhi.n	800264e <FminusClicked+0x7a>
 8002632:	e8df f002 	tbb	[pc, r2]
 8002636:	2212      	.short	0x2212
 8002638:	0238      	.short	0x0238
		CWindex = 0; // TODO toglimi
 800263a:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <FminusClicked+0x11c>)
 800263c:	2100      	movs	r1, #0
		bw[CW] = newbw;
 800263e:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8002640:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80026f4 <FminusClicked+0x120>
 8002644:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80026f8 <FminusClicked+0x124>
		CWindex = 0; // TODO toglimi
 8002648:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 800264a:	f001 fb19 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 800264e:	4925      	ldr	r1, [pc, #148]	; (80026e4 <FminusClicked+0x110>)
 8002650:	482a      	ldr	r0, [pc, #168]	; (80026fc <FminusClicked+0x128>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8002652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002656:	f00f bd81 	b.w	801215c <strcpy>
		AMindex = 0; // TODO toglimi
 800265a:	2100      	movs	r1, #0
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <FminusClicked+0x12c>)
		bw[AM] = newbw;
 800265e:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8002660:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002704 <FminusClicked+0x130>
		AMindex = 0; // TODO toglimi
 8002664:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8002666:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002708 <FminusClicked+0x134>
 800266a:	f001 fb09 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 800266e:	491d      	ldr	r1, [pc, #116]	; (80026e4 <FminusClicked+0x110>)
 8002670:	4822      	ldr	r0, [pc, #136]	; (80026fc <FminusClicked+0x128>)
}
 8002672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002676:	f00f bd71 	b.w	801215c <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800267a:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 800267c:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 800267e:	4920      	ldr	r1, [pc, #128]	; (8002700 <FminusClicked+0x12c>)
		LSBindex = 0; // TODO toglimi
 8002680:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002684:	bf18      	it	ne
 8002686:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <FminusClicked+0x138>)
		SetMask(300.0f, 2500.0f);
 800268a:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002710 <FminusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 800268e:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002690:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002714 <FminusClicked+0x140>
		LSBindex = 0; // TODO toglimi
 8002694:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8002696:	f001 faf3 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 800269a:	4912      	ldr	r1, [pc, #72]	; (80026e4 <FminusClicked+0x110>)
 800269c:	4817      	ldr	r0, [pc, #92]	; (80026fc <FminusClicked+0x128>)
}
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80026a2:	f00f bd5b 	b.w	801215c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 80026a6:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 80026a8:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 80026aa:	4915      	ldr	r1, [pc, #84]	; (8002700 <FminusClicked+0x12c>)
		USBindex = 0; // TODO toglimi
 80026ac:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 80026b0:	bf18      	it	ne
 80026b2:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 80026b4:	4a18      	ldr	r2, [pc, #96]	; (8002718 <FminusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 80026b6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002710 <FminusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 80026ba:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 80026bc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002714 <FminusClicked+0x140>
		USBindex = 0; // TODO toglimi
 80026c0:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 80026c2:	f001 fadd 	bl	8003c80 <SetMask>
	strcpy(msg, psets[Idx].name);
 80026c6:	4907      	ldr	r1, [pc, #28]	; (80026e4 <FminusClicked+0x110>)
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <FminusClicked+0x128>)
}
 80026ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80026ce:	f00f bd45 	b.w	801215c <strcpy>
 80026d2:	bf00      	nop
 80026d4:	24005160 	.word	0x24005160
 80026d8:	24006178 	.word	0x24006178
 80026dc:	24000f38 	.word	0x24000f38
 80026e0:	45fa0000 	.word	0x45fa0000
 80026e4:	2400afcc 	.word	0x2400afcc
 80026e8:	24000f37 	.word	0x24000f37
 80026ec:	24007b50 	.word	0x24007b50
 80026f0:	24000f34 	.word	0x24000f34
 80026f4:	44480000 	.word	0x44480000
 80026f8:	43fa0000 	.word	0x43fa0000
 80026fc:	2400afa0 	.word	0x2400afa0
 8002700:	24000700 	.word	0x24000700
 8002704:	453b8000 	.word	0x453b8000
 8002708:	c53b8000 	.word	0xc53b8000
 800270c:	2400617c 	.word	0x2400617c
 8002710:	451c4000 	.word	0x451c4000
 8002714:	43960000 	.word	0x43960000
 8002718:	24006218 	.word	0x24006218

0800271c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop

08002720 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8002720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	498b      	ldr	r1, [pc, #556]	; (8002958 <HAL_GPIO_EXTI_Callback+0x238>)
 800272a:	488c      	ldr	r0, [pc, #560]	; (800295c <HAL_GPIO_EXTI_Callback+0x23c>)
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800272c:	4c8c      	ldr	r4, [pc, #560]	; (8002960 <HAL_GPIO_EXTI_Callback+0x240>)
{
 800272e:	ed2d 8b08 	vpush	{d8-d11}
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8002732:	f000 ff7d 	bl	8003630 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8002736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273a:	498a      	ldr	r1, [pc, #552]	; (8002964 <HAL_GPIO_EXTI_Callback+0x244>)
 800273c:	488a      	ldr	r0, [pc, #552]	; (8002968 <HAL_GPIO_EXTI_Callback+0x248>)
 800273e:	f000 ff77 	bl	8003630 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8002742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002746:	4a89      	ldr	r2, [pc, #548]	; (800296c <HAL_GPIO_EXTI_Callback+0x24c>)
 8002748:	4984      	ldr	r1, [pc, #528]	; (800295c <HAL_GPIO_EXTI_Callback+0x23c>)
 800274a:	4889      	ldr	r0, [pc, #548]	; (8002970 <HAL_GPIO_EXTI_Callback+0x250>)
 800274c:	f7ff f826 	bl	800179c <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8002750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002754:	4a87      	ldr	r2, [pc, #540]	; (8002974 <HAL_GPIO_EXTI_Callback+0x254>)
 8002756:	4984      	ldr	r1, [pc, #528]	; (8002968 <HAL_GPIO_EXTI_Callback+0x248>)
 8002758:	4887      	ldr	r0, [pc, #540]	; (8002978 <HAL_GPIO_EXTI_Callback+0x258>)
 800275a:	f7ff f81f 	bl	800179c <arm_fir_decimate_f32>
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800275e:	4987      	ldr	r1, [pc, #540]	; (800297c <HAL_GPIO_EXTI_Callback+0x25c>)
 8002760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002764:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8002768:	f000 ff62 	bl	8003630 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	4a82      	ldr	r2, [pc, #520]	; (800297c <HAL_GPIO_EXTI_Callback+0x25c>)
 8002772:	4980      	ldr	r1, [pc, #512]	; (8002974 <HAL_GPIO_EXTI_Callback+0x254>)
 8002774:	487d      	ldr	r0, [pc, #500]	; (800296c <HAL_GPIO_EXTI_Callback+0x24c>)
 8002776:	f000 fe47 	bl	8003408 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 800277a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800277e:	4980      	ldr	r1, [pc, #512]	; (8002980 <HAL_GPIO_EXTI_Callback+0x260>)
 8002780:	4880      	ldr	r0, [pc, #512]	; (8002984 <HAL_GPIO_EXTI_Callback+0x264>)
 8002782:	f000 ff55 	bl	8003630 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8002786:	2301      	movs	r3, #1
 8002788:	2200      	movs	r2, #0
 800278a:	497e      	ldr	r1, [pc, #504]	; (8002984 <HAL_GPIO_EXTI_Callback+0x264>)
 800278c:	487e      	ldr	r0, [pc, #504]	; (8002988 <HAL_GPIO_EXTI_Callback+0x268>)
 800278e:	f7fe fcb5 	bl	80010fc <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8002792:	7823      	ldrb	r3, [r4, #0]
 8002794:	2b02      	cmp	r3, #2
 8002796:	f000 80c9 	beq.w	800292c <HAL_GPIO_EXTI_Callback+0x20c>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 800279a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279e:	4a7b      	ldr	r2, [pc, #492]	; (800298c <HAL_GPIO_EXTI_Callback+0x26c>)
 80027a0:	497b      	ldr	r1, [pc, #492]	; (8002990 <HAL_GPIO_EXTI_Callback+0x270>)
 80027a2:	4878      	ldr	r0, [pc, #480]	; (8002984 <HAL_GPIO_EXTI_Callback+0x264>)
 80027a4:	f7fe ffda 	bl	800175c <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80027a8:	2301      	movs	r3, #1
 80027aa:	4978      	ldr	r1, [pc, #480]	; (800298c <HAL_GPIO_EXTI_Callback+0x26c>)
 80027ac:	461a      	mov	r2, r3
 80027ae:	4876      	ldr	r0, [pc, #472]	; (8002988 <HAL_GPIO_EXTI_Callback+0x268>)
 80027b0:	f7fe fca4 	bl	80010fc <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80027b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b8:	4976      	ldr	r1, [pc, #472]	; (8002994 <HAL_GPIO_EXTI_Callback+0x274>)
 80027ba:	4877      	ldr	r0, [pc, #476]	; (8002998 <HAL_GPIO_EXTI_Callback+0x278>)
 80027bc:	f000 ff38 	bl	8003630 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 80027c0:	7823      	ldrb	r3, [r4, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d836      	bhi.n	8002834 <HAL_GPIO_EXTI_Callback+0x114>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80ab 	bne.w	8002922 <HAL_GPIO_EXTI_Callback+0x202>
	{	
	case AM :
#ifdef RECEIVE_AM
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80027cc:	4973      	ldr	r1, [pc, #460]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 80027ce:	4872      	ldr	r0, [pc, #456]	; (8002998 <HAL_GPIO_EXTI_Callback+0x278>)
 80027d0:	f001 f87e 	bl	80038d0 <SDR_demodAM_AGC>
	}


#ifdef DCF77_DECODER

	if (WSPRBeaconMode == 1)
 80027d4:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x280>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d045      	beq.n	8002868 <HAL_GPIO_EXTI_Callback+0x148>
#endif

#ifdef CW_TX_SIDETONE
	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 80027dc:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x284>)
 80027de:	7819      	ldrb	r1, [r3, #0]
 80027e0:	2900      	cmp	r1, #0
 80027e2:	d037      	beq.n	8002854 <HAL_GPIO_EXTI_Callback+0x134>
		for (int i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
			else
				fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 80027e4:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x288>)
 80027e6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80029ac <HAL_GPIO_EXTI_Callback+0x28c>
 80027ea:	edd3 7a00 	vldr	s15, [r3]
		for (int i=0; i<BSIZE; i++)
 80027ee:	2300      	movs	r3, #0
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
 80027f0:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80029b0 <HAL_GPIO_EXTI_Callback+0x290>
				fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	4a68      	ldr	r2, [pc, #416]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
 80027fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (i % 64 > 31)
 80027fe:	f013 0f20 	tst.w	r3, #32
		for (int i=0; i<BSIZE; i++)
 8002802:	f103 0301 	add.w	r3, r3, #1
			if (i % 64 > 31)
 8002806:	d10f      	bne.n	8002828 <HAL_GPIO_EXTI_Callback+0x108>
		for (int i=0; i<BSIZE; i++)
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	eca2 7a01 	vstmia	r2!, {s14}
 8002810:	d1f5      	bne.n	80027fe <HAL_GPIO_EXTI_Callback+0xde>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8002812:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002818:	4860      	ldr	r0, [pc, #384]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 800281a:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 800281c:	ecbd 8b08 	vpop	{d8-d11}
 8002820:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8002824:	f000 be8e 	b.w	8003544 <SDR_float_to_DAC_audio>
		for (int i=0; i<BSIZE; i++)
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	ece2 7a01 	vstmia	r2!, {s15}
 8002830:	d1e5      	bne.n	80027fe <HAL_GPIO_EXTI_Callback+0xde>
 8002832:	e7ee      	b.n	8002812 <HAL_GPIO_EXTI_Callback+0xf2>
	switch(CurrentMode)
 8002834:	2b03      	cmp	r3, #3
 8002836:	d1cd      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0xb4>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8002838:	4958      	ldr	r1, [pc, #352]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 800283a:	4857      	ldr	r0, [pc, #348]	; (8002998 <HAL_GPIO_EXTI_Callback+0x278>)
 800283c:	f001 f8d8 	bl	80039f0 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8002840:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1c5      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0xb4>
			SDR_CWPeak(fAudio, BSIZE);
 8002848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800284c:	4853      	ldr	r0, [pc, #332]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 800284e:	f000 ffb5 	bl	80037bc <SDR_CWPeak>
 8002852:	e7bf      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0xb4>
		if (TransmissionEnabled)
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_GPIO_EXTI_Callback+0x29c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0da      	beq.n	8002812 <HAL_GPIO_EXTI_Callback+0xf2>
				fAudio[i] = 0.;
 800285c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002860:	484e      	ldr	r0, [pc, #312]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002862:	f00e fe49 	bl	80114f8 <memset>
 8002866:	e7d4      	b.n	8002812 <HAL_GPIO_EXTI_Callback+0xf2>
		BaseNoiseLevel = 9999.f;
 8002868:	4c4c      	ldr	r4, [pc, #304]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800286c:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800286e:	f504 6a00 	add.w	sl, r4, #2048	; 0x800
 8002872:	f8df b168 	ldr.w	fp, [pc, #360]	; 80029dc <HAL_GPIO_EXTI_Callback+0x2bc>
 8002876:	4f54      	ldr	r7, [pc, #336]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002878:	4e54      	ldr	r6, [pc, #336]	; (80029cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 800287a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80029e0 <HAL_GPIO_EXTI_Callback+0x2c0>
 800287e:	4d54      	ldr	r5, [pc, #336]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
				LED_RED_ON;
 8002880:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80029e4 <HAL_GPIO_EXTI_Callback+0x2c4>
		BaseNoiseLevel = 9999.f;
 8002884:	601a      	str	r2, [r3, #0]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002886:	ed9f bb2c 	vldr	d11, [pc, #176]	; 8002938 <HAL_GPIO_EXTI_Callback+0x218>
 800288a:	ed9f ab2d 	vldr	d10, [pc, #180]	; 8002940 <HAL_GPIO_EXTI_Callback+0x220>
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800288e:	ed9f 9b2e 	vldr	d9, [pc, #184]	; 8002948 <HAL_GPIO_EXTI_Callback+0x228>
 8002892:	ed9f 8b2f 	vldr	d8, [pc, #188]	; 8002950 <HAL_GPIO_EXTI_Callback+0x230>
 8002896:	e008      	b.n	80028aa <HAL_GPIO_EXTI_Callback+0x18a>
				DCF77In = 0;
 8002898:	f8a5 c000 	strh.w	ip, [r5]
				LED_RED_ON;
 800289c:	f008 f814 	bl	800a8c8 <HAL_GPIO_WritePin>
			DoDCF77(DCF77In);
 80028a0:	8828      	ldrh	r0, [r5, #0]
 80028a2:	f7ff fb37 	bl	8001f14 <DoDCF77>
		for (int i = 0; i < BSIZE; i++)
 80028a6:	4554      	cmp	r4, sl
 80028a8:	d098      	beq.n	80027dc <HAL_GPIO_EXTI_Callback+0xbc>
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028aa:	ed97 6a00 	vldr	s12, [r7]
				DCF77In = 0;
 80028ae:	f04f 0c00 	mov.w	ip, #0
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80028b2:	ed96 7a00 	vldr	s14, [r6]
				LED_RED_OFF;
 80028b6:	4640      	mov	r0, r8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028b8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			CWLevel = fabs(fAudio[i]);
 80028bc:	ecf4 5a01 	vldmia	r4!, {s11}
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80028c0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 80028c4:	ed99 5a00 	vldr	s10, [r9]
			CWLevel = fabs(fAudio[i]);
 80028c8:	eef0 5ae5 	vabs.f32	s11, s11
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80028ce:	ee26 6b0b 	vmul.f64	d6, d6, d11
				LED_RED_OFF;
 80028d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d6:	4662      	mov	r2, ip
			CWLevel = fabs(fAudio[i]);
 80028d8:	edcb 5a00 	vstr	s11, [fp]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80028dc:	ee27 7b09 	vmul.f64	d7, d7, d9
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028e0:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80028e4:	eea4 7b08 	vfma.f64	d7, d4, d8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028e8:	eea4 6b0a 	vfma.f64	d6, d4, d10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80028ec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			OldMediumLevelAverage = MediumLevelFiltered;
 80028f0:	ed86 7a00 	vstr	s14, [r6]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028f4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 80028f8:	ee77 7a46 	vsub.f32	s15, s14, s12
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80028fc:	ed83 6a00 	vstr	s12, [r3]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2b8>)
			OldCWLevelAverage = CWLevelFiltered;
 8002902:	ed87 6a00 	vstr	s12, [r7]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8002906:	eef4 7ac5 	vcmpe.f32	s15, s10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800290a:	ed83 7a00 	vstr	s14, [r3]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	dcc1      	bgt.n	8002898 <HAL_GPIO_EXTI_Callback+0x178>
				DCF77In += 1; //TODO limit CW increase
 8002914:	882b      	ldrh	r3, [r5, #0]
				LED_RED_ON;
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
				DCF77In += 1; //TODO limit CW increase
 800291c:	4413      	add	r3, r2
 800291e:	802b      	strh	r3, [r5, #0]
 8002920:	e7bc      	b.n	800289c <HAL_GPIO_EXTI_Callback+0x17c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 8002922:	491e      	ldr	r1, [pc, #120]	; (800299c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002924:	481c      	ldr	r0, [pc, #112]	; (8002998 <HAL_GPIO_EXTI_Callback+0x278>)
 8002926:	f001 f863 	bl	80039f0 <SDR_demodSSB_CW_AGC>
 800292a:	e753      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0xb4>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800292c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002930:	4814      	ldr	r0, [pc, #80]	; (8002984 <HAL_GPIO_EXTI_Callback+0x264>)
 8002932:	f000 fe97 	bl	8003664 <SDR_mirror_LSB>
 8002936:	e730      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x7a>
 8002938:	d916872b 	.word	0xd916872b
 800293c:	3feff7ce 	.word	0x3feff7ce
 8002940:	d2f1a9fc 	.word	0xd2f1a9fc
 8002944:	3f50624d 	.word	0x3f50624d
 8002948:	074a771d 	.word	0x074a771d
 800294c:	3fefffeb 	.word	0x3fefffeb
 8002950:	88e368f1 	.word	0x88e368f1
 8002954:	3ee4f8b5 	.word	0x3ee4f8b5
 8002958:	2000f800 	.word	0x2000f800
 800295c:	2000b800 	.word	0x2000b800
 8002960:	24000f38 	.word	0x24000f38
 8002964:	2000d800 	.word	0x2000d800
 8002968:	20009800 	.word	0x20009800
 800296c:	20009000 	.word	0x20009000
 8002970:	240061c0 	.word	0x240061c0
 8002974:	20008800 	.word	0x20008800
 8002978:	240061b4 	.word	0x240061b4
 800297c:	24009360 	.word	0x24009360
 8002980:	24008360 	.word	0x24008360
 8002984:	20004800 	.word	0x20004800
 8002988:	08018648 	.word	0x08018648
 800298c:	20002800 	.word	0x20002800
 8002990:	20006800 	.word	0x20006800
 8002994:	20003800 	.word	0x20003800
 8002998:	2400b734 	.word	0x2400b734
 800299c:	24007b60 	.word	0x24007b60
 80029a0:	24007320 	.word	0x24007320
 80029a4:	24006200 	.word	0x24006200
 80029a8:	240061a4 	.word	0x240061a4
 80029ac:	be4ccccd 	.word	0xbe4ccccd
 80029b0:	3e4ccccd 	.word	0x3e4ccccd
 80029b4:	2400731c 	.word	0x2400731c
 80029b8:	24007b50 	.word	0x24007b50
 80029bc:	2400620c 	.word	0x2400620c
 80029c0:	24000f24 	.word	0x24000f24
 80029c4:	461c3c00 	.word	0x461c3c00
 80029c8:	24006194 	.word	0x24006194
 80029cc:	24006198 	.word	0x24006198
 80029d0:	24000f3a 	.word	0x24000f3a
 80029d4:	24000f2c 	.word	0x24000f2c
 80029d8:	2400618c 	.word	0x2400618c
 80029dc:	24000f28 	.word	0x24000f28
 80029e0:	24000f30 	.word	0x24000f30
 80029e4:	58020400 	.word	0x58020400

080029e8 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 80029ec:	4d8e      	ldr	r5, [pc, #568]	; (8002c28 <ADC_Stream0_Handler+0x240>)
{
 80029ee:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 80029f2:	782b      	ldrb	r3, [r5, #0]
{
 80029f4:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 80029f6:	b123      	cbz	r3, 8002a02 <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 80029f8:	4a8c      	ldr	r2, [pc, #560]	; (8002c2c <ADC_Stream0_Handler+0x244>)
 80029fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029fc:	f023 0310 	bic.w	r3, r3, #16
 8002a00:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002a02:	4f8b      	ldr	r7, [pc, #556]	; (8002c30 <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8002a04:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002a06:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	bf08      	it	eq
 8002a10:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	f000 8429 	beq.w	800326a <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8002a18:	4b87      	ldr	r3, [pc, #540]	; (8002c38 <ADC_Stream0_Handler+0x250>)
 8002a1a:	ed93 0a00 	vldr	s0, [r3]
 8002a1e:	f000 fc35 	bl	800328c <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8002a22:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8002a26:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 8002a28:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002c3c <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 8002a2c:	8814      	ldrh	r4, [r2, #0]
	while(k)
 8002a2e:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8002a30:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8002a32:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 8002a34:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 8002a36:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 8002a38:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 8002a3a:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 8002a3e:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 8002a40:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 8002a44:	b289      	uxth	r1, r1
		sum += pR[k-1];
 8002a46:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 8002a4a:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 8002a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 8002a52:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 8002a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 8002a5a:	4290      	cmp	r0, r2
		sum += pR[k-4];
 8002a5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a64:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6c:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 8002a70:	d1dc      	bne.n	8002a2c <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 8002a72:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002a76:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002a78:	eddf 7a71 	vldr	s15, [pc, #452]	; 8002c40 <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002a7c:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4c70      	ldr	r4, [pc, #448]	; (8002c44 <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002a82:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002a86:	4970      	ldr	r1, [pc, #448]	; (8002c48 <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 8002a88:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002a8c:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <ADC_Stream0_Handler+0x264>)
 8002a8e:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002a94:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002a9a:	4a6e      	ldr	r2, [pc, #440]	; (8002c54 <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 8002a9c:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002aa0:	f000 fcde 	bl	8003460 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 8002aa4:	782b      	ldrb	r3, [r5, #0]
 8002aa6:	b30b      	cbz	r3, 8002aec <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002aa8:	4d6b      	ldr	r5, [pc, #428]	; (8002c58 <ADC_Stream0_Handler+0x270>)
 8002aaa:	496c      	ldr	r1, [pc, #432]	; (8002c5c <ADC_Stream0_Handler+0x274>)
 8002aac:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <ADC_Stream0_Handler+0x278>)
 8002ab2:	7809      	ldrb	r1, [r1, #0]
 8002ab4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002ab8:	1c53      	adds	r3, r2, #1
 8002aba:	4282      	cmp	r2, r0
 8002abc:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002abe:	485b      	ldr	r0, [pc, #364]	; (8002c2c <ADC_Stream0_Handler+0x244>)
 8002ac0:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002ac2:	802b      	strh	r3, [r5, #0]
 8002ac4:	f2c0 8352 	blt.w	800316c <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002ac8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002acc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 8002ace:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002ad0:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <ADC_Stream0_Handler+0x280>)
 8002ad2:	ea02 0206 	and.w	r2, r2, r6
 8002ad6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002ada:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8002adc:	d101      	bne.n	8002ae2 <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <ADC_Stream0_Handler+0x244>)
 8002ae4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ae6:	f043 0310 	orr.w	r3, r3, #16
 8002aea:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8002aec:	4a5f      	ldr	r2, [pc, #380]	; (8002c6c <ADC_Stream0_Handler+0x284>)
 8002aee:	23ff      	movs	r3, #255	; 0xff
 8002af0:	495f      	ldr	r1, [pc, #380]	; (8002c70 <ADC_Stream0_Handler+0x288>)
 8002af2:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8002af6:	ed92 2a00 	vldr	s4, [r2]
 8002afa:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8002afe:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <ADC_Stream0_Handler+0x28c>)
 8002b00:	edd1 3a00 	vldr	s7, [r1]
 8002b04:	edd2 1a00 	vldr	s3, [r2]
 8002b08:	4a5b      	ldr	r2, [pc, #364]	; (8002c78 <ADC_Stream0_Handler+0x290>)
 8002b0a:	495c      	ldr	r1, [pc, #368]	; (8002c7c <ADC_Stream0_Handler+0x294>)
 8002b0c:	ed92 7a00 	vldr	s14, [r2]
 8002b10:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <ADC_Stream0_Handler+0x298>)
 8002b12:	ed91 9a00 	vldr	s18, [r1]
 8002b16:	eeb0 6a47 	vmov.f32	s12, s14
 8002b1a:	edd2 2a00 	vldr	s5, [r2]
 8002b1e:	4959      	ldr	r1, [pc, #356]	; (8002c84 <ADC_Stream0_Handler+0x29c>)
 8002b20:	4a59      	ldr	r2, [pc, #356]	; (8002c88 <ADC_Stream0_Handler+0x2a0>)
 8002b22:	edd1 ea00 	vldr	s29, [r1]
 8002b26:	edd2 8a00 	vldr	s17, [r2]
 8002b2a:	4958      	ldr	r1, [pc, #352]	; (8002c8c <ADC_Stream0_Handler+0x2a4>)
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <ADC_Stream0_Handler+0x2a8>)
 8002b2e:	edd1 6a00 	vldr	s13, [r1]
 8002b32:	ed92 5a00 	vldr	s10, [r2]
 8002b36:	4957      	ldr	r1, [pc, #348]	; (8002c94 <ADC_Stream0_Handler+0x2ac>)
 8002b38:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <ADC_Stream0_Handler+0x2b0>)
 8002b3a:	edd1 ca00 	vldr	s25, [r1]
 8002b3e:	edd2 fa00 	vldr	s31, [r2]
 8002b42:	4956      	ldr	r1, [pc, #344]	; (8002c9c <ADC_Stream0_Handler+0x2b4>)
 8002b44:	4a56      	ldr	r2, [pc, #344]	; (8002ca0 <ADC_Stream0_Handler+0x2b8>)
 8002b46:	ed91 da00 	vldr	s26, [r1]
 8002b4a:	ed92 8a00 	vldr	s16, [r2]
 8002b4e:	4955      	ldr	r1, [pc, #340]	; (8002ca4 <ADC_Stream0_Handler+0x2bc>)
 8002b50:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <ADC_Stream0_Handler+0x2c0>)
 8002b52:	edcd 6a02 	vstr	s13, [sp, #8]
 8002b56:	edd2 5a00 	vldr	s11, [r2]
 8002b5a:	edd1 6a00 	vldr	s13, [r1]
 8002b5e:	4a53      	ldr	r2, [pc, #332]	; (8002cac <ADC_Stream0_Handler+0x2c4>)
 8002b60:	4953      	ldr	r1, [pc, #332]	; (8002cb0 <ADC_Stream0_Handler+0x2c8>)
 8002b62:	ed92 fa00 	vldr	s30, [r2]
 8002b66:	ed91 ca00 	vldr	s24, [r1]
 8002b6a:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <ADC_Stream0_Handler+0x2cc>)
 8002b6c:	4952      	ldr	r1, [pc, #328]	; (8002cb8 <ADC_Stream0_Handler+0x2d0>)
 8002b6e:	edd2 ba00 	vldr	s23, [r2]
 8002b72:	edcd 6a01 	vstr	s13, [sp, #4]
 8002b76:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <ADC_Stream0_Handler+0x2d4>)
 8002b78:	edd1 6a00 	vldr	s13, [r1]
 8002b7c:	4950      	ldr	r1, [pc, #320]	; (8002cc0 <ADC_Stream0_Handler+0x2d8>)
 8002b7e:	ed92 3a00 	vldr	s6, [r2]
 8002b82:	edcd 6a03 	vstr	s13, [sp, #12]
 8002b86:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <ADC_Stream0_Handler+0x2dc>)
 8002b88:	edd1 6a00 	vldr	s13, [r1]
 8002b8c:	494e      	ldr	r1, [pc, #312]	; (8002cc8 <ADC_Stream0_Handler+0x2e0>)
 8002b8e:	edd2 9a00 	vldr	s19, [r2]
 8002b92:	edcd 6a08 	vstr	s13, [sp, #32]
 8002b96:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <ADC_Stream0_Handler+0x2e4>)
 8002b98:	edd1 6a00 	vldr	s13, [r1]
 8002b9c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8002cf8 <ADC_Stream0_Handler+0x310>
 8002ba0:	494b      	ldr	r1, [pc, #300]	; (8002cd0 <ADC_Stream0_Handler+0x2e8>)
 8002ba2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8002cfc <ADC_Stream0_Handler+0x314>
 8002ba6:	ed92 ba00 	vldr	s22, [r2]
 8002baa:	ed9a 1a00 	vldr	s2, [sl]
 8002bae:	edd9 7a00 	vldr	s15, [r9]
 8002bb2:	8023      	strh	r3, [r4, #0]
 8002bb4:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8002bb8:	edd1 6a00 	vldr	s13, [r1]
 8002bbc:	4945      	ldr	r1, [pc, #276]	; (8002cd4 <ADC_Stream0_Handler+0x2ec>)
 8002bbe:	edcd 6a00 	vstr	s13, [sp]
 8002bc2:	edd1 6a00 	vldr	s13, [r1]
 8002bc6:	4944      	ldr	r1, [pc, #272]	; (8002cd8 <ADC_Stream0_Handler+0x2f0>)
 8002bc8:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8002bcc:	edd1 6a00 	vldr	s13, [r1]
 8002bd0:	4942      	ldr	r1, [pc, #264]	; (8002cdc <ADC_Stream0_Handler+0x2f4>)
 8002bd2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002d00 <ADC_Stream0_Handler+0x318>
 8002bd6:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002bda:	edd1 6a00 	vldr	s13, [r1]
 8002bde:	4f40      	ldr	r7, [pc, #256]	; (8002ce0 <ADC_Stream0_Handler+0x2f8>)
 8002be0:	edcd 6a06 	vstr	s13, [sp, #24]
 8002be4:	edd8 6a00 	vldr	s13, [r8]
 8002be8:	4e3e      	ldr	r6, [pc, #248]	; (8002ce4 <ADC_Stream0_Handler+0x2fc>)
 8002bea:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8002bee:	edd7 6a00 	vldr	s13, [r7]
 8002bf2:	493d      	ldr	r1, [pc, #244]	; (8002ce8 <ADC_Stream0_Handler+0x300>)
 8002bf4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8002bf8:	edd6 6a00 	vldr	s13, [r6]
 8002bfc:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002d04 <ADC_Stream0_Handler+0x31c>
 8002c00:	edcd 6a07 	vstr	s13, [sp, #28]
 8002c04:	edd1 6a00 	vldr	s13, [r1]
 8002c08:	4938      	ldr	r1, [pc, #224]	; (8002cec <ADC_Stream0_Handler+0x304>)
 8002c0a:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <ADC_Stream0_Handler+0x308>)
 8002c0c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8002c10:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8002c14:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 8002c18:	edd1 6a00 	vldr	s13, [r1]
 8002c1c:	4686      	mov	lr, r0
 8002c1e:	4935      	ldr	r1, [pc, #212]	; (8002cf4 <ADC_Stream0_Handler+0x30c>)
 8002c20:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8002c24:	e173      	b.n	8002f0e <ADC_Stream0_Handler+0x526>
 8002c26:	bf00      	nop
 8002c28:	2400620d 	.word	0x2400620d
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	24007740 	.word	0x24007740
 8002c34:	24000f38 	.word	0x24000f38
 8002c38:	24006178 	.word	0x24006178
 8002c3c:	00000000 	.word	0x00000000
 8002c40:	3b000000 	.word	0x3b000000
 8002c44:	24000620 	.word	0x24000620
 8002c48:	20001800 	.word	0x20001800
 8002c4c:	2400ac94 	.word	0x2400ac94
 8002c50:	24006208 	.word	0x24006208
 8002c54:	20001000 	.word	0x20001000
 8002c58:	2400058c 	.word	0x2400058c
 8002c5c:	24007323 	.word	0x24007323
 8002c60:	24005158 	.word	0x24005158
 8002c64:	2400514c 	.word	0x2400514c
 8002c68:	ffff0007 	.word	0xffff0007
 8002c6c:	24000594 	.word	0x24000594
 8002c70:	240005e4 	.word	0x240005e4
 8002c74:	240005c0 	.word	0x240005c0
 8002c78:	240005c4 	.word	0x240005c4
 8002c7c:	240005a0 	.word	0x240005a0
 8002c80:	24000590 	.word	0x24000590
 8002c84:	240005f8 	.word	0x240005f8
 8002c88:	240005d8 	.word	0x240005d8
 8002c8c:	240005fc 	.word	0x240005fc
 8002c90:	240005dc 	.word	0x240005dc
 8002c94:	240005ac 	.word	0x240005ac
 8002c98:	2400059c 	.word	0x2400059c
 8002c9c:	240005f0 	.word	0x240005f0
 8002ca0:	240005d0 	.word	0x240005d0
 8002ca4:	240005f4 	.word	0x240005f4
 8002ca8:	240005d4 	.word	0x240005d4
 8002cac:	24000598 	.word	0x24000598
 8002cb0:	240005a8 	.word	0x240005a8
 8002cb4:	240005e8 	.word	0x240005e8
 8002cb8:	24000608 	.word	0x24000608
 8002cbc:	240005ec 	.word	0x240005ec
 8002cc0:	2400060c 	.word	0x2400060c
 8002cc4:	240005a4 	.word	0x240005a4
 8002cc8:	240005b4 	.word	0x240005b4
 8002ccc:	240005e0 	.word	0x240005e0
 8002cd0:	24000600 	.word	0x24000600
 8002cd4:	24000604 	.word	0x24000604
 8002cd8:	240005b0 	.word	0x240005b0
 8002cdc:	24000618 	.word	0x24000618
 8002ce0:	240005bc 	.word	0x240005bc
 8002ce4:	24000610 	.word	0x24000610
 8002ce8:	24000614 	.word	0x24000614
 8002cec:	240005b8 	.word	0x240005b8
 8002cf0:	20001808 	.word	0x20001808
 8002cf4:	20001008 	.word	0x20001008
 8002cf8:	240005c8 	.word	0x240005c8
 8002cfc:	240005cc 	.word	0x240005cc
 8002d00:	2400061c 	.word	0x2400061c
 8002d04:	2400058e 	.word	0x2400058e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002d08:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002d0c:	0798      	lsls	r0, r3, #30
 8002d0e:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002d12:	ee7f faaa 	vadd.f32	s31, s31, s21
 8002d16:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8002d1a:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8002d1e:	eeef 5a24 	vfma.f32	s11, s30, s9
 8002d22:	ee75 6a27 	vadd.f32	s13, s10, s15
 8002d26:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002d2a:	f100 8118 	bmi.w	8002f5e <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8002d2e:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8002d32:	075d      	lsls	r5, r3, #29
 8002d34:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8002d38:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8002d3c:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8002d40:	eea9 3aa4 	vfma.f32	s6, s19, s9
 8002d44:	eee9 3a24 	vfma.f32	s7, s18, s9
 8002d48:	ee33 9a26 	vadd.f32	s18, s6, s13
 8002d4c:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8002d50:	f100 8116 	bmi.w	8002f80 <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8002d54:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8002d58:	0718      	lsls	r0, r3, #28
 8002d5a:	ed9d 5a01 	vldr	s10, [sp, #4]
 8002d5e:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8002d62:	eddd 3a05 	vldr	s7, [sp, #20]
 8002d66:	eead 5a04 	vfma.f32	s10, s26, s8
 8002d6a:	ed9d 3a04 	vldr	s6, [sp, #16]
 8002d6e:	ee7c caa3 	vadd.f32	s25, s25, s7
 8002d72:	ee3c ca03 	vadd.f32	s24, s24, s6
 8002d76:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8002d7a:	eeac 5a24 	vfma.f32	s10, s24, s9
 8002d7e:	ee39 ca25 	vadd.f32	s24, s18, s11
 8002d82:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8002d86:	f100 81a5 	bmi.w	80030d4 <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002d8a:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002d8e:	f013 0010 	ands.w	r0, r3, #16
 8002d92:	ed9d 3a03 	vldr	s6, [sp, #12]
 8002d96:	eddd 5a00 	vldr	s11, [sp]
 8002d9a:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 8002d9e:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002da2:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 8002da6:	eee5 fa84 	vfma.f32	s31, s11, s8
 8002daa:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8002dae:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002db2:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8002db6:	eea5 faa4 	vfma.f32	s30, s11, s9
 8002dba:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002dbe:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002dc0:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002dc4:	eee5 faa4 	vfma.f32	s31, s11, s9
 8002dc8:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8002dcc:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8002dd0:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002dd4:	f040 819b 	bne.w	800310e <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002dd8:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002ddc:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8002de0:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8002de4:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8002de8:	eee3 5a84 	vfma.f32	s11, s7, s8
 8002dec:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002df0:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8002df4:	eea3 5a84 	vfma.f32	s10, s7, s8
 8002df8:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002dfc:	4ddd      	ldr	r5, [pc, #884]	; (8003174 <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002dfe:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002e02:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002e06:	4428      	add	r0, r5
 8002e08:	4ddb      	ldr	r5, [pc, #876]	; (8003178 <ADC_Stream0_Handler+0x790>)
 8002e0a:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002e0e:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 8002e12:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002e16:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8002e1a:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002e1e:	eddf 3ad7 	vldr	s7, [pc, #860]	; 800317c <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002e22:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002e26:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002e2a:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002e2e:	ee25 5a23 	vmul.f32	s10, s10, s7
 8002e32:	ed80 5a00 	vstr	s10, [r0]
 8002e36:	f10e 0001 	add.w	r0, lr, #1
 8002e3a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002e3e:	edce 5a00 	vstr	s11, [lr]
 8002e42:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e46:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8002e4a:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e4e:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 8002e52:	f2c0 81d3 	blt.w	80031fc <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8002e56:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e5a:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e5e:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002e62:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002e66:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002e68:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002e6c:	ed8d da01 	vstr	s26, [sp, #4]
 8002e70:	eeb0 da69 	vmov.f32	s26, s19
 8002e74:	edcd ea02 	vstr	s29, [sp, #8]
 8002e78:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e7c:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002e80:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e84:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e88:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e8c:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002e90:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e94:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8002e98:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e9c:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ea0:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002ea4:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ea8:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002eac:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002eb0:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002eb4:	edcd fa07 	vstr	s31, [sp, #28]
 8002eb8:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ebc:	edcd ca00 	vstr	s25, [sp]
 8002ec0:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002ec4:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ec6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8002eca:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002ece:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8002ed2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8002ed6:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002eda:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8002ede:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002ee2:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8002ee6:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8002eea:	eeb0 fa4a 	vmov.f32	s30, s20
 8002eee:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	eef0 7a41 	vmov.f32	s15, s2
 8002efa:	3108      	adds	r1, #8
 8002efc:	4594      	cmp	ip, r2
 8002efe:	eeb0 6a61 	vmov.f32	s12, s3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	d059      	beq.n	8002fba <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002f06:	eef0 1a60 	vmov.f32	s3, s1
 8002f0a:	eeb0 1a40 	vmov.f32	s2, s0
 8002f0e:	eeb0 7a42 	vmov.f32	s14, s4
 8002f12:	ed12 0a01 	vldr	s0, [r2, #-4]
 8002f16:	ed12 2a02 	vldr	s4, [r2, #-8]
 8002f1a:	eef0 6a62 	vmov.f32	s13, s5
 8002f1e:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002f22:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002f24:	ee72 2a07 	vadd.f32	s5, s4, s14
 8002f28:	eeb0 7a40 	vmov.f32	s14, s0
 8002f2c:	eea1 7a04 	vfma.f32	s14, s2, s8
 8002f30:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002f34:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002f38:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8002f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f40:	eeb0 7a60 	vmov.f32	s14, s1
 8002f44:	eea1 7a84 	vfma.f32	s14, s3, s8
 8002f48:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8002f4c:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002f50:	f57f aeda 	bpl.w	8002d08 <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8002f54:	eeb0 aa47 	vmov.f32	s20, s14
 8002f58:	eef0 aa67 	vmov.f32	s21, s15
 8002f5c:	e7c9      	b.n	8002ef2 <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002f5e:	eef0 5a48 	vmov.f32	s11, s16
 8002f62:	eeb0 5a68 	vmov.f32	s10, s17
 8002f66:	eeb0 8a47 	vmov.f32	s16, s14
 8002f6a:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8002f6e:	eef0 da46 	vmov.f32	s27, s12
 8002f72:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8002f76:	eeb0 fa4a 	vmov.f32	s30, s20
 8002f7a:	eef0 fa6a 	vmov.f32	s31, s21
 8002f7e:	e7b8      	b.n	8002ef2 <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002f80:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002f84:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002f88:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002f8c:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002f90:	eef0 5a48 	vmov.f32	s11, s16
 8002f94:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002f98:	eeb0 ba46 	vmov.f32	s22, s12
 8002f9c:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002fa0:	eeb0 8a47 	vmov.f32	s16, s14
 8002fa4:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002fa8:	eeb0 9a6d 	vmov.f32	s18, s27
 8002fac:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8002fb0:	eeb0 fa4a 	vmov.f32	s30, s20
 8002fb4:	eef0 fa6a 	vmov.f32	s31, s21
 8002fb8:	e79b      	b.n	8002ef2 <ADC_Stream0_Handler+0x50a>
 8002fba:	4b71      	ldr	r3, [pc, #452]	; (8003180 <ADC_Stream0_Handler+0x798>)
 8002fbc:	eddd 7a02 	vldr	s15, [sp, #8]
 8002fc0:	ed83 2a00 	vstr	s4, [r3]
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <ADC_Stream0_Handler+0x79c>)
 8002fc6:	ed8a 0a00 	vstr	s0, [sl]
 8002fca:	edc3 0a00 	vstr	s1, [r3]
 8002fce:	4b6e      	ldr	r3, [pc, #440]	; (8003188 <ADC_Stream0_Handler+0x7a0>)
 8002fd0:	ed89 1a00 	vstr	s2, [r9]
 8002fd4:	edc3 1a00 	vstr	s3, [r3]
 8002fd8:	4b6c      	ldr	r3, [pc, #432]	; (800318c <ADC_Stream0_Handler+0x7a4>)
 8002fda:	4a6d      	ldr	r2, [pc, #436]	; (8003190 <ADC_Stream0_Handler+0x7a8>)
 8002fdc:	edc3 2a00 	vstr	s5, [r3]
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <ADC_Stream0_Handler+0x7ac>)
 8002fe2:	edc3 8a00 	vstr	s17, [r3]
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <ADC_Stream0_Handler+0x7b0>)
 8002fe8:	ed83 5a00 	vstr	s10, [r3]
 8002fec:	4b6b      	ldr	r3, [pc, #428]	; (800319c <ADC_Stream0_Handler+0x7b4>)
 8002fee:	edc3 fa00 	vstr	s31, [r3]
 8002ff2:	4b6b      	ldr	r3, [pc, #428]	; (80031a0 <ADC_Stream0_Handler+0x7b8>)
 8002ff4:	ed83 8a00 	vstr	s16, [r3]
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <ADC_Stream0_Handler+0x7bc>)
 8002ffa:	edc3 5a00 	vstr	s11, [r3]
 8002ffe:	4b6a      	ldr	r3, [pc, #424]	; (80031a8 <ADC_Stream0_Handler+0x7c0>)
 8003000:	ed83 fa00 	vstr	s30, [r3]
 8003004:	4b69      	ldr	r3, [pc, #420]	; (80031ac <ADC_Stream0_Handler+0x7c4>)
 8003006:	edc3 ba00 	vstr	s23, [r3]
 800300a:	4b69      	ldr	r3, [pc, #420]	; (80031b0 <ADC_Stream0_Handler+0x7c8>)
 800300c:	ed83 3a00 	vstr	s6, [r3]
 8003010:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <ADC_Stream0_Handler+0x7cc>)
 8003012:	edc3 9a00 	vstr	s19, [r3]
 8003016:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <ADC_Stream0_Handler+0x7d0>)
 8003018:	ed83 ba00 	vstr	s22, [r3]
 800301c:	4b67      	ldr	r3, [pc, #412]	; (80031bc <ADC_Stream0_Handler+0x7d4>)
 800301e:	edc3 3a00 	vstr	s7, [r3]
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <ADC_Stream0_Handler+0x7d8>)
 8003024:	ed83 9a00 	vstr	s18, [r3]
 8003028:	4b66      	ldr	r3, [pc, #408]	; (80031c4 <ADC_Stream0_Handler+0x7dc>)
 800302a:	edc3 ea00 	vstr	s29, [r3]
 800302e:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <ADC_Stream0_Handler+0x7e0>)
 8003030:	edc3 7a00 	vstr	s15, [r3]
 8003034:	4b65      	ldr	r3, [pc, #404]	; (80031cc <ADC_Stream0_Handler+0x7e4>)
 8003036:	eddd 7a01 	vldr	s15, [sp, #4]
 800303a:	edc3 ca00 	vstr	s25, [r3]
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <ADC_Stream0_Handler+0x7e8>)
 8003040:	ed83 da00 	vstr	s26, [r3]
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <ADC_Stream0_Handler+0x7ec>)
 8003046:	edc3 7a00 	vstr	s15, [r3]
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <ADC_Stream0_Handler+0x7f0>)
 800304c:	eddd 7a03 	vldr	s15, [sp, #12]
 8003050:	ed83 ca00 	vstr	s24, [r3]
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <ADC_Stream0_Handler+0x7f4>)
 8003056:	edc3 7a00 	vstr	s15, [r3]
 800305a:	eddd 7a08 	vldr	s15, [sp, #32]
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <ADC_Stream0_Handler+0x7f8>)
 8003060:	edc3 7a00 	vstr	s15, [r3]
 8003064:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <ADC_Stream0_Handler+0x7fc>)
 800306a:	edc3 7a00 	vstr	s15, [r3]
 800306e:	eddd 7a00 	vldr	s15, [sp]
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <ADC_Stream0_Handler+0x800>)
 8003074:	f8ab e000 	strh.w	lr, [fp]
 8003078:	edc3 7a00 	vstr	s15, [r3]
 800307c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8003080:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <ADC_Stream0_Handler+0x804>)
 8003082:	edc3 7a00 	vstr	s15, [r3]
 8003086:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800308a:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <ADC_Stream0_Handler+0x808>)
 800308c:	edc3 7a00 	vstr	s15, [r3]
 8003090:	eddd 7a06 	vldr	s15, [sp, #24]
 8003094:	4b57      	ldr	r3, [pc, #348]	; (80031f4 <ADC_Stream0_Handler+0x80c>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
 800309a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800309e:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <ADC_Stream0_Handler+0x810>)
 80030a0:	edc8 7a00 	vstr	s15, [r8]
 80030a4:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80030a8:	edc7 7a00 	vstr	s15, [r7]
 80030ac:	eddd 7a07 	vldr	s15, [sp, #28]
 80030b0:	edc6 7a00 	vstr	s15, [r6]
 80030b4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80030b8:	edc3 7a00 	vstr	s15, [r3]
 80030bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c0:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80030c4:	8023      	strh	r3, [r4, #0]
 80030c6:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 80030ca:	b015      	add	sp, #84	; 0x54
 80030cc:	ecbd 8b10 	vpop	{d8-d15}
 80030d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80030d4:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80030d8:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80030dc:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80030e0:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80030e4:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80030e8:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80030ec:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80030f0:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80030f4:	eeb0 da69 	vmov.f32	s26, s19
 80030f8:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80030fc:	eeb0 ba46 	vmov.f32	s22, s12
 8003100:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003104:	eeb0 8a47 	vmov.f32	s16, s14
 8003108:	eef0 8a67 	vmov.f32	s17, s15
 800310c:	e6e5      	b.n	8002eda <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800310e:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003112:	eef0 3a4b 	vmov.f32	s7, s22
 8003116:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800311a:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800311e:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8003122:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003126:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800312a:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800312e:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003132:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003136:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800313a:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800313e:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003142:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003146:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800314a:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800314e:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8003152:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003156:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 800315a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800315e:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8003162:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8003166:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 800316a:	e6b2      	b.n	8002ed2 <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800316c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003170:	1c51      	adds	r1, r2, #1
 8003172:	e4ab      	b.n	8002acc <ADC_Stream0_Handler+0xe4>
 8003174:	2000d800 	.word	0x2000d800
 8003178:	2000f800 	.word	0x2000f800
 800317c:	34000000 	.word	0x34000000
 8003180:	24000594 	.word	0x24000594
 8003184:	240005c0 	.word	0x240005c0
 8003188:	240005c4 	.word	0x240005c4
 800318c:	24000590 	.word	0x24000590
 8003190:	240005b8 	.word	0x240005b8
 8003194:	240005d8 	.word	0x240005d8
 8003198:	240005dc 	.word	0x240005dc
 800319c:	2400059c 	.word	0x2400059c
 80031a0:	240005d0 	.word	0x240005d0
 80031a4:	240005d4 	.word	0x240005d4
 80031a8:	24000598 	.word	0x24000598
 80031ac:	240005e8 	.word	0x240005e8
 80031b0:	240005ec 	.word	0x240005ec
 80031b4:	240005a4 	.word	0x240005a4
 80031b8:	240005e0 	.word	0x240005e0
 80031bc:	240005e4 	.word	0x240005e4
 80031c0:	240005a0 	.word	0x240005a0
 80031c4:	240005f8 	.word	0x240005f8
 80031c8:	240005fc 	.word	0x240005fc
 80031cc:	240005ac 	.word	0x240005ac
 80031d0:	240005f0 	.word	0x240005f0
 80031d4:	240005f4 	.word	0x240005f4
 80031d8:	240005a8 	.word	0x240005a8
 80031dc:	24000608 	.word	0x24000608
 80031e0:	2400060c 	.word	0x2400060c
 80031e4:	240005b4 	.word	0x240005b4
 80031e8:	24000600 	.word	0x24000600
 80031ec:	24000604 	.word	0x24000604
 80031f0:	240005b0 	.word	0x240005b0
 80031f4:	24000618 	.word	0x24000618
 80031f8:	24000614 	.word	0x24000614
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80031fc:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003200:	eeb0 5a68 	vmov.f32	s10, s17
 8003204:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8003208:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800320c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003210:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003214:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003218:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 800321c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003220:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003224:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8003228:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800322c:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8003230:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8003234:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003238:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800323c:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8003240:	ed8d da01 	vstr	s26, [sp, #4]
 8003244:	eeb0 da69 	vmov.f32	s26, s19
 8003248:	edcd ea02 	vstr	s29, [sp, #8]
 800324c:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8003250:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8003254:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8003258:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800325c:	edcd ca00 	vstr	s25, [sp]
 8003260:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8003264:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8003268:	e77b      	b.n	8003162 <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 800326a:	4a06      	ldr	r2, [pc, #24]	; (8003284 <ADC_Stream0_Handler+0x89c>)
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <ADC_Stream0_Handler+0x8a0>)
 800326e:	ed92 0a00 	vldr	s0, [r2]
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	ee30 0a27 	vadd.f32	s0, s0, s15
 800327a:	f000 f807 	bl	800328c <SDR_ComputeLO>
 800327e:	f7ff bbd0 	b.w	8002a22 <ADC_Stream0_Handler+0x3a>
 8003282:	bf00      	nop
 8003284:	24006178 	.word	0x24006178
 8003288:	24007b58 	.word	0x24007b58

0800328c <SDR_ComputeLO>:

#include <arm_const_structs.h>

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 800328c:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 800328e:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <SDR_ComputeLO+0x144>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	eef4 7a40 	vcmp.f32	s15, s0
{
 8003298:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d173      	bne.n	800338a <SDR_ComputeLO+0xfe>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <SDR_ComputeLO+0x148>)
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <SDR_ComputeLO+0x14c>)
 80032a6:	ed92 8a00 	vldr	s16, [r2]
 80032aa:	ed93 7a00 	vldr	s14, [r3]
 80032ae:	4d4b      	ldr	r5, [pc, #300]	; (80033dc <SDR_ComputeLO+0x150>)
 80032b0:	4c4b      	ldr	r4, [pc, #300]	; (80033e0 <SDR_ComputeLO+0x154>)
 80032b2:	484c      	ldr	r0, [pc, #304]	; (80033e4 <SDR_ComputeLO+0x158>)
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <SDR_ComputeLO+0x15c>)
 80032b6:	edd5 5a00 	vldr	s11, [r5]
 80032ba:	edd4 7a00 	vldr	s15, [r4]
 80032be:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 80032c2:	edd0 6a00 	vldr	s13, [r0]
 80032c6:	4a49      	ldr	r2, [pc, #292]	; (80033ec <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032c8:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 80032cc:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032ce:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 80032d2:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032d4:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 80032d8:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032da:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032de:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032e6:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032ea:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032ee:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032f2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032f6:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80032fa:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80032fe:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8003302:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8003306:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800330a:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800330e:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8003312:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8003316:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800331a:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800331e:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8003326:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800332a:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800332e:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8003332:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8003336:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800333a:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800333e:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8003342:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8003346:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800334a:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800334e:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8003352:	d1b9      	bne.n	80032c8 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8003354:	ee66 6a06 	vmul.f32	s13, s12, s12
 8003358:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80033f0 <SDR_ComputeLO+0x164>
 800335c:	edc4 7a00 	vstr	s15, [r4]
 8003360:	eddf 4a24 	vldr	s9, [pc, #144]	; 80033f4 <SDR_ComputeLO+0x168>
 8003364:	eee5 6a05 	vfma.f32	s13, s10, s10
 8003368:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <SDR_ComputeLO+0x16c>)
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <SDR_ComputeLO+0x170>)
 800336c:	edc5 5a00 	vstr	s11, [r5]
 8003370:	ed82 5a00 	vstr	s10, [r2]
 8003374:	ed83 6a00 	vstr	s12, [r3]
 8003378:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 800337c:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8003380:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003384:	edc0 7a00 	vstr	s15, [r0]
}	
 8003388:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 800338a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003400 <SDR_ComputeLO+0x174>
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <SDR_ComputeLO+0x178>)
 8003390:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 8003394:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8003398:	ed92 7a00 	vldr	s14, [r2]
 800339c:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80033a0:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80033a4:	eeb0 0b49 	vmov.f64	d0, d9
 80033a8:	f011 f95e 	bl	8014668 <cos>
 80033ac:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <SDR_ComputeLO+0x148>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 80033b2:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 80033b6:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 80033ba:	f011 f9a1 	bl	8014700 <sin>
 80033be:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <SDR_ComputeLO+0x14c>)
 80033c4:	eeb1 7a47 	vneg.f32	s14, s14
 80033c8:	ed83 7a00 	vstr	s14, [r3]
 80033cc:	e76f      	b.n	80032ae <SDR_ComputeLO+0x22>
 80033ce:	bf00      	nop
 80033d0:	24000204 	.word	0x24000204
 80033d4:	24000624 	.word	0x24000624
 80033d8:	2400062c 	.word	0x2400062c
 80033dc:	24000208 	.word	0x24000208
 80033e0:	24000644 	.word	0x24000644
 80033e4:	24000200 	.word	0x24000200
 80033e8:	24005988 	.word	0x24005988
 80033ec:	24005188 	.word	0x24005188
 80033f0:	46000200 	.word	0x46000200
 80033f4:	39000000 	.word	0x39000000
 80033f8:	24000648 	.word	0x24000648
 80033fc:	2400064c 	.word	0x2400064c
 8003400:	40c90fdb 	.word	0x40c90fdb
 8003404:	240061ac 	.word	0x240061ac

08003408 <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	d028      	beq.n	800345e <SDR_2R_toC_f32+0x56>
 800340c:	3010      	adds	r0, #16
 800340e:	3110      	adds	r1, #16
 8003410:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8003412:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 8003416:	3110      	adds	r1, #16
 8003418:	3010      	adds	r0, #16
 800341a:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800341c:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8003420:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8003424:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8003428:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800342c:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8003430:	f842 cc38 	str.w	ip, [r2, #-56]
 8003434:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8003438:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800343c:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8003440:	f842 cc30 	str.w	ip, [r2, #-48]
 8003444:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8003448:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800344c:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8003450:	f842 cc28 	str.w	ip, [r2, #-40]
 8003454:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8003458:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 800345c:	d1d9      	bne.n	8003412 <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 800345e:	4770      	bx	lr

08003460 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 8003462:	3110      	adds	r1, #16
 8003464:	3210      	adds	r2, #16
 8003466:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003468:	eddf 5a34 	vldr	s11, [pc, #208]	; 800353c <SDR_downconvert_f32+0xdc>
 800346c:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8003470:	b510      	push	{r4, lr}
 8003472:	4c33      	ldr	r4, [pc, #204]	; (8003540 <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003474:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 8003478:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800347a:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 800347e:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003480:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003484:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 8003488:	3310      	adds	r3, #16
 800348a:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 800348c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003490:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003494:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 8003498:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 800349a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 800349e:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 80034a2:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80034a6:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80034aa:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80034ae:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 80034b2:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80034b6:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80034ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80034be:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80034c2:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80034c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80034ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80034ce:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 80034d2:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80034d6:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80034da:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80034de:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80034e2:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80034e6:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 80034ea:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 80034ee:	ee26 6a26 	vmul.f32	s12, s12, s13
 80034f2:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 80034f6:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 80034fa:	ee66 6a26 	vmul.f32	s13, s12, s13
 80034fe:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8003502:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8003506:	ee66 6a87 	vmul.f32	s13, s13, s14
 800350a:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 800350e:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8003512:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003516:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 800351a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800351e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003522:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8003526:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 8003532:	d19f      	bne.n	8003474 <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 8003534:	bd10      	pop	{r4, pc}
 8003536:	bf00      	nop
 8003538:	24005188 	.word	0x24005188
 800353c:	3a000000 	.word	0x3a000000
 8003540:	24005988 	.word	0x24005988

08003544 <SDR_float_to_DAC_audio>:
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8003544:	0893      	lsrs	r3, r2, #2
	while(blkCnt--)
 8003546:	2b00      	cmp	r3, #0
 8003548:	d058      	beq.n	80035fc <SDR_float_to_DAC_audio+0xb8>
 800354a:	f103 3cff 	add.w	ip, r3, #4294967295
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <SDR_float_to_DAC_audio+0xe4>)
 8003550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003554:	fa1f fc8c 	uxth.w	ip, ip
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	f100 0310 	add.w	r3, r0, #16
 8003560:	3020      	adds	r0, #32
 8003562:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8003566:	f101 0008 	add.w	r0, r1, #8
{
 800356a:	b500      	push	{lr}
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800356c:	eeb0 5a47 	vmov.f32	s10, s14
 8003570:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003574:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 8003578:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800357a:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 800357e:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003580:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003584:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003588:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 800358c:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800358e:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003592:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8003596:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800359a:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 800359e:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035a2:	ee15 ea10 	vmov	lr, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035a6:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035aa:	f820 ec10 	strh.w	lr, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035ae:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035b2:	ee15 ea90 	vmov	lr, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035b6:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035ba:	f820 ec0e 	strh.w	lr, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035be:	ee16 ea10 	vmov	lr, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035c2:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035c6:	f820 ec0c 	strh.w	lr, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 80035ca:	ee16 ea90 	vmov	lr, s13
 80035ce:	f820 ec0a 	strh.w	lr, [r0, #-10]
	while(blkCnt--)
 80035d2:	d1cb      	bne.n	800356c <SDR_float_to_DAC_audio+0x28>
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 80035d4:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80035d6:	f001 021f 	and.w	r2, r1, #31
 80035da:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035dc:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80035e0:	4812      	ldr	r0, [pc, #72]	; (800362c <SDR_float_to_DAC_audio+0xe8>)
 80035e2:	440a      	add	r2, r1
 80035e4:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80035e8:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80035ea:	1a53      	subs	r3, r2, r1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dcf9      	bgt.n	80035e4 <SDR_float_to_DAC_audio+0xa0>
 80035f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035f4:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 80035f8:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 80035fc:	0093      	lsls	r3, r2, #2
 80035fe:	b902      	cbnz	r2, 8003602 <SDR_float_to_DAC_audio+0xbe>
 8003600:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003602:	f001 021f 	and.w	r2, r1, #31
 8003606:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8003608:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800360c:	4807      	ldr	r0, [pc, #28]	; (800362c <SDR_float_to_DAC_audio+0xe8>)
 800360e:	440a      	add	r2, r1
 8003610:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003614:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8003616:	1a53      	subs	r3, r2, r1
 8003618:	2b00      	cmp	r3, #0
 800361a:	dcf9      	bgt.n	8003610 <SDR_float_to_DAC_audio+0xcc>
 800361c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003620:	f3bf 8f6f 	isb	sy
	return;
 8003624:	e7ec      	b.n	8003600 <SDR_float_to_DAC_audio+0xbc>
 8003626:	bf00      	nop
 8003628:	240061a4 	.word	0x240061a4
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 8003630:	0892      	lsrs	r2, r2, #2
 8003632:	d016      	beq.n	8003662 <SDR_memcpy_f32+0x32>
 8003634:	3110      	adds	r1, #16
 8003636:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 8003638:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 800363c:	3110      	adds	r1, #16
 800363e:	3a01      	subs	r2, #1
 8003640:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 8003644:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 8003648:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800364c:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 8003650:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8003654:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 8003658:	f851 3c14 	ldr.w	r3, [r1, #-20]
 800365c:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 8003660:	d1ea      	bne.n	8003638 <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 8003662:	4770      	bx	lr

08003664 <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8003664:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8003666:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 800366a:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 800366c:	440b      	add	r3, r1
	while(blkCnt--)
 800366e:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8003672:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8003676:	d036      	beq.n	80036e6 <SDR_mirror_LSB+0x82>
 8003678:	f1a3 0220 	sub.w	r2, r3, #32
 800367c:	f1a3 0c1c 	sub.w	ip, r3, #28
 8003680:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8003684:	4402      	add	r2, r0
 8003686:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003688:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 800368c:	3a20      	subs	r2, #32
 800368e:	3820      	subs	r0, #32
 8003690:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003692:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8003696:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003698:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 800369c:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80036a0:	eef1 7a67 	vneg.f32	s15, s15
 80036a4:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80036a8:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 80036ac:	f843 cc38 	str.w	ip, [r3, #-56]
 80036b0:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 80036b4:	eef1 7a67 	vneg.f32	s15, s15
 80036b8:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80036bc:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 80036c0:	f843 cc30 	str.w	ip, [r3, #-48]
 80036c4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80036d0:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 80036d4:	f843 cc28 	str.w	ip, [r3, #-40]
 80036d8:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80036dc:	eef1 7a67 	vneg.f32	s15, s15
 80036e0:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 80036e4:	d1d0      	bne.n	8003688 <SDR_mirror_LSB+0x24>
	}
}
 80036e6:	4770      	bx	lr

080036e8 <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 80036e8:	492b      	ldr	r1, [pc, #172]	; (8003798 <SDR_compute_IIR_parms+0xb0>)
 80036ea:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800379c <SDR_compute_IIR_parms+0xb4>
 80036ee:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 80036f2:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <SDR_compute_IIR_parms+0xb8>)
	wr = 2.f * cwpitch / rate * myPI;
 80036f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036f8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80037a4 <SDR_compute_IIR_parms+0xbc>
 80036fc:	ed92 7a00 	vldr	s14, [r2]
{
 8003700:	b508      	push	{r3, lr}
 8003702:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 8003706:	eec7 8a87 	vdiv.f32	s17, s15, s14
	r = Qfactor;
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <SDR_compute_IIR_parms+0xc0>)
 800370c:	edd3 9a00 	vldr	s19, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003710:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 8003714:	ee69 aaa9 	vmul.f32	s21, s19, s19
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003718:	ee39 aaa9 	vadd.f32	s20, s19, s19
 800371c:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003720:	ee38 8a69 	vsub.f32	s16, s16, s19
	wr = 2.f * cwpitch / rate * myPI;
 8003724:	ee68 8a80 	vmul.f32	s17, s17, s0
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003728:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800372c:	f010 ff9c 	bl	8014668 <cos>
 8003730:	ee8a 5a09 	vdiv.f32	s10, s20, s18
	a1 = -2.f * r * cosw0;
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <SDR_compute_IIR_parms+0xc4>)
	a2 = r2;
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <SDR_compute_IIR_parms+0xc8>)
 8003738:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800373c:	eeb0 6b40 	vmov.f64	d6, d0
	a1 = -2.f * r * cosw0;
 8003740:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003744:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8003748:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	a1 = -2.f * r * cosw0;
 800374c:	ee69 7aa7 	vmul.f32	s15, s19, s15
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003750:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003754:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003758:	ee25 6b06 	vmul.f64	d6, d5, d6
 800375c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	a1 = -2.f * r * cosw0;
 8003760:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003764:	ed83 6a00 	vstr	s12, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003768:	f010 ff7e 	bl	8014668 <cos>
 800376c:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8003770:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80037b4 <SDR_compute_IIR_parms+0xcc>
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <SDR_compute_IIR_parms+0xd0>)
 8003776:	ee28 7a07 	vmul.f32	s14, s16, s14
 800377a:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800377e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8003782:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003786:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800378a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800378e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003792:	ed83 7a00 	vstr	s14, [r3]
}
 8003796:	bd08      	pop	{r3, pc}
 8003798:	24007b58 	.word	0x24007b58
 800379c:	44000000 	.word	0x44000000
 80037a0:	240061ac 	.word	0x240061ac
 80037a4:	40490fdb 	.word	0x40490fdb
 80037a8:	240061a0 	.word	0x240061a0
 80037ac:	24007328 	.word	0x24007328
 80037b0:	2400732c 	.word	0x2400732c
 80037b4:	3f99999a 	.word	0x3f99999a
 80037b8:	24007b4c 	.word	0x24007b4c

080037bc <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 80037bc:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 80037be:	2900      	cmp	r1, #0
 80037c0:	d077      	beq.n	80038b2 <SDR_CWPeak+0xf6>
 80037c2:	1e4b      	subs	r3, r1, #1
 80037c4:	f8df c104 	ldr.w	ip, [pc, #260]	; 80038cc <SDR_CWPeak+0x110>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80037c8:	493a      	ldr	r1, [pc, #232]	; (80038b4 <SDR_CWPeak+0xf8>)
 80037ca:	3010      	adds	r0, #16
 80037cc:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <SDR_CWPeak+0xfc>)
 80037ce:	eddc 2a00 	vldr	s5, [ip]
 80037d2:	ed91 6a00 	vldr	s12, [r1]
 80037d6:	ed92 5a00 	vldr	s10, [r2]
{
 80037da:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80037dc:	4c37      	ldr	r4, [pc, #220]	; (80038bc <SDR_CWPeak+0x100>)
 80037de:	4f38      	ldr	r7, [pc, #224]	; (80038c0 <SDR_CWPeak+0x104>)
 80037e0:	edd4 4a00 	vldr	s9, [r4]
 80037e4:	4e37      	ldr	r6, [pc, #220]	; (80038c4 <SDR_CWPeak+0x108>)
 80037e6:	4d38      	ldr	r5, [pc, #224]	; (80038c8 <SDR_CWPeak+0x10c>)
 80037e8:	eeb1 2a64 	vneg.f32	s4, s9
 80037ec:	ed97 7a00 	vldr	s14, [r7]
 80037f0:	edd6 5a00 	vldr	s11, [r6]
 80037f4:	edd5 6a00 	vldr	s13, [r5]
 80037f8:	ee66 3a47 	vnmul.f32	s7, s12, s14
 80037fc:	ed10 7a04 	vldr	s14, [r0, #-16]
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003800:	ee26 4a66 	vnmul.f32	s8, s12, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003804:	ed50 7a03 	vldr	s15, [r0, #-12]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003808:	ed50 6a02 	vldr	s13, [r0, #-8]
	while(blkCnt--)
 800380c:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800380e:	eee2 3a22 	vfma.f32	s7, s4, s5
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003812:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003816:	eea2 4a25 	vfma.f32	s8, s4, s11
	while(blkCnt--)
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003820:	eee7 3a05 	vfma.f32	s7, s14, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003824:	eea3 4a85 	vfma.f32	s8, s7, s10
		*buf++ = y0;
 8003828:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800382c:	ed92 5a00 	vldr	s10, [r2]
 8003830:	ed91 6a00 	vldr	s12, [r1]
 8003834:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003838:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800383c:	ee25 7a26 	vmul.f32	s14, s10, s13
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003840:	ee65 6a03 	vmul.f32	s13, s10, s6
 8003844:	eee6 7a62 	vfms.f32	s15, s12, s5
 8003848:	eea6 7a63 	vfms.f32	s14, s12, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800384c:	eeb1 2a64 	vneg.f32	s4, s9
 8003850:	eee4 7ae3 	vfms.f32	s15, s9, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003854:	eea4 7ae7 	vfms.f32	s14, s9, s15
 8003858:	eee6 6a67 	vfms.f32	s13, s12, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800385c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003860:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003864:	eee4 6ac7 	vfms.f32	s13, s9, s14
 8003868:	eef0 2a66 	vmov.f32	s5, s13
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800386c:	ee65 6a07 	vmul.f32	s13, s10, s14
 8003870:	eee6 6a44 	vfms.f32	s13, s12, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003874:	eeb0 4a67 	vmov.f32	s8, s15
 8003878:	eed6 7a25 	vfnms.f32	s15, s12, s11
 800387c:	eea6 4a65 	vfms.f32	s8, s12, s11
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003880:	ee65 5a22 	vmul.f32	s11, s10, s5
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003884:	eee4 6aa7 	vfma.f32	s13, s9, s15
 8003888:	eee6 5a44 	vfms.f32	s11, s12, s8
		*buf++ = y0;
 800388c:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 8003890:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003894:	eee4 5ae6 	vfms.f32	s11, s9, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 8003898:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 800389c:	d1ac      	bne.n	80037f8 <SDR_CWPeak+0x3c>
 800389e:	ed87 7a00 	vstr	s14, [r7]
 80038a2:	edc6 5a00 	vstr	s11, [r6]
 80038a6:	edc5 6a00 	vstr	s13, [r5]
 80038aa:	edcc 2a00 	vstr	s5, [ip]
	}
}
 80038ae:	bcf0      	pop	{r4, r5, r6, r7}
 80038b0:	4770      	bx	lr
 80038b2:	4770      	bx	lr
 80038b4:	2400732c 	.word	0x2400732c
 80038b8:	24007b4c 	.word	0x24007b4c
 80038bc:	24007328 	.word	0x24007328
 80038c0:	2400063c 	.word	0x2400063c
 80038c4:	24000638 	.word	0x24000638
 80038c8:	24000640 	.word	0x24000640
 80038cc:	24000634 	.word	0x24000634

080038d0 <SDR_demodAM_AGC>:

#ifdef RECEIVE_AM

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80038d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 80038d4:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <SDR_demodAM_AGC+0xf8>)
{
 80038d6:	b082      	sub	sp, #8
 80038d8:	4f3c      	ldr	r7, [pc, #240]	; (80039cc <SDR_demodAM_AGC+0xfc>)
 80038da:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80038de:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80039ec <SDR_demodAM_AGC+0x11c>
			hangcnt = Hcount[AM];
 80038e2:	f8b3 e000 	ldrh.w	lr, [r3]
 80038e6:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80038e8:	eddf 4a39 	vldr	s9, [pc, #228]	; 80039d0 <SDR_demodAM_AGC+0x100>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80038ec:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80039d4 <SDR_demodAM_AGC+0x104>
 80038f0:	ed98 7a00 	vldr	s14, [r8]
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <SDR_demodAM_AGC+0x108>)
 80038f6:	4d39      	ldr	r5, [pc, #228]	; (80039dc <SDR_demodAM_AGC+0x10c>)
 80038f8:	4c39      	ldr	r4, [pc, #228]	; (80039e0 <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 80038fa:	4e3a      	ldr	r6, [pc, #232]	; (80039e4 <SDR_demodAM_AGC+0x114>)
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80038fc:	edd0 7a01 	vldr	s15, [r0, #4]
 8003900:	edd0 6a00 	vldr	s13, [r0]
 8003904:	ee67 7aa7 	vmul.f32	s15, s15, s15
		audiotmp /= max(pk, AgcThreshold);
 8003908:	ed95 6a00 	vldr	s12, [r5]
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800390c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003910:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8003914:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8003918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8003920:	bfa8      	it	ge
 8003922:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 8003926:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 800392a:	bfb8      	it	lt
 800392c:	eef0 5a64 	vmovlt.f32	s11, s9
 8003930:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	d504      	bpl.n	8003944 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 800393a:	eef0 7a65 	vmov.f32	s15, s11
			hangcnt = Hcount[AM];
 800393e:	4672      	mov	r2, lr
			pk = audiotmp;
 8003940:	edc3 5a00 	vstr	s11, [r3]
		audiotmp /= max(pk, AgcThreshold);
 8003944:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 8003948:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800394c:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 8003950:	edc4 6a00 	vstr	s13, [r4]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003954:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 8003958:	b9da      	cbnz	r2, 8003992 <SDR_demodAM_AGC+0xc2>
			pk  *= Decay[AM];
 800395a:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 800395e:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003960:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 8003964:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003968:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 800396c:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800396e:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 8003972:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 8003976:	edc3 6a00 	vstr	s13, [r3]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800397a:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800397e:	d1bd      	bne.n	80038fc <SDR_demodAM_AGC+0x2c>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 8003980:	4919      	ldr	r1, [pc, #100]	; (80039e8 <SDR_demodAM_AGC+0x118>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	603a      	str	r2, [r7, #0]
 8003986:	ed88 7a00 	vstr	s14, [r8]
 800398a:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 800398c:	b002      	add	sp, #8
 800398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003992:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003996:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003998:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 800399c:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800399e:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80039a2:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80039a6:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80039aa:	d1a7      	bne.n	80038fc <SDR_demodAM_AGC+0x2c>
	PeakAudioValue=pk;
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 80039ae:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	603a      	str	r2, [r7, #0]
 80039b4:	ed88 7a00 	vstr	s14, [r8]
 80039b8:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 80039ba:	dd01      	ble.n	80039c0 <SDR_demodAM_AGC+0xf0>
 80039bc:	3a01      	subs	r2, #1
 80039be:	603a      	str	r2, [r7, #0]
}
 80039c0:	b002      	add	sp, #8
 80039c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c6:	bf00      	nop
 80039c8:	2400516c 	.word	0x2400516c
 80039cc:	2400a428 	.word	0x2400a428
 80039d0:	00000000 	.word	0x00000000
 80039d4:	3f75c28f 	.word	0x3f75c28f
 80039d8:	2400afc8 	.word	0x2400afc8
 80039dc:	24000704 	.word	0x24000704
 80039e0:	24007b48 	.word	0x24007b48
 80039e4:	24000f40 	.word	0x24000f40
 80039e8:	2400619c 	.word	0x2400619c
 80039ec:	24000630 	.word	0x24000630

080039f0 <SDR_demodSSB_CW_AGC>:
#endif

//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80039f4:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <SDR_demodSSB_CW_AGC+0xf0>)
 80039f6:	f241 0e04 	movw	lr, #4100	; 0x1004
 80039fa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8003af8 <SDR_demodSSB_CW_AGC+0x108>
		if(pk < sav)
 80039fe:	4a39      	ldr	r2, [pc, #228]	; (8003ae4 <SDR_demodSSB_CW_AGC+0xf4>)
 8003a00:	4486      	add	lr, r0
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003a02:	889f      	ldrh	r7, [r3, #4]
 8003a04:	885e      	ldrh	r6, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003a06:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003a0a:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 8003a0c:	edd2 7a00 	vldr	s15, [r2]
 8003a10:	f8d8 0000 	ldr.w	r0, [r8]
 8003a14:	4d34      	ldr	r5, [pc, #208]	; (8003ae8 <SDR_demodSSB_CW_AGC+0xf8>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003a16:	4c35      	ldr	r4, [pc, #212]	; (8003aec <SDR_demodSSB_CW_AGC+0xfc>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003a18:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003afc <SDR_demodSSB_CW_AGC+0x10c>
 8003a1c:	e014      	b.n	8003a48 <SDR_demodSSB_CW_AGC+0x58>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003a1e:	f894 c000 	ldrb.w	ip, [r4]
 8003a22:	f1bc 0f03 	cmp.w	ip, #3
 8003a26:	d052      	beq.n	8003ace <SDR_demodSSB_CW_AGC+0xde>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003a28:	f1bc 0f01 	cmp.w	ip, #1
 8003a2c:	ed92 7a00 	vldr	s14, [r2]
 8003a30:	bf0c      	ite	eq
 8003a32:	edda 7a01 	vldreq	s15, [sl, #4]
 8003a36:	edda 7a02 	vldrne	s15, [sl, #8]
 8003a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3e:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003a42:	3308      	adds	r3, #8
 8003a44:	459e      	cmp	lr, r3
 8003a46:	d02d      	beq.n	8003aa4 <SDR_demodSSB_CW_AGC+0xb4>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003a48:	ed93 7a00 	vldr	s14, [r3]
 8003a4c:	ed53 6a01 	vldr	s13, [r3, #-4]
 8003a50:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003a54:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 8003a58:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 8003a5c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a64:	dd0f      	ble.n	8003a86 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003a66:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 8003a6a:	ed82 6a00 	vstr	s12, [r2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003a6e:	f1bc 0f03 	cmp.w	ip, #3
 8003a72:	d026      	beq.n	8003ac2 <SDR_demodSSB_CW_AGC+0xd2>
 8003a74:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003a78:	f1bc 0f01 	cmp.w	ip, #1
 8003a7c:	bf0c      	ite	eq
 8003a7e:	4630      	moveq	r0, r6
 8003a80:	4638      	movne	r0, r7
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8003a82:	ed53 6a01 	vldr	s13, [r3, #-4]
 8003a86:	ed95 7a00 	vldr	s14, [r5]
 8003a8a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d0c1      	beq.n	8003a1e <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 8003a9a:	3308      	adds	r3, #8
		}
	}
	PeakAudioValue=pk;
 8003a9c:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003aa0:	459e      	cmp	lr, r3
 8003aa2:	d1d1      	bne.n	8003a48 <SDR_demodSSB_CW_AGC+0x58>
 8003aa4:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 8003aa6:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <SDR_demodSSB_CW_AGC+0x104>)
 8003aaa:	f8c8 0000 	str.w	r0, [r8]
 8003aae:	ed82 6a00 	vstr	s12, [r2]
 8003ab2:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 8003ab6:	dd02      	ble.n	8003abe <SDR_demodSSB_CW_AGC+0xce>
 8003ab8:	3801      	subs	r0, #1
 8003aba:	f8c8 0000 	str.w	r0, [r8]
}
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	eef0 7a46 	vmov.f32	s15, s12
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8003ac6:	ed53 6a01 	vldr	s13, [r3, #-4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003aca:	4648      	mov	r0, r9
 8003acc:	e7db      	b.n	8003a86 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003ace:	ed92 7a00 	vldr	s14, [r2]
 8003ad2:	edda 7a03 	vldr	s15, [sl, #12]
 8003ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ada:	edc2 7a00 	vstr	s15, [r2]
 8003ade:	e7b0      	b.n	8003a42 <SDR_demodSSB_CW_AGC+0x52>
 8003ae0:	2400516c 	.word	0x2400516c
 8003ae4:	2400afc8 	.word	0x2400afc8
 8003ae8:	24000704 	.word	0x24000704
 8003aec:	24000f38 	.word	0x24000f38
 8003af0:	24000628 	.word	0x24000628
 8003af4:	2400619c 	.word	0x2400619c
 8003af8:	2400a428 	.word	0x2400a428
 8003afc:	24000f40 	.word	0x24000f40

08003b00 <make_kaiser>:
	return sum;
}

// Compute an entire Kaiser window
// More efficient than repeatedly calling kaiser(n,M,beta)
int make_kaiser(float * const window,unsigned int const M,float const beta){
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	ed2d 8b02 	vpush	{d8}
	assert(window != NULL);
 8003b06:	2800      	cmp	r0, #0
 8003b08:	f000 80a1 	beq.w	8003c4e <make_kaiser+0x14e>
	if(window == NULL)
		return -1;
	// Precompute unchanging partial values
	float const numc = M_PI * beta;
 8003b0c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	for(int k=2;k<40;k++){
 8003b10:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003b12:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
	float sum = 1 + t;
 8003b16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	float const numc = M_PI * beta;
 8003b1a:	ed9f 4b51 	vldr	d4, [pc, #324]	; 8003c60 <make_kaiser+0x160>
		if(term < 1e-12 * sum)
 8003b1e:	ed9f 3b52 	vldr	d3, [pc, #328]	; 8003c68 <make_kaiser+0x168>
	float const numc = M_PI * beta;
 8003b22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003b26:	eef7 1bc7 	vcvt.f32.f64	s3, d7
	const float t = 0.25 * x * x;
 8003b2a:	eeb7 7ae1 	vcvt.f64.f32	d7, s3
 8003b2e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b36:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 8003b3a:	ee75 5a25 	vadd.f32	s11, s10, s11
	float term = t;
 8003b3e:	eef0 7a45 	vmov.f32	s15, s10
 8003b42:	e002      	b.n	8003b4a <make_kaiser+0x4a>
	for(int k=2;k<40;k++){
 8003b44:	3301      	adds	r3, #1
 8003b46:	2b28      	cmp	r3, #40	; 0x28
 8003b48:	d016      	beq.n	8003b78 <make_kaiser+0x78>
		term *= t/(k*k);
 8003b4a:	fb03 f203 	mul.w	r2, r3, r3
 8003b4e:	ee07 2a10 	vmov	s14, r2
 8003b52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b56:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8003b5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 8003b5e:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 8003b62:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8003b66:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 8003b6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003b6e:	eeb4 4bc6 	vcmpe.f64	d4, d6
 8003b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b76:	d5e5      	bpl.n	8003b44 <make_kaiser+0x44>
	float const inv_denom = 1. / i0(numc); // Inverse of denominator
	float const pc = 2.0 / (M-1);
 8003b78:	1e4d      	subs	r5, r1, #1
 8003b7a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8003b7e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0

	// The window is symmetrical, so compute only half of it and mirror
	// this won't compute the middle value in an odd-length sequence
	for(int n = 0; n < M/2; n++){
 8003b82:	084c      	lsrs	r4, r1, #1
	float const pc = 2.0 / (M-1);
 8003b84:	ee07 5a90 	vmov	s15, r5
 8003b88:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003b8c:	ee81 0a25 	vdiv.f32	s0, s2, s11
 8003b90:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8003b94:	eef7 0bc7 	vcvt.f32.f64	s1, d7
	for(int n = 0; n < M/2; n++){
 8003b98:	d04d      	beq.n	8003c36 <make_kaiser+0x136>
	const float t = 0.25 * x * x;
 8003b9a:	eeb5 3b00 	vmov.f64	d3, #80	; 0x3e800000  0.250
 8003b9e:	4686      	mov	lr, r0
		float const p = pc * n  - 1;
 8003ba0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
	for(int n = 0; n < M/2; n++){
 8003ba4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003c70 <make_kaiser+0x170>
 8003ba8:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 8003bac:	2200      	movs	r2, #0
		if(term < 1e-12 * sum)
 8003bae:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 8003c68 <make_kaiser+0x168>
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003bb2:	ee21 7a87 	vmul.f32	s14, s3, s14
	for(int k=2;k<40;k++){
 8003bb6:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003bb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003bbc:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003bc0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003bc4:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 8003bc8:	ee75 5a01 	vadd.f32	s11, s10, s2
	float term = t;
 8003bcc:	eef0 7a45 	vmov.f32	s15, s10
 8003bd0:	e002      	b.n	8003bd8 <make_kaiser+0xd8>
	for(int k=2;k<40;k++){
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	2b28      	cmp	r3, #40	; 0x28
 8003bd6:	d016      	beq.n	8003c06 <make_kaiser+0x106>
		term *= t/(k*k);
 8003bd8:	fb03 f603 	mul.w	r6, r3, r3
 8003bdc:	ee07 6a10 	vmov	s14, r6
 8003be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003be4:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8003be8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 8003bec:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 8003bf0:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8003bf4:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 8003bf8:	ee26 6b04 	vmul.f64	d6, d6, d4
 8003bfc:	eeb4 2bc6 	vcmpe.f64	d2, d6
 8003c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c04:	d5e5      	bpl.n	8003bd2 <make_kaiser+0xd2>
	for(int n = 0; n < M/2; n++){
 8003c06:	3201      	adds	r2, #1
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003c08:	ee65 5a80 	vmul.f32	s11, s11, s0
	for(int n = 0; n < M/2; n++){
 8003c0c:	42a2      	cmp	r2, r4
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003c0e:	ecee 5a01 	vstmia	lr!, {s11}
 8003c12:	ed6c 5a01 	vstmdb	ip!, {s11}
	for(int n = 0; n < M/2; n++){
 8003c16:	d00e      	beq.n	8003c36 <make_kaiser+0x136>
		float const p = pc * n  - 1;
 8003c18:	ee07 2a90 	vmov	s15, r2
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003c1c:	eef0 6a41 	vmov.f32	s13, s2
		float const p = pc * n  - 1;
 8003c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c24:	eef0 7a48 	vmov.f32	s15, s16
 8003c28:	eee0 7a87 	vfma.f32	s15, s1, s14
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003c2c:	eee7 6ae7 	vfms.f32	s13, s15, s15
 8003c30:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8003c34:	e7bd      	b.n	8003bb2 <make_kaiser+0xb2>
	}
	// If sequence length is odd, middle value is unity
	if(M & 1)
 8003c36:	07cb      	lsls	r3, r1, #31
 8003c38:	d505      	bpl.n	8003c46 <make_kaiser+0x146>
		window[(M-1)/2] = 1; // The -1 is actually unnecessary
 8003c3a:	086d      	lsrs	r5, r5, #1
 8003c3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c40:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003c44:	6003      	str	r3, [r0, #0]

	return 0;
}
 8003c46:	2000      	movs	r0, #0
 8003c48:	ecbd 8b02 	vpop	{d8}
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
	assert(window != NULL);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <make_kaiser+0x174>)
 8003c50:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <make_kaiser+0x178>)
 8003c56:	4809      	ldr	r0, [pc, #36]	; (8003c7c <make_kaiser+0x17c>)
 8003c58:	f00d fbe2 	bl	8011420 <__assert_func>
 8003c5c:	f3af 8000 	nop.w
 8003c60:	54442d18 	.word	0x54442d18
 8003c64:	400921fb 	.word	0x400921fb
 8003c68:	812dea11 	.word	0x812dea11
 8003c6c:	3d719799 	.word	0x3d719799
 8003c70:	00000000 	.word	0x00000000
 8003c74:	08018730 	.word	0x08018730
 8003c78:	08018758 	.word	0x08018758
 8003c7c:	08018740 	.word	0x08018740

08003c80 <SetMask>:
		float f;
		if(n <= N/2)
			f = (float)n / N;
		else
			f = (float)(n-N) / N;
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <SetMask+0xfc>)
	for(int n=0;n<N;n++){
 8003c82:	2200      	movs	r2, #0
 8003c84:	493e      	ldr	r1, [pc, #248]	; (8003d80 <SetMask+0x100>)
			FFTmask[n * 2] = 1024;
		else
			FFTmask[n * 2] = 0;
 8003c86:	2000      	movs	r0, #0
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
			f = (float)(n-N) / N;
 8003c8c:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8003d84 <SetMask+0x104>
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003c90:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8003c94:	eec0 5aa7 	vdiv.f32	s11, s1, s15
{
 8003c98:	b5b0      	push	{r4, r5, r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	float kaiser_window[M];
 8003c9c:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
			FFTmask[n * 2] = 1024;
 8003ca0:	f04f 4489 	mov.w	r4, #1149239296	; 0x44800000
	float kaiser_window[M];
 8003ca4:	466d      	mov	r5, sp
	for(int n=0;n<N;n++){
 8003ca6:	e00c      	b.n	8003cc2 <SetMask+0x42>
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003ca8:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb0:	db1d      	blt.n	8003cee <SetMask+0x6e>
	for(int n=0;n<N;n++){
 8003cb2:	3201      	adds	r2, #1
			FFTmask[n * 2] = 1024;
 8003cb4:	f841 4c04 	str.w	r4, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003cb8:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 8003cbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003cc0:	d01d      	beq.n	8003cfe <SetMask+0x7e>
			f = (float)n / N;
 8003cc2:	ee07 2a90 	vmov	s15, r2
			f = (float)(n-N) / N;
 8003cc6:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
		if(n <= N/2)
 8003cca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			f = (float)n / N;
 8003cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			f = (float)(n-N) / N;
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f = (float)n / N;
 8003cda:	bfd4      	ite	le
 8003cdc:	ee67 7a06 	vmulle.f32	s15, s14, s12
			f = (float)(n-N) / N;
 8003ce0:	ee67 7a86 	vmulgt.f32	s15, s15, s12
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003ce4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d9dc      	bls.n	8003ca8 <SetMask+0x28>
	for(int n=0;n<N;n++){
 8003cee:	3201      	adds	r2, #1
			FFTmask[n * 2] = 0;
 8003cf0:	f841 0c04 	str.w	r0, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003cf4:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 8003cf8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003cfc:	d1e1      	bne.n	8003cc2 <SetMask+0x42>
	}


	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, INVERSEFFT, NOREVERSE);
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4c21      	ldr	r4, [pc, #132]	; (8003d88 <SetMask+0x108>)
 8003d02:	4822      	ldr	r0, [pc, #136]	; (8003d8c <SetMask+0x10c>)
 8003d04:	461a      	mov	r2, r3
 8003d06:	4621      	mov	r1, r4
 8003d08:	f7fd f9f8 	bl	80010fc <arm_cfft_f32>
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 8003d0c:	f240 2101 	movw	r1, #513	; 0x201
 8003d10:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003d14:	4628      	mov	r0, r5
 8003d16:	f7ff fef3 	bl	8003b00 <make_kaiser>


	// Round trip through FFT/IFFT scales by N
	float const gain = 1./N;
	// Shift to beginning of buffer to make causal; apply window and gain
	for(int n = M - 1; n >= 0; n--){
 8003d1a:	f605 0004 	addw	r0, r5, #2052	; 0x804
 8003d1e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 8003d22:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003d26:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003d84 <SetMask+0x104>
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 8003d2a:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8003d2e:	ed70 7a01 	vldmdb	r0!, {s15}
 8003d32:	4615      	mov	r5, r2
	for(int n = M - 1; n >= 0; n--){
 8003d34:	3a08      	subs	r2, #8
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 8003d36:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 8003d3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for(int n = M - 1; n >= 0; n--){
 8003d3e:	42a5      	cmp	r5, r4
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 8003d40:	f101 31ff 	add.w	r1, r1, #4294967295
 8003d44:	ed9c 7a00 	vldr	s14, [ip]
 8003d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d4c:	ed82 7a02 	vstr	s14, [r2, #8]
	//	FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1];
		FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1] * kaiser_window[n] * gain;
 8003d50:	ed9c 7a01 	vldr	s14, [ip, #4]
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	edc2 7a03 	vstr	s15, [r2, #12]
	for(int n = M - 1; n >= 0; n--){
 8003d5c:	d1e5      	bne.n	8003d2a <SetMask+0xaa>
	}
	// Pad with zeroes on right side
	memset(FFTmask + M * 2,0,(N-M)* 2 * sizeof(*FFTmask));
 8003d5e:	f640 72f8 	movw	r2, #4088	; 0xff8
 8003d62:	2100      	movs	r1, #0
 8003d64:	480a      	ldr	r0, [pc, #40]	; (8003d90 <SetMask+0x110>)
 8003d66:	f00d fbc7 	bl	80114f8 <memset>


	// Now back to frequency domain
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, DIRECTFFT, NOREVERSE);
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4906      	ldr	r1, [pc, #24]	; (8003d88 <SetMask+0x108>)
 8003d70:	4806      	ldr	r0, [pc, #24]	; (8003d8c <SetMask+0x10c>)
 8003d72:	f7fd f9c3 	bl	80010fc <arm_cfft_f32>

			blkCnt--;
		}
	}
#endif
}
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000f20 	.word	0x24000f20
 8003d80:	20006804 	.word	0x20006804
 8003d84:	3a800000 	.word	0x3a800000
 8003d88:	20006800 	.word	0x20006800
 8003d8c:	08018648 	.word	0x08018648
 8003d90:	20007808 	.word	0x20007808

08003d94 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8003d94:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 8003d96:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8003da4:	f7fc fafc 	bl	80003a0 <strlen>
	if( call_len > 6 ) {
 8003da8:	2806      	cmp	r0, #6
 8003daa:	f200 808f 	bhi.w	8003ecc <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 8003dae:	78a2      	ldrb	r2, [r4, #2]
 8003db0:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <pack_call+0x18c>)
 8003db2:	5cd2      	ldrb	r2, [r2, r3]
 8003db4:	0752      	lsls	r2, r2, #29
 8003db6:	d57c      	bpl.n	8003eb2 <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 8003db8:	b120      	cbz	r0, 8003dc4 <pack_call+0x30>
			call6[i]=callsign[i];
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4668      	mov	r0, sp
 8003dc0:	f00d fb8c 	bl	80114dc <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8003dc4:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 8003dc8:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003dcc:	fa5f fe8c 	uxtb.w	lr, ip
 8003dd0:	f1be 0f09 	cmp.w	lr, #9
 8003dd4:	d908      	bls.n	8003de8 <pack_call+0x54>
	if( ch == 32 ) {  //space
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	f000 809a 	beq.w	8003f10 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003ddc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003de0:	2a19      	cmp	r2, #25
 8003de2:	d976      	bls.n	8003ed2 <pack_call+0x13e>
	return -1;
 8003de4:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003de8:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8003dec:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003df0:	fa5f f48c 	uxtb.w	r4, ip
 8003df4:	2c09      	cmp	r4, #9
 8003df6:	d907      	bls.n	8003e08 <pack_call+0x74>
	if( ch == 32 ) {  //space
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	f000 8087 	beq.w	8003f0c <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003dfe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e02:	2a19      	cmp	r2, #25
 8003e04:	d979      	bls.n	8003efa <pack_call+0x166>
	return -1;
 8003e06:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003e08:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8003e0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	2a09      	cmp	r2, #9
 8003e14:	d906      	bls.n	8003e24 <pack_call+0x90>
	if( ch == 32 ) {  //space
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d076      	beq.n	8003f08 <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003e1a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e1e:	2a19      	cmp	r2, #25
 8003e20:	d968      	bls.n	8003ef4 <pack_call+0x160>
	return -1;
 8003e22:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003e24:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003e28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	d906      	bls.n	8003e40 <pack_call+0xac>
	if( ch == 32 ) {  //space
 8003e32:	2920      	cmp	r1, #32
 8003e34:	d066      	beq.n	8003f04 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003e36:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8003e3a:	2b19      	cmp	r3, #25
 8003e3c:	d956      	bls.n	8003eec <pack_call+0x158>
	return -1;
 8003e3e:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003e40:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8003e44:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	2909      	cmp	r1, #9
 8003e4c:	d906      	bls.n	8003e5c <pack_call+0xc8>
	if( ch == 32 ) {  //space
 8003e4e:	2820      	cmp	r0, #32
 8003e50:	d061      	beq.n	8003f16 <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003e52:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8003e56:	2919      	cmp	r1, #25
 8003e58:	d940      	bls.n	8003edc <pack_call+0x148>
	return -1;
 8003e5a:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003e5c:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 8003e60:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8003e64:	b2c0      	uxtb	r0, r0
 8003e66:	2809      	cmp	r0, #9
 8003e68:	d907      	bls.n	8003e7a <pack_call+0xe6>
	if( ch == 32 ) {  //space
 8003e6a:	f1bc 0f20 	cmp.w	ip, #32
 8003e6e:	d054      	beq.n	8003f1a <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003e70:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 8003e74:	2819      	cmp	r0, #25
 8003e76:	d935      	bls.n	8003ee4 <pack_call+0x150>
	return -1;
 8003e78:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 8003e7a:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 8003e7e:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 8003e80:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 8003e82:	380a      	subs	r0, #10
	n = n*36+call6[1];
 8003e84:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 8003e88:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003e8c:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 8003e90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e94:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8003e98:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 8003e9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e9e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003ea2:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 8003ea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003ea8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003eac:	4418      	add	r0, r3
	return n;
}
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8003eb2:	7862      	ldrb	r2, [r4, #1]
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	075b      	lsls	r3, r3, #29
 8003eb8:	d584      	bpl.n	8003dc4 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d082      	beq.n	8003dc4 <pack_call+0x30>
			call6[i]=callsign[i-1];
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	f10d 0001 	add.w	r0, sp, #1
 8003ec6:	f00d fb09 	bl	80114dc <memcpy>
 8003eca:	e77b      	b.n	8003dc4 <pack_call+0x30>
		return 0;
 8003ecc:	2000      	movs	r0, #0
}
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd10      	pop	{r4, pc}
		return ch-55;
 8003ed2:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8003ed6:	fa5f fe8c 	uxtb.w	lr, ip
 8003eda:	e785      	b.n	8003de8 <pack_call+0x54>
 8003edc:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8003ee0:	b2c9      	uxtb	r1, r1
 8003ee2:	e7bb      	b.n	8003e5c <pack_call+0xc8>
 8003ee4:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 8003ee8:	b2c0      	uxtb	r0, r0
 8003eea:	e7c6      	b.n	8003e7a <pack_call+0xe6>
 8003eec:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e7a5      	b.n	8003e40 <pack_call+0xac>
 8003ef4:	3b37      	subs	r3, #55	; 0x37
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	e794      	b.n	8003e24 <pack_call+0x90>
 8003efa:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8003efe:	fa5f f48c 	uxtb.w	r4, ip
 8003f02:	e781      	b.n	8003e08 <pack_call+0x74>
		return 36;
 8003f04:	2324      	movs	r3, #36	; 0x24
 8003f06:	e79b      	b.n	8003e40 <pack_call+0xac>
 8003f08:	2224      	movs	r2, #36	; 0x24
 8003f0a:	e78b      	b.n	8003e24 <pack_call+0x90>
 8003f0c:	2424      	movs	r4, #36	; 0x24
 8003f0e:	e77b      	b.n	8003e08 <pack_call+0x74>
 8003f10:	f04f 0e24 	mov.w	lr, #36	; 0x24
 8003f14:	e768      	b.n	8003de8 <pack_call+0x54>
 8003f16:	2124      	movs	r1, #36	; 0x24
 8003f18:	e7a0      	b.n	8003e5c <pack_call+0xc8>
 8003f1a:	2024      	movs	r0, #36	; 0x24
 8003f1c:	e7ad      	b.n	8003e7a <pack_call+0xe6>
 8003f1e:	bf00      	nop
 8003f20:	08018d09 	.word	0x08018d09

08003f24 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 8003f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003f28:	4abb      	ldr	r2, [pc, #748]	; (8004218 <get_wspr_channel_symbols+0x2f4>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 8003f2a:	2300      	movs	r3, #0
{
 8003f2c:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003f2e:	4614      	mov	r4, r2
{
 8003f30:	ed2d 8b02 	vpush	{d8}
 8003f34:	b0ed      	sub	sp, #436	; 0x1b4
 8003f36:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 8003f38:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003f3e:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 8003f42:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 8003f44:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 8003f48:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8003f4c:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f5c:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 8003f60:	f1bc 0f00 	cmp.w	ip, #0
 8003f64:	d00d      	beq.n	8003f82 <get_wspr_channel_symbols+0x5e>
 8003f66:	f107 021c 	add.w	r2, r7, #28
 8003f6a:	1c6b      	adds	r3, r5, #1
 8003f6c:	43e8      	mvns	r0, r5
 8003f6e:	4664      	mov	r4, ip
 8003f70:	e000      	b.n	8003f74 <get_wspr_channel_symbols+0x50>
 8003f72:	b134      	cbz	r4, 8003f82 <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 8003f74:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 8003f78:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003f7c:	18c1      	adds	r1, r0, r3
 8003f7e:	2917      	cmp	r1, #23
 8003f80:	d1f7      	bne.n	8003f72 <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 8003f82:	49a6      	ldr	r1, [pc, #664]	; (800421c <get_wspr_channel_symbols+0x2f8>)
 8003f84:	f107 001c 	add.w	r0, r7, #28
 8003f88:	f00e f8f0 	bl	801216c <strcspn>
	size_t i2=strcspn(message,"/");
 8003f8c:	49a4      	ldr	r1, [pc, #656]	; (8004220 <get_wspr_channel_symbols+0x2fc>)
	size_t i1=strcspn(message," ");
 8003f8e:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8003f90:	f107 001c 	add.w	r0, r7, #28
 8003f94:	f00e f8ea 	bl	801216c <strcspn>
	size_t i3=strcspn(message,"<");
 8003f98:	49a2      	ldr	r1, [pc, #648]	; (8004224 <get_wspr_channel_symbols+0x300>)
	size_t i2=strcspn(message,"/");
 8003f9a:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 8003f9c:	f107 001c 	add.w	r0, r7, #28
 8003fa0:	f00e f8e4 	bl	801216c <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003fa4:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 8003fa6:	49a0      	ldr	r1, [pc, #640]	; (8004228 <get_wspr_channel_symbols+0x304>)
	size_t i3=strcspn(message,"<");
 8003fa8:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 8003faa:	f107 001c 	add.w	r0, r7, #28
 8003fae:	f00e f8dd 	bl	801216c <strcspn>
 8003fb2:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 8003fb4:	f107 001c 	add.w	r0, r7, #28
 8003fb8:	f7fc f9f2 	bl	80003a0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003fbc:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 8003fbe:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003fc0:	d804      	bhi.n	8003fcc <get_wspr_channel_symbols+0xa8>
 8003fc2:	4286      	cmp	r6, r0
 8003fc4:	d102      	bne.n	8003fcc <get_wspr_channel_symbols+0xa8>
 8003fc6:	4285      	cmp	r5, r0
 8003fc8:	f000 8136 	beq.w	8004238 <get_wspr_channel_symbols+0x314>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8003fcc:	b90d      	cbnz	r5, 8003fd2 <get_wspr_channel_symbols+0xae>
 8003fce:	4598      	cmp	r8, r3
 8003fd0:	d37e      	bcc.n	80040d0 <get_wspr_channel_symbols+0x1ac>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8003fd2:	429e      	cmp	r6, r3
 8003fd4:	d307      	bcc.n	8003fe6 <get_wspr_channel_symbols+0xc2>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 8003fd6:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 8003fd8:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	ecbd 8b02 	vpop	{d8}
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 8003fe6:	498d      	ldr	r1, [pc, #564]	; (800421c <get_wspr_channel_symbols+0x2f8>)
 8003fe8:	f107 001c 	add.w	r0, r7, #28
 8003fec:	f00e f8d0 	bl	8012190 <strtok>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 8003ff4:	2e00      	cmp	r6, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <get_wspr_channel_symbols+0xb2>
 8003ff8:	f7fc f9d2 	bl	80003a0 <strlen>
 8003ffc:	42b0      	cmp	r0, r6
 8003ffe:	d3ea      	bcc.n	8003fd6 <get_wspr_channel_symbols+0xb2>
		powstr = strtok (NULL," ");
 8004000:	4986      	ldr	r1, [pc, #536]	; (800421c <get_wspr_channel_symbols+0x2f8>)
 8004002:	2000      	movs	r0, #0
 8004004:	f00e f8c4 	bl	8012190 <strtok>
		int power = atoi (powstr);
 8004008:	f00d fa28 	bl	801145c <atoi>
		if( power < 0 ) power=0;
 800400c:	283c      	cmp	r0, #60	; 0x3c
 800400e:	4605      	mov	r5, r0
		power=power+nu[power%10];
 8004010:	4b86      	ldr	r3, [pc, #536]	; (800422c <get_wspr_channel_symbols+0x308>)
 8004012:	bfa8      	it	ge
 8004014:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 8004016:	4982      	ldr	r1, [pc, #520]	; (8004220 <get_wspr_channel_symbols+0x2fc>)
 8004018:	4620      	mov	r0, r4
 800401a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 800401e:	fba3 2305 	umull	r2, r3, r3, r5
 8004022:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800402c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8004030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004034:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 8004036:	f00e f899 	bl	801216c <strcspn>
	if( callsign[i1+2] == 0 ) {
 800403a:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 800403e:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 8004040:	f814 3008 	ldrb.w	r3, [r4, r8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 843f 	beq.w	80048c8 <get_wspr_channel_symbols+0x9a4>
	} else if( callsign[i1+3]==0 ) {
 800404a:	eb04 0900 	add.w	r9, r4, r0
 800404e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f040 8522 	bne.w	8004a9c <get_wspr_channel_symbols+0xb78>
		for (i=0; i<i1; i++) {
 8004058:	b300      	cbz	r0, 800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 800405a:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 800405c:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 800405e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004062:	d01b      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8004064:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8004066:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8004068:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 800406c:	d016      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 800406e:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8004070:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8004072:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8004076:	d011      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8004078:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 800407a:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 800407c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8004080:	d00c      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8004082:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8004084:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8004086:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 800408a:	d007      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 800408c:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 800408e:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8004090:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8004094:	d002      	beq.n	800409c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8004096:	79a3      	ldrb	r3, [r4, #6]
 8004098:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 800409c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040a0:	4618      	mov	r0, r3
 80040a2:	ee08 3a10 	vmov	s16, r3
 80040a6:	f7ff fe75 	bl	8003d94 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80040aa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80040ae:	f81a 2008 	ldrb.w	r2, [sl, r8]
		*n=pack_call(call6);
 80040b2:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80040b4:	3b30      	subs	r3, #48	; 0x30
 80040b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040ba:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 80040be:	f64e 234a 	movw	r3, #59978	; 0xea4a
 80040c2:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80040c4:	01db      	lsls	r3, r3, #7
		*nadd=1;
 80040c6:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 80040c8:	3541      	adds	r5, #65	; 0x41
 80040ca:	4428      	add	r0, r5
 80040cc:	18c5      	adds	r5, r0, r3
		n=n1;
 80040ce:	e11a      	b.n	8004306 <get_wspr_channel_symbols+0x3e2>
		callsign=strtok(message,"<> ");
 80040d0:	4957      	ldr	r1, [pc, #348]	; (8004230 <get_wspr_channel_symbols+0x30c>)
 80040d2:	f107 001c 	add.w	r0, r7, #28
 80040d6:	f00e f85b 	bl	8012190 <strtok>
		grid=strtok(NULL," ");
 80040da:	4950      	ldr	r1, [pc, #320]	; (800421c <get_wspr_channel_symbols+0x2f8>)
		callsign=strtok(message,"<> ");
 80040dc:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 80040de:	2000      	movs	r0, #0
 80040e0:	f00e f856 	bl	8012190 <strtok>
		powstr=strtok(NULL," ");
 80040e4:	494d      	ldr	r1, [pc, #308]	; (800421c <get_wspr_channel_symbols+0x2f8>)
		grid=strtok(NULL," ");
 80040e6:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 80040e8:	2000      	movs	r0, #0
 80040ea:	f00e f851 	bl	8012190 <strtok>
		callsign=strtok(message,"<> ");
 80040ee:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 80040f0:	f00d f9b4 	bl	801145c <atoi>
		if( power < 0 ) power=0;
 80040f4:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 80040f6:	4b4d      	ldr	r3, [pc, #308]	; (800422c <get_wspr_channel_symbols+0x308>)
 80040f8:	bfa8      	it	ge
 80040fa:	203c      	movge	r0, #60	; 0x3c
 80040fc:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8004100:	4630      	mov	r0, r6
		power=power+nu[power%10];
 8004102:	fba3 1302 	umull	r1, r3, r3, r2
 8004106:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004110:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8004114:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8004118:	442a      	add	r2, r5
		ntype=-(power+1);
 800411a:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 800411c:	f7fc f940 	bl	80003a0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004120:	4b44      	ldr	r3, [pc, #272]	; (8004234 <get_wspr_channel_symbols+0x310>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8004122:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004124:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8004126:	f000 8296 	beq.w	8004656 <get_wspr_channel_symbols+0x732>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 800412a:	4632      	mov	r2, r6
 800412c:	07d2      	lsls	r2, r2, #31
 800412e:	f140 8366 	bpl.w	80047fe <get_wspr_channel_symbols+0x8da>
		while (length > 12)
 8004132:	280c      	cmp	r0, #12
 8004134:	f240 8514 	bls.w	8004b60 <get_wspr_channel_symbols+0xc3c>
 8004138:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800413a:	461a      	mov	r2, r3
 800413c:	4619      	mov	r1, r3
 800413e:	46a1      	mov	r9, r4
 8004140:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 8004142:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8004146:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8004148:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 800414c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 8004150:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8004154:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8004156:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 800415a:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 800415e:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 8004162:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 8004166:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8004168:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 800416c:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 8004170:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 8004174:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 8004178:	4472      	add	r2, lr
			a += k[0];
 800417a:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 800417e:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 8004182:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 8004184:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 8004188:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 800418c:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8004190:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 8004194:	46b6      	mov	lr, r6
		while (length > 12)
 8004196:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 800419a:	eba4 0402 	sub.w	r4, r4, r2
 800419e:	4464      	add	r4, ip
			b += k[4];
 80041a0:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 80041a4:	4463      	add	r3, ip
 80041a6:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 80041aa:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 80041ae:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 80041b2:	440b      	add	r3, r1
			mix(a,b,c);
 80041b4:	4621      	mov	r1, r4
 80041b6:	441a      	add	r2, r3
 80041b8:	eba3 0304 	sub.w	r3, r3, r4
 80041bc:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 80041c0:	4411      	add	r1, r2
 80041c2:	eba2 0203 	sub.w	r2, r2, r3
 80041c6:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 80041ca:	440b      	add	r3, r1
 80041cc:	eba1 0102 	sub.w	r1, r1, r2
 80041d0:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 80041d4:	441a      	add	r2, r3
 80041d6:	eba3 0304 	sub.w	r3, r3, r4
 80041da:	eb04 0c02 	add.w	ip, r4, r2
 80041de:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 80041e2:	eba2 0201 	sub.w	r2, r2, r1
 80041e6:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 80041ea:	4461      	add	r1, ip
		while (length > 12)
 80041ec:	d8a9      	bhi.n	8004142 <get_wspr_channel_symbols+0x21e>
 80041ee:	464c      	mov	r4, r9
 80041f0:	4663      	mov	r3, ip
 80041f2:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 80041f4:	3801      	subs	r0, #1
 80041f6:	280b      	cmp	r0, #11
 80041f8:	f200 82bd 	bhi.w	8004776 <get_wspr_channel_symbols+0x852>
 80041fc:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004200:	029b029f 	.word	0x029b029f
 8004204:	02930297 	.word	0x02930297
 8004208:	028c0290 	.word	0x028c0290
 800420c:	02840288 	.word	0x02840288
 8004210:	027d0281 	.word	0x027d0281
 8004214:	02750279 	.word	0x02750279
 8004218:	08015808 	.word	0x08015808
 800421c:	0801893c 	.word	0x0801893c
 8004220:	08018764 	.word	0x08018764
 8004224:	08018768 	.word	0x08018768
 8004228:	0801876c 	.word	0x0801876c
 800422c:	cccccccd 	.word	0xcccccccd
 8004230:	08018770 	.word	0x08018770
 8004234:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8004238:	49ce      	ldr	r1, [pc, #824]	; (8004574 <get_wspr_channel_symbols+0x650>)
 800423a:	f107 001c 	add.w	r0, r7, #28
 800423e:	f00d ffa7 	bl	8012190 <strtok>
		grid = strtok(NULL," ");
 8004242:	49cc      	ldr	r1, [pc, #816]	; (8004574 <get_wspr_channel_symbols+0x650>)
		callsign = strtok(message," ");
 8004244:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8004246:	2000      	movs	r0, #0
 8004248:	f00d ffa2 	bl	8012190 <strtok>
		powstr = strtok(NULL," ");
 800424c:	49c9      	ldr	r1, [pc, #804]	; (8004574 <get_wspr_channel_symbols+0x650>)
		grid = strtok(NULL," ");
 800424e:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 8004250:	2000      	movs	r0, #0
 8004252:	f00d ff9d 	bl	8012190 <strtok>
		int power = atoi(powstr);
 8004256:	f00d f901 	bl	801145c <atoi>
 800425a:	4605      	mov	r5, r0
		n = pack_call(callsign);
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff fd99 	bl	8003d94 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8004262:	7833      	ldrb	r3, [r6, #0]
		n = pack_call(callsign);
 8004264:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8004266:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	2a09      	cmp	r2, #9
 800426e:	d908      	bls.n	8004282 <get_wspr_channel_symbols+0x35e>
	if( ch == 32 ) {  //space
 8004270:	2b20      	cmp	r3, #32
 8004272:	f000 845c 	beq.w	8004b2e <get_wspr_channel_symbols+0xc0a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8004276:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800427a:	b2d2      	uxtb	r2, r2
	return -1;
 800427c:	2a12      	cmp	r2, #18
 800427e:	bf28      	it	cs
 8004280:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8004282:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8004284:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b09      	cmp	r3, #9
 800428c:	d908      	bls.n	80042a0 <get_wspr_channel_symbols+0x37c>
	if( ch == 32 ) {  //space
 800428e:	2920      	cmp	r1, #32
 8004290:	f000 844a 	beq.w	8004b28 <get_wspr_channel_symbols+0xc04>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8004294:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8004298:	b2db      	uxtb	r3, r3
	return -1;
 800429a:	2b12      	cmp	r3, #18
 800429c:	bf28      	it	cs
 800429e:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 80042a0:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80042a2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80042a6:	b2c0      	uxtb	r0, r0
 80042a8:	2809      	cmp	r0, #9
 80042aa:	d907      	bls.n	80042bc <get_wspr_channel_symbols+0x398>
	if( ch == 32 ) {  //space
 80042ac:	2920      	cmp	r1, #32
 80042ae:	f000 8441 	beq.w	8004b34 <get_wspr_channel_symbols+0xc10>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 80042b2:	3941      	subs	r1, #65	; 0x41
 80042b4:	b2c8      	uxtb	r0, r1
	return -1;
 80042b6:	2812      	cmp	r0, #18
 80042b8:	bf28      	it	cs
 80042ba:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 80042bc:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80042be:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80042c2:	b2c9      	uxtb	r1, r1
 80042c4:	2909      	cmp	r1, #9
 80042c6:	d908      	bls.n	80042da <get_wspr_channel_symbols+0x3b6>
	if( ch == 32 ) {  //space
 80042c8:	2e20      	cmp	r6, #32
 80042ca:	f000 8427 	beq.w	8004b1c <get_wspr_channel_symbols+0xbf8>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 80042ce:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 80042d2:	b2c9      	uxtb	r1, r1
	return -1;
 80042d4:	2912      	cmp	r1, #18
 80042d6:	bf28      	it	cs
 80042d8:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 80042da:	f06f 0609 	mvn.w	r6, #9
 80042de:	b21b      	sxth	r3, r3
 80042e0:	fb06 f202 	mul.w	r2, r6, r2
 80042e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042e8:	32b3      	adds	r2, #179	; 0xb3
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	1a12      	subs	r2, r2, r0
 80042ee:	20b4      	movs	r0, #180	; 0xb4
 80042f0:	fb00 3302 	mla	r3, r0, r2, r3
 80042f4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80042f8:	440b      	add	r3, r1
 80042fa:	ee08 2a10 	vmov	s16, r2
 80042fe:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
	m=m*128+power+64;
 8004302:	f103 0540 	add.w	r5, r3, #64	; 0x40
	it=0xFF & (n>>20);
 8004306:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8004308:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 800430c:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 800430e:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 8004312:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 8004314:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8004316:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 800431a:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 800431c:	747b      	strb	r3, [r7, #17]
	it=0xFF & (m>>10);
 800431e:	12ab      	asrs	r3, r5, #10
	it=0xFF & (n>>4);
 8004320:	0924      	lsrs	r4, r4, #4
	data[3]=it;
 8004322:	74fa      	strb	r2, [r7, #19]
	it=0xFF & (m>>10);
 8004324:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8004326:	10ab      	asrs	r3, r5, #2
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8004328:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 800432a:	74bc      	strb	r4, [r7, #18]
	it=0xFF & (m>>2);
 800432c:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 800432e:	01ab      	lsls	r3, r5, #6
	memset(data,0,sizeof(data));
 8004330:	f8c7 6017 	str.w	r6, [r7, #23]
	it=(m & 0x03)<<6 ;
 8004334:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8004336:	466b      	mov	r3, sp
			ENCODE(sym,encstate);
 8004338:	4d8f      	ldr	r5, [pc, #572]	; (8004578 <get_wspr_channel_symbols+0x654>)
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 800433a:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 800433e:	f00d f8db 	bl	80114f8 <memset>
	while(nbytes-- != 0) {
 8004342:	f107 0310 	add.w	r3, r7, #16
 8004346:	4a8d      	ldr	r2, [pc, #564]	; (800457c <get_wspr_channel_symbols+0x658>)
			ENCODE(sym,encstate);
 8004348:	4c8d      	ldr	r4, [pc, #564]	; (8004580 <get_wspr_channel_symbols+0x65c>)
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004350:	60fe      	str	r6, [r7, #12]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8004352:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 8004354:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	f810 9b01 	ldrb.w	r9, [r0], #1
 800435c:	60b8      	str	r0, [r7, #8]
 800435e:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8004362:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8004366:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 800436a:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 800436e:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8004372:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8004376:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 800437a:	ea01 0005 	and.w	r0, r1, r5
 800437e:	4021      	ands	r1, r4
 8004380:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8004384:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8004388:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 800438c:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8004390:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8004394:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8004396:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 800439a:	f812 a001 	ldrb.w	sl, [r2, r1]
 800439e:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043a0:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 80043a4:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043a6:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 80043aa:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043ae:	f3c9 0040 	ubfx	r0, r9, #1, #1
 80043b2:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 80043b6:	6079      	str	r1, [r7, #4]
 80043b8:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 80043bc:	ea08 0905 	and.w	r9, r8, r5
 80043c0:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043c4:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 80043c8:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 80043cc:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 80043d0:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 80043d4:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 80043d8:	fa5f f989 	uxtb.w	r9, r9
 80043dc:	fa5f f888 	uxtb.w	r8, r8
 80043e0:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043e4:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 80043e8:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80043ec:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 80043ee:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 80043f2:	ea0e 0805 	and.w	r8, lr, r5
 80043f6:	ea0e 0e04 	and.w	lr, lr, r4
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8004400:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8004404:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8004408:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 800440c:	fa5f f888 	uxtb.w	r8, r8
 8004410:	fa5f fe8e 	uxtb.w	lr, lr
 8004414:	f812 8008 	ldrb.w	r8, [r2, r8]
 8004418:	f812 e00e 	ldrb.w	lr, [r2, lr]
 800441c:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8004420:	ea0c 0e05 	and.w	lr, ip, r5
 8004424:	ea0c 0c04 	and.w	ip, ip, r4
 8004428:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 800442c:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8004430:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8004434:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8004438:	fa5f fe8e 	uxtb.w	lr, lr
 800443c:	fa5f fc8c 	uxtb.w	ip, ip
 8004440:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8004444:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8004448:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 800444c:	ea01 0c05 	and.w	ip, r1, r5
 8004450:	4021      	ands	r1, r4
 8004452:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8004456:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 800445a:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 800445e:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8004462:	fa5f fc8c 	uxtb.w	ip, ip
 8004466:	b2c9      	uxtb	r1, r1
 8004468:	f812 c00c 	ldrb.w	ip, [r2, ip]
 800446c:	5c51      	ldrb	r1, [r2, r1]
 800446e:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8004472:	ea06 0105 	and.w	r1, r6, r5
 8004476:	4026      	ands	r6, r4
 8004478:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 800447c:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8004480:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8004484:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8004488:	b2c9      	uxtb	r1, r1
 800448a:	b2f6      	uxtb	r6, r6
 800448c:	5c51      	ldrb	r1, [r2, r1]
 800448e:	5d96      	ldrb	r6, [r2, r6]
 8004490:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8004494:	ea00 0605 	and.w	r6, r0, r5
 8004498:	4020      	ands	r0, r4
 800449a:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 800449e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 80044a2:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 80044a6:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 80044aa:	b2f6      	uxtb	r6, r6
 80044ac:	b2c0      	uxtb	r0, r0
 80044ae:	5d96      	ldrb	r6, [r2, r6]
 80044b0:	5c10      	ldrb	r0, [r2, r0]
 80044b2:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	4028      	ands	r0, r5
 80044ba:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 80044be:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 80044c2:	b2c0      	uxtb	r0, r0
 80044c4:	f812 b000 	ldrb.w	fp, [r2, r0]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	4020      	ands	r0, r4
 80044cc:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 80044d0:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 80044d4:	b2c0      	uxtb	r0, r0
 80044d6:	5c10      	ldrb	r0, [r2, r0]
 80044d8:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 80044dc:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 80044e0:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 80044e4:	f803 0c20 	strb.w	r0, [r3, #-32]
 80044e8:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 80044ec:	f009 0901 	and.w	r9, r9, #1
 80044f0:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 80044f4:	f803 0c1e 	strb.w	r0, [r3, #-30]
 80044f8:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 80044fc:	f008 0801 	and.w	r8, r8, #1
 8004500:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8004504:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8004508:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 800450c:	f00e 0e01 	and.w	lr, lr, #1
 8004510:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8004514:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8004518:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 800451c:	f803 ec19 	strb.w	lr, [r3, #-25]
 8004520:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8004524:	f803 0c18 	strb.w	r0, [r3, #-24]
 8004528:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 800452a:	f001 0101 	and.w	r1, r1, #1
 800452e:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8004532:	f803 0c16 	strb.w	r0, [r3, #-22]
 8004536:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8004538:	f803 1c15 	strb.w	r1, [r3, #-21]
 800453c:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8004540:	f803 0c14 	strb.w	r0, [r3, #-20]
 8004544:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8004548:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 800454c:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 8004550:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8004554:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8004556:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 800455a:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 800455c:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 8004560:	f47f aef7 	bne.w	8004352 <get_wspr_channel_symbols+0x42e>
 8004564:	f04f 0e00 	mov.w	lr, #0
 8004568:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 800456c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004584 <get_wspr_channel_symbols+0x660>
	i = p = 0;
 8004570:	46f4      	mov	ip, lr
 8004572:	e009      	b.n	8004588 <get_wspr_channel_symbols+0x664>
 8004574:	0801893c 	.word	0x0801893c
 8004578:	f2d05351 	.word	0xf2d05351
 800457c:	08018784 	.word	0x08018784
 8004580:	e4613c47 	.word	0xe4613c47
 8004584:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8004588:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 800458c:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8004590:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8004594:	2300      	movs	r3, #0
			p++;
 8004596:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 800459a:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 800459c:	462a      	mov	r2, r5
 800459e:	02ad      	lsls	r5, r5, #10
 80045a0:	18ad      	adds	r5, r5, r2
 80045a2:	f143 0300 	adc.w	r3, r3, #0
 80045a6:	052a      	lsls	r2, r5, #20
 80045a8:	051e      	lsls	r6, r3, #20
 80045aa:	18aa      	adds	r2, r5, r2
 80045ac:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 80045b0:	eb43 0306 	adc.w	r3, r3, r6
 80045b4:	1892      	adds	r2, r2, r2
 80045b6:	415b      	adcs	r3, r3
 80045b8:	ea02 060a 	and.w	r6, r2, sl
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	0235      	lsls	r5, r6, #8
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	19ad      	adds	r5, r5, r6
 80045c6:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 80045ca:	ea4f 4105 	mov.w	r1, r5, lsl #16
 80045ce:	eb43 0202 	adc.w	r2, r3, r2
 80045d2:	1869      	adds	r1, r5, r1
 80045d4:	ea4f 4902 	mov.w	r9, r2, lsl #16
 80045d8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80045dc:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 80045e0:	eb42 0209 	adc.w	r2, r2, r9
 80045e4:	eb18 0606 	adds.w	r6, r8, r6
 80045e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80045ec:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 80045f0:	eb43 0302 	adc.w	r3, r3, r2
 80045f4:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 80045f6:	2ba1      	cmp	r3, #161	; 0xa1
 80045f8:	f200 80fa 	bhi.w	80047f0 <get_wspr_channel_symbols+0x8cc>
			p++;
 80045fc:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8004600:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8004604:	f10e 0e01 	add.w	lr, lr, #1
 8004608:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 800460c:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 8004610:	d1ba      	bne.n	8004588 <get_wspr_channel_symbols+0x664>
	memcpy(sym, tmp, sizeof(tmp));
 8004612:	22a2      	movs	r2, #162	; 0xa2
 8004614:	4659      	mov	r1, fp
 8004616:	ee18 0a10 	vmov	r0, s16
 800461a:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 800461e:	f00c ff5d 	bl	80114dc <memcpy>
	for (i=0; i < 162; i++) {
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8004628:	48d3      	ldr	r0, [pc, #844]	; (8004978 <get_wspr_channel_symbols+0xa54>)
 800462a:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 800462c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004630:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8004634:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8004638:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 800463a:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 800463e:	d1f5      	bne.n	800462c <get_wspr_channel_symbols+0x708>
	return 1;
 8004640:	ee18 3a90 	vmov	r3, s17
 8004644:	2001      	movs	r0, #1
}
 8004646:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800464a:	469d      	mov	sp, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	ecbd 8b02 	vpop	{d8}
 8004652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8004656:	280c      	cmp	r0, #12
 8004658:	f240 8263 	bls.w	8004b22 <get_wspr_channel_symbols+0xbfe>
 800465c:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800465e:	461a      	mov	r2, r3
 8004660:	4619      	mov	r1, r3
 8004662:	46a6      	mov	lr, r4
			c += k[2];
 8004664:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 8004668:	380c      	subs	r0, #12
 800466a:	46b4      	mov	ip, r6
		while (length > 12)
 800466c:	360c      	adds	r6, #12
			c += k[2];
 800466e:	4422      	add	r2, r4
			mix(a,b,c);
 8004670:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 8004674:	280c      	cmp	r0, #12
			mix(a,b,c);
 8004676:	eba4 0402 	sub.w	r4, r4, r2
 800467a:	4423      	add	r3, r4
 800467c:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8004680:	461c      	mov	r4, r3
			b += k[1];
 8004682:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004686:	440b      	add	r3, r1
			mix(a,b,c);
 8004688:	4621      	mov	r1, r4
 800468a:	441a      	add	r2, r3
 800468c:	eba3 0304 	sub.w	r3, r3, r4
 8004690:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8004694:	4411      	add	r1, r2
 8004696:	eba2 0203 	sub.w	r2, r2, r3
 800469a:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 800469e:	440b      	add	r3, r1
 80046a0:	eba1 0102 	sub.w	r1, r1, r2
 80046a4:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 80046a8:	441a      	add	r2, r3
 80046aa:	460c      	mov	r4, r1
 80046ac:	eba3 0301 	sub.w	r3, r3, r1
 80046b0:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 80046b4:	4623      	mov	r3, r4
 80046b6:	4413      	add	r3, r2
 80046b8:	eba2 0201 	sub.w	r2, r2, r1
 80046bc:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 80046c0:	4419      	add	r1, r3
		while (length > 12)
 80046c2:	d8cf      	bhi.n	8004664 <get_wspr_channel_symbols+0x740>
 80046c4:	4674      	mov	r4, lr
 80046c6:	46e0      	mov	r8, ip
		switch(length)
 80046c8:	3801      	subs	r0, #1
 80046ca:	280b      	cmp	r0, #11
 80046cc:	d853      	bhi.n	8004776 <get_wspr_channel_symbols+0x852>
 80046ce:	e8df f010 	tbh	[pc, r0, lsl #1]
 80046d2:	0036      	.short	0x0036
 80046d4:	017d013f 	.word	0x017d013f
 80046d8:	01720179 	.word	0x01720179
 80046dc:	0164016b 	.word	0x0164016b
 80046e0:	0159015d 	.word	0x0159015d
 80046e4:	014c0155 	.word	0x014c0155
 80046e8:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 80046ea:	f898 000b 	ldrb.w	r0, [r8, #11]
 80046ee:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 80046f2:	f898 000a 	ldrb.w	r0, [r8, #10]
 80046f6:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 80046fa:	f898 0009 	ldrb.w	r0, [r8, #9]
 80046fe:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 8004702:	f898 0008 	ldrb.w	r0, [r8, #8]
 8004706:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 8004708:	f898 0007 	ldrb.w	r0, [r8, #7]
 800470c:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 8004710:	f898 0006 	ldrb.w	r0, [r8, #6]
 8004714:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 8004718:	f898 0005 	ldrb.w	r0, [r8, #5]
 800471c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 8004720:	f898 0004 	ldrb.w	r0, [r8, #4]
 8004724:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 8004726:	f898 0003 	ldrb.w	r0, [r8, #3]
 800472a:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 800472e:	f898 0002 	ldrb.w	r0, [r8, #2]
 8004732:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 8004736:	f898 0001 	ldrb.w	r0, [r8, #1]
 800473a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 800473e:	f898 0000 	ldrb.w	r0, [r8]
 8004742:	4403      	add	r3, r0
	final(a,b,c);
 8004744:	404a      	eors	r2, r1
 8004746:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 800474a:	4043      	eors	r3, r0
 800474c:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8004750:	4059      	eors	r1, r3
 8004752:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8004756:	ea80 0102 	eor.w	r1, r0, r2
 800475a:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 800475e:	404b      	eors	r3, r1
 8004760:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8004764:	405a      	eors	r2, r3
 8004766:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 800476a:	ea81 0203 	eor.w	r2, r1, r3
 800476e:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 8004772:	f3c3 020e 	ubfx	r2, r3, #0, #15
		m=128*ihash + ntype + 64;
 8004776:	eb05 13c2 	add.w	r3, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 800477a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800477e:	2200      	movs	r2, #0
		j=strlen(grid);
 8004780:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8004782:	ee08 1a10 	vmov	s16, r1
		m=128*ihash + ntype + 64;
 8004786:	f103 0540 	add.w	r5, r3, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 800478a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800478e:	f8c7 2103 	str.w	r2, [r7, #259]	; 0x103
		j=strlen(grid);
 8004792:	f7fb fe05 	bl	80003a0 <strlen>
		for(i=0; i<j-1; i++) {
 8004796:	3801      	subs	r0, #1
 8004798:	2800      	cmp	r0, #0
 800479a:	dd20      	ble.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800479c:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 800479e:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 80047a0:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 80047a4:	d01b      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047a6:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 80047a8:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 80047aa:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 80047ae:	d016      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047b0:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 80047b2:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 80047b4:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 80047b8:	d011      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047ba:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 80047bc:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 80047be:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 80047c2:	d00c      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047c4:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 80047c6:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 80047c8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 80047cc:	d007      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047ce:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 80047d0:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 80047d2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 80047d6:	d002      	beq.n	80047de <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 80047d8:	79e3      	ldrb	r3, [r4, #7]
 80047da:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 80047de:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 80047e0:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 80047e4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 80047e8:	f7ff fad4 	bl	8003d94 <pack_call>
 80047ec:	4604      	mov	r4, r0
 80047ee:	e58a      	b.n	8004306 <get_wspr_channel_symbols+0x3e2>
	while (p < 162) {
 80047f0:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 80047f4:	f10e 0e01 	add.w	lr, lr, #1
 80047f8:	f67f aec6 	bls.w	8004588 <get_wspr_channel_symbols+0x664>
 80047fc:	e709      	b.n	8004612 <get_wspr_channel_symbols+0x6ee>
		while (length > 12)
 80047fe:	280c      	cmp	r0, #12
 8004800:	f240 81ab 	bls.w	8004b5a <get_wspr_channel_symbols+0xc36>
 8004804:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004806:	461a      	mov	r2, r3
 8004808:	4619      	mov	r1, r3
 800480a:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 800480c:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 8004810:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004812:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 8004816:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004818:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 800481c:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 8004820:	4422      	add	r2, r4
 8004822:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 8004824:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 8004828:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 800482c:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 8004830:	eba2 0204 	sub.w	r2, r2, r4
 8004834:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 8004836:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 800483a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800483e:	46b4      	mov	ip, r6
			mix(a,b,c);
 8004840:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 8004844:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 8004848:	440b      	add	r3, r1
			mix(a,b,c);
 800484a:	eb03 0104 	add.w	r1, r3, r4
 800484e:	eba3 0302 	sub.w	r3, r3, r2
 8004852:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 8004856:	440a      	add	r2, r1
 8004858:	eba1 0103 	sub.w	r1, r1, r3
 800485c:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8004860:	4413      	add	r3, r2
 8004862:	eba2 0201 	sub.w	r2, r2, r1
 8004866:	eb01 0403 	add.w	r4, r1, r3
 800486a:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 800486e:	eba3 0302 	sub.w	r3, r3, r2
 8004872:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 8004876:	eb02 0304 	add.w	r3, r2, r4
 800487a:	eba4 0201 	sub.w	r2, r4, r1
 800487e:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8004882:	4419      	add	r1, r3
		while (length > 12)
 8004884:	d8c2      	bhi.n	800480c <get_wspr_channel_symbols+0x8e8>
 8004886:	4674      	mov	r4, lr
 8004888:	46e0      	mov	r8, ip
		switch(length)
 800488a:	3801      	subs	r0, #1
 800488c:	280b      	cmp	r0, #11
 800488e:	f63f af72 	bhi.w	8004776 <get_wspr_channel_symbols+0x852>
 8004892:	a601      	add	r6, pc, #4	; (adr r6, 8004898 <get_wspr_channel_symbols+0x974>)
 8004894:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8004898:	0800473f 	.word	0x0800473f
 800489c:	08004951 	.word	0x08004951
 80048a0:	08004949 	.word	0x08004949
 80048a4:	08004a4d 	.word	0x08004a4d
 80048a8:	08004a47 	.word	0x08004a47
 80048ac:	08004a31 	.word	0x08004a31
 80048b0:	08004a29 	.word	0x08004a29
 80048b4:	08004a0b 	.word	0x08004a0b
 80048b8:	08004a05 	.word	0x08004a05
 80048bc:	080049e1 	.word	0x080049e1
 80048c0:	080049d9 	.word	0x080049d9
 80048c4:	08004a5d 	.word	0x08004a5d
		for (i=0; i<i1; i++) {
 80048c8:	b300      	cbz	r0, 800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048ca:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 80048cc:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 80048ce:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80048d2:	d01b      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048d4:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 80048d6:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 80048d8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80048dc:	d016      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048de:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 80048e0:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 80048e2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80048e6:	d011      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048e8:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80048ea:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80048ec:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80048f0:	d00c      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048f2:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80048f4:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80048f6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80048fa:	d007      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80048fc:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80048fe:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8004900:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8004904:	d002      	beq.n	800490c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004906:	79a3      	ldrb	r3, [r4, #6]
 8004908:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 800490c:	f107 0210 	add.w	r2, r7, #16
 8004910:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 8004914:	4413      	add	r3, r2
		*n=pack_call(call6);
 8004916:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800491a:	4610      	mov	r0, r2
 800491c:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 8004920:	2200      	movs	r2, #0
 8004922:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 8004926:	f7ff fa35 	bl	8003d94 <pack_call>
		int nc = callsign[i1+1];
 800492a:	4653      	mov	r3, sl
		*n=pack_call(call6);
 800492c:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 800492e:	4433      	add	r3, r6
 8004930:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 8004932:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004936:	2b09      	cmp	r3, #9
 8004938:	f200 80a6 	bhi.w	8004a88 <get_wspr_channel_symbols+0xb64>
		*m=60000-32768+*m;
 800493c:	f646 2330 	movw	r3, #27184	; 0x6a30
 8004940:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	f7ff bbbf 	b.w	80040c6 <get_wspr_channel_symbols+0x1a2>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 8004948:	f898 0002 	ldrb.w	r0, [r8, #2]
 800494c:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 8004950:	f8b8 0000 	ldrh.w	r0, [r8]
 8004954:	4403      	add	r3, r0
		break;
 8004956:	e6f5      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 8004958:	4646      	mov	r6, r8
 800495a:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 800495e:	4402      	add	r2, r0
 8004960:	6870      	ldr	r0, [r6, #4]
 8004962:	4401      	add	r1, r0
 8004964:	6830      	ldr	r0, [r6, #0]
 8004966:	4403      	add	r3, r0
 8004968:	e6ec      	b.n	8004744 <get_wspr_channel_symbols+0x820>
 800496a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800496e:	4646      	mov	r6, r8
 8004970:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004974:	e7f3      	b.n	800495e <get_wspr_channel_symbols+0xa3a>
 8004976:	bf00      	nop
 8004978:	08018883 	.word	0x08018883
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 800497c:	4646      	mov	r6, r8
 800497e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8004982:	e7ec      	b.n	800495e <get_wspr_channel_symbols+0xa3a>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 8004984:	4646      	mov	r6, r8
 8004986:	f898 0008 	ldrb.w	r0, [r8, #8]
 800498a:	e7e8      	b.n	800495e <get_wspr_channel_symbols+0xa3a>
		case 8 : b+=k[1]; a+=k[0]; break;
 800498c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004990:	4401      	add	r1, r0
 8004992:	f8d8 0000 	ldr.w	r0, [r8]
 8004996:	4403      	add	r3, r0
 8004998:	e6d4      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 800499a:	e9d8 6000 	ldrd	r6, r0, [r8]
 800499e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80049a2:	4433      	add	r3, r6
 80049a4:	4401      	add	r1, r0
 80049a6:	e6cd      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 80049a8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80049ac:	4401      	add	r1, r0
 80049ae:	f8d8 0000 	ldr.w	r0, [r8]
 80049b2:	4403      	add	r3, r0
 80049b4:	e6c6      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 80049b6:	f898 0004 	ldrb.w	r0, [r8, #4]
 80049ba:	4401      	add	r1, r0
 80049bc:	f8d8 0000 	ldr.w	r0, [r8]
 80049c0:	4403      	add	r3, r0
 80049c2:	e6bf      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 4 : a+=k[0]; break;
 80049c4:	f8d8 0000 	ldr.w	r0, [r8]
 80049c8:	4403      	add	r3, r0
 80049ca:	e6bb      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 3 : a+=k[0]&0xffffff; break;
 80049cc:	f8d8 0000 	ldr.w	r0, [r8]
 80049d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80049d4:	4403      	add	r3, r0
 80049d6:	e6b5      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 80049d8:	f898 000a 	ldrb.w	r0, [r8, #10]
 80049dc:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 80049e0:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80049e4:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80049e6:	f8b8 0000 	ldrh.w	r0, [r8]
 80049ea:	4418      	add	r0, r3
		case 10: c+=k[4];
 80049ec:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80049f0:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 80049f2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80049f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80049fa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80049fe:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004a02:	e69f      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 9 : c+=k8[8];                      /* fall through */
 8004a04:	f898 0008 	ldrb.w	r0, [r8, #8]
 8004a08:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8004a0a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8004a0e:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a10:	f8b8 0000 	ldrh.w	r0, [r8]
 8004a14:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8004a16:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004a1a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a1e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004a22:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004a26:	e68d      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8004a28:	f898 0006 	ldrb.w	r0, [r8, #6]
 8004a2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a30:	f8b8 0000 	ldrh.w	r0, [r8]
 8004a34:	4418      	add	r0, r3
		case 6 : b+=k[2];
 8004a36:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004a3a:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a3c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004a40:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004a44:	e67e      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k8[4];                      /* fall through */
 8004a46:	f898 0004 	ldrb.w	r0, [r8, #4]
 8004a4a:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8004a4c:	f8b8 0000 	ldrh.w	r0, [r8]
 8004a50:	4418      	add	r0, r3
 8004a52:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004a56:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004a5a:	e673      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004a5c:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8004a60:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004a62:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8004a66:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a68:	f8b8 0000 	ldrh.w	r0, [r8]
 8004a6c:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004a6e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004a72:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004a76:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004a7a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004a7e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004a82:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004a86:	e65d      	b.n	8004744 <get_wspr_channel_symbols+0x820>
		} else if ( nc >= 65 && nc <= 90 ) {
 8004a88:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8004a8c:	2b19      	cmp	r3, #25
 8004a8e:	d854      	bhi.n	8004b3a <get_wspr_channel_symbols+0xc16>
		*m=60000-32768+*m;
 8004a90:	f646 2329 	movw	r3, #27177	; 0x6a29
 8004a94:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	f7ff bb15 	b.w	80040c6 <get_wspr_channel_symbols+0x1a2>
		char const * pfx = strtok (callsign,"/");
 8004a9c:	4936      	ldr	r1, [pc, #216]	; (8004b78 <get_wspr_channel_symbols+0xc54>)
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f00d fb76 	bl	8012190 <strtok>
		char const * call = strtok(NULL," ");
 8004aa4:	4935      	ldr	r1, [pc, #212]	; (8004b7c <get_wspr_channel_symbols+0xc58>)
		char const * pfx = strtok (callsign,"/");
 8004aa6:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f00d fb71 	bl	8012190 <strtok>
		*n = pack_call (call);
 8004aae:	f7ff f971 	bl	8003d94 <pack_call>
 8004ab2:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7fb fc73 	bl	80003a0 <strlen>
		if( plen ==1 ) {
 8004aba:	2801      	cmp	r0, #1
 8004abc:	d042      	beq.n	8004b44 <get_wspr_channel_symbols+0xc20>
		} else if( plen == 2 ) {
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d03e      	beq.n	8004b40 <get_wspr_channel_symbols+0xc1c>
		for (i=0; i<plen; i++) {
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d050      	beq.n	8004b68 <get_wspr_channel_symbols+0xc44>
			*m=0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004acc:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 8004ace:	4662      	mov	r2, ip
			int nc = callsign[i];
 8004ad0:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 8004ad4:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 8004ad8:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 8004adc:	2909      	cmp	r1, #9
 8004ade:	d906      	bls.n	8004aee <get_wspr_channel_symbols+0xbca>
			} else if ( nc >= 65 && nc <= 90 ) {
 8004ae0:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 8004ae4:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 8004ae8:	bf98      	it	ls
 8004aea:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 8004aee:	4646      	mov	r6, r8
 8004af0:	3202      	adds	r2, #2
 8004af2:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 8004af4:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 8004af8:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 8004afa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8004afe:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 8004b00:	d8e5      	bhi.n	8004ace <get_wspr_channel_symbols+0xbaa>
		if( *m > 32768 ) {
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b06:	dd20      	ble.n	8004b4a <get_wspr_channel_symbols+0xc26>
			*m=*m-32768;
 8004b08:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004b0c:	f507 7280 	add.w	r2, r7, #256	; 0x100
			*nadd=1;
 8004b10:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	ee08 2a10 	vmov	s16, r2
 8004b18:	f7ff bad6 	b.w	80040c8 <get_wspr_channel_symbols+0x1a4>
		return 36;
 8004b1c:	2124      	movs	r1, #36	; 0x24
 8004b1e:	f7ff bbdc 	b.w	80042da <get_wspr_channel_symbols+0x3b6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004b22:	461a      	mov	r2, r3
 8004b24:	4619      	mov	r1, r3
 8004b26:	e5cf      	b.n	80046c8 <get_wspr_channel_symbols+0x7a4>
		return 36;
 8004b28:	2324      	movs	r3, #36	; 0x24
 8004b2a:	f7ff bbb9 	b.w	80042a0 <get_wspr_channel_symbols+0x37c>
 8004b2e:	2224      	movs	r2, #36	; 0x24
 8004b30:	f7ff bba7 	b.w	8004282 <get_wspr_channel_symbols+0x35e>
 8004b34:	2024      	movs	r0, #36	; 0x24
 8004b36:	f7ff bbc1 	b.w	80042bc <get_wspr_channel_symbols+0x398>
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <get_wspr_channel_symbols+0xc5c>)
		*m=60000-32768+*m;
 8004b3c:	f7ff bac3 	b.w	80040c6 <get_wspr_channel_symbols+0x1a2>
			*m=36;
 8004b40:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 8004b42:	e7c1      	b.n	8004ac8 <get_wspr_channel_symbols+0xba4>
			*m=37*(*m)+36;
 8004b44:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 8004b48:	e7be      	b.n	8004ac8 <get_wspr_channel_symbols+0xba4>
 8004b4a:	f507 7280 	add.w	r2, r7, #256	; 0x100
		m=128*ng+ntype+64;
 8004b4e:	01db      	lsls	r3, r3, #7
		*nadd=0;
 8004b50:	2000      	movs	r0, #0
 8004b52:	ee08 2a10 	vmov	s16, r2
 8004b56:	f7ff bab7 	b.w	80040c8 <get_wspr_channel_symbols+0x1a4>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	e694      	b.n	800488a <get_wspr_channel_symbols+0x966>
 8004b60:	461a      	mov	r2, r3
 8004b62:	4619      	mov	r1, r3
 8004b64:	f7ff bb46 	b.w	80041f4 <get_wspr_channel_symbols+0x2d0>
 8004b68:	f507 7280 	add.w	r2, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	ee08 2a10 	vmov	s16, r2
 8004b72:	f7ff baa9 	b.w	80040c8 <get_wspr_channel_symbols+0x1a4>
 8004b76:	bf00      	nop
 8004b78:	08018764 	.word	0x08018764
 8004b7c:	0801893c 	.word	0x0801893c
 8004b80:	00354300 	.word	0x00354300
 8004b84:	00000000 	.word	0x00000000

08004b88 <SendWSPR>:
{
 8004b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 8004b8c:	496c      	ldr	r1, [pc, #432]	; (8004d40 <SendWSPR+0x1b8>)
 8004b8e:	486d      	ldr	r0, [pc, #436]	; (8004d44 <SendWSPR+0x1bc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004b90:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8004d80 <SendWSPR+0x1f8>
 8004b94:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8004d84 <SendWSPR+0x1fc>
{
 8004b98:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 8004b9c:	f7ff f9c2 	bl	8003f24 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8004ba0:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <SendWSPR+0x1c0>)
 8004ba2:	486a      	ldr	r0, [pc, #424]	; (8004d4c <SendWSPR+0x1c4>)
	LastTXFreq = LOfreq;
 8004ba4:	4a6a      	ldr	r2, [pc, #424]	; (8004d50 <SendWSPR+0x1c8>)
	LOfreq = (double)WSPR_FREQ;
 8004ba6:	6003      	str	r3, [r0, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004ba8:	496a      	ldr	r1, [pc, #424]	; (8004d54 <SendWSPR+0x1cc>)
 8004baa:	486b      	ldr	r0, [pc, #428]	; (8004d58 <SendWSPR+0x1d0>)
	LastTXFreq = LOfreq;
 8004bac:	6013      	str	r3, [r2, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004bae:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8004d38 <SendWSPR+0x1b0>
 8004bb2:	f000 fbe1 	bl	8005378 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 8004bb6:	2214      	movs	r2, #20
 8004bb8:	4968      	ldr	r1, [pc, #416]	; (8004d5c <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004bba:	f8d8 3000 	ldr.w	r3, [r8]
	WSPRTXFraction = 20; //percentage
 8004bbe:	700a      	strb	r2, [r1, #0]
				LED_GREEN_ON;
 8004bc0:	4d67      	ldr	r5, [pc, #412]	; (8004d60 <SendWSPR+0x1d8>)
			if(KEYER_DASH || KEYER_DOT)
 8004bc2:	4c68      	ldr	r4, [pc, #416]	; (8004d64 <SendWSPR+0x1dc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004bc4:	e014      	b.n	8004bf0 <SendWSPR+0x68>
 8004bc6:	f8db 3000 	ldr.w	r3, [fp]
 8004bca:	07da      	lsls	r2, r3, #31
 8004bcc:	d51e      	bpl.n	8004c0c <SendWSPR+0x84>
				LED_GREEN_ON;
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f005 fe7a 	bl	800a8c8 <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f005 fe70 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	4620      	mov	r0, r4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d036      	beq.n	8004c54 <SendWSPR+0xcc>
 8004be6:	f005 fe69 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004bea:	b398      	cbz	r0, 8004c54 <SendWSPR+0xcc>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004bec:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 8004bf0:	2200      	movs	r2, #0
				LED_GREEN_ON;
 8004bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bf6:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0e4      	beq.n	8004bc6 <SendWSPR+0x3e>
			if (SystemSeconds % 2 == 0)
 8004bfc:	07de      	lsls	r6, r3, #31
 8004bfe:	d5e6      	bpl.n	8004bce <SendWSPR+0x46>
				LED_GREEN_OFF;
 8004c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c04:	4628      	mov	r0, r5
 8004c06:	f005 fe5f 	bl	800a8c8 <HAL_GPIO_WritePin>
 8004c0a:	e7e3      	b.n	8004bd4 <SendWSPR+0x4c>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 8004c0c:	f00d fa48 	bl	80120a0 <rand>
 8004c10:	4b52      	ldr	r3, [pc, #328]	; (8004d5c <SendWSPR+0x1d4>)
 8004c12:	2165      	movs	r1, #101	; 0x65
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	4b54      	ldr	r3, [pc, #336]	; (8004d68 <SendWSPR+0x1e0>)
 8004c18:	fb83 3400 	smull	r3, r4, r3, r0
 8004c1c:	17c3      	asrs	r3, r0, #31
 8004c1e:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 8004c22:	4c52      	ldr	r4, [pc, #328]	; (8004d6c <SendWSPR+0x1e4>)
 8004c24:	fb01 0013 	mls	r0, r1, r3, r0
 8004c28:	4290      	cmp	r0, r2
 8004c2a:	dd17      	ble.n	8004c5c <SendWSPR+0xd4>
 8004c2c:	7823      	ldrb	r3, [r4, #0]
 8004c2e:	b9ab      	cbnz	r3, 8004c5c <SendWSPR+0xd4>
				if(KEYER_DASH || KEYER_DOT)
 8004c30:	4c4c      	ldr	r4, [pc, #304]	; (8004d64 <SendWSPR+0x1dc>)
 8004c32:	e002      	b.n	8004c3a <SendWSPR+0xb2>
 8004c34:	f005 fe42 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004c38:	b160      	cbz	r0, 8004c54 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 8004c3a:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 8004c3e:	2140      	movs	r1, #64	; 0x40
 8004c40:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d0bc      	beq.n	8004bc0 <SendWSPR+0x38>
				if(KEYER_DASH || KEYER_DOT)
 8004c46:	f005 fe39 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2180      	movs	r1, #128	; 0x80
 8004c4e:	4620      	mov	r0, r4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ef      	bne.n	8004c34 <SendWSPR+0xac>
}
 8004c54:	ecbd 8b02 	vpop	{d8}
 8004c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 8004c5c:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <SendWSPR+0x1e8>)
 8004c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c62:	4944      	ldr	r1, [pc, #272]	; (8004d74 <SendWSPR+0x1ec>)
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f003 fe6f 	bl	8008948 <HAL_ADCEx_MultiModeStart_DMA>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d161      	bne.n	8004d32 <SendWSPR+0x1aa>
			WSPRFirstTime = 0;
 8004c6e:	2300      	movs	r3, #0
			TXSwitch(1);
 8004c70:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 8004c72:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 8004c74:	f000 fe24 	bl	80058c0 <TXSwitch>
			CarrierEnable(1);
 8004c78:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 8004c7a:	4c3a      	ldr	r4, [pc, #232]	; (8004d64 <SendWSPR+0x1dc>)
			CarrierEnable(1);
 8004c7c:	f000 fe84 	bl	8005988 <CarrierEnable>
			while (SystemSeconds != 1)
 8004c80:	e00a      	b.n	8004c98 <SendWSPR+0x110>
				if(KEYER_DASH || KEYER_DOT)
 8004c82:	f005 fe1b 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2180      	movs	r1, #128	; 0x80
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0e1      	beq.n	8004c54 <SendWSPR+0xcc>
 8004c90:	f005 fe14 	bl	800a8bc <HAL_GPIO_ReadPin>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d0dd      	beq.n	8004c54 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 8004c98:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 8004c9c:	2140      	movs	r1, #64	; 0x40
 8004c9e:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8004ca0:	2f01      	cmp	r7, #1
 8004ca2:	d1ee      	bne.n	8004c82 <SendWSPR+0xfa>
			WSPRTone = syms[txIndex++];
 8004ca4:	4b26      	ldr	r3, [pc, #152]	; (8004d40 <SendWSPR+0x1b8>)
 8004ca6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8004d88 <SendWSPR+0x200>
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 8004cae:	4d32      	ldr	r5, [pc, #200]	; (8004d78 <SendWSPR+0x1f0>)
						LED_GREEN_OFF;
 8004cb0:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8004d60 <SendWSPR+0x1d8>
			WSPRTone = syms[txIndex++];
 8004cb4:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 8004cb8:	f002 fd5c 	bl	8007774 <HAL_GetTick>
 8004cbc:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <SendWSPR+0x1f4>)
 8004cc0:	037c      	lsls	r4, r7, #13
 8004cc2:	fba3 3404 	umull	r3, r4, r3, r4
 8004cc6:	07fb      	lsls	r3, r7, #31
 8004cc8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8004ccc:	d524      	bpl.n	8004d18 <SendWSPR+0x190>
 8004cce:	e001      	b.n	8004cd4 <SendWSPR+0x14c>
						LED_GREEN_OFF;
 8004cd0:	f005 fdfa 	bl	800a8c8 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004cd4:	f002 fd4e 	bl	8007774 <HAL_GetTick>
 8004cd8:	682e      	ldr	r6, [r5, #0]
 8004cda:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ce2:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004ce6:	1b9b      	subs	r3, r3, r6
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d8f1      	bhi.n	8004cd0 <SendWSPR+0x148>
				WSPRTone = syms[txIndex++];
 8004cec:	3701      	adds	r7, #1
 8004cee:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 8004cf2:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 8004cf4:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 8004cf8:	d1e1      	bne.n	8004cbe <SendWSPR+0x136>
			TXSwitch(0);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f000 fde0 	bl	80058c0 <TXSwitch>
			CarrierEnable(0);
 8004d00:	2000      	movs	r0, #0
 8004d02:	f000 fe41 	bl	8005988 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <SendWSPR+0x1e8>)
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	f003 fe99 	bl	8008a40 <HAL_ADCEx_MultiModeStop_DMA>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	e755      	b.n	8004bc0 <SendWSPR+0x38>
						LED_GREEN_ON;
 8004d14:	f005 fdd8 	bl	800a8c8 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004d18:	f002 fd2c 	bl	8007774 <HAL_GetTick>
 8004d1c:	682e      	ldr	r6, [r5, #0]
 8004d1e:	4603      	mov	r3, r0
						LED_GREEN_ON;
 8004d20:	2201      	movs	r2, #1
 8004d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d26:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004d2a:	1b9b      	subs	r3, r3, r6
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d3f1      	bcc.n	8004d14 <SendWSPR+0x18c>
 8004d30:	e7dc      	b.n	8004cec <SendWSPR+0x164>
				Error_Handler();
 8004d32:	f000 fe87 	bl	8005a44 <Error_Handler>
 8004d36:	e79a      	b.n	8004c6e <SendWSPR+0xe6>
 8004d38:	c0000000 	.word	0xc0000000
 8004d3c:	415adb21 	.word	0x415adb21
 8004d40:	24000654 	.word	0x24000654
 8004d44:	08018774 	.word	0x08018774
 8004d48:	4ad6d90e 	.word	0x4ad6d90e
 8004d4c:	24006178 	.word	0x24006178
 8004d50:	24006184 	.word	0x24006184
 8004d54:	24005158 	.word	0x24005158
 8004d58:	2400514c 	.word	0x2400514c
 8004d5c:	24007322 	.word	0x24007322
 8004d60:	58020400 	.word	0x58020400
 8004d64:	58020000 	.word	0x58020000
 8004d68:	288df0cb 	.word	0x288df0cb
 8004d6c:	2400020c 	.word	0x2400020c
 8004d70:	24005164 	.word	0x24005164
 8004d74:	24007340 	.word	0x24007340
 8004d78:	24000650 	.word	0x24000650
 8004d7c:	aaaaaaab 	.word	0xaaaaaaab
 8004d80:	240061fc 	.word	0x240061fc
 8004d84:	240061f8 	.word	0x240061f8
 8004d88:	24007323 	.word	0x24007323

08004d8c <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 8004d8c:	4b75      	ldr	r3, [pc, #468]	; (8004f64 <DisplayStatus.part.0+0x1d8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
		switch(Fstep)
 8004d98:	f000 80db 	beq.w	8004f52 <DisplayStatus.part.0+0x1c6>
 8004d9c:	d81f      	bhi.n	8004dde <DisplayStatus.part.0+0x52>
 8004d9e:	2b0a      	cmp	r3, #10
 8004da0:	f000 80c9 	beq.w	8004f36 <DisplayStatus.part.0+0x1aa>
 8004da4:	2b64      	cmp	r3, #100	; 0x64
 8004da6:	d110      	bne.n	8004dca <DisplayStatus.part.0+0x3e>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 8004da8:	4b6f      	ldr	r3, [pc, #444]	; (8004f68 <DisplayStatus.part.0+0x1dc>)
 8004daa:	4a70      	ldr	r2, [pc, #448]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004dac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	8091      	strh	r1, [r2, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 8004db4:	4b6e      	ldr	r3, [pc, #440]	; (8004f70 <DisplayStatus.part.0+0x1e4>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	f200 80d1 	bhi.w	8004f60 <DisplayStatus.part.0+0x1d4>
 8004dbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004dc2:	00ae      	.short	0x00ae
 8004dc4:	008800aa 	.word	0x008800aa
 8004dc8:	0029      	.short	0x0029
		switch(Fstep)
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f040 80ad 	bne.w	8004f2a <DisplayStatus.part.0+0x19e>
		case 1:			strcpy(StringStep,"   1 "); break;
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <DisplayStatus.part.0+0x1e8>)
 8004dd2:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dd8:	6010      	str	r0, [r2, #0]
 8004dda:	8091      	strh	r1, [r2, #4]
 8004ddc:	e7ea      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		switch(Fstep)
 8004dde:	f242 7210 	movw	r2, #10000	; 0x2710
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f000 80ae 	beq.w	8004f44 <DisplayStatus.part.0+0x1b8>
 8004de8:	4a63      	ldr	r2, [pc, #396]	; (8004f78 <DisplayStatus.part.0+0x1ec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d106      	bne.n	8004dfc <DisplayStatus.part.0+0x70>
		case 100000: 	strcpy(StringStep," 100K"); break;
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <DisplayStatus.part.0+0x1f0>)
 8004df0:	4a5e      	ldr	r2, [pc, #376]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004df6:	6010      	str	r0, [r2, #0]
 8004df8:	8091      	strh	r1, [r2, #4]
 8004dfa:	e7db      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		switch(Fstep)
 8004dfc:	f242 3228 	movw	r2, #9000	; 0x2328
 8004e00:	4293      	cmp	r3, r2
 8004e02:	f040 8092 	bne.w	8004f2a <DisplayStatus.part.0+0x19e>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 8004e06:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <DisplayStatus.part.0+0x1f4>)
 8004e08:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e0e:	6010      	str	r0, [r2, #0]
 8004e10:	8091      	strh	r1, [r2, #4]
 8004e12:	e7cf      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 8004e14:	4b5b      	ldr	r3, [pc, #364]	; (8004f84 <DisplayStatus.part.0+0x1f8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4e5b      	ldr	r6, [pc, #364]	; (8004f88 <DisplayStatus.part.0+0x1fc>)
 8004e1a:	0c19      	lsrs	r1, r3, #16
 8004e1c:	8033      	strh	r3, [r6, #0]
 8004e1e:	70b1      	strb	r1, [r6, #2]
		}
		switch (CurrentAGC)
 8004e20:	4b5a      	ldr	r3, [pc, #360]	; (8004f8c <DisplayStatus.part.0+0x200>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <DisplayStatus.part.0+0x154>
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d17c      	bne.n	8004f26 <DisplayStatus.part.0+0x19a>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 8004e2c:	4b58      	ldr	r3, [pc, #352]	; (8004f90 <DisplayStatus.part.0+0x204>)
 8004e2e:	4d59      	ldr	r5, [pc, #356]	; (8004f94 <DisplayStatus.part.0+0x208>)
 8004e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e34:	6028      	str	r0, [r5, #0]
 8004e36:	7129      	strb	r1, [r5, #4]
		}
		switch (CurrentBW)
 8004e38:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <DisplayStatus.part.0+0x20c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d059      	beq.n	8004ef4 <DisplayStatus.part.0+0x168>
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d16e      	bne.n	8004f22 <DisplayStatus.part.0+0x196>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 8004e44:	4b55      	ldr	r3, [pc, #340]	; (8004f9c <DisplayStatus.part.0+0x210>)
 8004e46:	4c56      	ldr	r4, [pc, #344]	; (8004fa0 <DisplayStatus.part.0+0x214>)
 8004e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e4c:	6020      	str	r0, [r4, #0]
 8004e4e:	7121      	strb	r1, [r4, #4]
		}
		switch (TxPowerOut)
 8004e50:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <DisplayStatus.part.0+0x218>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d059      	beq.n	8004f0e <DisplayStatus.part.0+0x182>
 8004e5a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d065      	beq.n	8004f2e <DisplayStatus.part.0+0x1a2>
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <DisplayStatus.part.0+0x21c>)
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 8004e68:	bf04      	itt	eq
 8004e6a:	4950      	ldreq	r1, [pc, #320]	; (8004fac <DisplayStatus.part.0+0x220>)
 8004e6c:	6019      	streq	r1, [r3, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, RXVolume);
 8004e6e:	9306      	str	r3, [sp, #24]
 8004e70:	4b4f      	ldr	r3, [pc, #316]	; (8004fb0 <DisplayStatus.part.0+0x224>)
 8004e72:	9503      	str	r5, [sp, #12]
 8004e74:	9402      	str	r4, [sp, #8]
 8004e76:	ed93 7a00 	vldr	s14, [r3]
 8004e7a:	4b4e      	ldr	r3, [pc, #312]	; (8004fb4 <DisplayStatus.part.0+0x228>)
 8004e7c:	9601      	str	r6, [sp, #4]
 8004e7e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	484c      	ldr	r0, [pc, #304]	; (8004fb8 <DisplayStatus.part.0+0x22c>)
 8004e86:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004fbc <DisplayStatus.part.0+0x230>
 8004e8a:	6804      	ldr	r4, [r0, #0]
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <DisplayStatus.part.0+0x234>)
 8004e90:	9200      	str	r2, [sp, #0]
 8004e92:	9405      	str	r4, [sp, #20]
 8004e94:	494b      	ldr	r1, [pc, #300]	; (8004fc4 <DisplayStatus.part.0+0x238>)
 8004e96:	484c      	ldr	r0, [pc, #304]	; (8004fc8 <DisplayStatus.part.0+0x23c>)
 8004e98:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004e9c:	edd3 7a00 	vldr	s15, [r3]
 8004ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ea4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ea8:	ec53 2b17 	vmov	r2, r3, d7
 8004eac:	f00d f936 	bl	801211c <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8004eb0:	4845      	ldr	r0, [pc, #276]	; (8004fc8 <DisplayStatus.part.0+0x23c>)
 8004eb2:	f7fb fa75 	bl	80003a0 <strlen>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 8004eb6:	4944      	ldr	r1, [pc, #272]	; (8004fc8 <DisplayStatus.part.0+0x23c>)
 8004eb8:	4602      	mov	r2, r0
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f00a fb7a 	bl	800f5b4 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f00a fb33 	bl	800f52c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 8004ec6:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 8004ec8:	b00a      	add	sp, #40	; 0x28
 8004eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8004ece:	f002 bc57 	b.w	8007780 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 8004ed2:	4b3e      	ldr	r3, [pc, #248]	; (8004fcc <DisplayStatus.part.0+0x240>)
 8004ed4:	4e2c      	ldr	r6, [pc, #176]	; (8004f88 <DisplayStatus.part.0+0x1fc>)
 8004ed6:	6033      	str	r3, [r6, #0]
		switch (CurrentAGC)
 8004ed8:	4b2c      	ldr	r3, [pc, #176]	; (8004f8c <DisplayStatus.part.0+0x200>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1a3      	bne.n	8004e28 <DisplayStatus.part.0+0x9c>
		case Fast: strcpy(StringAGC,"Fast"); break;
 8004ee0:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <DisplayStatus.part.0+0x244>)
 8004ee2:	4d2c      	ldr	r5, [pc, #176]	; (8004f94 <DisplayStatus.part.0+0x208>)
 8004ee4:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (CurrentBW)
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <DisplayStatus.part.0+0x20c>)
		case Fast: strcpy(StringAGC,"Fast"); break;
 8004eea:	6028      	str	r0, [r5, #0]
		switch (CurrentBW)
 8004eec:	781b      	ldrb	r3, [r3, #0]
		case Fast: strcpy(StringAGC,"Fast"); break;
 8004eee:	7129      	strb	r1, [r5, #4]
		switch (CurrentBW)
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1a5      	bne.n	8004e40 <DisplayStatus.part.0+0xb4>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004ef4:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <DisplayStatus.part.0+0x248>)
 8004ef6:	4c2a      	ldr	r4, [pc, #168]	; (8004fa0 <DisplayStatus.part.0+0x214>)
 8004ef8:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (TxPowerOut)
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <DisplayStatus.part.0+0x218>)
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004efe:	80a1      	strh	r1, [r4, #4]
 8004f00:	0c09      	lsrs	r1, r1, #16
		switch (TxPowerOut)
 8004f02:	681b      	ldr	r3, [r3, #0]
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004f04:	6020      	str	r0, [r4, #0]
		switch (TxPowerOut)
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004f0a:	71a1      	strb	r1, [r4, #6]
		switch (TxPowerOut)
 8004f0c:	d1a5      	bne.n	8004e5a <DisplayStatus.part.0+0xce>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <DisplayStatus.part.0+0x21c>)
 8004f10:	4931      	ldr	r1, [pc, #196]	; (8004fd8 <DisplayStatus.part.0+0x24c>)
 8004f12:	6019      	str	r1, [r3, #0]
 8004f14:	e7ab      	b.n	8004e6e <DisplayStatus.part.0+0xe2>
		case LSB: strcpy(StringMode,"LSB"); break;
 8004f16:	4e1c      	ldr	r6, [pc, #112]	; (8004f88 <DisplayStatus.part.0+0x1fc>)
 8004f18:	4b30      	ldr	r3, [pc, #192]	; (8004fdc <DisplayStatus.part.0+0x250>)
 8004f1a:	6033      	str	r3, [r6, #0]
 8004f1c:	e780      	b.n	8004e20 <DisplayStatus.part.0+0x94>
		case AM: strcpy(StringMode,"AM"); break;
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <DisplayStatus.part.0+0x254>)
 8004f20:	e779      	b.n	8004e16 <DisplayStatus.part.0+0x8a>
 8004f22:	4c1f      	ldr	r4, [pc, #124]	; (8004fa0 <DisplayStatus.part.0+0x214>)
 8004f24:	e794      	b.n	8004e50 <DisplayStatus.part.0+0xc4>
 8004f26:	4d1b      	ldr	r5, [pc, #108]	; (8004f94 <DisplayStatus.part.0+0x208>)
 8004f28:	e786      	b.n	8004e38 <DisplayStatus.part.0+0xac>
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004f2c:	e742      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <DisplayStatus.part.0+0x21c>)
 8004f30:	492c      	ldr	r1, [pc, #176]	; (8004fe4 <DisplayStatus.part.0+0x258>)
 8004f32:	6019      	str	r1, [r3, #0]
 8004f34:	e79b      	b.n	8004e6e <DisplayStatus.part.0+0xe2>
		case 10: 		strcpy(StringStep,"  10 "); break;
 8004f36:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <DisplayStatus.part.0+0x25c>)
 8004f38:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f3e:	6010      	str	r0, [r2, #0]
 8004f40:	8091      	strh	r1, [r2, #4]
 8004f42:	e737      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		case 10000:		strcpy(StringStep,"  10K"); break;
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <DisplayStatus.part.0+0x260>)
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f4c:	6010      	str	r0, [r2, #0]
 8004f4e:	8091      	strh	r1, [r2, #4]
 8004f50:	e730      	b.n	8004db4 <DisplayStatus.part.0+0x28>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 8004f52:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <DisplayStatus.part.0+0x264>)
 8004f54:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <DisplayStatus.part.0+0x1e0>)
 8004f56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	8091      	strh	r1, [r2, #4]
 8004f5e:	e729      	b.n	8004db4 <DisplayStatus.part.0+0x28>
 8004f60:	4e09      	ldr	r6, [pc, #36]	; (8004f88 <DisplayStatus.part.0+0x1fc>)
 8004f62:	e75d      	b.n	8004e20 <DisplayStatus.part.0+0x94>
 8004f64:	24005160 	.word	0x24005160
 8004f68:	08018938 	.word	0x08018938
 8004f6c:	240061e0 	.word	0x240061e0
 8004f70:	24000f38 	.word	0x24000f38
 8004f74:	08018928 	.word	0x08018928
 8004f78:	000186a0 	.word	0x000186a0
 8004f7c:	08018958 	.word	0x08018958
 8004f80:	08018948 	.word	0x08018948
 8004f84:	08018964 	.word	0x08018964
 8004f88:	240061d8 	.word	0x240061d8
 8004f8c:	24000f36 	.word	0x24000f36
 8004f90:	08018970 	.word	0x08018970
 8004f94:	240061d0 	.word	0x240061d0
 8004f98:	24000f37 	.word	0x24000f37
 8004f9c:	08018980 	.word	0x08018980
 8004fa0:	240061f0 	.word	0x240061f0
 8004fa4:	24006210 	.word	0x24006210
 8004fa8:	240061e8 	.word	0x240061e8
 8004fac:	00776f4c 	.word	0x00776f4c
 8004fb0:	240061a4 	.word	0x240061a4
 8004fb4:	24006204 	.word	0x24006204
 8004fb8:	2400ac88 	.word	0x2400ac88
 8004fbc:	3a83126f 	.word	0x3a83126f
 8004fc0:	24006178 	.word	0x24006178
 8004fc4:	08018988 	.word	0x08018988
 8004fc8:	2400631c 	.word	0x2400631c
 8004fcc:	00425355 	.word	0x00425355
 8004fd0:	08018968 	.word	0x08018968
 8004fd4:	08018978 	.word	0x08018978
 8004fd8:	0064694d 	.word	0x0064694d
 8004fdc:	0042534c 	.word	0x0042534c
 8004fe0:	08018960 	.word	0x08018960
 8004fe4:	0078614d 	.word	0x0078614d
 8004fe8:	08018930 	.word	0x08018930
 8004fec:	08018950 	.word	0x08018950
 8004ff0:	08018940 	.word	0x08018940

08004ff4 <tud_mount_cb>:
}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop

08004ff8 <tud_umount_cb>:
}
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <tud_suspend_cb>:
}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop

08005000 <tud_resume_cb>:
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <tud_audio_get_req_entity_cb>:
{
 8005004:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8005006:	794d      	ldrb	r5, [r1, #5]
{
 8005008:	b08f      	sub	sp, #60	; 0x3c
 800500a:	460c      	mov	r4, r1
 800500c:	4606      	mov	r6, r0
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800500e:	2d04      	cmp	r5, #4
 8005010:	d004      	beq.n	800501c <tud_audio_get_req_entity_cb+0x18>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8005012:	2d02      	cmp	r5, #2
 8005014:	d010      	beq.n	8005038 <tud_audio_get_req_entity_cb+0x34>
	return false;
 8005016:	2000      	movs	r0, #0
}
 8005018:	b00f      	add	sp, #60	; 0x3c
 800501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800501c:	78cf      	ldrb	r7, [r1, #3]
 800501e:	2f01      	cmp	r7, #1
 8005020:	d01e      	beq.n	8005060 <tud_audio_get_req_entity_cb+0x5c>
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8005022:	2f02      	cmp	r7, #2
 8005024:	d1f7      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
 8005026:	784b      	ldrb	r3, [r1, #1]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d1f4      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800502c:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 800502e:	f88d 3004 	strb.w	r3, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8005032:	f00a f995 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 8005036:	e7ef      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 8005038:	78cb      	ldrb	r3, [r1, #3]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d04c      	beq.n	80050d8 <tud_audio_get_req_entity_cb+0xd4>
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 800503e:	2b02      	cmp	r3, #2
 8005040:	d1e9      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8005042:	784a      	ldrb	r2, [r1, #1]
 8005044:	2a02      	cmp	r2, #2
 8005046:	d05b      	beq.n	8005100 <tud_audio_get_req_entity_cb+0xfc>
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8005048:	2a01      	cmp	r2, #1
 800504a:	d1e4      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 800504c:	788c      	ldrb	r4, [r1, #2]
 800504e:	4a32      	ldr	r2, [pc, #200]	; (8005118 <tud_audio_get_req_entity_cb+0x114>)
 8005050:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8005054:	aa01      	add	r2, sp, #4
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8005056:	f8ad 4004 	strh.w	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 800505a:	f00a f981 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 800505e:	e7db      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8005060:	784b      	ldrb	r3, [r1, #1]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d044      	beq.n	80050f0 <tud_audio_get_req_entity_cb+0xec>
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8005066:	2b02      	cmp	r3, #2
 8005068:	d1d5      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 800506a:	222a      	movs	r2, #42	; 0x2a
 800506c:	2100      	movs	r1, #0
 800506e:	a803      	add	r0, sp, #12
 8005070:	f00c fa42 	bl	80114f8 <memset>
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8005074:	2300      	movs	r3, #0
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8005076:	4621      	mov	r1, r4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8005078:	f64a 4444 	movw	r4, #44100	; 0xac44
 800507c:	f645 0288 	movw	r2, #22664	; 0x5888
 8005080:	f8ad 3008 	strh.w	r3, [sp, #8]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8005084:	f8ad 300c 	strh.w	r3, [sp, #12]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8005088:	4630      	mov	r0, r6
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800508a:	f8ad 3014 	strh.w	r3, [sp, #20]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800508e:	f8ad 3018 	strh.w	r3, [sp, #24]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8005092:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
 8005096:	f8ad 4006 	strh.w	r4, [sp, #6]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800509a:	f8ad 400a 	strh.w	r4, [sp, #10]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800509e:	f64b 3480 	movw	r4, #48000	; 0xbb80
 80050a2:	f8ad 201e 	strh.w	r2, [sp, #30]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80050a6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80050aa:	aa01      	add	r2, sp, #4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80050ac:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80050b0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80050b4:	2332      	movs	r3, #50	; 0x32
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80050b6:	f8ad 5004 	strh.w	r5, [sp, #4]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80050ba:	f8ad 7020 	strh.w	r7, [sp, #32]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80050be:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80050c2:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80050c6:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80050ca:	f8ad 4012 	strh.w	r4, [sp, #18]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80050ce:	f8ad 4016 	strh.w	r4, [sp, #22]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80050d2:	f00a f945 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 80050d6:	e79f      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80050d8:	784b      	ldrb	r3, [r1, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d19b      	bne.n	8005016 <tud_audio_get_req_entity_cb+0x12>
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 80050de:	788a      	ldrb	r2, [r1, #2]
 80050e0:	4c0e      	ldr	r4, [pc, #56]	; (800511c <tud_audio_get_req_entity_cb+0x118>)
 80050e2:	5ca4      	ldrb	r4, [r4, r2]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 80050e4:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 80050e6:	f88d 4004 	strb.w	r4, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 80050ea:	f00a f939 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 80050ee:	e793      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 80050f0:	4c0b      	ldr	r4, [pc, #44]	; (8005120 <tud_audio_get_req_entity_cb+0x11c>)
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 80050f2:	462b      	mov	r3, r5
 80050f4:	aa01      	add	r2, sp, #4
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 80050f6:	6824      	ldr	r4, [r4, #0]
 80050f8:	9401      	str	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 80050fa:	f00a f931 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 80050fe:	e78b      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
			audio_control_range_2_n_t(1) range_vol = {
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <tud_audio_get_req_entity_cb+0x120>)
 8005102:	aa01      	add	r2, sp, #4
 8005104:	e893 0003 	ldmia.w	r3, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 8005108:	2308      	movs	r3, #8
			audio_control_range_2_n_t(1) range_vol = {
 800510a:	e882 0003 	stmia.w	r2, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800510e:	4621      	mov	r1, r4
 8005110:	4630      	mov	r0, r6
 8005112:	f00a f925 	bl	800f360 <tud_audio_buffer_and_schedule_control_xfer>
 8005116:	e77f      	b.n	8005018 <tud_audio_get_req_entity_cb+0x14>
 8005118:	2400c768 	.word	0x2400c768
 800511c:	2400afc0 	.word	0x2400afc0
 8005120:	24000314 	.word	0x24000314
 8005124:	08015830 	.word	0x08015830

08005128 <tud_audio_set_req_entity_cb>:
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8005128:	794b      	ldrb	r3, [r1, #5]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d010      	beq.n	8005150 <tud_audio_set_req_entity_cb+0x28>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800512e:	2b04      	cmp	r3, #4
 8005130:	d001      	beq.n	8005136 <tud_audio_set_req_entity_cb+0xe>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8005132:	2000      	movs	r0, #0
}
 8005134:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8005136:	784b      	ldrb	r3, [r1, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d1fa      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800513c:	78c8      	ldrb	r0, [r1, #3]
 800513e:	2801      	cmp	r0, #1
 8005140:	d1f7      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8005142:	88cb      	ldrh	r3, [r1, #6]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d1f4      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <tud_audio_set_req_entity_cb+0x60>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	601a      	str	r2, [r3, #0]
		return true;
 800514e:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8005150:	7848      	ldrb	r0, [r1, #1]
 8005152:	2801      	cmp	r0, #1
 8005154:	d1ed      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 8005156:	78cb      	ldrb	r3, [r1, #3]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d00b      	beq.n	8005174 <tud_audio_set_req_entity_cb+0x4c>
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 800515c:	2b02      	cmp	r3, #2
 800515e:	d1e8      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 8005160:	88cb      	ldrh	r3, [r1, #6]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d1e5      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 8005166:	f9b2 c000 	ldrsh.w	ip, [r2]
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <tud_audio_set_req_entity_cb+0x64>)
 800516c:	788a      	ldrb	r2, [r1, #2]
 800516e:	f823 c012 	strh.w	ip, [r3, r2, lsl #1]
		return true;
 8005172:	4770      	bx	lr
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8005174:	88c8      	ldrh	r0, [r1, #6]
 8005176:	2801      	cmp	r0, #1
 8005178:	d1db      	bne.n	8005132 <tud_audio_set_req_entity_cb+0xa>
		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 800517a:	f992 c000 	ldrsb.w	ip, [r2]
 800517e:	788b      	ldrb	r3, [r1, #2]
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <tud_audio_set_req_entity_cb+0x68>)
 8005182:	f802 c003 	strb.w	ip, [r2, r3]
		return true;
 8005186:	4770      	bx	lr
 8005188:	24000314 	.word	0x24000314
 800518c:	2400c768 	.word	0x2400c768
 8005190:	2400afc0 	.word	0x2400afc0

08005194 <tud_audio_set_itf_close_EP_cb>:
}
 8005194:	2001      	movs	r0, #1
 8005196:	4770      	bx	lr

08005198 <tud_audio_set_itf_cb>:
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8005198:	884b      	ldrh	r3, [r1, #2]
	spk_data_size = 0;
 800519a:	2000      	movs	r0, #0
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <tud_audio_set_itf_cb+0x1c>)

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	6010      	str	r0, [r2, #0]
	if(alt != 0)
 80051a2:	b12b      	cbz	r3, 80051b0 <tud_audio_set_itf_cb+0x18>
		current_resolution = resolutions_per_format[alt-1];
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <tud_audio_set_itf_cb+0x20>)
 80051a6:	4905      	ldr	r1, [pc, #20]	; (80051bc <tud_audio_set_itf_cb+0x24>)
 80051a8:	4413      	add	r3, r2
 80051aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051ae:	700b      	strb	r3, [r1, #0]
}
 80051b0:	2001      	movs	r0, #1
 80051b2:	4770      	bx	lr
 80051b4:	2400b730 	.word	0x2400b730
 80051b8:	08018a2c 	.word	0x08018a2c
 80051bc:	24007b54 	.word	0x24007b54

080051c0 <tud_audio_rx_done_pre_read_cb>:
{
 80051c0:	460a      	mov	r2, r1
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
  return tud_audio_n_read(0, buffer, bufsize);
 80051c2:	2000      	movs	r0, #0
 80051c4:	4904      	ldr	r1, [pc, #16]	; (80051d8 <tud_audio_rx_done_pre_read_cb+0x18>)
 80051c6:	b508      	push	{r3, lr}
 80051c8:	f009 fd6c 	bl	800eca4 <tud_audio_n_read>
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <tud_audio_rx_done_pre_read_cb+0x1c>)
 80051ce:	4602      	mov	r2, r0
}
 80051d0:	2001      	movs	r0, #1
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bd08      	pop	{r3, pc}
 80051d6:	bf00      	nop
 80051d8:	2400b120 	.word	0x2400b120
 80051dc:	2400b730 	.word	0x2400b730

080051e0 <tud_audio_tx_done_pre_load_cb>:
}
 80051e0:	2001      	movs	r0, #1
 80051e2:	4770      	bx	lr

080051e4 <tud_audio_tx_done_post_load_cb>:
{
 80051e4:	b570      	push	{r4, r5, r6, lr}
	int16_t *dst = (int16_t*)mic_buf;
 80051e6:	4c14      	ldr	r4, [pc, #80]	; (8005238 <tud_audio_tx_done_post_load_cb+0x54>)
 80051e8:	4d14      	ldr	r5, [pc, #80]	; (800523c <tud_audio_tx_done_post_load_cb+0x58>)
 80051ea:	f104 0660 	add.w	r6, r4, #96	; 0x60
{
 80051ee:	ed2d 8b02 	vpush	{d8}
		*dst ++ = (int16_t)(20000.0f * sinf((float)(432.0f * 6.28f * AudioCounter++ / 48000))); //sinf is really slow
 80051f2:	eddf 8a13 	vldr	s17, [pc, #76]	; 8005240 <tud_audio_tx_done_post_load_cb+0x5c>
 80051f6:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8005244 <tud_audio_tx_done_post_load_cb+0x60>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	3301      	adds	r3, #1
 8005202:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	ee20 0a28 	vmul.f32	s0, s0, s17
 800520c:	f00f faf0 	bl	80147f0 <sinf>
 8005210:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005214:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005218:	ee10 3a10 	vmov	r3, s0
 800521c:	f824 3b02 	strh.w	r3, [r4], #2
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8005220:	42b4      	cmp	r4, r6
 8005222:	d1ea      	bne.n	80051fa <tud_audio_tx_done_post_load_cb+0x16>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
  return tud_audio_n_write(0, data, len);
 8005224:	2260      	movs	r2, #96	; 0x60
 8005226:	4904      	ldr	r1, [pc, #16]	; (8005238 <tud_audio_tx_done_post_load_cb+0x54>)
 8005228:	2000      	movs	r0, #0
 800522a:	f009 fd47 	bl	800ecbc <tud_audio_n_write>
}
 800522e:	2001      	movs	r0, #1
 8005230:	ecbd 8b02 	vpop	{d8}
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	bf00      	nop
 8005238:	2400ac98 	.word	0x2400ac98
 800523c:	24000708 	.word	0x24000708
 8005240:	3d678185 	.word	0x3d678185
 8005244:	469c4000 	.word	0x469c4000

08005248 <tud_cdc_line_state_cb>:
}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop

0800524c <tud_cdc_rx_cb>:
}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <cdc_task>:
{
 8005250:	b510      	push	{r4, lr}
  return tud_cdc_n_connected(0);
 8005252:	2000      	movs	r0, #0
 8005254:	b090      	sub	sp, #64	; 0x40
 8005256:	f00a f90b 	bl	800f470 <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 800525a:	b130      	cbz	r0, 800526a <cdc_task+0x1a>
		if (SendGreetings && tud_cdc_write_available())
 800525c:	4c13      	ldr	r4, [pc, #76]	; (80052ac <cdc_task+0x5c>)
 800525e:	7823      	ldrb	r3, [r4, #0]
 8005260:	b9a3      	cbnz	r3, 800528c <cdc_task+0x3c>
  return tud_cdc_n_available(0);
 8005262:	2000      	movs	r0, #0
 8005264:	f00a f91a 	bl	800f49c <tud_cdc_n_available>
		if ( tud_cdc_available() )
 8005268:	b908      	cbnz	r0, 800526e <cdc_task+0x1e>
}
 800526a:	b010      	add	sp, #64	; 0x40
 800526c:	bd10      	pop	{r4, pc}
  return tud_cdc_n_read(0, buffer, bufsize);
 800526e:	4669      	mov	r1, sp
 8005270:	2240      	movs	r2, #64	; 0x40
 8005272:	2000      	movs	r0, #0
 8005274:	f00a f91e 	bl	800f4b4 <tud_cdc_n_read>
  return tud_cdc_n_write(0, buffer, bufsize);
 8005278:	4669      	mov	r1, sp
  return tud_cdc_n_read(0, buffer, bufsize);
 800527a:	4602      	mov	r2, r0
  return tud_cdc_n_write(0, buffer, bufsize);
 800527c:	2000      	movs	r0, #0
 800527e:	f00a f999 	bl	800f5b4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8005282:	2000      	movs	r0, #0
 8005284:	f00a f952 	bl	800f52c <tud_cdc_n_write_flush>
 8005288:	b010      	add	sp, #64	; 0x40
 800528a:	bd10      	pop	{r4, pc}
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
 800528c:	2000      	movs	r0, #0
 800528e:	f00a f9ad 	bl	800f5ec <tud_cdc_n_write_available>
		if (SendGreetings && tud_cdc_write_available())
 8005292:	2800      	cmp	r0, #0
 8005294:	d0e5      	beq.n	8005262 <cdc_task+0x12>
  return tud_cdc_n_write(0, buffer, bufsize);
 8005296:	2208      	movs	r2, #8
 8005298:	4905      	ldr	r1, [pc, #20]	; (80052b0 <cdc_task+0x60>)
 800529a:	2000      	movs	r0, #0
 800529c:	f00a f98a 	bl	800f5b4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f00a f943 	bl	800f52c <tud_cdc_n_write_flush>
			SendGreetings = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	7023      	strb	r3, [r4, #0]
 80052aa:	e7da      	b.n	8005262 <cdc_task+0x12>
 80052ac:	24000310 	.word	0x24000310
 80052b0:	080189e4 	.word	0x080189e4

080052b4 <HAL_ADC_ConvCpltCallback>:
{
 80052b4:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80052b8:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80052bc:	490a      	ldr	r1, [pc, #40]	; (80052e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80052be:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80052c2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80052c6:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d1fa      	bne.n	80052c2 <HAL_ADC_ConvCpltCallback+0xe>
 80052cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80052d0:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 80052d4:	2001      	movs	r0, #1
 80052d6:	f7fd fb87 	bl	80029e8 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 80052da:	4b04      	ldr	r3, [pc, #16]	; (80052ec <HAL_ADC_ConvCpltCallback+0x38>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
}
 80052e0:	bd08      	pop	{r3, pc}
 80052e2:	bf00      	nop
 80052e4:	24007740 	.word	0x24007740
 80052e8:	e000ed00 	.word	0xe000ed00
 80052ec:	2400c766 	.word	0x2400c766

080052f0 <HAL_ADC_ConvHalfCpltCallback>:
{
 80052f0:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80052f4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80052f8:	490a      	ldr	r1, [pc, #40]	; (8005324 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80052fa:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80052fe:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005302:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8005304:	4293      	cmp	r3, r2
 8005306:	d1fa      	bne.n	80052fe <HAL_ADC_ConvHalfCpltCallback+0xe>
 8005308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800530c:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8005310:	2000      	movs	r0, #0
 8005312:	f7fd fb69 	bl	80029e8 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
}
 800531c:	bd08      	pop	{r3, pc}
 800531e:	bf00      	nop
 8005320:	24007340 	.word	0x24007340
 8005324:	e000ed00 	.word	0xe000ed00
 8005328:	2400c766 	.word	0x2400c766

0800532c <HAL_DAC_ConvCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[BSIZE];
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 800532e:	4a02      	ldr	r2, [pc, #8]	; (8005338 <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	4770      	bx	lr
 8005334:	2400731c 	.word	0x2400731c
 8005338:	24000b20 	.word	0x24000b20

0800533c <HAL_DAC_ConvHalfCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[0];
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 800533e:	4a02      	ldr	r2, [pc, #8]	; (8005348 <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	4770      	bx	lr
 8005344:	2400731c 	.word	0x2400731c
 8005348:	24000720 	.word	0x24000720

0800534c <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800534c:	4907      	ldr	r1, [pc, #28]	; (800536c <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 800534e:	2002      	movs	r0, #2
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8005352:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8005354:	4a07      	ldr	r2, [pc, #28]	; (8005374 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 8005356:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8005358:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800535a:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800535c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005360:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8005362:	6853      	ldr	r3, [r2, #4]
 8005364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005368:	6053      	str	r3, [r2, #4]
}
 800536a:	4770      	bx	lr
 800536c:	2400a360 	.word	0x2400a360
 8005370:	24006192 	.word	0x24006192
 8005374:	2400a3c4 	.word	0x2400a3c4

08005378 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fod, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 800537c:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 800537e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8005382:	4aab      	ldr	r2, [pc, #684]	; (8005630 <SetWSPRPLLCoeff+0x2b8>)
{
 8005384:	ed2d 8b0c 	vpush	{d8-d13}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8005388:	f20f 2b94 	addw	fp, pc, #660	; 0x294
 800538c:	e9db ab00 	ldrd	sl, fp, [fp]
{
 8005390:	b091      	sub	sp, #68	; 0x44
	LastTXFreq = (float)TXFreq;
 8005392:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8005396:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	for (i = 0; i < 4; i++) {
 800539a:	9307      	str	r3, [sp, #28]
 800539c:	9b07      	ldr	r3, [sp, #28]
{
 800539e:	9000      	str	r0, [sp, #0]
	for (i = 0; i < 4; i++) {
 80053a0:	2b03      	cmp	r3, #3
{
 80053a2:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 4; i++) {
 80053a4:	f200 80d3 	bhi.w	800554e <SetWSPRPLLCoeff+0x1d6>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 80053a8:	4ba2      	ldr	r3, [pc, #648]	; (8005634 <SetWSPRPLLCoeff+0x2bc>)
 80053aa:	eeb0 8b40 	vmov.f64	d8, d0
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80053ae:	ed9f caa2 	vldr	s24, [pc, #648]	; 8005638 <SetWSPRPLLCoeff+0x2c0>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 80053b2:	2501      	movs	r5, #1
							&& ((XTalFreq * n / m) > 150000000.0)
 80053b4:	eddf aaa1 	vldr	s21, [pc, #644]	; 800563c <SetWSPRPLLCoeff+0x2c4>
					OutF = XTalFreq * n / m / p / od;
 80053b8:	ed93 aa00 	vldr	s20, [r3]
							&& ((XTalFreq * n / m) < 960000000.0)) {
 80053bc:	eddf baa0 	vldr	s23, [pc, #640]	; 8005640 <SetWSPRPLLCoeff+0x2c8>
 80053c0:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800564c <SetWSPRPLLCoeff+0x2d4>
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 80053c4:	ed9f 9b98 	vldr	d9, [pc, #608]	; 8005628 <SetWSPRPLLCoeff+0x2b0>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80053c8:	ed9d 7a07 	vldr	s14, [sp, #28]
 80053cc:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 80053d0:	2402      	movs	r4, #2
			for (n = 2; n <= 512; n++) //was 1
 80053d2:	f240 2601 	movw	r6, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80053d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80053da:	ee27 7a0c 	vmul.f32	s14, s14, s24
 80053de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80053e2:	ee37 7b08 	vadd.f64	d7, d7, d8
 80053e6:	ed8d 7b08 	vstr	d7, [sp, #32]
		MinDiff = 999999999;
 80053ea:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
					OutF = XTalFreq * n / m / p / od;
 80053ee:	ee07 4a90 	vmov	s15, r4
			for (n = 2; n <= 512; n++) //was 1
 80053f2:	2702      	movs	r7, #2
					OutF = XTalFreq * n / m / p / od;
 80053f4:	eef8 dae7 	vcvt.f32.s32	s27, s15
 80053f8:	ee8c baad 	vdiv.f32	s22, s25, s27
 80053fc:	ee07 7a90 	vmov	s15, r7
 8005400:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 8005404:	ee2d da0a 	vmul.f32	s26, s26, s20
							&& ((XTalFreq * n / m) > 150000000.0)
 8005408:	ee6d 7a0b 	vmul.f32	s15, s26, s22
 800540c:	eef4 7a6a 	vcmp.f32	s15, s21
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	dd05      	ble.n	8005422 <SetWSPRPLLCoeff+0xaa>
 8005416:	eef4 7aeb 	vcmpe.f32	s15, s23
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	f100 80b7 	bmi.w	8005590 <SetWSPRPLLCoeff+0x218>
				for (p = 2; p <= 128; p += 2) {
 8005422:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	3302      	adds	r3, #2
 800542a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800542e:	ee67 7aad 	vmul.f32	s15, s15, s27
 8005432:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 8005436:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800543a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 800543e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005442:	ed9d 5b0c 	vldr	d5, [sp, #48]	; 0x30
 8005446:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800544a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800544e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	dd03      	ble.n	8005460 <SetWSPRPLLCoeff+0xe8>
 8005458:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800545c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
				for (p = 2; p <= 128; p += 2) {
 8005460:	2b82      	cmp	r3, #130	; 0x82
 8005462:	d1df      	bne.n	8005424 <SetWSPRPLLCoeff+0xac>
			for (n = 2; n <= 512; n++) //was 1
 8005464:	3701      	adds	r7, #1
 8005466:	42b7      	cmp	r7, r6
 8005468:	d1c8      	bne.n	80053fc <SetWSPRPLLCoeff+0x84>
		for (m = 2; m <= 25; m++) //was 64
 800546a:	3401      	adds	r4, #1
 800546c:	2c1a      	cmp	r4, #26
 800546e:	d1be      	bne.n	80053ee <SetWSPRPLLCoeff+0x76>
		if (fn < 511) {
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8005476:	f200 80ce 	bhi.w	8005616 <SetWSPRPLLCoeff+0x29e>
			OutF = XTalFreq * fn / fm / fp / fod;
 800547a:	ed9d 6a03 	vldr	s12, [sp, #12]
 800547e:	eddd 6a02 	vldr	s13, [sp, #8]
 8005482:	eddd 7a04 	vldr	s15, [sp, #16]
 8005486:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800548a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8005496:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800549a:	eddd 7a05 	vldr	s15, [sp, #20]
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80054aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80054ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	eddd 6a02 	vldr	s13, [sp, #8]
 80054b8:	eddd 7a04 	vldr	s15, [sp, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	ee06 3a10 	vmov	s12, r3
 80054ca:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80054ce:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80054d2:	eddd 7a05 	vldr	s15, [sp, #20]
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	ee26 6a0a 	vmul.f32	s12, s12, s20
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80054e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80054ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 80054ee:	ed9d 5b08 	vldr	d5, [sp, #32]
 80054f2:	ed9d 4b0c 	vldr	d4, [sp, #48]	; 0x30
 80054f6:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80054fa:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80054fe:	ee35 5b44 	vsub.f64	d5, d5, d4
 8005502:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005506:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 800550a:	ee27 7b09 	vmul.f64	d7, d7, d9
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 800550e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8005512:	ed8d 7a06 	vstr	s14, [sp, #24]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8005516:	9b06      	ldr	r3, [sp, #24]
 8005518:	4a4a      	ldr	r2, [pc, #296]	; (8005644 <SetWSPRPLLCoeff+0x2cc>)
 800551a:	f003 0307 	and.w	r3, r3, #7
		FracDiv >>= 0x03;
		FracDivCoeff[i] = FracDiv;
 800551e:	9900      	ldr	r1, [sp, #0]
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8005520:	f8a9 3000 	strh.w	r3, [r9]
 8005524:	8013      	strh	r3, [r2, #0]
		FracDiv >>= 0x03;
 8005526:	9b06      	ldr	r3, [sp, #24]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	9306      	str	r3, [sp, #24]
		FracDivCoeff[i] = FracDiv;
 800552c:	9a06      	ldr	r2, [sp, #24]
 800552e:	9b07      	ldr	r3, [sp, #28]
 8005530:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8005534:	9a07      	ldr	r2, [sp, #28]
	for (i = 0; i < 4; i++) {
 8005536:	9b07      	ldr	r3, [sp, #28]
		FracPWMCoeff[i] = FracDivPWM;
 8005538:	9901      	ldr	r1, [sp, #4]
	for (i = 0; i < 4; i++) {
 800553a:	3301      	adds	r3, #1
 800553c:	9307      	str	r3, [sp, #28]
		FracPWMCoeff[i] = FracDivPWM;
 800553e:	f8b9 3000 	ldrh.w	r3, [r9]
 8005542:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 8005546:	9b07      	ldr	r3, [sp, #28]
 8005548:	2b03      	cmp	r3, #3
 800554a:	f67f af3d 	bls.w	80053c8 <SetWSPRPLLCoeff+0x50>
	}
	__HAL_RCC_PLL2_DISABLE();
 800554e:	4a3e      	ldr	r2, [pc, #248]	; (8005648 <SetWSPRPLLCoeff+0x2d0>)
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005556:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8005558:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800555a:	9902      	ldr	r1, [sp, #8]
 800555c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005560:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005564:	6293      	str	r3, [r2, #40]	; 0x28
 8005566:	9903      	ldr	r1, [sp, #12]
 8005568:	9b04      	ldr	r3, [sp, #16]
 800556a:	3901      	subs	r1, #1
 800556c:	3b01      	subs	r3, #1
 800556e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005572:	025b      	lsls	r3, r3, #9
 8005574:	b29b      	uxth	r3, r3
 8005576:	430b      	orrs	r3, r1
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005584:	6013      	str	r3, [r2, #0]
}
 8005586:	b011      	add	sp, #68	; 0x44
 8005588:	ecbd 8b0c 	vpop	{d8-d13}
 800558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (p = 2; p <= 128; p += 2) {
 8005590:	f04f 0802 	mov.w	r8, #2
					OutF = XTalFreq * n / m / p / od;
 8005594:	ee07 8a90 	vmov	s15, r8
 8005598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559c:	ee67 7aad 	vmul.f32	s15, s15, s27
 80055a0:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 80055a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80055a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 80055ac:	ed9d 7b08 	vldr	d7, [sp, #32]
 80055b0:	ed9d 5b0c 	vldr	d5, [sp, #48]	; 0x30
 80055b4:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80055b8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80055bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80055c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c4:	d51d      	bpl.n	8005602 <SetWSPRPLLCoeff+0x28a>
 80055c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80055ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80055ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055da:	dd12      	ble.n	8005602 <SetWSPRPLLCoeff+0x28a>
						MinDiff = abs(OutF - TF);
 80055dc:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80055e0:	ed9d 7b08 	vldr	d7, [sp, #32]
 80055e4:	ee30 0b47 	vsub.f64	d0, d0, d7
 80055e8:	f00b ff16 	bl	8011418 <abs>
 80055ec:	ee07 0a90 	vmov	s15, r0
 80055f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80055f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
						fp = p;
 80055f8:	f8cd 8010 	str.w	r8, [sp, #16]
						fn = n;
 80055fc:	9703      	str	r7, [sp, #12]
						fm = m;
 80055fe:	9402      	str	r4, [sp, #8]
						fod = od;
 8005600:	9505      	str	r5, [sp, #20]
				for (p = 2; p <= 128; p += 2) {
 8005602:	f108 0802 	add.w	r8, r8, #2
 8005606:	f1b8 0f82 	cmp.w	r8, #130	; 0x82
 800560a:	d1c3      	bne.n	8005594 <SetWSPRPLLCoeff+0x21c>
			for (n = 2; n <= 512; n++) //was 1
 800560c:	3701      	adds	r7, #1
 800560e:	42b7      	cmp	r7, r6
 8005610:	f47f aef4 	bne.w	80053fc <SetWSPRPLLCoeff+0x84>
 8005614:	e729      	b.n	800546a <SetWSPRPLLCoeff+0xf2>
			FracDiv = 8191 * 8;
 8005616:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	e77b      	b.n	8005516 <SetWSPRPLLCoeff+0x19e>
 800561e:	bf00      	nop
 8005620:	ff800000 	.word	0xff800000
 8005624:	41cdcd64 	.word	0x41cdcd64
 8005628:	00000000 	.word	0x00000000
 800562c:	40f00000 	.word	0x40f00000
 8005630:	24006184 	.word	0x24006184
 8005634:	24007324 	.word	0x24007324
 8005638:	3fbb7e91 	.word	0x3fbb7e91
 800563c:	4d0f0d18 	.word	0x4d0f0d18
 8005640:	4e64e1c0 	.word	0x4e64e1c0
 8005644:	24006188 	.word	0x24006188
 8005648:	58024400 	.word	0x58024400
 800564c:	24005154 	.word	0x24005154

08005650 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8005650:	4a92      	ldr	r2, [pc, #584]	; (800589c <SetTXPLL+0x24c>)
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8005652:	4b93      	ldr	r3, [pc, #588]	; (80058a0 <SetTXPLL+0x250>)
{
 8005654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	ed2d 8b08 	vpush	{d8-d11}
 800565c:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8005660:	b08a      	sub	sp, #40	; 0x28
 8005662:	eeb0 8a40 	vmov.f32	s16, s0
				OutF = XTalFreq * n / m / p / od;
 8005666:	edd2 9a00 	vldr	s19, [r2]
	for (m = 2; m <= 25; m++) //was 64
 800566a:	2602      	movs	r6, #2
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800566c:	ed9f aa8d 	vldr	s20, [pc, #564]	; 80058a4 <SetTXPLL+0x254>
 8005670:	ed9f ba8d 	vldr	s22, [pc, #564]	; 80058a8 <SetTXPLL+0x258>
		for (n = 2; n <= 512; n++) //was 1
 8005674:	f240 2801 	movw	r8, #513	; 0x201
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8005678:	2701      	movs	r7, #1
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 800567a:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 800567c:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 800567e:	ee07 6a90 	vmov	s15, r6
		for (n = 2; n <= 512; n++) //was 1
 8005682:	2502      	movs	r5, #2
				OutF = XTalFreq * n / m / p / od;
 8005684:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8005688:	eecb aa89 	vdiv.f32	s21, s23, s18
 800568c:	ee07 5a90 	vmov	s15, r5
 8005690:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8005694:	ee68 8aa9 	vmul.f32	s17, s17, s19
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8005698:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800569c:	eef4 7a4a 	vcmp.f32	s15, s20
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	dd05      	ble.n	80056b2 <SetTXPLL+0x62>
 80056a6:	eef4 7acb 	vcmpe.f32	s15, s22
 80056aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ae:	f100 80b8 	bmi.w	8005822 <SetTXPLL+0x1d2>
			for (p = 2; p <= 128; p+=2)
 80056b2:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	3302      	adds	r3, #2
 80056ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056be:	ee67 7a89 	vmul.f32	s15, s15, s18
 80056c2:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80056c6:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80056ca:	eddd 7a02 	vldr	s15, [sp, #8]
 80056ce:	ed9d 7a03 	vldr	s14, [sp, #12]
 80056d2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80056d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	dd00      	ble.n	80056e2 <SetTXPLL+0x92>
 80056e0:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 80056e2:	2b82      	cmp	r3, #130	; 0x82
 80056e4:	d1e6      	bne.n	80056b4 <SetTXPLL+0x64>
		for (n = 2; n <= 512; n++) //was 1
 80056e6:	3501      	adds	r5, #1
 80056e8:	4545      	cmp	r5, r8
 80056ea:	d1cf      	bne.n	800568c <SetTXPLL+0x3c>
	for (m = 2; m <= 25; m++) //was 64
 80056ec:	3601      	adds	r6, #1
 80056ee:	2e1a      	cmp	r6, #26
 80056f0:	d1c5      	bne.n	800567e <SetTXPLL+0x2e>
				}
			}
		}
	}
	if (fn < 511)
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80056f8:	f200 80cc 	bhi.w	8005894 <SetTXPLL+0x244>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 80056fc:	eddd 6a05 	vldr	s13, [sp, #20]
 8005700:	ed9d 7a04 	vldr	s14, [sp, #16]
 8005704:	eddd 7a06 	vldr	s15, [sp, #24]
 8005708:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800570c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005710:	ed9d 6a07 	vldr	s12, [sp, #28]
 8005714:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8005718:	eddf 5a64 	vldr	s11, [pc, #400]	; 80058ac <SetTXPLL+0x25c>
		OutF = XTalFreq * fn / fm / fp / fod;
 800571c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8005720:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8005724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005728:	ee67 7a86 	vmul.f32	s15, s15, s12
 800572c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005730:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8005734:	9b05      	ldr	r3, [sp, #20]
 8005736:	ed9d 7a04 	vldr	s14, [sp, #16]
 800573a:	eddd 7a06 	vldr	s15, [sp, #24]
 800573e:	3301      	adds	r3, #1
 8005740:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005744:	ed9d 6a07 	vldr	s12, [sp, #28]
 8005748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574c:	ee06 3a90 	vmov	s13, r3
 8005750:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8005754:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575c:	ee66 9aa9 	vmul.f32	s19, s13, s19
 8005760:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005764:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 8005768:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 800576c:	eddd 6a02 	vldr	s13, [sp, #8]
 8005770:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005774:	eddd 7a02 	vldr	s15, [sp, #8]
 8005778:	ee38 8a66 	vsub.f32	s16, s16, s13
 800577c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005780:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005784:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578c:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8005790:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8005794:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8005796:	4a46      	ldr	r2, [pc, #280]	; (80058b0 <SetTXPLL+0x260>)
	TXFreqError = MinDiff;
 8005798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579c:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <SetTXPLL+0x264>)
 800579e:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 80057a2:	6813      	ldr	r3, [r2, #0]
 80057a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057a8:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80057aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80057ac:	9904      	ldr	r1, [sp, #16]
 80057ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057b2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80057b6:	6293      	str	r3, [r2, #40]	; 0x28
 80057b8:	9905      	ldr	r1, [sp, #20]
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	3901      	subs	r1, #1
 80057be:	3b01      	subs	r3, #1
 80057c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80057c4:	025b      	lsls	r3, r3, #9
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	430b      	orrs	r3, r1
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d6:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 80057d8:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 80057da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80057e2:	9009      	str	r0, [sp, #36]	; 0x24
 80057e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e6:	2b31      	cmp	r3, #49	; 0x31
 80057e8:	d80b      	bhi.n	8005802 <SetTXPLL+0x1b2>
		i++;
 80057ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ec:	3301      	adds	r3, #1
 80057ee:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 80057f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f2:	3b01      	subs	r3, #1
 80057f4:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	3301      	adds	r3, #1
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
 80057fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fe:	2b31      	cmp	r3, #49	; 0x31
 8005800:	d9f3      	bls.n	80057ea <SetTXPLL+0x19a>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005802:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <SetTXPLL+0x260>)
 8005804:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <SetTXPLL+0x268>)
 8005806:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8005808:	4003      	ands	r3, r0
 800580a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800580e:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8005810:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005812:	f043 0310 	orr.w	r3, r3, #16
 8005816:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8005818:	b00a      	add	sp, #40	; 0x28
 800581a:	ecbd 8b08 	vpop	{d8-d11}
 800581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			for (p = 2; p <= 128; p+=2)
 8005822:	2402      	movs	r4, #2
				OutF = XTalFreq * n / m / p / od;
 8005824:	ee07 4a90 	vmov	s15, r4
 8005828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8005830:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8005834:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8005838:	eddd 7a02 	vldr	s15, [sp, #8]
 800583c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8005840:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	d51a      	bpl.n	8005884 <SetTXPLL+0x234>
 800584e:	eddd 7a02 	vldr	s15, [sp, #8]
 8005852:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	dd11      	ble.n	8005884 <SetTXPLL+0x234>
					MinDiff = abs(OutF - TF);
 8005860:	ed9d 0a02 	vldr	s0, [sp, #8]
 8005864:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005868:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800586c:	f00b fdd4 	bl	8011418 <abs>
 8005870:	ee07 0a90 	vmov	s15, r0
 8005874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005878:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 800587c:	9406      	str	r4, [sp, #24]
					fn = n;
 800587e:	9505      	str	r5, [sp, #20]
					fm = m;
 8005880:	9604      	str	r6, [sp, #16]
					fod = od;
 8005882:	9707      	str	r7, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 8005884:	3402      	adds	r4, #2
 8005886:	2c82      	cmp	r4, #130	; 0x82
 8005888:	d1cc      	bne.n	8005824 <SetTXPLL+0x1d4>
		for (n = 2; n <= 512; n++) //was 1
 800588a:	3501      	adds	r5, #1
 800588c:	4545      	cmp	r5, r8
 800588e:	f47f aefd 	bne.w	800568c <SetTXPLL+0x3c>
 8005892:	e72b      	b.n	80056ec <SetTXPLL+0x9c>
		FracDiv = 8191;
 8005894:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005898:	9308      	str	r3, [sp, #32]
 800589a:	e779      	b.n	8005790 <SetTXPLL+0x140>
 800589c:	24007324 	.word	0x24007324
 80058a0:	4e6e6b28 	.word	0x4e6e6b28
 80058a4:	4d0f0d18 	.word	0x4d0f0d18
 80058a8:	4e64e1c0 	.word	0x4e64e1c0
 80058ac:	46000000 	.word	0x46000000
 80058b0:	58024400 	.word	0x58024400
 80058b4:	24006204 	.word	0x24006204
 80058b8:	ffff0007 	.word	0xffff0007
 80058bc:	00000000 	.word	0x00000000

080058c0 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 80058c0:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c2:	2300      	movs	r3, #0
{
 80058c4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c6:	e9cd 3300 	strd	r3, r3, [sp]
 80058ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058ce:	9304      	str	r3, [sp, #16]

	if (Status)
 80058d0:	b378      	cbz	r0, 8005932 <TXSwitch+0x72>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 80058d2:	4d27      	ldr	r5, [pc, #156]	; (8005970 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 80058d4:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 80058d6:	4c27      	ldr	r4, [pc, #156]	; (8005974 <TXSwitch+0xb4>)
 80058d8:	ed95 0a00 	vldr	s0, [r5]
 80058dc:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80058e0:	4b25      	ldr	r3, [pc, #148]	; (8005978 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 80058e2:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 80058e6:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 80058e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ec:	d11c      	bne.n	8005928 <TXSwitch+0x68>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058ee:	2200      	movs	r2, #0
 80058f0:	2303      	movs	r3, #3
 80058f2:	f44f 7400 	mov.w	r4, #512	; 0x200
 80058f6:	2502      	movs	r5, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f8:	4669      	mov	r1, sp
 80058fa:	4820      	ldr	r0, [pc, #128]	; (800597c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005900:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005902:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005906:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005908:	f004 fe9e 	bl	800a648 <HAL_GPIO_Init>

		RELAY_TX_ON;
 800590c:	2201      	movs	r2, #1
 800590e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005912:	481b      	ldr	r0, [pc, #108]	; (8005980 <TXSwitch+0xc0>)
 8005914:	f004 ffd8 	bl	800a8c8 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005918:	2201      	movs	r2, #1
 800591a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800591e:	4819      	ldr	r0, [pc, #100]	; (8005984 <TXSwitch+0xc4>)
 8005920:	f004 ffd2 	bl	800a8c8 <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 8005924:	b007      	add	sp, #28
 8005926:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8005928:	f7ff fe92 	bl	8005650 <SetTXPLL>
			LastTXFreq = LOfreq;
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	e7dd      	b.n	80058ee <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005932:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8005968 <TXSwitch+0xa8>
 8005936:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005938:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593a:	4669      	mov	r1, sp
 800593c:	480f      	ldr	r0, [pc, #60]	; (800597c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800593e:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005940:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005944:	f004 fe80 	bl	800a648 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005948:	4622      	mov	r2, r4
 800594a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800594e:	480c      	ldr	r0, [pc, #48]	; (8005980 <TXSwitch+0xc0>)
 8005950:	f004 ffba 	bl	800a8c8 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005954:	4622      	mov	r2, r4
 8005956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800595a:	480a      	ldr	r0, [pc, #40]	; (8005984 <TXSwitch+0xc4>)
 800595c:	f004 ffb4 	bl	800a8c8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <TXSwitch+0xb8>)
 8005962:	701c      	strb	r4, [r3, #0]
}
 8005964:	b007      	add	sp, #28
 8005966:	bd30      	pop	{r4, r5, pc}
 8005968:	00000200 	.word	0x00000200
 800596c:	00000001 	.word	0x00000001
 8005970:	24006178 	.word	0x24006178
 8005974:	24006184 	.word	0x24006184
 8005978:	2400620c 	.word	0x2400620c
 800597c:	58020800 	.word	0x58020800
 8005980:	58020c00 	.word	0x58020c00
 8005984:	58020400 	.word	0x58020400

08005988 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8005988:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598a:	2400      	movs	r4, #0
{
 800598c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598e:	e9cd 4400 	strd	r4, r4, [sp]
 8005992:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005996:	9404      	str	r4, [sp, #16]
	if (Status)
 8005998:	b320      	cbz	r0, 80059e4 <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800599a:	4622      	mov	r2, r4
 800599c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059a0:	4822      	ldr	r0, [pc, #136]	; (8005a2c <CarrierEnable+0xa4>)
 80059a2:	f004 ff91 	bl	800a8c8 <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <CarrierEnable+0xa8>)
 80059a8:	4622      	mov	r2, r4
 80059aa:	2110      	movs	r1, #16
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4821      	ldr	r0, [pc, #132]	; (8005a34 <CarrierEnable+0xac>)
 80059b0:	f003 fa92 	bl	8008ed8 <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ba:	4669      	mov	r1, sp
 80059bc:	481e      	ldr	r0, [pc, #120]	; (8005a38 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059be:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059c0:	e9cd 2300 	strd	r2, r3, [sp]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2303      	movs	r3, #3
 80059c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059cc:	f004 fe3c 	bl	800a648 <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 80059d0:	2201      	movs	r2, #1
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 80059d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059d8:	4819      	ldr	r0, [pc, #100]	; (8005a40 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 80059da:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 80059dc:	f004 ff74 	bl	800a8c8 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 80059e0:	b007      	add	sp, #28
 80059e2:	bd30      	pop	{r4, r5, pc}
 80059e4:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80059e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ea:	4810      	ldr	r0, [pc, #64]	; (8005a2c <CarrierEnable+0xa4>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	f004 ff6b 	bl	800a8c8 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 80059f2:	462b      	mov	r3, r5
 80059f4:	462a      	mov	r2, r5
 80059f6:	2110      	movs	r1, #16
 80059f8:	480e      	ldr	r0, [pc, #56]	; (8005a34 <CarrierEnable+0xac>)
 80059fa:	f003 fa6d 	bl	8008ed8 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a02:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 8005a04:	480d      	ldr	r0, [pc, #52]	; (8005a3c <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a06:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8005a08:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a0a:	480b      	ldr	r0, [pc, #44]	; (8005a38 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8005a10:	2300      	movs	r3, #0
 8005a12:	2202      	movs	r2, #2
 8005a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a18:	f004 fe16 	bl	800a648 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a22:	4807      	ldr	r0, [pc, #28]	; (8005a40 <CarrierEnable+0xb8>)
 8005a24:	f004 ff50 	bl	800a8c8 <HAL_GPIO_WritePin>
}
 8005a28:	b007      	add	sp, #28
 8005a2a:	bd30      	pop	{r4, r5, pc}
 8005a2c:	58020c00 	.word	0x58020c00
 8005a30:	24006210 	.word	0x24006210
 8005a34:	2400a42c 	.word	0x2400a42c
 8005a38:	58020800 	.word	0x58020800
 8005a3c:	24006200 	.word	0x24006200
 8005a40:	58020400 	.word	0x58020400

08005a44 <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005a44:	4e09      	ldr	r6, [pc, #36]	; (8005a6c <Error_Handler+0x28>)
{
 8005a46:	4d0a      	ldr	r5, [pc, #40]	; (8005a70 <Error_Handler+0x2c>)
 8005a48:	4c0a      	ldr	r4, [pc, #40]	; (8005a74 <Error_Handler+0x30>)
 8005a4a:	b508      	push	{r3, lr}
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	fb05 f303 	mul.w	r3, r5, r3
 8005a52:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8005a56:	d200      	bcs.n	8005a5a <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005a58:	e7fe      	b.n	8005a58 <Error_Handler+0x14>
			LED_switch();
 8005a5a:	f7fc fe5f 	bl	800271c <LED_switch>
 8005a5e:	6833      	ldr	r3, [r6, #0]
 8005a60:	fb05 f303 	mul.w	r3, r5, r3
 8005a64:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8005a68:	d2f7      	bcs.n	8005a5a <Error_Handler+0x16>
 8005a6a:	e7f5      	b.n	8005a58 <Error_Handler+0x14>
 8005a6c:	2400afc4 	.word	0x2400afc4
 8005a70:	c28f5c29 	.word	0xc28f5c29
 8005a74:	051eb851 	.word	0x051eb851

08005a78 <SystemClock_Config_For_OC>:
{
 8005a78:	b530      	push	{r4, r5, lr}
 8005a7a:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a7c:	224c      	movs	r2, #76	; 0x4c
 8005a7e:	2100      	movs	r1, #0
 8005a80:	a80a      	add	r0, sp, #40	; 0x28
 8005a82:	f00b fd39 	bl	80114f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a86:	2220      	movs	r2, #32
 8005a88:	2100      	movs	r1, #0
 8005a8a:	a802      	add	r0, sp, #8
 8005a8c:	f00b fd34 	bl	80114f8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a90:	22c0      	movs	r2, #192	; 0xc0
 8005a92:	2100      	movs	r1, #0
 8005a94:	a81e      	add	r0, sp, #120	; 0x78
 8005a96:	f00b fd2f 	bl	80114f8 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005a9a:	2002      	movs	r0, #2
 8005a9c:	f005 f846 	bl	800ab2c <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005aa0:	4a49      	ldr	r2, [pc, #292]	; (8005bc8 <SystemClock_Config_For_OC+0x150>)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6991      	ldr	r1, [r2, #24]
 8005aa8:	4b48      	ldr	r3, [pc, #288]	; (8005bcc <SystemClock_Config_For_OC+0x154>)
 8005aaa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005aae:	6191      	str	r1, [r2, #24]
 8005ab0:	6991      	ldr	r1, [r2, #24]
 8005ab2:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8005ab6:	9101      	str	r1, [sp, #4]
 8005ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005aba:	f041 0101 	orr.w	r1, r1, #1
 8005abe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005aca:	6993      	ldr	r3, [r2, #24]
 8005acc:	0499      	lsls	r1, r3, #18
 8005ace:	d5fc      	bpl.n	8005aca <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005ad0:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005ad2:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005ad4:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ad6:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005ad8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	f043 0302 	orr.w	r3, r3, #2
 8005ae2:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ae4:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005ae6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005aea:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8005aec:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8005aee:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005af0:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005af2:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005af4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005af8:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005afa:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005afe:	230a      	movs	r3, #10
 8005b00:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8005b04:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <SystemClock_Config_For_OC+0x15c>)
 8005b06:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <SystemClock_Config_For_OC+0x160>)
 8005b08:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005b0a:	2221      	movs	r2, #33	; 0x21
 8005b0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005b10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b14:	f005 f8ba 	bl	800ac8c <HAL_RCC_OscConfig>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d152      	bne.n	8005bc2 <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b1c:	223f      	movs	r2, #63	; 0x3f
 8005b1e:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b20:	4621      	mov	r1, r4
 8005b22:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b30:	2240      	movs	r2, #64	; 0x40
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b42:	f005 fc89 	bl	800b458 <HAL_RCC_ClockConfig>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d13b      	bne.n	8005bc2 <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8005b4a:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <SystemClock_Config_For_OC+0x164>)
 8005b4c:	2300      	movs	r3, #0
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005b4e:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005b52:	903c      	str	r0, [sp, #240]	; 0xf0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b54:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005b56:	9140      	str	r1, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8005b58:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	2326      	movs	r3, #38	; 0x26
 8005b60:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005b64:	2218      	movs	r2, #24
 8005b66:	2302      	movs	r3, #2
 8005b68:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8005b7c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005b88:	9245      	str	r2, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8005b8a:	2205      	movs	r2, #5
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005b8c:	9347      	str	r3, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8005b94:	2202      	movs	r2, #2
 8005b96:	2308      	movs	r3, #8
 8005b98:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 8005b9c:	2205      	movs	r2, #5
 8005b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba2:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ba6:	f005 ff43 	bl	800ba30 <HAL_RCCEx_PeriphCLKConfig>
 8005baa:	b950      	cbnz	r0, 8005bc2 <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 8005bac:	f004 ffe2 	bl	800ab74 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8005bb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005bb4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f005 fb5b 	bl	800b274 <HAL_RCC_MCOConfig>
}
 8005bbe:	b04f      	add	sp, #316	; 0x13c
 8005bc0:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8005bc2:	f7ff ff3f 	bl	8005a44 <Error_Handler>
 8005bc6:	bf00      	nop
 8005bc8:	58024800 	.word	0x58024800
 8005bcc:	58000400 	.word	0x58000400
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	24007324 	.word	0x24007324
 8005bd8:	4bbebbd3 	.word	0x4bbebbd3
 8005bdc:	000c0042 	.word	0x000c0042

08005be0 <UserInput>:
{
 8005be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 8005be4:	4d86      	ldr	r5, [pc, #536]	; (8005e00 <UserInput+0x220>)
{
 8005be6:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 8005be8:	782e      	ldrb	r6, [r5, #0]
 8005bea:	2e02      	cmp	r6, #2
 8005bec:	f000 8130 	beq.w	8005e50 <UserInput+0x270>
	if (USBRXLength)
 8005bf0:	4b84      	ldr	r3, [pc, #528]	; (8005e04 <UserInput+0x224>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	bb2a      	cbnz	r2, 8005c42 <UserInput+0x62>
		result = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f88d 3017 	strb.w	r3, [sp, #23]
	if (result == HAL_OK)
 8005bfc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005c00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c04:	b33b      	cbz	r3, 8005c56 <UserInput+0x76>
 8005c06:	4d80      	ldr	r5, [pc, #512]	; (8005e08 <UserInput+0x228>)
	EncVal = TIM4->CNT;
 8005c08:	4b80      	ldr	r3, [pc, #512]	; (8005e0c <UserInput+0x22c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005c0a:	4e81      	ldr	r6, [pc, #516]	; (8005e10 <UserInput+0x230>)
	EncVal = TIM4->CNT;
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005c0e:	8832      	ldrh	r2, [r6, #0]
	EncVal = TIM4->CNT;
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	4f80      	ldr	r7, [pc, #512]	; (8005e14 <UserInput+0x234>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005c14:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8005c16:	803b      	strh	r3, [r7, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005c18:	b201      	sxth	r1, r0
 8005c1a:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	f2c0 80dc 	blt.w	8005dda <UserInput+0x1fa>
	if (DiffEncVal > 0)
 8005c22:	f000 8081 	beq.w	8005d28 <UserInput+0x148>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8005c26:	f7fc fcd5 	bl	80025d4 <FminusClicked>
	if (!DisableDisplay)
 8005c2a:	782c      	ldrb	r4, [r5, #0]
 8005c2c:	b914      	cbnz	r4, 8005c34 <UserInput+0x54>
 8005c2e:	f7ff f8ad 	bl	8004d8c <DisplayStatus.part.0>
	if (!DisableDisplay)
 8005c32:	782c      	ldrb	r4, [r5, #0]
		LastEncVal = EncVal;
 8005c34:	883b      	ldrh	r3, [r7, #0]
 8005c36:	8033      	strh	r3, [r6, #0]
	if (!DisableDisplay)
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d078      	beq.n	8005d2e <UserInput+0x14e>
}
 8005c3c:	b00d      	add	sp, #52	; 0x34
 8005c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		result = HAL_OK;
 8005c42:	2200      	movs	r2, #0
 8005c44:	f88d 2017 	strb.w	r2, [sp, #23]
		USBRXLength = 0;
 8005c48:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8005c4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005c4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1d7      	bne.n	8005c06 <UserInput+0x26>
		switch (UartRXString[0])
 8005c56:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <UserInput+0x238>)
		UartRXDataReady = RESET;
 8005c58:	4970      	ldr	r1, [pc, #448]	; (8005e1c <UserInput+0x23c>)
		switch (UartRXString[0])
 8005c5a:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8005c5c:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8005c5e:	3b2b      	subs	r3, #43	; 0x2b
 8005c60:	2b4c      	cmp	r3, #76	; 0x4c
 8005c62:	d859      	bhi.n	8005d18 <UserInput+0x138>
 8005c64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c68:	00580160 	.word	0x00580160
 8005c6c:	00580172 	.word	0x00580172
 8005c70:	00580058 	.word	0x00580058
 8005c74:	018b0187 	.word	0x018b0187
 8005c78:	0193018f 	.word	0x0193018f
 8005c7c:	019b0197 	.word	0x019b0197
 8005c80:	01a3019f 	.word	0x01a3019f
 8005c84:	005801a7 	.word	0x005801a7
 8005c88:	00580058 	.word	0x00580058
 8005c8c:	00580058 	.word	0x00580058
 8005c90:	00580058 	.word	0x00580058
 8005c94:	01ab0058 	.word	0x01ab0058
 8005c98:	01b301af 	.word	0x01b301af
 8005c9c:	00580058 	.word	0x00580058
 8005ca0:	00580058 	.word	0x00580058
 8005ca4:	01b70058 	.word	0x01b70058
 8005ca8:	01c101bc 	.word	0x01c101bc
 8005cac:	00580058 	.word	0x00580058
 8005cb0:	00580058 	.word	0x00580058
 8005cb4:	00580058 	.word	0x00580058
 8005cb8:	00580058 	.word	0x00580058
 8005cbc:	00580058 	.word	0x00580058
 8005cc0:	005801c6 	.word	0x005801c6
 8005cc4:	02e501ce 	.word	0x02e501ce
 8005cc8:	00580058 	.word	0x00580058
 8005ccc:	00580058 	.word	0x00580058
 8005cd0:	00580058 	.word	0x00580058
 8005cd4:	02d002ed 	.word	0x02d002ed
 8005cd8:	005802d4 	.word	0x005802d4
 8005cdc:	02d80058 	.word	0x02d80058
 8005ce0:	004d02dc 	.word	0x004d02dc
 8005ce4:	00580058 	.word	0x00580058
 8005ce8:	01dd0058 	.word	0x01dd0058
 8005cec:	01e10058 	.word	0x01e10058
 8005cf0:	00580058 	.word	0x00580058
 8005cf4:	01e50058 	.word	0x01e50058
 8005cf8:	02290225 	.word	0x02290225
 8005cfc:	02ae027e 	.word	0x02ae027e
 8005d00:	015c      	.short	0x015c
			keyer_speed += 1;
 8005d02:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <UserInput+0x240>)
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8005d08:	2832      	cmp	r0, #50	; 0x32
 8005d0a:	f340 829e 	ble.w	800624a <UserInput+0x66a>
				keyer_speed = 50;
 8005d0e:	2232      	movs	r2, #50	; 0x32
 8005d10:	4610      	mov	r0, r2
 8005d12:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005d14:	f7fb fda6 	bl	8001864 <loadWPM>
	if (!DisableDisplay)
 8005d18:	4d3b      	ldr	r5, [pc, #236]	; (8005e08 <UserInput+0x228>)
 8005d1a:	782b      	ldrb	r3, [r5, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f47f af73 	bne.w	8005c08 <UserInput+0x28>
 8005d22:	f7ff f833 	bl	8004d8c <DisplayStatus.part.0>
 8005d26:	e76f      	b.n	8005c08 <UserInput+0x28>
	if (!DisableDisplay)
 8005d28:	782c      	ldrb	r4, [r5, #0]
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d186      	bne.n	8005c3c <UserInput+0x5c>
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <UserInput+0x244>)
 8005d30:	ed93 7a00 	vldr	s14, [r3]
 8005d34:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8005df0 <UserInput+0x210>
 8005d38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005d3c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005d40:	f00e fdee 	bl	8014920 <log10>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d44:	4838      	ldr	r0, [pc, #224]	; (8005e28 <UserInput+0x248>)
 8005d46:	4939      	ldr	r1, [pc, #228]	; (8005e2c <UserInput+0x24c>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d48:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d4c:	4a38      	ldr	r2, [pc, #224]	; (8005e30 <UserInput+0x250>)
 8005d4e:	6800      	ldr	r0, [r0, #0]
 8005d50:	6809      	ldr	r1, [r1, #0]
 8005d52:	7812      	ldrb	r2, [r2, #0]
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <UserInput+0x254>)
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d56:	9200      	str	r2, [sp, #0]
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d58:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8005df8 <UserInput+0x218>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d5c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005d60:	4935      	ldr	r1, [pc, #212]	; (8005e38 <UserInput+0x258>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d62:	eea0 7b06 	vfma.f64	d7, d0, d6
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d66:	4835      	ldr	r0, [pc, #212]	; (8005e3c <UserInput+0x25c>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005d68:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8005d6c:	ed83 7a00 	vstr	s14, [r3]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005d70:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005d74:	ec53 2b17 	vmov	r2, r3, d7
 8005d78:	f00c f9d0 	bl	801211c <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8005d7c:	482f      	ldr	r0, [pc, #188]	; (8005e3c <UserInput+0x25c>)
 8005d7e:	f7fa fb0f 	bl	80003a0 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 8005d82:	492e      	ldr	r1, [pc, #184]	; (8005e3c <UserInput+0x25c>)
 8005d84:	4602      	mov	r2, r0
 8005d86:	4620      	mov	r0, r4
 8005d88:	f009 fc14 	bl	800f5b4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f009 fbcd 	bl	800f52c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 8005d92:	2001      	movs	r0, #1
 8005d94:	f001 fcf4 	bl	8007780 <HAL_Delay>
		if (OVFDetected)
 8005d98:	4a29      	ldr	r2, [pc, #164]	; (8005e40 <UserInput+0x260>)
 8005d9a:	8813      	ldrh	r3, [r2, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80a6 	beq.w	8005eee <UserInput+0x30e>
			OVFDetected--;
 8005da2:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8005da4:	4927      	ldr	r1, [pc, #156]	; (8005e44 <UserInput+0x264>)
 8005da6:	4c25      	ldr	r4, [pc, #148]	; (8005e3c <UserInput+0x25c>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005da8:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <UserInput+0x268>)
 8005db0:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8005db2:	c907      	ldmia	r1, {r0, r1, r2}
 8005db4:	c403      	stmia	r4!, {r0, r1}
 8005db6:	f824 2b02 	strh.w	r2, [r4], #2
 8005dba:	0c12      	lsrs	r2, r2, #16
 8005dbc:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8005dbe:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <UserInput+0x26c>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005dc0:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8099 	bne.w	8005efe <UserInput+0x31e>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8005dcc:	6873      	ldr	r3, [r6, #4]
 8005dce:	432b      	orrs	r3, r5
 8005dd0:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8005dd2:	6853      	ldr	r3, [r2, #4]
 8005dd4:	432b      	orrs	r3, r5
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	e091      	b.n	8005efe <UserInput+0x31e>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8005dda:	1ad0      	subs	r0, r2, r3
 8005ddc:	b280      	uxth	r0, r0
 8005dde:	f7fc fb55 	bl	800248c <FplusClicked>
	if (!DisableDisplay)
 8005de2:	782c      	ldrb	r4, [r5, #0]
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	f47f af25 	bne.w	8005c34 <UserInput+0x54>
 8005dea:	e720      	b.n	8005c2e <UserInput+0x4e>
 8005dec:	f3af 8000 	nop.w
 8005df0:	00000000 	.word	0x00000000
 8005df4:	409f4000 	.word	0x409f4000
 8005df8:	9916f6a6 	.word	0x9916f6a6
 8005dfc:	400a93fc 	.word	0x400a93fc
 8005e00:	24007321 	.word	0x24007321
 8005e04:	24006214 	.word	0x24006214
 8005e08:	24000f50 	.word	0x24000f50
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	24006180 	.word	0x24006180
 8005e14:	24000f52 	.word	0x24000f52
 8005e18:	2400621c 	.word	0x2400621c
 8005e1c:	2400621a 	.word	0x2400621a
 8005e20:	2400ac88 	.word	0x2400ac88
 8005e24:	2400619c 	.word	0x2400619c
 8005e28:	240061fc 	.word	0x240061fc
 8005e2c:	240061f8 	.word	0x240061f8
 8005e30:	24000f39 	.word	0x24000f39
 8005e34:	240061a8 	.word	0x240061a8
 8005e38:	080189f0 	.word	0x080189f0
 8005e3c:	2400631c 	.word	0x2400631c
 8005e40:	24006192 	.word	0x24006192
 8005e44:	08018a14 	.word	0x08018a14
 8005e48:	2400a360 	.word	0x2400a360
 8005e4c:	2400a3c4 	.word	0x2400a3c4
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8005e50:	48c9      	ldr	r0, [pc, #804]	; (8006178 <UserInput+0x598>)
 8005e52:	f002 fdf5 	bl	8008a40 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 8005e56:	f7fe fe97 	bl	8004b88 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8005e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5e:	49c7      	ldr	r1, [pc, #796]	; (800617c <UserInput+0x59c>)
 8005e60:	48c5      	ldr	r0, [pc, #788]	; (8006178 <UserInput+0x598>)
 8005e62:	f002 fd71 	bl	8008948 <HAL_ADCEx_MultiModeStart_DMA>
 8005e66:	4604      	mov	r4, r0
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f040 81f8 	bne.w	800625e <UserInput+0x67e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e6e:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005e72:	f04f 0901 	mov.w	r9, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e76:	a906      	add	r1, sp, #24
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e78:	9608      	str	r6, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e7a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e7e:	48c0      	ldr	r0, [pc, #768]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e80:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e84:	f004 fbe0 	bl	800a648 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005e88:	4622      	mov	r2, r4
 8005e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e8e:	48bd      	ldr	r0, [pc, #756]	; (8006184 <UserInput+0x5a4>)
 8005e90:	f004 fd1a 	bl	800a8c8 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005e94:	4622      	mov	r2, r4
 8005e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e9a:	48bb      	ldr	r0, [pc, #748]	; (8006188 <UserInput+0x5a8>)
 8005e9c:	f004 fd14 	bl	800a8c8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005ea0:	4bba      	ldr	r3, [pc, #744]	; (800618c <UserInput+0x5ac>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ea6:	48b7      	ldr	r0, [pc, #732]	; (8006184 <UserInput+0x5a4>)
 8005ea8:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8005eaa:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eac:	940a      	str	r4, [sp, #40]	; 0x28
 8005eae:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005eb2:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005eb6:	f004 fd07 	bl	800a8c8 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005eba:	4623      	mov	r3, r4
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	2110      	movs	r1, #16
 8005ec0:	48b3      	ldr	r0, [pc, #716]	; (8006190 <UserInput+0x5b0>)
 8005ec2:	f003 f809 	bl	8008ed8 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eca:	a906      	add	r1, sp, #24
 8005ecc:	48ac      	ldr	r0, [pc, #688]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 8005ed2:	4bb0      	ldr	r3, [pc, #704]	; (8006194 <UserInput+0x5b4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ed4:	e9cd 8906 	strd	r8, r9, [sp, #24]
		TXCarrierEnabled = 0;
 8005ed8:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eda:	f004 fbb5 	bl	800a648 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005ede:	4622      	mov	r2, r4
 8005ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ee4:	48a8      	ldr	r0, [pc, #672]	; (8006188 <UserInput+0x5a8>)
 8005ee6:	f004 fcef 	bl	800a8c8 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 8005eea:	702c      	strb	r4, [r5, #0]
 8005eec:	e680      	b.n	8005bf0 <UserInput+0x10>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 8005eee:	4aaa      	ldr	r2, [pc, #680]	; (8006198 <UserInput+0x5b8>)
 8005ef0:	4baa      	ldr	r3, [pc, #680]	; (800619c <UserInput+0x5bc>)
 8005ef2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ef4:	0c14      	lsrs	r4, r2, #16
 8005ef6:	c303      	stmia	r3!, {r0, r1}
 8005ef8:	f823 2b02 	strh.w	r2, [r3], #2
 8005efc:	701c      	strb	r4, [r3, #0]
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8005efe:	48a7      	ldr	r0, [pc, #668]	; (800619c <UserInput+0x5bc>)
 8005f00:	f7fa fa4e 	bl	80003a0 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 8005f04:	49a5      	ldr	r1, [pc, #660]	; (800619c <UserInput+0x5bc>)
 8005f06:	4602      	mov	r2, r0
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f009 fb53 	bl	800f5b4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f009 fb0c 	bl	800f52c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 8005f14:	2001      	movs	r0, #1
}
 8005f16:	b00d      	add	sp, #52	; 0x34
 8005f18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8005f1c:	f001 bc30 	b.w	8007780 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7fc f8e9 	bl	80020f8 <SetBW>
 8005f26:	e6f7      	b.n	8005d18 <UserInput+0x138>
			RXVolume += 0.1;
 8005f28:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <UserInput+0x5c0>)
			if (RXVolume > 1.0)
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			RXVolume += 0.1;
 8005f2e:	ed93 7a00 	vldr	s14, [r3]
 8005f32:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8006170 <UserInput+0x590>
 8005f36:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005f3a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005f3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f42:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8005f46:	edc3 7a00 	vstr	s15, [r3]
 8005f4a:	e6e5      	b.n	8005d18 <UserInput+0x138>
			RXVolume -= 0.1;
 8005f4c:	4b94      	ldr	r3, [pc, #592]	; (80061a0 <UserInput+0x5c0>)
			if (RXVolume < 0)
 8005f4e:	2200      	movs	r2, #0
			RXVolume -= 0.1;
 8005f50:	ed93 7a00 	vldr	s14, [r3]
 8005f54:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8006170 <UserInput+0x590>
 8005f58:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005f5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f60:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (RXVolume < 0)
 8005f64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			RXVolume -= 0.1;
 8005f6c:	bf54      	ite	pl
 8005f6e:	ed83 7a00 	vstrpl	s14, [r3]
				RXVolume = 0;
 8005f72:	601a      	strmi	r2, [r3, #0]
 8005f74:	e6d0      	b.n	8005d18 <UserInput+0x138>
			FminusClicked(2); break;
 8005f76:	2002      	movs	r0, #2
 8005f78:	f7fc fb2c 	bl	80025d4 <FminusClicked>
 8005f7c:	e6cc      	b.n	8005d18 <UserInput+0x138>
			FplusClicked(2); break;
 8005f7e:	2002      	movs	r0, #2
 8005f80:	f7fc fa84 	bl	800248c <FplusClicked>
 8005f84:	e6c8      	b.n	8005d18 <UserInput+0x138>
			SetFstep(5);  break;
 8005f86:	2005      	movs	r0, #5
 8005f88:	f7fc fa5e 	bl	8002448 <SetFstep>
 8005f8c:	e6c4      	b.n	8005d18 <UserInput+0x138>
			SetFstep(4);  break;
 8005f8e:	2004      	movs	r0, #4
 8005f90:	f7fc fa5a 	bl	8002448 <SetFstep>
 8005f94:	e6c0      	b.n	8005d18 <UserInput+0x138>
			SetFstep(3);  break;
 8005f96:	2003      	movs	r0, #3
 8005f98:	f7fc fa56 	bl	8002448 <SetFstep>
 8005f9c:	e6bc      	b.n	8005d18 <UserInput+0x138>
			SetFstep(2);  break;
 8005f9e:	2002      	movs	r0, #2
 8005fa0:	f7fc fa52 	bl	8002448 <SetFstep>
 8005fa4:	e6b8      	b.n	8005d18 <UserInput+0x138>
			SetFstep(1); break;
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	f7fc fa4e 	bl	8002448 <SetFstep>
 8005fac:	e6b4      	b.n	8005d18 <UserInput+0x138>
			SetFstep(0); break;
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f7fc fa4a 	bl	8002448 <SetFstep>
 8005fb4:	e6b0      	b.n	8005d18 <UserInput+0x138>
			SetFstep(9); break;
 8005fb6:	2009      	movs	r0, #9
 8005fb8:	f7fc fa46 	bl	8002448 <SetFstep>
 8005fbc:	e6ac      	b.n	8005d18 <UserInput+0x138>
			DisableDisplay = 1; break;
 8005fbe:	4d79      	ldr	r5, [pc, #484]	; (80061a4 <UserInput+0x5c4>)
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	702b      	strb	r3, [r5, #0]
	if (!DisableDisplay)
 8005fc4:	e620      	b.n	8005c08 <UserInput+0x28>
			SendCWMessage(0); break;
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f7fb fed6 	bl	8001d78 <SendCWMessage>
 8005fcc:	e6a4      	b.n	8005d18 <UserInput+0x138>
			SendCWMessage(1); break;
 8005fce:	2001      	movs	r0, #1
 8005fd0:	f7fb fed2 	bl	8001d78 <SendCWMessage>
 8005fd4:	e6a0      	b.n	8005d18 <UserInput+0x138>
			TxPowerOut = LOW_POWER_OUT;
 8005fd6:	4b74      	ldr	r3, [pc, #464]	; (80061a8 <UserInput+0x5c8>)
 8005fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fdc:	601a      	str	r2, [r3, #0]
			break;
 8005fde:	e69b      	b.n	8005d18 <UserInput+0x138>
			TxPowerOut = MID_POWER_OUT;
 8005fe0:	4b71      	ldr	r3, [pc, #452]	; (80061a8 <UserInput+0x5c8>)
 8005fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe6:	601a      	str	r2, [r3, #0]
			break;
 8005fe8:	e696      	b.n	8005d18 <UserInput+0x138>
			TxPowerOut = MAX_POWER_OUT;
 8005fea:	4b6f      	ldr	r3, [pc, #444]	; (80061a8 <UserInput+0x5c8>)
 8005fec:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005ff0:	601a      	str	r2, [r3, #0]
			break;
 8005ff2:	e691      	b.n	8005d18 <UserInput+0x138>
			if (ShowWF)
 8005ff4:	4b6d      	ldr	r3, [pc, #436]	; (80061ac <UserInput+0x5cc>)
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	f000 8128 	beq.w	800624e <UserInput+0x66e>
				ShowWF=0;
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e689      	b.n	8005d18 <UserInput+0x138>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 8006004:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <UserInput+0x5d0>)
 8006006:	496b      	ldr	r1, [pc, #428]	; (80061b4 <UserInput+0x5d4>)
 8006008:	ed93 0a00 	vldr	s0, [r3]
 800600c:	486a      	ldr	r0, [pc, #424]	; (80061b8 <UserInput+0x5d8>)
 800600e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8006012:	f7ff f9b1 	bl	8005378 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 8006016:	4b69      	ldr	r3, [pc, #420]	; (80061bc <UserInput+0x5dc>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 800601c:	f7fe fdb4 	bl	8004b88 <SendWSPR>
			break;
 8006020:	e67a      	b.n	8005d18 <UserInput+0x138>
			SetMode((Mode)LSB); break;
 8006022:	2001      	movs	r0, #1
 8006024:	f7fc f9d4 	bl	80023d0 <SetMode>
 8006028:	e676      	b.n	8005d18 <UserInput+0x138>
			SetBW((Bwidth)Narrow);  break;
 800602a:	2000      	movs	r0, #0
 800602c:	f7fc f864 	bl	80020f8 <SetBW>
 8006030:	e672      	b.n	8005d18 <UserInput+0x138>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006032:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006034:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006036:	f44f 7600 	mov.w	r6, #512	; 0x200
 800603a:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800603c:	a906      	add	r1, sp, #24
 800603e:	4850      	ldr	r0, [pc, #320]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006040:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006042:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006046:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800604a:	f004 fafd 	bl	800a648 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 800604e:	4622      	mov	r2, r4
 8006050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006054:	484b      	ldr	r0, [pc, #300]	; (8006184 <UserInput+0x5a4>)
 8006056:	f004 fc37 	bl	800a8c8 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800605a:	4622      	mov	r2, r4
 800605c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006060:	4849      	ldr	r0, [pc, #292]	; (8006188 <UserInput+0x5a8>)
 8006062:	f004 fc31 	bl	800a8c8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <UserInput+0x5ac>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8006068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800606c:	4845      	ldr	r0, [pc, #276]	; (8006184 <UserInput+0x5a4>)
 800606e:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8006070:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006072:	940a      	str	r4, [sp, #40]	; 0x28
 8006074:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8006078:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800607c:	f004 fc24 	bl	800a8c8 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8006080:	4623      	mov	r3, r4
 8006082:	4622      	mov	r2, r4
 8006084:	2110      	movs	r1, #16
 8006086:	4842      	ldr	r0, [pc, #264]	; (8006190 <UserInput+0x5b0>)
 8006088:	f002 ff26 	bl	8008ed8 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800608c:	2202      	movs	r2, #2
 800608e:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006090:	a906      	add	r1, sp, #24
 8006092:	483b      	ldr	r0, [pc, #236]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006094:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 8006098:	4b3e      	ldr	r3, [pc, #248]	; (8006194 <UserInput+0x5b4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800609a:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 800609e:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a0:	f004 fad2 	bl	800a648 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80060a4:	4622      	mov	r2, r4
 80060a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060aa:	4837      	ldr	r0, [pc, #220]	; (8006188 <UserInput+0x5a8>)
 80060ac:	f004 fc0c 	bl	800a8c8 <HAL_GPIO_WritePin>
}
 80060b0:	e632      	b.n	8005d18 <UserInput+0x138>
			SetAGC((Agctype)Slow);  break;
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fc f884 	bl	80021c0 <SetAGC>
 80060b8:	e62e      	b.n	8005d18 <UserInput+0x138>
		if (LastTXFreq != LOfreq)
 80060ba:	4d3d      	ldr	r5, [pc, #244]	; (80061b0 <UserInput+0x5d0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060bc:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 80060be:	4c40      	ldr	r4, [pc, #256]	; (80061c0 <UserInput+0x5e0>)
		TransmissionEnabled = 1;
 80060c0:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 80060c2:	ed95 0a00 	vldr	s0, [r5]
 80060c6:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80060ca:	4a30      	ldr	r2, [pc, #192]	; (800618c <UserInput+0x5ac>)
		if (LastTXFreq != LOfreq)
 80060cc:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d0:	930a      	str	r3, [sp, #40]	; 0x28
		TransmissionEnabled = 1;
 80060d2:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 80060d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80060dc:	e9cd 3308 	strd	r3, r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 80060e0:	f040 80b8 	bne.w	8006254 <UserInput+0x674>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80060e4:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060e6:	f44f 7800 	mov.w	r8, #512	; 0x200
 80060ea:	f04f 0902 	mov.w	r9, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	2703      	movs	r7, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060f2:	a906      	add	r1, sp, #24
 80060f4:	4822      	ldr	r0, [pc, #136]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80060f6:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060f8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80060fc:	e9cd 6708 	strd	r6, r7, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006100:	f004 faa2 	bl	800a648 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8006104:	2201      	movs	r2, #1
 8006106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800610a:	481e      	ldr	r0, [pc, #120]	; (8006184 <UserInput+0x5a4>)
 800610c:	f004 fbdc 	bl	800a8c8 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8006110:	2201      	movs	r2, #1
 8006112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006116:	481c      	ldr	r0, [pc, #112]	; (8006188 <UserInput+0x5a8>)
 8006118:	f004 fbd6 	bl	800a8c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800611c:	4622      	mov	r2, r4
 800611e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006122:	4818      	ldr	r0, [pc, #96]	; (8006184 <UserInput+0x5a4>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006124:	940a      	str	r4, [sp, #40]	; 0x28
 8006126:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800612a:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800612e:	f004 fbcb 	bl	800a8c8 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <UserInput+0x5c8>)
 8006134:	4622      	mov	r2, r4
 8006136:	2110      	movs	r1, #16
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4815      	ldr	r0, [pc, #84]	; (8006190 <UserInput+0x5b0>)
 800613c:	f002 fecc 	bl	8008ed8 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006140:	a906      	add	r1, sp, #24
 8006142:	480f      	ldr	r0, [pc, #60]	; (8006180 <UserInput+0x5a0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006144:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006146:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800614a:	e9cd 6708 	strd	r6, r7, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800614e:	f004 fa7b 	bl	800a648 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8006152:	2201      	movs	r2, #1
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <UserInput+0x5b4>)
		LED_GREEN_ON;
 8006156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800615a:	480b      	ldr	r0, [pc, #44]	; (8006188 <UserInput+0x5a8>)
		TXCarrierEnabled = 1;
 800615c:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 800615e:	f004 fbb3 	bl	800a8c8 <HAL_GPIO_WritePin>
}
 8006162:	e5d9      	b.n	8005d18 <UserInput+0x138>
			SetMode((Mode)USB); break;
 8006164:	2002      	movs	r0, #2
 8006166:	f7fc f933 	bl	80023d0 <SetMode>
 800616a:	e5d5      	b.n	8005d18 <UserInput+0x138>
 800616c:	f3af 8000 	nop.w
 8006170:	9999999a 	.word	0x9999999a
 8006174:	3fb99999 	.word	0x3fb99999
 8006178:	2400a360 	.word	0x2400a360
 800617c:	24007340 	.word	0x24007340
 8006180:	58020800 	.word	0x58020800
 8006184:	58020c00 	.word	0x58020c00
 8006188:	58020400 	.word	0x58020400
 800618c:	2400620c 	.word	0x2400620c
 8006190:	2400a42c 	.word	0x2400a42c
 8006194:	24006200 	.word	0x24006200
 8006198:	08018a20 	.word	0x08018a20
 800619c:	2400631c 	.word	0x2400631c
 80061a0:	240061a4 	.word	0x240061a4
 80061a4:	24000f50 	.word	0x24000f50
 80061a8:	24006210 	.word	0x24006210
 80061ac:	240061cc 	.word	0x240061cc
 80061b0:	24006178 	.word	0x24006178
 80061b4:	24005158 	.word	0x24005158
 80061b8:	2400514c 	.word	0x2400514c
 80061bc:	2400620d 	.word	0x2400620d
 80061c0:	24006184 	.word	0x24006184
	__HAL_RCC_PLL2FRACN_DISABLE();
 80061c4:	4a27      	ldr	r2, [pc, #156]	; (8006264 <UserInput+0x684>)
	for (i=0; i< 50; i++)
 80061c6:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 80061c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80061ca:	f023 0310 	bic.w	r3, r3, #16
 80061ce:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80061d0:	9106      	str	r1, [sp, #24]
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	2b31      	cmp	r3, #49	; 0x31
 80061d6:	d80b      	bhi.n	80061f0 <UserInput+0x610>
		i++;
 80061d8:	9b06      	ldr	r3, [sp, #24]
 80061da:	3301      	adds	r3, #1
 80061dc:	9306      	str	r3, [sp, #24]
		i--;
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	3301      	adds	r3, #1
 80061e8:	9306      	str	r3, [sp, #24]
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	2b31      	cmp	r3, #49	; 0x31
 80061ee:	d9f3      	bls.n	80061d8 <UserInput+0x5f8>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 80061f0:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <UserInput+0x684>)
 80061f2:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <UserInput+0x688>)
 80061f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80061f6:	400b      	ands	r3, r1
 80061f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80061fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80061fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006200:	f043 0310 	orr.w	r3, r3, #16
 8006204:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8006206:	e587      	b.n	8005d18 <UserInput+0x138>
			DisableDisplay = 0; break;
 8006208:	4d18      	ldr	r5, [pc, #96]	; (800626c <UserInput+0x68c>)
 800620a:	2300      	movs	r3, #0
 800620c:	702b      	strb	r3, [r5, #0]
	if (!DisableDisplay)
 800620e:	e588      	b.n	8005d22 <UserInput+0x142>
			SetMode((Mode)CW); break;
 8006210:	2003      	movs	r0, #3
 8006212:	f7fc f8dd 	bl	80023d0 <SetMode>
 8006216:	e57f      	b.n	8005d18 <UserInput+0x138>
			SetAGC((Agctype)Fast);  break;
 8006218:	2000      	movs	r0, #0
 800621a:	f7fb ffd1 	bl	80021c0 <SetAGC>
 800621e:	e57b      	b.n	8005d18 <UserInput+0x138>
			keyer_speed -= 1;
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <UserInput+0x690>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8006226:	2802      	cmp	r0, #2
 8006228:	dc0f      	bgt.n	800624a <UserInput+0x66a>
				keyer_speed = 3;
 800622a:	2203      	movs	r2, #3
 800622c:	4610      	mov	r0, r2
 800622e:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8006230:	e570      	b.n	8005d14 <UserInput+0x134>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	480f      	ldr	r0, [pc, #60]	; (8006274 <UserInput+0x694>)
 8006236:	4910      	ldr	r1, [pc, #64]	; (8006278 <UserInput+0x698>)
 8006238:	4a10      	ldr	r2, [pc, #64]	; (800627c <UserInput+0x69c>)
 800623a:	6003      	str	r3, [r0, #0]
 800623c:	600b      	str	r3, [r1, #0]
 800623e:	6013      	str	r3, [r2, #0]
			break;
 8006240:	e56a      	b.n	8005d18 <UserInput+0x138>
			SetMode((Mode)AM); break;
 8006242:	2000      	movs	r0, #0
 8006244:	f7fc f8c4 	bl	80023d0 <SetMode>
 8006248:	e566      	b.n	8005d18 <UserInput+0x138>
			keyer_speed += 1;
 800624a:	6018      	str	r0, [r3, #0]
 800624c:	e562      	b.n	8005d14 <UserInput+0x134>
				ShowWF=1;
 800624e:	2201      	movs	r2, #1
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	e561      	b.n	8005d18 <UserInput+0x138>
			SetTXPLL(LOfreq);
 8006254:	f7ff f9fc 	bl	8005650 <SetTXPLL>
			LastTXFreq = LOfreq;
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	e742      	b.n	80060e4 <UserInput+0x504>
			Error_Handler();
 800625e:	f7ff fbf1 	bl	8005a44 <Error_Handler>
 8006262:	bf00      	nop
 8006264:	58024400 	.word	0x58024400
 8006268:	ffff0007 	.word	0xffff0007
 800626c:	24000f50 	.word	0x24000f50
 8006270:	2400ac88 	.word	0x2400ac88
 8006274:	240061f8 	.word	0x240061f8
 8006278:	240061fc 	.word	0x240061fc
 800627c:	2400c7b8 	.word	0x2400c7b8

08006280 <MX_TIM6_Init_Custom_Rate>:
{
 8006280:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006282:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8006284:	4c0f      	ldr	r4, [pc, #60]	; (80062c4 <MX_TIM6_Init_Custom_Rate+0x44>)
 8006286:	4810      	ldr	r0, [pc, #64]	; (80062c8 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8006288:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 800628a:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800628e:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006290:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006292:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8006294:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006298:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 800629a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800629e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80062a2:	f006 fd9f 	bl	800cde4 <HAL_TIM_Base_Init>
 80062a6:	b950      	cbnz	r0, 80062be <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80062a8:	4603      	mov	r3, r0
 80062aa:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80062ac:	a901      	add	r1, sp, #4
 80062ae:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062b0:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80062b2:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80062b4:	f007 fb66 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80062b8:	b908      	cbnz	r0, 80062be <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80062ba:	b004      	add	sp, #16
 80062bc:	bd10      	pop	{r4, pc}
		Error_Handler();
 80062be:	f7ff fbc1 	bl	8005a44 <Error_Handler>
 80062c2:	bf00      	nop
 80062c4:	2400ab58 	.word	0x2400ab58
 80062c8:	40001000 	.word	0x40001000
 80062cc:	00000000 	.word	0x00000000

080062d0 <main>:
{
 80062d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80062d4:	b0d9      	sub	sp, #356	; 0x164
	HAL_Init();
 80062d6:	f001 fa11 	bl	80076fc <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80062da:	4ad5      	ldr	r2, [pc, #852]	; (8006630 <main+0x360>)
 80062dc:	6953      	ldr	r3, [r2, #20]
 80062de:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80062e2:	d111      	bne.n	8006308 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80062e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062e8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80062ec:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80062f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062f4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80062f8:	6953      	ldr	r3, [r2, #20]
 80062fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006304:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006308:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800630a:	4dca      	ldr	r5, [pc, #808]	; (8006634 <main+0x364>)
	SystemClock_Config_For_OC();
 800630c:	f7ff fbb4 	bl	8005a78 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 8006310:	2014      	movs	r0, #20
 8006312:	f001 fa35 	bl	8007780 <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006316:	9452      	str	r4, [sp, #328]	; 0x148
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8006318:	4622      	mov	r2, r4
 800631a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800631e:	48c6      	ldr	r0, [pc, #792]	; (8006638 <main+0x368>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006320:	2601      	movs	r6, #1
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8006322:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006326:	f04f 0a08 	mov.w	sl, #8
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800632a:	f04f 0904 	mov.w	r9, #4
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800632e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006332:	e9cd 444e 	strd	r4, r4, [sp, #312]	; 0x138
 8006336:	e9cd 4450 	strd	r4, r4, [sp, #320]	; 0x140
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800633a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006346:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	9305      	str	r3, [sp, #20]
 8006350:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006352:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800635e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	9306      	str	r3, [sp, #24]
 8006368:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800636a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006376:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006382:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800638e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	9308      	str	r3, [sp, #32]
 8006398:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800639a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800639e:	f043 0308 	orr.w	r3, r3, #8
 80063a2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80063a6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	9309      	str	r3, [sp, #36]	; 0x24
 80063b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80063b2:	f004 fa89 	bl	800a8c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 80063b6:	4622      	mov	r2, r4
 80063b8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80063bc:	489f      	ldr	r0, [pc, #636]	; (800663c <main+0x36c>)
 80063be:	f004 fa83 	bl	800a8c8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80063c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063c6:	2300      	movs	r3, #0
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80063c8:	a94e      	add	r1, sp, #312	; 0x138
 80063ca:	489d      	ldr	r0, [pc, #628]	; (8006640 <main+0x370>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063cc:	9650      	str	r6, [sp, #320]	; 0x140
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80063ce:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80063d2:	f004 f939 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80063d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80063de:	a94e      	add	r1, sp, #312	; 0x138
 80063e0:	4897      	ldr	r0, [pc, #604]	; (8006640 <main+0x370>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e2:	9650      	str	r6, [sp, #320]	; 0x140
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80063e4:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80063e8:	f004 f92e 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80063ec:	22c0      	movs	r2, #192	; 0xc0
 80063ee:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f0:	a94e      	add	r1, sp, #312	; 0x138
 80063f2:	4894      	ldr	r0, [pc, #592]	; (8006644 <main+0x374>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063f4:	9650      	str	r6, [sp, #320]	; 0x140
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80063f6:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fa:	f004 f925 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80063fe:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8006402:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006404:	a94e      	add	r1, sp, #312	; 0x138
 8006406:	488c      	ldr	r0, [pc, #560]	; (8006638 <main+0x368>)
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8006408:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	e9cd 2350 	strd	r2, r3, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006414:	f004 f918 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8006418:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800641c:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800641e:	a94e      	add	r1, sp, #312	; 0x138
 8006420:	4886      	ldr	r0, [pc, #536]	; (800663c <main+0x36c>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8006422:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
 8006426:	2202      	movs	r2, #2
 8006428:	2300      	movs	r3, #0
 800642a:	e9cd 2350 	strd	r2, r3, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800642e:	f004 f90b 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8006432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006436:	2300      	movs	r3, #0
	HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006438:	a94e      	add	r1, sp, #312	; 0x138
 800643a:	4880      	ldr	r0, [pc, #512]	; (800663c <main+0x36c>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800643c:	9650      	str	r6, [sp, #320]	; 0x140
	GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 800643e:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
	HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006442:	f004 f901 	bl	800a648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644a:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800644c:	a94e      	add	r1, sp, #312	; 0x138
 800644e:	487c      	ldr	r0, [pc, #496]	; (8006640 <main+0x370>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006450:	9452      	str	r4, [sp, #328]	; 0x148
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006452:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
 8006456:	2303      	movs	r3, #3
 8006458:	2200      	movs	r2, #0
 800645a:	e9cd 2350 	strd	r2, r3, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800645e:	f004 f8f3 	bl	800a648 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8006462:	4622      	mov	r2, r4
 8006464:	2104      	movs	r1, #4
 8006466:	2028      	movs	r0, #40	; 0x28
 8006468:	f002 fbfe 	bl	8008c68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800646c:	2028      	movs	r0, #40	; 0x28
 800646e:	f002 fc39 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8006472:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006476:	4622      	mov	r2, r4
 8006478:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800647a:	4333      	orrs	r3, r6
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800647c:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 800647e:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8006482:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	hadc1.Instance = ADC1;
 8006486:	4d70      	ldr	r5, [pc, #448]	; (8006648 <main+0x378>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8006488:	4033      	ands	r3, r6
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800648e:	f002 fbeb 	bl	8008c68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006492:	200b      	movs	r0, #11
 8006494:	f002 fc26 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8006498:	4622      	mov	r2, r4
 800649a:	2102      	movs	r1, #2
 800649c:	200c      	movs	r0, #12
 800649e:	f002 fbe3 	bl	8008c68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80064a2:	200c      	movs	r0, #12
 80064a4:	f002 fc1e 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80064a8:	4b68      	ldr	r3, [pc, #416]	; (800664c <main+0x37c>)
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80064aa:	942e      	str	r4, [sp, #184]	; 0xb8
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064ac:	4628      	mov	r0, r5
	ADC_ChannelConfTypeDef sConfig = {0};
 80064ae:	943c      	str	r4, [sp, #240]	; 0xf0
	ADC_MultiModeTypeDef multimode = {0};
 80064b0:	940c      	str	r4, [sp, #48]	; 0x30
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80064b2:	9433      	str	r4, [sp, #204]	; 0xcc
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80064b4:	60ec      	str	r4, [r5, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80064b6:	772c      	strb	r4, [r5, #28]
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80064b8:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80064ba:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	hadc1.Init.NbrOfConversion = 1;
 80064be:	61ae      	str	r6, [r5, #24]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80064c0:	f8c5 a008 	str.w	sl, [r5, #8]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80064c4:	f8c5 9010 	str.w	r9, [r5, #16]
	ADC_MultiModeTypeDef multimode = {0};
 80064c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80064cc:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
 80064d0:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	ADC_ChannelConfTypeDef sConfig = {0};
 80064d4:	e9cd 443d 	strd	r4, r4, [sp, #244]	; 0xf4
 80064d8:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
 80064dc:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064e0:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80064e4:	f44f 7480 	mov.w	r4, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80064e8:	e9c5 3b00 	strd	r3, fp, [r5]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80064ec:	2303      	movs	r3, #3
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80064ee:	82ac      	strh	r4, [r5, #20]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80064f0:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064f4:	f002 f8c8 	bl	8008688 <HAL_ADC_Init>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	f040 834d 	bne.w	8006b98 <main+0x8c8>
	multimode.Mode = ADC_DUALMODE_INTERL;
 80064fe:	2207      	movs	r2, #7
 8006500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006504:	a90a      	add	r1, sp, #40	; 0x28
 8006506:	4628      	mov	r0, r5
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8006508:	940c      	str	r4, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 800650a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800650e:	f002 fb31 	bl	8008b74 <HAL_ADCEx_MultiModeConfigChannel>
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 8340 	bne.w	8006b98 <main+0x8c8>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8006518:	4b4d      	ldr	r3, [pc, #308]	; (8006650 <main+0x380>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800651a:	a92e      	add	r1, sp, #184	; 0xb8
 800651c:	4628      	mov	r0, r5
	AnalogWDGConfig.ITMode = ENABLE;
 800651e:	f88d 60c4 	strb.w	r6, [sp, #196]	; 0xc4
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8006522:	9330      	str	r3, [sp, #192]	; 0xc0
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8006524:	ed9f cb38 	vldr	d12, [pc, #224]	; 8006608 <main+0x338>
	AnalogWDGConfig.HighThreshold = 4094;
 8006528:	ed9f bb39 	vldr	d11, [pc, #228]	; 8006610 <main+0x340>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800652c:	ed8d cb2e 	vstr	d12, [sp, #184]	; 0xb8
	AnalogWDGConfig.HighThreshold = 4094;
 8006530:	ed8d bb32 	vstr	d11, [sp, #200]	; 0xc8
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8006534:	f001 fd24 	bl	8007f80 <HAL_ADC_AnalogWDGConfig>
 8006538:	2800      	cmp	r0, #0
 800653a:	f040 832d 	bne.w	8006b98 <main+0x8c8>
	sConfig.OffsetSignedSaturation = DISABLE;
 800653e:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006542:	a93c      	add	r1, sp, #240	; 0xf0
 8006544:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8006546:	ed9f ab34 	vldr	d10, [pc, #208]	; 8006618 <main+0x348>
 800654a:	ed9f 9b35 	vldr	d9, [pc, #212]	; 8006620 <main+0x350>
 800654e:	ed9f 8b36 	vldr	d8, [pc, #216]	; 8006628 <main+0x358>
 8006552:	ed8d ab3c 	vstr	d10, [sp, #240]	; 0xf0
 8006556:	ed8d 9b3e 	vstr	d9, [sp, #248]	; 0xf8
 800655a:	ed8d 8b40 	vstr	d8, [sp, #256]	; 0x100
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800655e:	f001 fadf 	bl	8007b20 <HAL_ADC_ConfigChannel>
 8006562:	2800      	cmp	r0, #0
 8006564:	f040 8318 	bne.w	8006b98 <main+0x8c8>
	hadc2.Instance = ADC2;
 8006568:	4f3a      	ldr	r7, [pc, #232]	; (8006654 <main+0x384>)
 800656a:	4a3b      	ldr	r2, [pc, #236]	; (8006658 <main+0x388>)
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800656c:	9028      	str	r0, [sp, #160]	; 0xa0
	ADC_ChannelConfTypeDef sConfig = {0};
 800656e:	9034      	str	r0, [sp, #208]	; 0xd0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006570:	902d      	str	r0, [sp, #180]	; 0xb4
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006572:	60f8      	str	r0, [r7, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006574:	7738      	strb	r0, [r7, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8006576:	62f8      	str	r0, [r7, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8006578:	6378      	str	r0, [r7, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 800657a:	f887 0038 	strb.w	r0, [r7, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800657e:	82bc      	strh	r4, [r7, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006580:	f8c7 9010 	str.w	r9, [r7, #16]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006584:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	hadc2.Init.NbrOfConversion = 1;
 8006588:	61be      	str	r6, [r7, #24]
	hadc2.Instance = ADC2;
 800658a:	603a      	str	r2, [r7, #0]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800658c:	e9cd 0029 	strd	r0, r0, [sp, #164]	; 0xa4
 8006590:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
	ADC_ChannelConfTypeDef sConfig = {0};
 8006594:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8006598:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
 800659c:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80065a0:	4638      	mov	r0, r7
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80065a2:	e9c7 ba01 	strd	fp, sl, [r7, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80065a6:	f002 f86f 	bl	8008688 <HAL_ADC_Init>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	f040 82f4 	bne.w	8006b98 <main+0x8c8>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <main+0x380>)
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80065b2:	a928      	add	r1, sp, #160	; 0xa0
 80065b4:	4638      	mov	r0, r7
	AnalogWDGConfig.ITMode = ENABLE;
 80065b6:	f88d 60ac 	strb.w	r6, [sp, #172]	; 0xac
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80065ba:	932a      	str	r3, [sp, #168]	; 0xa8
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80065bc:	ed8d cb28 	vstr	d12, [sp, #160]	; 0xa0
	AnalogWDGConfig.HighThreshold = 4094;
 80065c0:	ed8d bb2c 	vstr	d11, [sp, #176]	; 0xb0
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80065c4:	f001 fcdc 	bl	8007f80 <HAL_ADC_AnalogWDGConfig>
 80065c8:	4602      	mov	r2, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	f040 82e4 	bne.w	8006b98 <main+0x8c8>
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065d0:	a934      	add	r1, sp, #208	; 0xd0
 80065d2:	4638      	mov	r0, r7
	sConfig.OffsetSignedSaturation = DISABLE;
 80065d4:	f88d 20e9 	strb.w	r2, [sp, #233]	; 0xe9
	sConfig.Channel = ADC_CHANNEL_5;
 80065d8:	ed8d ab34 	vstr	d10, [sp, #208]	; 0xd0
 80065dc:	ed8d 9b36 	vstr	d9, [sp, #216]	; 0xd8
 80065e0:	ed8d 8b38 	vstr	d8, [sp, #224]	; 0xe0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80065e4:	f001 fa9c 	bl	8007b20 <HAL_ADC_ConfigChannel>
 80065e8:	4601      	mov	r1, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f040 82d4 	bne.w	8006b98 <main+0x8c8>
	DAC_ChannelConfTypeDef sConfig = {0};
 80065f0:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 80065f2:	4c1a      	ldr	r4, [pc, #104]	; (800665c <main+0x38c>)
	DAC_ChannelConfTypeDef sConfig = {0};
 80065f4:	a84e      	add	r0, sp, #312	; 0x138
 80065f6:	f00a ff7f 	bl	80114f8 <memset>
	hdac1.Instance = DAC1;
 80065fa:	4b19      	ldr	r3, [pc, #100]	; (8006660 <main+0x390>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80065fc:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	e030      	b.n	8006664 <main+0x394>
 8006602:	bf00      	nop
 8006604:	f3af 8000 	nop.w
 8006608:	7dc00000 	.word	0x7dc00000
 800660c:	00c00000 	.word	0x00c00000
 8006610:	00000ffe 	.word	0x00000ffe
 8006614:	00000001 	.word	0x00000001
 8006618:	14f00020 	.word	0x14f00020
 800661c:	00000006 	.word	0x00000006
 8006620:	00000000 	.word	0x00000000
 8006624:	000007ff 	.word	0x000007ff
 8006628:	00000004 	.word	0x00000004
 800662c:	00000000 	.word	0x00000000
 8006630:	e000ed00 	.word	0xe000ed00
 8006634:	58024400 	.word	0x58024400
 8006638:	58020400 	.word	0x58020400
 800663c:	58020c00 	.word	0x58020c00
 8006640:	58020800 	.word	0x58020800
 8006644:	58020000 	.word	0x58020000
 8006648:	2400a360 	.word	0x2400a360
 800664c:	40022000 	.word	0x40022000
 8006650:	14f00020 	.word	0x14f00020
 8006654:	2400a3c4 	.word	0x2400a3c4
 8006658:	40022100 	.word	0x40022100
 800665c:	2400a42c 	.word	0x2400a42c
 8006660:	40007400 	.word	0x40007400
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006664:	f002 fb62 	bl	8008d2c <HAL_DAC_Init>
 8006668:	4602      	mov	r2, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	f040 8294 	bne.w	8006b98 <main+0x8c8>
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006670:	2116      	movs	r1, #22
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006672:	9052      	str	r0, [sp, #328]	; 0x148
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006674:	2000      	movs	r0, #0
 8006676:	e9cd 014e 	strd	r0, r1, [sp, #312]	; 0x138
 800667a:	2000      	movs	r0, #0
 800667c:	2101      	movs	r1, #1
 800667e:	e9cd 0150 	strd	r0, r1, [sp, #320]	; 0x140
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006682:	a94e      	add	r1, sp, #312	; 0x138
 8006684:	4620      	mov	r0, r4
 8006686:	f002 fc91 	bl	8008fac <HAL_DAC_ConfigChannel>
 800668a:	4603      	mov	r3, r0
 800668c:	2800      	cmp	r0, #0
 800668e:	f040 8283 	bne.w	8006b98 <main+0x8c8>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006692:	2210      	movs	r2, #16
 8006694:	a94e      	add	r1, sp, #312	; 0x138
 8006696:	4620      	mov	r0, r4
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006698:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800669a:	f002 fc87 	bl	8008fac <HAL_DAC_ConfigChannel>
 800669e:	2800      	cmp	r0, #0
 80066a0:	f040 827a 	bne.w	8006b98 <main+0x8c8>
	hlptim2.Instance = LPTIM2;
 80066a4:	48bd      	ldr	r0, [pc, #756]	; (800699c <main+0x6cc>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80066a6:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 80066a8:	4abd      	ldr	r2, [pc, #756]	; (80069a0 <main+0x6d0>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80066aa:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80066ae:	6303      	str	r3, [r0, #48]	; 0x30
	hlptim2.Instance = LPTIM2;
 80066b0:	6002      	str	r2, [r0, #0]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80066b2:	2200      	movs	r2, #0
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80066b4:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80066b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80066ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80066be:	2300      	movs	r3, #0
 80066c0:	e9c0 2308 	strd	r2, r3, [r0, #32]
 80066c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80066c8:	2300      	movs	r3, #0
 80066ca:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80066ce:	f004 f90d 	bl	800a8ec <HAL_LPTIM_Init>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f040 8260 	bne.w	8006b98 <main+0x8c8>
	htim6.Instance = TIM6;
 80066d8:	4cb2      	ldr	r4, [pc, #712]	; (80069a4 <main+0x6d4>)
 80066da:	4bb3      	ldr	r3, [pc, #716]	; (80069a8 <main+0x6d8>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066dc:	901b      	str	r0, [sp, #108]	; 0x6c
	htim6.Instance = TIM6;
 80066de:	6023      	str	r3, [r4, #0]
	htim6.Init.Period = 8191;
 80066e0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80066e4:	60e3      	str	r3, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066e6:	2380      	movs	r3, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066e8:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ec:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80066f0:	4620      	mov	r0, r4
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066f2:	61a3      	str	r3, [r4, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80066f4:	f006 fb76 	bl	800cde4 <HAL_TIM_Base_Init>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f040 824d 	bne.w	8006b98 <main+0x8c8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80066fe:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006700:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006702:	a919      	add	r1, sp, #100	; 0x64
 8006704:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006706:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006708:	f007 f93c 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 800670c:	4603      	mov	r3, r0
 800670e:	2800      	cmp	r0, #0
 8006710:	f040 8242 	bne.w	8006b98 <main+0x8c8>
	huart3.Instance = USART3;
 8006714:	4ca5      	ldr	r4, [pc, #660]	; (80069ac <main+0x6dc>)
 8006716:	4aa6      	ldr	r2, [pc, #664]	; (80069b0 <main+0x6e0>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006718:	60a0      	str	r0, [r4, #8]
	huart3.Instance = USART3;
 800671a:	6022      	str	r2, [r4, #0]
	huart3.Init.BaudRate = 115200;
 800671c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006720:	61a0      	str	r0, [r4, #24]
	huart3.Init.BaudRate = 115200;
 8006722:	6062      	str	r2, [r4, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8006724:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 8006726:	e9c4 0003 	strd	r0, r0, [r4, #12]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800672a:	e9c4 0007 	strd	r0, r0, [r4, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800672e:	4620      	mov	r0, r4
	huart3.Init.Mode = UART_MODE_TX_RX;
 8006730:	6162      	str	r2, [r4, #20]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006732:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8006736:	f007 ff77 	bl	800e628 <HAL_UART_Init>
 800673a:	4601      	mov	r1, r0
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 822b 	bne.w	8006b98 <main+0x8c8>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006742:	4620      	mov	r0, r4
 8006744:	f007 ffc8 	bl	800e6d8 <HAL_UARTEx_SetTxFifoThreshold>
 8006748:	4601      	mov	r1, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	f040 8224 	bne.w	8006b98 <main+0x8c8>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006750:	4620      	mov	r0, r4
 8006752:	f008 f803 	bl	800e75c <HAL_UARTEx_SetRxFifoThreshold>
 8006756:	2800      	cmp	r0, #0
 8006758:	f040 821e 	bne.w	8006b98 <main+0x8c8>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800675c:	4620      	mov	r0, r4
 800675e:	f007 ff9d 	bl	800e69c <HAL_UARTEx_DisableFifoMode>
 8006762:	2800      	cmp	r0, #0
 8006764:	f040 8218 	bne.w	8006b98 <main+0x8c8>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006768:	2201      	movs	r2, #1
 800676a:	2302      	movs	r3, #2
	htim4.Instance = TIM4;
 800676c:	4c91      	ldr	r4, [pc, #580]	; (80069b4 <main+0x6e4>)
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800676e:	a944      	add	r1, sp, #272	; 0x110
	TIM_Encoder_InitTypeDef sConfig = {0};
 8006770:	9047      	str	r0, [sp, #284]	; 0x11c
 8006772:	904b      	str	r0, [sp, #300]	; 0x12c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006774:	9018      	str	r0, [sp, #96]	; 0x60
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006776:	6120      	str	r0, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006778:	61a0      	str	r0, [r4, #24]
	htim4.Init.Period = 65535;
 800677a:	60e6      	str	r6, [r4, #12]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800677c:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006780:	2301      	movs	r3, #1
	sConfig.IC1Filter = 8;
 8006782:	2208      	movs	r2, #8
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006784:	9346      	str	r3, [sp, #280]	; 0x118
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006786:	934a      	str	r3, [sp, #296]	; 0x128
	sConfig.IC2Filter = 8;
 8006788:	2308      	movs	r3, #8
 800678a:	934c      	str	r3, [sp, #304]	; 0x130
	htim4.Instance = TIM4;
 800678c:	4b8a      	ldr	r3, [pc, #552]	; (80069b8 <main+0x6e8>)
 800678e:	6023      	str	r3, [r4, #0]
	sConfig.IC1Filter = 8;
 8006790:	2302      	movs	r3, #2
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006792:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006796:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800679a:	4620      	mov	r0, r4
	sConfig.IC1Filter = 8;
 800679c:	e9cd 2348 	strd	r2, r3, [sp, #288]	; 0x120
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80067a0:	f006 fd42 	bl	800d228 <HAL_TIM_Encoder_Init>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f040 81f6 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80067ac:	a916      	add	r1, sp, #88	; 0x58
 80067ae:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067b0:	9316      	str	r3, [sp, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067b2:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80067b4:	f007 f8e6 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f040 81ed 	bne.w	8006b98 <main+0x8c8>
	htim7.Instance = TIM7;
 80067be:	4c7f      	ldr	r4, [pc, #508]	; (80069bc <main+0x6ec>)
 80067c0:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <main+0x6f0>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067c2:	9015      	str	r0, [sp, #84]	; 0x54
	htim7.Instance = TIM7;
 80067c4:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 8192;
 80067c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067ca:	61a0      	str	r0, [r4, #24]
	htim7.Init.Period = 8192;
 80067cc:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067ce:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067d2:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067d6:	4620      	mov	r0, r4
 80067d8:	f006 fb04 	bl	800cde4 <HAL_TIM_Base_Init>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 81db 	bne.w	8006b98 <main+0x8c8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e2:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067e4:	a913      	add	r1, sp, #76	; 0x4c
 80067e6:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e8:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ea:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067ec:	f007 f8ca 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	f040 81d1 	bne.w	8006b98 <main+0x8c8>
	htim7.Instance = TIM7;
 80067f6:	4b72      	ldr	r3, [pc, #456]	; (80069c0 <main+0x6f0>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067f8:	61a0      	str	r0, [r4, #24]
	htim7.Instance = TIM7;
 80067fa:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80067fc:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006800:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006804:	4620      	mov	r0, r4
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8006806:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006808:	f006 faec 	bl	800cde4 <HAL_TIM_Base_Init>
 800680c:	4603      	mov	r3, r0
 800680e:	2800      	cmp	r0, #0
 8006810:	f040 81c2 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006814:	a913      	add	r1, sp, #76	; 0x4c
 8006816:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006818:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800681a:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800681c:	f007 f8b2 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8006820:	2800      	cmp	r0, #0
 8006822:	f040 81b9 	bne.w	8006b98 <main+0x8c8>
	htim2.Instance = TIM2;
 8006826:	4c67      	ldr	r4, [pc, #412]	; (80069c4 <main+0x6f4>)
 8006828:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 800682c:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006830:	9024      	str	r0, [sp, #144]	; 0x90
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006832:	9012      	str	r0, [sp, #72]	; 0x48
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006834:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006836:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006838:	61a0      	str	r0, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800683a:	9027      	str	r0, [sp, #156]	; 0x9c
	htim2.Init.Period = 10000;
 800683c:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800683e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	htim2.Init.Prescaler = 0;
 8006842:	e9c4 6000 	strd	r6, r0, [r4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006846:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800684a:	4620      	mov	r0, r4
 800684c:	f006 faca 	bl	800cde4 <HAL_TIM_Base_Init>
 8006850:	2800      	cmp	r0, #0
 8006852:	f040 81a1 	bne.w	8006b98 <main+0x8c8>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006856:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800685a:	a924      	add	r1, sp, #144	; 0x90
 800685c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800685e:	9724      	str	r7, [sp, #144]	; 0x90
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006860:	f006 ff04 	bl	800d66c <HAL_TIM_ConfigClockSource>
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 8197 	bne.w	8006b98 <main+0x8c8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800686a:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800686c:	a910      	add	r1, sp, #64	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800686e:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006870:	4620      	mov	r0, r4
 8006872:	f007 f887 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 8006876:	2800      	cmp	r0, #0
 8006878:	f040 818e 	bne.w	8006b98 <main+0x8c8>
	htim2.Init.Period = 15000;
 800687c:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006880:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006882:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006884:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8006886:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8006888:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800688c:	4620      	mov	r0, r4
 800688e:	f006 faa9 	bl	800cde4 <HAL_TIM_Base_Init>
 8006892:	2800      	cmp	r0, #0
 8006894:	f040 8180 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006898:	a924      	add	r1, sp, #144	; 0x90
 800689a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800689c:	9724      	str	r7, [sp, #144]	; 0x90
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800689e:	f006 fee5 	bl	800d66c <HAL_TIM_ConfigClockSource>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f040 8177 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068aa:	a910      	add	r1, sp, #64	; 0x40
 80068ac:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ae:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068b0:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068b2:	f007 f867 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f040 816d 	bne.w	8006b98 <main+0x8c8>
	htim3.Instance = TIM3;
 80068be:	4842      	ldr	r0, [pc, #264]	; (80069c8 <main+0x6f8>)
 80068c0:	4a42      	ldr	r2, [pc, #264]	; (80069cc <main+0x6fc>)
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068c2:	9320      	str	r3, [sp, #128]	; 0x80
	htim3.Instance = TIM3;
 80068c4:	6002      	str	r2, [r0, #0]
	htim3.Init.Period = 65535;
 80068c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ca:	930f      	str	r3, [sp, #60]	; 0x3c
	TIM_IC_InitTypeDef sConfigIC = {0};
 80068cc:	931c      	str	r3, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068ce:	6183      	str	r3, [r0, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068d0:	9323      	str	r3, [sp, #140]	; 0x8c
	TIM_IC_InitTypeDef sConfigIC = {0};
 80068d2:	931f      	str	r3, [sp, #124]	; 0x7c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068dc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068e0:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
	TIM_IC_InitTypeDef sConfigIC = {0};
 80068e4:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80068e8:	f006 fa7c 	bl	800cde4 <HAL_TIM_Base_Init>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f040 8153 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80068f2:	a920      	add	r1, sp, #128	; 0x80
 80068f4:	4834      	ldr	r0, [pc, #208]	; (80069c8 <main+0x6f8>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068f6:	9720      	str	r7, [sp, #128]	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80068f8:	f006 feb8 	bl	800d66c <HAL_TIM_ConfigClockSource>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 814b 	bne.w	8006b98 <main+0x8c8>
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8006902:	4831      	ldr	r0, [pc, #196]	; (80069c8 <main+0x6f8>)
 8006904:	f006 fbda 	bl	800d0bc <HAL_TIM_IC_Init>
 8006908:	2800      	cmp	r0, #0
 800690a:	f040 8145 	bne.w	8006b98 <main+0x8c8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800690e:	900d      	str	r0, [sp, #52]	; 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006910:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006912:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006914:	482c      	ldr	r0, [pc, #176]	; (80069c8 <main+0x6f8>)
 8006916:	f007 f835 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 800691a:	4602      	mov	r2, r0
 800691c:	2800      	cmp	r0, #0
 800691e:	f040 813b 	bne.w	8006b98 <main+0x8c8>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006922:	2600      	movs	r6, #0
 8006924:	2701      	movs	r7, #1
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006926:	a91c      	add	r1, sp, #112	; 0x70
 8006928:	4827      	ldr	r0, [pc, #156]	; (80069c8 <main+0x6f8>)
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800692a:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 800692e:	2600      	movs	r6, #0
 8006930:	2700      	movs	r7, #0
 8006932:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006936:	f006 fdbb 	bl	800d4b0 <HAL_TIM_IC_ConfigChannel>
 800693a:	2800      	cmp	r0, #0
 800693c:	f040 812c 	bne.w	8006b98 <main+0x8c8>
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006940:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <main+0x700>)
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006942:	2209      	movs	r2, #9
 8006944:	4923      	ldr	r1, [pc, #140]	; (80069d4 <main+0x704>)
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006946:	60d8      	str	r0, [r3, #12]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006948:	6318      	str	r0, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800694a:	4618      	mov	r0, r3
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800694c:	e9c3 6708 	strd	r6, r7, [r3, #32]
 8006950:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
 8006954:	2602      	movs	r6, #2
 8006956:	2700      	movs	r7, #0
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006958:	e9c3 1200 	strd	r1, r2, [r3]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800695c:	2202      	movs	r2, #2
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800695e:	e9c3 6706 	strd	r6, r7, [r3, #24]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006962:	611a      	str	r2, [r3, #16]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006964:	f004 f834 	bl	800a9d0 <HAL_PCD_Init>
 8006968:	2800      	cmp	r0, #0
 800696a:	f040 8115 	bne.w	8006b98 <main+0x8c8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800696e:	481a      	ldr	r0, [pc, #104]	; (80069d8 <main+0x708>)
 8006970:	6943      	ldr	r3, [r0, #20]
 8006972:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006976:	d146      	bne.n	8006a06 <main+0x736>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006978:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800697c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006980:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006984:	f643 77e0 	movw	r7, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006988:	f3c6 344e 	ubfx	r4, r6, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800698c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 8006990:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006992:	ea04 0107 	and.w	r1, r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006996:	4633      	mov	r3, r6
 8006998:	e020      	b.n	80069dc <main+0x70c>
 800699a:	bf00      	nop
 800699c:	2400a530 	.word	0x2400a530
 80069a0:	58002400 	.word	0x58002400
 80069a4:	2400ab58 	.word	0x2400ab58
 80069a8:	40001000 	.word	0x40001000
 80069ac:	2400abf0 	.word	0x2400abf0
 80069b0:	40004800 	.word	0x40004800
 80069b4:	2400ab0c 	.word	0x2400ab0c
 80069b8:	40000800 	.word	0x40000800
 80069bc:	2400aba4 	.word	0x2400aba4
 80069c0:	40001400 	.word	0x40001400
 80069c4:	2400aa74 	.word	0x2400aa74
 80069c8:	2400aac0 	.word	0x2400aac0
 80069cc:	40000400 	.word	0x40000400
 80069d0:	2400a568 	.word	0x2400a568
 80069d4:	40080000 	.word	0x40080000
 80069d8:	e000ed00 	.word	0xe000ed00
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80069dc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80069e0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80069e2:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	d1f8      	bne.n	80069dc <main+0x70c>
    } while(sets-- != 0U);
 80069ea:	3c20      	subs	r4, #32
 80069ec:	f114 0f20 	cmn.w	r4, #32
 80069f0:	d1cf      	bne.n	8006992 <main+0x6c2>
 80069f2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80069f6:	6943      	ldr	r3, [r0, #20]
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fc:	6143      	str	r3, [r0, #20]
 80069fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a02:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8006a06:	f7ff fc3b 	bl	8006280 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8006a0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a12:	4889      	ldr	r0, [pc, #548]	; (8006c38 <main+0x968>)
 8006a14:	f001 ff46 	bl	80088a4 <HAL_ADCEx_Calibration_Start>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f040 80bd 	bne.w	8006b98 <main+0x8c8>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8006a1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a26:	4885      	ldr	r0, [pc, #532]	; (8006c3c <main+0x96c>)
 8006a28:	f001 ff3c 	bl	80088a4 <HAL_ADCEx_Calibration_Start>
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f040 80b2 	bne.w	8006b98 <main+0x8c8>
	HAL_Delay(1);
 8006a34:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006a36:	4f82      	ldr	r7, [pc, #520]	; (8006c40 <main+0x970>)
	AMindex  = LSBindex = 1;
 8006a38:	4606      	mov	r6, r0
	HAL_Delay(1);
 8006a3a:	f000 fea1 	bl	8007780 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4880      	ldr	r0, [pc, #512]	; (8006c44 <main+0x974>)
 8006a42:	f006 fcd5 	bl	800d3f0 <HAL_TIM_Encoder_Start>
	RXVolume= 0.1;
 8006a46:	4b80      	ldr	r3, [pc, #512]	; (8006c48 <main+0x978>)
 8006a48:	4a80      	ldr	r2, [pc, #512]	; (8006c4c <main+0x97c>)
	SetFstep(2);
 8006a4a:	2002      	movs	r0, #2
	RXVolume= 0.1;
 8006a4c:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 8006a4e:	f7fb fcfb 	bl	8002448 <SetFstep>
	cwpitch = CWPITCH;
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <main+0x980>)
	meanavg = 0.f;
 8006a54:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 8006a56:	4a7f      	ldr	r2, [pc, #508]	; (8006c54 <main+0x984>)
	CarrierEnable(0);
 8006a58:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8006a5a:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8006a5c:	4a7e      	ldr	r2, [pc, #504]	; (8006c58 <main+0x988>)
	os_time = 0;
 8006a5e:	4b7f      	ldr	r3, [pc, #508]	; (8006c5c <main+0x98c>)
	meanavg = 0.f;
 8006a60:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8006a62:	4a7f      	ldr	r2, [pc, #508]	; (8006c60 <main+0x990>)
 8006a64:	497f      	ldr	r1, [pc, #508]	; (8006c64 <main+0x994>)
	os_time = 0;
 8006a66:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8006a68:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8006a6a:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8006a6e:	4a7e      	ldr	r2, [pc, #504]	; (8006c68 <main+0x998>)
	AGC_decay[Fast] = 0.9995f;
 8006a70:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <main+0x99c>)
	Muted   = false;
 8006a72:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8006a74:	4a7e      	ldr	r2, [pc, #504]	; (8006c70 <main+0x9a0>)
 8006a76:	8016      	strh	r6, [r2, #0]
 8006a78:	4a7e      	ldr	r2, [pc, #504]	; (8006c74 <main+0x9a4>)
 8006a7a:	8016      	strh	r6, [r2, #0]
	USBindex = CWindex  = 1;
 8006a7c:	4a7e      	ldr	r2, [pc, #504]	; (8006c78 <main+0x9a8>)
 8006a7e:	8016      	strh	r6, [r2, #0]
 8006a80:	4a7e      	ldr	r2, [pc, #504]	; (8006c7c <main+0x9ac>)
 8006a82:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8006a84:	4a7e      	ldr	r2, [pc, #504]	; (8006c80 <main+0x9b0>)
 8006a86:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8006a88:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8006a8c:	4a7d      	ldr	r2, [pc, #500]	; (8006c84 <main+0x9b4>)
 8006a8e:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8006a90:	4a7d      	ldr	r2, [pc, #500]	; (8006c88 <main+0x9b8>)
 8006a92:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8006a94:	4a7d      	ldr	r2, [pc, #500]	; (8006c8c <main+0x9bc>)
 8006a96:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8006a98:	4b7d      	ldr	r3, [pc, #500]	; (8006c90 <main+0x9c0>)
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	; (8006c94 <main+0x9c4>)
 8006a9c:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8006a9e:	4b7e      	ldr	r3, [pc, #504]	; (8006c98 <main+0x9c8>)
 8006aa0:	4a7e      	ldr	r2, [pc, #504]	; (8006c9c <main+0x9cc>)
 8006aa2:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8006aa4:	4a7e      	ldr	r2, [pc, #504]	; (8006ca0 <main+0x9d0>)
 8006aa6:	4b7f      	ldr	r3, [pc, #508]	; (8006ca4 <main+0x9d4>)
 8006aa8:	601a      	str	r2, [r3, #0]
	HAdc1 = &hadc1;
 8006aaa:	4b7f      	ldr	r3, [pc, #508]	; (8006ca8 <main+0x9d8>)
 8006aac:	601d      	str	r5, [r3, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006aae:	f44f 6500 	mov.w	r5, #2048	; 0x800
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006ab2:	4b7e      	ldr	r3, [pc, #504]	; (8006cac <main+0x9dc>)
 8006ab4:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8006ab6:	f7fe ff67 	bl	8005988 <CarrierEnable>
	TXSwitch(0);
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7fe ff00 	bl	80058c0 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8006ac0:	4a7b      	ldr	r2, [pc, #492]	; (8006cb0 <main+0x9e0>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006ac2:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006ac4:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006ac8:	497a      	ldr	r1, [pc, #488]	; (8006cb4 <main+0x9e4>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006aca:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006acc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8006ad0:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006ad2:	eddf 6a79 	vldr	s13, [pc, #484]	; 8006cb8 <main+0x9e8>
	__HAL_RCC_PLL2_DISABLE();
 8006ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8006ada:	4878      	ldr	r0, [pc, #480]	; (8006cbc <main+0x9ec>)
	__HAL_RCC_PLL2_DISABLE();
 8006adc:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006ade:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006ae0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006ae8:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8006c30 <main+0x960>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006aec:	6293      	str	r3, [r2, #40]	; 0x28
 8006aee:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006af0:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006af4:	3b01      	subs	r3, #1
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006afc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006b00:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8006b02:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006b04:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8006b08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b0c:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 8006b0e:	4a6c      	ldr	r2, [pc, #432]	; (8006cc0 <main+0x9f0>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006b10:	4b6c      	ldr	r3, [pc, #432]	; (8006cc4 <main+0x9f4>)
	CWThreshold = 0.01;
 8006b12:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006b14:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006b18:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8006b1c:	f7fc fde4 	bl	80036e8 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006b20:	4969      	ldr	r1, [pc, #420]	; (8006cc8 <main+0x9f8>)
 8006b22:	2204      	movs	r2, #4
 8006b24:	4f69      	ldr	r7, [pc, #420]	; (8006ccc <main+0x9fc>)
 8006b26:	4b6a      	ldr	r3, [pc, #424]	; (8006cd0 <main+0xa00>)
 8006b28:	486a      	ldr	r0, [pc, #424]	; (8006cd4 <main+0xa04>)
 8006b2a:	e9cd 1500 	strd	r1, r5, [sp]
 8006b2e:	2140      	movs	r1, #64	; 0x40
 8006b30:	f7fa fe7e 	bl	8001830 <arm_fir_decimate_init_f32>
 8006b34:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8006b36:	b100      	cbz	r0, 8006b3a <main+0x86a>
 8006b38:	e7fe      	b.n	8006b38 <main+0x868>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8006b3a:	4a67      	ldr	r2, [pc, #412]	; (8006cd8 <main+0xa08>)
 8006b3c:	2140      	movs	r1, #64	; 0x40
 8006b3e:	4b64      	ldr	r3, [pc, #400]	; (8006cd0 <main+0xa00>)
 8006b40:	4866      	ldr	r0, [pc, #408]	; (8006cdc <main+0xa0c>)
 8006b42:	e9cd 2500 	strd	r2, r5, [sp]
 8006b46:	2204      	movs	r2, #4
 8006b48:	f7fa fe72 	bl	8001830 <arm_fir_decimate_init_f32>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8006b50:	bb20      	cbnz	r0, 8006b9c <main+0x8cc>
	Load_Presets();
 8006b52:	f7fb faa7 	bl	80020a4 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8006b56:	4630      	mov	r0, r6
 8006b58:	f7fb fb8c 	bl	8002274 <Tune_Preset>
	keyerState = IDLE;
 8006b5c:	4a60      	ldr	r2, [pc, #384]	; (8006ce0 <main+0xa10>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8006b5e:	4b61      	ldr	r3, [pc, #388]	; (8006ce4 <main+0xa14>)
	keyer_speed = 15;
 8006b60:	200f      	movs	r0, #15
	keyerState = IDLE;
 8006b62:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8006b64:	2210      	movs	r2, #16
 8006b66:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 8006b68:	4b5f      	ldr	r3, [pc, #380]	; (8006ce8 <main+0xa18>)
 8006b6a:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8006b6c:	f7fa fe7a 	bl	8001864 <loadWPM>
	keyer_mode = 1; //->  iambic
 8006b70:	4a5e      	ldr	r2, [pc, #376]	; (8006cec <main+0xa1c>)
	txdelay = 10;
 8006b72:	200a      	movs	r0, #10
	if (!DisableDisplay)
 8006b74:	4b5e      	ldr	r3, [pc, #376]	; (8006cf0 <main+0xa20>)
	keyer_mode = 1; //->  iambic
 8006b76:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 8006b78:	4a5e      	ldr	r2, [pc, #376]	; (8006cf4 <main+0xa24>)
	txdelay = 10;
 8006b7a:	495f      	ldr	r1, [pc, #380]	; (8006cf8 <main+0xa28>)
	keyer_swap = 0; //->  DI/DAH
 8006b7c:	7014      	strb	r4, [r2, #0]
	if (!DisableDisplay)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8006b80:	4a5e      	ldr	r2, [pc, #376]	; (8006cfc <main+0xa2c>)
	txdelay = 10;
 8006b82:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 8006b84:	6015      	str	r5, [r2, #0]
	if (!DisableDisplay)
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d045      	beq.n	8006c16 <main+0x946>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8006b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b8e:	495c      	ldr	r1, [pc, #368]	; (8006d00 <main+0xa30>)
 8006b90:	4829      	ldr	r0, [pc, #164]	; (8006c38 <main+0x968>)
 8006b92:	f001 fed9 	bl	8008948 <HAL_ADCEx_MultiModeStart_DMA>
 8006b96:	b110      	cbz	r0, 8006b9e <main+0x8ce>
		Error_Handler();
 8006b98:	f7fe ff54 	bl	8005a44 <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8006b9c:	e7fe      	b.n	8006b9c <main+0x8cc>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8006b9e:	4859      	ldr	r0, [pc, #356]	; (8006d04 <main+0xa34>)
 8006ba0:	f006 fa2e 	bl	800d000 <HAL_TIM_Base_Start_IT>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1f6      	bne.n	8006b98 <main+0x8c8>
	HAL_TIM_Base_Start(&htim6);
 8006baa:	4857      	ldr	r0, [pc, #348]	; (8006d08 <main+0xa38>)
 8006bac:	f006 f9d0 	bl	800cf50 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8006bb0:	4856      	ldr	r0, [pc, #344]	; (8006d0c <main+0xa3c>)
 8006bb2:	f006 f9cd 	bl	800cf50 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4855      	ldr	r0, [pc, #340]	; (8006d10 <main+0xa40>)
 8006bba:	f002 f8cd 	bl	8008d58 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8006bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc2:	4a54      	ldr	r2, [pc, #336]	; (8006d14 <main+0xa44>)
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4852      	ldr	r0, [pc, #328]	; (8006d10 <main+0xa40>)
 8006bc8:	9400      	str	r4, [sp, #0]
 8006bca:	f002 f8f9 	bl	8008dc0 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fdee 	bl	80077b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8006bd4:	2110      	movs	r1, #16
 8006bd6:	484e      	ldr	r0, [pc, #312]	; (8006d10 <main+0xa40>)
 8006bd8:	f002 f8be 	bl	8008d58 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8006bdc:	4623      	mov	r3, r4
 8006bde:	2110      	movs	r1, #16
 8006be0:	4622      	mov	r2, r4
 8006be2:	484b      	ldr	r0, [pc, #300]	; (8006d10 <main+0xa40>)
 8006be4:	f002 f978 	bl	8008ed8 <HAL_DAC_SetValue>
	WSPRBeaconState = NO_FIX;
 8006be8:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <main+0xa48>)
	if (ENC_BUTTON)
 8006bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bee:	484b      	ldr	r0, [pc, #300]	; (8006d1c <main+0xa4c>)
	WSPRBeaconState = NO_FIX;
 8006bf0:	701c      	strb	r4, [r3, #0]
	if (ENC_BUTTON)
 8006bf2:	f003 fe63 	bl	800a8bc <HAL_GPIO_ReadPin>
 8006bf6:	b188      	cbz	r0, 8006c1c <main+0x94c>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfe:	f009 f8f3 	bl	800fde8 <tud_task_ext>
		cdc_task();
 8006c02:	f7fe fb25 	bl	8005250 <cdc_task>
		UserInput();
 8006c06:	f7fe ffeb 	bl	8005be0 <UserInput>
		DCF77StatusDisplay();
 8006c0a:	f7fb fa11 	bl	8002030 <DCF77StatusDisplay>
		HAL_Delay(200);
 8006c0e:	20c8      	movs	r0, #200	; 0xc8
 8006c10:	f000 fdb6 	bl	8007780 <HAL_Delay>
	while (1)
 8006c14:	e7f0      	b.n	8006bf8 <main+0x928>
 8006c16:	f7fe f8b9 	bl	8004d8c <DisplayStatus.part.0>
 8006c1a:	e7b6      	b.n	8006b8a <main+0x8ba>
		SetMode((Mode)CW);
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f7fb fbd7 	bl	80023d0 <SetMode>
		LOfreq = DCF77_FREQ;
 8006c22:	493f      	ldr	r1, [pc, #252]	; (8006d20 <main+0xa50>)
 8006c24:	483f      	ldr	r0, [pc, #252]	; (8006d24 <main+0xa54>)
		WSPRBeaconMode = 1;
 8006c26:	2201      	movs	r2, #1
 8006c28:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <main+0xa58>)
		LOfreq = DCF77_FREQ;
 8006c2a:	6008      	str	r0, [r1, #0]
		WSPRBeaconMode = 1;
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e7e3      	b.n	8006bf8 <main+0x928>
 8006c30:	8f04fefd 	.word	0x8f04fefd
 8006c34:	3feffff9 	.word	0x3feffff9
 8006c38:	2400a360 	.word	0x2400a360
 8006c3c:	2400a3c4 	.word	0x2400a3c4
 8006c40:	240061ac 	.word	0x240061ac
 8006c44:	2400ab0c 	.word	0x2400ab0c
 8006c48:	240061a4 	.word	0x240061a4
 8006c4c:	3dcccccd 	.word	0x3dcccccd
 8006c50:	24007b58 	.word	0x24007b58
 8006c54:	44228000 	.word	0x44228000
 8006c58:	2400ac94 	.word	0x2400ac94
 8006c5c:	2400afc4 	.word	0x2400afc4
 8006c60:	240061a0 	.word	0x240061a0
 8006c64:	3f7cac08 	.word	0x3f7cac08
 8006c68:	24006190 	.word	0x24006190
 8006c6c:	240006f8 	.word	0x240006f8
 8006c70:	2400617c 	.word	0x2400617c
 8006c74:	24000700 	.word	0x24000700
 8006c78:	24000f34 	.word	0x24000f34
 8006c7c:	24006218 	.word	0x24006218
 8006c80:	24007b50 	.word	0x24007b50
 8006c84:	24007b40 	.word	0x24007b40
 8006c88:	3f7fdf3b 	.word	0x3f7fdf3b
 8006c8c:	3f7ffcb9 	.word	0x3f7ffcb9
 8006c90:	24005168 	.word	0x24005168
 8006c94:	001e0002 	.word	0x001e0002
 8006c98:	24000704 	.word	0x24000704
 8006c9c:	3949539c 	.word	0x3949539c
 8006ca0:	3ca3d70a 	.word	0x3ca3d70a
 8006ca4:	2400afc8 	.word	0x2400afc8
 8006ca8:	24005164 	.word	0x24005164
 8006cac:	4af42400 	.word	0x4af42400
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	01012e00 	.word	0x01012e00
 8006cb8:	3b800000 	.word	0x3b800000
 8006cbc:	24000f30 	.word	0x24000f30
 8006cc0:	3c23d70a 	.word	0x3c23d70a
 8006cc4:	24000f20 	.word	0x24000f20
 8006cc8:	24003050 	.word	0x24003050
 8006ccc:	24007b44 	.word	0x24007b44
 8006cd0:	24000210 	.word	0x24000210
 8006cd4:	240061c0 	.word	0x240061c0
 8006cd8:	24000f54 	.word	0x24000f54
 8006cdc:	240061b4 	.word	0x240061b4
 8006ce0:	2400ac85 	.word	0x2400ac85
 8006ce4:	2400ac84 	.word	0x2400ac84
 8006ce8:	2400ac88 	.word	0x2400ac88
 8006cec:	2400ac86 	.word	0x2400ac86
 8006cf0:	24000f50 	.word	0x24000f50
 8006cf4:	2400ac8c 	.word	0x2400ac8c
 8006cf8:	2400c765 	.word	0x2400c765
 8006cfc:	24006210 	.word	0x24006210
 8006d00:	24007340 	.word	0x24007340
 8006d04:	2400aba4 	.word	0x2400aba4
 8006d08:	2400ab58 	.word	0x2400ab58
 8006d0c:	2400aa74 	.word	0x2400aa74
 8006d10:	2400a42c 	.word	0x2400a42c
 8006d14:	24000720 	.word	0x24000720
 8006d18:	24007321 	.word	0x24007321
 8006d1c:	58020c00 	.word	0x58020c00
 8006d20:	24006178 	.word	0x24006178
 8006d24:	47975e00 	.word	0x47975e00
 8006d28:	24007320 	.word	0x24007320

08006d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d2e:	4c14      	ldr	r4, [pc, #80]	; (8006d80 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006d30:	2102      	movs	r1, #2
{
 8006d32:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006d34:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d36:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006d3a:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006d44:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006d48:	400b      	ands	r3, r1
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006d4e:	f001 ff8b 	bl	8008c68 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8006d52:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006d56:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8006d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006d60:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006d6c:	f000 fd20 	bl	80077b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8006d70:	f000 fd32 	bl	80077d8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006d74:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d76:	b002      	add	sp, #8
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006d7c:	f000 bd22 	b.w	80077c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8006d80:	58024400 	.word	0x58024400

08006d84 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8006d84:	494c      	ldr	r1, [pc, #304]	; (8006eb8 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d86:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8006d88:	6802      	ldr	r2, [r0, #0]
{
 8006d8a:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8006d8c:	428a      	cmp	r2, r1
{
 8006d8e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d90:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006d94:	9306      	str	r3, [sp, #24]
 8006d96:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8006d9a:	d029      	beq.n	8006df0 <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8006d9c:	4b47      	ldr	r3, [pc, #284]	; (8006ebc <HAL_ADC_MspInit+0x138>)
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006da2:	b00a      	add	sp, #40	; 0x28
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006da6:	4a46      	ldr	r2, [pc, #280]	; (8006ec0 <HAL_ADC_MspInit+0x13c>)
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006dac:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006dae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006db0:	d070      	beq.n	8006e94 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db2:	4b44      	ldr	r3, [pc, #272]	; (8006ec4 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006db4:	2402      	movs	r4, #2
 8006db6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006db8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dbe:	4842      	ldr	r0, [pc, #264]	; (8006ec8 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc0:	f042 0202 	orr.w	r2, r2, #2
 8006dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006dd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd8:	f003 fc36 	bl	800a648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2012      	movs	r0, #18
 8006de0:	4611      	mov	r1, r2
 8006de2:	f001 ff41 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006de6:	2012      	movs	r0, #18
 8006de8:	f001 ff7c 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 8006dec:	b00a      	add	sp, #40	; 0x28
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006df0:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <HAL_ADC_MspInit+0x13c>)
 8006df2:	4604      	mov	r4, r0
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006df8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006dfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006dfc:	d03c      	beq.n	8006e78 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	4831      	ldr	r0, [pc, #196]	; (8006ec8 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8006e08:	4d30      	ldr	r5, [pc, #192]	; (8006ecc <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e0a:	f042 0202 	orr.w	r2, r2, #2
 8006e0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e12:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e1e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e20:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e26:	f003 fc0f 	bl	800a648 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8006e2a:	4929      	ldr	r1, [pc, #164]	; (8006ed0 <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006e2c:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e2e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006e30:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e32:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006e34:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e40:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e44:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e50:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8006e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e58:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006e5a:	f002 fa5d 	bl	8009318 <HAL_DMA_Init>
 8006e5e:	bb38      	cbnz	r0, 8006eb0 <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006e60:	2200      	movs	r2, #0
 8006e62:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006e64:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006e66:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006e68:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006e6a:	f001 fefd 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006e6e:	2012      	movs	r0, #18
 8006e70:	f001 ff38 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 8006e74:	b00a      	add	sp, #40	; 0x28
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006e78:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <HAL_ADC_MspInit+0x140>)
 8006e7a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006e7e:	f042 0220 	orr.w	r2, r2, #32
 8006e82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	e7b4      	b.n	8006dfe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_ADC_MspInit+0x140>)
 8006e96:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006e9a:	f042 0220 	orr.w	r2, r2, #32
 8006e9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	e780      	b.n	8006db2 <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 8006eb0:	f7fe fdc8 	bl	8005a44 <Error_Handler>
 8006eb4:	e7d4      	b.n	8006e60 <HAL_ADC_MspInit+0xdc>
 8006eb6:	bf00      	nop
 8006eb8:	40022000 	.word	0x40022000
 8006ebc:	40022100 	.word	0x40022100
 8006ec0:	2400c770 	.word	0x2400c770
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	58020400 	.word	0x58020400
 8006ecc:	2400a440 	.word	0x2400a440
 8006ed0:	40020010 	.word	0x40020010

08006ed4 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8006ed4:	4b2c      	ldr	r3, [pc, #176]	; (8006f88 <HAL_DAC_MspInit+0xb4>)
 8006ed6:	6802      	ldr	r2, [r0, #0]
{
 8006ed8:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8006eda:	429a      	cmp	r2, r3
{
 8006edc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ede:	f04f 0400 	mov.w	r4, #0
 8006ee2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006ee6:	9404      	str	r4, [sp, #16]
 8006ee8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8006eec:	d001      	beq.n	8006ef2 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006eee:	b008      	add	sp, #32
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006ef2:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <HAL_DAC_MspInit+0xb8>)
 8006ef4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef6:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006ef8:	4e25      	ldr	r6, [pc, #148]	; (8006f90 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006efa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006efe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006f02:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006f06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006f0a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006f0e:	9200      	str	r2, [sp, #0]
 8006f10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f1e:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f2a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f2c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2e:	4819      	ldr	r0, [pc, #100]	; (8006f94 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f34:	f003 fb88 	bl	800a648 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006f3a:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006f3c:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006f3e:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f40:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006f42:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f48:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f4e:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f54:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006f56:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f58:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f5a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f62:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006f64:	f002 f9d8 	bl	8009318 <HAL_DMA_Init>
 8006f68:	b958      	cbnz	r0, 8006f82 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006f6e:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006f70:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006f72:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006f74:	f001 fe78 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f78:	2036      	movs	r0, #54	; 0x36
 8006f7a:	f001 feb3 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 8006f7e:	b008      	add	sp, #32
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006f82:	f7fe fd5f 	bl	8005a44 <Error_Handler>
 8006f86:	e7f0      	b.n	8006f6a <HAL_DAC_MspInit+0x96>
 8006f88:	40007400 	.word	0x40007400
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	2400a4b8 	.word	0x2400a4b8
 8006f94:	58020000 	.word	0x58020000
 8006f98:	40020028 	.word	0x40020028
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa2:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8006fa4:	6801      	ldr	r1, [r0, #0]
{
 8006fa6:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8006fa8:	4291      	cmp	r1, r2
{
 8006faa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006fb4:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8006fb6:	d001      	beq.n	8006fbc <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8006fb8:	b008      	add	sp, #32
 8006fba:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8006fbc:	4b15      	ldr	r3, [pc, #84]	; (8007014 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8006fbe:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc0:	a902      	add	r1, sp, #8
 8006fc2:	4815      	ldr	r0, [pc, #84]	; (8007018 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8006fc4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fcc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006fd0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006fd4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006fd8:	9200      	str	r2, [sp, #0]
 8006fda:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fe0:	f042 0202 	orr.w	r2, r2, #2
 8006fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8006fec:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fee:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ff2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8007008 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ffa:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ffe:	f003 fb23 	bl	800a648 <HAL_GPIO_Init>
}
 8007002:	b008      	add	sp, #32
 8007004:	bd10      	pop	{r4, pc}
 8007006:	bf00      	nop
 8007008:	00000400 	.word	0x00000400
 800700c:	00000002 	.word	0x00000002
 8007010:	58002400 	.word	0x58002400
 8007014:	58024400 	.word	0x58024400
 8007018:	58020400 	.word	0x58020400
 800701c:	00000000 	.word	0x00000000

08007020 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8007020:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007022:	2200      	movs	r2, #0
{
 8007024:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800702a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702c:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8007030:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8007034:	920a      	str	r2, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM2)
 8007036:	d01f      	beq.n	8007078 <HAL_TIM_Base_MspInit+0x58>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8007038:	4939      	ldr	r1, [pc, #228]	; (8007120 <HAL_TIM_Base_MspInit+0x100>)
 800703a:	428b      	cmp	r3, r1
 800703c:	d032      	beq.n	80070a4 <HAL_TIM_Base_MspInit+0x84>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 800703e:	4939      	ldr	r1, [pc, #228]	; (8007124 <HAL_TIM_Base_MspInit+0x104>)
 8007040:	428b      	cmp	r3, r1
 8007042:	d050      	beq.n	80070e6 <HAL_TIM_Base_MspInit+0xc6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8007044:	4938      	ldr	r1, [pc, #224]	; (8007128 <HAL_TIM_Base_MspInit+0x108>)
 8007046:	428b      	cmp	r3, r1
 8007048:	d001      	beq.n	800704e <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800704a:	b00c      	add	sp, #48	; 0x30
 800704c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800704e:	4b37      	ldr	r3, [pc, #220]	; (800712c <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8007050:	2037      	movs	r0, #55	; 0x37
 8007052:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007054:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8007058:	f044 0420 	orr.w	r4, r4, #32
 800705c:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8007060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	9305      	str	r3, [sp, #20]
 800706a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800706c:	f001 fdfc 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007070:	2037      	movs	r0, #55	; 0x37
 8007072:	f001 fe37 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 8007076:	e7e8      	b.n	800704a <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007078:	4b2c      	ldr	r3, [pc, #176]	; (800712c <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800707a:	2104      	movs	r1, #4
 800707c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800707e:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8007082:	f044 0401 	orr.w	r4, r4, #1
 8007086:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800708a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8007096:	f001 fde7 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800709a:	201c      	movs	r0, #28
 800709c:	f001 fe22 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 80070a0:	b00c      	add	sp, #48	; 0x30
 80070a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80070a4:	4b21      	ldr	r3, [pc, #132]	; (800712c <HAL_TIM_Base_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80070a6:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a8:	a906      	add	r1, sp, #24
 80070aa:	4821      	ldr	r0, [pc, #132]	; (8007130 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80070ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80070b0:	4322      	orrs	r2, r4
 80070b2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80070b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80070ba:	4022      	ands	r2, r4
 80070bc:	9202      	str	r2, [sp, #8]
 80070be:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80070c4:	4322      	orrs	r2, r4
 80070c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80070ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80070ce:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070d0:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80070d2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8007118 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070d6:	9303      	str	r3, [sp, #12]
 80070d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80070da:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070de:	f003 fab3 	bl	800a648 <HAL_GPIO_Init>
}
 80070e2:	b00c      	add	sp, #48	; 0x30
 80070e4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070e8:	2101      	movs	r1, #1
 80070ea:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070ec:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80070f0:	f044 0410 	orr.w	r4, r4, #16
 80070f4:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80070f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007104:	f001 fdb0 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007108:	2036      	movs	r0, #54	; 0x36
 800710a:	f001 fdeb 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 800710e:	b00c      	add	sp, #48	; 0x30
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	00000010 	.word	0x00000010
 800711c:	00000002 	.word	0x00000002
 8007120:	40000400 	.word	0x40000400
 8007124:	40001000 	.word	0x40001000
 8007128:	40001400 	.word	0x40001400
 800712c:	58024400 	.word	0x58024400
 8007130:	58020400 	.word	0x58020400
 8007134:	00000000 	.word	0x00000000

08007138 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8007138:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800713a:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 800713c:	6801      	ldr	r1, [r0, #0]
{
 800713e:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8007140:	4291      	cmp	r1, r2
{
 8007142:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007144:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007148:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800714c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 800714e:	d002      	beq.n	8007156 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007150:	b009      	add	sp, #36	; 0x24
 8007152:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007156:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007158:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800715a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800715c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007160:	f042 0204 	orr.w	r2, r2, #4
 8007164:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8007168:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800716c:	f002 0204 	and.w	r2, r2, #4
 8007170:	9200      	str	r2, [sp, #0]
 8007172:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007174:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007178:	f042 0208 	orr.w	r2, r2, #8
 800717c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007180:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007186:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007188:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800718c:	480a      	ldr	r0, [pc, #40]	; (80071b8 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800718e:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007194:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80071a8 <HAL_TIM_Encoder_MspInit+0x70>
 8007198:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800719c:	f003 fa54 	bl	800a648 <HAL_GPIO_Init>
}
 80071a0:	b009      	add	sp, #36	; 0x24
 80071a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80071a6:	bf00      	nop
 80071a8:	00003000 	.word	0x00003000
 80071ac:	00000002 	.word	0x00000002
 80071b0:	40000800 	.word	0x40000800
 80071b4:	58024400 	.word	0x58024400
 80071b8:	58020c00 	.word	0x58020c00

080071bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071bc:	b5d0      	push	{r4, r6, r7, lr}
 80071be:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c0:	2100      	movs	r1, #0
{
 80071c2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071c4:	22c0      	movs	r2, #192	; 0xc0
 80071c6:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c8:	9108      	str	r1, [sp, #32]
 80071ca:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80071ce:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071d2:	f00a f991 	bl	80114f8 <memset>
  if(huart->Instance==USART3)
 80071d6:	4b2e      	ldr	r3, [pc, #184]	; (8007290 <HAL_UART_MspInit+0xd4>)
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d001      	beq.n	80071e2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80071de:	b03a      	add	sp, #232	; 0xe8
 80071e0:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80071e2:	2202      	movs	r2, #2
 80071e4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071e6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80071e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071ec:	f004 fc20 	bl	800ba30 <HAL_RCCEx_PeriphCLKConfig>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d149      	bne.n	8007288 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80071f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80071fa:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80071fc:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80071fe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007202:	2600      	movs	r6, #0
 8007204:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007206:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800720a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800720e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007212:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007216:	9201      	str	r2, [sp, #4]
 8007218:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800721a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800721e:	f042 0202 	orr.w	r2, r2, #2
 8007222:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007226:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800722a:	f002 0202 	and.w	r2, r2, #2
 800722e:	9202      	str	r2, [sp, #8]
 8007230:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007232:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007236:	f042 0208 	orr.w	r2, r2, #8
 800723a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800723e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007242:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007244:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007248:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800724c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800724e:	a904      	add	r1, sp, #16
 8007250:	4811      	ldr	r0, [pc, #68]	; (8007298 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007252:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007254:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007258:	f003 f9f6 	bl	800a648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800725c:	2302      	movs	r3, #2
 800725e:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007262:	a904      	add	r1, sp, #16
 8007264:	480d      	ldr	r0, [pc, #52]	; (800729c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007266:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007268:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800726c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007270:	f003 f9ea 	bl	800a648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8007274:	2200      	movs	r2, #0
 8007276:	2101      	movs	r1, #1
 8007278:	2027      	movs	r0, #39	; 0x27
 800727a:	f001 fcf5 	bl	8008c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800727e:	2027      	movs	r0, #39	; 0x27
 8007280:	f001 fd30 	bl	8008ce4 <HAL_NVIC_EnableIRQ>
}
 8007284:	b03a      	add	sp, #232	; 0xe8
 8007286:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8007288:	f7fe fbdc 	bl	8005a44 <Error_Handler>
 800728c:	e7b2      	b.n	80071f4 <HAL_UART_MspInit+0x38>
 800728e:	bf00      	nop
 8007290:	40004800 	.word	0x40004800
 8007294:	58024400 	.word	0x58024400
 8007298:	58020400 	.word	0x58020400
 800729c:	58020c00 	.word	0x58020c00

080072a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80072a0:	b510      	push	{r4, lr}
 80072a2:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a4:	2100      	movs	r1, #0
{
 80072a6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072a8:	22c0      	movs	r2, #192	; 0xc0
 80072aa:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ac:	9106      	str	r1, [sp, #24]
 80072ae:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80072b2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072b6:	f00a f91f 	bl	80114f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80072ba:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_PCD_MspInit+0xa8>)
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d001      	beq.n	80072c6 <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80072c2:	b038      	add	sp, #224	; 0xe0
 80072c4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80072c6:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8007338 <HAL_PCD_MspInit+0x98>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80072ca:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072ce:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80072d0:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80072d4:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072d6:	f004 fbab 	bl	800ba30 <HAL_RCCEx_PeriphCLKConfig>
 80072da:	bb50      	cbnz	r0, 8007332 <HAL_PCD_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072dc:	4c1b      	ldr	r4, [pc, #108]	; (800734c <HAL_PCD_MspInit+0xac>)
    HAL_PWREx_EnableUSBVoltageDetector();
 80072de:	f003 fc49 	bl	800ab74 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80072e2:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ea:	4819      	ldr	r0, [pc, #100]	; (8007350 <HAL_PCD_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80072f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80072f8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072fa:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fc:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007300:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007340 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007308:	2300      	movs	r3, #0
 800730a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800730e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007312:	f003 f999 	bl	800a648 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007316:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800731a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800731e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007322:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8007326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	9b01      	ldr	r3, [sp, #4]
}
 800732e:	b038      	add	sp, #224	; 0xe0
 8007330:	bd10      	pop	{r4, pc}
      Error_Handler();
 8007332:	f7fe fb87 	bl	8005a44 <Error_Handler>
 8007336:	e7d1      	b.n	80072dc <HAL_PCD_MspInit+0x3c>
 8007338:	00040000 	.word	0x00040000
 800733c:	00000000 	.word	0x00000000
 8007340:	00001800 	.word	0x00001800
 8007344:	00000002 	.word	0x00000002
 8007348:	40080000 	.word	0x40080000
 800734c:	58024400 	.word	0x58024400
 8007350:	58020000 	.word	0x58020000

08007354 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop

08007358 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007358:	e7fe      	b.n	8007358 <HardFault_Handler>
 800735a:	bf00      	nop

0800735c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800735c:	e7fe      	b.n	800735c <MemManage_Handler>
 800735e:	bf00      	nop

08007360 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007360:	e7fe      	b.n	8007360 <BusFault_Handler>
 8007362:	bf00      	nop

08007364 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007364:	e7fe      	b.n	8007364 <UsageFault_Handler>
 8007366:	bf00      	nop

08007368 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8007368:	f000 b9a0 	b.w	80076ac <ADC3_IRQHandler>

0800736c <DebugMon_Handler>:
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop

08007370 <PendSV_Handler>:
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop

08007374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007374:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007376:	f000 f9f1 	bl	800775c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 800737a:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <SysTick_Handler+0x3c>)
 800737c:	490d      	ldr	r1, [pc, #52]	; (80073b4 <SysTick_Handler+0x40>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <SysTick_Handler+0x44>)
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800738a:	d310      	bcc.n	80073ae <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 800738c:	490b      	ldr	r1, [pc, #44]	; (80073bc <SysTick_Handler+0x48>)
 800738e:	4a0c      	ldr	r2, [pc, #48]	; (80073c0 <SysTick_Handler+0x4c>)
 8007390:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8007392:	480c      	ldr	r0, [pc, #48]	; (80073c4 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8007394:	3301      	adds	r3, #1
 8007396:	fb03 f202 	mul.w	r2, r3, r2
 800739a:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800739c:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 80073a0:	d305      	bcc.n	80073ae <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 80073a4:	2000      	movs	r0, #0
			SystemMinutes++;
 80073a6:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 80073a8:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 80073aa:	3301      	adds	r3, #1
 80073ac:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80073ae:	bd08      	pop	{r3, pc}
 80073b0:	2400c7b8 	.word	0x2400c7b8
 80073b4:	26e978d5 	.word	0x26e978d5
 80073b8:	00418937 	.word	0x00418937
 80073bc:	240061fc 	.word	0x240061fc
 80073c0:	eeeeeeef 	.word	0xeeeeeeef
 80073c4:	04444444 	.word	0x04444444
 80073c8:	240061f8 	.word	0x240061f8

080073cc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <DMA1_Stream0_IRQHandler+0x8>)
 80073ce:	f002 bdeb 	b.w	8009fa8 <HAL_DMA_IRQHandler>
 80073d2:	bf00      	nop
 80073d4:	2400a440 	.word	0x2400a440

080073d8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <DMA1_Stream1_IRQHandler+0x8>)
 80073da:	f002 bde5 	b.w	8009fa8 <HAL_DMA_IRQHandler>
 80073de:	bf00      	nop
 80073e0:	2400a4b8 	.word	0x2400a4b8

080073e4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80073e4:	4804      	ldr	r0, [pc, #16]	; (80073f8 <ADC_IRQHandler+0x14>)
{
 80073e6:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 80073e8:	f000 fa16 	bl	8007818 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80073ec:	4803      	ldr	r0, [pc, #12]	; (80073fc <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80073ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80073f2:	f000 ba11 	b.w	8007818 <HAL_ADC_IRQHandler>
 80073f6:	bf00      	nop
 80073f8:	2400a360 	.word	0x2400a360
 80073fc:	2400a3c4 	.word	0x2400a3c4

08007400 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <TIM2_IRQHandler+0x8>)
 8007402:	f006 ba07 	b.w	800d814 <HAL_TIM_IRQHandler>
 8007406:	bf00      	nop
 8007408:	2400aa74 	.word	0x2400aa74

0800740c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <USART3_IRQHandler+0x8>)
 800740e:	f006 bb29 	b.w	800da64 <HAL_UART_IRQHandler>
 8007412:	bf00      	nop
 8007414:	2400abf0 	.word	0x2400abf0

08007418 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8007418:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800741c:	f003 ba58 	b.w	800a8d0 <HAL_GPIO_EXTI_IRQHandler>

08007420 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8007420:	4804      	ldr	r0, [pc, #16]	; (8007434 <TIM6_DAC_IRQHandler+0x14>)
{
 8007422:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8007424:	f001 fd8e 	bl	8008f44 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8007428:	4803      	ldr	r0, [pc, #12]	; (8007438 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800742a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800742e:	f006 b9f1 	b.w	800d814 <HAL_TIM_IRQHandler>
 8007432:	bf00      	nop
 8007434:	2400a42c 	.word	0x2400a42c
 8007438:	2400ab58 	.word	0x2400ab58

0800743c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <TIM7_IRQHandler+0x8>)
 800743e:	f006 b9e9 	b.w	800d814 <HAL_TIM_IRQHandler>
 8007442:	bf00      	nop
 8007444:	2400aba4 	.word	0x2400aba4

08007448 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007448:	2001      	movs	r0, #1
 800744a:	4770      	bx	lr

0800744c <_kill>:

int _kill(int pid, int sig)
{
 800744c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800744e:	f00a f809 	bl	8011464 <__errno>
 8007452:	2216      	movs	r2, #22
 8007454:	4603      	mov	r3, r0
	return -1;
}
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800745a:	601a      	str	r2, [r3, #0]
}
 800745c:	bd08      	pop	{r3, pc}
 800745e:	bf00      	nop

08007460 <_exit>:

void _exit (int status)
{
 8007460:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007462:	f009 ffff 	bl	8011464 <__errno>
 8007466:	2316      	movs	r3, #22
 8007468:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800746a:	e7fe      	b.n	800746a <_exit+0xa>

0800746c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800746c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800746e:	1e16      	subs	r6, r2, #0
 8007470:	dd07      	ble.n	8007482 <_read+0x16>
 8007472:	460c      	mov	r4, r1
 8007474:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8007476:	f3af 8000 	nop.w
 800747a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800747e:	42a5      	cmp	r5, r4
 8007480:	d1f9      	bne.n	8007476 <_read+0xa>
	}

return len;
}
 8007482:	4630      	mov	r0, r6
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	bf00      	nop

08007488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007488:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800748a:	1e16      	subs	r6, r2, #0
 800748c:	dd07      	ble.n	800749e <_write+0x16>
 800748e:	460c      	mov	r4, r1
 8007490:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8007492:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007496:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800749a:	42ac      	cmp	r4, r5
 800749c:	d1f9      	bne.n	8007492 <_write+0xa>
	}
	return len;
}
 800749e:	4630      	mov	r0, r6
 80074a0:	bd70      	pop	{r4, r5, r6, pc}
 80074a2:	bf00      	nop

080074a4 <_close>:

int _close(int file)
{
	return -1;
}
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80074ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80074b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80074b2:	604b      	str	r3, [r1, #4]
}
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop

080074b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80074b8:	2001      	movs	r0, #1
 80074ba:	4770      	bx	lr

080074bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80074bc:	2000      	movs	r0, #0
 80074be:	4770      	bx	lr

080074c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074c0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80074c2:	4c0d      	ldr	r4, [pc, #52]	; (80074f8 <_sbrk+0x38>)
{
 80074c4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074c6:	490d      	ldr	r1, [pc, #52]	; (80074fc <_sbrk+0x3c>)
 80074c8:	4d0d      	ldr	r5, [pc, #52]	; (8007500 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80074ca:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074cc:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80074ce:	b12a      	cbz	r2, 80074dc <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074d0:	4413      	add	r3, r2
 80074d2:	428b      	cmp	r3, r1
 80074d4:	d808      	bhi.n	80074e8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80074d6:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80074d8:	6023      	str	r3, [r4, #0]
}
 80074da:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <_sbrk+0x44>)
 80074de:	4602      	mov	r2, r0
 80074e0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80074e2:	4413      	add	r3, r2
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d9f6      	bls.n	80074d6 <_sbrk+0x16>
    errno = ENOMEM;
 80074e8:	f009 ffbc 	bl	8011464 <__errno>
 80074ec:	230c      	movs	r3, #12
    return (void *)-1;
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80074f2:	6003      	str	r3, [r0, #0]
}
 80074f4:	4610      	mov	r0, r2
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	2400c774 	.word	0x2400c774
 80074fc:	24080000 	.word	0x24080000
 8007500:	00000420 	.word	0x00000420
 8007504:	2400d448 	.word	0x2400d448

08007508 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007508:	4929      	ldr	r1, [pc, #164]	; (80075b0 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800750c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8007514:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	2b06      	cmp	r3, #6
 8007522:	d805      	bhi.n	8007530 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007524:	6813      	ldr	r3, [r2, #0]
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	f043 0307 	orr.w	r3, r3, #7
 800752e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007532:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007534:	4a21      	ldr	r2, [pc, #132]	; (80075bc <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8007536:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007538:	481e      	ldr	r0, [pc, #120]	; (80075b4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800753a:	f041 0101 	orr.w	r1, r1, #1
 800753e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007540:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	400a      	ands	r2, r1
 8007546:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007548:	6803      	ldr	r3, [r0, #0]
 800754a:	071b      	lsls	r3, r3, #28
 800754c:	d505      	bpl.n	800755a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800754e:	6803      	ldr	r3, [r0, #0]
 8007550:	f023 030f 	bic.w	r3, r3, #15
 8007554:	f043 0307 	orr.w	r3, r3, #7
 8007558:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800755a:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <SystemInit+0xb0>)
 800755c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800755e:	4918      	ldr	r1, [pc, #96]	; (80075c0 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8007560:	4c18      	ldr	r4, [pc, #96]	; (80075c4 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8007562:	4819      	ldr	r0, [pc, #100]	; (80075c8 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8007564:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007566:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007568:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800756a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800756c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800756e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007572:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007574:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007576:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007578:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800757a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800757c:	4c13      	ldr	r4, [pc, #76]	; (80075cc <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800757e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007582:	4913      	ldr	r1, [pc, #76]	; (80075d0 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8007584:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8007586:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	4019      	ands	r1, r3
 800758c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007590:	d203      	bcs.n	800759a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007592:	4b10      	ldr	r3, [pc, #64]	; (80075d4 <SystemInit+0xcc>)
 8007594:	2201      	movs	r2, #1
 8007596:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800759a:	490f      	ldr	r1, [pc, #60]	; (80075d8 <SystemInit+0xd0>)
 800759c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075a0:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <SystemInit+0xa8>)
 80075a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80075a6:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80075a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075ac:	609a      	str	r2, [r3, #8]
}
 80075ae:	4770      	bx	lr
 80075b0:	e000ed00 	.word	0xe000ed00
 80075b4:	52002000 	.word	0x52002000
 80075b8:	58024400 	.word	0x58024400
 80075bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80075c0:	01010280 	.word	0x01010280
 80075c4:	02020200 	.word	0x02020200
 80075c8:	01ff0000 	.word	0x01ff0000
 80075cc:	5c001000 	.word	0x5c001000
 80075d0:	ffff0000 	.word	0xffff0000
 80075d4:	51008000 	.word	0x51008000
 80075d8:	52004000 	.word	0x52004000

080075dc <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
	return (uint8_t const *)&desc_device;
}
 80075dc:	4800      	ldr	r0, [pc, #0]	; (80075e0 <tud_descriptor_device_cb+0x4>)
 80075de:	4770      	bx	lr
 80075e0:	08018c1c 	.word	0x08018c1c

080075e4 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
	(void)index; // for multiple configurations
	return desc_configuration;
}
 80075e4:	4800      	ldr	r0, [pc, #0]	; (80075e8 <tud_descriptor_configuration_cb+0x4>)
 80075e6:	4770      	bx	lr
 80075e8:	08018a98 	.word	0x08018a98

080075ec <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80075ec:	b538      	push	{r3, r4, r5, lr}
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 80075ee:	b948      	cbnz	r0, 8007604 <tud_descriptor_string_cb+0x18>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <tud_descriptor_string_cb+0x68>)
 80075f2:	f44f 7341 	mov.w	r3, #772	; 0x304
 80075f6:	4d18      	ldr	r5, [pc, #96]	; (8007658 <tud_descriptor_string_cb+0x6c>)
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	8812      	ldrh	r2, [r2, #0]
 80075fc:	806a      	strh	r2, [r5, #2]
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));

	return _desc_str;
 80075fe:	4816      	ldr	r0, [pc, #88]	; (8007658 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007600:	802b      	strh	r3, [r5, #0]
}
 8007602:	bd38      	pop	{r3, r4, r5, pc}
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8007604:	2806      	cmp	r0, #6
 8007606:	d81f      	bhi.n	8007648 <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <tud_descriptor_string_cb+0x68>)
 800760a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 800760e:	4620      	mov	r0, r4
 8007610:	f7f8 fec6 	bl	80003a0 <strlen>
 8007614:	b2c0      	uxtb	r0, r0
		if (chr_count > 31) chr_count = 31;
 8007616:	281f      	cmp	r0, #31
 8007618:	4602      	mov	r2, r0
 800761a:	bf28      	it	cs
 800761c:	221f      	movcs	r2, #31
		for (uint8_t i = 0; i < chr_count; i++)
 800761e:	b1a8      	cbz	r0, 800764c <tud_descriptor_string_cb+0x60>
 8007620:	4d0d      	ldr	r5, [pc, #52]	; (8007658 <tud_descriptor_string_cb+0x6c>)
 8007622:	1e60      	subs	r0, r4, #1
 8007624:	2300      	movs	r3, #0
 8007626:	4629      	mov	r1, r5
			_desc_str[1 + i] = str[i];
 8007628:	3301      	adds	r3, #1
 800762a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f821 4f02 	strh.w	r4, [r1, #2]!
		for (uint8_t i = 0; i < chr_count; i++)
 8007634:	429a      	cmp	r2, r3
 8007636:	d8f7      	bhi.n	8007628 <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007638:	1c53      	adds	r3, r2, #1
	return _desc_str;
 800763a:	4807      	ldr	r0, [pc, #28]	; (8007658 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 800763c:	b2db      	uxtb	r3, r3
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007644:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 8007646:	e7dc      	b.n	8007602 <tud_descriptor_string_cb+0x16>
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8007648:	2000      	movs	r0, #0
}
 800764a:	bd38      	pop	{r3, r4, r5, pc}
		for (uint8_t i = 0; i < chr_count; i++)
 800764c:	f240 3302 	movw	r3, #770	; 0x302
 8007650:	4d01      	ldr	r5, [pc, #4]	; (8007658 <tud_descriptor_string_cb+0x6c>)
 8007652:	e7d4      	b.n	80075fe <tud_descriptor_string_cb+0x12>
 8007654:	24000320 	.word	0x24000320
 8007658:	2400c778 	.word	0x2400c778

0800765c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800765c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007694 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007660:	f7ff ff52 	bl	8007508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007666:	e003      	b.n	8007670 <LoopCopyDataInit>

08007668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800766a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800766c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800766e:	3104      	adds	r1, #4

08007670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007670:	480a      	ldr	r0, [pc, #40]	; (800769c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8007674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007678:	d3f6      	bcc.n	8007668 <CopyDataInit>
  ldr  r2, =_sbss
 800767a:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800767c:	e002      	b.n	8007684 <LoopFillZerobss>

0800767e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800767e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007680:	f842 3b04 	str.w	r3, [r2], #4

08007684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8007686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007688:	d3f9      	bcc.n	800767e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800768a:	f009 ff03 	bl	8011494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800768e:	f7fe fe1f 	bl	80062d0 <main>
  bx  lr    
 8007692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007694:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8007698:	0801a590 	.word	0x0801a590
  ldr  r0, =_sdata
 800769c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80076a0:	24000518 	.word	0x24000518
  ldr  r2, =_sbss
 80076a4:	24000520 	.word	0x24000520
  ldr  r3, = _ebss
 80076a8:	2400d448 	.word	0x2400d448

080076ac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076ac:	e7fe      	b.n	80076ac <ADC3_IRQHandler>
	...

080076b0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <HAL_InitTick+0x40>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b90b      	cbnz	r3, 80076ba <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80076b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80076b8:	4770      	bx	lr
{
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80076be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076c2:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <HAL_InitTick+0x44>)
 80076c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c8:	6810      	ldr	r0, [r2, #0]
 80076ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80076ce:	f001 fb17 	bl	8008d00 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076d2:	2c0f      	cmp	r4, #15
 80076d4:	d800      	bhi.n	80076d8 <HAL_InitTick+0x28>
 80076d6:	b108      	cbz	r0, 80076dc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80076d8:	2001      	movs	r0, #1
}
 80076da:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076dc:	2200      	movs	r2, #0
 80076de:	4621      	mov	r1, r4
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	f001 fac0 	bl	8008c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076e8:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <HAL_InitTick+0x48>)
 80076ea:	2000      	movs	r0, #0
 80076ec:	601c      	str	r4, [r3, #0]
}
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	2400033c 	.word	0x2400033c
 80076f4:	24000318 	.word	0x24000318
 80076f8:	24000340 	.word	0x24000340

080076fc <HAL_Init>:
{
 80076fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076fe:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007700:	4c12      	ldr	r4, [pc, #72]	; (800774c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007702:	f001 fa9f 	bl	8008c44 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007706:	f003 fe07 	bl	800b318 <HAL_RCC_GetSysClockFreq>
 800770a:	4b11      	ldr	r3, [pc, #68]	; (8007750 <HAL_Init+0x54>)
 800770c:	4911      	ldr	r1, [pc, #68]	; (8007754 <HAL_Init+0x58>)
 800770e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007710:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007712:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007716:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800771a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800771c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800771e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8007722:	490d      	ldr	r1, [pc, #52]	; (8007758 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007724:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007728:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800772a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800772e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007730:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007732:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007734:	f7ff ffbc 	bl	80076b0 <HAL_InitTick>
 8007738:	b110      	cbz	r0, 8007740 <HAL_Init+0x44>
    return HAL_ERROR;
 800773a:	2401      	movs	r4, #1
}
 800773c:	4620      	mov	r0, r4
 800773e:	bd10      	pop	{r4, pc}
 8007740:	4604      	mov	r4, r0
  HAL_MspInit();
 8007742:	f7ff faf3 	bl	8006d2c <HAL_MspInit>
}
 8007746:	4620      	mov	r0, r4
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	2400031c 	.word	0x2400031c
 8007750:	58024400 	.word	0x58024400
 8007754:	08018a30 	.word	0x08018a30
 8007758:	24000318 	.word	0x24000318

0800775c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800775c:	4a03      	ldr	r2, [pc, #12]	; (800776c <HAL_IncTick+0x10>)
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <HAL_IncTick+0x14>)
 8007760:	6811      	ldr	r1, [r2, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	440b      	add	r3, r1
 8007766:	6013      	str	r3, [r2, #0]
}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	2400c7b8 	.word	0x2400c7b8
 8007770:	2400033c 	.word	0x2400033c

08007774 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007774:	4b01      	ldr	r3, [pc, #4]	; (800777c <HAL_GetTick+0x8>)
 8007776:	6818      	ldr	r0, [r3, #0]
}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	2400c7b8 	.word	0x2400c7b8

08007780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007784:	f7ff fff6 	bl	8007774 <HAL_GetTick>
 8007788:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800778a:	1c63      	adds	r3, r4, #1
 800778c:	d002      	beq.n	8007794 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <HAL_Delay+0x20>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007794:	f7ff ffee 	bl	8007774 <HAL_GetTick>
 8007798:	1b43      	subs	r3, r0, r5
 800779a:	42a3      	cmp	r3, r4
 800779c:	d3fa      	bcc.n	8007794 <HAL_Delay+0x14>
  {
  }
}
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	2400033c 	.word	0x2400033c

080077a4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80077a4:	4b01      	ldr	r3, [pc, #4]	; (80077ac <HAL_GetREVID+0x8>)
 80077a6:	6818      	ldr	r0, [r3, #0]
}
 80077a8:	0c00      	lsrs	r0, r0, #16
 80077aa:	4770      	bx	lr
 80077ac:	5c001000 	.word	0x5c001000

080077b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80077b0:	4a03      	ldr	r2, [pc, #12]	; (80077c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b8:	4318      	orrs	r0, r3
 80077ba:	6010      	str	r0, [r2, #0]
}
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	58003c00 	.word	0x58003c00

080077c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80077c4:	4a03      	ldr	r2, [pc, #12]	; (80077d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	f023 0302 	bic.w	r3, r3, #2
 80077cc:	4318      	orrs	r0, r3
 80077ce:	6010      	str	r0, [r2, #0]
}
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	58003c00 	.word	0x58003c00

080077d8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80077d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80077da:	4c0a      	ldr	r4, [pc, #40]	; (8007804 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077e4:	f7ff ffc6 	bl	8007774 <HAL_GetTick>
 80077e8:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80077ea:	e004      	b.n	80077f6 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80077ec:	f7ff ffc2 	bl	8007774 <HAL_GetTick>
 80077f0:	1b40      	subs	r0, r0, r5
 80077f2:	280a      	cmp	r0, #10
 80077f4:	d804      	bhi.n	8007800 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	071b      	lsls	r3, r3, #28
 80077fa:	d5f7      	bpl.n	80077ec <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80077fc:	2000      	movs	r0, #0
}
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007800:	2003      	movs	r0, #3
}
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	58003c00 	.word	0x58003c00

08007808 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007808:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800780a:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800780c:	f7fd fd70 	bl	80052f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007810:	bd08      	pop	{r3, pc}
 8007812:	bf00      	nop

08007814 <HAL_ADC_ErrorCallback>:
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <HAL_ADC_IRQHandler>:
{
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800781a:	4a90      	ldr	r2, [pc, #576]	; (8007a5c <HAL_ADC_IRQHandler+0x244>)
{
 800781c:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800781e:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007820:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007822:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007824:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007826:	f000 8095 	beq.w	8007954 <HAL_ADC_IRQHandler+0x13c>
 800782a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800782e:	4293      	cmp	r3, r2
 8007830:	f000 8090 	beq.w	8007954 <HAL_ADC_IRQHandler+0x13c>
 8007834:	4a8a      	ldr	r2, [pc, #552]	; (8007a60 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007836:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007838:	07a9      	lsls	r1, r5, #30
 800783a:	f007 071f 	and.w	r7, r7, #31
 800783e:	d502      	bpl.n	8007846 <HAL_ADC_IRQHandler+0x2e>
 8007840:	07b2      	lsls	r2, r6, #30
 8007842:	f100 80aa 	bmi.w	800799a <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007846:	0769      	lsls	r1, r5, #29
 8007848:	d579      	bpl.n	800793e <HAL_ADC_IRQHandler+0x126>
 800784a:	0772      	lsls	r2, r6, #29
 800784c:	d577      	bpl.n	800793e <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800784e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007850:	06d2      	lsls	r2, r2, #27
 8007852:	d403      	bmi.n	800785c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007854:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785a:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8007862:	d11c      	bne.n	800789e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007864:	4a7f      	ldr	r2, [pc, #508]	; (8007a64 <HAL_ADC_IRQHandler+0x24c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f000 80e8 	beq.w	8007a3c <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800786c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800786e:	0490      	lsls	r0, r2, #18
 8007870:	d415      	bmi.n	800789e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	0711      	lsls	r1, r2, #28
 8007876:	d512      	bpl.n	800789e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	0752      	lsls	r2, r2, #29
 800787c:	f100 80f6 	bmi.w	8007a6c <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	f022 020c 	bic.w	r2, r2, #12
 8007886:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800788a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788e:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007890:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007892:	04db      	lsls	r3, r3, #19
 8007894:	d403      	bmi.n	800789e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007898:	f043 0301 	orr.w	r3, r3, #1
 800789c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800789e:	4620      	mov	r0, r4
 80078a0:	f7fd fd08 	bl	80052b4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	220c      	movs	r2, #12
 80078a8:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80078aa:	06a8      	lsls	r0, r5, #26
 80078ac:	d54d      	bpl.n	800794a <HAL_ADC_IRQHandler+0x132>
 80078ae:	06b1      	lsls	r1, r6, #26
 80078b0:	d54b      	bpl.n	800794a <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80078b4:	06d1      	lsls	r1, r2, #27
 80078b6:	d403      	bmi.n	80078c0 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80078b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80078ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078be:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80078c0:	4968      	ldr	r1, [pc, #416]	; (8007a64 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80078c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c4:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80078c6:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80078c8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80078cc:	d073      	beq.n	80079b6 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80078ce:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80078d0:	b9d2      	cbnz	r2, 8007908 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80078d2:	018a      	lsls	r2, r1, #6
 80078d4:	f100 80aa 	bmi.w	8007a2c <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	0650      	lsls	r0, r2, #25
 80078dc:	d514      	bpl.n	8007908 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80078de:	0289      	lsls	r1, r1, #10
 80078e0:	d412      	bmi.n	8007908 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	0712      	lsls	r2, r2, #28
 80078e6:	f100 80cc 	bmi.w	8007a82 <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078f0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80078f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80078fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078fc:	05d8      	lsls	r0, r3, #23
 80078fe:	d403      	bmi.n	8007908 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007900:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007908:	4620      	mov	r0, r4
 800790a:	f001 f929 	bl	8008b60 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	2260      	movs	r2, #96	; 0x60
 8007912:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007914:	0629      	lsls	r1, r5, #24
 8007916:	d501      	bpl.n	800791c <HAL_ADC_IRQHandler+0x104>
 8007918:	0632      	lsls	r2, r6, #24
 800791a:	d460      	bmi.n	80079de <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800791c:	05e8      	lsls	r0, r5, #23
 800791e:	d501      	bpl.n	8007924 <HAL_ADC_IRQHandler+0x10c>
 8007920:	05f1      	lsls	r1, r6, #23
 8007922:	d467      	bmi.n	80079f4 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007924:	05aa      	lsls	r2, r5, #22
 8007926:	d501      	bpl.n	800792c <HAL_ADC_IRQHandler+0x114>
 8007928:	05b0      	lsls	r0, r6, #22
 800792a:	d44c      	bmi.n	80079c6 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800792c:	06e9      	lsls	r1, r5, #27
 800792e:	d501      	bpl.n	8007934 <HAL_ADC_IRQHandler+0x11c>
 8007930:	06f2      	lsls	r2, r6, #27
 8007932:	d411      	bmi.n	8007958 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007934:	0568      	lsls	r0, r5, #21
 8007936:	d501      	bpl.n	800793c <HAL_ADC_IRQHandler+0x124>
 8007938:	0571      	lsls	r1, r6, #21
 800793a:	d467      	bmi.n	8007a0c <HAL_ADC_IRQHandler+0x1f4>
}
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800793e:	0728      	lsls	r0, r5, #28
 8007940:	d5b3      	bpl.n	80078aa <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007942:	0731      	lsls	r1, r6, #28
 8007944:	d483      	bmi.n	800784e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007946:	06a8      	lsls	r0, r5, #26
 8007948:	d4b1      	bmi.n	80078ae <HAL_ADC_IRQHandler+0x96>
 800794a:	066a      	lsls	r2, r5, #25
 800794c:	d5e2      	bpl.n	8007914 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800794e:	0670      	lsls	r0, r6, #25
 8007950:	d5e0      	bpl.n	8007914 <HAL_ADC_IRQHandler+0xfc>
 8007952:	e7ae      	b.n	80078b2 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007954:	4a44      	ldr	r2, [pc, #272]	; (8007a68 <HAL_ADC_IRQHandler+0x250>)
 8007956:	e76e      	b.n	8007836 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007958:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800795a:	b17a      	cbz	r2, 800797c <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800795c:	2f00      	cmp	r7, #0
 800795e:	d072      	beq.n	8007a46 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007960:	4a3e      	ldr	r2, [pc, #248]	; (8007a5c <HAL_ADC_IRQHandler+0x244>)
 8007962:	4293      	cmp	r3, r2
 8007964:	f000 808b 	beq.w	8007a7e <HAL_ADC_IRQHandler+0x266>
 8007968:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800796c:	4293      	cmp	r3, r2
 800796e:	f000 8086 	beq.w	8007a7e <HAL_ADC_IRQHandler+0x266>
 8007972:	4a3b      	ldr	r2, [pc, #236]	; (8007a60 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007974:	6892      	ldr	r2, [r2, #8]
 8007976:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800797a:	d00b      	beq.n	8007994 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800797c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 800797e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007984:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007986:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007988:	f043 0302 	orr.w	r3, r3, #2
 800798c:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800798e:	f7ff ff41 	bl	8007814 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	2210      	movs	r2, #16
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e7cc      	b.n	8007934 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800799a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800799c:	06d8      	lsls	r0, r3, #27
 800799e:	d403      	bmi.n	80079a8 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80079a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079a6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 f8e1 	bl	8008b70 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	2202      	movs	r2, #2
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e747      	b.n	8007846 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80079b6:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80079b8:	2901      	cmp	r1, #1
 80079ba:	d988      	bls.n	80078ce <HAL_ADC_IRQHandler+0xb6>
 80079bc:	2f00      	cmp	r7, #0
 80079be:	d086      	beq.n	80078ce <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80079c0:	4926      	ldr	r1, [pc, #152]	; (8007a5c <HAL_ADC_IRQHandler+0x244>)
 80079c2:	68c9      	ldr	r1, [r1, #12]
 80079c4:	e784      	b.n	80078d0 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80079c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80079c8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80079ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ce:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80079d0:	f001 f8cc 	bl	8008b6c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e7a6      	b.n	800792c <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80079de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80079e0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80079e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80079e8:	f7fd fcb0 	bl	800534c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	2280      	movs	r2, #128	; 0x80
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e793      	b.n	800791c <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80079f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80079f6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80079f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fc:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80079fe:	f001 f8b3 	bl	8008b68 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	e78b      	b.n	8007924 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007a0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007a12:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a18:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007a1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007a22:	6019      	str	r1, [r3, #0]
}
 8007a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007a28:	f001 b89c 	b.w	8008b64 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007a2c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a30:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a34:	4302      	orrs	r2, r0
 8007a36:	f47f af67 	bne.w	8007908 <HAL_ADC_IRQHandler+0xf0>
 8007a3a:	e74d      	b.n	80078d8 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a3c:	2f09      	cmp	r7, #9
 8007a3e:	d906      	bls.n	8007a4e <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a40:	4a06      	ldr	r2, [pc, #24]	; (8007a5c <HAL_ADC_IRQHandler+0x244>)
 8007a42:	68d2      	ldr	r2, [r2, #12]
 8007a44:	e713      	b.n	800786e <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	0797      	lsls	r7, r2, #30
 8007a4a:	d0a3      	beq.n	8007994 <HAL_ADC_IRQHandler+0x17c>
 8007a4c:	e796      	b.n	800797c <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a4e:	f240 2221 	movw	r2, #545	; 0x221
 8007a52:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007a54:	07d2      	lsls	r2, r2, #31
 8007a56:	f53f af09 	bmi.w	800786c <HAL_ADC_IRQHandler+0x54>
 8007a5a:	e7f1      	b.n	8007a40 <HAL_ADC_IRQHandler+0x228>
 8007a5c:	40022000 	.word	0x40022000
 8007a60:	58026300 	.word	0x58026300
 8007a64:	40022100 	.word	0x40022100
 8007a68:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a7c:	e70f      	b.n	800789e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007a7e:	4a05      	ldr	r2, [pc, #20]	; (8007a94 <HAL_ADC_IRQHandler+0x27c>)
 8007a80:	e778      	b.n	8007974 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a84:	f043 0310 	orr.w	r3, r3, #16
 8007a88:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a92:	e739      	b.n	8007908 <HAL_ADC_IRQHandler+0xf0>
 8007a94:	40022300 	.word	0x40022300

08007a98 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a98:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a9c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8007aa2:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007aa4:	d11d      	bne.n	8007ae2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007aa6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007aae:	680a      	ldr	r2, [r1, #0]
 8007ab0:	f012 0f08 	tst.w	r2, #8
 8007ab4:	68ca      	ldr	r2, [r1, #12]
 8007ab6:	d01b      	beq.n	8007af0 <ADC_DMAConvCplt+0x58>
 8007ab8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8007abc:	d10d      	bne.n	8007ada <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007abe:	68ca      	ldr	r2, [r1, #12]
 8007ac0:	0494      	lsls	r4, r2, #18
 8007ac2:	d40a      	bmi.n	8007ada <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ace:	04d1      	lsls	r1, r2, #19
 8007ad0:	d403      	bmi.n	8007ada <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fbea 	bl	80052b4 <HAL_ADC_ConvCpltCallback>
}
 8007ae0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ae2:	06d2      	lsls	r2, r2, #27
 8007ae4:	d40a      	bmi.n	8007afc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aee:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007af0:	0790      	lsls	r0, r2, #30
 8007af2:	d0e7      	beq.n	8007ac4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd fbdd 	bl	80052b4 <HAL_ADC_ConvCpltCallback>
 8007afa:	e7f1      	b.n	8007ae0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fe89 	bl	8007814 <HAL_ADC_ErrorCallback>
}
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b04:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007b06:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007b08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b0e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007b10:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007b12:	f043 0304 	orr.w	r3, r3, #4
 8007b16:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007b18:	f7ff fe7c 	bl	8007814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b1c:	bd08      	pop	{r3, pc}
 8007b1e:	bf00      	nop

08007b20 <HAL_ADC_ConfigChannel>:
{
 8007b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8007b22:	2200      	movs	r2, #0
{
 8007b24:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007b26:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007b28:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8007b2c:	2a01      	cmp	r2, #1
 8007b2e:	f000 813b 	beq.w	8007da8 <HAL_ADC_ConfigChannel+0x288>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b36:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8007b38:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b3c:	6894      	ldr	r4, [r2, #8]
 8007b3e:	0764      	lsls	r4, r4, #29
 8007b40:	f100 8099 	bmi.w	8007c76 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007b44:	680c      	ldr	r4, [r1, #0]
 8007b46:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	f040 809e 	bne.w	8007c8c <HAL_ADC_ConfigChannel+0x16c>
 8007b50:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007b54:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007b56:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 8007b58:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007b5c:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007b5e:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8007b62:	4330      	orrs	r0, r6
 8007b64:	f00c 0c0c 	and.w	ip, ip, #12
 8007b68:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8007b6a:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007b6e:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8007b72:	4084      	lsls	r4, r0
 8007b74:	fa0e fe00 	lsl.w	lr, lr, r0
 8007b78:	f85c 0005 	ldr.w	r0, [ip, r5]
 8007b7c:	ea20 000e 	bic.w	r0, r0, lr
 8007b80:	4304      	orrs	r4, r0
 8007b82:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b86:	6890      	ldr	r0, [r2, #8]
 8007b88:	0740      	lsls	r0, r0, #29
 8007b8a:	d47d      	bmi.n	8007c88 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b8c:	6895      	ldr	r5, [r2, #8]
 8007b8e:	f015 0508 	ands.w	r5, r5, #8
 8007b92:	d156      	bne.n	8007c42 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007b94:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8007b96:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007b98:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007b9c:	4fb7      	ldr	r7, [pc, #732]	; (8007e7c <HAL_ADC_ConfigChannel+0x35c>)
 8007b9e:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8007ba2:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ba6:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8007baa:	fa00 fe04 	lsl.w	lr, r0, r4
 8007bae:	6888      	ldr	r0, [r1, #8]
 8007bb0:	fa00 f404 	lsl.w	r4, r0, r4
 8007bb4:	f85c 0006 	ldr.w	r0, [ip, r6]
 8007bb8:	ea20 000e 	bic.w	r0, r0, lr
 8007bbc:	4320      	orrs	r0, r4
 8007bbe:	f84c 0006 	str.w	r0, [ip, r6]
 8007bc2:	6838      	ldr	r0, [r7, #0]
 8007bc4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007bc8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007bcc:	f000 8095 	beq.w	8007cfa <HAL_ADC_ConfigChannel+0x1da>
 8007bd0:	68d0      	ldr	r0, [r2, #12]
 8007bd2:	68d6      	ldr	r6, [r2, #12]
 8007bd4:	06c7      	lsls	r7, r0, #27
 8007bd6:	f100 8107 	bmi.w	8007de8 <HAL_ADC_ConfigChannel+0x2c8>
 8007bda:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8007bde:	6948      	ldr	r0, [r1, #20]
 8007be0:	0076      	lsls	r6, r6, #1
 8007be2:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007be6:	690f      	ldr	r7, [r1, #16]
 8007be8:	2f04      	cmp	r7, #4
 8007bea:	f000 80e0 	beq.w	8007dae <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bee:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8007bf2:	6808      	ldr	r0, [r1, #0]
 8007bf4:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8007bf8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007bfc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007c00:	ea40 000c 	orr.w	r0, r0, ip
 8007c04:	4330      	orrs	r0, r6
 8007c06:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007c0a:	7e48      	ldrb	r0, [r1, #25]
 8007c0c:	690e      	ldr	r6, [r1, #16]
 8007c0e:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007c10:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8007c14:	bf0c      	ite	eq
 8007c16:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8007c1a:	2700      	movne	r7, #0
 8007c1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007c20:	4338      	orrs	r0, r7
 8007c22:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007c26:	7e0c      	ldrb	r4, [r1, #24]
 8007c28:	6908      	ldr	r0, [r1, #16]
 8007c2a:	2c01      	cmp	r4, #1
 8007c2c:	d104      	bne.n	8007c38 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007c2e:	f000 001f 	and.w	r0, r0, #31
 8007c32:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8007c36:	4085      	lsls	r5, r0
 8007c38:	6910      	ldr	r0, [r2, #16]
 8007c3a:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8007c3e:	4305      	orrs	r5, r0
 8007c40:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c42:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c44:	07c4      	lsls	r4, r0, #31
 8007c46:	d414      	bmi.n	8007c72 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007c48:	68ce      	ldr	r6, [r1, #12]
 8007c4a:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8007c4c:	f006 0718 	and.w	r7, r6, #24
 8007c50:	488b      	ldr	r0, [pc, #556]	; (8007e80 <HAL_ADC_ConfigChannel+0x360>)
 8007c52:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8007c56:	40f8      	lsrs	r0, r7
 8007c58:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8007c5c:	4020      	ands	r0, r4
 8007c5e:	ea25 0507 	bic.w	r5, r5, r7
 8007c62:	4328      	orrs	r0, r5
 8007c64:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007c68:	4886      	ldr	r0, [pc, #536]	; (8007e84 <HAL_ADC_ConfigChannel+0x364>)
 8007c6a:	4286      	cmp	r6, r0
 8007c6c:	d04d      	beq.n	8007d0a <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	db15      	blt.n	8007c9e <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c72:	2000      	movs	r0, #0
 8007c74:	e003      	b.n	8007c7e <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c78:	f042 0220 	orr.w	r2, r2, #32
 8007c7c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007c84:	b003      	add	sp, #12
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c88:	6890      	ldr	r0, [r2, #8]
 8007c8a:	e7da      	b.n	8007c42 <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007c90:	b115      	cbz	r5, 8007c98 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8007c92:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007c96:	40a8      	lsls	r0, r5
 8007c98:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007c9c:	e75b      	b.n	8007b56 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c9e:	497a      	ldr	r1, [pc, #488]	; (8007e88 <HAL_ADC_ConfigChannel+0x368>)
 8007ca0:	428a      	cmp	r2, r1
 8007ca2:	f000 80c7 	beq.w	8007e34 <HAL_ADC_ConfigChannel+0x314>
 8007ca6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007caa:	428a      	cmp	r2, r1
 8007cac:	f000 80c2 	beq.w	8007e34 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007cb0:	4d76      	ldr	r5, [pc, #472]	; (8007e8c <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cb2:	4877      	ldr	r0, [pc, #476]	; (8007e90 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007cb4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cb6:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007cb8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007cbc:	43c0      	mvns	r0, r0
 8007cbe:	f000 0001 	and.w	r0, r0, #1
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f000 80c5 	beq.w	8007e52 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007cc8:	4872      	ldr	r0, [pc, #456]	; (8007e94 <HAL_ADC_ConfigChannel+0x374>)
 8007cca:	4284      	cmp	r4, r0
 8007ccc:	f000 810e 	beq.w	8007eec <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007cd0:	4871      	ldr	r0, [pc, #452]	; (8007e98 <HAL_ADC_ConfigChannel+0x378>)
 8007cd2:	4284      	cmp	r4, r0
 8007cd4:	f000 812d 	beq.w	8007f32 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007cd8:	4870      	ldr	r0, [pc, #448]	; (8007e9c <HAL_ADC_ConfigChannel+0x37c>)
 8007cda:	4284      	cmp	r4, r0
 8007cdc:	d1c9      	bne.n	8007c72 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8007cde:	0249      	lsls	r1, r1, #9
 8007ce0:	d4c7      	bmi.n	8007c72 <HAL_ADC_ConfigChannel+0x152>
 8007ce2:	496b      	ldr	r1, [pc, #428]	; (8007e90 <HAL_ADC_ConfigChannel+0x370>)
 8007ce4:	428a      	cmp	r2, r1
 8007ce6:	d1c4      	bne.n	8007c72 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007ce8:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cea:	2000      	movs	r0, #0
 8007cec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007cf0:	4332      	orrs	r2, r6
 8007cf2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007cf6:	60aa      	str	r2, [r5, #8]
}
 8007cf8:	e7c1      	b.n	8007c7e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007cfa:	68d6      	ldr	r6, [r2, #12]
 8007cfc:	6948      	ldr	r0, [r1, #20]
 8007cfe:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8007d02:	0076      	lsls	r6, r6, #1
 8007d04:	fa00 f606 	lsl.w	r6, r0, r6
 8007d08:	e76d      	b.n	8007be6 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d0a:	2f00      	cmp	r7, #0
 8007d0c:	d073      	beq.n	8007df6 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f000 80c6 	beq.w	8007ea4 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8007d18:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f000 001f 	and.w	r0, r0, #31
 8007d22:	2809      	cmp	r0, #9
 8007d24:	f240 80be 	bls.w	8007ea4 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d28:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f000 8114 	beq.w	8007f5a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007d32:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d36:	3001      	adds	r0, #1
 8007d38:	0680      	lsls	r0, r0, #26
 8007d3a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	f000 8107 	beq.w	8007f56 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8007d48:	fab5 f585 	clz	r5, r5
 8007d4c:	2601      	movs	r6, #1
 8007d4e:	3501      	adds	r5, #1
 8007d50:	f005 051f 	and.w	r5, r5, #31
 8007d54:	fa06 f505 	lsl.w	r5, r6, r5
 8007d58:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d5a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	f000 80f7 	beq.w	8007f52 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8007d64:	fab4 f484 	clz	r4, r4
 8007d68:	f06f 061d 	mvn.w	r6, #29
 8007d6c:	1c60      	adds	r0, r4, #1
 8007d6e:	f000 041f 	and.w	r4, r0, #31
 8007d72:	2003      	movs	r0, #3
 8007d74:	fb10 6004 	smlabb	r0, r0, r4, r6
 8007d78:	0500      	lsls	r0, r0, #20
 8007d7a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d7e:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8007d80:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d82:	f102 0514 	add.w	r5, r2, #20
 8007d86:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8007d88:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d8c:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8007d90:	fa04 f700 	lsl.w	r7, r4, r0
 8007d94:	5974      	ldr	r4, [r6, r5]
 8007d96:	ea24 0407 	bic.w	r4, r4, r7
 8007d9a:	688f      	ldr	r7, [r1, #8]
 8007d9c:	fa07 f000 	lsl.w	r0, r7, r0
 8007da0:	4320      	orrs	r0, r4
 8007da2:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007da4:	680c      	ldr	r4, [r1, #0]
}
 8007da6:	e762      	b.n	8007c6e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8007da8:	2002      	movs	r0, #2
}
 8007daa:	b003      	add	sp, #12
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007dae:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007db0:	680c      	ldr	r4, [r1, #0]
 8007db2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007db6:	06a5      	lsls	r5, r4, #26
 8007db8:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8007dbc:	d030      	beq.n	8007e20 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007dbe:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007dc0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007dc4:	4285      	cmp	r5, r0
 8007dc6:	d026      	beq.n	8007e16 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007dc8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007dca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007dce:	4285      	cmp	r5, r0
 8007dd0:	d02b      	beq.n	8007e2a <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007dd2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007dd4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007dd8:	4285      	cmp	r5, r0
 8007dda:	f47f af32 	bne.w	8007c42 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007dde:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007de0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007de4:	66d0      	str	r0, [r2, #108]	; 0x6c
 8007de6:	e72c      	b.n	8007c42 <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007de8:	0876      	lsrs	r6, r6, #1
 8007dea:	6948      	ldr	r0, [r1, #20]
 8007dec:	f006 0608 	and.w	r6, r6, #8
 8007df0:	fa00 f606 	lsl.w	r6, r0, r6
 8007df4:	e6f7      	b.n	8007be6 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007df6:	0ea4      	lsrs	r4, r4, #26
 8007df8:	3401      	adds	r4, #1
 8007dfa:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007dfe:	2e09      	cmp	r6, #9
 8007e00:	d82d      	bhi.n	8007e5e <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e02:	06a5      	lsls	r5, r4, #26
 8007e04:	2001      	movs	r0, #1
 8007e06:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8007e0a:	40b0      	lsls	r0, r6
 8007e0c:	4305      	orrs	r5, r0
 8007e0e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8007e12:	0500      	lsls	r0, r0, #20
 8007e14:	e7b3      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007e16:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007e18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e1c:	6650      	str	r0, [r2, #100]	; 0x64
 8007e1e:	e7d3      	b.n	8007dc8 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007e20:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007e22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e26:	6610      	str	r0, [r2, #96]	; 0x60
 8007e28:	e7c9      	b.n	8007dbe <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007e2a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007e2c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e30:	6690      	str	r0, [r2, #104]	; 0x68
 8007e32:	e7ce      	b.n	8007dd2 <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007e34:	4814      	ldr	r0, [pc, #80]	; (8007e88 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e36:	4d1a      	ldr	r5, [pc, #104]	; (8007ea0 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007e38:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e3c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007e3e:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8007e42:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e44:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e46:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8007e4a:	43c0      	mvns	r0, r0
 8007e4c:	f000 0001 	and.w	r0, r0, #1
 8007e50:	e737      	b.n	8007cc2 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007e54:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e56:	f042 0220 	orr.w	r2, r2, #32
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007e5c:	e70f      	b.n	8007c7e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e5e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8007e62:	06a5      	lsls	r5, r4, #26
 8007e64:	2401      	movs	r4, #1
 8007e66:	381e      	subs	r0, #30
 8007e68:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8007e6c:	fa04 f606 	lsl.w	r6, r4, r6
 8007e70:	0500      	lsls	r0, r0, #20
 8007e72:	4335      	orrs	r5, r6
 8007e74:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8007e78:	e781      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x25e>
 8007e7a:	bf00      	nop
 8007e7c:	5c001000 	.word	0x5c001000
 8007e80:	000fffff 	.word	0x000fffff
 8007e84:	47ff0000 	.word	0x47ff0000
 8007e88:	40022000 	.word	0x40022000
 8007e8c:	58026300 	.word	0x58026300
 8007e90:	58026000 	.word	0x58026000
 8007e94:	cb840000 	.word	0xcb840000
 8007e98:	c7520000 	.word	0xc7520000
 8007e9c:	cfb80000 	.word	0xcfb80000
 8007ea0:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea4:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d05e      	beq.n	8007f6a <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8007eac:	fab0 f080 	clz	r0, r0
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	0680      	lsls	r0, r0, #26
 8007eb4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d052      	beq.n	8007f66 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8007ec0:	fab5 f585 	clz	r5, r5
 8007ec4:	2601      	movs	r6, #1
 8007ec6:	3501      	adds	r5, #1
 8007ec8:	f005 051f 	and.w	r5, r5, #31
 8007ecc:	fa06 f505 	lsl.w	r5, r6, r5
 8007ed0:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ed2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	d042      	beq.n	8007f60 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8007eda:	fab4 f484 	clz	r4, r4
 8007ede:	3401      	adds	r4, #1
 8007ee0:	f004 041f 	and.w	r4, r4, #31
 8007ee4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007ee8:	0520      	lsls	r0, r4, #20
 8007eea:	e748      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007eec:	0208      	lsls	r0, r1, #8
 8007eee:	f53f aec0 	bmi.w	8007c72 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ef2:	491f      	ldr	r1, [pc, #124]	; (8007f70 <HAL_ADC_ConfigChannel+0x450>)
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	f47f aebc 	bne.w	8007c72 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <HAL_ADC_ConfigChannel+0x454>)
 8007efc:	481e      	ldr	r0, [pc, #120]	; (8007f78 <HAL_ADC_ConfigChannel+0x458>)
 8007efe:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007f00:	68a9      	ldr	r1, [r5, #8]
 8007f02:	0992      	lsrs	r2, r2, #6
 8007f04:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8007f08:	fba0 0202 	umull	r0, r2, r0, r2
 8007f0c:	4331      	orrs	r1, r6
 8007f0e:	0992      	lsrs	r2, r2, #6
 8007f10:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007f14:	3201      	adds	r2, #1
 8007f16:	60a9      	str	r1, [r5, #8]
 8007f18:	0052      	lsls	r2, r2, #1
 8007f1a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007f1c:	9a01      	ldr	r2, [sp, #4]
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	f43f aea7 	beq.w	8007c72 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8007f24:	9a01      	ldr	r2, [sp, #4]
 8007f26:	3a01      	subs	r2, #1
 8007f28:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	d1f9      	bne.n	8007f24 <HAL_ADC_ConfigChannel+0x404>
 8007f30:	e69f      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007f32:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8007f36:	f47f ae9c 	bne.w	8007c72 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007f3a:	490d      	ldr	r1, [pc, #52]	; (8007f70 <HAL_ADC_ConfigChannel+0x450>)
 8007f3c:	428a      	cmp	r2, r1
 8007f3e:	f47f ae98 	bne.w	8007c72 <HAL_ADC_ConfigChannel+0x152>
 8007f42:	68aa      	ldr	r2, [r5, #8]
 8007f44:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007f48:	4332      	orrs	r2, r6
 8007f4a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f4e:	60aa      	str	r2, [r5, #8]
}
 8007f50:	e695      	b.n	8007c7e <HAL_ADC_ConfigChannel+0x15e>
 8007f52:	480a      	ldr	r0, [pc, #40]	; (8007f7c <HAL_ADC_ConfigChannel+0x45c>)
 8007f54:	e713      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x25e>
 8007f56:	2502      	movs	r5, #2
 8007f58:	e6fe      	b.n	8007d58 <HAL_ADC_ConfigChannel+0x238>
 8007f5a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007f5e:	e6ee      	b.n	8007d3e <HAL_ADC_ConfigChannel+0x21e>
 8007f60:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007f64:	e70b      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x25e>
 8007f66:	2502      	movs	r5, #2
 8007f68:	e7b2      	b.n	8007ed0 <HAL_ADC_ConfigChannel+0x3b0>
 8007f6a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007f6e:	e7a3      	b.n	8007eb8 <HAL_ADC_ConfigChannel+0x398>
 8007f70:	58026000 	.word	0x58026000
 8007f74:	24000318 	.word	0x24000318
 8007f78:	053e2d63 	.word	0x053e2d63
 8007f7c:	fe500000 	.word	0xfe500000

08007f80 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007f80:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007f84:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007f86:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8007f88:	2a01      	cmp	r2, #1
 8007f8a:	f000 80f3 	beq.w	8008174 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f8e:	681a      	ldr	r2, [r3, #0]
{
 8007f90:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8007f92:	2401      	movs	r4, #1
 8007f94:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f98:	6894      	ldr	r4, [r2, #8]
 8007f9a:	0765      	lsls	r5, r4, #29
 8007f9c:	d428      	bmi.n	8007ff0 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007f9e:	6894      	ldr	r4, [r2, #8]
 8007fa0:	0724      	lsls	r4, r4, #28
 8007fa2:	d426      	bmi.n	8007ff2 <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007fa4:	680c      	ldr	r4, [r1, #0]
 8007fa6:	4db8      	ldr	r5, [pc, #736]	; (8008288 <HAL_ADC_AnalogWDGConfig+0x308>)
 8007fa8:	42ac      	cmp	r4, r5
 8007faa:	f000 80a0 	beq.w	80080ee <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8007fae:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007fb2:	d02e      	beq.n	8008012 <HAL_ADC_AnalogWDGConfig+0x92>
 8007fb4:	d827      	bhi.n	8008006 <HAL_ADC_AnalogWDGConfig+0x86>
 8007fb6:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007fba:	d02a      	beq.n	8008012 <HAL_ADC_AnalogWDGConfig+0x92>
 8007fbc:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007fc0:	d027      	beq.n	8008012 <HAL_ADC_AnalogWDGConfig+0x92>
 8007fc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007fc6:	d024      	beq.n	8008012 <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007fc8:	f004 0001 	and.w	r0, r4, #1
 8007fcc:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8007fd0:	4eae      	ldr	r6, [pc, #696]	; (800828c <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007fd2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8007fd6:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007fd8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8007fdc:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8007fe0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8007fe4:	ea24 0406 	bic.w	r4, r4, r6
 8007fe8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007fec:	680c      	ldr	r4, [r1, #0]
}
 8007fee:	e023      	b.n	8008038 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ff0:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007ff4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff6:	f042 0220 	orr.w	r2, r2, #32
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8008002:	bc70      	pop	{r4, r5, r6}
 8008004:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8008006:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800800a:	d002      	beq.n	8008012 <HAL_ADC_AnalogWDGConfig+0x92>
 800800c:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8008010:	d1da      	bne.n	8007fc8 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008012:	489f      	ldr	r0, [pc, #636]	; (8008290 <HAL_ADC_AnalogWDGConfig+0x310>)
 8008014:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008016:	6888      	ldr	r0, [r1, #8]
 8008018:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800801c:	f000 80cb 	beq.w	80081b6 <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008020:	2d00      	cmp	r5, #0
 8008022:	f040 80df 	bne.w	80081e4 <HAL_ADC_AnalogWDGConfig+0x264>
 8008026:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800802a:	2501      	movs	r5, #1
 800802c:	4085      	lsls	r5, r0
 800802e:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8008032:	4328      	orrs	r0, r5
 8008034:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008038:	4896      	ldr	r0, [pc, #600]	; (8008294 <HAL_ADC_AnalogWDGConfig+0x314>)
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008040:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8008044:	68d0      	ldr	r0, [r2, #12]
 8008046:	d04b      	beq.n	80080e0 <HAL_ADC_AnalogWDGConfig+0x160>
 8008048:	f010 0f10 	tst.w	r0, #16
 800804c:	68d0      	ldr	r0, [r2, #12]
 800804e:	d047      	beq.n	80080e0 <HAL_ADC_AnalogWDGConfig+0x160>
 8008050:	0840      	lsrs	r0, r0, #1
 8008052:	690d      	ldr	r5, [r1, #16]
 8008054:	f000 0008 	and.w	r0, r0, #8
 8008058:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800805c:	4d8d      	ldr	r5, [pc, #564]	; (8008294 <HAL_ADC_AnalogWDGConfig+0x314>)
 800805e:	682d      	ldr	r5, [r5, #0]
 8008060:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8008064:	68d5      	ldr	r5, [r2, #12]
 8008066:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 800806a:	d031      	beq.n	80080d0 <HAL_ADC_AnalogWDGConfig+0x150>
 800806c:	f015 0f10 	tst.w	r5, #16
 8008070:	68d5      	ldr	r5, [r2, #12]
 8008072:	d02d      	beq.n	80080d0 <HAL_ADC_AnalogWDGConfig+0x150>
 8008074:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8008078:	694d      	ldr	r5, [r1, #20]
 800807a:	f00c 0c08 	and.w	ip, ip, #8
 800807e:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8008082:	4d83      	ldr	r5, [pc, #524]	; (8008290 <HAL_ADC_AnalogWDGConfig+0x310>)
 8008084:	42ac      	cmp	r4, r5
 8008086:	d077      	beq.n	8008178 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8008088:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 800808c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8008090:	ea44 040c 	orr.w	r4, r4, ip
 8008094:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8008098:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 800809c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80080a0:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80080a2:	f44f 7400 	mov.w	r4, #512	; 0x200
 80080a6:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80080aa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80080ac:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80080b0:	6558      	str	r0, [r3, #84]	; 0x54
 80080b2:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 80080b4:	7b09      	ldrb	r1, [r1, #12]
 80080b6:	2901      	cmp	r1, #1
 80080b8:	f000 808e 	beq.w	80081d8 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80080bc:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080be:	2000      	movs	r0, #0
 80080c0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80080c4:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80080cc:	bc70      	pop	{r4, r5, r6}
 80080ce:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80080d0:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 80080d4:	694d      	ldr	r5, [r1, #20]
 80080d6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80080da:	fa05 fc0c 	lsl.w	ip, r5, ip
 80080de:	e7d0      	b.n	8008082 <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80080e0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80080e4:	690d      	ldr	r5, [r1, #16]
 80080e6:	0040      	lsls	r0, r0, #1
 80080e8:	fa05 f000 	lsl.w	r0, r5, r0
 80080ec:	e7b6      	b.n	800805c <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 80080ee:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 80080f2:	f000 80f0 	beq.w	80082d6 <HAL_ADC_AnalogWDGConfig+0x356>
 80080f6:	d82a      	bhi.n	800814e <HAL_ADC_AnalogWDGConfig+0x1ce>
 80080f8:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 80080fc:	f000 80e0 	beq.w	80082c0 <HAL_ADC_AnalogWDGConfig+0x340>
 8008100:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008104:	d118      	bne.n	8008138 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8008106:	68d4      	ldr	r4, [r2, #12]
 8008108:	4863      	ldr	r0, [pc, #396]	; (8008298 <HAL_ADC_AnalogWDGConfig+0x318>)
 800810a:	4020      	ands	r0, r4
 800810c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008110:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008112:	4860      	ldr	r0, [pc, #384]	; (8008294 <HAL_ADC_AnalogWDGConfig+0x314>)
 8008114:	6800      	ldr	r0, [r0, #0]
 8008116:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800811a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800811e:	68d0      	ldr	r0, [r2, #12]
 8008120:	d069      	beq.n	80081f6 <HAL_ADC_AnalogWDGConfig+0x276>
 8008122:	f010 0f10 	tst.w	r0, #16
 8008126:	690d      	ldr	r5, [r1, #16]
 8008128:	68d0      	ldr	r0, [r2, #12]
 800812a:	f040 8099 	bne.w	8008260 <HAL_ADC_AnalogWDGConfig+0x2e0>
 800812e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8008132:	0040      	lsls	r0, r0, #1
 8008134:	4085      	lsls	r5, r0
 8008136:	e063      	b.n	8008200 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8008138:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800813c:	f040 80b4 	bne.w	80082a8 <HAL_ADC_AnalogWDGConfig+0x328>
 8008140:	68d4      	ldr	r4, [r2, #12]
 8008142:	4855      	ldr	r0, [pc, #340]	; (8008298 <HAL_ADC_AnalogWDGConfig+0x318>)
 8008144:	4020      	ands	r0, r4
 8008146:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800814a:	60d0      	str	r0, [r2, #12]
}
 800814c:	e7e1      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
 800814e:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8008152:	f000 80ae 	beq.w	80082b2 <HAL_ADC_AnalogWDGConfig+0x332>
 8008156:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 800815a:	f040 80a5 	bne.w	80082a8 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 800815e:	68d5      	ldr	r5, [r2, #12]
 8008160:	6888      	ldr	r0, [r1, #8]
 8008162:	4c4d      	ldr	r4, [pc, #308]	; (8008298 <HAL_ADC_AnalogWDGConfig+0x318>)
 8008164:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8008168:	402c      	ands	r4, r5
 800816a:	4320      	orrs	r0, r4
 800816c:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8008170:	60d0      	str	r0, [r2, #12]
}
 8008172:	e7ce      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8008174:	2002      	movs	r0, #2
}
 8008176:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8008178:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800817c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8008180:	ea44 040c 	orr.w	r4, r4, ip
 8008184:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8008188:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 800818c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8008190:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8008192:	f44f 7480 	mov.w	r4, #256	; 0x100
 8008196:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800819a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800819c:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 80081a0:	6558      	str	r0, [r3, #84]	; 0x54
 80081a2:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 80081a4:	7b09      	ldrb	r1, [r1, #12]
 80081a6:	2901      	cmp	r1, #1
 80081a8:	d078      	beq.n	800829c <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80081aa:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ac:	2000      	movs	r0, #0
 80081ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80081b2:	6051      	str	r1, [r2, #4]
}
 80081b4:	e722      	b.n	8007ffc <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	d05e      	beq.n	8008278 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ba:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80081be:	2800      	cmp	r0, #0
 80081c0:	f000 8094 	beq.w	80082ec <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 80081c4:	fab0 f080 	clz	r0, r0
 80081c8:	2501      	movs	r5, #1
 80081ca:	4085      	lsls	r5, r0
 80081cc:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 80081d0:	4328      	orrs	r0, r5
 80081d2:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 80081d6:	e72f      	b.n	8008038 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80081d8:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081da:	2000      	movs	r0, #0
 80081dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80081e0:	6051      	str	r1, [r2, #4]
}
 80081e2:	e70b      	b.n	8007ffc <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d04a      	beq.n	8008282 <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 80081ec:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80081f0:	2501      	movs	r5, #1
 80081f2:	4085      	lsls	r5, r0
 80081f4:	e71b      	b.n	800802e <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80081f6:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80081fa:	690d      	ldr	r5, [r1, #16]
 80081fc:	0040      	lsls	r0, r0, #1
 80081fe:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008200:	4824      	ldr	r0, [pc, #144]	; (8008294 <HAL_ADC_AnalogWDGConfig+0x314>)
 8008202:	6800      	ldr	r0, [r0, #0]
 8008204:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008208:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800820c:	68d0      	ldr	r0, [r2, #12]
 800820e:	d003      	beq.n	8008218 <HAL_ADC_AnalogWDGConfig+0x298>
 8008210:	f010 0f10 	tst.w	r0, #16
 8008214:	68d0      	ldr	r0, [r2, #12]
 8008216:	d128      	bne.n	800826a <HAL_ADC_AnalogWDGConfig+0x2ea>
 8008218:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800821c:	694c      	ldr	r4, [r1, #20]
 800821e:	0040      	lsls	r0, r0, #1
 8008220:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8008224:	6a14      	ldr	r4, [r2, #32]
 8008226:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800822a:	4304      	orrs	r4, r0
 800822c:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800822e:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8008230:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008232:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8008236:	4328      	orrs	r0, r5
 8008238:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800823a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800823c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008240:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008242:	2000      	movs	r0, #0
 8008244:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8008246:	7b09      	ldrb	r1, [r1, #12]
 8008248:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800824a:	6851      	ldr	r1, [r2, #4]
 800824c:	bf0c      	ite	eq
 800824e:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8008250:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8008254:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800825c:	bc70      	pop	{r4, r5, r6}
 800825e:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008260:	0840      	lsrs	r0, r0, #1
 8008262:	f000 0008 	and.w	r0, r0, #8
 8008266:	4085      	lsls	r5, r0
 8008268:	e7ca      	b.n	8008200 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800826a:	0840      	lsrs	r0, r0, #1
 800826c:	694c      	ldr	r4, [r1, #20]
 800826e:	f000 0008 	and.w	r0, r0, #8
 8008272:	fa04 f000 	lsl.w	r0, r4, r0
 8008276:	e7d5      	b.n	8008224 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008278:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800827c:	2501      	movs	r5, #1
 800827e:	4085      	lsls	r5, r0
 8008280:	e7a4      	b.n	80081cc <HAL_ADC_AnalogWDGConfig+0x24c>
 8008282:	2501      	movs	r5, #1
 8008284:	e6d3      	b.n	800802e <HAL_ADC_AnalogWDGConfig+0xae>
 8008286:	bf00      	nop
 8008288:	7dc00000 	.word	0x7dc00000
 800828c:	7dcfffff 	.word	0x7dcfffff
 8008290:	001fffff 	.word	0x001fffff
 8008294:	5c001000 	.word	0x5c001000
 8008298:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800829c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800829e:	2000      	movs	r0, #0
 80082a0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80082a4:	6051      	str	r1, [r2, #4]
}
 80082a6:	e6a9      	b.n	8007ffc <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 80082a8:	68d4      	ldr	r4, [r2, #12]
 80082aa:	4811      	ldr	r0, [pc, #68]	; (80082f0 <HAL_ADC_AnalogWDGConfig+0x370>)
 80082ac:	4020      	ands	r0, r4
 80082ae:	60d0      	str	r0, [r2, #12]
}
 80082b0:	e72f      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 80082b2:	68d4      	ldr	r4, [r2, #12]
 80082b4:	480e      	ldr	r0, [pc, #56]	; (80082f0 <HAL_ADC_AnalogWDGConfig+0x370>)
 80082b6:	4020      	ands	r0, r4
 80082b8:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 80082bc:	60d0      	str	r0, [r2, #12]
}
 80082be:	e728      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 80082c0:	68d5      	ldr	r5, [r2, #12]
 80082c2:	6888      	ldr	r0, [r1, #8]
 80082c4:	4c0a      	ldr	r4, [pc, #40]	; (80082f0 <HAL_ADC_AnalogWDGConfig+0x370>)
 80082c6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80082ca:	402c      	ands	r4, r5
 80082cc:	4320      	orrs	r0, r4
 80082ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80082d2:	60d0      	str	r0, [r2, #12]
}
 80082d4:	e71d      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 80082d6:	68d5      	ldr	r5, [r2, #12]
 80082d8:	6888      	ldr	r0, [r1, #8]
 80082da:	4c05      	ldr	r4, [pc, #20]	; (80082f0 <HAL_ADC_AnalogWDGConfig+0x370>)
 80082dc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80082e0:	402c      	ands	r4, r5
 80082e2:	4320      	orrs	r0, r4
 80082e4:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 80082e8:	60d0      	str	r0, [r2, #12]
}
 80082ea:	e712      	b.n	8008112 <HAL_ADC_AnalogWDGConfig+0x192>
 80082ec:	2501      	movs	r5, #1
 80082ee:	e76d      	b.n	80081cc <HAL_ADC_AnalogWDGConfig+0x24c>
 80082f0:	823fffff 	.word	0x823fffff

080082f4 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80082f4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80082fc:	689a      	ldr	r2, [r3, #8]
{
 80082fe:	b570      	push	{r4, r5, r6, lr}
 8008300:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008302:	d103      	bne.n	800830c <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008304:	0712      	lsls	r2, r2, #28
 8008306:	d401      	bmi.n	800830c <ADC_ConversionStop+0x18>
  return HAL_OK;
 8008308:	2000      	movs	r0, #0
}
 800830a:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	0196      	lsls	r6, r2, #6
 8008310:	d504      	bpl.n	800831c <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008312:	8aa0      	ldrh	r0, [r4, #20]
 8008314:	f240 1201 	movw	r2, #257	; 0x101
 8008318:	4290      	cmp	r0, r2
 800831a:	d01a      	beq.n	8008352 <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800831c:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	d040      	beq.n	80083a4 <ADC_ConversionStop+0xb0>
 8008322:	0756      	lsls	r6, r2, #29
 8008324:	d508      	bpl.n	8008338 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	0790      	lsls	r0, r2, #30
 800832a:	d405      	bmi.n	8008338 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 800832c:	6898      	ldr	r0, [r3, #8]
 800832e:	4a2d      	ldr	r2, [pc, #180]	; (80083e4 <ADC_ConversionStop+0xf0>)
 8008330:	4002      	ands	r2, r0
 8008332:	f042 0210 	orr.w	r2, r2, #16
 8008336:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008338:	2901      	cmp	r1, #1
 800833a:	d019      	beq.n	8008370 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	0712      	lsls	r2, r2, #28
 8008340:	d502      	bpl.n	8008348 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	0790      	lsls	r0, r2, #30
 8008346:	d534      	bpl.n	80083b2 <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008348:	2903      	cmp	r1, #3
 800834a:	bf14      	ite	ne
 800834c:	2504      	movne	r5, #4
 800834e:	250c      	moveq	r5, #12
 8008350:	e00f      	b.n	8008372 <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	0650      	lsls	r0, r2, #25
 8008356:	d406      	bmi.n	8008366 <ADC_ConversionStop+0x72>
 8008358:	4a23      	ldr	r2, [pc, #140]	; (80083e8 <ADC_ConversionStop+0xf4>)
 800835a:	e001      	b.n	8008360 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800835c:	3a01      	subs	r2, #1
 800835e:	d018      	beq.n	8008392 <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008360:	6819      	ldr	r1, [r3, #0]
 8008362:	0649      	lsls	r1, r1, #25
 8008364:	d5fa      	bpl.n	800835c <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008366:	2240      	movs	r2, #64	; 0x40
 8008368:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	0752      	lsls	r2, r2, #29
 800836e:	d427      	bmi.n	80083c0 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008370:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8008372:	f7ff f9ff 	bl	8007774 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008376:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008378:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	421d      	tst	r5, r3
 800837e:	d0c3      	beq.n	8008308 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008380:	f7ff f9f8 	bl	8007774 <HAL_GetTick>
 8008384:	1b83      	subs	r3, r0, r6
 8008386:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008388:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800838a:	d9f6      	bls.n	800837a <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	422a      	tst	r2, r5
 8008390:	d0f3      	beq.n	800837a <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008392:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8008394:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008396:	f043 0310 	orr.w	r3, r3, #16
 800839a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800839c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800839e:	4303      	orrs	r3, r0
 80083a0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80083a4:	0715      	lsls	r5, r2, #28
 80083a6:	d502      	bpl.n	80083ae <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	0792      	lsls	r2, r2, #30
 80083ac:	d513      	bpl.n	80083d6 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80083ae:	2508      	movs	r5, #8
        break;
 80083b0:	e7df      	b.n	8008372 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 80083b2:	6898      	ldr	r0, [r3, #8]
 80083b4:	4a0b      	ldr	r2, [pc, #44]	; (80083e4 <ADC_ConversionStop+0xf0>)
 80083b6:	4002      	ands	r2, r0
 80083b8:	f042 0220 	orr.w	r2, r2, #32
 80083bc:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80083be:	e7c3      	b.n	8008348 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	0796      	lsls	r6, r2, #30
 80083c4:	d4d4      	bmi.n	8008370 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 80083c6:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80083c8:	2504      	movs	r5, #4
 80083ca:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <ADC_ConversionStop+0xf0>)
 80083cc:	400a      	ands	r2, r1
 80083ce:	f042 0210 	orr.w	r2, r2, #16
 80083d2:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80083d4:	e7cd      	b.n	8008372 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 80083d6:	6899      	ldr	r1, [r3, #8]
 80083d8:	4a02      	ldr	r2, [pc, #8]	; (80083e4 <ADC_ConversionStop+0xf0>)
 80083da:	400a      	ands	r2, r1
 80083dc:	f042 0220 	orr.w	r2, r2, #32
 80083e0:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80083e2:	e7e4      	b.n	80083ae <ADC_ConversionStop+0xba>
 80083e4:	7fffffc0 	.word	0x7fffffc0
 80083e8:	000cdc00 	.word	0x000cdc00

080083ec <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083ec:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	07d1      	lsls	r1, r2, #31
 80083f2:	d501      	bpl.n	80083f8 <ADC_Enable+0xc>
  return HAL_OK;
 80083f4:	2000      	movs	r0, #0
}
 80083f6:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083f8:	6899      	ldr	r1, [r3, #8]
 80083fa:	4a21      	ldr	r2, [pc, #132]	; (8008480 <ADC_Enable+0x94>)
 80083fc:	4211      	tst	r1, r2
{
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008402:	d12c      	bne.n	800845e <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	4a1f      	ldr	r2, [pc, #124]	; (8008484 <ADC_Enable+0x98>)
 8008408:	400a      	ands	r2, r1
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008410:	f7ff f9b0 	bl	8007774 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	4a1c      	ldr	r2, [pc, #112]	; (8008488 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8008418:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800841a:	4293      	cmp	r3, r2
 800841c:	d028      	beq.n	8008470 <ADC_Enable+0x84>
 800841e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008422:	4293      	cmp	r3, r2
 8008424:	d024      	beq.n	8008470 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008426:	4a19      	ldr	r2, [pc, #100]	; (800848c <ADC_Enable+0xa0>)
 8008428:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	07d6      	lsls	r6, r2, #31
 800842e:	d414      	bmi.n	800845a <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8008430:	4e14      	ldr	r6, [pc, #80]	; (8008484 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008432:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008434:	07d0      	lsls	r0, r2, #31
 8008436:	d404      	bmi.n	8008442 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	4032      	ands	r2, r6
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008442:	f7ff f997 	bl	8007774 <HAL_GetTick>
 8008446:	1b43      	subs	r3, r0, r5
 8008448:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800844a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800844c:	d902      	bls.n	8008454 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	07d1      	lsls	r1, r2, #31
 8008452:	d504      	bpl.n	800845e <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	07d2      	lsls	r2, r2, #31
 8008458:	d5eb      	bpl.n	8008432 <ADC_Enable+0x46>
  return HAL_OK;
 800845a:	2000      	movs	r0, #0
}
 800845c:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800845e:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8008460:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008462:	f043 0310 	orr.w	r3, r3, #16
 8008466:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800846a:	4303      	orrs	r3, r0
 800846c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800846e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008470:	4a07      	ldr	r2, [pc, #28]	; (8008490 <ADC_Enable+0xa4>)
 8008472:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008474:	06d2      	lsls	r2, r2, #27
 8008476:	d0d8      	beq.n	800842a <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008478:	4a06      	ldr	r2, [pc, #24]	; (8008494 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800847a:	4293      	cmp	r3, r2
 800847c:	d1d5      	bne.n	800842a <ADC_Enable+0x3e>
 800847e:	e7ec      	b.n	800845a <ADC_Enable+0x6e>
 8008480:	8000003f 	.word	0x8000003f
 8008484:	7fffffc0 	.word	0x7fffffc0
 8008488:	40022000 	.word	0x40022000
 800848c:	58026300 	.word	0x58026300
 8008490:	40022300 	.word	0x40022300
 8008494:	40022100 	.word	0x40022100

08008498 <ADC_Disable>:
{
 8008498:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800849a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	0795      	lsls	r5, r2, #30
 80084a0:	d502      	bpl.n	80084a8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80084a2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80084a4:	2000      	movs	r0, #0
}
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80084aa:	07d4      	lsls	r4, r2, #31
 80084ac:	d529      	bpl.n	8008502 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	4604      	mov	r4, r0
 80084b2:	f002 020d 	and.w	r2, r2, #13
 80084b6:	2a01      	cmp	r2, #1
 80084b8:	d008      	beq.n	80084cc <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80084bc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084be:	f043 0310 	orr.w	r3, r3, #16
 80084c2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c6:	4303      	orrs	r3, r0
 80084c8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80084cc:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80084ce:	2103      	movs	r1, #3
 80084d0:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <ADC_Disable+0x70>)
 80084d2:	4002      	ands	r2, r0
 80084d4:	f042 0202 	orr.w	r2, r2, #2
 80084d8:	609a      	str	r2, [r3, #8]
 80084da:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80084dc:	f7ff f94a 	bl	8007774 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084e0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80084e2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d50b      	bpl.n	8008502 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084ea:	f7ff f943 	bl	8007774 <HAL_GetTick>
 80084ee:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084f0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084f2:	2802      	cmp	r0, #2
 80084f4:	d902      	bls.n	80084fc <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	07d2      	lsls	r2, r2, #31
 80084fa:	d4de      	bmi.n	80084ba <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	07db      	lsls	r3, r3, #31
 8008500:	d4f3      	bmi.n	80084ea <ADC_Disable+0x52>
  return HAL_OK;
 8008502:	2000      	movs	r0, #0
}
 8008504:	bd38      	pop	{r3, r4, r5, pc}
 8008506:	bf00      	nop
 8008508:	7fffffc0 	.word	0x7fffffc0

0800850c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800850c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800850e:	4a57      	ldr	r2, [pc, #348]	; (800866c <ADC_ConfigureBoostMode+0x160>)
{
 8008510:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	4293      	cmp	r3, r2
 8008516:	d026      	beq.n	8008566 <ADC_ConfigureBoostMode+0x5a>
 8008518:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800851c:	4293      	cmp	r3, r2
 800851e:	d022      	beq.n	8008566 <ADC_ConfigureBoostMode+0x5a>
 8008520:	4b53      	ldr	r3, [pc, #332]	; (8008670 <ADC_ConfigureBoostMode+0x164>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8008528:	d022      	beq.n	8008570 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800852a:	f003 f8bd 	bl	800b6a8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800852e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8008530:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8008532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008536:	f000 8088 	beq.w	800864a <ADC_ConfigureBoostMode+0x13e>
 800853a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800853e:	d06c      	beq.n	800861a <ADC_ConfigureBoostMode+0x10e>
 8008540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008544:	f000 8081 	beq.w	800864a <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008548:	f7ff f92c 	bl	80077a4 <HAL_GetREVID>
 800854c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008550:	4298      	cmp	r0, r3
 8008552:	d84b      	bhi.n	80085ec <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 8008554:	4b47      	ldr	r3, [pc, #284]	; (8008674 <ADC_ConfigureBoostMode+0x168>)
 8008556:	429d      	cmp	r5, r3
 8008558:	d92a      	bls.n	80085b0 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	6893      	ldr	r3, [r2, #8]
 800855e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008562:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008564:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008566:	4b44      	ldr	r3, [pc, #272]	; (8008678 <ADC_ConfigureBoostMode+0x16c>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800856e:	d1dc      	bne.n	800852a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008570:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008574:	2100      	movs	r1, #0
 8008576:	f004 fa6d 	bl	800ca54 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800857a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800857c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800857e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008582:	d06c      	beq.n	800865e <ADC_ConfigureBoostMode+0x152>
 8008584:	d808      	bhi.n	8008598 <ADC_ConfigureBoostMode+0x8c>
 8008586:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800858a:	d050      	beq.n	800862e <ADC_ConfigureBoostMode+0x122>
 800858c:	d916      	bls.n	80085bc <ADC_ConfigureBoostMode+0xb0>
 800858e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008592:	d1d9      	bne.n	8008548 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8008594:	0945      	lsrs	r5, r0, #5
        break;
 8008596:	e7d7      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8008598:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800859c:	d045      	beq.n	800862a <ADC_ConfigureBoostMode+0x11e>
 800859e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80085a2:	d1d1      	bne.n	8008548 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80085a4:	f7ff f8fe 	bl	80077a4 <HAL_GetREVID>
 80085a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80085ac:	4298      	cmp	r0, r3
 80085ae:	d840      	bhi.n	8008632 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	6893      	ldr	r3, [r2, #8]
 80085b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b8:	6093      	str	r3, [r2, #8]
}
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80085bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c0:	d006      	beq.n	80085d0 <ADC_ConfigureBoostMode+0xc4>
 80085c2:	d90a      	bls.n	80085da <ADC_ConfigureBoostMode+0xce>
 80085c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80085c8:	d002      	beq.n	80085d0 <ADC_ConfigureBoostMode+0xc4>
 80085ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80085ce:	d1bb      	bne.n	8008548 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80085d0:	0c9b      	lsrs	r3, r3, #18
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80085d8:	e7b6      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 80085da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085de:	d0f7      	beq.n	80085d0 <ADC_ConfigureBoostMode+0xc4>
 80085e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085e4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80085e8:	d0f2      	beq.n	80085d0 <ADC_ConfigureBoostMode+0xc4>
 80085ea:	e7ad      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 80085ec:	4b23      	ldr	r3, [pc, #140]	; (800867c <ADC_ConfigureBoostMode+0x170>)
 80085ee:	429d      	cmp	r5, r3
 80085f0:	d805      	bhi.n	80085fe <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	6893      	ldr	r3, [r2, #8]
 80085f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fa:	6093      	str	r3, [r2, #8]
}
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 80085fe:	4b20      	ldr	r3, [pc, #128]	; (8008680 <ADC_ConfigureBoostMode+0x174>)
 8008600:	429d      	cmp	r5, r3
 8008602:	d91a      	bls.n	800863a <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 8008604:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008606:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8008608:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800860a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800860c:	d829      	bhi.n	8008662 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800860e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008616:	6093      	str	r3, [r2, #8]
}
 8008618:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800861a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800861c:	f7ff f8c2 	bl	80077a4 <HAL_GetREVID>
 8008620:	f241 0303 	movw	r3, #4099	; 0x1003
 8008624:	4298      	cmp	r0, r3
 8008626:	d8e1      	bhi.n	80085ec <ADC_ConfigureBoostMode+0xe0>
 8008628:	e794      	b.n	8008554 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 800862a:	09c5      	lsrs	r5, r0, #7
        break;
 800862c:	e78c      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 800862e:	0905      	lsrs	r5, r0, #4
        break;
 8008630:	e78a      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <ADC_ConfigureBoostMode+0x170>)
 8008634:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8008638:	d2db      	bcs.n	80085f2 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	6893      	ldr	r3, [r2, #8]
 800863e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008646:	6093      	str	r3, [r2, #8]
}
 8008648:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008650:	f7ff f8a8 	bl	80077a4 <HAL_GetREVID>
 8008654:	f241 0303 	movw	r3, #4099	; 0x1003
 8008658:	4298      	cmp	r0, r3
 800865a:	d8c7      	bhi.n	80085ec <ADC_ConfigureBoostMode+0xe0>
 800865c:	e77a      	b.n	8008554 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 800865e:	0985      	lsrs	r5, r0, #6
        break;
 8008660:	e772      	b.n	8008548 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008662:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008666:	6093      	str	r3, [r2, #8]
}
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	40022000 	.word	0x40022000
 8008670:	58026300 	.word	0x58026300
 8008674:	01312d00 	.word	0x01312d00
 8008678:	40022300 	.word	0x40022300
 800867c:	00bebc21 	.word	0x00bebc21
 8008680:	017d7841 	.word	0x017d7841
 8008684:	02faf081 	.word	0x02faf081

08008688 <HAL_ADC_Init>:
{
 8008688:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800868a:	2300      	movs	r3, #0
{
 800868c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800868e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8008690:	2800      	cmp	r0, #0
 8008692:	f000 80d1 	beq.w	8008838 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008696:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8008698:	4604      	mov	r4, r0
 800869a:	2d00      	cmp	r5, #0
 800869c:	f000 80bb 	beq.w	8008816 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80086a0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80086a2:	6893      	ldr	r3, [r2, #8]
 80086a4:	009d      	lsls	r5, r3, #2
 80086a6:	d503      	bpl.n	80086b0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80086a8:	6891      	ldr	r1, [r2, #8]
 80086aa:	4b72      	ldr	r3, [pc, #456]	; (8008874 <HAL_ADC_Init+0x1ec>)
 80086ac:	400b      	ands	r3, r1
 80086ae:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80086b0:	6893      	ldr	r3, [r2, #8]
 80086b2:	00d8      	lsls	r0, r3, #3
 80086b4:	d416      	bmi.n	80086e4 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086b6:	4b70      	ldr	r3, [pc, #448]	; (8008878 <HAL_ADC_Init+0x1f0>)
 80086b8:	4970      	ldr	r1, [pc, #448]	; (800887c <HAL_ADC_Init+0x1f4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80086bc:	6890      	ldr	r0, [r2, #8]
 80086be:	099b      	lsrs	r3, r3, #6
 80086c0:	fba1 1303 	umull	r1, r3, r1, r3
 80086c4:	496e      	ldr	r1, [pc, #440]	; (8008880 <HAL_ADC_Init+0x1f8>)
 80086c6:	099b      	lsrs	r3, r3, #6
 80086c8:	4001      	ands	r1, r0
 80086ca:	3301      	adds	r3, #1
 80086cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80086d0:	6091      	str	r1, [r2, #8]
 80086d2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	b12b      	cbz	r3, 80086e4 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	3b01      	subs	r3, #1
 80086dc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f9      	bne.n	80086d8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80086e4:	6893      	ldr	r3, [r2, #8]
 80086e6:	00d9      	lsls	r1, r3, #3
 80086e8:	d424      	bmi.n	8008734 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80086ec:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ee:	f043 0310 	orr.w	r3, r3, #16
 80086f2:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086f6:	432b      	orrs	r3, r5
 80086f8:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80086fa:	6893      	ldr	r3, [r2, #8]
 80086fc:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008702:	d11d      	bne.n	8008740 <HAL_ADC_Init+0xb8>
 8008704:	06db      	lsls	r3, r3, #27
 8008706:	d41b      	bmi.n	8008740 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8008708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800870a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800870e:	f043 0302 	orr.w	r3, r3, #2
 8008712:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008714:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008716:	07de      	lsls	r6, r3, #31
 8008718:	d428      	bmi.n	800876c <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800871a:	4b5a      	ldr	r3, [pc, #360]	; (8008884 <HAL_ADC_Init+0x1fc>)
 800871c:	429a      	cmp	r2, r3
 800871e:	d017      	beq.n	8008750 <HAL_ADC_Init+0xc8>
 8008720:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008724:	429a      	cmp	r2, r3
 8008726:	d013      	beq.n	8008750 <HAL_ADC_Init+0xc8>
 8008728:	4b57      	ldr	r3, [pc, #348]	; (8008888 <HAL_ADC_Init+0x200>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	07d9      	lsls	r1, r3, #31
 800872e:	d41d      	bmi.n	800876c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008730:	4a56      	ldr	r2, [pc, #344]	; (800888c <HAL_ADC_Init+0x204>)
 8008732:	e015      	b.n	8008760 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008734:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008736:	2500      	movs	r5, #0
 8008738:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800873c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800873e:	d0e1      	beq.n	8008704 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008740:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008742:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008744:	f043 0310 	orr.w	r3, r3, #16
}
 8008748:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800874a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800874c:	b002      	add	sp, #8
 800874e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008750:	4a4c      	ldr	r2, [pc, #304]	; (8008884 <HAL_ADC_Init+0x1fc>)
 8008752:	4b4f      	ldr	r3, [pc, #316]	; (8008890 <HAL_ADC_Init+0x208>)
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008758:	4313      	orrs	r3, r2
 800875a:	07d8      	lsls	r0, r3, #31
 800875c:	d406      	bmi.n	800876c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800875e:	4a4d      	ldr	r2, [pc, #308]	; (8008894 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008760:	6893      	ldr	r3, [r2, #8]
 8008762:	6861      	ldr	r1, [r4, #4]
 8008764:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8008768:	430b      	orrs	r3, r1
 800876a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800876c:	f7ff f81a 	bl	80077a4 <HAL_GetREVID>
 8008770:	f241 0303 	movw	r3, #4099	; 0x1003
 8008774:	68a1      	ldr	r1, [r4, #8]
 8008776:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008778:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800877a:	d852      	bhi.n	8008822 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800877c:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008780:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008782:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008784:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8008788:	4302      	orrs	r2, r0
 800878a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800878c:	2b01      	cmp	r3, #1
 800878e:	d103      	bne.n	8008798 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008790:	6a23      	ldr	r3, [r4, #32]
 8008792:	3b01      	subs	r3, #1
 8008794:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800879a:	b123      	cbz	r3, 80087a6 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800879c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80087a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087a2:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087a4:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	493b      	ldr	r1, [pc, #236]	; (8008898 <HAL_ADC_Init+0x210>)
 80087aa:	68d8      	ldr	r0, [r3, #12]
 80087ac:	4001      	ands	r1, r0
 80087ae:	430a      	orrs	r2, r1
 80087b0:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80087b8:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087ba:	d11c      	bne.n	80087f6 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80087bc:	0712      	lsls	r2, r2, #28
 80087be:	d41a      	bmi.n	80087f6 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80087c0:	68d8      	ldr	r0, [r3, #12]
 80087c2:	4a36      	ldr	r2, [pc, #216]	; (800889c <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80087c4:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80087c6:	4002      	ands	r2, r0
 80087c8:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80087cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80087ce:	430a      	orrs	r2, r1
 80087d0:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80087d2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80087d6:	2a01      	cmp	r2, #1
 80087d8:	d03a      	beq.n	8008850 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80087e2:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80087e4:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80087e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80087ec:	430a      	orrs	r2, r1
 80087ee:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80087f0:	f7ff fe8c 	bl	800850c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80087f4:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80087f6:	68e2      	ldr	r2, [r4, #12]
 80087f8:	2a01      	cmp	r2, #1
 80087fa:	d021      	beq.n	8008840 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80087fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fe:	f022 020f 	bic.w	r2, r2, #15
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008804:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8008806:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008808:	f023 0303 	bic.w	r3, r3, #3
 800880c:	f043 0301 	orr.w	r3, r3, #1
 8008810:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008812:	b002      	add	sp, #8
 8008814:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8008816:	f7fe fab5 	bl	8006d84 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800881a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800881c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008820:	e73e      	b.n	80086a0 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8008822:	2910      	cmp	r1, #16
 8008824:	d1aa      	bne.n	800877c <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008826:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008828:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800882a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800882e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008830:	430a      	orrs	r2, r1
 8008832:	f042 021c 	orr.w	r2, r2, #28
 8008836:	e7a9      	b.n	800878c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8008838:	2501      	movs	r5, #1
}
 800883a:	4628      	mov	r0, r5
 800883c:	b002      	add	sp, #8
 800883e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008842:	69a2      	ldr	r2, [r4, #24]
 8008844:	f021 010f 	bic.w	r1, r1, #15
 8008848:	3a01      	subs	r2, #1
 800884a:	430a      	orrs	r2, r1
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
 800884e:	e7d9      	b.n	8008804 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8008850:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8008854:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8008856:	3901      	subs	r1, #1
 8008858:	6918      	ldr	r0, [r3, #16]
 800885a:	4332      	orrs	r2, r6
 800885c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008862:	430a      	orrs	r2, r1
 8008864:	490e      	ldr	r1, [pc, #56]	; (80088a0 <HAL_ADC_Init+0x218>)
 8008866:	4001      	ands	r1, r0
 8008868:	430a      	orrs	r2, r1
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	611a      	str	r2, [r3, #16]
 8008870:	e7b7      	b.n	80087e2 <HAL_ADC_Init+0x15a>
 8008872:	bf00      	nop
 8008874:	5fffffc0 	.word	0x5fffffc0
 8008878:	24000318 	.word	0x24000318
 800887c:	053e2d63 	.word	0x053e2d63
 8008880:	6fffffc0 	.word	0x6fffffc0
 8008884:	40022000 	.word	0x40022000
 8008888:	58026000 	.word	0x58026000
 800888c:	58026300 	.word	0x58026300
 8008890:	40022100 	.word	0x40022100
 8008894:	40022300 	.word	0x40022300
 8008898:	fff0c003 	.word	0xfff0c003
 800889c:	ffffbffc 	.word	0xffffbffc
 80088a0:	fc00f81e 	.word	0xfc00f81e

080088a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80088a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80088a6:	2300      	movs	r3, #0
{
 80088a8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80088aa:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d040      	beq.n	8008936 <HAL_ADCEx_Calibration_Start+0x92>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4604      	mov	r4, r0
 80088b8:	460e      	mov	r6, r1
 80088ba:	4615      	mov	r5, r2
 80088bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80088c0:	f7ff fdea 	bl	8008498 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80088c4:	b9e8      	cbnz	r0, 8008902 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088c6:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80088c8:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 80088cc:	4b1b      	ldr	r3, [pc, #108]	; (800893c <HAL_ADCEx_Calibration_Start+0x98>)
 80088ce:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 80088d2:	4d1b      	ldr	r5, [pc, #108]	; (8008940 <HAL_ADCEx_Calibration_Start+0x9c>)
 80088d4:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80088d6:	4f1b      	ldr	r7, [pc, #108]	; (8008944 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 80088d8:	f043 0302 	orr.w	r3, r3, #2
 80088dc:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	689e      	ldr	r6, [r3, #8]
 80088e2:	4035      	ands	r5, r6
 80088e4:	4315      	orrs	r5, r2
 80088e6:	430d      	orrs	r5, r1
 80088e8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80088ec:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	db0f      	blt.n	8008914 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	6563      	str	r3, [r4, #84]	; 0x54
 8008900:	e003      	b.n	800890a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008902:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008904:	f043 0310 	orr.w	r3, r3, #16
 8008908:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800890a:	2300      	movs	r3, #0
 800890c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8008910:	b003      	add	sp, #12
 8008912:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	3201      	adds	r2, #1
 8008918:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	42ba      	cmp	r2, r7
 800891e:	d3e6      	bcc.n	80088ee <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8008920:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8008922:	2200      	movs	r2, #0
        return HAL_ERROR;
 8008924:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8008926:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800892a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800892e:	f043 0310 	orr.w	r3, r3, #16
 8008932:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8008934:	e7ec      	b.n	8008910 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8008936:	2002      	movs	r0, #2
}
 8008938:	b003      	add	sp, #12
 800893a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893c:	ffffeefd 	.word	0xffffeefd
 8008940:	3ffeffc0 	.word	0x3ffeffc0
 8008944:	25c3f800 	.word	0x25c3f800

08008948 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800894c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8008950:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008952:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008956:	f015 0504 	ands.w	r5, r5, #4
 800895a:	d117      	bne.n	800898c <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800895c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008960:	4604      	mov	r4, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d012      	beq.n	800898c <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008966:	4b2d      	ldr	r3, [pc, #180]	; (8008a1c <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8008968:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800896c:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800896e:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008970:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 8008972:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008976:	d00d      	beq.n	8008994 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008978:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 800897a:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 800897c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008980:	f043 0320 	orr.w	r3, r3, #32
 8008984:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8008986:	b01a      	add	sp, #104	; 0x68
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800898c:	2002      	movs	r0, #2
}
 800898e:	b01a      	add	sp, #104	; 0x68
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	4d22      	ldr	r5, [pc, #136]	; (8008a20 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8008996:	460e      	mov	r6, r1
 8008998:	4617      	mov	r7, r2
 800899a:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 800899c:	f7ff fd26 	bl	80083ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80089a0:	b128      	cbz	r0, 80089ae <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 80089a2:	2300      	movs	r3, #0
 80089a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80089a8:	b01a      	add	sp, #104	; 0x68
 80089aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80089ae:	a801      	add	r0, sp, #4
 80089b0:	f7ff fd1c 	bl	80083ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d1f4      	bne.n	80089a2 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80089b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80089bc:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 80089be:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089c0:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 80089c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089c8:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 80089ca:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80089cc:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80089ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80089d0:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80089d2:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 80089d4:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80089d6:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 80089d8:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089da:	d01d      	beq.n	8008a18 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80089dc:	45ac      	cmp	ip, r5
 80089de:	d01b      	beq.n	8008a18 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80089e0:	4914      	ldr	r1, [pc, #80]	; (8008a34 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80089e2:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80089e4:	463b      	mov	r3, r7
 80089e6:	4632      	mov	r2, r6
 80089e8:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80089ea:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 80089ee:	2500      	movs	r5, #0
 80089f0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80089f4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80089f8:	f045 0510 	orr.w	r5, r5, #16
 80089fc:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8008a00:	f000 fef8 	bl	80097f4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008a04:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8008a08:	6891      	ldr	r1, [r2, #8]
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	f043 0304 	orr.w	r3, r3, #4
 8008a10:	6093      	str	r3, [r2, #8]
}
 8008a12:	b01a      	add	sp, #104	; 0x68
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a18:	4908      	ldr	r1, [pc, #32]	; (8008a3c <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8008a1a:	e7e2      	b.n	80089e2 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8008a1c:	40022000 	.word	0x40022000
 8008a20:	40022100 	.word	0x40022100
 8008a24:	fffff0fe 	.word	0xfffff0fe
 8008a28:	08007a99 	.word	0x08007a99
 8008a2c:	08007809 	.word	0x08007809
 8008a30:	08007b05 	.word	0x08007b05
 8008a34:	58026300 	.word	0x58026300
 8008a38:	7fffffc0 	.word	0x7fffffc0
 8008a3c:	40022300 	.word	0x40022300

08008a40 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8008a40:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a42:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8008a46:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d05a      	beq.n	8008b02 <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8008a4c:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008a4e:	2103      	movs	r1, #3
 8008a50:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008a52:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008a56:	f7ff fc4d 	bl	80082f4 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	bb40      	cbnz	r0, 8008ab0 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a5e:	4b3d      	ldr	r3, [pc, #244]	; (8008b54 <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8008a60:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008a62:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a64:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008a66:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a68:	d028      	beq.n	8008abc <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a6a:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8008a6c:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 8008a6e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a72:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8008a76:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a78:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008a7a:	b01a      	add	sp, #104	; 0x68
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008a7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008a80:	f001 f850 	bl	8009b24 <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 8008a84:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008a86:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 8008a88:	d053      	beq.n	8008b32 <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	6853      	ldr	r3, [r2, #4]
 8008a8e:	f023 0310 	bic.w	r3, r3, #16
 8008a92:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d155      	bne.n	8008b44 <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8008a98:	a801      	add	r0, sp, #4
 8008a9a:	f7ff fcfd 	bl	8008498 <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff fcfa 	bl	8008498 <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 8008aa4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008aa6:	4b2c      	ldr	r3, [pc, #176]	; (8008b58 <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8008ab4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008ab8:	b01a      	add	sp, #104	; 0x68
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	4b27      	ldr	r3, [pc, #156]	; (8008b5c <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 8008abe:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8008ac0:	f7fe fe58 	bl	8007774 <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008ac4:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8008ac6:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	075b      	lsls	r3, r3, #29
 8008acc:	d41d      	bmi.n	8008b0a <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	075a      	lsls	r2, r3, #29
 8008ad4:	d5d3      	bpl.n	8008a7e <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008ad6:	f7fe fe4d 	bl	8007774 <HAL_GetTick>
 8008ada:	1b43      	subs	r3, r0, r5
 8008adc:	2b05      	cmp	r3, #5
 8008ade:	d91b      	bls.n	8008b18 <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	0750      	lsls	r0, r2, #29
 8008ae6:	d51f      	bpl.n	8008b28 <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aec:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8008aee:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8008af0:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008af2:	f043 0310 	orr.w	r3, r3, #16
}
 8008af6:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 8008af8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008afc:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008afe:	b01a      	add	sp, #104	; 0x68
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8008b02:	2502      	movs	r5, #2
}
 8008b04:	4628      	mov	r0, r5
 8008b06:	b01a      	add	sp, #104	; 0x68
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b0e:	f7fe fe31 	bl	8007774 <HAL_GetTick>
 8008b12:	1b43      	subs	r3, r0, r5
 8008b14:	2b05      	cmp	r3, #5
 8008b16:	d8e3      	bhi.n	8008ae0 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b18:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f013 0f04 	tst.w	r3, #4
 8008b22:	6893      	ldr	r3, [r2, #8]
 8008b24:	d1d7      	bne.n	8008ad6 <HAL_ADCEx_MultiModeStop_DMA+0x96>
 8008b26:	e7d4      	b.n	8008ad2 <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	6891      	ldr	r1, [r2, #8]
 8008b2c:	0749      	lsls	r1, r1, #29
 8008b2e:	d5f5      	bpl.n	8008b1c <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 8008b30:	e7dc      	b.n	8008aec <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008b34:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008b3c:	6853      	ldr	r3, [r2, #4]
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7ff fca7 	bl	8008498 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8008b4a:	a801      	add	r0, sp, #4
 8008b4c:	f7ff fca4 	bl	8008498 <ADC_Disable>
 8008b50:	e7a8      	b.n	8008aa4 <HAL_ADCEx_MultiModeStop_DMA+0x64>
 8008b52:	bf00      	nop
 8008b54:	40022000 	.word	0x40022000
 8008b58:	ffffeefe 	.word	0xffffeefe
 8008b5c:	40022100 	.word	0x40022100

08008b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop

08008b64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop

08008b68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop

08008b70 <HAL_ADCEx_EndOfSamplingCallback>:
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop

08008b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008b74:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b76:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8008b7a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b7c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8008b7e:	2a01      	cmp	r2, #1
 8008b80:	d04d      	beq.n	8008c1e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8008b82:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008b84:	4c2b      	ldr	r4, [pc, #172]	; (8008c34 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008b86:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8008b88:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008b8a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008b8c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008b8e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8008b90:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008b94:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008b96:	d008      	beq.n	8008baa <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b98:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b9e:	f041 0120 	orr.w	r1, r1, #32
 8008ba2:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8008ba4:	b01a      	add	sp, #104	; 0x68
 8008ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8008ba8:	4770      	bx	lr
 8008baa:	4c23      	ldr	r4, [pc, #140]	; (8008c38 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8008bac:	68a2      	ldr	r2, [r4, #8]
 8008bae:	0752      	lsls	r2, r2, #29
 8008bb0:	d50b      	bpl.n	8008bca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008bb2:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008bb6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bb8:	f042 0220 	orr.w	r2, r2, #32
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8008bc4:	b01a      	add	sp, #104	; 0x68
 8008bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8008bc8:	4770      	bx	lr
 8008bca:	68a8      	ldr	r0, [r5, #8]
 8008bcc:	f010 0004 	ands.w	r0, r0, #4
 8008bd0:	d1f0      	bne.n	8008bb4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008bd2:	b1c6      	cbz	r6, 8008c06 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008bd4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008c40 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8008bd8:	684f      	ldr	r7, [r1, #4]
 8008bda:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008bde:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008be2:	433a      	orrs	r2, r7
 8008be4:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008be8:	68ad      	ldr	r5, [r5, #8]
 8008bea:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008bec:	432a      	orrs	r2, r5
 8008bee:	07d4      	lsls	r4, r2, #31
 8008bf0:	d413      	bmi.n	8008c1a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8008bf2:	688a      	ldr	r2, [r1, #8]
 8008bf4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008bf8:	4316      	orrs	r6, r2
 8008bfa:	4a10      	ldr	r2, [pc, #64]	; (8008c3c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008bfc:	400a      	ands	r2, r1
 8008bfe:	4316      	orrs	r6, r2
 8008c00:	f8cc 6008 	str.w	r6, [ip, #8]
 8008c04:	e7db      	b.n	8008bbe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008c06:	490e      	ldr	r1, [pc, #56]	; (8008c40 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8008c08:	688a      	ldr	r2, [r1, #8]
 8008c0a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c0e:	608a      	str	r2, [r1, #8]
 8008c10:	68a8      	ldr	r0, [r5, #8]
 8008c12:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c14:	4302      	orrs	r2, r0
 8008c16:	07d0      	lsls	r0, r2, #31
 8008c18:	d505      	bpl.n	8008c26 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e7cf      	b.n	8008bbe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8008c1e:	2002      	movs	r0, #2
}
 8008c20:	b01a      	add	sp, #104	; 0x68
 8008c22:	bcf0      	pop	{r4, r5, r6, r7}
 8008c24:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c26:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c28:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c2a:	4a04      	ldr	r2, [pc, #16]	; (8008c3c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008c2c:	4022      	ands	r2, r4
 8008c2e:	608a      	str	r2, [r1, #8]
 8008c30:	e7c5      	b.n	8008bbe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008c32:	bf00      	nop
 8008c34:	40022000 	.word	0x40022000
 8008c38:	40022100 	.word	0x40022100
 8008c3c:	fffff0e0 	.word	0xfffff0e0
 8008c40:	40022300 	.word	0x40022300

08008c44 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c44:	4906      	ldr	r1, [pc, #24]	; (8008c60 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c46:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c4a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c4e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c50:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c54:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c58:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008c5a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008c5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008c5e:	4770      	bx	lr
 8008c60:	e000ed00 	.word	0xe000ed00
 8008c64:	05fa0000 	.word	0x05fa0000

08008c68 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c68:	4b1b      	ldr	r3, [pc, #108]	; (8008cd8 <HAL_NVIC_SetPriority+0x70>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c70:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c72:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c76:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c7a:	f1be 0f04 	cmp.w	lr, #4
 8008c7e:	bf28      	it	cs
 8008c80:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c84:	f1bc 0f06 	cmp.w	ip, #6
 8008c88:	d91a      	bls.n	8008cc0 <HAL_NVIC_SetPriority+0x58>
 8008c8a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c8c:	f04f 3cff 	mov.w	ip, #4294967295
 8008c90:	fa0c fc03 	lsl.w	ip, ip, r3
 8008c94:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c98:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008c9c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c9e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008ca2:	ea21 010c 	bic.w	r1, r1, ip
 8008ca6:	fa01 f103 	lsl.w	r1, r1, r3
 8008caa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008cae:	db0a      	blt.n	8008cc6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cb0:	0109      	lsls	r1, r1, #4
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <HAL_NVIC_SetPriority+0x74>)
 8008cb4:	b2c9      	uxtb	r1, r1
 8008cb6:	4403      	add	r3, r0
 8008cb8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cc0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	e7e8      	b.n	8008c98 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc6:	f000 000f 	and.w	r0, r0, #15
 8008cca:	0109      	lsls	r1, r1, #4
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <HAL_NVIC_SetPriority+0x78>)
 8008cce:	b2c9      	uxtb	r1, r1
 8008cd0:	4403      	add	r3, r0
 8008cd2:	7619      	strb	r1, [r3, #24]
 8008cd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cd8:	e000ed00 	.word	0xe000ed00
 8008cdc:	e000e100 	.word	0xe000e100
 8008ce0:	e000ecfc 	.word	0xe000ecfc

08008ce4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	db07      	blt.n	8008cf8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f000 011f 	and.w	r1, r0, #31
 8008cee:	4a03      	ldr	r2, [pc, #12]	; (8008cfc <HAL_NVIC_EnableIRQ+0x18>)
 8008cf0:	0940      	lsrs	r0, r0, #5
 8008cf2:	408b      	lsls	r3, r1
 8008cf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	e000e100 	.word	0xe000e100

08008d00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d00:	1e43      	subs	r3, r0, #1
 8008d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d06:	d20c      	bcs.n	8008d22 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d08:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d0c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d0e:	4906      	ldr	r1, [pc, #24]	; (8008d28 <HAL_SYSTICK_Config+0x28>)
 8008d10:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d14:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d16:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d18:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d1c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d1e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008d22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000ed00 	.word	0xe000ed00

08008d2c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008d2c:	b188      	cbz	r0, 8008d52 <HAL_DAC_Init+0x26>
{
 8008d2e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d30:	7903      	ldrb	r3, [r0, #4]
 8008d32:	4604      	mov	r4, r0
 8008d34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008d38:	b13b      	cbz	r3, 8008d4a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d3a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d3c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d3e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d40:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008d42:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d44:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008d46:	7122      	strb	r2, [r4, #4]
}
 8008d48:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8008d4a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008d4c:	f7fe f8c2 	bl	8006ed4 <HAL_DAC_MspInit>
 8008d50:	e7f3      	b.n	8008d3a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8008d52:	2001      	movs	r0, #1
}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop

08008d58 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008d58:	7942      	ldrb	r2, [r0, #5]
 8008d5a:	2a01      	cmp	r2, #1
 8008d5c:	d02e      	beq.n	8008dbc <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008d64:	6800      	ldr	r0, [r0, #0]
 8008d66:	2201      	movs	r2, #1
{
 8008d68:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8008d6a:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d6e:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008d72:	6804      	ldr	r4, [r0, #0]
 8008d74:	fa02 f20e 	lsl.w	r2, r2, lr
 8008d78:	4322      	orrs	r2, r4
 8008d7a:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008d7c:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8008d7e:	b969      	cbnz	r1, 8008d9c <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008d80:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8008d84:	4562      	cmp	r2, ip
 8008d86:	d103      	bne.n	8008d90 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008d88:	6842      	ldr	r2, [r0, #4]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008d90:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008d92:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8008d94:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8008d96:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008d98:	715a      	strb	r2, [r3, #5]
}
 8008d9a:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008d9c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008da0:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8008da4:	4562      	cmp	r2, ip
 8008da6:	d1f3      	bne.n	8008d90 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008da8:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8008daa:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008dac:	f042 0202 	orr.w	r2, r2, #2
 8008db0:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8008db2:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008db4:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8008db6:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8008db8:	715a      	strb	r2, [r3, #5]
}
 8008dba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8008dbc:	2002      	movs	r0, #2
}
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008dc4:	7940      	ldrb	r0, [r0, #5]
{
 8008dc6:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8008dc8:	2801      	cmp	r0, #1
 8008dca:	d053      	beq.n	8008e74 <HAL_DAC_Start_DMA+0xb4>
 8008dcc:	460d      	mov	r5, r1
 8008dce:	4611      	mov	r1, r2
 8008dd0:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008dd2:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8008dd4:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008dda:	bb3d      	cbnz	r5, 8008e2c <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008ddc:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008dde:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008de0:	4a37      	ldr	r2, [pc, #220]	; (8008ec0 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008de2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ec8 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008de6:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008de8:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008dea:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008df2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008ecc <HAL_DAC_Start_DMA+0x10c>
 8008df6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008dfa:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008dfc:	d042      	beq.n	8008e84 <HAL_DAC_Start_DMA+0xc4>
 8008dfe:	2f08      	cmp	r7, #8
 8008e00:	d03d      	beq.n	8008e7e <HAL_DAC_Start_DMA+0xbe>
 8008e02:	2f00      	cmp	r7, #0
 8008e04:	d038      	beq.n	8008e78 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e06:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e08:	6837      	ldr	r7, [r6, #0]
 8008e0a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8008e0e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008e10:	f000 fcf0 	bl	80097f4 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008e14:	2300      	movs	r3, #0
 8008e16:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008e18:	bb38      	cbnz	r0, 8008e6a <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f005 0110 	and.w	r1, r5, #16
 8008e20:	2501      	movs	r5, #1
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	408d      	lsls	r5, r1
 8008e26:	4315      	orrs	r5, r2
 8008e28:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e2c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008e2e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e30:	4a24      	ldr	r2, [pc, #144]	; (8008ec4 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008e32:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008ed0 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e36:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e38:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008e3a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008e42:	f8df c090 	ldr.w	ip, [pc, #144]	; 8008ed4 <HAL_DAC_Start_DMA+0x114>
 8008e46:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e4a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008e4c:	d02f      	beq.n	8008eae <HAL_DAC_Start_DMA+0xee>
 8008e4e:	2f08      	cmp	r7, #8
 8008e50:	d024      	beq.n	8008e9c <HAL_DAC_Start_DMA+0xdc>
 8008e52:	b1d7      	cbz	r7, 8008e8a <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e54:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e56:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e58:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008e5c:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008e5e:	f000 fcc9 	bl	80097f4 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008e62:	2300      	movs	r3, #0
 8008e64:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0d7      	beq.n	8008e1a <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	f043 0304 	orr.w	r3, r3, #4
 8008e70:	6123      	str	r3, [r4, #16]
}
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8008e74:	2002      	movs	r0, #2
}
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008e78:	f106 0208 	add.w	r2, r6, #8
        break;
 8008e7c:	e7c4      	b.n	8008e08 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008e7e:	f106 0210 	add.w	r2, r6, #16
        break;
 8008e82:	e7c1      	b.n	8008e08 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008e84:	f106 020c 	add.w	r2, r6, #12
        break;
 8008e88:	e7be      	b.n	8008e08 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e8a:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008e8c:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e90:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008e94:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008e96:	f000 fcad 	bl	80097f4 <HAL_DMA_Start_IT>
 8008e9a:	e7e2      	b.n	8008e62 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e9c:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008e9e:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ea2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008ea6:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008ea8:	f000 fca4 	bl	80097f4 <HAL_DMA_Start_IT>
 8008eac:	e7d9      	b.n	8008e62 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008eae:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008eb0:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008eb4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008eb8:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008eba:	f000 fc9b 	bl	80097f4 <HAL_DMA_Start_IT>
 8008ebe:	e7d0      	b.n	8008e62 <HAL_DAC_Start_DMA+0xa2>
 8008ec0:	08008f09 	.word	0x08008f09
 8008ec4:	0800910d 	.word	0x0800910d
 8008ec8:	08008f19 	.word	0x08008f19
 8008ecc:	08008f29 	.word	0x08008f29
 8008ed0:	08009121 	.word	0x08009121
 8008ed4:	08009131 	.word	0x08009131

08008ed8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008ed8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008eda:	6800      	ldr	r0, [r0, #0]
{
 8008edc:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008ede:	2400      	movs	r4, #0
 8008ee0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008ee2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008ee4:	b951      	cbnz	r1, 8008efc <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008ee6:	9901      	ldr	r1, [sp, #4]
 8008ee8:	3108      	adds	r1, #8
 8008eea:	440a      	add	r2, r1
 8008eec:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008eee:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8008ef0:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008ef2:	6013      	str	r3, [r2, #0]
}
 8008ef4:	b003      	add	sp, #12
 8008ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efa:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008efc:	9901      	ldr	r1, [sp, #4]
 8008efe:	3114      	adds	r1, #20
 8008f00:	440a      	add	r2, r1
 8008f02:	9201      	str	r2, [sp, #4]
 8008f04:	e7f3      	b.n	8008eee <HAL_DAC_SetValue+0x16>
 8008f06:	bf00      	nop

08008f08 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008f08:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f0a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f7fc fa0d 	bl	800532c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008f12:	2301      	movs	r3, #1
 8008f14:	7123      	strb	r3, [r4, #4]
}
 8008f16:	bd10      	pop	{r4, pc}

08008f18 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008f18:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008f1a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008f1c:	f7fc fa0e 	bl	800533c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008f20:	bd08      	pop	{r3, pc}
 8008f22:	bf00      	nop

08008f24 <HAL_DAC_ErrorCallbackCh1>:
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop

08008f28 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008f28:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f2a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f2c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f2e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f30:	f043 0304 	orr.w	r3, r3, #4
 8008f34:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f36:	f7ff fff5 	bl	8008f24 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	7123      	strb	r3, [r4, #4]
}
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop

08008f44 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008f44:	6803      	ldr	r3, [r0, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	0491      	lsls	r1, r2, #18
{
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008f4e:	d502      	bpl.n	8008f56 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f52:	0492      	lsls	r2, r2, #18
 8008f54:	d418      	bmi.n	8008f88 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	0091      	lsls	r1, r2, #2
 8008f5a:	d502      	bpl.n	8008f62 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5e:	0092      	lsls	r2, r2, #2
 8008f60:	d400      	bmi.n	8008f64 <HAL_DAC_IRQHandler+0x20>
}
 8008f62:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f64:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f66:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f6a:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f6c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008f6e:	6922      	ldr	r2, [r4, #16]
 8008f70:	f042 0202 	orr.w	r2, r2, #2
 8008f74:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f76:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f82:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f84:	f000 b8e0 	b.w	8009148 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f88:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f8e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008f90:	6902      	ldr	r2, [r0, #16]
 8008f92:	f042 0201 	orr.w	r2, r2, #1
 8008f96:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f98:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fa0:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008fa2:	f7ff ffcd 	bl	8008f40 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	e7d5      	b.n	8008f56 <HAL_DAC_IRQHandler+0x12>
 8008faa:	bf00      	nop

08008fac <HAL_DAC_ConfigChannel>:
{
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8008fb0:	7943      	ldrb	r3, [r0, #5]
{
 8008fb2:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8008fb4:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	f000 8098 	beq.w	80090ec <HAL_DAC_ConfigChannel+0x140>
 8008fbc:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008fbe:	2904      	cmp	r1, #4
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 8008fc4:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008fc6:	f04f 0302 	mov.w	r3, #2
 8008fca:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008fcc:	d045      	beq.n	800905a <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008fce:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8008fd2:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008fd4:	6933      	ldr	r3, [r6, #16]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d108      	bne.n	8008fec <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008fda:	241f      	movs	r4, #31
    tmpreg1 = hdac->Instance->CCR;
 8008fdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008fde:	4094      	lsls	r4, r2
 8008fe0:	ea23 0404 	bic.w	r4, r3, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008fe4:	6973      	ldr	r3, [r6, #20]
 8008fe6:	4093      	lsls	r3, r2
 8008fe8:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 8008fea:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008fec:	2407      	movs	r4, #7
 8008fee:	fa04 f302 	lsl.w	r3, r4, r2
  tmpreg1 = hdac->Instance->MCR;
 8008ff2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008ff4:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008ff8:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d028      	beq.n	8009052 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009000:	2b02      	cmp	r3, #2
 8009002:	d028      	beq.n	8009056 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009004:	fab7 f387 	clz	r3, r7
 8009008:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800900a:	433b      	orrs	r3, r7
 800900c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800900e:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009010:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009012:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009014:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009016:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800901a:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800901c:	4094      	lsls	r4, r2
 800901e:	6803      	ldr	r3, [r0, #0]
 8009020:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009024:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009028:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800902a:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 800902c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800902e:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 8009032:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009034:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009036:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8009038:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800903a:	fa01 f302 	lsl.w	r3, r1, r2
 800903e:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8009040:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009042:	ea22 0203 	bic.w	r2, r2, r3
 8009046:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8009048:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 800904a:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 800904c:	7169      	strb	r1, [r5, #5]
}
 800904e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8009052:	2300      	movs	r3, #0
 8009054:	e7d9      	b.n	800900a <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8009056:	2301      	movs	r3, #1
 8009058:	e7d7      	b.n	800900a <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 800905a:	f7fe fb8b 	bl	8007774 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800905e:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009060:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 8009064:	bb1c      	cbnz	r4, 80090ae <HAL_DAC_ConfigChannel+0x102>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009066:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8009104 <HAL_DAC_ConfigChannel+0x158>
 800906a:	ea13 0f08 	tst.w	r3, r8
 800906e:	d00d      	beq.n	800908c <HAL_DAC_ConfigChannel+0xe0>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009070:	f7fe fb80 	bl	8007774 <HAL_GetTick>
 8009074:	1bc3      	subs	r3, r0, r7
 8009076:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009078:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800907a:	d903      	bls.n	8009084 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800907c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907e:	ea12 0f08 	tst.w	r2, r8
 8009082:	d136      	bne.n	80090f2 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	ea13 0f08 	tst.w	r3, r8
 800908a:	d1f1      	bne.n	8009070 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 800908c:	2001      	movs	r0, #1
 800908e:	f7fe fb77 	bl	8007780 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009092:	6828      	ldr	r0, [r5, #0]
 8009094:	69b3      	ldr	r3, [r6, #24]
 8009096:	6403      	str	r3, [r0, #64]	; 0x40
 8009098:	e011      	b.n	80090be <HAL_DAC_ConfigChannel+0x112>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800909a:	f7fe fb6b 	bl	8007774 <HAL_GetTick>
 800909e:	1bc3      	subs	r3, r0, r7
 80090a0:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80090a2:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090a4:	d902      	bls.n	80090ac <HAL_DAC_ConfigChannel+0x100>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80090a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	db22      	blt.n	80090f2 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dbf3      	blt.n	800909a <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 80090b2:	2001      	movs	r0, #1
 80090b4:	f7fe fb64 	bl	8007780 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80090b8:	6828      	ldr	r0, [r5, #0]
 80090ba:	69b3      	ldr	r3, [r6, #24]
 80090bc:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80090be:	f004 0210 	and.w	r2, r4, #16
 80090c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80090c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80090c8:	4091      	lsls	r1, r2
 80090ca:	ea23 0301 	bic.w	r3, r3, r1
 80090ce:	69f1      	ldr	r1, [r6, #28]
 80090d0:	4091      	lsls	r1, r2
 80090d2:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80090d4:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80090d6:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80090d8:	4091      	lsls	r1, r2
 80090da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80090dc:	ea23 0301 	bic.w	r3, r3, r1
 80090e0:	6a31      	ldr	r1, [r6, #32]
 80090e2:	4091      	lsls	r1, r2
 80090e4:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80090e6:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80090e8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80090ea:	e773      	b.n	8008fd4 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 80090ec:	2002      	movs	r0, #2
}
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80090f2:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80090f4:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80090f6:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 80090fa:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80090fc:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80090fe:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8009100:	e7a5      	b.n	800904e <HAL_DAC_ConfigChannel+0xa2>
 8009102:	bf00      	nop
 8009104:	20008000 	.word	0x20008000

08009108 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop

0800910c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800910c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800910e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009110:	4620      	mov	r0, r4
 8009112:	f7ff fff9 	bl	8009108 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009116:	2301      	movs	r3, #1
 8009118:	7123      	strb	r3, [r4, #4]
}
 800911a:	bd10      	pop	{r4, pc}

0800911c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop

08009120 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009120:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009122:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009124:	f7ff fffa 	bl	800911c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009128:	bd08      	pop	{r3, pc}
 800912a:	bf00      	nop

0800912c <HAL_DACEx_ErrorCallbackCh2>:
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop

08009130 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009130:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009132:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009134:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009136:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009138:	f043 0304 	orr.w	r3, r3, #4
 800913c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800913e:	f7ff fff5 	bl	800912c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009142:	2301      	movs	r3, #1
 8009144:	7123      	strb	r3, [r4, #4]
}
 8009146:	bd10      	pop	{r4, pc}

08009148 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop

0800914c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800914c:	6802      	ldr	r2, [r0, #0]
 800914e:	4b34      	ldr	r3, [pc, #208]	; (8009220 <DMA_CalcBaseAndBitshift+0xd4>)
 8009150:	4934      	ldr	r1, [pc, #208]	; (8009224 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8009152:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009154:	4d34      	ldr	r5, [pc, #208]	; (8009228 <DMA_CalcBaseAndBitshift+0xdc>)
 8009156:	4c35      	ldr	r4, [pc, #212]	; (800922c <DMA_CalcBaseAndBitshift+0xe0>)
 8009158:	42aa      	cmp	r2, r5
 800915a:	bf18      	it	ne
 800915c:	429a      	cmpne	r2, r3
 800915e:	bf0c      	ite	eq
 8009160:	2301      	moveq	r3, #1
 8009162:	2300      	movne	r3, #0
 8009164:	428a      	cmp	r2, r1
 8009166:	bf08      	it	eq
 8009168:	f043 0301 	orreq.w	r3, r3, #1
 800916c:	3130      	adds	r1, #48	; 0x30
 800916e:	42a2      	cmp	r2, r4
 8009170:	bf08      	it	eq
 8009172:	f043 0301 	orreq.w	r3, r3, #1
 8009176:	3430      	adds	r4, #48	; 0x30
 8009178:	428a      	cmp	r2, r1
 800917a:	bf08      	it	eq
 800917c:	f043 0301 	orreq.w	r3, r3, #1
 8009180:	3130      	adds	r1, #48	; 0x30
 8009182:	42a2      	cmp	r2, r4
 8009184:	bf08      	it	eq
 8009186:	f043 0301 	orreq.w	r3, r3, #1
 800918a:	3430      	adds	r4, #48	; 0x30
 800918c:	428a      	cmp	r2, r1
 800918e:	bf08      	it	eq
 8009190:	f043 0301 	orreq.w	r3, r3, #1
 8009194:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009198:	42a2      	cmp	r2, r4
 800919a:	bf08      	it	eq
 800919c:	f043 0301 	orreq.w	r3, r3, #1
 80091a0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80091a4:	428a      	cmp	r2, r1
 80091a6:	bf08      	it	eq
 80091a8:	f043 0301 	orreq.w	r3, r3, #1
 80091ac:	3130      	adds	r1, #48	; 0x30
 80091ae:	42a2      	cmp	r2, r4
 80091b0:	bf08      	it	eq
 80091b2:	f043 0301 	orreq.w	r3, r3, #1
 80091b6:	3430      	adds	r4, #48	; 0x30
 80091b8:	428a      	cmp	r2, r1
 80091ba:	bf08      	it	eq
 80091bc:	f043 0301 	orreq.w	r3, r3, #1
 80091c0:	3130      	adds	r1, #48	; 0x30
 80091c2:	42a2      	cmp	r2, r4
 80091c4:	bf08      	it	eq
 80091c6:	f043 0301 	orreq.w	r3, r3, #1
 80091ca:	3430      	adds	r4, #48	; 0x30
 80091cc:	428a      	cmp	r2, r1
 80091ce:	bf08      	it	eq
 80091d0:	f043 0301 	orreq.w	r3, r3, #1
 80091d4:	3130      	adds	r1, #48	; 0x30
 80091d6:	42a2      	cmp	r2, r4
 80091d8:	bf08      	it	eq
 80091da:	f043 0301 	orreq.w	r3, r3, #1
 80091de:	428a      	cmp	r2, r1
 80091e0:	bf08      	it	eq
 80091e2:	f043 0301 	orreq.w	r3, r3, #1
 80091e6:	b913      	cbnz	r3, 80091ee <DMA_CalcBaseAndBitshift+0xa2>
 80091e8:	4b11      	ldr	r3, [pc, #68]	; (8009230 <DMA_CalcBaseAndBitshift+0xe4>)
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d113      	bne.n	8009216 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091ee:	b2d3      	uxtb	r3, r2
 80091f0:	4910      	ldr	r1, [pc, #64]	; (8009234 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80091f2:	4c11      	ldr	r4, [pc, #68]	; (8009238 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091f4:	3b10      	subs	r3, #16
 80091f6:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 80091fa:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80091fc:	4b0f      	ldr	r3, [pc, #60]	; (800923c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80091fe:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009202:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009206:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009208:	bf88      	it	hi
 800920a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800920c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800920e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8009210:	4618      	mov	r0, r3
 8009212:	bc30      	pop	{r4, r5}
 8009214:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009216:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800921a:	6583      	str	r3, [r0, #88]	; 0x58
 800921c:	e7f8      	b.n	8009210 <DMA_CalcBaseAndBitshift+0xc4>
 800921e:	bf00      	nop
 8009220:	40020010 	.word	0x40020010
 8009224:	40020040 	.word	0x40020040
 8009228:	40020028 	.word	0x40020028
 800922c:	40020058 	.word	0x40020058
 8009230:	400204b8 	.word	0x400204b8
 8009234:	aaaaaaab 	.word	0xaaaaaaab
 8009238:	08018c30 	.word	0x08018c30
 800923c:	fffffc00 	.word	0xfffffc00

08009240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009240:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009242:	4a29      	ldr	r2, [pc, #164]	; (80092e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8009244:	4929      	ldr	r1, [pc, #164]	; (80092ec <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8009246:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009248:	4d29      	ldr	r5, [pc, #164]	; (80092f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800924a:	4c2a      	ldr	r4, [pc, #168]	; (80092f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800924c:	42ab      	cmp	r3, r5
 800924e:	bf18      	it	ne
 8009250:	4293      	cmpne	r3, r2
 8009252:	bf0c      	ite	eq
 8009254:	2201      	moveq	r2, #1
 8009256:	2200      	movne	r2, #0
 8009258:	428b      	cmp	r3, r1
 800925a:	bf08      	it	eq
 800925c:	f042 0201 	orreq.w	r2, r2, #1
 8009260:	3128      	adds	r1, #40	; 0x28
 8009262:	42a3      	cmp	r3, r4
 8009264:	bf08      	it	eq
 8009266:	f042 0201 	orreq.w	r2, r2, #1
 800926a:	3428      	adds	r4, #40	; 0x28
 800926c:	428b      	cmp	r3, r1
 800926e:	bf08      	it	eq
 8009270:	f042 0201 	orreq.w	r2, r2, #1
 8009274:	3128      	adds	r1, #40	; 0x28
 8009276:	42a3      	cmp	r3, r4
 8009278:	bf08      	it	eq
 800927a:	f042 0201 	orreq.w	r2, r2, #1
 800927e:	428b      	cmp	r3, r1
 8009280:	bf08      	it	eq
 8009282:	f042 0201 	orreq.w	r2, r2, #1
 8009286:	b912      	cbnz	r2, 800928e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8009288:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d113      	bne.n	80092b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4c1a      	ldr	r4, [pc, #104]	; (80092fc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009292:	4a1b      	ldr	r2, [pc, #108]	; (8009300 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009294:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009296:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009298:	4d1a      	ldr	r5, [pc, #104]	; (8009304 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800929a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800929e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092a0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092a4:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092a8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092aa:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092ae:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092b0:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80092b2:	bc30      	pop	{r4, r5}
 80092b4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092b6:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092b8:	4913      	ldr	r1, [pc, #76]	; (8009308 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092ba:	4c14      	ldr	r4, [pc, #80]	; (800930c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092bc:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092be:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092c0:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092c2:	fba4 2302 	umull	r2, r3, r4, r2
 80092c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092ca:	d800      	bhi.n	80092ce <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80092cc:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092ce:	4a10      	ldr	r2, [pc, #64]	; (8009310 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092d0:	f003 051f 	and.w	r5, r3, #31
 80092d4:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80092d6:	4c0f      	ldr	r4, [pc, #60]	; (8009314 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092d8:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092da:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80092dc:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092de:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092e0:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092e2:	6602      	str	r2, [r0, #96]	; 0x60
}
 80092e4:	e7e5      	b.n	80092b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 80092e6:	bf00      	nop
 80092e8:	58025408 	.word	0x58025408
 80092ec:	58025430 	.word	0x58025430
 80092f0:	5802541c 	.word	0x5802541c
 80092f4:	58025444 	.word	0x58025444
 80092f8:	58025494 	.word	0x58025494
 80092fc:	cccccccd 	.word	0xcccccccd
 8009300:	16009600 	.word	0x16009600
 8009304:	58025880 	.word	0x58025880
 8009308:	bffdfbf0 	.word	0xbffdfbf0
 800930c:	aaaaaaab 	.word	0xaaaaaaab
 8009310:	10008200 	.word	0x10008200
 8009314:	40020880 	.word	0x40020880

08009318 <HAL_DMA_Init>:
{
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800931c:	f7fe fa2a 	bl	8007774 <HAL_GetTick>
  if(hdma == NULL)
 8009320:	2c00      	cmp	r4, #0
 8009322:	f000 8177 	beq.w	8009614 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	4605      	mov	r5, r0
 800932a:	4a92      	ldr	r2, [pc, #584]	; (8009574 <HAL_DMA_Init+0x25c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d048      	beq.n	80093c2 <HAL_DMA_Init+0xaa>
 8009330:	3218      	adds	r2, #24
 8009332:	4293      	cmp	r3, r2
 8009334:	d045      	beq.n	80093c2 <HAL_DMA_Init+0xaa>
 8009336:	3230      	adds	r2, #48	; 0x30
 8009338:	498f      	ldr	r1, [pc, #572]	; (8009578 <HAL_DMA_Init+0x260>)
 800933a:	428b      	cmp	r3, r1
 800933c:	bf18      	it	ne
 800933e:	4293      	cmpne	r3, r2
 8009340:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009344:	bf0c      	ite	eq
 8009346:	2201      	moveq	r2, #1
 8009348:	2200      	movne	r2, #0
 800934a:	428b      	cmp	r3, r1
 800934c:	bf08      	it	eq
 800934e:	f042 0201 	orreq.w	r2, r2, #1
 8009352:	3118      	adds	r1, #24
 8009354:	428b      	cmp	r3, r1
 8009356:	bf08      	it	eq
 8009358:	f042 0201 	orreq.w	r2, r2, #1
 800935c:	3118      	adds	r1, #24
 800935e:	428b      	cmp	r3, r1
 8009360:	bf08      	it	eq
 8009362:	f042 0201 	orreq.w	r2, r2, #1
 8009366:	3118      	adds	r1, #24
 8009368:	428b      	cmp	r3, r1
 800936a:	bf08      	it	eq
 800936c:	f042 0201 	orreq.w	r2, r2, #1
 8009370:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8009374:	428b      	cmp	r3, r1
 8009376:	bf08      	it	eq
 8009378:	f042 0201 	orreq.w	r2, r2, #1
 800937c:	3118      	adds	r1, #24
 800937e:	428b      	cmp	r3, r1
 8009380:	bf08      	it	eq
 8009382:	f042 0201 	orreq.w	r2, r2, #1
 8009386:	3118      	adds	r1, #24
 8009388:	428b      	cmp	r3, r1
 800938a:	bf08      	it	eq
 800938c:	f042 0201 	orreq.w	r2, r2, #1
 8009390:	3118      	adds	r1, #24
 8009392:	428b      	cmp	r3, r1
 8009394:	bf08      	it	eq
 8009396:	f042 0201 	orreq.w	r2, r2, #1
 800939a:	3118      	adds	r1, #24
 800939c:	428b      	cmp	r3, r1
 800939e:	bf08      	it	eq
 80093a0:	f042 0201 	orreq.w	r2, r2, #1
 80093a4:	3118      	adds	r1, #24
 80093a6:	428b      	cmp	r3, r1
 80093a8:	bf08      	it	eq
 80093aa:	f042 0201 	orreq.w	r2, r2, #1
 80093ae:	3118      	adds	r1, #24
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf08      	it	eq
 80093b4:	f042 0201 	orreq.w	r2, r2, #1
 80093b8:	b91a      	cbnz	r2, 80093c2 <HAL_DMA_Init+0xaa>
 80093ba:	4a70      	ldr	r2, [pc, #448]	; (800957c <HAL_DMA_Init+0x264>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	f040 8198 	bne.w	80096f2 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 80093c2:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80093c4:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 80093c6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80093ca:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e006      	b.n	80093e6 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80093d8:	f7fe f9cc 	bl	8007774 <HAL_GetTick>
 80093dc:	1b43      	subs	r3, r0, r5
 80093de:	2b05      	cmp	r3, #5
 80093e0:	f200 80ff 	bhi.w	80095e2 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	07d6      	lsls	r6, r2, #31
 80093ea:	d4f5      	bmi.n	80093d8 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 80093ec:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093f0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80093f2:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093f4:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80093f6:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093f8:	4302      	orrs	r2, r0
 80093fa:	6960      	ldr	r0, [r4, #20]
 80093fc:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093fe:	69e0      	ldr	r0, [r4, #28]
 8009400:	430a      	orrs	r2, r1
 8009402:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009404:	485e      	ldr	r0, [pc, #376]	; (8009580 <HAL_DMA_Init+0x268>)
 8009406:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8009408:	6a25      	ldr	r5, [r4, #32]
 800940a:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800940c:	4d5d      	ldr	r5, [pc, #372]	; (8009584 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800940e:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009410:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009412:	2804      	cmp	r0, #4
 8009414:	f000 8100 	beq.w	8009618 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009418:	682e      	ldr	r6, [r5, #0]
 800941a:	4d5b      	ldr	r5, [pc, #364]	; (8009588 <HAL_DMA_Init+0x270>)
 800941c:	4035      	ands	r5, r6
 800941e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8009422:	f080 80bb 	bcs.w	800959c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009426:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009428:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800942a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800942e:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009430:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff fe8a 	bl	800914c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009438:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800943a:	233f      	movs	r3, #63	; 0x3f
 800943c:	f002 021f 	and.w	r2, r2, #31
 8009440:	4093      	lsls	r3, r2
 8009442:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	4b4b      	ldr	r3, [pc, #300]	; (8009574 <HAL_DMA_Init+0x25c>)
 8009448:	4850      	ldr	r0, [pc, #320]	; (800958c <HAL_DMA_Init+0x274>)
 800944a:	494b      	ldr	r1, [pc, #300]	; (8009578 <HAL_DMA_Init+0x260>)
 800944c:	4282      	cmp	r2, r0
 800944e:	bf18      	it	ne
 8009450:	429a      	cmpne	r2, r3
 8009452:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009456:	bf0c      	ite	eq
 8009458:	2301      	moveq	r3, #1
 800945a:	2300      	movne	r3, #0
 800945c:	428a      	cmp	r2, r1
 800945e:	bf08      	it	eq
 8009460:	f043 0301 	orreq.w	r3, r3, #1
 8009464:	3130      	adds	r1, #48	; 0x30
 8009466:	4282      	cmp	r2, r0
 8009468:	bf08      	it	eq
 800946a:	f043 0301 	orreq.w	r3, r3, #1
 800946e:	3030      	adds	r0, #48	; 0x30
 8009470:	428a      	cmp	r2, r1
 8009472:	bf08      	it	eq
 8009474:	f043 0301 	orreq.w	r3, r3, #1
 8009478:	3130      	adds	r1, #48	; 0x30
 800947a:	4282      	cmp	r2, r0
 800947c:	bf08      	it	eq
 800947e:	f043 0301 	orreq.w	r3, r3, #1
 8009482:	3030      	adds	r0, #48	; 0x30
 8009484:	428a      	cmp	r2, r1
 8009486:	bf08      	it	eq
 8009488:	f043 0301 	orreq.w	r3, r3, #1
 800948c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009490:	4282      	cmp	r2, r0
 8009492:	bf08      	it	eq
 8009494:	f043 0301 	orreq.w	r3, r3, #1
 8009498:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800949c:	428a      	cmp	r2, r1
 800949e:	bf08      	it	eq
 80094a0:	f043 0301 	orreq.w	r3, r3, #1
 80094a4:	3130      	adds	r1, #48	; 0x30
 80094a6:	4282      	cmp	r2, r0
 80094a8:	bf08      	it	eq
 80094aa:	f043 0301 	orreq.w	r3, r3, #1
 80094ae:	3030      	adds	r0, #48	; 0x30
 80094b0:	428a      	cmp	r2, r1
 80094b2:	bf08      	it	eq
 80094b4:	f043 0301 	orreq.w	r3, r3, #1
 80094b8:	3130      	adds	r1, #48	; 0x30
 80094ba:	4282      	cmp	r2, r0
 80094bc:	bf08      	it	eq
 80094be:	f043 0301 	orreq.w	r3, r3, #1
 80094c2:	3030      	adds	r0, #48	; 0x30
 80094c4:	428a      	cmp	r2, r1
 80094c6:	bf08      	it	eq
 80094c8:	f043 0301 	orreq.w	r3, r3, #1
 80094cc:	3130      	adds	r1, #48	; 0x30
 80094ce:	4282      	cmp	r2, r0
 80094d0:	bf08      	it	eq
 80094d2:	f043 0301 	orreq.w	r3, r3, #1
 80094d6:	3030      	adds	r0, #48	; 0x30
 80094d8:	428a      	cmp	r2, r1
 80094da:	bf08      	it	eq
 80094dc:	f043 0301 	orreq.w	r3, r3, #1
 80094e0:	492b      	ldr	r1, [pc, #172]	; (8009590 <HAL_DMA_Init+0x278>)
 80094e2:	4282      	cmp	r2, r0
 80094e4:	bf08      	it	eq
 80094e6:	f043 0301 	orreq.w	r3, r3, #1
 80094ea:	482a      	ldr	r0, [pc, #168]	; (8009594 <HAL_DMA_Init+0x27c>)
 80094ec:	428a      	cmp	r2, r1
 80094ee:	bf08      	it	eq
 80094f0:	f043 0301 	orreq.w	r3, r3, #1
 80094f4:	3128      	adds	r1, #40	; 0x28
 80094f6:	4282      	cmp	r2, r0
 80094f8:	bf08      	it	eq
 80094fa:	f043 0301 	orreq.w	r3, r3, #1
 80094fe:	3028      	adds	r0, #40	; 0x28
 8009500:	428a      	cmp	r2, r1
 8009502:	bf08      	it	eq
 8009504:	f043 0301 	orreq.w	r3, r3, #1
 8009508:	3128      	adds	r1, #40	; 0x28
 800950a:	4282      	cmp	r2, r0
 800950c:	bf08      	it	eq
 800950e:	f043 0301 	orreq.w	r3, r3, #1
 8009512:	3028      	adds	r0, #40	; 0x28
 8009514:	428a      	cmp	r2, r1
 8009516:	bf08      	it	eq
 8009518:	f043 0301 	orreq.w	r3, r3, #1
 800951c:	3128      	adds	r1, #40	; 0x28
 800951e:	4282      	cmp	r2, r0
 8009520:	bf08      	it	eq
 8009522:	f043 0301 	orreq.w	r3, r3, #1
 8009526:	428a      	cmp	r2, r1
 8009528:	bf08      	it	eq
 800952a:	f043 0301 	orreq.w	r3, r3, #1
 800952e:	b913      	cbnz	r3, 8009536 <HAL_DMA_Init+0x21e>
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <HAL_DMA_Init+0x280>)
 8009532:	429a      	cmp	r2, r3
 8009534:	d118      	bne.n	8009568 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009536:	4620      	mov	r0, r4
 8009538:	f7ff fe82 	bl	8009240 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	2b80      	cmp	r3, #128	; 0x80
 8009540:	d05c      	beq.n	80095fc <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009542:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009544:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009546:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009548:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800954a:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800954e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009550:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009552:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009554:	d859      	bhi.n	800960a <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009556:	1e50      	subs	r0, r2, #1
 8009558:	2807      	cmp	r0, #7
 800955a:	d96e      	bls.n	800963a <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800955c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800955e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009562:	2000      	movs	r0, #0
 8009564:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009566:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009568:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800956a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800956c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800956e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	40020010 	.word	0x40020010
 8009578:	40020040 	.word	0x40020040
 800957c:	400204b8 	.word	0x400204b8
 8009580:	fe10803f 	.word	0xfe10803f
 8009584:	5c001000 	.word	0x5c001000
 8009588:	ffff0000 	.word	0xffff0000
 800958c:	40020028 	.word	0x40020028
 8009590:	58025408 	.word	0x58025408
 8009594:	5802541c 	.word	0x5802541c
 8009598:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800959c:	6865      	ldr	r5, [r4, #4]
 800959e:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80095a2:	2e1f      	cmp	r6, #31
 80095a4:	d924      	bls.n	80095f0 <HAL_DMA_Init+0x2d8>
 80095a6:	3d4f      	subs	r5, #79	; 0x4f
 80095a8:	2d03      	cmp	r5, #3
 80095aa:	d801      	bhi.n	80095b0 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80095ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80095b0:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095b2:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80095b4:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80095b6:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80095ba:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095be:	f47f af37 	bne.w	8009430 <HAL_DMA_Init+0x118>
 80095c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80095c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80095c6:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	f43f af31 	beq.w	8009430 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d169      	bne.n	80096a6 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 80095d2:	2801      	cmp	r0, #1
 80095d4:	f000 8088 	beq.w	80096e8 <HAL_DMA_Init+0x3d0>
 80095d8:	f030 0102 	bics.w	r1, r0, #2
 80095dc:	f47f af28 	bne.w	8009430 <HAL_DMA_Init+0x118>
 80095e0:	e069      	b.n	80096b6 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095e2:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80095e4:	2303      	movs	r3, #3
        return HAL_ERROR;
 80095e6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095e8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80095ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80095ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80095f0:	4d73      	ldr	r5, [pc, #460]	; (80097c0 <HAL_DMA_Init+0x4a8>)
 80095f2:	fa25 f606 	lsr.w	r6, r5, r6
 80095f6:	07f5      	lsls	r5, r6, #31
 80095f8:	d5da      	bpl.n	80095b0 <HAL_DMA_Init+0x298>
 80095fa:	e7d7      	b.n	80095ac <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80095fc:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009600:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009604:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009606:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009608:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800960a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800960c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009610:	6763      	str	r3, [r4, #116]	; 0x74
 8009612:	e7a9      	b.n	8009568 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8009614:	2001      	movs	r0, #1
}
 8009616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009618:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800961a:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 800961e:	432e      	orrs	r6, r5
 8009620:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009622:	4e68      	ldr	r6, [pc, #416]	; (80097c4 <HAL_DMA_Init+0x4ac>)
 8009624:	403e      	ands	r6, r7
 8009626:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800962a:	d2b7      	bcs.n	800959c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800962c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800962e:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009630:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8009634:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009638:	e7c4      	b.n	80095c4 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800963a:	6821      	ldr	r1, [r4, #0]
 800963c:	4b62      	ldr	r3, [pc, #392]	; (80097c8 <HAL_DMA_Init+0x4b0>)
 800963e:	4d63      	ldr	r5, [pc, #396]	; (80097cc <HAL_DMA_Init+0x4b4>)
 8009640:	42a9      	cmp	r1, r5
 8009642:	bf18      	it	ne
 8009644:	4299      	cmpne	r1, r3
 8009646:	f105 0514 	add.w	r5, r5, #20
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	42a9      	cmp	r1, r5
 8009652:	bf08      	it	eq
 8009654:	f043 0301 	orreq.w	r3, r3, #1
 8009658:	3514      	adds	r5, #20
 800965a:	42a9      	cmp	r1, r5
 800965c:	bf08      	it	eq
 800965e:	f043 0301 	orreq.w	r3, r3, #1
 8009662:	3514      	adds	r5, #20
 8009664:	42a9      	cmp	r1, r5
 8009666:	bf08      	it	eq
 8009668:	f043 0301 	orreq.w	r3, r3, #1
 800966c:	3514      	adds	r5, #20
 800966e:	42a9      	cmp	r1, r5
 8009670:	bf08      	it	eq
 8009672:	f043 0301 	orreq.w	r3, r3, #1
 8009676:	3514      	adds	r5, #20
 8009678:	42a9      	cmp	r1, r5
 800967a:	bf08      	it	eq
 800967c:	f043 0301 	orreq.w	r3, r3, #1
 8009680:	b93b      	cbnz	r3, 8009692 <HAL_DMA_Init+0x37a>
 8009682:	4b53      	ldr	r3, [pc, #332]	; (80097d0 <HAL_DMA_Init+0x4b8>)
 8009684:	4299      	cmp	r1, r3
 8009686:	d004      	beq.n	8009692 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009688:	4b52      	ldr	r3, [pc, #328]	; (80097d4 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800968a:	4953      	ldr	r1, [pc, #332]	; (80097d8 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009690:	e003      	b.n	800969a <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009692:	4b52      	ldr	r3, [pc, #328]	; (80097dc <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009694:	4952      	ldr	r1, [pc, #328]	; (80097e0 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800969a:	2201      	movs	r2, #1
 800969c:	4082      	lsls	r2, r0
 800969e:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80096a2:	6762      	str	r2, [r4, #116]	; 0x74
 80096a4:	e75d      	b.n	8009562 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096a6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80096aa:	d00e      	beq.n	80096ca <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80096ac:	2802      	cmp	r0, #2
 80096ae:	d905      	bls.n	80096bc <HAL_DMA_Init+0x3a4>
 80096b0:	2803      	cmp	r0, #3
 80096b2:	f47f aebd 	bne.w	8009430 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096b6:	01e9      	lsls	r1, r5, #7
 80096b8:	f57f aeba 	bpl.w	8009430 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 80096bc:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80096be:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80096c0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80096c2:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80096c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80096c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 80096ca:	2803      	cmp	r0, #3
 80096cc:	f63f aeb0 	bhi.w	8009430 <HAL_DMA_Init+0x118>
 80096d0:	a101      	add	r1, pc, #4	; (adr r1, 80096d8 <HAL_DMA_Init+0x3c0>)
 80096d2:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096bd 	.word	0x080096bd
 80096dc:	080096b7 	.word	0x080096b7
 80096e0:	080096bd 	.word	0x080096bd
 80096e4:	080096e9 	.word	0x080096e9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80096e8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80096ec:	f47f aea0 	bne.w	8009430 <HAL_DMA_Init+0x118>
 80096f0:	e7e4      	b.n	80096bc <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80096f2:	4a35      	ldr	r2, [pc, #212]	; (80097c8 <HAL_DMA_Init+0x4b0>)
 80096f4:	4835      	ldr	r0, [pc, #212]	; (80097cc <HAL_DMA_Init+0x4b4>)
 80096f6:	493b      	ldr	r1, [pc, #236]	; (80097e4 <HAL_DMA_Init+0x4cc>)
 80096f8:	4283      	cmp	r3, r0
 80096fa:	bf18      	it	ne
 80096fc:	4293      	cmpne	r3, r2
 80096fe:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8009702:	bf0c      	ite	eq
 8009704:	2201      	moveq	r2, #1
 8009706:	2200      	movne	r2, #0
 8009708:	428b      	cmp	r3, r1
 800970a:	bf08      	it	eq
 800970c:	f042 0201 	orreq.w	r2, r2, #1
 8009710:	3128      	adds	r1, #40	; 0x28
 8009712:	4283      	cmp	r3, r0
 8009714:	bf08      	it	eq
 8009716:	f042 0201 	orreq.w	r2, r2, #1
 800971a:	3028      	adds	r0, #40	; 0x28
 800971c:	428b      	cmp	r3, r1
 800971e:	bf08      	it	eq
 8009720:	f042 0201 	orreq.w	r2, r2, #1
 8009724:	3128      	adds	r1, #40	; 0x28
 8009726:	4283      	cmp	r3, r0
 8009728:	bf08      	it	eq
 800972a:	f042 0201 	orreq.w	r2, r2, #1
 800972e:	428b      	cmp	r3, r1
 8009730:	bf08      	it	eq
 8009732:	f042 0201 	orreq.w	r2, r2, #1
 8009736:	b912      	cbnz	r2, 800973e <HAL_DMA_Init+0x426>
 8009738:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <HAL_DMA_Init+0x4b8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d138      	bne.n	80097b0 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 800973e:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8009740:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009742:	4d29      	ldr	r5, [pc, #164]	; (80097e8 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009744:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009748:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800974c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800974e:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009750:	68a2      	ldr	r2, [r4, #8]
 8009752:	2a40      	cmp	r2, #64	; 0x40
 8009754:	d02a      	beq.n	80097ac <HAL_DMA_Init+0x494>
 8009756:	2a80      	cmp	r2, #128	; 0x80
 8009758:	bf0c      	ite	eq
 800975a:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800975e:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009760:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009762:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009766:	08d2      	lsrs	r2, r2, #3
 8009768:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800976c:	6961      	ldr	r1, [r4, #20]
 800976e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009772:	69a1      	ldr	r1, [r4, #24]
 8009774:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009778:	69e1      	ldr	r1, [r4, #28]
 800977a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800977e:	491b      	ldr	r1, [pc, #108]	; (80097ec <HAL_DMA_Init+0x4d4>)
 8009780:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8009784:	4419      	add	r1, r3
 8009786:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009788:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800978a:	4819      	ldr	r0, [pc, #100]	; (80097f0 <HAL_DMA_Init+0x4d8>)
 800978c:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009790:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009792:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009794:	090b      	lsrs	r3, r1, #4
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800979a:	f7ff fcd7 	bl	800914c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800979e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80097a0:	2301      	movs	r3, #1
 80097a2:	f002 021f 	and.w	r2, r2, #31
 80097a6:	4093      	lsls	r3, r2
 80097a8:	6043      	str	r3, [r0, #4]
 80097aa:	e64b      	b.n	8009444 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80097ac:	2010      	movs	r0, #16
 80097ae:	e7d7      	b.n	8009760 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80097b0:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80097b2:	2303      	movs	r3, #3
    return HAL_ERROR;
 80097b4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80097b6:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80097b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097be:	bf00      	nop
 80097c0:	c3c0003f 	.word	0xc3c0003f
 80097c4:	ffff0000 	.word	0xffff0000
 80097c8:	58025408 	.word	0x58025408
 80097cc:	5802541c 	.word	0x5802541c
 80097d0:	58025494 	.word	0x58025494
 80097d4:	1000823f 	.word	0x1000823f
 80097d8:	40020940 	.word	0x40020940
 80097dc:	1600963f 	.word	0x1600963f
 80097e0:	58025940 	.word	0x58025940
 80097e4:	58025430 	.word	0x58025430
 80097e8:	fffe000f 	.word	0xfffe000f
 80097ec:	a7fdabf8 	.word	0xa7fdabf8
 80097f0:	cccccccd 	.word	0xcccccccd

080097f4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 8177 	beq.w	8009ae8 <HAL_DMA_Start_IT+0x2f4>
 80097fa:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 80097fc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009800:	2801      	cmp	r0, #1
 8009802:	f000 8173 	beq.w	8009aec <HAL_DMA_Start_IT+0x2f8>
 8009806:	2001      	movs	r0, #1
{
 8009808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 800980c:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8009810:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009814:	4284      	cmp	r4, r0
 8009816:	d008      	beq.n	800982a <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009818:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800981c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800981e:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009822:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800982a:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800982c:	f8dc 4000 	ldr.w	r4, [ip]
 8009830:	4d53      	ldr	r5, [pc, #332]	; (8009980 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009832:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009836:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8009838:	4e52      	ldr	r6, [pc, #328]	; (8009984 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800983a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800983e:	4852      	ldr	r0, [pc, #328]	; (8009988 <HAL_DMA_Start_IT+0x194>)
 8009840:	42ac      	cmp	r4, r5
 8009842:	bf18      	it	ne
 8009844:	4284      	cmpne	r4, r0
 8009846:	f105 0518 	add.w	r5, r5, #24
 800984a:	bf0c      	ite	eq
 800984c:	2001      	moveq	r0, #1
 800984e:	2000      	movne	r0, #0
 8009850:	42ac      	cmp	r4, r5
 8009852:	bf08      	it	eq
 8009854:	f040 0001 	orreq.w	r0, r0, #1
 8009858:	3518      	adds	r5, #24
 800985a:	42ac      	cmp	r4, r5
 800985c:	bf08      	it	eq
 800985e:	f040 0001 	orreq.w	r0, r0, #1
 8009862:	3518      	adds	r5, #24
 8009864:	42ac      	cmp	r4, r5
 8009866:	bf08      	it	eq
 8009868:	f040 0001 	orreq.w	r0, r0, #1
 800986c:	3518      	adds	r5, #24
 800986e:	42ac      	cmp	r4, r5
 8009870:	bf08      	it	eq
 8009872:	f040 0001 	orreq.w	r0, r0, #1
 8009876:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800987a:	42ac      	cmp	r4, r5
 800987c:	bf08      	it	eq
 800987e:	f040 0001 	orreq.w	r0, r0, #1
 8009882:	3518      	adds	r5, #24
 8009884:	42ac      	cmp	r4, r5
 8009886:	bf08      	it	eq
 8009888:	f040 0001 	orreq.w	r0, r0, #1
 800988c:	3518      	adds	r5, #24
 800988e:	42ac      	cmp	r4, r5
 8009890:	bf08      	it	eq
 8009892:	f040 0001 	orreq.w	r0, r0, #1
 8009896:	3518      	adds	r5, #24
 8009898:	42ac      	cmp	r4, r5
 800989a:	bf08      	it	eq
 800989c:	f040 0001 	orreq.w	r0, r0, #1
 80098a0:	3518      	adds	r5, #24
 80098a2:	42ac      	cmp	r4, r5
 80098a4:	bf08      	it	eq
 80098a6:	f040 0001 	orreq.w	r0, r0, #1
 80098aa:	3518      	adds	r5, #24
 80098ac:	42ac      	cmp	r4, r5
 80098ae:	bf08      	it	eq
 80098b0:	f040 0001 	orreq.w	r0, r0, #1
 80098b4:	3518      	adds	r5, #24
 80098b6:	42ac      	cmp	r4, r5
 80098b8:	bf08      	it	eq
 80098ba:	f040 0001 	orreq.w	r0, r0, #1
 80098be:	3518      	adds	r5, #24
 80098c0:	42ac      	cmp	r4, r5
 80098c2:	bf14      	ite	ne
 80098c4:	4681      	movne	r9, r0
 80098c6:	f040 0901 	orreq.w	r9, r0, #1
 80098ca:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 80098ce:	42ac      	cmp	r4, r5
 80098d0:	bf18      	it	ne
 80098d2:	42b4      	cmpne	r4, r6
 80098d4:	bf0c      	ite	eq
 80098d6:	2501      	moveq	r5, #1
 80098d8:	2500      	movne	r5, #0
 80098da:	d002      	beq.n	80098e2 <HAL_DMA_Start_IT+0xee>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	d054      	beq.n	800998c <HAL_DMA_Start_IT+0x198>
 80098e2:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098e4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80098e8:	f026 0601 	bic.w	r6, r6, #1
 80098ec:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	d078      	beq.n	80099e4 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098f2:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80098f6:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80098f8:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80098fc:	b117      	cbz	r7, 8009904 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098fe:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8009902:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009904:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8009908:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800990c:	f006 081f 	and.w	r8, r6, #31
 8009910:	fa0e fe08 	lsl.w	lr, lr, r8
 8009914:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009918:	6826      	ldr	r6, [r4, #0]
 800991a:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800991e:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009920:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009922:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	f000 80e2 	beq.w	8009af0 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800992c:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800992e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009930:	b91d      	cbnz	r5, 800993a <HAL_DMA_Start_IT+0x146>
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	f000 80e1 	beq.w	8009afc <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	f023 031e 	bic.w	r3, r3, #30
 8009940:	f043 0316 	orr.w	r3, r3, #22
 8009944:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009946:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800994a:	b11b      	cbz	r3, 8009954 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	f043 0308 	orr.w	r3, r3, #8
 8009952:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009954:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	03d2      	lsls	r2, r2, #15
 800995c:	d503      	bpl.n	8009966 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009964:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8009966:	b11f      	cbz	r7, 8009970 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996e:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8009970:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009972:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	6023      	str	r3, [r4, #0]
}
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	bf00      	nop
 8009980:	40020058 	.word	0x40020058
 8009984:	40020010 	.word	0x40020010
 8009988:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800998c:	4f61      	ldr	r7, [pc, #388]	; (8009b14 <HAL_DMA_Start_IT+0x320>)
 800998e:	4e62      	ldr	r6, [pc, #392]	; (8009b18 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009990:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009994:	42b4      	cmp	r4, r6
 8009996:	bf18      	it	ne
 8009998:	42bc      	cmpne	r4, r7
 800999a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800999e:	bf0c      	ite	eq
 80099a0:	2701      	moveq	r7, #1
 80099a2:	2700      	movne	r7, #0
 80099a4:	42b4      	cmp	r4, r6
 80099a6:	bf08      	it	eq
 80099a8:	f047 0701 	orreq.w	r7, r7, #1
 80099ac:	3614      	adds	r6, #20
 80099ae:	42b4      	cmp	r4, r6
 80099b0:	bf08      	it	eq
 80099b2:	f047 0701 	orreq.w	r7, r7, #1
 80099b6:	3614      	adds	r6, #20
 80099b8:	42b4      	cmp	r4, r6
 80099ba:	bf08      	it	eq
 80099bc:	f047 0701 	orreq.w	r7, r7, #1
 80099c0:	3614      	adds	r6, #20
 80099c2:	42b4      	cmp	r4, r6
 80099c4:	bf08      	it	eq
 80099c6:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80099ca:	6826      	ldr	r6, [r4, #0]
 80099cc:	f026 0601 	bic.w	r6, r6, #1
 80099d0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099d2:	4e52      	ldr	r6, [pc, #328]	; (8009b1c <HAL_DMA_Start_IT+0x328>)
 80099d4:	42b4      	cmp	r4, r6
 80099d6:	bf08      	it	eq
 80099d8:	f047 0701 	orreq.w	r7, r7, #1
 80099dc:	b917      	cbnz	r7, 80099e4 <HAL_DMA_Start_IT+0x1f0>
 80099de:	4f50      	ldr	r7, [pc, #320]	; (8009b20 <HAL_DMA_Start_IT+0x32c>)
 80099e0:	42bc      	cmp	r4, r7
 80099e2:	d10b      	bne.n	80099fc <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099e4:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80099e8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80099ea:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80099ee:	b117      	cbz	r7, 80099f6 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099f0:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 80099f4:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099f6:	f1b9 0f00 	cmp.w	r9, #0
 80099fa:	d183      	bne.n	8009904 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80099fc:	4f46      	ldr	r7, [pc, #280]	; (8009b18 <HAL_DMA_Start_IT+0x324>)
 80099fe:	f8df e114 	ldr.w	lr, [pc, #276]	; 8009b14 <HAL_DMA_Start_IT+0x320>
 8009a02:	4574      	cmp	r4, lr
 8009a04:	bf18      	it	ne
 8009a06:	42bc      	cmpne	r4, r7
 8009a08:	f10e 0e14 	add.w	lr, lr, #20
 8009a0c:	bf0c      	ite	eq
 8009a0e:	2701      	moveq	r7, #1
 8009a10:	2700      	movne	r7, #0
 8009a12:	4574      	cmp	r4, lr
 8009a14:	bf08      	it	eq
 8009a16:	f047 0701 	orreq.w	r7, r7, #1
 8009a1a:	f10e 0e14 	add.w	lr, lr, #20
 8009a1e:	4574      	cmp	r4, lr
 8009a20:	bf08      	it	eq
 8009a22:	f047 0701 	orreq.w	r7, r7, #1
 8009a26:	f10e 0e14 	add.w	lr, lr, #20
 8009a2a:	4574      	cmp	r4, lr
 8009a2c:	bf08      	it	eq
 8009a2e:	f047 0701 	orreq.w	r7, r7, #1
 8009a32:	f10e 0e14 	add.w	lr, lr, #20
 8009a36:	4574      	cmp	r4, lr
 8009a38:	bf08      	it	eq
 8009a3a:	f047 0701 	orreq.w	r7, r7, #1
 8009a3e:	f10e 0e14 	add.w	lr, lr, #20
 8009a42:	4574      	cmp	r4, lr
 8009a44:	bf08      	it	eq
 8009a46:	f047 0701 	orreq.w	r7, r7, #1
 8009a4a:	b917      	cbnz	r7, 8009a52 <HAL_DMA_Start_IT+0x25e>
 8009a4c:	4f34      	ldr	r7, [pc, #208]	; (8009b20 <HAL_DMA_Start_IT+0x32c>)
 8009a4e:	42bc      	cmp	r4, r7
 8009a50:	d154      	bne.n	8009afc <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a52:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009a56:	2701      	movs	r7, #1
 8009a58:	f000 0e1f 	and.w	lr, r0, #31
 8009a5c:	fa07 f70e 	lsl.w	r7, r7, lr
 8009a60:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009a64:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a66:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009a6a:	2b40      	cmp	r3, #64	; 0x40
 8009a6c:	d043      	beq.n	8009af6 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009a6e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009a70:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	f023 030e 	bic.w	r3, r3, #14
 8009a78:	f043 030a 	orr.w	r3, r3, #10
 8009a7c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009a7e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d02d      	beq.n	8009ae2 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f043 0304 	orr.w	r3, r3, #4
 8009a8c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a8e:	4b21      	ldr	r3, [pc, #132]	; (8009b14 <HAL_DMA_Start_IT+0x320>)
 8009a90:	4a21      	ldr	r2, [pc, #132]	; (8009b18 <HAL_DMA_Start_IT+0x324>)
 8009a92:	4294      	cmp	r4, r2
 8009a94:	bf18      	it	ne
 8009a96:	429c      	cmpne	r4, r3
 8009a98:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8009a9c:	bf0c      	ite	eq
 8009a9e:	2301      	moveq	r3, #1
 8009aa0:	2300      	movne	r3, #0
 8009aa2:	4294      	cmp	r4, r2
 8009aa4:	bf08      	it	eq
 8009aa6:	f043 0301 	orreq.w	r3, r3, #1
 8009aaa:	3214      	adds	r2, #20
 8009aac:	4294      	cmp	r4, r2
 8009aae:	bf08      	it	eq
 8009ab0:	f043 0301 	orreq.w	r3, r3, #1
 8009ab4:	3214      	adds	r2, #20
 8009ab6:	4294      	cmp	r4, r2
 8009ab8:	bf08      	it	eq
 8009aba:	f043 0301 	orreq.w	r3, r3, #1
 8009abe:	3214      	adds	r2, #20
 8009ac0:	4294      	cmp	r4, r2
 8009ac2:	bf08      	it	eq
 8009ac4:	f043 0301 	orreq.w	r3, r3, #1
 8009ac8:	3214      	adds	r2, #20
 8009aca:	4294      	cmp	r4, r2
 8009acc:	bf08      	it	eq
 8009ace:	f043 0301 	orreq.w	r3, r3, #1
 8009ad2:	3214      	adds	r2, #20
 8009ad4:	4294      	cmp	r4, r2
 8009ad6:	bf08      	it	eq
 8009ad8:	f043 0301 	orreq.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f43f af47 	beq.w	8009970 <HAL_DMA_Start_IT+0x17c>
 8009ae2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8009ae6:	e735      	b.n	8009954 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8009ae8:	2001      	movs	r0, #1
 8009aea:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8009aec:	2002      	movs	r0, #2
}
 8009aee:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009af0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009af2:	60e1      	str	r1, [r4, #12]
 8009af4:	e71c      	b.n	8009930 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009af6:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009af8:	60e1      	str	r1, [r4, #12]
 8009afa:	e7ba      	b.n	8009a72 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	f023 030e 	bic.w	r3, r3, #14
 8009b02:	f043 030a 	orr.w	r3, r3, #10
 8009b06:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009b08:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1ba      	bne.n	8009a86 <HAL_DMA_Start_IT+0x292>
 8009b10:	e7bd      	b.n	8009a8e <HAL_DMA_Start_IT+0x29a>
 8009b12:	bf00      	nop
 8009b14:	5802541c 	.word	0x5802541c
 8009b18:	58025408 	.word	0x58025408
 8009b1c:	58025480 	.word	0x58025480
 8009b20:	58025494 	.word	0x58025494

08009b24 <HAL_DMA_Abort>:
{
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8009b28:	f7fd fe24 	bl	8007774 <HAL_GetTick>
  if(hdma == NULL)
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	f000 8124 	beq.w	8009d7a <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b32:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	f040 80dd 	bne.w	8009cf6 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b3c:	682c      	ldr	r4, [r5, #0]
 8009b3e:	4606      	mov	r6, r0
 8009b40:	4b8f      	ldr	r3, [pc, #572]	; (8009d80 <HAL_DMA_Abort+0x25c>)
 8009b42:	4890      	ldr	r0, [pc, #576]	; (8009d84 <HAL_DMA_Abort+0x260>)
 8009b44:	4a90      	ldr	r2, [pc, #576]	; (8009d88 <HAL_DMA_Abort+0x264>)
 8009b46:	4284      	cmp	r4, r0
 8009b48:	bf18      	it	ne
 8009b4a:	429c      	cmpne	r4, r3
 8009b4c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009b50:	498e      	ldr	r1, [pc, #568]	; (8009d8c <HAL_DMA_Abort+0x268>)
 8009b52:	bf0c      	ite	eq
 8009b54:	2301      	moveq	r3, #1
 8009b56:	2300      	movne	r3, #0
 8009b58:	4284      	cmp	r4, r0
 8009b5a:	bf08      	it	eq
 8009b5c:	f043 0301 	orreq.w	r3, r3, #1
 8009b60:	3018      	adds	r0, #24
 8009b62:	4284      	cmp	r4, r0
 8009b64:	bf08      	it	eq
 8009b66:	f043 0301 	orreq.w	r3, r3, #1
 8009b6a:	3018      	adds	r0, #24
 8009b6c:	4284      	cmp	r4, r0
 8009b6e:	bf08      	it	eq
 8009b70:	f043 0301 	orreq.w	r3, r3, #1
 8009b74:	3018      	adds	r0, #24
 8009b76:	4284      	cmp	r4, r0
 8009b78:	bf08      	it	eq
 8009b7a:	f043 0301 	orreq.w	r3, r3, #1
 8009b7e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009b82:	4284      	cmp	r4, r0
 8009b84:	bf08      	it	eq
 8009b86:	f043 0301 	orreq.w	r3, r3, #1
 8009b8a:	3018      	adds	r0, #24
 8009b8c:	4284      	cmp	r4, r0
 8009b8e:	bf08      	it	eq
 8009b90:	f043 0301 	orreq.w	r3, r3, #1
 8009b94:	3018      	adds	r0, #24
 8009b96:	4284      	cmp	r4, r0
 8009b98:	bf08      	it	eq
 8009b9a:	f043 0301 	orreq.w	r3, r3, #1
 8009b9e:	3018      	adds	r0, #24
 8009ba0:	4284      	cmp	r4, r0
 8009ba2:	bf08      	it	eq
 8009ba4:	f043 0301 	orreq.w	r3, r3, #1
 8009ba8:	3018      	adds	r0, #24
 8009baa:	4284      	cmp	r4, r0
 8009bac:	bf08      	it	eq
 8009bae:	f043 0301 	orreq.w	r3, r3, #1
 8009bb2:	3018      	adds	r0, #24
 8009bb4:	4284      	cmp	r4, r0
 8009bb6:	bf08      	it	eq
 8009bb8:	f043 0301 	orreq.w	r3, r3, #1
 8009bbc:	3018      	adds	r0, #24
 8009bbe:	4284      	cmp	r4, r0
 8009bc0:	bf08      	it	eq
 8009bc2:	f043 0301 	orreq.w	r3, r3, #1
 8009bc6:	3018      	adds	r0, #24
 8009bc8:	4284      	cmp	r4, r0
 8009bca:	bf08      	it	eq
 8009bcc:	f043 0301 	orreq.w	r3, r3, #1
 8009bd0:	428c      	cmp	r4, r1
 8009bd2:	bf18      	it	ne
 8009bd4:	4294      	cmpne	r4, r2
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2201      	moveq	r2, #1
 8009bda:	2200      	movne	r2, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_DMA_Abort+0xc0>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 8090 	beq.w	8009d04 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	f021 011e 	bic.w	r1, r1, #30
 8009bea:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009bec:	6961      	ldr	r1, [r4, #20]
 8009bee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009bf2:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	f000 80b0 	beq.w	8009d5a <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bfa:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c02:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	f023 0301 	bic.w	r3, r3, #1
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	e005      	b.n	8009c1a <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c0e:	f7fd fdb1 	bl	8007774 <HAL_GetTick>
 8009c12:	1b83      	subs	r3, r0, r6
 8009c14:	2b05      	cmp	r3, #5
 8009c16:	f200 80a6 	bhi.w	8009d66 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	07db      	lsls	r3, r3, #31
 8009c1e:	d4f6      	bmi.n	8009c0e <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c20:	682a      	ldr	r2, [r5, #0]
 8009c22:	4b57      	ldr	r3, [pc, #348]	; (8009d80 <HAL_DMA_Abort+0x25c>)
 8009c24:	4857      	ldr	r0, [pc, #348]	; (8009d84 <HAL_DMA_Abort+0x260>)
 8009c26:	495a      	ldr	r1, [pc, #360]	; (8009d90 <HAL_DMA_Abort+0x26c>)
 8009c28:	4282      	cmp	r2, r0
 8009c2a:	bf18      	it	ne
 8009c2c:	429a      	cmpne	r2, r3
 8009c2e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8009c32:	bf0c      	ite	eq
 8009c34:	2301      	moveq	r3, #1
 8009c36:	2300      	movne	r3, #0
 8009c38:	428a      	cmp	r2, r1
 8009c3a:	bf08      	it	eq
 8009c3c:	f043 0301 	orreq.w	r3, r3, #1
 8009c40:	3130      	adds	r1, #48	; 0x30
 8009c42:	4282      	cmp	r2, r0
 8009c44:	bf08      	it	eq
 8009c46:	f043 0301 	orreq.w	r3, r3, #1
 8009c4a:	3030      	adds	r0, #48	; 0x30
 8009c4c:	428a      	cmp	r2, r1
 8009c4e:	bf08      	it	eq
 8009c50:	f043 0301 	orreq.w	r3, r3, #1
 8009c54:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009c58:	4282      	cmp	r2, r0
 8009c5a:	bf08      	it	eq
 8009c5c:	f043 0301 	orreq.w	r3, r3, #1
 8009c60:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009c64:	428a      	cmp	r2, r1
 8009c66:	bf08      	it	eq
 8009c68:	f043 0301 	orreq.w	r3, r3, #1
 8009c6c:	3130      	adds	r1, #48	; 0x30
 8009c6e:	4282      	cmp	r2, r0
 8009c70:	bf08      	it	eq
 8009c72:	f043 0301 	orreq.w	r3, r3, #1
 8009c76:	3030      	adds	r0, #48	; 0x30
 8009c78:	428a      	cmp	r2, r1
 8009c7a:	bf08      	it	eq
 8009c7c:	f043 0301 	orreq.w	r3, r3, #1
 8009c80:	3130      	adds	r1, #48	; 0x30
 8009c82:	4282      	cmp	r2, r0
 8009c84:	bf08      	it	eq
 8009c86:	f043 0301 	orreq.w	r3, r3, #1
 8009c8a:	3030      	adds	r0, #48	; 0x30
 8009c8c:	428a      	cmp	r2, r1
 8009c8e:	bf08      	it	eq
 8009c90:	f043 0301 	orreq.w	r3, r3, #1
 8009c94:	3130      	adds	r1, #48	; 0x30
 8009c96:	4282      	cmp	r2, r0
 8009c98:	bf08      	it	eq
 8009c9a:	f043 0301 	orreq.w	r3, r3, #1
 8009c9e:	428a      	cmp	r2, r1
 8009ca0:	bf08      	it	eq
 8009ca2:	f043 0301 	orreq.w	r3, r3, #1
 8009ca6:	3118      	adds	r1, #24
 8009ca8:	428a      	cmp	r2, r1
 8009caa:	bf08      	it	eq
 8009cac:	f043 0301 	orreq.w	r3, r3, #1
 8009cb0:	b933      	cbnz	r3, 8009cc0 <HAL_DMA_Abort+0x19c>
 8009cb2:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8009cb6:	4b35      	ldr	r3, [pc, #212]	; (8009d8c <HAL_DMA_Abort+0x268>)
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bf18      	it	ne
 8009cbc:	428a      	cmpne	r2, r1
 8009cbe:	d16f      	bne.n	8009da0 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009cc0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8009cc2:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cc4:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009cc6:	f002 021f 	and.w	r2, r2, #31
 8009cca:	4093      	lsls	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8009cce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cd0:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8009cd4:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8009cd6:	b133      	cbz	r3, 8009ce6 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009cd8:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cda:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ce2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ce4:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8009ce6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8009ce8:	2201      	movs	r2, #1
  return HAL_OK;
 8009cea:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8009cec:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009cf0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009cf4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cf6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8009cf8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009cfa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cfc:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009cfe:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d04:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d06:	4923      	ldr	r1, [pc, #140]	; (8009d94 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d08:	f022 020e 	bic.w	r2, r2, #14
 8009d0c:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d0e:	4a22      	ldr	r2, [pc, #136]	; (8009d98 <HAL_DMA_Abort+0x274>)
 8009d10:	428c      	cmp	r4, r1
 8009d12:	bf18      	it	ne
 8009d14:	4294      	cmpne	r4, r2
 8009d16:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2201      	moveq	r2, #1
 8009d1e:	2200      	movne	r2, #0
 8009d20:	428c      	cmp	r4, r1
 8009d22:	bf08      	it	eq
 8009d24:	f042 0201 	orreq.w	r2, r2, #1
 8009d28:	3114      	adds	r1, #20
 8009d2a:	428c      	cmp	r4, r1
 8009d2c:	bf08      	it	eq
 8009d2e:	f042 0201 	orreq.w	r2, r2, #1
 8009d32:	3114      	adds	r1, #20
 8009d34:	428c      	cmp	r4, r1
 8009d36:	bf08      	it	eq
 8009d38:	f042 0201 	orreq.w	r2, r2, #1
 8009d3c:	3114      	adds	r1, #20
 8009d3e:	428c      	cmp	r4, r1
 8009d40:	bf08      	it	eq
 8009d42:	f042 0201 	orreq.w	r2, r2, #1
 8009d46:	3114      	adds	r1, #20
 8009d48:	428c      	cmp	r4, r1
 8009d4a:	bf08      	it	eq
 8009d4c:	f042 0201 	orreq.w	r2, r2, #1
 8009d50:	b91a      	cbnz	r2, 8009d5a <HAL_DMA_Abort+0x236>
 8009d52:	4a12      	ldr	r2, [pc, #72]	; (8009d9c <HAL_DMA_Abort+0x278>)
 8009d54:	4294      	cmp	r4, r2
 8009d56:	f47f af55 	bne.w	8009c04 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009d5a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009d5c:	680a      	ldr	r2, [r1, #0]
 8009d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d62:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009d64:	e74e      	b.n	8009c04 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d66:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009d68:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8009d6a:	2300      	movs	r3, #0
        return HAL_ERROR;
 8009d6c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d6e:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8009d70:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8009d74:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8009d78:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009d7a:	2001      	movs	r0, #1
}
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	bf00      	nop
 8009d80:	40020058 	.word	0x40020058
 8009d84:	40020040 	.word	0x40020040
 8009d88:	40020010 	.word	0x40020010
 8009d8c:	40020028 	.word	0x40020028
 8009d90:	40020070 	.word	0x40020070
 8009d94:	58025408 	.word	0x58025408
 8009d98:	5802541c 	.word	0x5802541c
 8009d9c:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009da0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8009da2:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009da4:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009da6:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009daa:	4c16      	ldr	r4, [pc, #88]	; (8009e04 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009dac:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dae:	42a2      	cmp	r2, r4
 8009db0:	bf18      	it	ne
 8009db2:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009db6:	bf0c      	ite	eq
 8009db8:	2301      	moveq	r3, #1
 8009dba:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009dbc:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dbe:	4812      	ldr	r0, [pc, #72]	; (8009e08 <HAL_DMA_Abort+0x2e4>)
 8009dc0:	4912      	ldr	r1, [pc, #72]	; (8009e0c <HAL_DMA_Abort+0x2e8>)
 8009dc2:	4282      	cmp	r2, r0
 8009dc4:	bf08      	it	eq
 8009dc6:	f043 0301 	orreq.w	r3, r3, #1
 8009dca:	3028      	adds	r0, #40	; 0x28
 8009dcc:	428a      	cmp	r2, r1
 8009dce:	bf08      	it	eq
 8009dd0:	f043 0301 	orreq.w	r3, r3, #1
 8009dd4:	3128      	adds	r1, #40	; 0x28
 8009dd6:	4282      	cmp	r2, r0
 8009dd8:	bf08      	it	eq
 8009dda:	f043 0301 	orreq.w	r3, r3, #1
 8009dde:	428a      	cmp	r2, r1
 8009de0:	bf08      	it	eq
 8009de2:	f043 0301 	orreq.w	r3, r3, #1
 8009de6:	3114      	adds	r1, #20
 8009de8:	428a      	cmp	r2, r1
 8009dea:	bf08      	it	eq
 8009dec:	f043 0301 	orreq.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f47f af6c 	bne.w	8009cce <HAL_DMA_Abort+0x1aa>
 8009df6:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <HAL_DMA_Abort+0x2ec>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	f43f af68 	beq.w	8009cce <HAL_DMA_Abort+0x1aa>
 8009dfe:	e772      	b.n	8009ce6 <HAL_DMA_Abort+0x1c2>
 8009e00:	5802541c 	.word	0x5802541c
 8009e04:	58025408 	.word	0x58025408
 8009e08:	58025430 	.word	0x58025430
 8009e0c:	58025444 	.word	0x58025444
 8009e10:	58025494 	.word	0x58025494

08009e14 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d05f      	beq.n	8009ed8 <HAL_DMA_Abort_IT+0xc4>
{
 8009e18:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e1a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2a02      	cmp	r2, #2
 8009e22:	d155      	bne.n	8009ed0 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e24:	6801      	ldr	r1, [r0, #0]
 8009e26:	4a57      	ldr	r2, [pc, #348]	; (8009f84 <HAL_DMA_Abort_IT+0x170>)
 8009e28:	4291      	cmp	r1, r2
 8009e2a:	d048      	beq.n	8009ebe <HAL_DMA_Abort_IT+0xaa>
 8009e2c:	3218      	adds	r2, #24
 8009e2e:	4291      	cmp	r1, r2
 8009e30:	d045      	beq.n	8009ebe <HAL_DMA_Abort_IT+0xaa>
 8009e32:	3230      	adds	r2, #48	; 0x30
 8009e34:	4c54      	ldr	r4, [pc, #336]	; (8009f88 <HAL_DMA_Abort_IT+0x174>)
 8009e36:	4855      	ldr	r0, [pc, #340]	; (8009f8c <HAL_DMA_Abort_IT+0x178>)
 8009e38:	42a1      	cmp	r1, r4
 8009e3a:	bf18      	it	ne
 8009e3c:	4291      	cmpne	r1, r2
 8009e3e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8009e42:	bf0c      	ite	eq
 8009e44:	2201      	moveq	r2, #1
 8009e46:	2200      	movne	r2, #0
 8009e48:	4281      	cmp	r1, r0
 8009e4a:	bf08      	it	eq
 8009e4c:	f042 0201 	orreq.w	r2, r2, #1
 8009e50:	3030      	adds	r0, #48	; 0x30
 8009e52:	42a1      	cmp	r1, r4
 8009e54:	bf08      	it	eq
 8009e56:	f042 0201 	orreq.w	r2, r2, #1
 8009e5a:	3430      	adds	r4, #48	; 0x30
 8009e5c:	4281      	cmp	r1, r0
 8009e5e:	bf08      	it	eq
 8009e60:	f042 0201 	orreq.w	r2, r2, #1
 8009e64:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009e68:	42a1      	cmp	r1, r4
 8009e6a:	bf08      	it	eq
 8009e6c:	f042 0201 	orreq.w	r2, r2, #1
 8009e70:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009e74:	4281      	cmp	r1, r0
 8009e76:	bf08      	it	eq
 8009e78:	f042 0201 	orreq.w	r2, r2, #1
 8009e7c:	3030      	adds	r0, #48	; 0x30
 8009e7e:	42a1      	cmp	r1, r4
 8009e80:	bf08      	it	eq
 8009e82:	f042 0201 	orreq.w	r2, r2, #1
 8009e86:	3430      	adds	r4, #48	; 0x30
 8009e88:	4281      	cmp	r1, r0
 8009e8a:	bf08      	it	eq
 8009e8c:	f042 0201 	orreq.w	r2, r2, #1
 8009e90:	3030      	adds	r0, #48	; 0x30
 8009e92:	42a1      	cmp	r1, r4
 8009e94:	bf08      	it	eq
 8009e96:	f042 0201 	orreq.w	r2, r2, #1
 8009e9a:	3430      	adds	r4, #48	; 0x30
 8009e9c:	4281      	cmp	r1, r0
 8009e9e:	bf08      	it	eq
 8009ea0:	f042 0201 	orreq.w	r2, r2, #1
 8009ea4:	3030      	adds	r0, #48	; 0x30
 8009ea6:	42a1      	cmp	r1, r4
 8009ea8:	bf08      	it	eq
 8009eaa:	f042 0201 	orreq.w	r2, r2, #1
 8009eae:	4281      	cmp	r1, r0
 8009eb0:	bf08      	it	eq
 8009eb2:	f042 0201 	orreq.w	r2, r2, #1
 8009eb6:	b912      	cbnz	r2, 8009ebe <HAL_DMA_Abort_IT+0xaa>
 8009eb8:	4a35      	ldr	r2, [pc, #212]	; (8009f90 <HAL_DMA_Abort_IT+0x17c>)
 8009eba:	4291      	cmp	r1, r2
 8009ebc:	d10e      	bne.n	8009edc <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ebe:	2204      	movs	r2, #4
  return HAL_OK;
 8009ec0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009ec6:	680b      	ldr	r3, [r1, #0]
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	600b      	str	r3, [r1, #0]
}
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ed0:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009ed2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ed4:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ed8:	2001      	movs	r0, #1
}
 8009eda:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009edc:	4a2d      	ldr	r2, [pc, #180]	; (8009f94 <HAL_DMA_Abort_IT+0x180>)
 8009ede:	4d2e      	ldr	r5, [pc, #184]	; (8009f98 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009ee0:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009ee2:	42a9      	cmp	r1, r5
 8009ee4:	bf18      	it	ne
 8009ee6:	4291      	cmpne	r1, r2
 8009ee8:	4c2c      	ldr	r4, [pc, #176]	; (8009f9c <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009eea:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009eee:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2201      	moveq	r2, #1
 8009ef6:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009ef8:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009efa:	42a1      	cmp	r1, r4
 8009efc:	bf08      	it	eq
 8009efe:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009f02:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f04:	3428      	adds	r4, #40	; 0x28
 8009f06:	42a9      	cmp	r1, r5
 8009f08:	bf08      	it	eq
 8009f0a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009f0e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f12:	42a1      	cmp	r1, r4
 8009f14:	bf08      	it	eq
 8009f16:	f042 0201 	orreq.w	r2, r2, #1
 8009f1a:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8009f1c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f1e:	42a1      	cmp	r1, r4
 8009f20:	bf08      	it	eq
 8009f22:	f042 0201 	orreq.w	r2, r2, #1
 8009f26:	481e      	ldr	r0, [pc, #120]	; (8009fa0 <HAL_DMA_Abort_IT+0x18c>)
 8009f28:	4281      	cmp	r1, r0
 8009f2a:	bf08      	it	eq
 8009f2c:	f042 0201 	orreq.w	r2, r2, #1
 8009f30:	b912      	cbnz	r2, 8009f38 <HAL_DMA_Abort_IT+0x124>
 8009f32:	4a1c      	ldr	r2, [pc, #112]	; (8009fa4 <HAL_DMA_Abort_IT+0x190>)
 8009f34:	4291      	cmp	r1, r2
 8009f36:	d117      	bne.n	8009f68 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f38:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f3a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f3c:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f40:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f42:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f46:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f4a:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f4c:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f4e:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009f50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f52:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8009f56:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009f58:	b132      	cbz	r2, 8009f68 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f5a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f5c:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009f64:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f66:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009f68:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009f6a:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009f6e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8009f72:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8009f76:	b11a      	cbz	r2, 8009f80 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8009f78:	4618      	mov	r0, r3
 8009f7a:	4790      	blx	r2
  return HAL_OK;
 8009f7c:	4620      	mov	r0, r4
}
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8009f80:	4610      	mov	r0, r2
}
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	40020010 	.word	0x40020010
 8009f88:	40020040 	.word	0x40020040
 8009f8c:	40020070 	.word	0x40020070
 8009f90:	400204b8 	.word	0x400204b8
 8009f94:	5802541c 	.word	0x5802541c
 8009f98:	58025408 	.word	0x58025408
 8009f9c:	58025430 	.word	0x58025430
 8009fa0:	58025480 	.word	0x58025480
 8009fa4:	58025494 	.word	0x58025494

08009fa8 <HAL_DMA_IRQHandler>:
{
 8009fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8009fac:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fae:	4b9c      	ldr	r3, [pc, #624]	; (800a220 <HAL_DMA_IRQHandler+0x278>)
{
 8009fb0:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fb2:	4e9c      	ldr	r6, [pc, #624]	; (800a224 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fb4:	681d      	ldr	r5, [r3, #0]
{
 8009fb6:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8009fb8:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fba:	6803      	ldr	r3, [r0, #0]
 8009fbc:	4a9a      	ldr	r2, [pc, #616]	; (800a228 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fbe:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	bf18      	it	ne
 8009fc4:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8009fc6:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fc8:	bf08      	it	eq
 8009fca:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8009fcc:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fce:	bf18      	it	ne
 8009fd0:	2600      	movne	r6, #0
 8009fd2:	d045      	beq.n	800a060 <HAL_DMA_IRQHandler+0xb8>
 8009fd4:	3218      	adds	r2, #24
 8009fd6:	4895      	ldr	r0, [pc, #596]	; (800a22c <HAL_DMA_IRQHandler+0x284>)
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	bf18      	it	ne
 8009fdc:	4293      	cmpne	r3, r2
 8009fde:	f100 0018 	add.w	r0, r0, #24
 8009fe2:	bf0c      	ite	eq
 8009fe4:	2201      	moveq	r2, #1
 8009fe6:	2200      	movne	r2, #0
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	bf08      	it	eq
 8009fec:	f042 0201 	orreq.w	r2, r2, #1
 8009ff0:	3018      	adds	r0, #24
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	bf08      	it	eq
 8009ff6:	f042 0201 	orreq.w	r2, r2, #1
 8009ffa:	3018      	adds	r0, #24
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	bf08      	it	eq
 800a000:	f042 0201 	orreq.w	r2, r2, #1
 800a004:	3018      	adds	r0, #24
 800a006:	4283      	cmp	r3, r0
 800a008:	bf08      	it	eq
 800a00a:	f042 0201 	orreq.w	r2, r2, #1
 800a00e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a012:	4283      	cmp	r3, r0
 800a014:	bf08      	it	eq
 800a016:	f042 0201 	orreq.w	r2, r2, #1
 800a01a:	3018      	adds	r0, #24
 800a01c:	4283      	cmp	r3, r0
 800a01e:	bf08      	it	eq
 800a020:	f042 0201 	orreq.w	r2, r2, #1
 800a024:	3018      	adds	r0, #24
 800a026:	4283      	cmp	r3, r0
 800a028:	bf08      	it	eq
 800a02a:	f042 0201 	orreq.w	r2, r2, #1
 800a02e:	3018      	adds	r0, #24
 800a030:	4283      	cmp	r3, r0
 800a032:	bf08      	it	eq
 800a034:	f042 0201 	orreq.w	r2, r2, #1
 800a038:	3018      	adds	r0, #24
 800a03a:	4283      	cmp	r3, r0
 800a03c:	bf08      	it	eq
 800a03e:	f042 0201 	orreq.w	r2, r2, #1
 800a042:	3018      	adds	r0, #24
 800a044:	4283      	cmp	r3, r0
 800a046:	bf08      	it	eq
 800a048:	f042 0201 	orreq.w	r2, r2, #1
 800a04c:	3018      	adds	r0, #24
 800a04e:	4283      	cmp	r3, r0
 800a050:	bf08      	it	eq
 800a052:	f042 0201 	orreq.w	r2, r2, #1
 800a056:	b91a      	cbnz	r2, 800a060 <HAL_DMA_IRQHandler+0xb8>
 800a058:	4a75      	ldr	r2, [pc, #468]	; (800a230 <HAL_DMA_IRQHandler+0x288>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	f040 8250 	bne.w	800a500 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a060:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 800a064:	2208      	movs	r2, #8
 800a066:	f001 0c1f 	and.w	ip, r1, #31
 800a06a:	fa02 f20c 	lsl.w	r2, r2, ip
 800a06e:	4217      	tst	r7, r2
 800a070:	f040 8188 	bne.w	800a384 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a074:	fa27 f20c 	lsr.w	r2, r7, ip
 800a078:	07d2      	lsls	r2, r2, #31
 800a07a:	d50c      	bpl.n	800a096 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a07c:	695a      	ldr	r2, [r3, #20]
 800a07e:	0610      	lsls	r0, r2, #24
 800a080:	d509      	bpl.n	800a096 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a082:	2201      	movs	r2, #1
 800a084:	fa02 f20c 	lsl.w	r2, r2, ip
 800a088:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a08a:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800a08e:	f042 0202 	orr.w	r2, r2, #2
 800a092:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a096:	f04f 0e04 	mov.w	lr, #4
 800a09a:	fa0e f00c 	lsl.w	r0, lr, ip
 800a09e:	4238      	tst	r0, r7
 800a0a0:	d05b      	beq.n	800a15a <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a0a2:	2e00      	cmp	r6, #0
 800a0a4:	d14f      	bne.n	800a146 <HAL_DMA_IRQHandler+0x19e>
 800a0a6:	4a61      	ldr	r2, [pc, #388]	; (800a22c <HAL_DMA_IRQHandler+0x284>)
 800a0a8:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800a234 <HAL_DMA_IRQHandler+0x28c>
 800a0ac:	4543      	cmp	r3, r8
 800a0ae:	bf18      	it	ne
 800a0b0:	4293      	cmpne	r3, r2
 800a0b2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2201      	moveq	r2, #1
 800a0ba:	2200      	movne	r2, #0
 800a0bc:	4543      	cmp	r3, r8
 800a0be:	bf08      	it	eq
 800a0c0:	f042 0201 	orreq.w	r2, r2, #1
 800a0c4:	f108 0818 	add.w	r8, r8, #24
 800a0c8:	4543      	cmp	r3, r8
 800a0ca:	bf08      	it	eq
 800a0cc:	f042 0201 	orreq.w	r2, r2, #1
 800a0d0:	f108 0818 	add.w	r8, r8, #24
 800a0d4:	4543      	cmp	r3, r8
 800a0d6:	bf08      	it	eq
 800a0d8:	f042 0201 	orreq.w	r2, r2, #1
 800a0dc:	f108 0818 	add.w	r8, r8, #24
 800a0e0:	4543      	cmp	r3, r8
 800a0e2:	bf08      	it	eq
 800a0e4:	f042 0201 	orreq.w	r2, r2, #1
 800a0e8:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800a0ec:	4543      	cmp	r3, r8
 800a0ee:	bf08      	it	eq
 800a0f0:	f042 0201 	orreq.w	r2, r2, #1
 800a0f4:	f108 0818 	add.w	r8, r8, #24
 800a0f8:	4543      	cmp	r3, r8
 800a0fa:	bf08      	it	eq
 800a0fc:	f042 0201 	orreq.w	r2, r2, #1
 800a100:	f108 0818 	add.w	r8, r8, #24
 800a104:	4543      	cmp	r3, r8
 800a106:	bf08      	it	eq
 800a108:	f042 0201 	orreq.w	r2, r2, #1
 800a10c:	f108 0818 	add.w	r8, r8, #24
 800a110:	4543      	cmp	r3, r8
 800a112:	bf08      	it	eq
 800a114:	f042 0201 	orreq.w	r2, r2, #1
 800a118:	f108 0818 	add.w	r8, r8, #24
 800a11c:	4543      	cmp	r3, r8
 800a11e:	bf08      	it	eq
 800a120:	f042 0201 	orreq.w	r2, r2, #1
 800a124:	f108 0818 	add.w	r8, r8, #24
 800a128:	4543      	cmp	r3, r8
 800a12a:	bf08      	it	eq
 800a12c:	f042 0201 	orreq.w	r2, r2, #1
 800a130:	f108 0818 	add.w	r8, r8, #24
 800a134:	4543      	cmp	r3, r8
 800a136:	bf08      	it	eq
 800a138:	f042 0201 	orreq.w	r2, r2, #1
 800a13c:	b91a      	cbnz	r2, 800a146 <HAL_DMA_IRQHandler+0x19e>
 800a13e:	4a3c      	ldr	r2, [pc, #240]	; (800a230 <HAL_DMA_IRQHandler+0x288>)
 800a140:	4293      	cmp	r3, r2
 800a142:	f040 8219 	bne.w	800a578 <HAL_DMA_IRQHandler+0x5d0>
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	0792      	lsls	r2, r2, #30
 800a14a:	d506      	bpl.n	800a15a <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a14c:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a14e:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800a152:	f042 0204 	orr.w	r2, r2, #4
 800a156:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a15a:	2210      	movs	r2, #16
 800a15c:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a160:	ea1c 0f07 	tst.w	ip, r7
 800a164:	d06c      	beq.n	800a240 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a166:	2e00      	cmp	r6, #0
 800a168:	d145      	bne.n	800a1f6 <HAL_DMA_IRQHandler+0x24e>
 800a16a:	4a30      	ldr	r2, [pc, #192]	; (800a22c <HAL_DMA_IRQHandler+0x284>)
 800a16c:	4e31      	ldr	r6, [pc, #196]	; (800a234 <HAL_DMA_IRQHandler+0x28c>)
 800a16e:	42b3      	cmp	r3, r6
 800a170:	bf18      	it	ne
 800a172:	4293      	cmpne	r3, r2
 800a174:	f106 0630 	add.w	r6, r6, #48	; 0x30
 800a178:	bf0c      	ite	eq
 800a17a:	2201      	moveq	r2, #1
 800a17c:	2200      	movne	r2, #0
 800a17e:	42b3      	cmp	r3, r6
 800a180:	bf08      	it	eq
 800a182:	f042 0201 	orreq.w	r2, r2, #1
 800a186:	3618      	adds	r6, #24
 800a188:	42b3      	cmp	r3, r6
 800a18a:	bf08      	it	eq
 800a18c:	f042 0201 	orreq.w	r2, r2, #1
 800a190:	3618      	adds	r6, #24
 800a192:	42b3      	cmp	r3, r6
 800a194:	bf08      	it	eq
 800a196:	f042 0201 	orreq.w	r2, r2, #1
 800a19a:	3618      	adds	r6, #24
 800a19c:	42b3      	cmp	r3, r6
 800a19e:	bf08      	it	eq
 800a1a0:	f042 0201 	orreq.w	r2, r2, #1
 800a1a4:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800a1a8:	42b3      	cmp	r3, r6
 800a1aa:	bf08      	it	eq
 800a1ac:	f042 0201 	orreq.w	r2, r2, #1
 800a1b0:	3618      	adds	r6, #24
 800a1b2:	42b3      	cmp	r3, r6
 800a1b4:	bf08      	it	eq
 800a1b6:	f042 0201 	orreq.w	r2, r2, #1
 800a1ba:	3618      	adds	r6, #24
 800a1bc:	42b3      	cmp	r3, r6
 800a1be:	bf08      	it	eq
 800a1c0:	f042 0201 	orreq.w	r2, r2, #1
 800a1c4:	3618      	adds	r6, #24
 800a1c6:	42b3      	cmp	r3, r6
 800a1c8:	bf08      	it	eq
 800a1ca:	f042 0201 	orreq.w	r2, r2, #1
 800a1ce:	3618      	adds	r6, #24
 800a1d0:	42b3      	cmp	r3, r6
 800a1d2:	bf08      	it	eq
 800a1d4:	f042 0201 	orreq.w	r2, r2, #1
 800a1d8:	3618      	adds	r6, #24
 800a1da:	42b3      	cmp	r3, r6
 800a1dc:	bf08      	it	eq
 800a1de:	f042 0201 	orreq.w	r2, r2, #1
 800a1e2:	3618      	adds	r6, #24
 800a1e4:	42b3      	cmp	r3, r6
 800a1e6:	bf08      	it	eq
 800a1e8:	f042 0201 	orreq.w	r2, r2, #1
 800a1ec:	b91a      	cbnz	r2, 800a1f6 <HAL_DMA_IRQHandler+0x24e>
 800a1ee:	4a10      	ldr	r2, [pc, #64]	; (800a230 <HAL_DMA_IRQHandler+0x288>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	f040 81c9 	bne.w	800a588 <HAL_DMA_IRQHandler+0x5e0>
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	0710      	lsls	r0, r2, #28
 800a1fa:	d521      	bpl.n	800a240 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1fc:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	0356      	lsls	r6, r2, #13
 800a204:	f100 814c 	bmi.w	800a4a0 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	05d2      	lsls	r2, r2, #23
 800a20c:	d403      	bmi.n	800a216 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	f022 0208 	bic.w	r2, r2, #8
 800a214:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800a216:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a21a:	b18b      	cbz	r3, 800a240 <HAL_DMA_IRQHandler+0x298>
 800a21c:	e00c      	b.n	800a238 <HAL_DMA_IRQHandler+0x290>
 800a21e:	bf00      	nop
 800a220:	24000318 	.word	0x24000318
 800a224:	40020010 	.word	0x40020010
 800a228:	40020028 	.word	0x40020028
 800a22c:	40020058 	.word	0x40020058
 800a230:	400204b8 	.word	0x400204b8
 800a234:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800a238:	4648      	mov	r0, r9
 800a23a:	4798      	blx	r3
 800a23c:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a240:	f001 011f 	and.w	r1, r1, #31
 800a244:	2620      	movs	r6, #32
 800a246:	408e      	lsls	r6, r1
 800a248:	423e      	tst	r6, r7
 800a24a:	d068      	beq.n	800a31e <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a24c:	f8d9 2000 	ldr.w	r2, [r9]
 800a250:	4ba5      	ldr	r3, [pc, #660]	; (800a4e8 <HAL_DMA_IRQHandler+0x540>)
 800a252:	4fa6      	ldr	r7, [pc, #664]	; (800a4ec <HAL_DMA_IRQHandler+0x544>)
 800a254:	42ba      	cmp	r2, r7
 800a256:	bf18      	it	ne
 800a258:	429a      	cmpne	r2, r3
 800a25a:	f107 0718 	add.w	r7, r7, #24
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	42ba      	cmp	r2, r7
 800a266:	bf08      	it	eq
 800a268:	f043 0301 	orreq.w	r3, r3, #1
 800a26c:	3718      	adds	r7, #24
 800a26e:	42ba      	cmp	r2, r7
 800a270:	bf08      	it	eq
 800a272:	f043 0301 	orreq.w	r3, r3, #1
 800a276:	3718      	adds	r7, #24
 800a278:	42ba      	cmp	r2, r7
 800a27a:	bf08      	it	eq
 800a27c:	f043 0301 	orreq.w	r3, r3, #1
 800a280:	3718      	adds	r7, #24
 800a282:	42ba      	cmp	r2, r7
 800a284:	bf08      	it	eq
 800a286:	f043 0301 	orreq.w	r3, r3, #1
 800a28a:	3718      	adds	r7, #24
 800a28c:	42ba      	cmp	r2, r7
 800a28e:	bf08      	it	eq
 800a290:	f043 0301 	orreq.w	r3, r3, #1
 800a294:	3718      	adds	r7, #24
 800a296:	42ba      	cmp	r2, r7
 800a298:	bf08      	it	eq
 800a29a:	f043 0301 	orreq.w	r3, r3, #1
 800a29e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800a2a2:	42ba      	cmp	r2, r7
 800a2a4:	bf08      	it	eq
 800a2a6:	f043 0301 	orreq.w	r3, r3, #1
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	42ba      	cmp	r2, r7
 800a2ae:	bf08      	it	eq
 800a2b0:	f043 0301 	orreq.w	r3, r3, #1
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	42ba      	cmp	r2, r7
 800a2b8:	bf08      	it	eq
 800a2ba:	f043 0301 	orreq.w	r3, r3, #1
 800a2be:	3718      	adds	r7, #24
 800a2c0:	42ba      	cmp	r2, r7
 800a2c2:	bf08      	it	eq
 800a2c4:	f043 0301 	orreq.w	r3, r3, #1
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	42ba      	cmp	r2, r7
 800a2cc:	bf08      	it	eq
 800a2ce:	f043 0301 	orreq.w	r3, r3, #1
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	42ba      	cmp	r2, r7
 800a2d6:	bf08      	it	eq
 800a2d8:	f043 0301 	orreq.w	r3, r3, #1
 800a2dc:	3718      	adds	r7, #24
 800a2de:	42ba      	cmp	r2, r7
 800a2e0:	bf08      	it	eq
 800a2e2:	f043 0301 	orreq.w	r3, r3, #1
 800a2e6:	b91b      	cbnz	r3, 800a2f0 <HAL_DMA_IRQHandler+0x348>
 800a2e8:	4b81      	ldr	r3, [pc, #516]	; (800a4f0 <HAL_DMA_IRQHandler+0x548>)
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	f040 8162 	bne.w	800a5b4 <HAL_DMA_IRQHandler+0x60c>
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	06db      	lsls	r3, r3, #27
 800a2f4:	d513      	bpl.n	800a31e <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2f6:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2f8:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 800a2fc:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2fe:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a300:	f000 80ae 	beq.w	800a460 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a304:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a308:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a30a:	f000 80d3 	beq.w	800a4b4 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a30e:	031c      	lsls	r4, r3, #12
 800a310:	f140 80de 	bpl.w	800a4d0 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800a314:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800a318:	b10b      	cbz	r3, 800a31e <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 800a31a:	4648      	mov	r0, r9
 800a31c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a31e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 80b9 	beq.w	800a49a <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a328:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800a32c:	07d8      	lsls	r0, r3, #31
 800a32e:	d51f      	bpl.n	800a370 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 800a330:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a334:	2104      	movs	r1, #4
 800a336:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800a33a:	6813      	ldr	r3, [r2, #0]
 800a33c:	f023 0301 	bic.w	r3, r3, #1
 800a340:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a342:	4b6c      	ldr	r3, [pc, #432]	; (800a4f4 <HAL_DMA_IRQHandler+0x54c>)
 800a344:	fba3 3505 	umull	r3, r5, r3, r5
 800a348:	0aad      	lsrs	r5, r5, #10
 800a34a:	e002      	b.n	800a352 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a34c:	6813      	ldr	r3, [r2, #0]
 800a34e:	07d9      	lsls	r1, r3, #31
 800a350:	d504      	bpl.n	800a35c <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	3301      	adds	r3, #1
 800a356:	42ab      	cmp	r3, r5
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	d9f7      	bls.n	800a34c <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a35c:	6813      	ldr	r3, [r2, #0]
 800a35e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a360:	bf4c      	ite	mi
 800a362:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a364:	2301      	movpl	r3, #1
 800a366:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a36a:	2300      	movs	r3, #0
 800a36c:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800a370:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 8090 	beq.w	800a49a <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800a37a:	4648      	mov	r0, r9
}
 800a37c:	b003      	add	sp, #12
 800a37e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 800a382:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	0740      	lsls	r0, r0, #29
 800a388:	d50a      	bpl.n	800a3a0 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	f020 0004 	bic.w	r0, r0, #4
 800a390:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a392:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a394:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a3a0:	fa27 f20c 	lsr.w	r2, r7, ip
 800a3a4:	07d2      	lsls	r2, r2, #31
 800a3a6:	f57f ae76 	bpl.w	800a096 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a3aa:	4a53      	ldr	r2, [pc, #332]	; (800a4f8 <HAL_DMA_IRQHandler+0x550>)
 800a3ac:	4853      	ldr	r0, [pc, #332]	; (800a4fc <HAL_DMA_IRQHandler+0x554>)
 800a3ae:	4283      	cmp	r3, r0
 800a3b0:	bf18      	it	ne
 800a3b2:	4293      	cmpne	r3, r2
 800a3b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a3b8:	bf0c      	ite	eq
 800a3ba:	2201      	moveq	r2, #1
 800a3bc:	2200      	movne	r2, #0
 800a3be:	4283      	cmp	r3, r0
 800a3c0:	bf08      	it	eq
 800a3c2:	f042 0201 	orreq.w	r2, r2, #1
 800a3c6:	3018      	adds	r0, #24
 800a3c8:	4283      	cmp	r3, r0
 800a3ca:	bf08      	it	eq
 800a3cc:	f042 0201 	orreq.w	r2, r2, #1
 800a3d0:	3018      	adds	r0, #24
 800a3d2:	4283      	cmp	r3, r0
 800a3d4:	bf08      	it	eq
 800a3d6:	f042 0201 	orreq.w	r2, r2, #1
 800a3da:	3018      	adds	r0, #24
 800a3dc:	4283      	cmp	r3, r0
 800a3de:	bf08      	it	eq
 800a3e0:	f042 0201 	orreq.w	r2, r2, #1
 800a3e4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a3e8:	4283      	cmp	r3, r0
 800a3ea:	bf08      	it	eq
 800a3ec:	f042 0201 	orreq.w	r2, r2, #1
 800a3f0:	3018      	adds	r0, #24
 800a3f2:	4283      	cmp	r3, r0
 800a3f4:	bf08      	it	eq
 800a3f6:	f042 0201 	orreq.w	r2, r2, #1
 800a3fa:	3018      	adds	r0, #24
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	bf08      	it	eq
 800a400:	f042 0201 	orreq.w	r2, r2, #1
 800a404:	3018      	adds	r0, #24
 800a406:	4283      	cmp	r3, r0
 800a408:	bf08      	it	eq
 800a40a:	f042 0201 	orreq.w	r2, r2, #1
 800a40e:	3018      	adds	r0, #24
 800a410:	4283      	cmp	r3, r0
 800a412:	bf08      	it	eq
 800a414:	f042 0201 	orreq.w	r2, r2, #1
 800a418:	3018      	adds	r0, #24
 800a41a:	4283      	cmp	r3, r0
 800a41c:	bf08      	it	eq
 800a41e:	f042 0201 	orreq.w	r2, r2, #1
 800a422:	3018      	adds	r0, #24
 800a424:	4283      	cmp	r3, r0
 800a426:	bf08      	it	eq
 800a428:	f042 0201 	orreq.w	r2, r2, #1
 800a42c:	3018      	adds	r0, #24
 800a42e:	4283      	cmp	r3, r0
 800a430:	bf08      	it	eq
 800a432:	f042 0201 	orreq.w	r2, r2, #1
 800a436:	2a00      	cmp	r2, #0
 800a438:	f47f ae20 	bne.w	800a07c <HAL_DMA_IRQHandler+0xd4>
 800a43c:	2e00      	cmp	r6, #0
 800a43e:	f47f ae1d 	bne.w	800a07c <HAL_DMA_IRQHandler+0xd4>
 800a442:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a444:	2204      	movs	r2, #4
 800a446:	fa02 f20c 	lsl.w	r2, r2, ip
 800a44a:	423a      	tst	r2, r7
 800a44c:	f040 8094 	bne.w	800a578 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a450:	2210      	movs	r2, #16
 800a452:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a456:	ea17 0f0c 	tst.w	r7, ip
 800a45a:	f43f aef1 	beq.w	800a240 <HAL_DMA_IRQHandler+0x298>
 800a45e:	e684      	b.n	800a16a <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a460:	f023 0316 	bic.w	r3, r3, #22
 800a464:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a466:	6953      	ldr	r3, [r2, #20]
 800a468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a46c:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a46e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a472:	b39b      	cbz	r3, 800a4dc <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a474:	6813      	ldr	r3, [r2, #0]
 800a476:	f023 0308 	bic.w	r3, r3, #8
 800a47a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a47c:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a47e:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 800a480:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a482:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800a486:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a48a:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800a48c:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a490:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800a494:	2b00      	cmp	r3, #0
 800a496:	f47f af70 	bne.w	800a37a <HAL_DMA_IRQHandler+0x3d2>
}
 800a49a:	b003      	add	sp, #12
 800a49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	0318      	lsls	r0, r3, #12
 800a4a4:	f57f aeb7 	bpl.w	800a216 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a4a8:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f aec3 	bne.w	800a238 <HAL_DMA_IRQHandler+0x290>
 800a4b2:	e6c5      	b.n	800a240 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a4b4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800a4b8:	f47f af2c 	bne.w	800a314 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a4bc:	6811      	ldr	r1, [r2, #0]
 800a4be:	f021 0110 	bic.w	r1, r1, #16
 800a4c2:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a4c4:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800a4c6:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a4ca:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800a4ce:	e721      	b.n	800a314 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800a4d0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f47f af20 	bne.w	800a31a <HAL_DMA_IRQHandler+0x372>
 800a4da:	e720      	b.n	800a31e <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a4dc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1c7      	bne.n	800a474 <HAL_DMA_IRQHandler+0x4cc>
 800a4e4:	e7ca      	b.n	800a47c <HAL_DMA_IRQHandler+0x4d4>
 800a4e6:	bf00      	nop
 800a4e8:	40020010 	.word	0x40020010
 800a4ec:	40020028 	.word	0x40020028
 800a4f0:	400204b8 	.word	0x400204b8
 800a4f4:	1b4e81b5 	.word	0x1b4e81b5
 800a4f8:	40020058 	.word	0x40020058
 800a4fc:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a500:	4a4e      	ldr	r2, [pc, #312]	; (800a63c <HAL_DMA_IRQHandler+0x694>)
 800a502:	4d4f      	ldr	r5, [pc, #316]	; (800a640 <HAL_DMA_IRQHandler+0x698>)
 800a504:	42ab      	cmp	r3, r5
 800a506:	bf18      	it	ne
 800a508:	4293      	cmpne	r3, r2
 800a50a:	f105 0514 	add.w	r5, r5, #20
 800a50e:	bf0c      	ite	eq
 800a510:	2201      	moveq	r2, #1
 800a512:	2200      	movne	r2, #0
 800a514:	42ab      	cmp	r3, r5
 800a516:	bf08      	it	eq
 800a518:	f042 0201 	orreq.w	r2, r2, #1
 800a51c:	3514      	adds	r5, #20
 800a51e:	42ab      	cmp	r3, r5
 800a520:	bf08      	it	eq
 800a522:	f042 0201 	orreq.w	r2, r2, #1
 800a526:	3514      	adds	r5, #20
 800a528:	42ab      	cmp	r3, r5
 800a52a:	bf08      	it	eq
 800a52c:	f042 0201 	orreq.w	r2, r2, #1
 800a530:	3514      	adds	r5, #20
 800a532:	42ab      	cmp	r3, r5
 800a534:	bf08      	it	eq
 800a536:	f042 0201 	orreq.w	r2, r2, #1
 800a53a:	3514      	adds	r5, #20
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	bf08      	it	eq
 800a540:	f042 0201 	orreq.w	r2, r2, #1
 800a544:	b912      	cbnz	r2, 800a54c <HAL_DMA_IRQHandler+0x5a4>
 800a546:	4a3f      	ldr	r2, [pc, #252]	; (800a644 <HAL_DMA_IRQHandler+0x69c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d1a6      	bne.n	800a49a <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a54c:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800a550:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a552:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a554:	f005 051f 	and.w	r5, r5, #31
 800a558:	40ae      	lsls	r6, r5
 800a55a:	420e      	tst	r6, r1
 800a55c:	d019      	beq.n	800a592 <HAL_DMA_IRQHandler+0x5ea>
 800a55e:	0757      	lsls	r7, r2, #29
 800a560:	d517      	bpl.n	800a592 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a562:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a564:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a566:	d54b      	bpl.n	800a600 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a568:	03d1      	lsls	r1, r2, #15
 800a56a:	d44f      	bmi.n	800a60c <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a56c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a570:	2b00      	cmp	r3, #0
 800a572:	f47f af02 	bne.w	800a37a <HAL_DMA_IRQHandler+0x3d2>
 800a576:	e790      	b.n	800a49a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a578:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a57a:	2210      	movs	r2, #16
 800a57c:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a580:	ea17 0f0c 	tst.w	r7, ip
 800a584:	f43f ae5c 	beq.w	800a240 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	0752      	lsls	r2, r2, #29
 800a58c:	f57f ae58 	bpl.w	800a240 <HAL_DMA_IRQHandler+0x298>
 800a590:	e634      	b.n	800a1fc <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a592:	2602      	movs	r6, #2
 800a594:	40ae      	lsls	r6, r5
 800a596:	420e      	tst	r6, r1
 800a598:	d011      	beq.n	800a5be <HAL_DMA_IRQHandler+0x616>
 800a59a:	0797      	lsls	r7, r2, #30
 800a59c:	d50f      	bpl.n	800a5be <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a59e:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5a0:	0414      	lsls	r4, r2, #16
 800a5a2:	d539      	bpl.n	800a618 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a5a4:	03d0      	lsls	r0, r2, #15
 800a5a6:	d443      	bmi.n	800a630 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 800a5a8:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f47f aee4 	bne.w	800a37a <HAL_DMA_IRQHandler+0x3d2>
 800a5b2:	e772      	b.n	800a49a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a5b4:	6813      	ldr	r3, [r2, #0]
 800a5b6:	079f      	lsls	r7, r3, #30
 800a5b8:	f57f aeb1 	bpl.w	800a31e <HAL_DMA_IRQHandler+0x376>
 800a5bc:	e69b      	b.n	800a2f6 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a5be:	2608      	movs	r6, #8
 800a5c0:	40ae      	lsls	r6, r5
 800a5c2:	420e      	tst	r6, r1
 800a5c4:	f43f af69 	beq.w	800a49a <HAL_DMA_IRQHandler+0x4f2>
 800a5c8:	0711      	lsls	r1, r2, #28
 800a5ca:	f57f af66 	bpl.w	800a49a <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a5ce:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a5d0:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a5d2:	f022 020e 	bic.w	r2, r2, #14
 800a5d6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a5d8:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800a5da:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a5de:	fa03 f505 	lsl.w	r5, r3, r5
 800a5e2:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a5e4:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800a5e8:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a5ec:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	f43f af52 	beq.w	800a49a <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800a5f6:	4648      	mov	r0, r9
}
 800a5f8:	b003      	add	sp, #12
 800a5fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800a5fe:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a600:	0692      	lsls	r2, r2, #26
 800a602:	d403      	bmi.n	800a60c <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a60c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a610:	2b00      	cmp	r3, #0
 800a612:	f47f aeb2 	bne.w	800a37a <HAL_DMA_IRQHandler+0x3d2>
 800a616:	e740      	b.n	800a49a <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a618:	f012 0220 	ands.w	r2, r2, #32
 800a61c:	d108      	bne.n	800a630 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a61e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a620:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a622:	f021 010a 	bic.w	r1, r1, #10
 800a626:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a628:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a62c:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800a630:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800a634:	2b00      	cmp	r3, #0
 800a636:	f47f aea0 	bne.w	800a37a <HAL_DMA_IRQHandler+0x3d2>
 800a63a:	e72e      	b.n	800a49a <HAL_DMA_IRQHandler+0x4f2>
 800a63c:	58025408 	.word	0x58025408
 800a640:	5802541c 	.word	0x5802541c
 800a644:	58025494 	.word	0x58025494

0800a648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a64c:	680c      	ldr	r4, [r1, #0]
{
 800a64e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a650:	2c00      	cmp	r4, #0
 800a652:	f000 80a6 	beq.w	800a7a2 <HAL_GPIO_Init+0x15a>
 800a656:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a65a:	4f8e      	ldr	r7, [pc, #568]	; (800a894 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 800a65c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a65e:	2201      	movs	r2, #1
 800a660:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800a662:	ea12 0e04 	ands.w	lr, r2, r4
 800a666:	f000 8095 	beq.w	800a794 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a66a:	684d      	ldr	r5, [r1, #4]
 800a66c:	f005 0903 	and.w	r9, r5, #3
 800a670:	f109 36ff 	add.w	r6, r9, #4294967295
 800a674:	2e01      	cmp	r6, #1
 800a676:	f240 8097 	bls.w	800a7a8 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a67a:	f1b9 0f03 	cmp.w	r9, #3
 800a67e:	f040 80d1 	bne.w	800a824 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a682:	fa09 f20c 	lsl.w	r2, r9, ip
 800a686:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800a68a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a68c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a690:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a694:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 800a698:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a69a:	d07b      	beq.n	800a794 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a69c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800a6a0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6a4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6a8:	f042 0202 	orr.w	r2, r2, #2
 800a6ac:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6b0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6b4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a6b8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800a6bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800a6c0:	f002 0202 	and.w	r2, r2, #2
 800a6c4:	9201      	str	r2, [sp, #4]
 800a6c6:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6c8:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800a6ca:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6ce:	fa02 f209 	lsl.w	r2, r2, r9
 800a6d2:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a6d6:	4e70      	ldr	r6, [pc, #448]	; (800a898 <HAL_GPIO_Init+0x250>)
 800a6d8:	42b0      	cmp	r0, r6
 800a6da:	d029      	beq.n	800a730 <HAL_GPIO_Init+0xe8>
 800a6dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a6e0:	42b0      	cmp	r0, r6
 800a6e2:	f000 80ac 	beq.w	800a83e <HAL_GPIO_Init+0x1f6>
 800a6e6:	4e6d      	ldr	r6, [pc, #436]	; (800a89c <HAL_GPIO_Init+0x254>)
 800a6e8:	42b0      	cmp	r0, r6
 800a6ea:	f000 80ae 	beq.w	800a84a <HAL_GPIO_Init+0x202>
 800a6ee:	4e6c      	ldr	r6, [pc, #432]	; (800a8a0 <HAL_GPIO_Init+0x258>)
 800a6f0:	42b0      	cmp	r0, r6
 800a6f2:	f000 809e 	beq.w	800a832 <HAL_GPIO_Init+0x1ea>
 800a6f6:	4e6b      	ldr	r6, [pc, #428]	; (800a8a4 <HAL_GPIO_Init+0x25c>)
 800a6f8:	42b0      	cmp	r0, r6
 800a6fa:	f000 80b2 	beq.w	800a862 <HAL_GPIO_Init+0x21a>
 800a6fe:	4e6a      	ldr	r6, [pc, #424]	; (800a8a8 <HAL_GPIO_Init+0x260>)
 800a700:	42b0      	cmp	r0, r6
 800a702:	f000 80b4 	beq.w	800a86e <HAL_GPIO_Init+0x226>
 800a706:	4e69      	ldr	r6, [pc, #420]	; (800a8ac <HAL_GPIO_Init+0x264>)
 800a708:	42b0      	cmp	r0, r6
 800a70a:	f000 80a4 	beq.w	800a856 <HAL_GPIO_Init+0x20e>
 800a70e:	4e68      	ldr	r6, [pc, #416]	; (800a8b0 <HAL_GPIO_Init+0x268>)
 800a710:	42b0      	cmp	r0, r6
 800a712:	f000 80b2 	beq.w	800a87a <HAL_GPIO_Init+0x232>
 800a716:	4e67      	ldr	r6, [pc, #412]	; (800a8b4 <HAL_GPIO_Init+0x26c>)
 800a718:	42b0      	cmp	r0, r6
 800a71a:	f000 80b4 	beq.w	800a886 <HAL_GPIO_Init+0x23e>
 800a71e:	4e66      	ldr	r6, [pc, #408]	; (800a8b8 <HAL_GPIO_Init+0x270>)
 800a720:	42b0      	cmp	r0, r6
 800a722:	bf0c      	ite	eq
 800a724:	2609      	moveq	r6, #9
 800a726:	260a      	movne	r6, #10
 800a728:	fa06 f909 	lsl.w	r9, r6, r9
 800a72c:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a730:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a738:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800a73a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 800a73e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800a740:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a744:	bf54      	ite	pl
 800a746:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800a74a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 800a74e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a750:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800a752:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800a754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a758:	bf54      	ite	pl
 800a75a:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800a75e:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 800a762:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a764:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a768:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a76a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a76e:	bf54      	ite	pl
 800a770:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800a774:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a778:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a77a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800a77e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800a782:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800a786:	bf54      	ite	pl
 800a788:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800a78c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800a790:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 800a794:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a796:	f10c 0c02 	add.w	ip, ip, #2
 800a79a:	fa34 f203 	lsrs.w	r2, r4, r3
 800a79e:	f47f af5e 	bne.w	800a65e <HAL_GPIO_Init+0x16>
  }
}
 800a7a2:	b003      	add	sp, #12
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7a8:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800a7ac:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7ae:	fa08 f80c 	lsl.w	r8, r8, ip
 800a7b2:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7b6:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7b8:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7bc:	fa06 f60c 	lsl.w	r6, r6, ip
 800a7c0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800a7c4:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7c6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800a7ca:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7ce:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7d0:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7d4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800a7d6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800a7d8:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7da:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7de:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a7e0:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7e4:	fa06 f60c 	lsl.w	r6, r6, ip
 800a7e8:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800a7ec:	fa09 f20c 	lsl.w	r2, r9, ip
 800a7f0:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7f2:	f47f af4a 	bne.w	800a68a <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a7f6:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800a7fa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a7fe:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800a802:	260f      	movs	r6, #15
 800a804:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a808:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 800a80c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a810:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a814:	690e      	ldr	r6, [r1, #16]
 800a816:	fa06 f60b 	lsl.w	r6, r6, fp
 800a81a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a81e:	f8c9 6020 	str.w	r6, [r9, #32]
 800a822:	e732      	b.n	800a68a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a824:	f04f 0803 	mov.w	r8, #3
 800a828:	fa08 f80c 	lsl.w	r8, r8, ip
 800a82c:	ea6f 0808 	mvn.w	r8, r8
 800a830:	e7d2      	b.n	800a7d8 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a832:	2603      	movs	r6, #3
 800a834:	fa06 f909 	lsl.w	r9, r6, r9
 800a838:	ea42 0209 	orr.w	r2, r2, r9
 800a83c:	e778      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a83e:	2601      	movs	r6, #1
 800a840:	fa06 f909 	lsl.w	r9, r6, r9
 800a844:	ea42 0209 	orr.w	r2, r2, r9
 800a848:	e772      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a84a:	2602      	movs	r6, #2
 800a84c:	fa06 f909 	lsl.w	r9, r6, r9
 800a850:	ea42 0209 	orr.w	r2, r2, r9
 800a854:	e76c      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a856:	2606      	movs	r6, #6
 800a858:	fa06 f909 	lsl.w	r9, r6, r9
 800a85c:	ea42 0209 	orr.w	r2, r2, r9
 800a860:	e766      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a862:	2604      	movs	r6, #4
 800a864:	fa06 f909 	lsl.w	r9, r6, r9
 800a868:	ea42 0209 	orr.w	r2, r2, r9
 800a86c:	e760      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a86e:	2605      	movs	r6, #5
 800a870:	fa06 f909 	lsl.w	r9, r6, r9
 800a874:	ea42 0209 	orr.w	r2, r2, r9
 800a878:	e75a      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a87a:	2607      	movs	r6, #7
 800a87c:	fa06 f909 	lsl.w	r9, r6, r9
 800a880:	ea42 0209 	orr.w	r2, r2, r9
 800a884:	e754      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a886:	2608      	movs	r6, #8
 800a888:	fa06 f909 	lsl.w	r9, r6, r9
 800a88c:	ea42 0209 	orr.w	r2, r2, r9
 800a890:	e74e      	b.n	800a730 <HAL_GPIO_Init+0xe8>
 800a892:	bf00      	nop
 800a894:	58024400 	.word	0x58024400
 800a898:	58020000 	.word	0x58020000
 800a89c:	58020800 	.word	0x58020800
 800a8a0:	58020c00 	.word	0x58020c00
 800a8a4:	58021000 	.word	0x58021000
 800a8a8:	58021400 	.word	0x58021400
 800a8ac:	58021800 	.word	0x58021800
 800a8b0:	58021c00 	.word	0x58021c00
 800a8b4:	58022000 	.word	0x58022000
 800a8b8:	58022400 	.word	0x58022400

0800a8bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a8bc:	6903      	ldr	r3, [r0, #16]
 800a8be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a8c0:	bf14      	ite	ne
 800a8c2:	2001      	movne	r0, #1
 800a8c4:	2000      	moveq	r0, #0
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8c8:	b902      	cbnz	r2, 800a8cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a8ca:	0409      	lsls	r1, r1, #16
 800a8cc:	6181      	str	r1, [r0, #24]
  }
}
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a8d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8d4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800a8d8:	4201      	tst	r1, r0
 800a8da:	d100      	bne.n	800a8de <HAL_GPIO_EXTI_IRQHandler+0xe>
 800a8dc:	4770      	bx	lr
{
 800a8de:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a8e0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a8e4:	f7f7 ff1c 	bl	8002720 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a8e8:	bd08      	pop	{r3, pc}
 800a8ea:	bf00      	nop

0800a8ec <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d05e      	beq.n	800a9ae <HAL_LPTIM_Init+0xc2>
{
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800a8f2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d051      	beq.n	800a9a4 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a900:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a902:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a904:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a908:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a90c:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 800a90e:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a910:	d03c      	beq.n	800a98c <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a912:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800a916:	d039      	beq.n	800a98c <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a91e:	429a      	cmp	r2, r3
 800a920:	d003      	beq.n	800a92a <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a922:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800a926:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a92a:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 800a92c:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a92e:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 800a930:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800a932:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a934:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a936:	4e22      	ldr	r6, [pc, #136]	; (800a9c0 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 800a938:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a93a:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a93c:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800a93e:	b1ed      	cbz	r5, 800a97c <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a940:	2d01      	cmp	r5, #1
 800a942:	d11f      	bne.n	800a984 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800a944:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800a948:	4328      	orrs	r0, r5
 800a94a:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a94c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a950:	4282      	cmp	r2, r0
 800a952:	d004      	beq.n	800a95e <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a954:	69a0      	ldr	r0, [r4, #24]
 800a956:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 800a958:	69e0      	ldr	r0, [r4, #28]
 800a95a:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a95c:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800a95e:	4a19      	ldr	r2, [pc, #100]	; (800a9c4 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 800a960:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800a962:	4291      	cmp	r1, r2
 800a964:	d015      	beq.n	800a992 <HAL_LPTIM_Init+0xa6>
 800a966:	4b18      	ldr	r3, [pc, #96]	; (800a9c8 <HAL_LPTIM_Init+0xdc>)
 800a968:	4299      	cmp	r1, r3
 800a96a:	d012      	beq.n	800a992 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800a96c:	4b17      	ldr	r3, [pc, #92]	; (800a9cc <HAL_LPTIM_Init+0xe0>)
 800a96e:	4299      	cmp	r1, r3
 800a970:	d01f      	beq.n	800a9b2 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a972:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800a974:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a976:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800a97c:	69e0      	ldr	r0, [r4, #28]
 800a97e:	6925      	ldr	r5, [r4, #16]
 800a980:	4328      	orrs	r0, r5
 800a982:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a984:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800a988:	d1e0      	bne.n	800a94c <HAL_LPTIM_Init+0x60>
 800a98a:	e7db      	b.n	800a944 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800a98c:	f020 001e 	bic.w	r0, r0, #30
 800a990:	e7c2      	b.n	800a918 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a992:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800a996:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a998:	4313      	orrs	r3, r2
 800a99a:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800a9a4:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 800a9a8:	f7fc fafa 	bl	8006fa0 <HAL_LPTIM_MspInit>
 800a9ac:	e7a8      	b.n	800a900 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 800a9ae:	2001      	movs	r0, #1
}
 800a9b0:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800a9b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a9b4:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800a9b6:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c0:	ff19f1fe 	.word	0xff19f1fe
 800a9c4:	40002400 	.word	0x40002400
 800a9c8:	58002400 	.word	0x58002400
 800a9cc:	58002800 	.word	0x58002800

0800a9d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9d2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f000 8088 	beq.w	800aaea <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a9da:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800a9de:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800a9e0:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a9e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d079      	beq.n	800aade <HAL_PCD_Init+0x10e>
 800a9ea:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9ec:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9ee:	462e      	mov	r6, r5
 800a9f0:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9f2:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a9f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9f8:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a9fa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800a9fe:	bf08      	it	eq
 800aa00:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 800aa02:	f003 ff8f 	bl	800e924 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa06:	f856 eb10 	ldr.w	lr, [r6], #16
 800aa0a:	46b4      	mov	ip, r6
 800aa0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa18:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800aa1c:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa20:	4670      	mov	r0, lr
 800aa22:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aa26:	f003 fedb 	bl	800e7e0 <USB_CoreInit>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	b130      	cbz	r0, 800aa3c <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800aa2e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa30:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800aa32:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa34:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 800aa38:	b00b      	add	sp, #44	; 0x2c
 800aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	6828      	ldr	r0, [r5, #0]
 800aa40:	f003 ff78 	bl	800e934 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa44:	6868      	ldr	r0, [r5, #4]
 800aa46:	b358      	cbz	r0, 800aaa0 <HAL_PCD_Init+0xd0>
 800aa48:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800aa4a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa4e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800aa50:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa54:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800aa58:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa64:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800aa68:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa6c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa6e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa72:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa74:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa78:	d3ea      	bcc.n	800aa50 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa80:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800aa82:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800aa86:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800aa8c:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa90:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aa92:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa96:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa9a:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa9e:	d3ed      	bcc.n	800aa7c <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aaa0:	466c      	mov	r4, sp
 800aaa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aaa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aaa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaaa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aaae:	e884 0003 	stmia.w	r4, {r0, r1}
 800aab2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aab6:	6828      	ldr	r0, [r5, #0]
 800aab8:	f003 ff72 	bl	800e9a0 <USB_DevInit>
 800aabc:	4604      	mov	r4, r0
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d1b5      	bne.n	800aa2e <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800aac2:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800aac4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800aac6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800aaca:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800aacc:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 800aad0:	d00f      	beq.n	800aaf2 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800aad2:	6828      	ldr	r0, [r5, #0]
 800aad4:	f004 f878 	bl	800ebc8 <USB_DevDisconnect>
}
 800aad8:	4620      	mov	r0, r4
 800aada:	b00b      	add	sp, #44	; 0x2c
 800aadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800aade:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 800aae2:	f7fc fbdd 	bl	80072a0 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800aae6:	6828      	ldr	r0, [r5, #0]
 800aae8:	e780      	b.n	800a9ec <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800aaea:	2401      	movs	r4, #1
}
 800aaec:	4620      	mov	r0, r4
 800aaee:	b00b      	add	sp, #44	; 0x2c
 800aaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f802 	bl	800aafc <HAL_PCDEx_ActivateLPM>
 800aaf8:	e7eb      	b.n	800aad2 <HAL_PCD_Init+0x102>
 800aafa:	bf00      	nop

0800aafc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aafc:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800aafe:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ab02:	4909      	ldr	r1, [pc, #36]	; (800ab28 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab04:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800ab06:	4660      	mov	r0, ip
{
 800ab08:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800ab0a:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800ab0c:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 800ab10:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ab14:	6993      	ldr	r3, [r2, #24]
}
 800ab16:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ab1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab1e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ab20:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ab22:	4319      	orrs	r1, r3
 800ab24:	6551      	str	r1, [r2, #84]	; 0x54
}
 800ab26:	4770      	bx	lr
 800ab28:	10000003 	.word	0x10000003

0800ab2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ab2c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab2e:	4c10      	ldr	r4, [pc, #64]	; (800ab70 <HAL_PWREx_ConfigSupply+0x44>)
 800ab30:	68e3      	ldr	r3, [r4, #12]
 800ab32:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab36:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab38:	d105      	bne.n	800ab46 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab3a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ab3e:	1a18      	subs	r0, r3, r0
 800ab40:	bf18      	it	ne
 800ab42:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ab46:	f023 0307 	bic.w	r3, r3, #7
 800ab4a:	4318      	orrs	r0, r3
 800ab4c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800ab4e:	f7fc fe11 	bl	8007774 <HAL_GetTick>
 800ab52:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ab54:	e005      	b.n	800ab62 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ab56:	f7fc fe0d 	bl	8007774 <HAL_GetTick>
 800ab5a:	1b40      	subs	r0, r0, r5
 800ab5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab60:	d804      	bhi.n	800ab6c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	049b      	lsls	r3, r3, #18
 800ab66:	d5f6      	bpl.n	800ab56 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800ab68:	2000      	movs	r0, #0
}
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800ab6c:	2001      	movs	r0, #1
}
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	58024800 	.word	0x58024800

0800ab74 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ab74:	4a02      	ldr	r2, [pc, #8]	; (800ab80 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800ab76:	68d3      	ldr	r3, [r2, #12]
 800ab78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab7c:	60d3      	str	r3, [r2, #12]
}
 800ab7e:	4770      	bx	lr
 800ab80:	58024800 	.word	0x58024800

0800ab84 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab84:	4b3b      	ldr	r3, [pc, #236]	; (800ac74 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800ab86:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ab8a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab8c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800ab8e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab92:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ab94:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800ab98:	d038      	beq.n	800ac0c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab9a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab9e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aba2:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aba6:	fb05 f101 	mul.w	r1, r5, r1
 800abaa:	2a01      	cmp	r2, #1
 800abac:	ee07 1a90 	vmov	s15, r1
 800abb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800abb4:	d002      	beq.n	800abbc <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800abb6:	2a02      	cmp	r2, #2
 800abb8:	d04e      	beq.n	800ac58 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800abba:	b34a      	cbz	r2, 800ac10 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abbc:	ee07 0a90 	vmov	s15, r0
 800abc0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ac78 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800abc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800abce:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ac7c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800abd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd6:	ee06 3a90 	vmov	s13, r3
 800abda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800abde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800abe2:	ee76 6a85 	vadd.f32	s13, s13, s10
 800abe6:	eee7 6a25 	vfma.f32	s13, s14, s11
 800abea:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800abee:	4b21      	ldr	r3, [pc, #132]	; (800ac74 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800abf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800abf6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800abf8:	ee07 3a90 	vmov	s15, r3
 800abfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac08:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800ac0c:	bc30      	pop	{r4, r5}
 800ac0e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	0692      	lsls	r2, r2, #26
 800ac14:	d527      	bpl.n	800ac66 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac16:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac18:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac1c:	4a18      	ldr	r2, [pc, #96]	; (800ac80 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ac22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac24:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac2c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ac7c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac34:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac36:	ee06 3a90 	vmov	s13, r3
 800ac3a:	ee05 2a90 	vmov	s11, r2
 800ac3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ac42:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ac46:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ac4a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800ac4e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800ac52:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ac56:	e7ca      	b.n	800abee <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac58:	ee07 0a90 	vmov	s15, r0
 800ac5c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ac84 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800ac60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac64:	e7b0      	b.n	800abc8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac66:	ee07 0a90 	vmov	s15, r0
 800ac6a:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ac88 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800ac6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac72:	e7a9      	b.n	800abc8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800ac74:	58024400 	.word	0x58024400
 800ac78:	4a742400 	.word	0x4a742400
 800ac7c:	39000000 	.word	0x39000000
 800ac80:	03d09000 	.word	0x03d09000
 800ac84:	4bbebc20 	.word	0x4bbebc20
 800ac88:	4c742400 	.word	0x4c742400

0800ac8c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f000 81e8 	beq.w	800b062 <HAL_RCC_OscConfig+0x3d6>
{
 800ac92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac94:	6803      	ldr	r3, [r0, #0]
 800ac96:	4604      	mov	r4, r0
 800ac98:	07d9      	lsls	r1, r3, #31
 800ac9a:	d52e      	bpl.n	800acfa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac9c:	49a4      	ldr	r1, [pc, #656]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800ac9e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aca0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aca2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aca6:	2a10      	cmp	r2, #16
 800aca8:	f000 8107 	beq.w	800aeba <HAL_RCC_OscConfig+0x22e>
 800acac:	2a18      	cmp	r2, #24
 800acae:	f000 80ff 	beq.w	800aeb0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb8:	f000 812a 	beq.w	800af10 <HAL_RCC_OscConfig+0x284>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8168 	beq.w	800af92 <HAL_RCC_OscConfig+0x306>
 800acc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acc6:	4b9a      	ldr	r3, [pc, #616]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	f000 8289 	beq.w	800b1e0 <HAL_RCC_OscConfig+0x554>
 800acce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800acdc:	f7fc fd4a 	bl	8007774 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ace0:	4e93      	ldr	r6, [pc, #588]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800ace2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ace4:	e005      	b.n	800acf2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ace6:	f7fc fd45 	bl	8007774 <HAL_GetTick>
 800acea:	1b40      	subs	r0, r0, r5
 800acec:	2864      	cmp	r0, #100	; 0x64
 800acee:	f200 814e 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acf2:	6833      	ldr	r3, [r6, #0]
 800acf4:	039b      	lsls	r3, r3, #14
 800acf6:	d5f6      	bpl.n	800ace6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	079d      	lsls	r5, r3, #30
 800acfc:	f100 808a 	bmi.w	800ae14 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ad00:	06d9      	lsls	r1, r3, #27
 800ad02:	d533      	bpl.n	800ad6c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad04:	4a8a      	ldr	r2, [pc, #552]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800ad06:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad08:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad0e:	2b08      	cmp	r3, #8
 800ad10:	f000 80e3 	beq.w	800aeda <HAL_RCC_OscConfig+0x24e>
 800ad14:	2b18      	cmp	r3, #24
 800ad16:	f000 80db 	beq.w	800aed0 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ad1a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800ad1c:	4d84      	ldr	r5, [pc, #528]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 816f 	beq.w	800b002 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ad2c:	f7fc fd22 	bl	8007774 <HAL_GetTick>
 800ad30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad32:	e005      	b.n	800ad40 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad34:	f7fc fd1e 	bl	8007774 <HAL_GetTick>
 800ad38:	1b80      	subs	r0, r0, r6
 800ad3a:	2802      	cmp	r0, #2
 800ad3c:	f200 8127 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	05db      	lsls	r3, r3, #23
 800ad44:	d5f6      	bpl.n	800ad34 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad46:	f7fc fd2d 	bl	80077a4 <HAL_GetREVID>
 800ad4a:	f241 0303 	movw	r3, #4099	; 0x1003
 800ad4e:	4298      	cmp	r0, r3
 800ad50:	f200 826d 	bhi.w	800b22e <HAL_RCC_OscConfig+0x5a2>
 800ad54:	6a22      	ldr	r2, [r4, #32]
 800ad56:	686b      	ldr	r3, [r5, #4]
 800ad58:	2a20      	cmp	r2, #32
 800ad5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad5e:	bf0c      	ite	eq
 800ad60:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800ad64:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800ad68:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	071d      	lsls	r5, r3, #28
 800ad6e:	d516      	bpl.n	800ad9e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ad70:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800ad72:	4d6f      	ldr	r5, [pc, #444]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8122 	beq.w	800afbe <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800ad7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ad7c:	f043 0301 	orr.w	r3, r3, #1
 800ad80:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ad82:	f7fc fcf7 	bl	8007774 <HAL_GetTick>
 800ad86:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad88:	e005      	b.n	800ad96 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad8a:	f7fc fcf3 	bl	8007774 <HAL_GetTick>
 800ad8e:	1b80      	subs	r0, r0, r6
 800ad90:	2802      	cmp	r0, #2
 800ad92:	f200 80fc 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ad98:	0798      	lsls	r0, r3, #30
 800ad9a:	d5f6      	bpl.n	800ad8a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	069a      	lsls	r2, r3, #26
 800ada0:	d516      	bpl.n	800add0 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ada2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800ada4:	4d62      	ldr	r5, [pc, #392]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 811a 	beq.w	800afe0 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800adb4:	f7fc fcde 	bl	8007774 <HAL_GetTick>
 800adb8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adba:	e005      	b.n	800adc8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adbc:	f7fc fcda 	bl	8007774 <HAL_GetTick>
 800adc0:	1b80      	subs	r0, r0, r6
 800adc2:	2802      	cmp	r0, #2
 800adc4:	f200 80e3 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	049f      	lsls	r7, r3, #18
 800adcc:	d5f6      	bpl.n	800adbc <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	0759      	lsls	r1, r3, #29
 800add2:	f100 80a3 	bmi.w	800af1c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800add6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800add8:	b1d0      	cbz	r0, 800ae10 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800adda:	4d55      	ldr	r5, [pc, #340]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800addc:	692b      	ldr	r3, [r5, #16]
 800adde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ade2:	2b18      	cmp	r3, #24
 800ade4:	f000 81ae 	beq.w	800b144 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800ade8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800adec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adf0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adf2:	f000 8142 	beq.w	800b07a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800adf6:	f7fc fcbd 	bl	8007774 <HAL_GetTick>
 800adfa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adfc:	e005      	b.n	800ae0a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adfe:	f7fc fcb9 	bl	8007774 <HAL_GetTick>
 800ae02:	1b00      	subs	r0, r0, r4
 800ae04:	2802      	cmp	r0, #2
 800ae06:	f200 80c2 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	019b      	lsls	r3, r3, #6
 800ae0e:	d4f6      	bmi.n	800adfe <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800ae10:	2000      	movs	r0, #0
}
 800ae12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae14:	4a46      	ldr	r2, [pc, #280]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800ae16:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae18:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ae1a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800ae1e:	d12d      	bne.n	800ae7c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae20:	4b43      	ldr	r3, [pc, #268]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800ae22:	68e2      	ldr	r2, [r4, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	0759      	lsls	r1, r3, #29
 800ae28:	d501      	bpl.n	800ae2e <HAL_RCC_OscConfig+0x1a2>
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	d04e      	beq.n	800aecc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae2e:	4d40      	ldr	r5, [pc, #256]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	f023 0319 	bic.w	r3, r3, #25
 800ae36:	4313      	orrs	r3, r2
 800ae38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ae3a:	f7fc fc9b 	bl	8007774 <HAL_GetTick>
 800ae3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae40:	e005      	b.n	800ae4e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae42:	f7fc fc97 	bl	8007774 <HAL_GetTick>
 800ae46:	1b80      	subs	r0, r0, r6
 800ae48:	2802      	cmp	r0, #2
 800ae4a:	f200 80a0 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae4e:	682b      	ldr	r3, [r5, #0]
 800ae50:	075b      	lsls	r3, r3, #29
 800ae52:	d5f6      	bpl.n	800ae42 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae54:	f7fc fca6 	bl	80077a4 <HAL_GetREVID>
 800ae58:	f241 0303 	movw	r3, #4099	; 0x1003
 800ae5c:	4298      	cmp	r0, r3
 800ae5e:	f200 80f7 	bhi.w	800b050 <HAL_RCC_OscConfig+0x3c4>
 800ae62:	6922      	ldr	r2, [r4, #16]
 800ae64:	686b      	ldr	r3, [r5, #4]
 800ae66:	2a40      	cmp	r2, #64	; 0x40
 800ae68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ae6c:	bf0c      	ite	eq
 800ae6e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800ae72:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800ae76:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	e741      	b.n	800ad00 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ae7c:	2b18      	cmp	r3, #24
 800ae7e:	f000 80e3 	beq.w	800b048 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae82:	4d2b      	ldr	r5, [pc, #172]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae84:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae86:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae88:	2a00      	cmp	r2, #0
 800ae8a:	f000 80cc 	beq.w	800b026 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae8e:	f023 0319 	bic.w	r3, r3, #25
 800ae92:	4313      	orrs	r3, r2
 800ae94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ae96:	f7fc fc6d 	bl	8007774 <HAL_GetTick>
 800ae9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae9c:	e004      	b.n	800aea8 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae9e:	f7fc fc69 	bl	8007774 <HAL_GetTick>
 800aea2:	1b80      	subs	r0, r0, r6
 800aea4:	2802      	cmp	r0, #2
 800aea6:	d872      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	075f      	lsls	r7, r3, #29
 800aeac:	d5f7      	bpl.n	800ae9e <HAL_RCC_OscConfig+0x212>
 800aeae:	e7d1      	b.n	800ae54 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aeb0:	f001 0103 	and.w	r1, r1, #3
 800aeb4:	2902      	cmp	r1, #2
 800aeb6:	f47f aefc 	bne.w	800acb2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeba:	4a1d      	ldr	r2, [pc, #116]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800aebc:	6812      	ldr	r2, [r2, #0]
 800aebe:	0392      	lsls	r2, r2, #14
 800aec0:	f57f af1b 	bpl.w	800acfa <HAL_RCC_OscConfig+0x6e>
 800aec4:	6862      	ldr	r2, [r4, #4]
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	f47f af17 	bne.w	800acfa <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800aecc:	2001      	movs	r0, #1
}
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aed0:	f002 0203 	and.w	r2, r2, #3
 800aed4:	2a01      	cmp	r2, #1
 800aed6:	f47f af20 	bne.w	800ad1a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aeda:	4b15      	ldr	r3, [pc, #84]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	05da      	lsls	r2, r3, #23
 800aee0:	d502      	bpl.n	800aee8 <HAL_RCC_OscConfig+0x25c>
 800aee2:	69e3      	ldr	r3, [r4, #28]
 800aee4:	2b80      	cmp	r3, #128	; 0x80
 800aee6:	d1f1      	bne.n	800aecc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aee8:	f7fc fc5c 	bl	80077a4 <HAL_GetREVID>
 800aeec:	f241 0303 	movw	r3, #4099	; 0x1003
 800aef0:	4298      	cmp	r0, r3
 800aef2:	f200 80b8 	bhi.w	800b066 <HAL_RCC_OscConfig+0x3da>
 800aef6:	6a22      	ldr	r2, [r4, #32]
 800aef8:	2a20      	cmp	r2, #32
 800aefa:	f000 81a7 	beq.w	800b24c <HAL_RCC_OscConfig+0x5c0>
 800aefe:	490c      	ldr	r1, [pc, #48]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800af00:	684b      	ldr	r3, [r1, #4]
 800af02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800af06:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800af0a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	e72d      	b.n	800ad6c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af10:	4a07      	ldr	r2, [pc, #28]	; (800af30 <HAL_RCC_OscConfig+0x2a4>)
 800af12:	6813      	ldr	r3, [r2, #0]
 800af14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af18:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af1a:	e6df      	b.n	800acdc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800af1c:	4d05      	ldr	r5, [pc, #20]	; (800af34 <HAL_RCC_OscConfig+0x2a8>)
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af24:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800af26:	f7fc fc25 	bl	8007774 <HAL_GetTick>
 800af2a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af2c:	e009      	b.n	800af42 <HAL_RCC_OscConfig+0x2b6>
 800af2e:	bf00      	nop
 800af30:	58024400 	.word	0x58024400
 800af34:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af38:	f7fc fc1c 	bl	8007774 <HAL_GetTick>
 800af3c:	1b80      	subs	r0, r0, r6
 800af3e:	2864      	cmp	r0, #100	; 0x64
 800af40:	d825      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	05da      	lsls	r2, r3, #23
 800af46:	d5f7      	bpl.n	800af38 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f000 8178 	beq.w	800b240 <HAL_RCC_OscConfig+0x5b4>
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8153 	beq.w	800b1fc <HAL_RCC_OscConfig+0x570>
 800af56:	2b05      	cmp	r3, #5
 800af58:	4ba5      	ldr	r3, [pc, #660]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
 800af5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af5c:	f000 817f 	beq.w	800b25e <HAL_RCC_OscConfig+0x5d2>
 800af60:	f022 0201 	bic.w	r2, r2, #1
 800af64:	671a      	str	r2, [r3, #112]	; 0x70
 800af66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af68:	f022 0204 	bic.w	r2, r2, #4
 800af6c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800af6e:	f7fc fc01 	bl	8007774 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af72:	4e9f      	ldr	r6, [pc, #636]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af74:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800af78:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af7a:	e004      	b.n	800af86 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af7c:	f7fc fbfa 	bl	8007774 <HAL_GetTick>
 800af80:	1b40      	subs	r0, r0, r5
 800af82:	42b8      	cmp	r0, r7
 800af84:	d803      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af86:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800af88:	079b      	lsls	r3, r3, #30
 800af8a:	d5f7      	bpl.n	800af7c <HAL_RCC_OscConfig+0x2f0>
 800af8c:	e723      	b.n	800add6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800af8e:	2003      	movs	r0, #3
}
 800af90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af92:	4d97      	ldr	r5, [pc, #604]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afa2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800afa4:	f7fc fbe6 	bl	8007774 <HAL_GetTick>
 800afa8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afaa:	e004      	b.n	800afb6 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afac:	f7fc fbe2 	bl	8007774 <HAL_GetTick>
 800afb0:	1b80      	subs	r0, r0, r6
 800afb2:	2864      	cmp	r0, #100	; 0x64
 800afb4:	d8eb      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	039f      	lsls	r7, r3, #14
 800afba:	d4f7      	bmi.n	800afac <HAL_RCC_OscConfig+0x320>
 800afbc:	e69c      	b.n	800acf8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800afbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800afc0:	f023 0301 	bic.w	r3, r3, #1
 800afc4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800afc6:	f7fc fbd5 	bl	8007774 <HAL_GetTick>
 800afca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800afcc:	e004      	b.n	800afd8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afce:	f7fc fbd1 	bl	8007774 <HAL_GetTick>
 800afd2:	1b80      	subs	r0, r0, r6
 800afd4:	2802      	cmp	r0, #2
 800afd6:	d8da      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800afd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800afda:	0799      	lsls	r1, r3, #30
 800afdc:	d4f7      	bmi.n	800afce <HAL_RCC_OscConfig+0x342>
 800afde:	e6dd      	b.n	800ad9c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800afe8:	f7fc fbc4 	bl	8007774 <HAL_GetTick>
 800afec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800afee:	e004      	b.n	800affa <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aff0:	f7fc fbc0 	bl	8007774 <HAL_GetTick>
 800aff4:	1b80      	subs	r0, r0, r6
 800aff6:	2802      	cmp	r0, #2
 800aff8:	d8c9      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	0498      	lsls	r0, r3, #18
 800affe:	d4f7      	bmi.n	800aff0 <HAL_RCC_OscConfig+0x364>
 800b000:	e6e5      	b.n	800adce <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b008:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b00a:	f7fc fbb3 	bl	8007774 <HAL_GetTick>
 800b00e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b010:	e004      	b.n	800b01c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b012:	f7fc fbaf 	bl	8007774 <HAL_GetTick>
 800b016:	1b80      	subs	r0, r0, r6
 800b018:	2802      	cmp	r0, #2
 800b01a:	d8b8      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	05df      	lsls	r7, r3, #23
 800b020:	d4f7      	bmi.n	800b012 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	e6a2      	b.n	800ad6c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800b026:	f023 0301 	bic.w	r3, r3, #1
 800b02a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b02c:	f7fc fba2 	bl	8007774 <HAL_GetTick>
 800b030:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b032:	e004      	b.n	800b03e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b034:	f7fc fb9e 	bl	8007774 <HAL_GetTick>
 800b038:	1b80      	subs	r0, r0, r6
 800b03a:	2802      	cmp	r0, #2
 800b03c:	d8a7      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	0758      	lsls	r0, r3, #29
 800b042:	d4f7      	bmi.n	800b034 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	e65b      	b.n	800ad00 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b048:	0790      	lsls	r0, r2, #30
 800b04a:	f47f af1a 	bne.w	800ae82 <HAL_RCC_OscConfig+0x1f6>
 800b04e:	e6e7      	b.n	800ae20 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b050:	686b      	ldr	r3, [r5, #4]
 800b052:	6922      	ldr	r2, [r4, #16]
 800b054:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b05c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	e64e      	b.n	800ad00 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800b062:	2001      	movs	r0, #1
}
 800b064:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b066:	4a62      	ldr	r2, [pc, #392]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
 800b068:	6a21      	ldr	r1, [r4, #32]
 800b06a:	68d3      	ldr	r3, [r2, #12]
 800b06c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b070:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b074:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	e678      	b.n	800ad6c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800b07a:	f7fc fb7b 	bl	8007774 <HAL_GetTick>
 800b07e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b080:	e004      	b.n	800b08c <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b082:	f7fc fb77 	bl	8007774 <HAL_GetTick>
 800b086:	1b80      	subs	r0, r0, r6
 800b088:	2802      	cmp	r0, #2
 800b08a:	d880      	bhi.n	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	0199      	lsls	r1, r3, #6
 800b090:	d4f7      	bmi.n	800b082 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b092:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b094:	4b57      	ldr	r3, [pc, #348]	; (800b1f4 <HAL_RCC_OscConfig+0x568>)
 800b096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b098:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b09a:	4957      	ldr	r1, [pc, #348]	; (800b1f8 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b09c:	4e54      	ldr	r6, [pc, #336]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b0a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b0a6:	62ab      	str	r3, [r5, #40]	; 0x28
 800b0a8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	3a01      	subs	r2, #1
 800b0b0:	025b      	lsls	r3, r3, #9
 800b0b2:	0412      	lsls	r2, r2, #16
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b0be:	3a01      	subs	r2, #1
 800b0c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b0c8:	3a01      	subs	r2, #1
 800b0ca:	0612      	lsls	r2, r2, #24
 800b0cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b0d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b0d6:	f023 0301 	bic.w	r3, r3, #1
 800b0da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b0de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b0e0:	4011      	ands	r1, r2
 800b0e2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800b0e6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b0e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b0ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b0ec:	f023 030c 	bic.w	r3, r3, #12
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b0f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b0f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b0f8:	f023 0302 	bic.w	r3, r3, #2
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b100:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b106:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b108:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b10a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b110:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b116:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b118:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b11a:	f043 0301 	orr.w	r3, r3, #1
 800b11e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b126:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b128:	f7fc fb24 	bl	8007774 <HAL_GetTick>
 800b12c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b12e:	e005      	b.n	800b13c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b130:	f7fc fb20 	bl	8007774 <HAL_GetTick>
 800b134:	1b00      	subs	r0, r0, r4
 800b136:	2802      	cmp	r0, #2
 800b138:	f63f af29 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b13c:	6833      	ldr	r3, [r6, #0]
 800b13e:	019a      	lsls	r2, r3, #6
 800b140:	d5f6      	bpl.n	800b130 <HAL_RCC_OscConfig+0x4a4>
 800b142:	e665      	b.n	800ae10 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b144:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b146:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b148:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b14a:	f43f ae62 	beq.w	800ae12 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b14e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b152:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b154:	428b      	cmp	r3, r1
 800b156:	f47f aeb9 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b15a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b15e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b160:	429a      	cmp	r2, r3
 800b162:	f47f aeb3 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b168:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800b16c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b16e:	429a      	cmp	r2, r3
 800b170:	f47f aeac 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b176:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800b17a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b17c:	429a      	cmp	r2, r3
 800b17e:	f47f aea5 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b184:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800b188:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f47f ae9e 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b192:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800b196:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b198:	429e      	cmp	r6, r3
 800b19a:	f47f ae97 	bne.w	800aecc <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b19e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b1a2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	f43f ae32 	beq.w	800ae10 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b1ac:	4a10      	ldr	r2, [pc, #64]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
 800b1ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b1b0:	f023 0301 	bic.w	r3, r3, #1
 800b1b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800b1b6:	f7fc fadd 	bl	8007774 <HAL_GetTick>
 800b1ba:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b1bc:	f7fc fada 	bl	8007774 <HAL_GetTick>
 800b1c0:	42a8      	cmp	r0, r5
 800b1c2:	d0fb      	beq.n	800b1bc <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1c4:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800b1c6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <HAL_RCC_OscConfig+0x56c>)
 800b1cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b1ce:	4023      	ands	r3, r4
 800b1d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b1d4:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b1d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b1d8:	f043 0301 	orr.w	r3, r3, #1
 800b1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	e575      	b.n	800acdc <HAL_RCC_OscConfig+0x50>
 800b1f0:	58024400 	.word	0x58024400
 800b1f4:	fffffc0c 	.word	0xfffffc0c
 800b1f8:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1fc:	4d1c      	ldr	r5, [pc, #112]	; (800b270 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1fe:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b202:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	672b      	str	r3, [r5, #112]	; 0x70
 800b20a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b20c:	f023 0304 	bic.w	r3, r3, #4
 800b210:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b212:	f7fc faaf 	bl	8007774 <HAL_GetTick>
 800b216:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b218:	e005      	b.n	800b226 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b21a:	f7fc faab 	bl	8007774 <HAL_GetTick>
 800b21e:	1b80      	subs	r0, r0, r6
 800b220:	42b8      	cmp	r0, r7
 800b222:	f63f aeb4 	bhi.w	800af8e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b226:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b228:	0798      	lsls	r0, r3, #30
 800b22a:	d4f6      	bmi.n	800b21a <HAL_RCC_OscConfig+0x58e>
 800b22c:	e5d3      	b.n	800add6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b22e:	68eb      	ldr	r3, [r5, #12]
 800b230:	6a22      	ldr	r2, [r4, #32]
 800b232:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b236:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b23a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	e595      	b.n	800ad6c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b240:	4a0b      	ldr	r2, [pc, #44]	; (800b270 <HAL_RCC_OscConfig+0x5e4>)
 800b242:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b244:	f043 0301 	orr.w	r3, r3, #1
 800b248:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b24a:	e690      	b.n	800af6e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b24c:	4a08      	ldr	r2, [pc, #32]	; (800b270 <HAL_RCC_OscConfig+0x5e4>)
 800b24e:	6853      	ldr	r3, [r2, #4]
 800b250:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b258:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	e586      	b.n	800ad6c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b25e:	f042 0204 	orr.w	r2, r2, #4
 800b262:	671a      	str	r2, [r3, #112]	; 0x70
 800b264:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b266:	f042 0201 	orr.w	r2, r2, #1
 800b26a:	671a      	str	r2, [r3, #112]	; 0x70
 800b26c:	e67f      	b.n	800af6e <HAL_RCC_OscConfig+0x2e2>
 800b26e:	bf00      	nop
 800b270:	58024400 	.word	0x58024400

0800b274 <HAL_RCC_MCOConfig>:
{
 800b274:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800b276:	4e25      	ldr	r6, [pc, #148]	; (800b30c <HAL_RCC_MCOConfig+0x98>)
{
 800b278:	b088      	sub	sp, #32
 800b27a:	460d      	mov	r5, r1
 800b27c:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800b27e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b282:	b9f8      	cbnz	r0, 800b2c4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b284:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b288:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b28c:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800b28e:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b292:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b296:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800b298:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b29c:	481c      	ldr	r0, [pc, #112]	; (800b310 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b2b0:	f7ff f9ca 	bl	800a648 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b2b4:	6932      	ldr	r2, [r6, #16]
 800b2b6:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800b2ba:	432a      	orrs	r2, r5
 800b2bc:	4322      	orrs	r2, r4
 800b2be:	6132      	str	r2, [r6, #16]
}
 800b2c0:	b008      	add	sp, #32
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b2c4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2cc:	4811      	ldr	r0, [pc, #68]	; (800b314 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800b2ce:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b2d2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2dc:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800b2de:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2f2:	f7ff f9a9 	bl	800a648 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b2f6:	6933      	ldr	r3, [r6, #16]
 800b2f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b2fc:	ea43 0105 	orr.w	r1, r3, r5
 800b300:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800b304:	6131      	str	r1, [r6, #16]
}
 800b306:	b008      	add	sp, #32
 800b308:	bd70      	pop	{r4, r5, r6, pc}
 800b30a:	bf00      	nop
 800b30c:	58024400 	.word	0x58024400
 800b310:	58020000 	.word	0x58020000
 800b314:	58020800 	.word	0x58020800

0800b318 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b318:	4a47      	ldr	r2, [pc, #284]	; (800b438 <HAL_RCC_GetSysClockFreq+0x120>)
 800b31a:	6913      	ldr	r3, [r2, #16]
 800b31c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b320:	2b10      	cmp	r3, #16
 800b322:	d004      	beq.n	800b32e <HAL_RCC_GetSysClockFreq+0x16>
 800b324:	2b18      	cmp	r3, #24
 800b326:	d00d      	beq.n	800b344 <HAL_RCC_GetSysClockFreq+0x2c>
 800b328:	b11b      	cbz	r3, 800b332 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800b32a:	4844      	ldr	r0, [pc, #272]	; (800b43c <HAL_RCC_GetSysClockFreq+0x124>)
 800b32c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b32e:	4844      	ldr	r0, [pc, #272]	; (800b440 <HAL_RCC_GetSysClockFreq+0x128>)
 800b330:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b332:	6813      	ldr	r3, [r2, #0]
 800b334:	0699      	lsls	r1, r3, #26
 800b336:	d54a      	bpl.n	800b3ce <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b338:	6813      	ldr	r3, [r2, #0]
 800b33a:	4842      	ldr	r0, [pc, #264]	; (800b444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b33c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b340:	40d8      	lsrs	r0, r3
 800b342:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b344:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800b346:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b348:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b34a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800b34c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b350:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b352:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b356:	d038      	beq.n	800b3ca <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b358:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b35c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b360:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b364:	fb05 f101 	mul.w	r1, r5, r1
 800b368:	2b01      	cmp	r3, #1
 800b36a:	ee07 1a90 	vmov	s15, r1
 800b36e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800b372:	d002      	beq.n	800b37a <HAL_RCC_GetSysClockFreq+0x62>
 800b374:	2b02      	cmp	r3, #2
 800b376:	d02c      	beq.n	800b3d2 <HAL_RCC_GetSysClockFreq+0xba>
 800b378:	b393      	cbz	r3, 800b3e0 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b37a:	ee07 0a90 	vmov	s15, r0
 800b37e:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b448 <HAL_RCC_GetSysClockFreq+0x130>
 800b382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b386:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b388:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b38c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800b44c <HAL_RCC_GetSysClockFreq+0x134>
 800b390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b394:	ee06 3a90 	vmov	s13, r3
 800b398:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b39c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b3a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b3a4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b3a8:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b3ac:	4b22      	ldr	r3, [pc, #136]	; (800b438 <HAL_RCC_GetSysClockFreq+0x120>)
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b3b4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3c6:	ee17 0a90 	vmov	r0, s15
}
 800b3ca:	bc30      	pop	{r4, r5}
 800b3cc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3ce:	481d      	ldr	r0, [pc, #116]	; (800b444 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800b3d0:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d2:	ee07 0a90 	vmov	s15, r0
 800b3d6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b450 <HAL_RCC_GetSysClockFreq+0x138>
 800b3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3de:	e7d2      	b.n	800b386 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3e0:	6813      	ldr	r3, [r2, #0]
 800b3e2:	069b      	lsls	r3, r3, #26
 800b3e4:	d520      	bpl.n	800b428 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3e6:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ec:	4915      	ldr	r1, [pc, #84]	; (800b444 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b3f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3f4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3fc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800b44c <HAL_RCC_GetSysClockFreq+0x134>
 800b400:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b404:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b406:	ee06 3a90 	vmov	s13, r3
 800b40a:	ee05 1a90 	vmov	s11, r1
 800b40e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b412:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b416:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b41a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b41e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b422:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b426:	e7c1      	b.n	800b3ac <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b428:	ee07 0a90 	vmov	s15, r0
 800b42c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800b454 <HAL_RCC_GetSysClockFreq+0x13c>
 800b430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b434:	e7a7      	b.n	800b386 <HAL_RCC_GetSysClockFreq+0x6e>
 800b436:	bf00      	nop
 800b438:	58024400 	.word	0x58024400
 800b43c:	003d0900 	.word	0x003d0900
 800b440:	017d7840 	.word	0x017d7840
 800b444:	03d09000 	.word	0x03d09000
 800b448:	4a742400 	.word	0x4a742400
 800b44c:	39000000 	.word	0x39000000
 800b450:	4bbebc20 	.word	0x4bbebc20
 800b454:	4c742400 	.word	0x4c742400

0800b458 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b458:	2800      	cmp	r0, #0
 800b45a:	f000 810c 	beq.w	800b676 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b45e:	4a8c      	ldr	r2, [pc, #560]	; (800b690 <HAL_RCC_ClockConfig+0x238>)
 800b460:	6813      	ldr	r3, [r2, #0]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	428b      	cmp	r3, r1
{
 800b468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46c:	4604      	mov	r4, r0
 800b46e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b470:	d20c      	bcs.n	800b48c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b472:	6813      	ldr	r3, [r2, #0]
 800b474:	f023 030f 	bic.w	r3, r3, #15
 800b478:	430b      	orrs	r3, r1
 800b47a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b47c:	6813      	ldr	r3, [r2, #0]
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	428b      	cmp	r3, r1
 800b484:	d002      	beq.n	800b48c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b486:	2001      	movs	r0, #1
}
 800b488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	075f      	lsls	r7, r3, #29
 800b490:	d50b      	bpl.n	800b4aa <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b492:	4980      	ldr	r1, [pc, #512]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b494:	6920      	ldr	r0, [r4, #16]
 800b496:	698a      	ldr	r2, [r1, #24]
 800b498:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b49c:	4290      	cmp	r0, r2
 800b49e:	d904      	bls.n	800b4aa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b4a0:	698a      	ldr	r2, [r1, #24]
 800b4a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b4a6:	4302      	orrs	r2, r0
 800b4a8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4aa:	071e      	lsls	r6, r3, #28
 800b4ac:	d50b      	bpl.n	800b4c6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4ae:	4979      	ldr	r1, [pc, #484]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b4b0:	6960      	ldr	r0, [r4, #20]
 800b4b2:	69ca      	ldr	r2, [r1, #28]
 800b4b4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b4b8:	4290      	cmp	r0, r2
 800b4ba:	d904      	bls.n	800b4c6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4bc:	69ca      	ldr	r2, [r1, #28]
 800b4be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b4c2:	4302      	orrs	r2, r0
 800b4c4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c6:	06d8      	lsls	r0, r3, #27
 800b4c8:	d50b      	bpl.n	800b4e2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4ca:	4972      	ldr	r1, [pc, #456]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b4cc:	69a0      	ldr	r0, [r4, #24]
 800b4ce:	69ca      	ldr	r2, [r1, #28]
 800b4d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b4d4:	4290      	cmp	r0, r2
 800b4d6:	d904      	bls.n	800b4e2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4d8:	69ca      	ldr	r2, [r1, #28]
 800b4da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b4de:	4302      	orrs	r2, r0
 800b4e0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4e2:	0699      	lsls	r1, r3, #26
 800b4e4:	d50b      	bpl.n	800b4fe <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4e6:	496b      	ldr	r1, [pc, #428]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b4e8:	69e0      	ldr	r0, [r4, #28]
 800b4ea:	6a0a      	ldr	r2, [r1, #32]
 800b4ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b4f0:	4290      	cmp	r0, r2
 800b4f2:	d904      	bls.n	800b4fe <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b4f4:	6a0a      	ldr	r2, [r1, #32]
 800b4f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b4fa:	4302      	orrs	r2, r0
 800b4fc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4fe:	079a      	lsls	r2, r3, #30
 800b500:	f140 80ab 	bpl.w	800b65a <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b504:	4863      	ldr	r0, [pc, #396]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b506:	68e1      	ldr	r1, [r4, #12]
 800b508:	6982      	ldr	r2, [r0, #24]
 800b50a:	f002 020f 	and.w	r2, r2, #15
 800b50e:	4291      	cmp	r1, r2
 800b510:	d904      	bls.n	800b51c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b512:	6982      	ldr	r2, [r0, #24]
 800b514:	f022 020f 	bic.w	r2, r2, #15
 800b518:	430a      	orrs	r2, r1
 800b51a:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b51c:	07d8      	lsls	r0, r3, #31
 800b51e:	d530      	bpl.n	800b582 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b520:	4a5c      	ldr	r2, [pc, #368]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b522:	68a1      	ldr	r1, [r4, #8]
 800b524:	6993      	ldr	r3, [r2, #24]
 800b526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b52a:	430b      	orrs	r3, r1
 800b52c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b52e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b530:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b532:	2902      	cmp	r1, #2
 800b534:	f000 80a1 	beq.w	800b67a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b538:	2903      	cmp	r1, #3
 800b53a:	f000 8098 	beq.w	800b66e <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b53e:	2901      	cmp	r1, #1
 800b540:	f000 80a1 	beq.w	800b686 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b544:	0758      	lsls	r0, r3, #29
 800b546:	d59e      	bpl.n	800b486 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b548:	4e52      	ldr	r6, [pc, #328]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b54a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b54e:	6933      	ldr	r3, [r6, #16]
 800b550:	f023 0307 	bic.w	r3, r3, #7
 800b554:	430b      	orrs	r3, r1
 800b556:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b558:	f7fc f90c 	bl	8007774 <HAL_GetTick>
 800b55c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b55e:	e005      	b.n	800b56c <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b560:	f7fc f908 	bl	8007774 <HAL_GetTick>
 800b564:	1bc0      	subs	r0, r0, r7
 800b566:	4540      	cmp	r0, r8
 800b568:	f200 808b 	bhi.w	800b682 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b56c:	6933      	ldr	r3, [r6, #16]
 800b56e:	6862      	ldr	r2, [r4, #4]
 800b570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b574:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b578:	d1f2      	bne.n	800b560 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	0799      	lsls	r1, r3, #30
 800b57e:	d506      	bpl.n	800b58e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b580:	68e1      	ldr	r1, [r4, #12]
 800b582:	4844      	ldr	r0, [pc, #272]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b584:	6982      	ldr	r2, [r0, #24]
 800b586:	f002 020f 	and.w	r2, r2, #15
 800b58a:	428a      	cmp	r2, r1
 800b58c:	d869      	bhi.n	800b662 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b58e:	4940      	ldr	r1, [pc, #256]	; (800b690 <HAL_RCC_ClockConfig+0x238>)
 800b590:	680a      	ldr	r2, [r1, #0]
 800b592:	f002 020f 	and.w	r2, r2, #15
 800b596:	42aa      	cmp	r2, r5
 800b598:	d90a      	bls.n	800b5b0 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b59a:	680a      	ldr	r2, [r1, #0]
 800b59c:	f022 020f 	bic.w	r2, r2, #15
 800b5a0:	432a      	orrs	r2, r5
 800b5a2:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5a4:	680a      	ldr	r2, [r1, #0]
 800b5a6:	f002 020f 	and.w	r2, r2, #15
 800b5aa:	42aa      	cmp	r2, r5
 800b5ac:	f47f af6b 	bne.w	800b486 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b5b0:	075a      	lsls	r2, r3, #29
 800b5b2:	d50b      	bpl.n	800b5cc <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b5b4:	4937      	ldr	r1, [pc, #220]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b5b6:	6920      	ldr	r0, [r4, #16]
 800b5b8:	698a      	ldr	r2, [r1, #24]
 800b5ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5be:	4290      	cmp	r0, r2
 800b5c0:	d204      	bcs.n	800b5cc <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b5c2:	698a      	ldr	r2, [r1, #24]
 800b5c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b5c8:	4302      	orrs	r2, r0
 800b5ca:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5cc:	071f      	lsls	r7, r3, #28
 800b5ce:	d50b      	bpl.n	800b5e8 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b5d0:	4930      	ldr	r1, [pc, #192]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b5d2:	6960      	ldr	r0, [r4, #20]
 800b5d4:	69ca      	ldr	r2, [r1, #28]
 800b5d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5da:	4290      	cmp	r0, r2
 800b5dc:	d204      	bcs.n	800b5e8 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5de:	69ca      	ldr	r2, [r1, #28]
 800b5e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b5e4:	4302      	orrs	r2, r0
 800b5e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5e8:	06de      	lsls	r6, r3, #27
 800b5ea:	d50b      	bpl.n	800b604 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5ec:	4929      	ldr	r1, [pc, #164]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b5ee:	69a0      	ldr	r0, [r4, #24]
 800b5f0:	69ca      	ldr	r2, [r1, #28]
 800b5f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b5f6:	4290      	cmp	r0, r2
 800b5f8:	d204      	bcs.n	800b604 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5fa:	69ca      	ldr	r2, [r1, #28]
 800b5fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b600:	4302      	orrs	r2, r0
 800b602:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b604:	069d      	lsls	r5, r3, #26
 800b606:	d50b      	bpl.n	800b620 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b608:	4a22      	ldr	r2, [pc, #136]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b60a:	69e1      	ldr	r1, [r4, #28]
 800b60c:	6a13      	ldr	r3, [r2, #32]
 800b60e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b612:	4299      	cmp	r1, r3
 800b614:	d204      	bcs.n	800b620 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b616:	6a13      	ldr	r3, [r2, #32]
 800b618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61c:	430b      	orrs	r3, r1
 800b61e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b620:	f7ff fe7a 	bl	800b318 <HAL_RCC_GetSysClockFreq>
 800b624:	4a1b      	ldr	r2, [pc, #108]	; (800b694 <HAL_RCC_ClockConfig+0x23c>)
 800b626:	4603      	mov	r3, r0
 800b628:	481b      	ldr	r0, [pc, #108]	; (800b698 <HAL_RCC_ClockConfig+0x240>)
 800b62a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b62c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b62e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b632:	4d1a      	ldr	r5, [pc, #104]	; (800b69c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b634:	f002 020f 	and.w	r2, r2, #15
 800b638:	4c19      	ldr	r4, [pc, #100]	; (800b6a0 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b63a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b63c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b63e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b642:	4818      	ldr	r0, [pc, #96]	; (800b6a4 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b644:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b648:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b64a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b64c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b64e:	40d3      	lsrs	r3, r2
 800b650:	6023      	str	r3, [r4, #0]
}
 800b652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b656:	f7fc b82b 	b.w	80076b0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b65a:	07da      	lsls	r2, r3, #31
 800b65c:	f53f af60 	bmi.w	800b520 <HAL_RCC_ClockConfig+0xc8>
 800b660:	e795      	b.n	800b58e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b662:	6982      	ldr	r2, [r0, #24]
 800b664:	f022 020f 	bic.w	r2, r2, #15
 800b668:	4311      	orrs	r1, r2
 800b66a:	6181      	str	r1, [r0, #24]
 800b66c:	e78f      	b.n	800b58e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b66e:	019f      	lsls	r7, r3, #6
 800b670:	f53f af6a 	bmi.w	800b548 <HAL_RCC_ClockConfig+0xf0>
 800b674:	e707      	b.n	800b486 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b676:	2001      	movs	r0, #1
}
 800b678:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b67a:	039b      	lsls	r3, r3, #14
 800b67c:	f53f af64 	bmi.w	800b548 <HAL_RCC_ClockConfig+0xf0>
 800b680:	e701      	b.n	800b486 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b682:	2003      	movs	r0, #3
 800b684:	e700      	b.n	800b488 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b686:	05de      	lsls	r6, r3, #23
 800b688:	f53f af5e 	bmi.w	800b548 <HAL_RCC_ClockConfig+0xf0>
 800b68c:	e6fb      	b.n	800b486 <HAL_RCC_ClockConfig+0x2e>
 800b68e:	bf00      	nop
 800b690:	52002000 	.word	0x52002000
 800b694:	58024400 	.word	0x58024400
 800b698:	08018a30 	.word	0x08018a30
 800b69c:	24000318 	.word	0x24000318
 800b6a0:	2400031c 	.word	0x2400031c
 800b6a4:	24000340 	.word	0x24000340

0800b6a8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6a8:	4a18      	ldr	r2, [pc, #96]	; (800b70c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6aa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6ac:	6913      	ldr	r3, [r2, #16]
 800b6ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6b2:	2b10      	cmp	r3, #16
 800b6b4:	d01a      	beq.n	800b6ec <HAL_RCC_GetHCLKFreq+0x44>
 800b6b6:	2b18      	cmp	r3, #24
 800b6b8:	d023      	beq.n	800b702 <HAL_RCC_GetHCLKFreq+0x5a>
 800b6ba:	b1cb      	cbz	r3, 800b6f0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b6bc:	4814      	ldr	r0, [pc, #80]	; (800b710 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6be:	4b13      	ldr	r3, [pc, #76]	; (800b70c <HAL_RCC_GetHCLKFreq+0x64>)
 800b6c0:	4914      	ldr	r1, [pc, #80]	; (800b714 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b6c2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6c6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6ca:	4c13      	ldr	r4, [pc, #76]	; (800b718 <HAL_RCC_GetHCLKFreq+0x70>)
 800b6cc:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6d0:	4d12      	ldr	r5, [pc, #72]	; (800b71c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6d2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6d4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6d6:	f002 021f 	and.w	r2, r2, #31
 800b6da:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6de:	f003 001f 	and.w	r0, r3, #31
 800b6e2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800b6e6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6e8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6ec:	480c      	ldr	r0, [pc, #48]	; (800b720 <HAL_RCC_GetHCLKFreq+0x78>)
 800b6ee:	e7e6      	b.n	800b6be <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f0:	6813      	ldr	r3, [r2, #0]
 800b6f2:	069b      	lsls	r3, r3, #26
 800b6f4:	d508      	bpl.n	800b708 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	480a      	ldr	r0, [pc, #40]	; (800b724 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b6fa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800b6fe:	40d0      	lsrs	r0, r2
 800b700:	e7dd      	b.n	800b6be <HAL_RCC_GetHCLKFreq+0x16>
 800b702:	f7ff fa3f 	bl	800ab84 <HAL_RCC_GetSysClockFreq.part.0>
 800b706:	e7da      	b.n	800b6be <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b708:	4806      	ldr	r0, [pc, #24]	; (800b724 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b70a:	e7d8      	b.n	800b6be <HAL_RCC_GetHCLKFreq+0x16>
 800b70c:	58024400 	.word	0x58024400
 800b710:	003d0900 	.word	0x003d0900
 800b714:	08018a30 	.word	0x08018a30
 800b718:	2400031c 	.word	0x2400031c
 800b71c:	24000318 	.word	0x24000318
 800b720:	017d7840 	.word	0x017d7840
 800b724:	03d09000 	.word	0x03d09000

0800b728 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b728:	4a1c      	ldr	r2, [pc, #112]	; (800b79c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b72a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b72c:	6913      	ldr	r3, [r2, #16]
 800b72e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b732:	2b10      	cmp	r3, #16
 800b734:	d021      	beq.n	800b77a <HAL_RCC_GetPCLK1Freq+0x52>
 800b736:	2b18      	cmp	r3, #24
 800b738:	d02b      	beq.n	800b792 <HAL_RCC_GetPCLK1Freq+0x6a>
 800b73a:	b303      	cbz	r3, 800b77e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b73c:	4818      	ldr	r0, [pc, #96]	; (800b7a0 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b73e:	4a17      	ldr	r2, [pc, #92]	; (800b79c <HAL_RCC_GetPCLK1Freq+0x74>)
 800b740:	4918      	ldr	r1, [pc, #96]	; (800b7a4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800b742:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800b744:	4d18      	ldr	r5, [pc, #96]	; (800b7a8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b746:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b74a:	4c18      	ldr	r4, [pc, #96]	; (800b7ac <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b74c:	5ccb      	ldrb	r3, [r1, r3]
 800b74e:	f003 031f 	and.w	r3, r3, #31
 800b752:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b756:	6990      	ldr	r0, [r2, #24]
 800b758:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800b75c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b75e:	5c08      	ldrb	r0, [r1, r0]
 800b760:	f000 001f 	and.w	r0, r0, #31
 800b764:	40c3      	lsrs	r3, r0
 800b766:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b768:	69d2      	ldr	r2, [r2, #28]
 800b76a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b76e:	5c88      	ldrb	r0, [r1, r2]
 800b770:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b774:	fa23 f000 	lsr.w	r0, r3, r0
 800b778:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b77a:	480d      	ldr	r0, [pc, #52]	; (800b7b0 <HAL_RCC_GetPCLK1Freq+0x88>)
 800b77c:	e7df      	b.n	800b73e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b77e:	6813      	ldr	r3, [r2, #0]
 800b780:	069b      	lsls	r3, r3, #26
 800b782:	d509      	bpl.n	800b798 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b784:	6810      	ldr	r0, [r2, #0]
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b788:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b78c:	fa23 f000 	lsr.w	r0, r3, r0
 800b790:	e7d5      	b.n	800b73e <HAL_RCC_GetPCLK1Freq+0x16>
 800b792:	f7ff f9f7 	bl	800ab84 <HAL_RCC_GetSysClockFreq.part.0>
 800b796:	e7d2      	b.n	800b73e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b798:	4806      	ldr	r0, [pc, #24]	; (800b7b4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b79a:	e7d0      	b.n	800b73e <HAL_RCC_GetPCLK1Freq+0x16>
 800b79c:	58024400 	.word	0x58024400
 800b7a0:	003d0900 	.word	0x003d0900
 800b7a4:	08018a30 	.word	0x08018a30
 800b7a8:	24000318 	.word	0x24000318
 800b7ac:	2400031c 	.word	0x2400031c
 800b7b0:	017d7840 	.word	0x017d7840
 800b7b4:	03d09000 	.word	0x03d09000

0800b7b8 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7b8:	4a1c      	ldr	r2, [pc, #112]	; (800b82c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7ba:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7bc:	6913      	ldr	r3, [r2, #16]
 800b7be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7c2:	2b10      	cmp	r3, #16
 800b7c4:	d021      	beq.n	800b80a <HAL_RCC_GetPCLK2Freq+0x52>
 800b7c6:	2b18      	cmp	r3, #24
 800b7c8:	d02b      	beq.n	800b822 <HAL_RCC_GetPCLK2Freq+0x6a>
 800b7ca:	b303      	cbz	r3, 800b80e <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b7cc:	4818      	ldr	r0, [pc, #96]	; (800b830 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7ce:	4a17      	ldr	r2, [pc, #92]	; (800b82c <HAL_RCC_GetPCLK2Freq+0x74>)
 800b7d0:	4918      	ldr	r1, [pc, #96]	; (800b834 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800b7d2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800b7d4:	4d18      	ldr	r5, [pc, #96]	; (800b838 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7d6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7da:	4c18      	ldr	r4, [pc, #96]	; (800b83c <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7dc:	5ccb      	ldrb	r3, [r1, r3]
 800b7de:	f003 031f 	and.w	r3, r3, #31
 800b7e2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7e6:	6990      	ldr	r0, [r2, #24]
 800b7e8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800b7ec:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7ee:	5c08      	ldrb	r0, [r1, r0]
 800b7f0:	f000 001f 	and.w	r0, r0, #31
 800b7f4:	40c3      	lsrs	r3, r0
 800b7f6:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b7f8:	69d2      	ldr	r2, [r2, #28]
 800b7fa:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800b7fe:	5c88      	ldrb	r0, [r1, r2]
 800b800:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b804:	fa23 f000 	lsr.w	r0, r3, r0
 800b808:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b80a:	480d      	ldr	r0, [pc, #52]	; (800b840 <HAL_RCC_GetPCLK2Freq+0x88>)
 800b80c:	e7df      	b.n	800b7ce <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80e:	6813      	ldr	r3, [r2, #0]
 800b810:	069b      	lsls	r3, r3, #26
 800b812:	d509      	bpl.n	800b828 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b814:	6810      	ldr	r0, [r2, #0]
 800b816:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b818:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b81c:	fa23 f000 	lsr.w	r0, r3, r0
 800b820:	e7d5      	b.n	800b7ce <HAL_RCC_GetPCLK2Freq+0x16>
 800b822:	f7ff f9af 	bl	800ab84 <HAL_RCC_GetSysClockFreq.part.0>
 800b826:	e7d2      	b.n	800b7ce <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b828:	4806      	ldr	r0, [pc, #24]	; (800b844 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b82a:	e7d0      	b.n	800b7ce <HAL_RCC_GetPCLK2Freq+0x16>
 800b82c:	58024400 	.word	0x58024400
 800b830:	003d0900 	.word	0x003d0900
 800b834:	08018a30 	.word	0x08018a30
 800b838:	24000318 	.word	0x24000318
 800b83c:	2400031c 	.word	0x2400031c
 800b840:	017d7840 	.word	0x017d7840
 800b844:	03d09000 	.word	0x03d09000

0800b848 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b84a:	4c3a      	ldr	r4, [pc, #232]	; (800b934 <RCCEx_PLL2_Config+0xec>)
 800b84c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d067      	beq.n	800b926 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	4606      	mov	r6, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b860:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b862:	f7fb ff87 	bl	8007774 <HAL_GetTick>
 800b866:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b868:	e004      	b.n	800b874 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b86a:	f7fb ff83 	bl	8007774 <HAL_GetTick>
 800b86e:	1b43      	subs	r3, r0, r5
 800b870:	2b02      	cmp	r3, #2
 800b872:	d856      	bhi.n	800b922 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	011a      	lsls	r2, r3, #4
 800b878:	d4f7      	bmi.n	800b86a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b87a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b87c:	6832      	ldr	r2, [r6, #0]
 800b87e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b882:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b886:	62a3      	str	r3, [r4, #40]	; 0x28
 800b888:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	3a01      	subs	r2, #1
 800b890:	025b      	lsls	r3, r3, #9
 800b892:	0412      	lsls	r2, r2, #16
 800b894:	b29b      	uxth	r3, r3
 800b896:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b89a:	4313      	orrs	r3, r2
 800b89c:	6872      	ldr	r2, [r6, #4]
 800b89e:	3a01      	subs	r2, #1
 800b8a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	6932      	ldr	r2, [r6, #16]
 800b8a8:	3a01      	subs	r2, #1
 800b8aa:	0612      	lsls	r2, r2, #24
 800b8ac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b8b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8b6:	6972      	ldr	r2, [r6, #20]
 800b8b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b8c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8c2:	69b3      	ldr	r3, [r6, #24]
 800b8c4:	f022 0220 	bic.w	r2, r2, #32
 800b8c8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b8ca:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b8cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b8ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8d0:	f022 0210 	bic.w	r2, r2, #16
 800b8d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b8d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8d8:	69f2      	ldr	r2, [r6, #28]
 800b8da:	400b      	ands	r3, r1
 800b8dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b8e0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b8e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8e4:	f043 0310 	orr.w	r3, r3, #16
 800b8e8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b8ec:	b1ef      	cbz	r7, 800b92a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8ee:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8f0:	bf0c      	ite	eq
 800b8f2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8f6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800b8fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8fc:	4c0d      	ldr	r4, [pc, #52]	; (800b934 <RCCEx_PLL2_Config+0xec>)
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b904:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b906:	f7fb ff35 	bl	8007774 <HAL_GetTick>
 800b90a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b90c:	e004      	b.n	800b918 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b90e:	f7fb ff31 	bl	8007774 <HAL_GetTick>
 800b912:	1b40      	subs	r0, r0, r5
 800b914:	2802      	cmp	r0, #2
 800b916:	d804      	bhi.n	800b922 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	011b      	lsls	r3, r3, #4
 800b91c:	d5f7      	bpl.n	800b90e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800b91e:	2000      	movs	r0, #0
}
 800b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b922:	2003      	movs	r0, #3
}
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b926:	2001      	movs	r0, #1
}
 800b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b92a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b92e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b930:	e7e4      	b.n	800b8fc <RCCEx_PLL2_Config+0xb4>
 800b932:	bf00      	nop
 800b934:	58024400 	.word	0x58024400
 800b938:	ffff0007 	.word	0xffff0007

0800b93c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b93e:	4c3a      	ldr	r4, [pc, #232]	; (800ba28 <RCCEx_PLL3_Config+0xec>)
 800b940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b03      	cmp	r3, #3
 800b948:	d067      	beq.n	800ba1a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b954:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b956:	f7fb ff0d 	bl	8007774 <HAL_GetTick>
 800b95a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b95c:	e004      	b.n	800b968 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b95e:	f7fb ff09 	bl	8007774 <HAL_GetTick>
 800b962:	1b43      	subs	r3, r0, r5
 800b964:	2b02      	cmp	r3, #2
 800b966:	d856      	bhi.n	800ba16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	009a      	lsls	r2, r3, #2
 800b96c:	d4f7      	bmi.n	800b95e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b96e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b970:	6832      	ldr	r2, [r6, #0]
 800b972:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800b976:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b97a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b97c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b980:	3b01      	subs	r3, #1
 800b982:	3a01      	subs	r2, #1
 800b984:	025b      	lsls	r3, r3, #9
 800b986:	0412      	lsls	r2, r2, #16
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b98e:	4313      	orrs	r3, r2
 800b990:	6872      	ldr	r2, [r6, #4]
 800b992:	3a01      	subs	r2, #1
 800b994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b998:	4313      	orrs	r3, r2
 800b99a:	6932      	ldr	r2, [r6, #16]
 800b99c:	3a01      	subs	r2, #1
 800b99e:	0612      	lsls	r2, r2, #24
 800b9a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b9aa:	6972      	ldr	r2, [r6, #20]
 800b9ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b9b6:	69b3      	ldr	r3, [r6, #24]
 800b9b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b9bc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9be:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b9c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b9cc:	69f2      	ldr	r2, [r6, #28]
 800b9ce:	400b      	ands	r3, r1
 800b9d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b9d4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b9d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9dc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b9e0:	b1ef      	cbz	r7, 800ba1e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9e2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9e4:	bf0c      	ite	eq
 800b9e6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9ea:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800b9ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ba28 <RCCEx_PLL3_Config+0xec>)
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fa:	f7fb febb 	bl	8007774 <HAL_GetTick>
 800b9fe:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba00:	e004      	b.n	800ba0c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba02:	f7fb feb7 	bl	8007774 <HAL_GetTick>
 800ba06:	1b40      	subs	r0, r0, r5
 800ba08:	2802      	cmp	r0, #2
 800ba0a:	d804      	bhi.n	800ba16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	d5f7      	bpl.n	800ba02 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800ba12:	2000      	movs	r0, #0
}
 800ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800ba16:	2003      	movs	r0, #3
}
 800ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ba1a:	2001      	movs	r0, #1
}
 800ba1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ba22:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba24:	e7e4      	b.n	800b9f0 <RCCEx_PLL3_Config+0xb4>
 800ba26:	bf00      	nop
 800ba28:	58024400 	.word	0x58024400
 800ba2c:	ffff0007 	.word	0xffff0007

0800ba30 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba34:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800ba38:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba3a:	011d      	lsls	r5, r3, #4
 800ba3c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800ba40:	d523      	bpl.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ba42:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800ba44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ba48:	f000 854f 	beq.w	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800ba4c:	d812      	bhi.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	f000 85a5 	beq.w	800c59e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800ba54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ba58:	f040 859e 	bne.w	800c598 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba5c:	2102      	movs	r1, #2
 800ba5e:	3008      	adds	r0, #8
 800ba60:	f7ff fef2 	bl	800b848 <RCCEx_PLL2_Config>
 800ba64:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	f040 851e 	bne.w	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba6e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ba72:	e003      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ba74:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800ba78:	f040 858e 	bne.w	800c598 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba7c:	4dae      	ldr	r5, [pc, #696]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800ba7e:	2600      	movs	r6, #0
 800ba80:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800ba82:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800ba86:	4301      	orrs	r1, r0
 800ba88:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba8a:	05d8      	lsls	r0, r3, #23
 800ba8c:	d50a      	bpl.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ba90:	2904      	cmp	r1, #4
 800ba92:	d806      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800ba94:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ba98:	05390532 	.word	0x05390532
 800ba9c:	03100516 	.word	0x03100516
 800baa0:	0310      	.short	0x0310
 800baa2:	2601      	movs	r6, #1
 800baa4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800baa6:	0599      	lsls	r1, r3, #22
 800baa8:	d51d      	bpl.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800baaa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800baac:	2980      	cmp	r1, #128	; 0x80
 800baae:	f000 8512 	beq.w	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800bab2:	f200 80f9 	bhi.w	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800bab6:	2900      	cmp	r1, #0
 800bab8:	f000 8420 	beq.w	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800babc:	2940      	cmp	r1, #64	; 0x40
 800babe:	f040 80fa 	bne.w	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac2:	2100      	movs	r1, #0
 800bac4:	f104 0008 	add.w	r0, r4, #8
 800bac8:	f7ff febe 	bl	800b848 <RCCEx_PLL2_Config>
 800bacc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bace:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bad2:	2d00      	cmp	r5, #0
 800bad4:	f040 83eb 	bne.w	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bad8:	4f97      	ldr	r7, [pc, #604]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bada:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800badc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bade:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800bae2:	4301      	orrs	r1, r0
 800bae4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bae6:	055f      	lsls	r7, r3, #21
 800bae8:	d521      	bpl.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800baea:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800baee:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800baf2:	f000 851d 	beq.w	800c530 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800baf6:	f200 80e1 	bhi.w	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800bafa:	2900      	cmp	r1, #0
 800bafc:	f000 8405 	beq.w	800c30a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800bb00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bb04:	f040 80e2 	bne.w	800bccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb08:	2100      	movs	r1, #0
 800bb0a:	f104 0008 	add.w	r0, r4, #8
 800bb0e:	f7ff fe9b 	bl	800b848 <RCCEx_PLL2_Config>
 800bb12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	f040 83cf 	bne.w	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb1e:	4f86      	ldr	r7, [pc, #536]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bb20:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800bb24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb26:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800bb2a:	4301      	orrs	r1, r0
 800bb2c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb2e:	0518      	lsls	r0, r3, #20
 800bb30:	d521      	bpl.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb32:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800bb36:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800bb3a:	f000 84b9 	beq.w	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800bb3e:	f200 80c8 	bhi.w	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800bb42:	2900      	cmp	r1, #0
 800bb44:	f000 83d4 	beq.w	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800bb48:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800bb4c:	f040 80c9 	bne.w	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb50:	2100      	movs	r1, #0
 800bb52:	f104 0008 	add.w	r0, r4, #8
 800bb56:	f7ff fe77 	bl	800b848 <RCCEx_PLL2_Config>
 800bb5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bb5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	f040 83a2 	bne.w	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb66:	4f74      	ldr	r7, [pc, #464]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bb68:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800bb6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb6e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800bb72:	4301      	orrs	r1, r0
 800bb74:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bb76:	0199      	lsls	r1, r3, #6
 800bb78:	d518      	bpl.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800bb7a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb7c:	2920      	cmp	r1, #32
 800bb7e:	f000 841e 	beq.w	800c3be <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800bb82:	f200 80b1 	bhi.w	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bb86:	b139      	cbz	r1, 800bb98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bb88:	2910      	cmp	r1, #16
 800bb8a:	f040 80b0 	bne.w	800bcee <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb8e:	486a      	ldr	r0, [pc, #424]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bb90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bb92:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bb96:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bb98:	2d00      	cmp	r5, #0
 800bb9a:	f040 83d3 	bne.w	800c344 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bb9e:	4f66      	ldr	r7, [pc, #408]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bba0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bba2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bba4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800bba8:	4301      	orrs	r1, r0
 800bbaa:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bbac:	04df      	lsls	r7, r3, #19
 800bbae:	d51f      	bpl.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bbb0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bbb2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bbb6:	f000 84b1 	beq.w	800c51c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800bbba:	f200 809b 	bhi.w	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	f000 8390 	beq.w	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800bbc4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bbc8:	f040 809c 	bne.w	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbcc:	2100      	movs	r1, #0
 800bbce:	f104 0008 	add.w	r0, r4, #8
 800bbd2:	f7ff fe39 	bl	800b848 <RCCEx_PLL2_Config>
 800bbd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	f040 8368 	bne.w	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbe2:	4f55      	ldr	r7, [pc, #340]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bbe4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bbe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbe8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bbec:	4301      	orrs	r1, r0
 800bbee:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbf0:	0498      	lsls	r0, r3, #18
 800bbf2:	d51d      	bpl.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bbf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bbf6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bbfa:	f000 840f 	beq.w	800c41c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800bbfe:	f200 8084 	bhi.w	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bc02:	b159      	cbz	r1, 800bc1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bc04:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bc08:	f040 8087 	bne.w	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	f104 0008 	add.w	r0, r4, #8
 800bc12:	f7ff fe19 	bl	800b848 <RCCEx_PLL2_Config>
 800bc16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	f040 839b 	bne.w	800c358 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc22:	4f45      	ldr	r7, [pc, #276]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bc24:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bc26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc28:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800bc2c:	4301      	orrs	r1, r0
 800bc2e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc30:	0459      	lsls	r1, r3, #17
 800bc32:	d51d      	bpl.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bc34:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800bc38:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bc3c:	f000 83fa 	beq.w	800c434 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800bc40:	d86e      	bhi.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800bc42:	b151      	cbz	r1, 800bc5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc44:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bc48:	d172      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	f104 0008 	add.w	r0, r4, #8
 800bc50:	f7ff fdfa 	bl	800b848 <RCCEx_PLL2_Config>
 800bc54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bc5a:	2d00      	cmp	r5, #0
 800bc5c:	f040 8380 	bne.w	800c360 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc60:	4f35      	ldr	r7, [pc, #212]	; (800bd38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bc62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800bc66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc68:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800bc6c:	4301      	orrs	r1, r0
 800bc6e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc70:	041f      	lsls	r7, r3, #16
 800bc72:	d50d      	bpl.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800bc74:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bc76:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bc7a:	f000 83c7 	beq.w	800c40c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800bc7e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bc82:	f000 8225 	beq.w	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800bc86:	2900      	cmp	r1, #0
 800bc88:	f000 822a 	beq.w	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800bc8c:	2601      	movs	r6, #1
 800bc8e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc90:	01d8      	lsls	r0, r3, #7
 800bc92:	d55f      	bpl.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 800bc94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc96:	2903      	cmp	r1, #3
 800bc98:	f200 84bb 	bhi.w	800c612 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800bc9c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bca0:	03e10056 	.word	0x03e10056
 800bca4:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800bca8:	29c0      	cmp	r1, #192	; 0xc0
 800bcaa:	f43f af12 	beq.w	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bcae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bcb2:	f43f af0e 	beq.w	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bcb6:	2601      	movs	r6, #1
 800bcb8:	4635      	mov	r5, r6
 800bcba:	e714      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bcbc:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800bcc0:	f43f af2a 	beq.w	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bcc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bcc8:	f43f af26 	beq.w	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bccc:	2601      	movs	r6, #1
 800bcce:	4635      	mov	r5, r6
 800bcd0:	e72d      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bcd2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800bcd6:	f43f af43 	beq.w	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bcda:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800bcde:	f43f af3f 	beq.w	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bce2:	2601      	movs	r6, #1
 800bce4:	4635      	mov	r5, r6
 800bce6:	e746      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800bce8:	2930      	cmp	r1, #48	; 0x30
 800bcea:	f43f af55 	beq.w	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bcee:	2601      	movs	r6, #1
 800bcf0:	4635      	mov	r5, r6
 800bcf2:	e75b      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bcf4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800bcf8:	f43f af70 	beq.w	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bcfc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bd00:	f43f af6c 	beq.w	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bd04:	2601      	movs	r6, #1
 800bd06:	4635      	mov	r5, r6
 800bd08:	e772      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd0a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800bd0e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800bd12:	d083      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bd14:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800bd18:	d080      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bd1a:	2601      	movs	r6, #1
 800bd1c:	4635      	mov	r5, r6
 800bd1e:	e787      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd20:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800bd24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bd28:	d097      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bd2a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800bd2e:	d094      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bd30:	2601      	movs	r6, #1
 800bd32:	4635      	mov	r5, r6
 800bd34:	e79c      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bd36:	bf00      	nop
 800bd38:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd3c:	2102      	movs	r1, #2
 800bd3e:	f104 0008 	add.w	r0, r4, #8
 800bd42:	f7ff fd81 	bl	800b848 <RCCEx_PLL2_Config>
 800bd46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd4c:	2d00      	cmp	r5, #0
 800bd4e:	f000 82fb 	beq.w	800c348 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800bd52:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd54:	0259      	lsls	r1, r3, #9
 800bd56:	f100 825a 	bmi.w	800c20e <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd5a:	07d8      	lsls	r0, r3, #31
 800bd5c:	d52f      	bpl.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd5e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bd60:	2928      	cmp	r1, #40	; 0x28
 800bd62:	d82a      	bhi.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x38a>
 800bd64:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bd68:	002901fa 	.word	0x002901fa
 800bd6c:	00290029 	.word	0x00290029
 800bd70:	00290029 	.word	0x00290029
 800bd74:	00290029 	.word	0x00290029
 800bd78:	00290406 	.word	0x00290406
 800bd7c:	00290029 	.word	0x00290029
 800bd80:	00290029 	.word	0x00290029
 800bd84:	00290029 	.word	0x00290029
 800bd88:	002901f2 	.word	0x002901f2
 800bd8c:	00290029 	.word	0x00290029
 800bd90:	00290029 	.word	0x00290029
 800bd94:	00290029 	.word	0x00290029
 800bd98:	002901fa 	.word	0x002901fa
 800bd9c:	00290029 	.word	0x00290029
 800bda0:	00290029 	.word	0x00290029
 800bda4:	00290029 	.word	0x00290029
 800bda8:	002901fa 	.word	0x002901fa
 800bdac:	00290029 	.word	0x00290029
 800bdb0:	00290029 	.word	0x00290029
 800bdb4:	00290029 	.word	0x00290029
 800bdb8:	01fa      	.short	0x01fa
 800bdba:	2601      	movs	r6, #1
 800bdbc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bdbe:	0799      	lsls	r1, r3, #30
 800bdc0:	d517      	bpl.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bdc2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800bdc4:	2905      	cmp	r1, #5
 800bdc6:	f200 8420 	bhi.w	800c60a <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800bdca:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bdce:	000e      	.short	0x000e
 800bdd0:	000603bb 	.word	0x000603bb
 800bdd4:	000e000e 	.word	0x000e000e
 800bdd8:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdda:	2101      	movs	r1, #1
 800bddc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bde0:	f7ff fdac 	bl	800b93c <RCCEx_PLL3_Config>
 800bde4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bde6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bdea:	2d00      	cmp	r5, #0
 800bdec:	f000 8299 	beq.w	800c322 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800bdf0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdf2:	075f      	lsls	r7, r3, #29
 800bdf4:	d518      	bpl.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bdf6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800bdfa:	2905      	cmp	r1, #5
 800bdfc:	f200 840d 	bhi.w	800c61a <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800be00:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be04:	03ac000e 	.word	0x03ac000e
 800be08:	000e0006 	.word	0x000e0006
 800be0c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be10:	2101      	movs	r1, #1
 800be12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800be16:	f7ff fd91 	bl	800b93c <RCCEx_PLL3_Config>
 800be1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be20:	2d00      	cmp	r5, #0
 800be22:	f000 8286 	beq.w	800c332 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800be26:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be28:	0698      	lsls	r0, r3, #26
 800be2a:	d51f      	bpl.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800be30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800be34:	f000 8309 	beq.w	800c44a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800be38:	f200 810b 	bhi.w	800c052 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800be3c:	b159      	cbz	r1, 800be56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800be3e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800be42:	f040 8110 	bne.w	800c066 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be46:	2100      	movs	r1, #0
 800be48:	f104 0008 	add.w	r0, r4, #8
 800be4c:	f7ff fcfc 	bl	800b848 <RCCEx_PLL2_Config>
 800be50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be52:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be56:	2d00      	cmp	r5, #0
 800be58:	f040 825f 	bne.w	800c31a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be5c:	4fa6      	ldr	r7, [pc, #664]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800be5e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800be62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be64:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800be68:	4301      	orrs	r1, r0
 800be6a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be6c:	0659      	lsls	r1, r3, #25
 800be6e:	d51f      	bpl.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800be70:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800be74:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800be78:	f000 82b2 	beq.w	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800be7c:	f200 80f6 	bhi.w	800c06c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800be80:	b159      	cbz	r1, 800be9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800be82:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800be86:	f040 80fb 	bne.w	800c080 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be8a:	2100      	movs	r1, #0
 800be8c:	f104 0008 	add.w	r0, r4, #8
 800be90:	f7ff fcda 	bl	800b848 <RCCEx_PLL2_Config>
 800be94:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be96:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	f040 8262 	bne.w	800c364 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bea0:	4f95      	ldr	r7, [pc, #596]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bea2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800bea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bea8:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800beac:	4301      	orrs	r1, r0
 800beae:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800beb0:	061f      	lsls	r7, r3, #24
 800beb2:	d51f      	bpl.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800beb4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800beb8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bebc:	f000 829b 	beq.w	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800bec0:	f200 80e1 	bhi.w	800c086 <HAL_RCCEx_PeriphCLKConfig+0x656>
 800bec4:	b159      	cbz	r1, 800bede <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800bec6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800beca:	f040 80e6 	bne.w	800c09a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bece:	2100      	movs	r1, #0
 800bed0:	f104 0008 	add.w	r0, r4, #8
 800bed4:	f7ff fcb8 	bl	800b848 <RCCEx_PLL2_Config>
 800bed8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800beda:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bede:	2d00      	cmp	r5, #0
 800bee0:	f040 823c 	bne.w	800c35c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bee4:	4f84      	ldr	r7, [pc, #528]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bee6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800beea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800beec:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800bef0:	4301      	orrs	r1, r0
 800bef2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bef4:	0718      	lsls	r0, r3, #28
 800bef6:	d50b      	bpl.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bef8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800befc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bf00:	f000 82b8 	beq.w	800c474 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf04:	4f7c      	ldr	r7, [pc, #496]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bf06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf08:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bf0c:	4301      	orrs	r1, r0
 800bf0e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf10:	06d9      	lsls	r1, r3, #27
 800bf12:	d50b      	bpl.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf14:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800bf18:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800bf1c:	f000 82b7 	beq.w	800c48e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf20:	4f75      	ldr	r7, [pc, #468]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bf22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf24:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800bf28:	4301      	orrs	r1, r0
 800bf2a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf2c:	031f      	lsls	r7, r3, #12
 800bf2e:	d50e      	bpl.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 800bf30:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800bf34:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bf38:	f000 80f4 	beq.w	800c124 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800bf3c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bf40:	f000 80f8 	beq.w	800c134 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800bf44:	2900      	cmp	r1, #0
 800bf46:	f000 822e 	beq.w	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800bf4a:	2601      	movs	r6, #1
 800bf4c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf4e:	0358      	lsls	r0, r3, #13
 800bf50:	d50f      	bpl.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 800bf52:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bf56:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bf5a:	f000 80cf 	beq.w	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bf5e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bf62:	f000 80d3 	beq.w	800c10c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bf66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bf6a:	f000 8214 	beq.w	800c396 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800bf6e:	2601      	movs	r6, #1
 800bf70:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf72:	03d9      	lsls	r1, r3, #15
 800bf74:	d509      	bpl.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bf76:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	f000 8203 	beq.w	800c384 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800bf7e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bf82:	f000 819d 	beq.w	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800bf86:	2601      	movs	r6, #1
 800bf88:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf8a:	009f      	lsls	r7, r3, #2
 800bf8c:	f100 80f1 	bmi.w	800c172 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf90:	0398      	lsls	r0, r3, #14
 800bf92:	d50c      	bpl.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 800bf94:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bf98:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bf9c:	f000 81ea 	beq.w	800c374 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800bfa0:	d97e      	bls.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800bfa2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800bfa6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bfaa:	d07b      	beq.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800bfac:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bfae:	02d9      	lsls	r1, r3, #11
 800bfb0:	d506      	bpl.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfb2:	4851      	ldr	r0, [pc, #324]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfb4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800bfb6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bfb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bfbc:	4329      	orrs	r1, r5
 800bfbe:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfc0:	00df      	lsls	r7, r3, #3
 800bfc2:	d507      	bpl.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfc4:	484c      	ldr	r0, [pc, #304]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfc6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800bfca:	6901      	ldr	r1, [r0, #16]
 800bfcc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800bfd0:	4329      	orrs	r1, r5
 800bfd2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfd4:	029d      	lsls	r5, r3, #10
 800bfd6:	d506      	bpl.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfd8:	4847      	ldr	r0, [pc, #284]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfda:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800bfdc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bfde:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800bfe2:	4329      	orrs	r1, r5
 800bfe4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bfe6:	0058      	lsls	r0, r3, #1
 800bfe8:	d509      	bpl.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bfea:	4943      	ldr	r1, [pc, #268]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfec:	6908      	ldr	r0, [r1, #16]
 800bfee:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800bff2:	6108      	str	r0, [r1, #16]
 800bff4:	6908      	ldr	r0, [r1, #16]
 800bff6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800bffa:	4328      	orrs	r0, r5
 800bffc:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bffe:	2b00      	cmp	r3, #0
 800c000:	da06      	bge.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c002:	483d      	ldr	r0, [pc, #244]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c004:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c006:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c008:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c00c:	4329      	orrs	r1, r5
 800c00e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c010:	0219      	lsls	r1, r3, #8
 800c012:	d507      	bpl.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c014:	4938      	ldr	r1, [pc, #224]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c016:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c01a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c01c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c020:	4303      	orrs	r3, r0
 800c022:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c024:	07d3      	lsls	r3, r2, #31
 800c026:	f100 80b0 	bmi.w	800c18a <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c02a:	0797      	lsls	r7, r2, #30
 800c02c:	f100 80ba 	bmi.w	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c030:	0755      	lsls	r5, r2, #29
 800c032:	f100 80c4 	bmi.w	800c1be <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c036:	0710      	lsls	r0, r2, #28
 800c038:	f100 80ce 	bmi.w	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c03c:	06d1      	lsls	r1, r2, #27
 800c03e:	f100 80d8 	bmi.w	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c042:	0692      	lsls	r2, r2, #26
 800c044:	f100 8125 	bmi.w	800c292 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 800c048:	1e30      	subs	r0, r6, #0
 800c04a:	bf18      	it	ne
 800c04c:	2001      	movne	r0, #1
}
 800c04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c052:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c056:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c05a:	f43f aefc 	beq.w	800be56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c05e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c062:	f43f aef8 	beq.w	800be56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c066:	2601      	movs	r6, #1
 800c068:	4635      	mov	r5, r6
 800c06a:	e6ff      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c06c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c070:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c074:	f43f af11 	beq.w	800be9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800c078:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c07c:	f43f af0d 	beq.w	800be9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800c080:	2601      	movs	r6, #1
 800c082:	4635      	mov	r5, r6
 800c084:	e714      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c086:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c08a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c08e:	f43f af26 	beq.w	800bede <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c092:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c096:	f43f af22 	beq.w	800bede <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c09a:	2601      	movs	r6, #1
 800c09c:	4635      	mov	r5, r6
 800c09e:	e729      	b.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d183      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	f040 8163 	bne.w	800c370 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0ac:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800c0ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800c0b2:	4301      	orrs	r1, r0
 800c0b4:	6569      	str	r1, [r5, #84]	; 0x54
 800c0b6:	e77a      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c0b8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	f040 80fb 	bne.w	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c0c0:	4f0d      	ldr	r7, [pc, #52]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0c6:	f021 0107 	bic.w	r1, r1, #7
 800c0ca:	4301      	orrs	r1, r0
 800c0cc:	6539      	str	r1, [r7, #80]	; 0x50
 800c0ce:	e4ea      	b.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	f104 0008 	add.w	r0, r4, #8
 800c0d6:	f7ff fbb7 	bl	800b848 <RCCEx_PLL2_Config>
 800c0da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c0dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c0e0:	2d00      	cmp	r5, #0
 800c0e2:	f040 811c 	bne.w	800c31e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c0e6:	4f04      	ldr	r7, [pc, #16]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c0ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0ec:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c0f0:	4301      	orrs	r1, r0
 800c0f2:	6539      	str	r1, [r7, #80]	; 0x50
 800c0f4:	e5cc      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800c0f6:	bf00      	nop
 800c0f8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c102:	f7ff fc1b 	bl	800b93c <RCCEx_PLL3_Config>
 800c106:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c108:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	f040 812d 	bne.w	800c36c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c112:	4fb1      	ldr	r7, [pc, #708]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c114:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c11a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c11e:	4301      	orrs	r1, r0
 800c120:	6579      	str	r1, [r7, #84]	; 0x54
 800c122:	e726      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c124:	2102      	movs	r1, #2
 800c126:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c12a:	f7ff fc07 	bl	800b93c <RCCEx_PLL3_Config>
 800c12e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c130:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c134:	2d00      	cmp	r5, #0
 800c136:	f040 8117 	bne.w	800c368 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c13a:	4fa7      	ldr	r7, [pc, #668]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c13c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800c140:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c142:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800c146:	4301      	orrs	r1, r0
 800c148:	65b9      	str	r1, [r7, #88]	; 0x58
 800c14a:	e700      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c14c:	2101      	movs	r1, #1
 800c14e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c152:	f7ff fbf3 	bl	800b93c <RCCEx_PLL3_Config>
 800c156:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c158:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c15c:	2d00      	cmp	r5, #0
 800c15e:	f040 80da 	bne.w	800c316 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c162:	4f9d      	ldr	r7, [pc, #628]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c164:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c168:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800c16c:	4301      	orrs	r1, r0
 800c16e:	6579      	str	r1, [r7, #84]	; 0x54
 800c170:	e625      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c172:	2102      	movs	r1, #2
 800c174:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c178:	f7ff fbe0 	bl	800b93c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c17c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c180:	2800      	cmp	r0, #0
 800c182:	f43f af05 	beq.w	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 800c186:	2601      	movs	r6, #1
 800c188:	e702      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c18a:	2100      	movs	r1, #0
 800c18c:	f104 0008 	add.w	r0, r4, #8
 800c190:	f7ff fb5a 	bl	800b848 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c194:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c196:	2800      	cmp	r0, #0
 800c198:	f43f af47 	beq.w	800c02a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c19c:	0797      	lsls	r7, r2, #30
 800c19e:	4606      	mov	r6, r0
 800c1a0:	f57f af46 	bpl.w	800c030 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	f104 0008 	add.w	r0, r4, #8
 800c1aa:	f7ff fb4d 	bl	800b848 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	f43f af3d 	beq.w	800c030 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1b6:	0755      	lsls	r5, r2, #29
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	f57f af3c 	bpl.w	800c036 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1be:	2102      	movs	r1, #2
 800c1c0:	f104 0008 	add.w	r0, r4, #8
 800c1c4:	f7ff fb40 	bl	800b848 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c1c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f43f af33 	beq.w	800c036 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	0710      	lsls	r0, r2, #28
 800c1d4:	f57f af32 	bpl.w	800c03c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c1d8:	2100      	movs	r1, #0
 800c1da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c1de:	f7ff fbad 	bl	800b93c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c1e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f43f af29 	beq.w	800c03c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c1ea:	06d1      	lsls	r1, r2, #27
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	f57f af28 	bpl.w	800c042 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1f2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f7ff fb9f 	bl	800b93c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f000 80db 	beq.w	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c204:	6863      	ldr	r3, [r4, #4]
 800c206:	069b      	lsls	r3, r3, #26
 800c208:	d54c      	bpl.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800c20a:	4606      	mov	r6, r0
 800c20c:	e043      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c20e:	4f73      	ldr	r7, [pc, #460]	; (800c3dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c216:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c218:	f7fb faac 	bl	8007774 <HAL_GetTick>
 800c21c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c21e:	e006      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c220:	f7fb faa8 	bl	8007774 <HAL_GetTick>
 800c224:	eba0 0008 	sub.w	r0, r0, r8
 800c228:	2864      	cmp	r0, #100	; 0x64
 800c22a:	f200 81af 	bhi.w	800c58c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	05da      	lsls	r2, r3, #23
 800c232:	d5f5      	bpl.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 800c234:	2d00      	cmp	r5, #0
 800c236:	f040 81e3 	bne.w	800c600 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c23a:	4a67      	ldr	r2, [pc, #412]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c23c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c240:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c242:	4059      	eors	r1, r3
 800c244:	f411 7f40 	tst.w	r1, #768	; 0x300
 800c248:	d00b      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c24a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c24c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c24e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c252:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c256:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c258:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c25a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800c25e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c260:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c266:	f000 81ad 	beq.w	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c26a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c26e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c272:	f000 81bb 	beq.w	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800c276:	4958      	ldr	r1, [pc, #352]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c278:	690a      	ldr	r2, [r1, #16]
 800c27a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c27e:	610a      	str	r2, [r1, #16]
 800c280:	4855      	ldr	r0, [pc, #340]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c282:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800c286:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800c288:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c28a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c28e:	6701      	str	r1, [r0, #112]	; 0x70
 800c290:	e563      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c292:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c296:	2102      	movs	r1, #2
 800c298:	4628      	mov	r0, r5
 800c29a:	f7ff fb4f 	bl	800b93c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f aed2 	beq.w	800c048 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 800c2a4:	2001      	movs	r0, #1
}
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	462e      	mov	r6, r5
 800c2ac:	e463      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800c2ae:	462e      	mov	r6, r5
 800c2b0:	e419      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800c2b2:	462e      	mov	r6, r5
 800c2b4:	e49c      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c2b6:	462e      	mov	r6, r5
 800c2b8:	f7ff bbf5 	b.w	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c2bc:	462e      	mov	r6, r5
 800c2be:	e436      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2c0:	2102      	movs	r1, #2
 800c2c2:	f104 0008 	add.w	r0, r4, #8
 800c2c6:	f7ff fabf 	bl	800b848 <RCCEx_PLL2_Config>
 800c2ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	d15e      	bne.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c2d4:	4f40      	ldr	r7, [pc, #256]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c2d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c2da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c2de:	4301      	orrs	r1, r0
 800c2e0:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c2e2:	e652      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2e4:	483c      	ldr	r0, [pc, #240]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c2e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c2ec:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c2ee:	e475      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2f0:	4839      	ldr	r0, [pc, #228]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c2f4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c2f8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c2fa:	e431      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2fc:	4836      	ldr	r0, [pc, #216]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c300:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c304:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c306:	f7ff bbe4 	b.w	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c30a:	4833      	ldr	r0, [pc, #204]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c30c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c30e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c312:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c314:	e400      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c316:	462e      	mov	r6, r5
 800c318:	e551      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800c31a:	462e      	mov	r6, r5
 800c31c:	e5a6      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800c31e:	462e      	mov	r6, r5
 800c320:	e4b6      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c322:	4f2d      	ldr	r7, [pc, #180]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c324:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c328:	f021 0107 	bic.w	r1, r1, #7
 800c32c:	4301      	orrs	r1, r0
 800c32e:	6579      	str	r1, [r7, #84]	; 0x54
 800c330:	e55f      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c332:	4f29      	ldr	r7, [pc, #164]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c334:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c338:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c33a:	f021 0107 	bic.w	r1, r1, #7
 800c33e:	4301      	orrs	r1, r0
 800c340:	65b9      	str	r1, [r7, #88]	; 0x58
 800c342:	e571      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c344:	462e      	mov	r6, r5
 800c346:	e431      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c348:	4f23      	ldr	r7, [pc, #140]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c34a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c34c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c34e:	f021 0103 	bic.w	r1, r1, #3
 800c352:	4301      	orrs	r1, r0
 800c354:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c356:	e4fd      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800c358:	462e      	mov	r6, r5
 800c35a:	e469      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c35c:	462e      	mov	r6, r5
 800c35e:	e5c9      	b.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800c360:	462e      	mov	r6, r5
 800c362:	e485      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c364:	462e      	mov	r6, r5
 800c366:	e5a3      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c368:	462e      	mov	r6, r5
 800c36a:	e5f0      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c36c:	462e      	mov	r6, r5
 800c36e:	e600      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800c370:	462e      	mov	r6, r5
 800c372:	e61c      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c374:	4f18      	ldr	r7, [pc, #96]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c378:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c37c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800c37e:	2d00      	cmp	r5, #0
 800c380:	d1f6      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800c382:	e692      	b.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c384:	4814      	ldr	r0, [pc, #80]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c386:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c388:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c38c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c38e:	2d00      	cmp	r5, #0
 800c390:	d0a0      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800c392:	462e      	mov	r6, r5
 800c394:	e5f9      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c396:	4810      	ldr	r0, [pc, #64]	; (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c398:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c39a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c39e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c3a0:	2d00      	cmp	r5, #0
 800c3a2:	d1e3      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800c3a4:	e6b5      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3a6:	f104 0008 	add.w	r0, r4, #8
 800c3aa:	f7ff fa4d 	bl	800b848 <RCCEx_PLL2_Config>
 800c3ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3b4:	2d00      	cmp	r5, #0
 800c3b6:	d1d7      	bne.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c3b8:	e6bf      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c3ba:	6862      	ldr	r2, [r4, #4]
 800c3bc:	e641      	b.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3be:	2102      	movs	r1, #2
 800c3c0:	f104 0008 	add.w	r0, r4, #8
 800c3c4:	f7ff fa40 	bl	800b848 <RCCEx_PLL2_Config>
 800c3c8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c3ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	d1b8      	bne.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800c3d2:	f7ff bbe4 	b.w	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3e0:	2102      	movs	r1, #2
 800c3e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c3e6:	f7ff faa9 	bl	800b93c <RCCEx_PLL3_Config>
 800c3ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c3ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	d1b7      	bne.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c3f4:	e554      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3f6:	2102      	movs	r1, #2
 800c3f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c3fc:	f7ff fa9e 	bl	800b93c <RCCEx_PLL3_Config>
 800c400:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c402:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c406:	2d00      	cmp	r5, #0
 800c408:	d1a8      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800c40a:	e56b      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c40c:	4884      	ldr	r0, [pc, #528]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c40e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c410:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c414:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c416:	2d00      	cmp	r5, #0
 800c418:	d181      	bne.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c41a:	e664      	b.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c41c:	2101      	movs	r1, #1
 800c41e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c422:	f7ff fa8b 	bl	800b93c <RCCEx_PLL3_Config>
 800c426:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c428:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	d193      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x928>
 800c430:	f7ff bbf7 	b.w	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c434:	2101      	movs	r1, #1
 800c436:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c43a:	f7ff fa7f 	bl	800b93c <RCCEx_PLL3_Config>
 800c43e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c440:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c444:	2d00      	cmp	r5, #0
 800c446:	d18b      	bne.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x930>
 800c448:	e40a      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c44a:	2102      	movs	r1, #2
 800c44c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c450:	f7ff fa74 	bl	800b93c <RCCEx_PLL3_Config>
 800c454:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c456:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	f47f af5d 	bne.w	800c31a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c460:	e4fc      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c462:	486f      	ldr	r0, [pc, #444]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c464:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c466:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c46a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c46c:	2d00      	cmp	r5, #0
 800c46e:	f47f ac70 	bne.w	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800c472:	e769      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c474:	2102      	movs	r1, #2
 800c476:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c47a:	f7ff fa5f 	bl	800b93c <RCCEx_PLL3_Config>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f040 8094 	bne.w	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c484:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c488:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c48c:	e53a      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c48e:	2102      	movs	r1, #2
 800c490:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c494:	f7ff fa52 	bl	800b93c <RCCEx_PLL3_Config>
 800c498:	2800      	cmp	r0, #0
 800c49a:	f040 808d 	bne.w	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c49e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c4a6:	e53b      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c4a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c4ac:	f7ff baed 	b.w	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4b6:	f7ff fa41 	bl	800b93c <RCCEx_PLL3_Config>
 800c4ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c4bc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c4c0:	f7ff bb4e 	b.w	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4ca:	f7ff fa37 	bl	800b93c <RCCEx_PLL3_Config>
 800c4ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c4d0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c4d4:	e5f1      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4dc:	f7ff fa2e 	bl	800b93c <RCCEx_PLL3_Config>
 800c4e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c4e2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c4e6:	f7ff baf4 	b.w	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ea:	2102      	movs	r1, #2
 800c4ec:	3028      	adds	r0, #40	; 0x28
 800c4ee:	f7ff fa25 	bl	800b93c <RCCEx_PLL3_Config>
 800c4f2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	f43f aab9 	beq.w	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c4fa:	e7d5      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4fc:	4848      	ldr	r0, [pc, #288]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 800c4fe:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c500:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c502:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c506:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c508:	e5d7      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c50a:	2100      	movs	r1, #0
 800c50c:	f104 0008 	add.w	r0, r4, #8
 800c510:	f7ff f99a 	bl	800b848 <RCCEx_PLL2_Config>
 800c514:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c516:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c51a:	e5ce      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c51c:	2100      	movs	r1, #0
 800c51e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c522:	f7ff fa0b 	bl	800b93c <RCCEx_PLL3_Config>
 800c526:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c528:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c52c:	f7ff bb56 	b.w	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c530:	2100      	movs	r1, #0
 800c532:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c536:	f7ff fa01 	bl	800b93c <RCCEx_PLL3_Config>
 800c53a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c53c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c540:	f7ff baea 	b.w	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c544:	2101      	movs	r1, #1
 800c546:	f104 0008 	add.w	r0, r4, #8
 800c54a:	f7ff f97d 	bl	800b848 <RCCEx_PLL2_Config>
 800c54e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c550:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c554:	2d00      	cmp	r5, #0
 800c556:	f47f ac4b 	bne.w	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800c55a:	e6e2      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c55c:	2101      	movs	r1, #1
 800c55e:	f104 0008 	add.w	r0, r4, #8
 800c562:	f7ff f971 	bl	800b848 <RCCEx_PLL2_Config>
 800c566:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c568:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	f47f ac5a 	bne.w	800be26 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800c572:	e6de      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c574:	2101      	movs	r1, #1
 800c576:	f104 0008 	add.w	r0, r4, #8
 800c57a:	f7ff f965 	bl	800b848 <RCCEx_PLL2_Config>
 800c57e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c580:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c584:	2d00      	cmp	r5, #0
 800c586:	f47f aec6 	bne.w	800c316 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800c58a:	e5ea      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 800c58c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c58e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800c592:	4635      	mov	r5, r6
 800c594:	f7ff bbe1 	b.w	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c598:	2601      	movs	r6, #1
 800c59a:	f7ff ba76 	b.w	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c59e:	4d20      	ldr	r5, [pc, #128]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c5a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c5a2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c5a6:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800c5a8:	f7ff ba68 	b.w	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c5ac:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800c5b0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c5b6:	e4a5      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800c5bc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5be:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c5c2:	e4ad      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 800c5c4:	f7fb f8d6 	bl	8007774 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5c8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 800c5cc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5ce:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5d2:	e004      	b.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5d4:	f7fb f8ce 	bl	8007774 <HAL_GetTick>
 800c5d8:	1bc0      	subs	r0, r0, r7
 800c5da:	4548      	cmp	r0, r9
 800c5dc:	d8d6      	bhi.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5de:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c5e2:	079b      	lsls	r3, r3, #30
 800c5e4:	d5f6      	bpl.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c5ea:	e63e      	b.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800c5ec:	480c      	ldr	r0, [pc, #48]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c5ee:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800c5f0:	6901      	ldr	r1, [r0, #16]
 800c5f2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c5f6:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	6102      	str	r2, [r0, #16]
 800c5fe:	e63f      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c600:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c604:	462e      	mov	r6, r5
 800c606:	f7ff bba8 	b.w	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c60a:	2601      	movs	r6, #1
 800c60c:	4635      	mov	r5, r6
 800c60e:	f7ff bbf0 	b.w	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 800c612:	2601      	movs	r6, #1
 800c614:	4635      	mov	r5, r6
 800c616:	f7ff bb9d 	b.w	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c61a:	2601      	movs	r6, #1
 800c61c:	4635      	mov	r5, r6
 800c61e:	e403      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c620:	58024400 	.word	0x58024400
 800c624:	00ffffcf 	.word	0x00ffffcf

0800c628 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c628:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c62a:	f7ff f83d 	bl	800b6a8 <HAL_RCC_GetHCLKFreq>
 800c62e:	4b05      	ldr	r3, [pc, #20]	; (800c644 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c630:	4a05      	ldr	r2, [pc, #20]	; (800c648 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c638:	5cd3      	ldrb	r3, [r2, r3]
 800c63a:	f003 031f 	and.w	r3, r3, #31
}
 800c63e:	40d8      	lsrs	r0, r3
 800c640:	bd08      	pop	{r3, pc}
 800c642:	bf00      	nop
 800c644:	58024400 	.word	0x58024400
 800c648:	08018a30 	.word	0x08018a30

0800c64c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c64c:	4b4f      	ldr	r3, [pc, #316]	; (800c78c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c64e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c650:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c652:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c654:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800c656:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c65a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c65e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800c660:	d05c      	beq.n	800c71c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c662:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c666:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c66a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c66e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c672:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c674:	ee07 4a90 	vmov	s15, r4
 800c678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c67c:	d003      	beq.n	800c686 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c67e:	2902      	cmp	r1, #2
 800c680:	d075      	beq.n	800c76e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800c682:	2900      	cmp	r1, #0
 800c684:	d04f      	beq.n	800c726 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c686:	ee07 2a90 	vmov	s15, r2
 800c68a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c790 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c694:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c698:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a0:	ee06 3a90 	vmov	s13, r3
 800c6a4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c6a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c6ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c6b0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c6b4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c6b8:	4a34      	ldr	r2, [pc, #208]	; (800c78c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c6ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c6be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c6c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c6c4:	ee07 3a10 	vmov	s14, r3
 800c6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c6cc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c6ce:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6da:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c6de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c6e0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c6e4:	ee07 3a10 	vmov	s14, r3
 800c6e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6f8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c6fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c6fe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c70a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c712:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c716:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c71a:	4770      	bx	lr
 800c71c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c71e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c722:	6082      	str	r2, [r0, #8]
}
 800c724:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c726:	6819      	ldr	r1, [r3, #0]
 800c728:	0689      	lsls	r1, r1, #26
 800c72a:	d527      	bpl.n	800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c72c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c72e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c732:	4919      	ldr	r1, [pc, #100]	; (800c798 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c734:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c73a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c73e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c742:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c746:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c74a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c74c:	ee06 3a90 	vmov	s13, r3
 800c750:	ee05 1a90 	vmov	s11, r1
 800c754:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c758:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c75c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c760:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c764:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c768:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c76c:	e7a4      	b.n	800c6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c76e:	ee07 2a90 	vmov	s15, r2
 800c772:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c79c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800c776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c77a:	e78a      	b.n	800c692 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c77c:	ee07 2a90 	vmov	s15, r2
 800c780:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c7a0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800c784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c788:	e783      	b.n	800c692 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c78a:	bf00      	nop
 800c78c:	58024400 	.word	0x58024400
 800c790:	4a742400 	.word	0x4a742400
 800c794:	39000000 	.word	0x39000000
 800c798:	03d09000 	.word	0x03d09000
 800c79c:	4bbebc20 	.word	0x4bbebc20
 800c7a0:	4c742400 	.word	0x4c742400

0800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7a4:	4b4f      	ldr	r3, [pc, #316]	; (800c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c7a6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7ac:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800c7ae:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7b2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7b6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800c7b8:	d05c      	beq.n	800c874 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7ba:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7be:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7c2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7c6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c7ca:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7cc:	ee07 4a90 	vmov	s15, r4
 800c7d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c7d4:	d003      	beq.n	800c7de <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800c7d6:	2902      	cmp	r1, #2
 800c7d8:	d075      	beq.n	800c8c6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800c7da:	2900      	cmp	r1, #0
 800c7dc:	d04f      	beq.n	800c87e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7de:	ee07 2a90 	vmov	s15, r2
 800c7e2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800c7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ec:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c7f0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c8ec <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f8:	ee06 3a90 	vmov	s13, r3
 800c7fc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c800:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c804:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c808:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c80c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c810:	4a34      	ldr	r2, [pc, #208]	; (800c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c812:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c816:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c818:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c81c:	ee07 3a10 	vmov	s14, r3
 800c820:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c824:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c826:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c832:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c836:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c838:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c83c:	ee07 3a10 	vmov	s14, r3
 800c840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c844:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c84c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c850:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c854:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c856:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c862:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c86e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c872:	4770      	bx	lr
 800c874:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c876:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c87a:	6082      	str	r2, [r0, #8]
}
 800c87c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c87e:	6819      	ldr	r1, [r3, #0]
 800c880:	0689      	lsls	r1, r1, #26
 800c882:	d527      	bpl.n	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c884:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c886:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88a:	4919      	ldr	r1, [pc, #100]	; (800c8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c88c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c892:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c89a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c8ec <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8a2:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8a4:	ee06 3a90 	vmov	s13, r3
 800c8a8:	ee05 1a90 	vmov	s11, r1
 800c8ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c8b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c8b4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c8b8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c8bc:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c8c0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c8c4:	e7a4      	b.n	800c810 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8c6:	ee07 2a90 	vmov	s15, r2
 800c8ca:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c8f4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8d2:	e78a      	b.n	800c7ea <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8d4:	ee07 2a90 	vmov	s15, r2
 800c8d8:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800c8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8e0:	e783      	b.n	800c7ea <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c8e2:	bf00      	nop
 800c8e4:	58024400 	.word	0x58024400
 800c8e8:	4a742400 	.word	0x4a742400
 800c8ec:	39000000 	.word	0x39000000
 800c8f0:	03d09000 	.word	0x03d09000
 800c8f4:	4bbebc20 	.word	0x4bbebc20
 800c8f8:	4c742400 	.word	0x4c742400

0800c8fc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8fc:	4b4f      	ldr	r3, [pc, #316]	; (800ca3c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800c8fe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c900:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c902:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c904:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800c906:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c90a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c90e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800c910:	d05c      	beq.n	800c9cc <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c912:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c916:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c91a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c91e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c922:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c924:	ee07 4a90 	vmov	s15, r4
 800c928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c92c:	d07e      	beq.n	800ca2c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800c92e:	2902      	cmp	r1, #2
 800c930:	d075      	beq.n	800ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800c932:	2900      	cmp	r1, #0
 800c934:	d04f      	beq.n	800c9d6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c936:	ee07 2a90 	vmov	s15, r2
 800c93a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800ca40 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800c93e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c944:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c948:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ca44 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c950:	ee06 3a90 	vmov	s13, r3
 800c954:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c958:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c95c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c960:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c964:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c968:	4a34      	ldr	r2, [pc, #208]	; (800ca3c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800c96a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c96e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c970:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c974:	ee07 3a10 	vmov	s14, r3
 800c978:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c97c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c97e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c98a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c98e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c990:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c994:	ee07 3a10 	vmov	s14, r3
 800c998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c99c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9a8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c9ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c9ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c9c6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c9ca:	4770      	bx	lr
 800c9cc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c9ce:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c9d2:	6082      	str	r2, [r0, #8]
}
 800c9d4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d6:	6819      	ldr	r1, [r3, #0]
 800c9d8:	0689      	lsls	r1, r1, #26
 800c9da:	d5ac      	bpl.n	800c936 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9dc:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9de:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9e2:	4919      	ldr	r1, [pc, #100]	; (800ca48 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ea:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9f2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800ca44 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9fa:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9fc:	ee06 3a90 	vmov	s13, r3
 800ca00:	ee05 1a90 	vmov	s11, r1
 800ca04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ca08:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ca0c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ca10:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800ca14:	eee7 6a05 	vfma.f32	s13, s14, s10
 800ca18:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ca1c:	e7a4      	b.n	800c968 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca1e:	ee07 2a90 	vmov	s15, r2
 800ca22:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800ca26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca2a:	e78a      	b.n	800c942 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca2c:	ee07 2a90 	vmov	s15, r2
 800ca30:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800ca34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca38:	e783      	b.n	800c942 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800ca3a:	bf00      	nop
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	4c742400 	.word	0x4c742400
 800ca44:	39000000 	.word	0x39000000
 800ca48:	03d09000 	.word	0x03d09000
 800ca4c:	4bbebc20 	.word	0x4bbebc20
 800ca50:	4a742400 	.word	0x4a742400

0800ca54 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ca54:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ca58:	430b      	orrs	r3, r1
{
 800ca5a:	b500      	push	{lr}
 800ca5c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ca5e:	f000 8084 	beq.w	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ca62:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800ca66:	430b      	orrs	r3, r1
 800ca68:	d039      	beq.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ca6a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800ca6e:	430b      	orrs	r3, r1
 800ca70:	f000 80e6 	beq.w	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca74:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	f000 8089 	beq.w	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca7e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800ca82:	430b      	orrs	r3, r1
 800ca84:	d061      	beq.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca86:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800ca8a:	430b      	orrs	r3, r1
 800ca8c:	f000 8112 	beq.w	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ca90:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800ca94:	430b      	orrs	r3, r1
 800ca96:	f000 80a3 	beq.w	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ca9a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800ca9e:	430b      	orrs	r3, r1
 800caa0:	f000 80fa 	beq.w	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800caa4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800caa8:	430b      	orrs	r3, r1
 800caaa:	f000 8143 	beq.w	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800caae:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800cab2:	ea50 0301 	orrs.w	r3, r0, r1
 800cab6:	d137      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cab8:	4a99      	ldr	r2, [pc, #612]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800caba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cabc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800cac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cac4:	f000 8083 	beq.w	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cacc:	f000 8156 	beq.w	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cad0:	bb53      	cbnz	r3, 800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cad2:	6810      	ldr	r0, [r2, #0]
 800cad4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cad8:	d044      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800cada:	4892      	ldr	r0, [pc, #584]	; (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800cadc:	e042      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800cade:	4a90      	ldr	r2, [pc, #576]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cae0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cae2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800cae6:	2b80      	cmp	r3, #128	; 0x80
 800cae8:	f000 80a5 	beq.w	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800caec:	d920      	bls.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800caee:	2bc0      	cmp	r3, #192	; 0xc0
 800caf0:	d037      	beq.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800caf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caf6:	d117      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caf8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cafa:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cafc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb00:	0749      	lsls	r1, r1, #29
 800cb02:	d502      	bpl.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80c1 	beq.w	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb0a:	4a85      	ldr	r2, [pc, #532]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb0c:	6812      	ldr	r2, [r2, #0]
 800cb0e:	05d0      	lsls	r0, r2, #23
 800cb10:	d503      	bpl.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800cb12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb16:	f000 8101 	beq.w	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb1a:	4a81      	ldr	r2, [pc, #516]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb1c:	6812      	ldr	r2, [r2, #0]
 800cb1e:	0391      	lsls	r1, r2, #14
 800cb20:	d502      	bpl.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cb22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb26:	d0d8      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800cb28:	2000      	movs	r0, #0
}
 800cb2a:	b005      	add	sp, #20
 800cb2c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d04c      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cb34:	2b40      	cmp	r3, #64	; 0x40
 800cb36:	d1f7      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb38:	6810      	ldr	r0, [r2, #0]
 800cb3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cb3e:	d011      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb40:	a801      	add	r0, sp, #4
 800cb42:	f7ff fd83 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb46:	9801      	ldr	r0, [sp, #4]
 800cb48:	e00c      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb4a:	4a75      	ldr	r2, [pc, #468]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb4e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800cb52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb56:	d06e      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cb58:	d937      	bls.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800cb5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb5e:	f040 8087 	bne.w	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb62:	4871      	ldr	r0, [pc, #452]	; (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800cb64:	b005      	add	sp, #20
 800cb66:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cb6a:	4b6d      	ldr	r3, [pc, #436]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d8d8      	bhi.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cb76:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cc1f 	.word	0x0800cc1f
 800cb80:	0800cbfb 	.word	0x0800cbfb
 800cb84:	0800cc0b 	.word	0x0800cc0b
 800cb88:	0800cb63 	.word	0x0800cb63
 800cb8c:	0800cc07 	.word	0x0800cc07
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cb90:	4a63      	ldr	r2, [pc, #396]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cb94:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800cb98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb9c:	d04b      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cb9e:	d944      	bls.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800cba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cba4:	d0dd      	beq.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbaa:	d1bd      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbae:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbb4:	0752      	lsls	r2, r2, #29
 800cbb6:	d5a8      	bpl.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1a6      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbbc:	4b58      	ldr	r3, [pc, #352]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbbe:	485b      	ldr	r0, [pc, #364]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cbc6:	40d8      	lsrs	r0, r3
 800cbc8:	e7cc      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d154      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbce:	6810      	ldr	r0, [r2, #0]
 800cbd0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800cbd4:	d0c6      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbd6:	a801      	add	r0, sp, #4
 800cbd8:	f7ff fe90 	bl	800c8fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbdc:	9802      	ldr	r0, [sp, #8]
 800cbde:	e7c1      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cbe0:	4a4f      	ldr	r2, [pc, #316]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbe2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cbe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800cbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbec:	f000 80d0 	beq.w	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800cbf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbf4:	d0da      	beq.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d196      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbfa:	4b49      	ldr	r3, [pc, #292]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbfc:	6818      	ldr	r0, [r3, #0]
 800cbfe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cc02:	d0af      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cc04:	e79c      	b.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc06:	4a46      	ldr	r2, [pc, #280]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc08:	e776      	b.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc0a:	4b45      	ldr	r3, [pc, #276]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cc12:	d0a7      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc14:	a801      	add	r0, sp, #4
 800cc16:	f7ff fdc5 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc1a:	9801      	ldr	r0, [sp, #4]
 800cc1c:	e7a2      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc1e:	4b40      	ldr	r3, [pc, #256]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800cc26:	d09d      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cc28:	e7d5      	b.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0cf      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cc2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc32:	d081      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cc34:	e778      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc36:	6810      	ldr	r0, [r2, #0]
 800cc38:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cc3c:	d092      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cc3e:	e7e9      	b.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cc40:	4a37      	ldr	r2, [pc, #220]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc44:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800cc48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc4c:	d0f3      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cc4e:	d806      	bhi.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0bc      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cc54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc58:	f43f af6e 	beq.w	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cc5c:	e764      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cc5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc62:	f43f af7e 	beq.w	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cc66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc6a:	f43f af45 	beq.w	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800cc6e:	e75b      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800cc70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc74:	d09a      	beq.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cc76:	e757      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cc78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc7c:	f43f af5c 	beq.w	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cc80:	e752      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc82:	6810      	ldr	r0, [r2, #0]
 800cc84:	f010 0004 	ands.w	r0, r0, #4
 800cc88:	f43f af6c 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc8c:	6813      	ldr	r3, [r2, #0]
 800cc8e:	4827      	ldr	r0, [pc, #156]	; (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cc90:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cc94:	40d8      	lsrs	r0, r3
 800cc96:	e765      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc98:	4b21      	ldr	r3, [pc, #132]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800cc9c:	03d2      	lsls	r2, r2, #15
 800cc9e:	d5bf      	bpl.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cca6:	f43f af5d 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccaa:	a801      	add	r0, sp, #4
 800ccac:	f7ff fcce 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ccb0:	9803      	ldr	r0, [sp, #12]
 800ccb2:	e757      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccb4:	4a1a      	ldr	r2, [pc, #104]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccb6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ccb8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800ccbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccc0:	d0df      	beq.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ccc2:	d810      	bhi.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800ccc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc8:	d058      	beq.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ccca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccce:	d118      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccd0:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccd2:	6818      	ldr	r0, [r3, #0]
 800ccd4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ccd8:	f43f af44 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccdc:	a801      	add	r0, sp, #4
 800ccde:	f7ff fd61 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cce2:	9802      	ldr	r0, [sp, #8]
 800cce4:	e73e      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccea:	d012      	beq.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800ccec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccf0:	f47f af1a 	bne.w	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccf6:	6818      	ldr	r0, [r3, #0]
 800ccf8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800ccfc:	f43f af32 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cd00:	e6eb      	b.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f47f af10 	bne.w	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800cd08:	b005      	add	sp, #20
 800cd0a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fe bd0b 	b.w	800b728 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd12:	6810      	ldr	r0, [r2, #0]
 800cd14:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800cd18:	f43f af24 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800cd1c:	4804      	ldr	r0, [pc, #16]	; (800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800cd1e:	e721      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cd20:	58024400 	.word	0x58024400
 800cd24:	017d7840 	.word	0x017d7840
 800cd28:	00bb8000 	.word	0x00bb8000
 800cd2c:	03d09000 	.word	0x03d09000
 800cd30:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd34:	4b28      	ldr	r3, [pc, #160]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800cd3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd40:	d037      	beq.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800cd42:	d814      	bhi.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800cd44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd48:	d03f      	beq.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800cd4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4e:	d0bf      	beq.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f47f aee9 	bne.w	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd56:	f7fe fca7 	bl	800b6a8 <HAL_RCC_GetHCLKFreq>
 800cd5a:	4b1f      	ldr	r3, [pc, #124]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cd5c:	4a1f      	ldr	r2, [pc, #124]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cd64:	5cd3      	ldrb	r3, [r2, r3]
 800cd66:	f003 031f 	and.w	r3, r3, #31
 800cd6a:	40d8      	lsrs	r0, r3
        break;
 800cd6c:	e6fa      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd72:	d017      	beq.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800cd74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd78:	d0bc      	beq.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800cd7a:	e6d5      	b.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd7c:	6810      	ldr	r0, [r2, #0]
 800cd7e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cd82:	f43f aeef 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd86:	a801      	add	r0, sp, #4
 800cd88:	f7ff fc60 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd8c:	9802      	ldr	r0, [sp, #8]
 800cd8e:	e6e9      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd90:	6810      	ldr	r0, [r2, #0]
 800cd92:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cd96:	f43f aee5 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd9a:	a801      	add	r0, sp, #4
 800cd9c:	f7ff fd02 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cda0:	9803      	ldr	r0, [sp, #12]
 800cda2:	e6df      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cda4:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cda6:	6818      	ldr	r0, [r3, #0]
 800cda8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800cdac:	f43f aeda 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cdb0:	e7b4      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdb2:	4b09      	ldr	r3, [pc, #36]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	f010 0004 	ands.w	r0, r0, #4
 800cdba:	f43f aed3 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4807      	ldr	r0, [pc, #28]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800cdc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cdc6:	40d8      	lsrs	r0, r3
 800cdc8:	e6cc      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdca:	4b03      	ldr	r3, [pc, #12]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cdd2:	f43f aec7 	beq.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cdd6:	e7d6      	b.n	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	08018a30 	.word	0x08018a30
 800cde0:	03d09000 	.word	0x03d09000

0800cde4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cde4:	2800      	cmp	r0, #0
 800cde6:	f000 80a5 	beq.w	800cf34 <HAL_TIM_Base_Init+0x150>
{
 800cdea:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d076      	beq.n	800cee8 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdfa:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800cdfc:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdfe:	494e      	ldr	r1, [pc, #312]	; (800cf38 <HAL_TIM_Base_Init+0x154>)
 800ce00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800ce04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce08:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800ce0c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce0e:	fab1 f181 	clz	r1, r1
 800ce12:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800ce16:	d027      	beq.n	800ce68 <HAL_TIM_Base_Init+0x84>
 800ce18:	bb31      	cbnz	r1, 800ce68 <HAL_TIM_Base_Init+0x84>
 800ce1a:	4848      	ldr	r0, [pc, #288]	; (800cf3c <HAL_TIM_Base_Init+0x158>)
 800ce1c:	4d48      	ldr	r5, [pc, #288]	; (800cf40 <HAL_TIM_Base_Init+0x15c>)
 800ce1e:	4282      	cmp	r2, r0
 800ce20:	d067      	beq.n	800cef2 <HAL_TIM_Base_Init+0x10e>
 800ce22:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ce26:	4282      	cmp	r2, r0
 800ce28:	d063      	beq.n	800cef2 <HAL_TIM_Base_Init+0x10e>
 800ce2a:	1b55      	subs	r5, r2, r5
 800ce2c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ce30:	fab5 f585 	clz	r5, r5
 800ce34:	4282      	cmp	r2, r0
 800ce36:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800ce3a:	d063      	beq.n	800cf04 <HAL_TIM_Base_Init+0x120>
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	d161      	bne.n	800cf04 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce40:	4840      	ldr	r0, [pc, #256]	; (800cf44 <HAL_TIM_Base_Init+0x160>)
 800ce42:	4941      	ldr	r1, [pc, #260]	; (800cf48 <HAL_TIM_Base_Init+0x164>)
 800ce44:	428a      	cmp	r2, r1
 800ce46:	bf18      	it	ne
 800ce48:	4282      	cmpne	r2, r0
 800ce4a:	d065      	beq.n	800cf18 <HAL_TIM_Base_Init+0x134>
 800ce4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ce50:	428a      	cmp	r2, r1
 800ce52:	d061      	beq.n	800cf18 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce54:	69a0      	ldr	r0, [r4, #24]
 800ce56:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce5a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce5c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800ce5e:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce60:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce62:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce64:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce66:	e023      	b.n	800ceb0 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce68:	4d35      	ldr	r5, [pc, #212]	; (800cf40 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce6e:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce70:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800ce72:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce74:	fab5 f585 	clz	r5, r5
 800ce78:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce7a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce82:	69a0      	ldr	r0, [r4, #24]
 800ce84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce88:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800ce8a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce8c:	68e3      	ldr	r3, [r4, #12]
 800ce8e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce90:	6863      	ldr	r3, [r4, #4]
 800ce92:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce94:	b951      	cbnz	r1, 800ceac <HAL_TIM_Base_Init+0xc8>
 800ce96:	b94d      	cbnz	r5, 800ceac <HAL_TIM_Base_Init+0xc8>
 800ce98:	492a      	ldr	r1, [pc, #168]	; (800cf44 <HAL_TIM_Base_Init+0x160>)
 800ce9a:	4b2b      	ldr	r3, [pc, #172]	; (800cf48 <HAL_TIM_Base_Init+0x164>)
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	bf18      	it	ne
 800cea0:	428a      	cmpne	r2, r1
 800cea2:	d003      	beq.n	800ceac <HAL_TIM_Base_Init+0xc8>
 800cea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d101      	bne.n	800ceb0 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ceac:	6963      	ldr	r3, [r4, #20]
 800ceae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ceb0:	2301      	movs	r3, #1
  return HAL_OK;
 800ceb2:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800ceb4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ceb6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800cebe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800cec2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cec6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ceca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ced2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ced6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ceda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800cede:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cee2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cee8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ceec:	f7fa f898 	bl	8007020 <HAL_TIM_Base_MspInit>
 800cef0:	e783      	b.n	800cdfa <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cef2:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cef8:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cefa:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800cefe:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf00:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf02:	e7ba      	b.n	800ce7a <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800cf04:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cf0a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf0c:	480f      	ldr	r0, [pc, #60]	; (800cf4c <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf0e:	4282      	cmp	r2, r0
 800cf10:	d0b3      	beq.n	800ce7a <HAL_TIM_Base_Init+0x96>
 800cf12:	2d00      	cmp	r5, #0
 800cf14:	d1b1      	bne.n	800ce7a <HAL_TIM_Base_Init+0x96>
 800cf16:	e793      	b.n	800ce40 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf18:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf1e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf20:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf22:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf28:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800cf2a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800cf2c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf2e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf30:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf32:	e7b1      	b.n	800ce98 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800cf34:	2001      	movs	r0, #1
}
 800cf36:	4770      	bx	lr
 800cf38:	40010000 	.word	0x40010000
 800cf3c:	40000400 	.word	0x40000400
 800cf40:	40010400 	.word	0x40010400
 800cf44:	40014000 	.word	0x40014000
 800cf48:	40014400 	.word	0x40014400
 800cf4c:	40000c00 	.word	0x40000c00

0800cf50 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800cf50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d13d      	bne.n	800cfd4 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf58:	6802      	ldr	r2, [r0, #0]
 800cf5a:	4b23      	ldr	r3, [pc, #140]	; (800cfe8 <HAL_TIM_Base_Start+0x98>)
 800cf5c:	4923      	ldr	r1, [pc, #140]	; (800cfec <HAL_TIM_Base_Start+0x9c>)
 800cf5e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cf62:	bf18      	it	ne
 800cf64:	429a      	cmpne	r2, r3
{
 800cf66:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf68:	bf0c      	ite	eq
 800cf6a:	2301      	moveq	r3, #1
 800cf6c:	2300      	movne	r3, #0
 800cf6e:	4d20      	ldr	r5, [pc, #128]	; (800cff0 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cf70:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf72:	42aa      	cmp	r2, r5
 800cf74:	bf08      	it	eq
 800cf76:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cf7a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf7e:	4c1d      	ldr	r4, [pc, #116]	; (800cff4 <HAL_TIM_Base_Start+0xa4>)
 800cf80:	428a      	cmp	r2, r1
 800cf82:	bf08      	it	eq
 800cf84:	f043 0301 	orreq.w	r3, r3, #1
 800cf88:	481b      	ldr	r0, [pc, #108]	; (800cff8 <HAL_TIM_Base_Start+0xa8>)
 800cf8a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800cf8e:	42a2      	cmp	r2, r4
 800cf90:	bf08      	it	eq
 800cf92:	f043 0301 	orreq.w	r3, r3, #1
 800cf96:	4282      	cmp	r2, r0
 800cf98:	bf08      	it	eq
 800cf9a:	f043 0301 	orreq.w	r3, r3, #1
 800cf9e:	428a      	cmp	r2, r1
 800cfa0:	bf08      	it	eq
 800cfa2:	f043 0301 	orreq.w	r3, r3, #1
 800cfa6:	b933      	cbnz	r3, 800cfb6 <HAL_TIM_Base_Start+0x66>
 800cfa8:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800cfac:	1a10      	subs	r0, r2, r0
 800cfae:	fab0 f080 	clz	r0, r0
 800cfb2:	0940      	lsrs	r0, r0, #5
 800cfb4:	b198      	cbz	r0, 800cfde <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfb6:	6891      	ldr	r1, [r2, #8]
 800cfb8:	4b10      	ldr	r3, [pc, #64]	; (800cffc <HAL_TIM_Base_Start+0xac>)
 800cfba:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfbc:	2b06      	cmp	r3, #6
 800cfbe:	d00b      	beq.n	800cfd8 <HAL_TIM_Base_Start+0x88>
 800cfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc4:	d008      	beq.n	800cfd8 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800cfc6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800cfc8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800cfca:	f043 0301 	orr.w	r3, r3, #1
 800cfce:	6013      	str	r3, [r2, #0]
}
 800cfd0:	bc30      	pop	{r4, r5}
 800cfd2:	4770      	bx	lr
    return HAL_ERROR;
 800cfd4:	2001      	movs	r0, #1
}
 800cfd6:	4770      	bx	lr
  return HAL_OK;
 800cfd8:	2000      	movs	r0, #0
}
 800cfda:	bc30      	pop	{r4, r5}
 800cfdc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800cfde:	6813      	ldr	r3, [r2, #0]
 800cfe0:	f043 0301 	orr.w	r3, r3, #1
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	e7f3      	b.n	800cfd0 <HAL_TIM_Base_Start+0x80>
 800cfe8:	40010000 	.word	0x40010000
 800cfec:	40000800 	.word	0x40000800
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40000c00 	.word	0x40000c00
 800cff8:	40010400 	.word	0x40010400
 800cffc:	00010007 	.word	0x00010007

0800d000 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d004:	2b01      	cmp	r3, #1
 800d006:	d141      	bne.n	800d08c <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d008:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d00a:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d00c:	4b24      	ldr	r3, [pc, #144]	; (800d0a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800d00e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d012:	bf18      	it	ne
 800d014:	429a      	cmpne	r2, r3
{
 800d016:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d018:	bf0c      	ite	eq
 800d01a:	2301      	moveq	r3, #1
 800d01c:	2300      	movne	r3, #0
 800d01e:	4d21      	ldr	r5, [pc, #132]	; (800d0a4 <HAL_TIM_Base_Start_IT+0xa4>)
 800d020:	4c21      	ldr	r4, [pc, #132]	; (800d0a8 <HAL_TIM_Base_Start_IT+0xa8>)
 800d022:	42aa      	cmp	r2, r5
 800d024:	bf08      	it	eq
 800d026:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d02a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d02e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d030:	42a2      	cmp	r2, r4
 800d032:	bf08      	it	eq
 800d034:	f043 0301 	orreq.w	r3, r3, #1
 800d038:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d03c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d040:	481a      	ldr	r0, [pc, #104]	; (800d0ac <HAL_TIM_Base_Start_IT+0xac>)
 800d042:	42a2      	cmp	r2, r4
 800d044:	bf08      	it	eq
 800d046:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d04a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04c:	4282      	cmp	r2, r0
 800d04e:	bf08      	it	eq
 800d050:	f043 0301 	orreq.w	r3, r3, #1
 800d054:	4916      	ldr	r1, [pc, #88]	; (800d0b0 <HAL_TIM_Base_Start_IT+0xb0>)
 800d056:	428a      	cmp	r2, r1
 800d058:	bf08      	it	eq
 800d05a:	f043 0301 	orreq.w	r3, r3, #1
 800d05e:	b933      	cbnz	r3, 800d06e <HAL_TIM_Base_Start_IT+0x6e>
 800d060:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d064:	1a10      	subs	r0, r2, r0
 800d066:	fab0 f080 	clz	r0, r0
 800d06a:	0940      	lsrs	r0, r0, #5
 800d06c:	b198      	cbz	r0, 800d096 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d06e:	6891      	ldr	r1, [r2, #8]
 800d070:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800d072:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d074:	2b06      	cmp	r3, #6
 800d076:	d00b      	beq.n	800d090 <HAL_TIM_Base_Start_IT+0x90>
 800d078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d07c:	d008      	beq.n	800d090 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800d07e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d080:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d082:	f043 0301 	orr.w	r3, r3, #1
 800d086:	6013      	str	r3, [r2, #0]
}
 800d088:	bc30      	pop	{r4, r5}
 800d08a:	4770      	bx	lr
    return HAL_ERROR;
 800d08c:	2001      	movs	r0, #1
}
 800d08e:	4770      	bx	lr
  return HAL_OK;
 800d090:	2000      	movs	r0, #0
}
 800d092:	bc30      	pop	{r4, r5}
 800d094:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d096:	6813      	ldr	r3, [r2, #0]
 800d098:	f043 0301 	orr.w	r3, r3, #1
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e7f3      	b.n	800d088 <HAL_TIM_Base_Start_IT+0x88>
 800d0a0:	40010000 	.word	0x40010000
 800d0a4:	40000400 	.word	0x40000400
 800d0a8:	40000800 	.word	0x40000800
 800d0ac:	40010400 	.word	0x40010400
 800d0b0:	40001800 	.word	0x40001800
 800d0b4:	00010007 	.word	0x00010007

0800d0b8 <HAL_TIM_IC_MspInit>:
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f000 80a5 	beq.w	800d20c <HAL_TIM_IC_Init+0x150>
{
 800d0c2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d0c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d076      	beq.n	800d1c0 <HAL_TIM_IC_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0d2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d4:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0d6:	494e      	ldr	r1, [pc, #312]	; (800d210 <HAL_TIM_IC_Init+0x154>)
 800d0d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800d0dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0e0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800d0e4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0e6:	fab1 f181 	clz	r1, r1
 800d0ea:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d0ee:	d027      	beq.n	800d140 <HAL_TIM_IC_Init+0x84>
 800d0f0:	bb31      	cbnz	r1, 800d140 <HAL_TIM_IC_Init+0x84>
 800d0f2:	4848      	ldr	r0, [pc, #288]	; (800d214 <HAL_TIM_IC_Init+0x158>)
 800d0f4:	4d48      	ldr	r5, [pc, #288]	; (800d218 <HAL_TIM_IC_Init+0x15c>)
 800d0f6:	4282      	cmp	r2, r0
 800d0f8:	d067      	beq.n	800d1ca <HAL_TIM_IC_Init+0x10e>
 800d0fa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d0fe:	4282      	cmp	r2, r0
 800d100:	d063      	beq.n	800d1ca <HAL_TIM_IC_Init+0x10e>
 800d102:	1b55      	subs	r5, r2, r5
 800d104:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d108:	fab5 f585 	clz	r5, r5
 800d10c:	4282      	cmp	r2, r0
 800d10e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d112:	d063      	beq.n	800d1dc <HAL_TIM_IC_Init+0x120>
 800d114:	2d00      	cmp	r5, #0
 800d116:	d161      	bne.n	800d1dc <HAL_TIM_IC_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d118:	4840      	ldr	r0, [pc, #256]	; (800d21c <HAL_TIM_IC_Init+0x160>)
 800d11a:	4941      	ldr	r1, [pc, #260]	; (800d220 <HAL_TIM_IC_Init+0x164>)
 800d11c:	428a      	cmp	r2, r1
 800d11e:	bf18      	it	ne
 800d120:	4282      	cmpne	r2, r0
 800d122:	d065      	beq.n	800d1f0 <HAL_TIM_IC_Init+0x134>
 800d124:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d128:	428a      	cmp	r2, r1
 800d12a:	d061      	beq.n	800d1f0 <HAL_TIM_IC_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d12c:	69a0      	ldr	r0, [r4, #24]
 800d12e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d132:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d134:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d136:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800d138:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d13a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d13c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d13e:	e023      	b.n	800d188 <HAL_TIM_IC_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d140:	4d35      	ldr	r5, [pc, #212]	; (800d218 <HAL_TIM_IC_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d146:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d148:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800d14a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d14c:	fab5 f585 	clz	r5, r5
 800d150:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d152:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d158:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d15a:	69a0      	ldr	r0, [r4, #24]
 800d15c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d160:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d162:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d164:	68e3      	ldr	r3, [r4, #12]
 800d166:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d168:	6863      	ldr	r3, [r4, #4]
 800d16a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d16c:	b951      	cbnz	r1, 800d184 <HAL_TIM_IC_Init+0xc8>
 800d16e:	b94d      	cbnz	r5, 800d184 <HAL_TIM_IC_Init+0xc8>
 800d170:	492a      	ldr	r1, [pc, #168]	; (800d21c <HAL_TIM_IC_Init+0x160>)
 800d172:	4b2b      	ldr	r3, [pc, #172]	; (800d220 <HAL_TIM_IC_Init+0x164>)
 800d174:	429a      	cmp	r2, r3
 800d176:	bf18      	it	ne
 800d178:	428a      	cmpne	r2, r1
 800d17a:	d003      	beq.n	800d184 <HAL_TIM_IC_Init+0xc8>
 800d17c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d180:	429a      	cmp	r2, r3
 800d182:	d101      	bne.n	800d188 <HAL_TIM_IC_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800d184:	6963      	ldr	r3, [r4, #20]
 800d186:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800d188:	2301      	movs	r3, #1
  return HAL_OK;
 800d18a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800d18c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d18e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d192:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d196:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d19a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d19e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d1a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d1b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d1ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800d1c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800d1c4:	f7ff ff78 	bl	800d0b8 <HAL_TIM_IC_MspInit>
 800d1c8:	e783      	b.n	800d0d2 <HAL_TIM_IC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1ca:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d1d0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1d2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800d1d6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1d8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d1da:	e7ba      	b.n	800d152 <HAL_TIM_IC_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800d1dc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d1e2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e4:	480f      	ldr	r0, [pc, #60]	; (800d224 <HAL_TIM_IC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d1e6:	4282      	cmp	r2, r0
 800d1e8:	d0b3      	beq.n	800d152 <HAL_TIM_IC_Init+0x96>
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	d1b1      	bne.n	800d152 <HAL_TIM_IC_Init+0x96>
 800d1ee:	e793      	b.n	800d118 <HAL_TIM_IC_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1f0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1f6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1f8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d200:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d202:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d204:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d206:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d208:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d20a:	e7b1      	b.n	800d170 <HAL_TIM_IC_Init+0xb4>
    return HAL_ERROR;
 800d20c:	2001      	movs	r0, #1
}
 800d20e:	4770      	bx	lr
 800d210:	40010000 	.word	0x40010000
 800d214:	40000400 	.word	0x40000400
 800d218:	40010400 	.word	0x40010400
 800d21c:	40014000 	.word	0x40014000
 800d220:	40014400 	.word	0x40014400
 800d224:	40000c00 	.word	0x40000c00

0800d228 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800d228:	2800      	cmp	r0, #0
 800d22a:	f000 80cc 	beq.w	800d3c6 <HAL_TIM_Encoder_Init+0x19e>
{
 800d22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d230:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d234:	4604      	mov	r4, r0
 800d236:	460d      	mov	r5, r1
 800d238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 809b 	beq.w	800d378 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d242:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d244:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d246:	4a61      	ldr	r2, [pc, #388]	; (800d3cc <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d248:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d250:	6899      	ldr	r1, [r3, #8]
 800d252:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d256:	495e      	ldr	r1, [pc, #376]	; (800d3d0 <HAL_TIM_Encoder_Init+0x1a8>)
 800d258:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d25c:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800d25e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d260:	fab1 f181 	clz	r1, r1
 800d264:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d268:	d02b      	beq.n	800d2c2 <HAL_TIM_Encoder_Init+0x9a>
 800d26a:	bb51      	cbnz	r1, 800d2c2 <HAL_TIM_Encoder_Init+0x9a>
 800d26c:	4859      	ldr	r0, [pc, #356]	; (800d3d4 <HAL_TIM_Encoder_Init+0x1ac>)
 800d26e:	4283      	cmp	r3, r0
 800d270:	f000 8087 	beq.w	800d382 <HAL_TIM_Encoder_Init+0x15a>
 800d274:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d278:	4283      	cmp	r3, r0
 800d27a:	f000 8082 	beq.w	800d382 <HAL_TIM_Encoder_Init+0x15a>
 800d27e:	4e56      	ldr	r6, [pc, #344]	; (800d3d8 <HAL_TIM_Encoder_Init+0x1b0>)
 800d280:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d284:	1b9e      	subs	r6, r3, r6
 800d286:	4283      	cmp	r3, r0
 800d288:	fab6 f686 	clz	r6, r6
 800d28c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800d290:	f000 8081 	beq.w	800d396 <HAL_TIM_Encoder_Init+0x16e>
 800d294:	2e00      	cmp	r6, #0
 800d296:	d17e      	bne.n	800d396 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d298:	4850      	ldr	r0, [pc, #320]	; (800d3dc <HAL_TIM_Encoder_Init+0x1b4>)
 800d29a:	4951      	ldr	r1, [pc, #324]	; (800d3e0 <HAL_TIM_Encoder_Init+0x1b8>)
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf18      	it	ne
 800d2a0:	4283      	cmpne	r3, r0
 800d2a2:	f000 8082 	beq.w	800d3aa <HAL_TIM_Encoder_Init+0x182>
 800d2a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2aa:	428b      	cmp	r3, r1
 800d2ac:	d07d      	beq.n	800d3aa <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2ae:	69a1      	ldr	r1, [r4, #24]
 800d2b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2b4:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2b6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d2b8:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d2ba:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2bc:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d2be:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2c0:	e023      	b.n	800d30a <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2c2:	4e45      	ldr	r6, [pc, #276]	; (800d3d8 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d2c8:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2ca:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d2cc:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2ce:	fab6 f686 	clz	r6, r6
 800d2d2:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2d4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2da:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2dc:	69a0      	ldr	r0, [r4, #24]
 800d2de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2e2:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800d2e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2e6:	68e2      	ldr	r2, [r4, #12]
 800d2e8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d2ea:	6862      	ldr	r2, [r4, #4]
 800d2ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2ee:	b951      	cbnz	r1, 800d306 <HAL_TIM_Encoder_Init+0xde>
 800d2f0:	b94e      	cbnz	r6, 800d306 <HAL_TIM_Encoder_Init+0xde>
 800d2f2:	493a      	ldr	r1, [pc, #232]	; (800d3dc <HAL_TIM_Encoder_Init+0x1b4>)
 800d2f4:	4a3a      	ldr	r2, [pc, #232]	; (800d3e0 <HAL_TIM_Encoder_Init+0x1b8>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	bf18      	it	ne
 800d2fa:	428b      	cmpne	r3, r1
 800d2fc:	d003      	beq.n	800d306 <HAL_TIM_Encoder_Init+0xde>
 800d2fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d302:	4293      	cmp	r3, r2
 800d304:	d101      	bne.n	800d30a <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800d306:	6962      	ldr	r2, [r4, #20]
 800d308:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d30a:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800d30c:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d30e:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d310:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d314:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800d316:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d318:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d31c:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800d31e:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d320:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800d324:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d326:	492f      	ldr	r1, [pc, #188]	; (800d3e4 <HAL_TIM_Encoder_Init+0x1bc>)
 800d328:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d32a:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d32c:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d330:	68e9      	ldr	r1, [r5, #12]
 800d332:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800d334:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d336:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d33a:	6a29      	ldr	r1, [r5, #32]
 800d33c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d340:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800d342:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d344:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800d348:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d34a:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800d34e:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d350:	4825      	ldr	r0, [pc, #148]	; (800d3e8 <HAL_TIM_Encoder_Init+0x1c0>)
 800d352:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d356:	4302      	orrs	r2, r0
  return HAL_OK;
 800d358:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800d35a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800d35c:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d35e:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d362:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d366:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d36a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d36e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800d372:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800d376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800d378:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800d37c:	f7f9 fedc 	bl	8007138 <HAL_TIM_Encoder_MspInit>
 800d380:	e75f      	b.n	800d242 <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d382:	4e15      	ldr	r6, [pc, #84]	; (800d3d8 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d384:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d388:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d38a:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d38c:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d38e:	fab6 f686 	clz	r6, r6
 800d392:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d394:	e79e      	b.n	800d2d4 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800d396:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d398:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d39c:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d39e:	4813      	ldr	r0, [pc, #76]	; (800d3ec <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3a0:	4283      	cmp	r3, r0
 800d3a2:	d097      	beq.n	800d2d4 <HAL_TIM_Encoder_Init+0xac>
 800d3a4:	2e00      	cmp	r6, #0
 800d3a6:	d195      	bne.n	800d2d4 <HAL_TIM_Encoder_Init+0xac>
 800d3a8:	e776      	b.n	800d298 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3aa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3b0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3b2:	69a1      	ldr	r1, [r4, #24]
 800d3b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3b8:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3ba:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d3bc:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d3be:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3c0:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d3c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3c4:	e795      	b.n	800d2f2 <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800d3c6:	2001      	movs	r0, #1
}
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	fffebff8 	.word	0xfffebff8
 800d3d0:	40010000 	.word	0x40010000
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40010400 	.word	0x40010400
 800d3dc:	40014000 	.word	0x40014000
 800d3e0:	40014400 	.word	0x40014400
 800d3e4:	fffffcfc 	.word	0xfffffcfc
 800d3e8:	ffff0303 	.word	0xffff0303
 800d3ec:	40000c00 	.word	0x40000c00

0800d3f0 <HAL_TIM_Encoder_Start>:
{
 800d3f0:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d3f2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d3f6:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d3fa:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d3fe:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d400:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d404:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800d406:	b9c1      	cbnz	r1, 800d43a <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d123      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
 800d40c:	2a01      	cmp	r2, #1
 800d40e:	d121      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d410:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d412:	2302      	movs	r3, #2
 800d414:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d418:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d41c:	6a13      	ldr	r3, [r2, #32]
 800d41e:	f023 0301 	bic.w	r3, r3, #1
 800d422:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d424:	6a13      	ldr	r3, [r2, #32]
 800d426:	f043 0301 	orr.w	r3, r3, #1
 800d42a:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800d42c:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d42e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800d430:	f043 0301 	orr.w	r3, r3, #1
 800d434:	6013      	str	r3, [r2, #0]
}
 800d436:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800d43a:	2904      	cmp	r1, #4
 800d43c:	fa5f fc8c 	uxtb.w	ip, ip
 800d440:	fa5f fe8e 	uxtb.w	lr, lr
 800d444:	d027      	beq.n	800d496 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d446:	2b01      	cmp	r3, #1
 800d448:	d104      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
 800d44a:	f1bc 0f01 	cmp.w	ip, #1
 800d44e:	d101      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d450:	2a01      	cmp	r2, #1
 800d452:	d002      	beq.n	800d45a <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800d454:	2001      	movs	r0, #1
}
 800d456:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d45a:	f1be 0f01 	cmp.w	lr, #1
 800d45e:	d1f9      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d460:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d462:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d464:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d468:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d46c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d470:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d474:	6a13      	ldr	r3, [r2, #32]
 800d476:	f023 0301 	bic.w	r3, r3, #1
 800d47a:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d47c:	6a13      	ldr	r3, [r2, #32]
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800d484:	6a13      	ldr	r3, [r2, #32]
 800d486:	f023 0310 	bic.w	r3, r3, #16
 800d48a:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d48c:	6a13      	ldr	r3, [r2, #32]
 800d48e:	f043 0310 	orr.w	r3, r3, #16
 800d492:	6213      	str	r3, [r2, #32]
}
 800d494:	e7ca      	b.n	800d42c <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d496:	f1bc 0f01 	cmp.w	ip, #1
 800d49a:	d1db      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
 800d49c:	f1be 0f01 	cmp.w	lr, #1
 800d4a0:	d1d8      	bne.n	800d454 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4a2:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d4a4:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4a6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4aa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d4ae:	e7e9      	b.n	800d484 <HAL_TIM_Encoder_Start+0x94>

0800d4b0 <HAL_TIM_IC_ConfigChannel>:
{
 800d4b0:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800d4b2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800d4b6:	2801      	cmp	r0, #1
 800d4b8:	f000 80d4 	beq.w	800d664 <HAL_TIM_IC_ConfigChannel+0x1b4>
 800d4bc:	2001      	movs	r0, #1
{
 800d4be:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800d4c0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800d4c4:	b15a      	cbz	r2, 800d4de <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 800d4c6:	2a04      	cmp	r2, #4
 800d4c8:	d054      	beq.n	800d574 <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 800d4ca:	2a08      	cmp	r2, #8
 800d4cc:	f000 80a2 	beq.w	800d614 <HAL_TIM_IC_ConfigChannel+0x164>
  else if (Channel == TIM_CHANNEL_4)
 800d4d0:	2a0c      	cmp	r2, #12
 800d4d2:	d079      	beq.n	800d5c8 <HAL_TIM_IC_ConfigChannel+0x118>
  __HAL_UNLOCK(htim);
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d4da:	bcf0      	pop	{r4, r5, r6, r7}
 800d4dc:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800d4de:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d4e0:	f8df c184 	ldr.w	ip, [pc, #388]	; 800d668 <HAL_TIM_IC_ConfigChannel+0x1b8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4e4:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d4e6:	4562      	cmp	r2, ip
    TIM_TI1_SetConfig(htim->Instance,
 800d4e8:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4ea:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 800d4ee:	e9d1 4500 	ldrd	r4, r5, [r1]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4f2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4f4:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 800d4f6:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d4f8:	d01d      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d4fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d4fe:	d01a      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d500:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 800d504:	4562      	cmp	r2, ip
 800d506:	d016      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d508:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d50c:	4562      	cmp	r2, ip
 800d50e:	d012      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d510:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d514:	4562      	cmp	r2, ip
 800d516:	d00e      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d518:	f50c 4c78 	add.w	ip, ip, #63488	; 0xf800
 800d51c:	4562      	cmp	r2, ip
 800d51e:	d00a      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d520:	f5ac 4c6c 	sub.w	ip, ip, #60416	; 0xec00
 800d524:	4562      	cmp	r2, ip
 800d526:	d006      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
 800d528:	f50c 3c94 	add.w	ip, ip, #75776	; 0x12800
 800d52c:	4562      	cmp	r2, ip
 800d52e:	d002      	beq.n	800d536 <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d530:	f047 0c01 	orr.w	ip, r7, #1
 800d534:	e003      	b.n	800d53e <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d536:	f027 0c03 	bic.w	ip, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800d53a:	ea45 0c0c 	orr.w	ip, r5, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d53e:	0100      	lsls	r0, r0, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d540:	f026 050a 	bic.w	r5, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d544:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d548:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d54c:	b2c0      	uxtb	r0, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d54e:	432c      	orrs	r4, r5
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d550:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d552:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 800d556:	6190      	str	r0, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800d558:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800d55a:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d55c:	6994      	ldr	r4, [r2, #24]
 800d55e:	f024 040c 	bic.w	r4, r4, #12
 800d562:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d564:	6991      	ldr	r1, [r2, #24]
 800d566:	4329      	orrs	r1, r5
 800d568:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d570:	bcf0      	pop	{r4, r5, r6, r7}
 800d572:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d578:	6a15      	ldr	r5, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d57a:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d57c:	f025 0510 	bic.w	r5, r5, #16
    TIM_TI2_SetConfig(htim->Instance,
 800d580:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d584:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d586:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d588:	b281      	uxth	r1, r0
  tmpccmr1 = TIMx->CCMR1;
 800d58a:	6990      	ldr	r0, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d58c:	0124      	lsls	r4, r4, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d58e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d592:	f004 04a0 	and.w	r4, r4, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d596:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d59a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d59e:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d5a0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800d5a2:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5a4:	f020 01a0 	bic.w	r1, r0, #160	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 800d5a8:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d5aa:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer;
 800d5ac:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d5ae:	6994      	ldr	r4, [r2, #24]
 800d5b0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800d5b4:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d5b6:	6991      	ldr	r1, [r2, #24]
 800d5b8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800d5bc:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d5c4:	bcf0      	pop	{r4, r5, r6, r7}
 800d5c6:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5cc:	6a15      	ldr	r5, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d5ce:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5d0:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800d5d4:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5d8:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d5da:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d5dc:	b281      	uxth	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d5de:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d5e0:	0324      	lsls	r4, r4, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d5e2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d5e6:	f404 4420 	and.w	r4, r4, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d5ea:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d5ee:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d5f2:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d5f4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 800d5f6:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d5f8:	f420 4120 	bic.w	r1, r0, #40960	; 0xa000
  HAL_StatusTypeDef status = HAL_OK;
 800d5fc:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d5fe:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer ;
 800d600:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d602:	69d4      	ldr	r4, [r2, #28]
 800d604:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800d608:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d60a:	69d1      	ldr	r1, [r2, #28]
 800d60c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800d610:	61d1      	str	r1, [r2, #28]
 800d612:	e75f      	b.n	800d4d4 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d618:	6a15      	ldr	r5, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d61a:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d61c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800d620:	e9d1 6400 	ldrd	r6, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d624:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d626:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d628:	b2c1      	uxtb	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d62a:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d62c:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d62e:	f020 0003 	bic.w	r0, r0, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d632:	f406 6620 	and.w	r6, r6, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 800d636:	4320      	orrs	r0, r4
  tmpccer = TIMx->CCER;
 800d638:	6a14      	ldr	r4, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d63a:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d63e:	f424 6420 	bic.w	r4, r4, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d642:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d644:	4334      	orrs	r4, r6
  HAL_StatusTypeDef status = HAL_OK;
 800d646:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmr2;
 800d648:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 800d64a:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d64c:	69d4      	ldr	r4, [r2, #28]
 800d64e:	f024 040c 	bic.w	r4, r4, #12
 800d652:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d654:	69d1      	ldr	r1, [r2, #28]
 800d656:	4329      	orrs	r1, r5
 800d658:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d660:	bcf0      	pop	{r4, r5, r6, r7}
 800d662:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d664:	2002      	movs	r0, #2
}
 800d666:	4770      	bx	lr
 800d668:	40010000 	.word	0x40010000

0800d66c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d66c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d670:	2b01      	cmp	r3, #1
 800d672:	f000 8081 	beq.w	800d778 <HAL_TIM_ConfigClockSource+0x10c>
 800d676:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d678:	2302      	movs	r3, #2
{
 800d67a:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800d67c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800d67e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d680:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800d684:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d688:	4b5a      	ldr	r3, [pc, #360]	; (800d7f4 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800d68a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d68c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800d68e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d690:	680b      	ldr	r3, [r1, #0]
 800d692:	2b70      	cmp	r3, #112	; 0x70
 800d694:	f000 809c 	beq.w	800d7d0 <HAL_TIM_ConfigClockSource+0x164>
 800d698:	d825      	bhi.n	800d6e6 <HAL_TIM_ConfigClockSource+0x7a>
 800d69a:	2b50      	cmp	r3, #80	; 0x50
 800d69c:	d06e      	beq.n	800d77c <HAL_TIM_ConfigClockSource+0x110>
 800d69e:	d939      	bls.n	800d714 <HAL_TIM_ConfigClockSource+0xa8>
 800d6a0:	2b60      	cmp	r3, #96	; 0x60
 800d6a2:	d118      	bne.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6a4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6a6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6a8:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6ac:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6ae:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d6b0:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800d6b2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6b8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800d6bc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6be:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800d6c2:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6c4:	4b4c      	ldr	r3, [pc, #304]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800d6c6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800d6ca:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d6cc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6ce:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d6d4:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d6d6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d6d8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d6da:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d6de:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d6e2:	bc70      	pop	{r4, r5, r6}
 800d6e4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6ea:	d060      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x142>
 800d6ec:	d933      	bls.n	800d756 <HAL_TIM_ConfigClockSource+0xea>
 800d6ee:	4943      	ldr	r1, [pc, #268]	; (800d7fc <HAL_TIM_ConfigClockSource+0x190>)
 800d6f0:	428b      	cmp	r3, r1
 800d6f2:	d006      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
 800d6f4:	d929      	bls.n	800d74a <HAL_TIM_ConfigClockSource+0xde>
 800d6f6:	4942      	ldr	r1, [pc, #264]	; (800d800 <HAL_TIM_ConfigClockSource+0x194>)
 800d6f8:	428b      	cmp	r3, r1
 800d6fa:	d002      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
 800d6fc:	3110      	adds	r1, #16
 800d6fe:	428b      	cmp	r3, r1
 800d700:	d1e9      	bne.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800d702:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d704:	493c      	ldr	r1, [pc, #240]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x18c>)
 800d706:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d708:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d70a:	430b      	orrs	r3, r1
 800d70c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d710:	60a3      	str	r3, [r4, #8]
}
 800d712:	e7e0      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d714:	2b40      	cmp	r3, #64	; 0x40
 800d716:	d123      	bne.n	800d760 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800d718:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d71a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d71c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d71e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d722:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d726:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d728:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d72a:	4b33      	ldr	r3, [pc, #204]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d72c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d72e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d730:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d734:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d738:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d73a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d73c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d73e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d740:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d742:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d746:	60a3      	str	r3, [r4, #8]
}
 800d748:	e7c5      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d74a:	f023 0110 	bic.w	r1, r3, #16
 800d74e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d752:	d1c0      	bne.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
 800d754:	e7d5      	b.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800d756:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800d75a:	bf18      	it	ne
 800d75c:	2001      	movne	r0, #1
 800d75e:	e7ba      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d760:	d8b9      	bhi.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
 800d762:	2b20      	cmp	r3, #32
 800d764:	d0cd      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
 800d766:	d903      	bls.n	800d770 <HAL_TIM_ConfigClockSource+0x104>
 800d768:	2b30      	cmp	r3, #48	; 0x30
 800d76a:	d0ca      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
 800d76c:	2001      	movs	r0, #1
 800d76e:	e7b2      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
 800d770:	f033 0110 	bics.w	r1, r3, #16
 800d774:	d1af      	bne.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
 800d776:	e7c4      	b.n	800d702 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800d778:	2002      	movs	r0, #2
}
 800d77a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d77c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d77e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d780:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d782:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d786:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d78a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d78c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d78e:	4b1a      	ldr	r3, [pc, #104]	; (800d7f8 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d790:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d792:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d794:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d798:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d79c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d79e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d7a0:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d7a2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7a4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7a6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d7aa:	60a3      	str	r3, [r4, #8]
}
 800d7ac:	e793      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7ae:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d7b2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7b4:	432b      	orrs	r3, r5
 800d7b6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7b8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d7bc:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d7c2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d7c4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d7c6:	68a3      	ldr	r3, [r4, #8]
 800d7c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7cc:	60a3      	str	r3, [r4, #8]
      break;
 800d7ce:	e782      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7d0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d7d4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7d6:	432b      	orrs	r3, r5
 800d7d8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7da:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d7de:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d7e4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d7e6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d7e8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d7ee:	60a3      	str	r3, [r4, #8]
      break;
 800d7f0:	e771      	b.n	800d6d6 <HAL_TIM_ConfigClockSource+0x6a>
 800d7f2:	bf00      	nop
 800d7f4:	ffce0088 	.word	0xffce0088
 800d7f8:	ffcfff8f 	.word	0xffcfff8f
 800d7fc:	00100020 	.word	0x00100020
 800d800:	00100030 	.word	0x00100030

0800d804 <HAL_TIM_OC_DelayElapsedCallback>:
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop

0800d808 <HAL_TIM_IC_CaptureCallback>:
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop

0800d80c <HAL_TIM_PWM_PulseFinishedCallback>:
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <HAL_TIM_TriggerCallback>:
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop

0800d814 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d814:	6803      	ldr	r3, [r0, #0]
 800d816:	691a      	ldr	r2, [r3, #16]
 800d818:	0791      	lsls	r1, r2, #30
{
 800d81a:	b510      	push	{r4, lr}
 800d81c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d81e:	d502      	bpl.n	800d826 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d820:	68da      	ldr	r2, [r3, #12]
 800d822:	0792      	lsls	r2, r2, #30
 800d824:	d468      	bmi.n	800d8f8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d826:	691a      	ldr	r2, [r3, #16]
 800d828:	0752      	lsls	r2, r2, #29
 800d82a:	d502      	bpl.n	800d832 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d82c:	68da      	ldr	r2, [r3, #12]
 800d82e:	0750      	lsls	r0, r2, #29
 800d830:	d44f      	bmi.n	800d8d2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d832:	691a      	ldr	r2, [r3, #16]
 800d834:	0711      	lsls	r1, r2, #28
 800d836:	d502      	bpl.n	800d83e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	0712      	lsls	r2, r2, #28
 800d83c:	d437      	bmi.n	800d8ae <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d83e:	691a      	ldr	r2, [r3, #16]
 800d840:	06d0      	lsls	r0, r2, #27
 800d842:	d502      	bpl.n	800d84a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d844:	68da      	ldr	r2, [r3, #12]
 800d846:	06d1      	lsls	r1, r2, #27
 800d848:	d41e      	bmi.n	800d888 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	07d2      	lsls	r2, r2, #31
 800d84e:	d502      	bpl.n	800d856 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	07d0      	lsls	r0, r2, #31
 800d854:	d469      	bmi.n	800d92a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d856:	691a      	ldr	r2, [r3, #16]
 800d858:	0611      	lsls	r1, r2, #24
 800d85a:	d502      	bpl.n	800d862 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d85c:	68da      	ldr	r2, [r3, #12]
 800d85e:	0612      	lsls	r2, r2, #24
 800d860:	d46b      	bmi.n	800d93a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d862:	691a      	ldr	r2, [r3, #16]
 800d864:	05d0      	lsls	r0, r2, #23
 800d866:	d502      	bpl.n	800d86e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	0611      	lsls	r1, r2, #24
 800d86c:	d46d      	bmi.n	800d94a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	0652      	lsls	r2, r2, #25
 800d872:	d502      	bpl.n	800d87a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	0650      	lsls	r0, r2, #25
 800d878:	d46f      	bmi.n	800d95a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	0691      	lsls	r1, r2, #26
 800d87e:	d502      	bpl.n	800d886 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	0692      	lsls	r2, r2, #26
 800d884:	d449      	bmi.n	800d91a <HAL_TIM_IRQHandler+0x106>
}
 800d886:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d888:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d88c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d88e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d890:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d892:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d894:	69db      	ldr	r3, [r3, #28]
 800d896:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d89a:	d16f      	bne.n	800d97c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d89c:	f7ff ffb2 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f7ff ffb3 	bl	800d80c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8a8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8aa:	7722      	strb	r2, [r4, #28]
 800d8ac:	e7cd      	b.n	800d84a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8ae:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8b2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d8b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8b6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8ba:	69db      	ldr	r3, [r3, #28]
 800d8bc:	079b      	lsls	r3, r3, #30
 800d8be:	d15a      	bne.n	800d976 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8c0:	f7ff ffa0 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7ff ffa1 	bl	800d80c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d8cc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ce:	7722      	strb	r2, [r4, #28]
 800d8d0:	e7b5      	b.n	800d83e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8d2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8d6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d8d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8da:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d8e4:	d144      	bne.n	800d970 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8e6:	f7ff ff8d 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff ff8e 	bl	800d80c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8f0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d8f2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8f4:	7722      	strb	r2, [r4, #28]
 800d8f6:	e79c      	b.n	800d832 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8f8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8fc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8fe:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d900:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d902:	699b      	ldr	r3, [r3, #24]
 800d904:	0799      	lsls	r1, r3, #30
 800d906:	d130      	bne.n	800d96a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d908:	f7ff ff7c 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d90c:	4620      	mov	r0, r4
 800d90e:	f7ff ff7d 	bl	800d80c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d912:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d914:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d916:	7722      	strb	r2, [r4, #28]
 800d918:	e785      	b.n	800d826 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d91a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d91e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d920:	611a      	str	r2, [r3, #16]
}
 800d922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d926:	f000 b887 	b.w	800da38 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d92a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d92e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d930:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d932:	f7f3 ffa5 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	e78d      	b.n	800d856 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d93a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d93e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d940:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d942:	f000 f87b 	bl	800da3c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	e78b      	b.n	800d862 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d94a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d94e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d950:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d952:	f000 f875 	bl	800da40 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	e789      	b.n	800d86e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d95a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d95e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d960:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d962:	f7ff ff55 	bl	800d810 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	e787      	b.n	800d87a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d96a:	f7ff ff4d 	bl	800d808 <HAL_TIM_IC_CaptureCallback>
 800d96e:	e7d0      	b.n	800d912 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d970:	f7ff ff4a 	bl	800d808 <HAL_TIM_IC_CaptureCallback>
 800d974:	e7bc      	b.n	800d8f0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d976:	f7ff ff47 	bl	800d808 <HAL_TIM_IC_CaptureCallback>
 800d97a:	e7a6      	b.n	800d8ca <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d97c:	f7ff ff44 	bl	800d808 <HAL_TIM_IC_CaptureCallback>
 800d980:	e791      	b.n	800d8a6 <HAL_TIM_IRQHandler+0x92>
 800d982:	bf00      	nop

0800d984 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d984:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d04b      	beq.n	800da24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d98c:	6803      	ldr	r3, [r0, #0]
 800d98e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d990:	2002      	movs	r0, #2
{
 800d992:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d994:	4d24      	ldr	r5, [pc, #144]	; (800da28 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d996:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d99a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800d99c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d99e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9a0:	d029      	beq.n	800d9f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800d9a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9a6:	42ab      	cmp	r3, r5
 800d9a8:	d025      	beq.n	800d9f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9aa:	4d20      	ldr	r5, [pc, #128]	; (800da2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9ac:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	bf18      	it	ne
 800d9b4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d9b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9bc:	bf0c      	ite	eq
 800d9be:	f04f 0c01 	moveq.w	ip, #1
 800d9c2:	f04f 0c00 	movne.w	ip, #0
 800d9c6:	42ab      	cmp	r3, r5
 800d9c8:	bf08      	it	eq
 800d9ca:	f04c 0c01 	orreq.w	ip, ip, #1
 800d9ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9d2:	42ab      	cmp	r3, r5
 800d9d4:	bf08      	it	eq
 800d9d6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9da:	680d      	ldr	r5, [r1, #0]
 800d9dc:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9de:	4d14      	ldr	r5, [pc, #80]	; (800da30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800d9e0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9e2:	42ab      	cmp	r3, r5
 800d9e4:	bf14      	ite	ne
 800d9e6:	4660      	movne	r0, ip
 800d9e8:	f04c 0001 	orreq.w	r0, ip, #1
 800d9ec:	b960      	cbnz	r0, 800da08 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d9ee:	4811      	ldr	r0, [pc, #68]	; (800da34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d9f0:	4283      	cmp	r3, r0
 800d9f2:	d009      	beq.n	800da08 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d9f4:	e00d      	b.n	800da12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9f6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d9f8:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9fc:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9fe:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800da00:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da04:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800da06:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da08:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da0a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da0e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da10:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800da12:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800da14:	2101      	movs	r1, #1

  return HAL_OK;
 800da16:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800da18:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800da1c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800da20:	bc30      	pop	{r4, r5}
 800da22:	4770      	bx	lr
  __HAL_LOCK(htim);
 800da24:	2002      	movs	r0, #2
}
 800da26:	4770      	bx	lr
 800da28:	40010000 	.word	0x40010000
 800da2c:	40000400 	.word	0x40000400
 800da30:	40001800 	.word	0x40001800
 800da34:	40014000 	.word	0x40014000

0800da38 <HAL_TIMEx_CommutCallback>:
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop

0800da3c <HAL_TIMEx_BreakCallback>:
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop

0800da40 <HAL_TIMEx_Break2Callback>:
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop

0800da44 <HAL_UART_TxCpltCallback>:
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop

0800da48 <HAL_UART_ErrorCallback>:
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop

0800da4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da56:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da5a:	f7ff fff5 	bl	800da48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da5e:	bd08      	pop	{r3, pc}

0800da60 <HAL_UARTEx_RxEventCallback>:
}
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop

0800da64 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da64:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da66:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da6a:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800da6c:	ea12 0f0c 	tst.w	r2, ip
{
 800da70:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da72:	681d      	ldr	r5, [r3, #0]
{
 800da74:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da76:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800da78:	f000 8121 	beq.w	800dcbe <HAL_UART_IRQHandler+0x25a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da7c:	4eb1      	ldr	r6, [pc, #708]	; (800dd44 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da7e:	48b2      	ldr	r0, [pc, #712]	; (800dd48 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da80:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da84:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da86:	ea5c 0600 	orrs.w	r6, ip, r0
 800da8a:	f040 8089 	bne.w	800dba0 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800da90:	2801      	cmp	r0, #1
 800da92:	d022      	beq.n	800dada <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da94:	02d0      	lsls	r0, r2, #11
 800da96:	d502      	bpl.n	800da9e <HAL_UART_IRQHandler+0x3a>
 800da98:	024e      	lsls	r6, r1, #9
 800da9a:	f100 8139 	bmi.w	800dd10 <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da9e:	0610      	lsls	r0, r2, #24
 800daa0:	d506      	bpl.n	800dab0 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800daa2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800daa6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800daaa:	4301      	orrs	r1, r0
 800daac:	f040 8128 	bne.w	800dd00 <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dab0:	0651      	lsls	r1, r2, #25
 800dab2:	d567      	bpl.n	800db84 <HAL_UART_IRQHandler+0x120>
 800dab4:	066e      	lsls	r6, r5, #25
 800dab6:	d565      	bpl.n	800db84 <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab8:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dabc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac0:	e843 2100 	strex	r1, r2, [r3]
 800dac4:	2900      	cmp	r1, #0
 800dac6:	d1f7      	bne.n	800dab8 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dac8:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800daca:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dacc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800dace:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800dad2:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800dad4:	f7ff ffb6 	bl	800da44 <HAL_UART_TxCpltCallback>
}
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dada:	06d0      	lsls	r0, r2, #27
 800dadc:	d5da      	bpl.n	800da94 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dade:	06ee      	lsls	r6, r5, #27
 800dae0:	d5d8      	bpl.n	800da94 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dae2:	2210      	movs	r2, #16
 800dae4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	0655      	lsls	r5, r2, #25
 800daea:	f140 813c 	bpl.w	800dd66 <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800daee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800daf2:	6801      	ldr	r1, [r0, #0]
 800daf4:	684a      	ldr	r2, [r1, #4]
 800daf6:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800daf8:	2a00      	cmp	r2, #0
 800dafa:	d0ed      	beq.n	800dad8 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dafc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800db00:	4291      	cmp	r1, r2
 800db02:	d9e9      	bls.n	800dad8 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800db04:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db08:	69c2      	ldr	r2, [r0, #28]
 800db0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800db0e:	d02f      	beq.n	800db70 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db10:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db18:	e843 2100 	strex	r1, r2, [r3]
 800db1c:	2900      	cmp	r1, #0
 800db1e:	d1f7      	bne.n	800db10 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	f103 0208 	add.w	r2, r3, #8
 800db24:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db28:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2c:	f103 0508 	add.w	r5, r3, #8
 800db30:	e845 2100 	strex	r1, r2, [r5]
 800db34:	2900      	cmp	r1, #0
 800db36:	d1f3      	bne.n	800db20 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db38:	f103 0208 	add.w	r2, r3, #8
 800db3c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db44:	f103 0508 	add.w	r5, r3, #8
 800db48:	e845 2100 	strex	r1, r2, [r5]
 800db4c:	2900      	cmp	r1, #0
 800db4e:	d1f3      	bne.n	800db38 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800db50:	2220      	movs	r2, #32
 800db52:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db56:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db58:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db5c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db60:	e843 2100 	strex	r1, r2, [r3]
 800db64:	2900      	cmp	r1, #0
 800db66:	d1f7      	bne.n	800db58 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db68:	f7fb ffdc 	bl	8009b24 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db6c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db70:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db72:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db74:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db76:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800db7a:	1ac9      	subs	r1, r1, r3
 800db7c:	b289      	uxth	r1, r1
 800db7e:	f7ff ff6f 	bl	800da60 <HAL_UARTEx_RxEventCallback>
}
 800db82:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800db84:	0210      	lsls	r0, r2, #8
 800db86:	d502      	bpl.n	800db8e <HAL_UART_IRQHandler+0x12a>
 800db88:	0069      	lsls	r1, r5, #1
 800db8a:	f100 80e7 	bmi.w	800dd5c <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800db8e:	01d3      	lsls	r3, r2, #7
 800db90:	d5a2      	bpl.n	800dad8 <HAL_UART_IRQHandler+0x74>
 800db92:	2d00      	cmp	r5, #0
 800db94:	daa0      	bge.n	800dad8 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db96:	4620      	mov	r0, r4
}
 800db98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db9c:	f000 bd7a 	b.w	800e694 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dba0:	07d6      	lsls	r6, r2, #31
 800dba2:	d509      	bpl.n	800dbb8 <HAL_UART_IRQHandler+0x154>
 800dba4:	05ee      	lsls	r6, r5, #23
 800dba6:	d507      	bpl.n	800dbb8 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dba8:	2601      	movs	r6, #1
 800dbaa:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbac:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dbb0:	f046 0601 	orr.w	r6, r6, #1
 800dbb4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbb8:	0796      	lsls	r6, r2, #30
 800dbba:	f140 8092 	bpl.w	800dce2 <HAL_UART_IRQHandler+0x27e>
 800dbbe:	07ce      	lsls	r6, r1, #31
 800dbc0:	d50a      	bpl.n	800dbd8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbc2:	2602      	movs	r6, #2
 800dbc4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbc6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dbca:	f046 0604 	orr.w	r6, r6, #4
 800dbce:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbd2:	0756      	lsls	r6, r2, #29
 800dbd4:	f100 808b 	bmi.w	800dcee <HAL_UART_IRQHandler+0x28a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dbd8:	0716      	lsls	r6, r2, #28
 800dbda:	d50b      	bpl.n	800dbf4 <HAL_UART_IRQHandler+0x190>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbdc:	f005 0620 	and.w	r6, r5, #32
 800dbe0:	4330      	orrs	r0, r6
 800dbe2:	d007      	beq.n	800dbf4 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbe4:	2008      	movs	r0, #8
 800dbe6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbe8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dbec:	f040 0008 	orr.w	r0, r0, #8
 800dbf0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dbf4:	0516      	lsls	r6, r2, #20
 800dbf6:	d50a      	bpl.n	800dc0e <HAL_UART_IRQHandler+0x1aa>
 800dbf8:	0168      	lsls	r0, r5, #5
 800dbfa:	d508      	bpl.n	800dc0e <HAL_UART_IRQHandler+0x1aa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dc00:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dc02:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc06:	f040 0020 	orr.w	r0, r0, #32
 800dc0a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc0e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f43f af60 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc18:	0696      	lsls	r6, r2, #26
 800dc1a:	d50b      	bpl.n	800dc34 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc1c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc20:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800dc24:	ea55 0201 	orrs.w	r2, r5, r1
 800dc28:	d004      	beq.n	800dc34 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800dc2a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800dc2c:	b112      	cbz	r2, 800dc34 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc32:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800dc34:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc38:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc3a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc3e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800dc42:	4315      	orrs	r5, r2
 800dc44:	f000 80c5 	beq.w	800ddd2 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc48:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc50:	e843 2100 	strex	r1, r2, [r3]
 800dc54:	2900      	cmp	r1, #0
 800dc56:	d1f7      	bne.n	800dc48 <HAL_UART_IRQHandler+0x1e4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc58:	483c      	ldr	r0, [pc, #240]	; (800dd4c <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	f103 0208 	add.w	r2, r3, #8
 800dc5e:	e852 2f00 	ldrex	r2, [r2]
 800dc62:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	f103 0508 	add.w	r5, r3, #8
 800dc68:	e845 2100 	strex	r1, r2, [r5]
 800dc6c:	2900      	cmp	r1, #0
 800dc6e:	d1f4      	bne.n	800dc5a <HAL_UART_IRQHandler+0x1f6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc70:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dc72:	2a01      	cmp	r2, #1
 800dc74:	d054      	beq.n	800dd20 <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc76:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800dc78:	2120      	movs	r1, #32
 800dc7a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc7e:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc80:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800dc82:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc84:	064d      	lsls	r5, r1, #25
 800dc86:	d565      	bpl.n	800dd54 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc88:	f103 0208 	add.w	r2, r3, #8
 800dc8c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc94:	f103 0008 	add.w	r0, r3, #8
 800dc98:	e840 2100 	strex	r1, r2, [r0]
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	d1f3      	bne.n	800dc88 <HAL_UART_IRQHandler+0x224>
          if (huart->hdmarx != NULL)
 800dca0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d055      	beq.n	800dd54 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dca8:	4b29      	ldr	r3, [pc, #164]	; (800dd50 <HAL_UART_IRQHandler+0x2ec>)
 800dcaa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcac:	f7fc f8b2 	bl	8009e14 <HAL_DMA_Abort_IT>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	f43f af11 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcb6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dcba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dcbc:	e00e      	b.n	800dcdc <HAL_UART_IRQHandler+0x278>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dcbe:	0696      	lsls	r6, r2, #26
 800dcc0:	f57f aee5 	bpl.w	800da8e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dcc4:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dcc8:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800dccc:	ea56 060c 	orrs.w	r6, r6, ip
 800dcd0:	f43f aedd 	beq.w	800da8e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800dcd4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f43f aefe 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
}
 800dcdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dce0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dce2:	0756      	lsls	r6, r2, #29
 800dce4:	f57f af78 	bpl.w	800dbd8 <HAL_UART_IRQHandler+0x174>
 800dce8:	07ce      	lsls	r6, r1, #31
 800dcea:	f57f af75 	bpl.w	800dbd8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcee:	2604      	movs	r6, #4
 800dcf0:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcf2:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dcf6:	f046 0602 	orr.w	r6, r6, #2
 800dcfa:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800dcfe:	e76b      	b.n	800dbd8 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800dd00:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f43f aee8 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800dd08:	4620      	mov	r0, r4
}
 800dd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dd0e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800dd14:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd16:	621a      	str	r2, [r3, #32]
}
 800dd18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800dd1c:	f000 bcb8 	b.w	800e690 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd20:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd24:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd28:	e843 2100 	strex	r1, r2, [r3]
 800dd2c:	2900      	cmp	r1, #0
 800dd2e:	d0a2      	beq.n	800dc76 <HAL_UART_IRQHandler+0x212>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd30:	e853 2f00 	ldrex	r2, [r3]
 800dd34:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd38:	e843 2100 	strex	r1, r2, [r3]
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	d1ef      	bne.n	800dd20 <HAL_UART_IRQHandler+0x2bc>
 800dd40:	e799      	b.n	800dc76 <HAL_UART_IRQHandler+0x212>
 800dd42:	bf00      	nop
 800dd44:	04000120 	.word	0x04000120
 800dd48:	10000001 	.word	0x10000001
 800dd4c:	effffffe 	.word	0xeffffffe
 800dd50:	0800da4d 	.word	0x0800da4d
            HAL_UART_ErrorCallback(huart);
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7ff fe77 	bl	800da48 <HAL_UART_ErrorCallback>
}
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd5c:	4620      	mov	r0, r4
}
 800dd5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd62:	f000 bc99 	b.w	800e698 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd66:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800dd6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800dd6e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd72:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800dd74:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd76:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	f43f aead 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	f43f aeaa 	beq.w	800dad8 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd84:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8c:	e843 2000 	strex	r0, r2, [r3]
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d1f7      	bne.n	800dd84 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd94:	4d12      	ldr	r5, [pc, #72]	; (800dde0 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd96:	f103 0208 	add.w	r2, r3, #8
 800dd9a:	e852 2f00 	ldrex	r2, [r2]
 800dd9e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda0:	f103 0608 	add.w	r6, r3, #8
 800dda4:	e846 2000 	strex	r0, r2, [r6]
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d1f4      	bne.n	800dd96 <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800ddac:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ddae:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ddb0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddb4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddbe:	e843 2000 	strex	r0, r2, [r3]
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d1f7      	bne.n	800ddb6 <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ddc6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddc8:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ddca:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddcc:	f7ff fe48 	bl	800da60 <HAL_UARTEx_RxEventCallback>
}
 800ddd0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f7ff fe38 	bl	800da48 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddd8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800dddc:	bd70      	pop	{r4, r5, r6, pc}
 800ddde:	bf00      	nop
 800dde0:	effffffe 	.word	0xeffffffe

0800dde4 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dde4:	6901      	ldr	r1, [r0, #16]
 800dde6:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800dde8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddea:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddec:	49c0      	ldr	r1, [pc, #768]	; (800e0f0 <UART_SetConfig+0x30c>)
{
 800ddee:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf0:	6945      	ldr	r5, [r0, #20]
{
 800ddf2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf4:	69c0      	ldr	r0, [r0, #28]
{
 800ddf6:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddfa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddfc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddfe:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de00:	4dbc      	ldr	r5, [pc, #752]	; (800e0f4 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de02:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de04:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de06:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de08:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800de10:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de14:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de16:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de18:	f000 80e0 	beq.w	800dfdc <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800de1c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de1e:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800de20:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de22:	4ab5      	ldr	r2, [pc, #724]	; (800e0f8 <UART_SetConfig+0x314>)
 800de24:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de26:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de28:	4311      	orrs	r1, r2
 800de2a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2e:	f022 020f 	bic.w	r2, r2, #15
 800de32:	432a      	orrs	r2, r5
 800de34:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de36:	4ab1      	ldr	r2, [pc, #708]	; (800e0fc <UART_SetConfig+0x318>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d023      	beq.n	800de84 <UART_SetConfig+0xa0>
 800de3c:	4ab0      	ldr	r2, [pc, #704]	; (800e100 <UART_SetConfig+0x31c>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d076      	beq.n	800df30 <UART_SetConfig+0x14c>
 800de42:	4ab0      	ldr	r2, [pc, #704]	; (800e104 <UART_SetConfig+0x320>)
 800de44:	4293      	cmp	r3, r2
 800de46:	f000 818f 	beq.w	800e168 <UART_SetConfig+0x384>
 800de4a:	4aaf      	ldr	r2, [pc, #700]	; (800e108 <UART_SetConfig+0x324>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	f000 81e1 	beq.w	800e214 <UART_SetConfig+0x430>
 800de52:	4aae      	ldr	r2, [pc, #696]	; (800e10c <UART_SetConfig+0x328>)
 800de54:	4293      	cmp	r3, r2
 800de56:	f000 8121 	beq.w	800e09c <UART_SetConfig+0x2b8>
 800de5a:	4aad      	ldr	r2, [pc, #692]	; (800e110 <UART_SetConfig+0x32c>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	f000 81e3 	beq.w	800e228 <UART_SetConfig+0x444>
 800de62:	4aac      	ldr	r2, [pc, #688]	; (800e114 <UART_SetConfig+0x330>)
 800de64:	4293      	cmp	r3, r2
 800de66:	f000 8234 	beq.w	800e2d2 <UART_SetConfig+0x4ee>
 800de6a:	4aab      	ldr	r2, [pc, #684]	; (800e118 <UART_SetConfig+0x334>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	f000 81e7 	beq.w	800e240 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800de72:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800de74:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800de76:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800de7a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800de7c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800de7e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800de80:	b007      	add	sp, #28
 800de82:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de84:	4ba5      	ldr	r3, [pc, #660]	; (800e11c <UART_SetConfig+0x338>)
 800de86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de8c:	2b28      	cmp	r3, #40	; 0x28
 800de8e:	d8f0      	bhi.n	800de72 <UART_SetConfig+0x8e>
 800de90:	4aa3      	ldr	r2, [pc, #652]	; (800e120 <UART_SetConfig+0x33c>)
 800de92:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800de98:	d055      	beq.n	800df46 <UART_SetConfig+0x162>
    switch (clocksource)
 800de9a:	2b20      	cmp	r3, #32
 800de9c:	f200 814a 	bhi.w	800e134 <UART_SetConfig+0x350>
 800dea0:	2b20      	cmp	r3, #32
 800dea2:	d8e6      	bhi.n	800de72 <UART_SetConfig+0x8e>
 800dea4:	a201      	add	r2, pc, #4	; (adr r2, 800deac <UART_SetConfig+0xc8>)
 800dea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deaa:	bf00      	nop
 800deac:	0800e0eb 	.word	0x0800e0eb
 800deb0:	0800e0e5 	.word	0x0800e0e5
 800deb4:	0800de73 	.word	0x0800de73
 800deb8:	0800de73 	.word	0x0800de73
 800debc:	0800e0d5 	.word	0x0800e0d5
 800dec0:	0800de73 	.word	0x0800de73
 800dec4:	0800de73 	.word	0x0800de73
 800dec8:	0800de73 	.word	0x0800de73
 800decc:	0800e0c7 	.word	0x0800e0c7
 800ded0:	0800de73 	.word	0x0800de73
 800ded4:	0800de73 	.word	0x0800de73
 800ded8:	0800de73 	.word	0x0800de73
 800dedc:	0800de73 	.word	0x0800de73
 800dee0:	0800de73 	.word	0x0800de73
 800dee4:	0800de73 	.word	0x0800de73
 800dee8:	0800de73 	.word	0x0800de73
 800deec:	0800e0b1 	.word	0x0800e0b1
 800def0:	0800de73 	.word	0x0800de73
 800def4:	0800de73 	.word	0x0800de73
 800def8:	0800de73 	.word	0x0800de73
 800defc:	0800de73 	.word	0x0800de73
 800df00:	0800de73 	.word	0x0800de73
 800df04:	0800de73 	.word	0x0800de73
 800df08:	0800de73 	.word	0x0800de73
 800df0c:	0800de73 	.word	0x0800de73
 800df10:	0800de73 	.word	0x0800de73
 800df14:	0800de73 	.word	0x0800de73
 800df18:	0800de73 	.word	0x0800de73
 800df1c:	0800de73 	.word	0x0800de73
 800df20:	0800de73 	.word	0x0800de73
 800df24:	0800de73 	.word	0x0800de73
 800df28:	0800de73 	.word	0x0800de73
 800df2c:	0800e255 	.word	0x0800e255
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df30:	4b7a      	ldr	r3, [pc, #488]	; (800e11c <UART_SetConfig+0x338>)
 800df32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df34:	f003 0307 	and.w	r3, r3, #7
 800df38:	2b05      	cmp	r3, #5
 800df3a:	d89a      	bhi.n	800de72 <UART_SetConfig+0x8e>
 800df3c:	4a79      	ldr	r2, [pc, #484]	; (800e124 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df42:	5cd3      	ldrb	r3, [r2, r3]
 800df44:	d1a9      	bne.n	800de9a <UART_SetConfig+0xb6>
    switch (clocksource)
 800df46:	2b20      	cmp	r3, #32
 800df48:	f200 8145 	bhi.w	800e1d6 <UART_SetConfig+0x3f2>
 800df4c:	2b20      	cmp	r3, #32
 800df4e:	d890      	bhi.n	800de72 <UART_SetConfig+0x8e>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <UART_SetConfig+0x174>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800e2bf 	.word	0x0800e2bf
 800df5c:	0800e2b9 	.word	0x0800e2b9
 800df60:	0800de73 	.word	0x0800de73
 800df64:	0800de73 	.word	0x0800de73
 800df68:	0800e2c5 	.word	0x0800e2c5
 800df6c:	0800de73 	.word	0x0800de73
 800df70:	0800de73 	.word	0x0800de73
 800df74:	0800de73 	.word	0x0800de73
 800df78:	0800e2a7 	.word	0x0800e2a7
 800df7c:	0800de73 	.word	0x0800de73
 800df80:	0800de73 	.word	0x0800de73
 800df84:	0800de73 	.word	0x0800de73
 800df88:	0800de73 	.word	0x0800de73
 800df8c:	0800de73 	.word	0x0800de73
 800df90:	0800de73 	.word	0x0800de73
 800df94:	0800de73 	.word	0x0800de73
 800df98:	0800e293 	.word	0x0800e293
 800df9c:	0800de73 	.word	0x0800de73
 800dfa0:	0800de73 	.word	0x0800de73
 800dfa4:	0800de73 	.word	0x0800de73
 800dfa8:	0800de73 	.word	0x0800de73
 800dfac:	0800de73 	.word	0x0800de73
 800dfb0:	0800de73 	.word	0x0800de73
 800dfb4:	0800de73 	.word	0x0800de73
 800dfb8:	0800de73 	.word	0x0800de73
 800dfbc:	0800de73 	.word	0x0800de73
 800dfc0:	0800de73 	.word	0x0800de73
 800dfc4:	0800de73 	.word	0x0800de73
 800dfc8:	0800de73 	.word	0x0800de73
 800dfcc:	0800de73 	.word	0x0800de73
 800dfd0:	0800de73 	.word	0x0800de73
 800dfd4:	0800de73 	.word	0x0800de73
 800dfd8:	0800e2cf 	.word	0x0800e2cf
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dfdc:	6898      	ldr	r0, [r3, #8]
 800dfde:	4a46      	ldr	r2, [pc, #280]	; (800e0f8 <UART_SetConfig+0x314>)
 800dfe0:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfe2:	484e      	ldr	r0, [pc, #312]	; (800e11c <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dfec:	f022 020f 	bic.w	r2, r2, #15
 800dff0:	430a      	orrs	r2, r1
 800dff2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dff4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	f63f af39 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e000:	4a49      	ldr	r2, [pc, #292]	; (800e128 <UART_SetConfig+0x344>)
 800e002:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800e004:	2b20      	cmp	r3, #32
 800e006:	f200 80b9 	bhi.w	800e17c <UART_SetConfig+0x398>
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	f67f af31 	bls.w	800de72 <UART_SetConfig+0x8e>
 800e010:	3b02      	subs	r3, #2
 800e012:	2b1e      	cmp	r3, #30
 800e014:	f63f af2d 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e018:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <UART_SetConfig+0x23c>)
 800e01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01e:	bf00      	nop
 800e020:	0800e289 	.word	0x0800e289
 800e024:	0800de73 	.word	0x0800de73
 800e028:	0800e27f 	.word	0x0800e27f
 800e02c:	0800de73 	.word	0x0800de73
 800e030:	0800de73 	.word	0x0800de73
 800e034:	0800de73 	.word	0x0800de73
 800e038:	0800e26d 	.word	0x0800e26d
 800e03c:	0800de73 	.word	0x0800de73
 800e040:	0800de73 	.word	0x0800de73
 800e044:	0800de73 	.word	0x0800de73
 800e048:	0800de73 	.word	0x0800de73
 800e04c:	0800de73 	.word	0x0800de73
 800e050:	0800de73 	.word	0x0800de73
 800e054:	0800de73 	.word	0x0800de73
 800e058:	0800e259 	.word	0x0800e259
 800e05c:	0800de73 	.word	0x0800de73
 800e060:	0800de73 	.word	0x0800de73
 800e064:	0800de73 	.word	0x0800de73
 800e068:	0800de73 	.word	0x0800de73
 800e06c:	0800de73 	.word	0x0800de73
 800e070:	0800de73 	.word	0x0800de73
 800e074:	0800de73 	.word	0x0800de73
 800e078:	0800de73 	.word	0x0800de73
 800e07c:	0800de73 	.word	0x0800de73
 800e080:	0800de73 	.word	0x0800de73
 800e084:	0800de73 	.word	0x0800de73
 800e088:	0800de73 	.word	0x0800de73
 800e08c:	0800de73 	.word	0x0800de73
 800e090:	0800de73 	.word	0x0800de73
 800e094:	0800de73 	.word	0x0800de73
 800e098:	0800e28f 	.word	0x0800e28f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e09c:	4b1f      	ldr	r3, [pc, #124]	; (800e11c <UART_SetConfig+0x338>)
 800e09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a0:	f003 0307 	and.w	r3, r3, #7
 800e0a4:	2b05      	cmp	r3, #5
 800e0a6:	f63f aee4 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e0aa:	4a20      	ldr	r2, [pc, #128]	; (800e12c <UART_SetConfig+0x348>)
 800e0ac:	5cd3      	ldrb	r3, [r2, r3]
 800e0ae:	e6f1      	b.n	800de94 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0b0:	4b1a      	ldr	r3, [pc, #104]	; (800e11c <UART_SetConfig+0x338>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	0692      	lsls	r2, r2, #26
 800e0b6:	f140 80c1 	bpl.w	800e23c <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	481c      	ldr	r0, [pc, #112]	; (800e130 <UART_SetConfig+0x34c>)
 800e0be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e0c2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e0c4:	e03b      	b.n	800e13e <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0c6:	a803      	add	r0, sp, #12
 800e0c8:	f7fe fb6c 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0cc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e0ce:	b938      	cbnz	r0, 800e0e0 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e6cf      	b.n	800de74 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0d4:	4668      	mov	r0, sp
 800e0d6:	f7fe fab9 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0da:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d0f7      	beq.n	800e0d0 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e0e2:	e02c      	b.n	800e13e <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0e4:	f7fd fb68 	bl	800b7b8 <HAL_RCC_GetPCLK2Freq>
        break;
 800e0e8:	e7f1      	b.n	800e0ce <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0ea:	f7fd fb1d 	bl	800b728 <HAL_RCC_GetPCLK1Freq>
        break;
 800e0ee:	e7ee      	b.n	800e0ce <UART_SetConfig+0x2ea>
 800e0f0:	cfff69f3 	.word	0xcfff69f3
 800e0f4:	58000c00 	.word	0x58000c00
 800e0f8:	11fff4ff 	.word	0x11fff4ff
 800e0fc:	40011000 	.word	0x40011000
 800e100:	40004400 	.word	0x40004400
 800e104:	40004800 	.word	0x40004800
 800e108:	40004c00 	.word	0x40004c00
 800e10c:	40005000 	.word	0x40005000
 800e110:	40011400 	.word	0x40011400
 800e114:	40007800 	.word	0x40007800
 800e118:	40007c00 	.word	0x40007c00
 800e11c:	58024400 	.word	0x58024400
 800e120:	08018c38 	.word	0x08018c38
 800e124:	08018c64 	.word	0x08018c64
 800e128:	08018c6c 	.word	0x08018c6c
 800e12c:	08018c64 	.word	0x08018c64
 800e130:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800e134:	2b40      	cmp	r3, #64	; 0x40
 800e136:	f47f ae9c 	bne.w	800de72 <UART_SetConfig+0x8e>
 800e13a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e13e:	4b6c      	ldr	r3, [pc, #432]	; (800e2f0 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e140:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e144:	6862      	ldr	r2, [r4, #4]
 800e146:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e14a:	fbb0 f3f3 	udiv	r3, r0, r3
 800e14e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e152:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e156:	f1a3 0210 	sub.w	r2, r3, #16
 800e15a:	428a      	cmp	r2, r1
 800e15c:	f63f ae89 	bhi.w	800de72 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e160:	6822      	ldr	r2, [r4, #0]
 800e162:	2000      	movs	r0, #0
 800e164:	60d3      	str	r3, [r2, #12]
 800e166:	e685      	b.n	800de74 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e168:	4b62      	ldr	r3, [pc, #392]	; (800e2f4 <UART_SetConfig+0x510>)
 800e16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e16c:	f003 0307 	and.w	r3, r3, #7
 800e170:	2b05      	cmp	r3, #5
 800e172:	f63f ae7e 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e176:	4a60      	ldr	r2, [pc, #384]	; (800e2f8 <UART_SetConfig+0x514>)
 800e178:	5cd3      	ldrb	r3, [r2, r3]
 800e17a:	e68b      	b.n	800de94 <UART_SetConfig+0xb0>
    switch (clocksource)
 800e17c:	2b40      	cmp	r3, #64	; 0x40
 800e17e:	f47f ae78 	bne.w	800de72 <UART_SetConfig+0x8e>
 800e182:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e186:	4b5a      	ldr	r3, [pc, #360]	; (800e2f0 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e188:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e18a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e18e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e192:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e196:	4299      	cmp	r1, r3
 800e198:	f63f ae6b 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e19c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e1a0:	f63f ae67 	bhi.w	800de72 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	f7f2 fb0e 	bl	80007c8 <__aeabi_uldivmod>
 800e1ac:	462a      	mov	r2, r5
 800e1ae:	0209      	lsls	r1, r1, #8
 800e1b0:	0203      	lsls	r3, r0, #8
 800e1b2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e1b6:	0868      	lsrs	r0, r5, #1
 800e1b8:	1818      	adds	r0, r3, r0
 800e1ba:	f04f 0300 	mov.w	r3, #0
 800e1be:	f141 0100 	adc.w	r1, r1, #0
 800e1c2:	f7f2 fb01 	bl	80007c8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1c6:	4a4d      	ldr	r2, [pc, #308]	; (800e2fc <UART_SetConfig+0x518>)
 800e1c8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1cc:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1ce:	4291      	cmp	r1, r2
 800e1d0:	f63f ae4f 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e1d4:	e7c4      	b.n	800e160 <UART_SetConfig+0x37c>
    switch (clocksource)
 800e1d6:	2b40      	cmp	r3, #64	; 0x40
 800e1d8:	f47f ae4b 	bne.w	800de72 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1dc:	4b44      	ldr	r3, [pc, #272]	; (800e2f0 <UART_SetConfig+0x50c>)
 800e1de:	6862      	ldr	r2, [r4, #4]
 800e1e0:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800e1e4:	0853      	lsrs	r3, r2, #1
 800e1e6:	fbb0 f0f1 	udiv	r0, r0, r1
 800e1ea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1ee:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1f2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1f6:	f1a0 0210 	sub.w	r2, r0, #16
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	f63f ae39 	bhi.w	800de72 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e200:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e204:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800e208:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e20a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800e20c:	4303      	orrs	r3, r0
 800e20e:	2000      	movs	r0, #0
 800e210:	60d3      	str	r3, [r2, #12]
 800e212:	e62f      	b.n	800de74 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e214:	4b37      	ldr	r3, [pc, #220]	; (800e2f4 <UART_SetConfig+0x510>)
 800e216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e218:	f003 0307 	and.w	r3, r3, #7
 800e21c:	2b05      	cmp	r3, #5
 800e21e:	f63f ae28 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e222:	4a37      	ldr	r2, [pc, #220]	; (800e300 <UART_SetConfig+0x51c>)
 800e224:	5cd3      	ldrb	r3, [r2, r3]
 800e226:	e635      	b.n	800de94 <UART_SetConfig+0xb0>
 800e228:	4b32      	ldr	r3, [pc, #200]	; (800e2f4 <UART_SetConfig+0x510>)
 800e22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e22c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e230:	2b28      	cmp	r3, #40	; 0x28
 800e232:	f63f ae1e 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e236:	4a33      	ldr	r2, [pc, #204]	; (800e304 <UART_SetConfig+0x520>)
 800e238:	5cd3      	ldrb	r3, [r2, r3]
 800e23a:	e62b      	b.n	800de94 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e23c:	4832      	ldr	r0, [pc, #200]	; (800e308 <UART_SetConfig+0x524>)
 800e23e:	e77e      	b.n	800e13e <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e240:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <UART_SetConfig+0x510>)
 800e242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e244:	f003 0307 	and.w	r3, r3, #7
 800e248:	2b05      	cmp	r3, #5
 800e24a:	f63f ae12 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e24e:	4a2f      	ldr	r2, [pc, #188]	; (800e30c <UART_SetConfig+0x528>)
 800e250:	5cd3      	ldrb	r3, [r2, r3]
 800e252:	e61f      	b.n	800de94 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800e254:	482e      	ldr	r0, [pc, #184]	; (800e310 <UART_SetConfig+0x52c>)
 800e256:	e772      	b.n	800e13e <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e258:	4b26      	ldr	r3, [pc, #152]	; (800e2f4 <UART_SetConfig+0x510>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	0690      	lsls	r0, r2, #26
 800e25e:	d542      	bpl.n	800e2e6 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4829      	ldr	r0, [pc, #164]	; (800e308 <UART_SetConfig+0x524>)
 800e264:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e268:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e26a:	e78c      	b.n	800e186 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e26c:	a803      	add	r0, sp, #12
 800e26e:	f7fe fa99 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e272:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e274:	2800      	cmp	r0, #0
 800e276:	f43f af2b 	beq.w	800e0d0 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e27a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e27c:	e783      	b.n	800e186 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e27e:	4668      	mov	r0, sp
 800e280:	f7fe f9e4 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e284:	9801      	ldr	r0, [sp, #4]
        break;
 800e286:	e7f5      	b.n	800e274 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e288:	f7fe f9ce 	bl	800c628 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800e28c:	e7f2      	b.n	800e274 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800e28e:	4820      	ldr	r0, [pc, #128]	; (800e310 <UART_SetConfig+0x52c>)
 800e290:	e779      	b.n	800e186 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e292:	4b18      	ldr	r3, [pc, #96]	; (800e2f4 <UART_SetConfig+0x510>)
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	0691      	lsls	r1, r2, #26
 800e298:	d527      	bpl.n	800e2ea <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	481a      	ldr	r0, [pc, #104]	; (800e308 <UART_SetConfig+0x524>)
 800e29e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e2a2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e2a4:	e79a      	b.n	800e1dc <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2a6:	a803      	add	r0, sp, #12
 800e2a8:	f7fe fa7c 	bl	800c7a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2ac:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	f43f af0e 	beq.w	800e0d0 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e2b6:	e791      	b.n	800e1dc <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2b8:	f7fd fa7e 	bl	800b7b8 <HAL_RCC_GetPCLK2Freq>
        break;
 800e2bc:	e7f7      	b.n	800e2ae <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2be:	f7fd fa33 	bl	800b728 <HAL_RCC_GetPCLK1Freq>
        break;
 800e2c2:	e7f4      	b.n	800e2ae <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2c4:	4668      	mov	r0, sp
 800e2c6:	f7fe f9c1 	bl	800c64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2ca:	9801      	ldr	r0, [sp, #4]
        break;
 800e2cc:	e7ef      	b.n	800e2ae <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800e2ce:	4810      	ldr	r0, [pc, #64]	; (800e310 <UART_SetConfig+0x52c>)
 800e2d0:	e784      	b.n	800e1dc <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2d2:	4b08      	ldr	r3, [pc, #32]	; (800e2f4 <UART_SetConfig+0x510>)
 800e2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b05      	cmp	r3, #5
 800e2dc:	f63f adc9 	bhi.w	800de72 <UART_SetConfig+0x8e>
 800e2e0:	4a0c      	ldr	r2, [pc, #48]	; (800e314 <UART_SetConfig+0x530>)
 800e2e2:	5cd3      	ldrb	r3, [r2, r3]
 800e2e4:	e5d6      	b.n	800de94 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e2e6:	4808      	ldr	r0, [pc, #32]	; (800e308 <UART_SetConfig+0x524>)
 800e2e8:	e74d      	b.n	800e186 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800e2ea:	4807      	ldr	r0, [pc, #28]	; (800e308 <UART_SetConfig+0x524>)
 800e2ec:	e776      	b.n	800e1dc <UART_SetConfig+0x3f8>
 800e2ee:	bf00      	nop
 800e2f0:	08018c74 	.word	0x08018c74
 800e2f4:	58024400 	.word	0x58024400
 800e2f8:	08018c64 	.word	0x08018c64
 800e2fc:	000ffcff 	.word	0x000ffcff
 800e300:	08018c64 	.word	0x08018c64
 800e304:	08018c38 	.word	0x08018c38
 800e308:	03d09000 	.word	0x03d09000
 800e30c:	08018c64 	.word	0x08018c64
 800e310:	003d0900 	.word	0x003d0900
 800e314:	08018c64 	.word	0x08018c64

0800e318 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e318:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e31a:	07da      	lsls	r2, r3, #31
{
 800e31c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e31e:	d506      	bpl.n	800e32e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e320:	6801      	ldr	r1, [r0, #0]
 800e322:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e324:	684a      	ldr	r2, [r1, #4]
 800e326:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e32a:	4322      	orrs	r2, r4
 800e32c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e32e:	079c      	lsls	r4, r3, #30
 800e330:	d506      	bpl.n	800e340 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e332:	6801      	ldr	r1, [r0, #0]
 800e334:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e336:	684a      	ldr	r2, [r1, #4]
 800e338:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e33c:	4322      	orrs	r2, r4
 800e33e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e340:	0759      	lsls	r1, r3, #29
 800e342:	d506      	bpl.n	800e352 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e344:	6801      	ldr	r1, [r0, #0]
 800e346:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e348:	684a      	ldr	r2, [r1, #4]
 800e34a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e34e:	4322      	orrs	r2, r4
 800e350:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e352:	071a      	lsls	r2, r3, #28
 800e354:	d506      	bpl.n	800e364 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e356:	6801      	ldr	r1, [r0, #0]
 800e358:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e35a:	684a      	ldr	r2, [r1, #4]
 800e35c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e360:	4322      	orrs	r2, r4
 800e362:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e364:	06dc      	lsls	r4, r3, #27
 800e366:	d506      	bpl.n	800e376 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e368:	6801      	ldr	r1, [r0, #0]
 800e36a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e36c:	688a      	ldr	r2, [r1, #8]
 800e36e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e372:	4322      	orrs	r2, r4
 800e374:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e376:	0699      	lsls	r1, r3, #26
 800e378:	d506      	bpl.n	800e388 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e37a:	6801      	ldr	r1, [r0, #0]
 800e37c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e37e:	688a      	ldr	r2, [r1, #8]
 800e380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e384:	4322      	orrs	r2, r4
 800e386:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e388:	065a      	lsls	r2, r3, #25
 800e38a:	d50a      	bpl.n	800e3a2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e38c:	6801      	ldr	r1, [r0, #0]
 800e38e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e390:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e392:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e396:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e39a:	ea42 0204 	orr.w	r2, r2, r4
 800e39e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3a0:	d00b      	beq.n	800e3ba <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3a2:	061b      	lsls	r3, r3, #24
 800e3a4:	d506      	bpl.n	800e3b4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3a6:	6802      	ldr	r2, [r0, #0]
 800e3a8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e3aa:	6853      	ldr	r3, [r2, #4]
 800e3ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e3b0:	430b      	orrs	r3, r1
 800e3b2:	6053      	str	r3, [r2, #4]
}
 800e3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3ba:	684a      	ldr	r2, [r1, #4]
 800e3bc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e3be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e3c2:	4322      	orrs	r2, r4
 800e3c4:	604a      	str	r2, [r1, #4]
 800e3c6:	e7ec      	b.n	800e3a2 <UART_AdvFeatureConfig+0x8a>

0800e3c8 <UART_CheckIdleState>:
{
 800e3c8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ca:	2300      	movs	r3, #0
{
 800e3cc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ce:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800e3d2:	f7f9 f9cf 	bl	8007774 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3d6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e3d8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3da:	6813      	ldr	r3, [r2, #0]
 800e3dc:	071b      	lsls	r3, r3, #28
 800e3de:	d40e      	bmi.n	800e3fe <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3e0:	6813      	ldr	r3, [r2, #0]
 800e3e2:	0759      	lsls	r1, r3, #29
 800e3e4:	d432      	bmi.n	800e44c <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3e6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e3e8:	2220      	movs	r2, #32
  return HAL_OK;
 800e3ea:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e3ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e3f0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e3f4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3fa:	6723      	str	r3, [r4, #112]	; 0x70
}
 800e3fc:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3fe:	69d3      	ldr	r3, [r2, #28]
 800e400:	0298      	lsls	r0, r3, #10
 800e402:	d4ed      	bmi.n	800e3e0 <UART_CheckIdleState+0x18>
 800e404:	e00c      	b.n	800e420 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e406:	6819      	ldr	r1, [r3, #0]
 800e408:	461a      	mov	r2, r3
 800e40a:	0749      	lsls	r1, r1, #29
 800e40c:	d505      	bpl.n	800e41a <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e40e:	69d9      	ldr	r1, [r3, #28]
 800e410:	0708      	lsls	r0, r1, #28
 800e412:	d44f      	bmi.n	800e4b4 <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e414:	69d9      	ldr	r1, [r3, #28]
 800e416:	0509      	lsls	r1, r1, #20
 800e418:	d47a      	bmi.n	800e510 <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e41a:	69db      	ldr	r3, [r3, #28]
 800e41c:	0298      	lsls	r0, r3, #10
 800e41e:	d4df      	bmi.n	800e3e0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e420:	f7f9 f9a8 	bl	8007774 <HAL_GetTick>
 800e424:	1b43      	subs	r3, r0, r5
 800e426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	d3eb      	bcc.n	800e406 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e436:	e843 2100 	strex	r1, r2, [r3]
 800e43a:	2900      	cmp	r1, #0
 800e43c:	d1f7      	bne.n	800e42e <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 800e43e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e440:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e442:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800e446:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e44c:	69d3      	ldr	r3, [r2, #28]
 800e44e:	025b      	lsls	r3, r3, #9
 800e450:	d4c9      	bmi.n	800e3e6 <UART_CheckIdleState+0x1e>
 800e452:	e00d      	b.n	800e470 <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	0750      	lsls	r0, r2, #29
 800e458:	d507      	bpl.n	800e46a <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e45a:	69da      	ldr	r2, [r3, #28]
 800e45c:	0711      	lsls	r1, r2, #28
 800e45e:	f100 8085 	bmi.w	800e56c <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e462:	69da      	ldr	r2, [r3, #28]
 800e464:	0512      	lsls	r2, r2, #20
 800e466:	f100 80af 	bmi.w	800e5c8 <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	025b      	lsls	r3, r3, #9
 800e46e:	d4ba      	bmi.n	800e3e6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e470:	f7f9 f980 	bl	8007774 <HAL_GetTick>
 800e474:	1b43      	subs	r3, r0, r5
 800e476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	d3ea      	bcc.n	800e454 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e482:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e486:	e843 2100 	strex	r1, r2, [r3]
 800e48a:	2900      	cmp	r1, #0
 800e48c:	d1f7      	bne.n	800e47e <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48e:	f103 0208 	add.w	r2, r3, #8
 800e492:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e496:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49a:	f103 0008 	add.w	r0, r3, #8
 800e49e:	e840 2100 	strex	r1, r2, [r0]
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	d1f3      	bne.n	800e48e <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 800e4a6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e4a8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e4aa:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800e4ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4b4:	2208      	movs	r2, #8
 800e4b6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c0:	e843 2100 	strex	r1, r2, [r3]
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d1f7      	bne.n	800e4b8 <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4c8:	4856      	ldr	r0, [pc, #344]	; (800e624 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ca:	f103 0208 	add.w	r2, r3, #8
 800e4ce:	e852 2f00 	ldrex	r2, [r2]
 800e4d2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	f103 0508 	add.w	r5, r3, #8
 800e4d8:	e845 2100 	strex	r1, r2, [r5]
 800e4dc:	2900      	cmp	r1, #0
 800e4de:	d1f4      	bne.n	800e4ca <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e4e2:	2a01      	cmp	r2, #1
 800e4e4:	d00b      	beq.n	800e4fe <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4e6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e4e8:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e4ea:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e4ec:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e4f0:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4f2:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e4f4:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e4f8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e4fc:	e797      	b.n	800e42e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e502:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e506:	e843 2100 	strex	r1, r2, [r3]
 800e50a:	2900      	cmp	r1, #0
 800e50c:	d1f7      	bne.n	800e4fe <UART_CheckIdleState+0x136>
 800e50e:	e7ea      	b.n	800e4e6 <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e514:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e516:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e51a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51e:	e843 2100 	strex	r1, r2, [r3]
 800e522:	2900      	cmp	r1, #0
 800e524:	d1f7      	bne.n	800e516 <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e526:	483f      	ldr	r0, [pc, #252]	; (800e624 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	f103 0208 	add.w	r2, r3, #8
 800e52c:	e852 2f00 	ldrex	r2, [r2]
 800e530:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e532:	f103 0508 	add.w	r5, r3, #8
 800e536:	e845 2100 	strex	r1, r2, [r5]
 800e53a:	2900      	cmp	r1, #0
 800e53c:	d1f4      	bne.n	800e528 <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e540:	2a01      	cmp	r2, #1
 800e542:	d00a      	beq.n	800e55a <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e544:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e546:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e548:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e54a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e54e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e552:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e554:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e558:	e769      	b.n	800e42e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e55e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	e843 2100 	strex	r1, r2, [r3]
 800e566:	2900      	cmp	r1, #0
 800e568:	d1f7      	bne.n	800e55a <UART_CheckIdleState+0x192>
 800e56a:	e7eb      	b.n	800e544 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e56c:	2208      	movs	r2, #8
 800e56e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e570:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	e843 2100 	strex	r1, r2, [r3]
 800e57c:	2900      	cmp	r1, #0
 800e57e:	d1f7      	bne.n	800e570 <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e580:	4828      	ldr	r0, [pc, #160]	; (800e624 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e582:	f103 0208 	add.w	r2, r3, #8
 800e586:	e852 2f00 	ldrex	r2, [r2]
 800e58a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58c:	f103 0508 	add.w	r5, r3, #8
 800e590:	e845 2100 	strex	r1, r2, [r5]
 800e594:	2900      	cmp	r1, #0
 800e596:	d1f4      	bne.n	800e582 <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e598:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e59a:	2a01      	cmp	r2, #1
 800e59c:	d00b      	beq.n	800e5b6 <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e59e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e5a0:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5a2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e5a4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e5a8:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5aa:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e5ac:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5b0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e5b4:	e763      	b.n	800e47e <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5be:	e843 2100 	strex	r1, r2, [r3]
 800e5c2:	2900      	cmp	r1, #0
 800e5c4:	d1f7      	bne.n	800e5b6 <UART_CheckIdleState+0x1ee>
 800e5c6:	e7ea      	b.n	800e59e <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5cc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ce:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d6:	e843 2100 	strex	r1, r2, [r3]
 800e5da:	2900      	cmp	r1, #0
 800e5dc:	d1f7      	bne.n	800e5ce <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5de:	4811      	ldr	r0, [pc, #68]	; (800e624 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e0:	f103 0208 	add.w	r2, r3, #8
 800e5e4:	e852 2f00 	ldrex	r2, [r2]
 800e5e8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ea:	f103 0508 	add.w	r5, r3, #8
 800e5ee:	e845 2100 	strex	r1, r2, [r5]
 800e5f2:	2900      	cmp	r1, #0
 800e5f4:	d1f4      	bne.n	800e5e0 <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e5f8:	2a01      	cmp	r2, #1
 800e5fa:	d00a      	beq.n	800e612 <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5fc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e5fe:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e600:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e602:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e606:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e60a:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e60c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e610:	e735      	b.n	800e47e <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e612:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e616:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61a:	e843 2100 	strex	r1, r2, [r3]
 800e61e:	2900      	cmp	r1, #0
 800e620:	d1f7      	bne.n	800e612 <UART_CheckIdleState+0x24a>
 800e622:	e7eb      	b.n	800e5fc <UART_CheckIdleState+0x234>
 800e624:	effffffe 	.word	0xeffffffe

0800e628 <HAL_UART_Init>:
  if (huart == NULL)
 800e628:	b380      	cbz	r0, 800e68c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e62a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800e62e:	b510      	push	{r4, lr}
 800e630:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e632:	b333      	cbz	r3, 800e682 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800e634:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e636:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e638:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e63a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800e63e:	6813      	ldr	r3, [r2, #0]
 800e640:	f023 0301 	bic.w	r3, r3, #1
 800e644:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e646:	f7ff fbcd 	bl	800dde4 <UART_SetConfig>
 800e64a:	2801      	cmp	r0, #1
 800e64c:	d017      	beq.n	800e67e <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e64e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e650:	b98b      	cbnz	r3, 800e676 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e652:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e654:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e65c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e65e:	689a      	ldr	r2, [r3, #8]
 800e660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e664:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	f042 0201 	orr.w	r2, r2, #1
}
 800e66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e670:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e672:	f7ff bea9 	b.w	800e3c8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800e676:	4620      	mov	r0, r4
 800e678:	f7ff fe4e 	bl	800e318 <UART_AdvFeatureConfig>
 800e67c:	e7e9      	b.n	800e652 <HAL_UART_Init+0x2a>
}
 800e67e:	2001      	movs	r0, #1
 800e680:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e682:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800e686:	f7f8 fd99 	bl	80071bc <HAL_UART_MspInit>
 800e68a:	e7d3      	b.n	800e634 <HAL_UART_Init+0xc>
}
 800e68c:	2001      	movs	r0, #1
 800e68e:	4770      	bx	lr

0800e690 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop

0800e694 <HAL_UARTEx_RxFifoFullCallback>:
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop

0800e698 <HAL_UARTEx_TxFifoEmptyCallback>:
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop

0800e69c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e69c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e6a0:	2a01      	cmp	r2, #1
 800e6a2:	d017      	beq.n	800e6d4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6a4:	6802      	ldr	r2, [r0, #0]
 800e6a6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e6a8:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6aa:	2100      	movs	r1, #0
{
 800e6ac:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800e6ae:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800e6b2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6b4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e6b6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e6b8:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800e6bc:	f024 0401 	bic.w	r4, r4, #1
 800e6c0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6c2:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6c4:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800e6c6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e6c8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e6cc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e6d0:	bc30      	pop	{r4, r5}
 800e6d2:	4770      	bx	lr
  __HAL_LOCK(huart);
 800e6d4:	2002      	movs	r0, #2
}
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6d8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e6dc:	2a01      	cmp	r2, #1
 800e6de:	d037      	beq.n	800e750 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6e0:	6802      	ldr	r2, [r0, #0]
 800e6e2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e6e4:	2024      	movs	r0, #36	; 0x24
{
 800e6e6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e6e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6ec:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6ee:	6810      	ldr	r0, [r2, #0]
 800e6f0:	f020 0001 	bic.w	r0, r0, #1
 800e6f4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e6f6:	6890      	ldr	r0, [r2, #8]
 800e6f8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800e6fc:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e700:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e702:	b310      	cbz	r0, 800e74a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e704:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e706:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e708:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e70c:	4911      	ldr	r1, [pc, #68]	; (800e754 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e70e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e712:	4d11      	ldr	r5, [pc, #68]	; (800e758 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e714:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e718:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e71c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e720:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e722:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e726:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e728:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e72c:	fbb1 f1f5 	udiv	r1, r1, r5
 800e730:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e734:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e736:	2100      	movs	r1, #0
 800e738:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e73c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e73e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e740:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e744:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e748:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e74a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e74c:	4608      	mov	r0, r1
 800e74e:	e7ef      	b.n	800e730 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e750:	2002      	movs	r0, #2
}
 800e752:	4770      	bx	lr
 800e754:	08018c94 	.word	0x08018c94
 800e758:	08018c8c 	.word	0x08018c8c

0800e75c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800e75c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e760:	2a01      	cmp	r2, #1
 800e762:	d037      	beq.n	800e7d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e764:	6802      	ldr	r2, [r0, #0]
 800e766:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e768:	2024      	movs	r0, #36	; 0x24
{
 800e76a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e76c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e770:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e772:	6810      	ldr	r0, [r2, #0]
 800e774:	f020 0001 	bic.w	r0, r0, #1
 800e778:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e77a:	6890      	ldr	r0, [r2, #8]
 800e77c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800e780:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e782:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e784:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e786:	b310      	cbz	r0, 800e7ce <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e788:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e78a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e78c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e790:	4911      	ldr	r1, [pc, #68]	; (800e7d8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e792:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e796:	4d11      	ldr	r5, [pc, #68]	; (800e7dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e798:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e79c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7a0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7a4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7a6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7aa:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7ac:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7b0:	fbb1 f1f5 	udiv	r1, r1, r5
 800e7b4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e7b8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7c0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e7c2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e7c4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e7c8:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e7cc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e7ce:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	e7ef      	b.n	800e7b4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e7d4:	2002      	movs	r0, #2
}
 800e7d6:	4770      	bx	lr
 800e7d8:	08018c94 	.word	0x08018c94
 800e7dc:	08018c8c 	.word	0x08018c8c

0800e7e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	4684      	mov	ip, r0
 800e7e4:	b500      	push	{lr}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	f10d 0e14 	add.w	lr, sp, #20
 800e7ec:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d13e      	bne.n	800e874 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7f6:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e7f8:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e7fc:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800e802:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e804:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e806:	68c2      	ldr	r2, [r0, #12]
 800e808:	ea03 0302 	and.w	r3, r3, r2
 800e80c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e80e:	68c3      	ldr	r3, [r0, #12]
 800e810:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e814:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e816:	d07c      	beq.n	800e912 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800e818:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800e81a:	4a40      	ldr	r2, [pc, #256]	; (800e91c <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	e003      	b.n	800e828 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e820:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	db41      	blt.n	800e8ac <USB_CoreInit+0xcc>
    count++;
 800e828:	9b00      	ldr	r3, [sp, #0]
 800e82a:	3301      	adds	r3, #1
 800e82c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	4293      	cmp	r3, r2
 800e832:	d9f5      	bls.n	800e820 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800e834:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800e836:	9b07      	ldr	r3, [sp, #28]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d116      	bne.n	800e86a <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e83c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e840:	4b37      	ldr	r3, [pc, #220]	; (800e920 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e842:	b292      	uxth	r2, r2
 800e844:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e848:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e84c:	4313      	orrs	r3, r2
 800e84e:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e852:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e856:	f043 0306 	orr.w	r3, r3, #6
 800e85a:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e85e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e862:	f043 0320 	orr.w	r3, r3, #32
 800e866:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800e86a:	b003      	add	sp, #12
 800e86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e870:	b004      	add	sp, #16
 800e872:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e874:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e876:	2100      	movs	r1, #0
    if (count > 200000U)
 800e878:	4a28      	ldr	r2, [pc, #160]	; (800e91c <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e87e:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e880:	9101      	str	r1, [sp, #4]
 800e882:	e003      	b.n	800e88c <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e884:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	db2c      	blt.n	800e8e6 <USB_CoreInit+0x106>
    count++;
 800e88c:	9b01      	ldr	r3, [sp, #4]
 800e88e:	3301      	adds	r3, #1
 800e890:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e892:	9b01      	ldr	r3, [sp, #4]
 800e894:	4293      	cmp	r3, r2
 800e896:	d9f5      	bls.n	800e884 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800e898:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800e89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e89c:	b9e3      	cbnz	r3, 800e8d8 <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e89e:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e8aa:	e7c4      	b.n	800e836 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800e8ac:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800e8ae:	4a1b      	ldr	r2, [pc, #108]	; (800e91c <USB_CoreInit+0x13c>)
  count = 0U;
 800e8b0:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8b2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e8b6:	f043 0301 	orr.w	r3, r3, #1
 800e8ba:	f8cc 3010 	str.w	r3, [ip, #16]
 800e8be:	e004      	b.n	800e8ca <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8c0:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e8c4:	f010 0001 	ands.w	r0, r0, #1
 800e8c8:	d0b5      	beq.n	800e836 <USB_CoreInit+0x56>
    count++;
 800e8ca:	9b00      	ldr	r3, [sp, #0]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e8d0:	9b00      	ldr	r3, [sp, #0]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d9f4      	bls.n	800e8c0 <USB_CoreInit+0xe0>
 800e8d6:	e7ad      	b.n	800e834 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8d8:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e8dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8e0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e8e4:	e7a7      	b.n	800e836 <USB_CoreInit+0x56>
  count = 0U;
 800e8e6:	2300      	movs	r3, #0
    if (count > 200000U)
 800e8e8:	4a0c      	ldr	r2, [pc, #48]	; (800e91c <USB_CoreInit+0x13c>)
  count = 0U;
 800e8ea:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8ec:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	f8cc 3010 	str.w	r3, [ip, #16]
 800e8f8:	e004      	b.n	800e904 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8fa:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e8fe:	f010 0001 	ands.w	r0, r0, #1
 800e902:	d0ca      	beq.n	800e89a <USB_CoreInit+0xba>
    count++;
 800e904:	9b01      	ldr	r3, [sp, #4]
 800e906:	3301      	adds	r3, #1
 800e908:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e90a:	9b01      	ldr	r3, [sp, #4]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d9f4      	bls.n	800e8fa <USB_CoreInit+0x11a>
 800e910:	e7c2      	b.n	800e898 <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e912:	68c3      	ldr	r3, [r0, #12]
 800e914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e918:	60c3      	str	r3, [r0, #12]
 800e91a:	e77d      	b.n	800e818 <USB_CoreInit+0x38>
 800e91c:	00030d40 	.word	0x00030d40
 800e920:	03ee0000 	.word	0x03ee0000

0800e924 <USB_DisableGlobalInt>:
{
 800e924:	4603      	mov	r3, r0
}
 800e926:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e928:	689a      	ldr	r2, [r3, #8]
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	609a      	str	r2, [r3, #8]
}
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop

0800e934 <USB_SetCurrentMode>:
{
 800e934:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e936:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e938:	2901      	cmp	r1, #1
{
 800e93a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e93c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e940:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e942:	d017      	beq.n	800e974 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800e944:	b9a1      	cbnz	r1, 800e970 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e946:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e948:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e94a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e94e:	60c3      	str	r3, [r0, #12]
 800e950:	e001      	b.n	800e956 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e952:	2c32      	cmp	r4, #50	; 0x32
 800e954:	d00c      	beq.n	800e970 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e956:	2001      	movs	r0, #1
      ms++;
 800e958:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e95a:	f7f8 ff11 	bl	8007780 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e95e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e960:	07db      	lsls	r3, r3, #31
 800e962:	d4f6      	bmi.n	800e952 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800e964:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e968:	fab0 f080 	clz	r0, r0
 800e96c:	0940      	lsrs	r0, r0, #5
}
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e970:	2001      	movs	r0, #1
}
 800e972:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e974:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e976:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e97c:	60c3      	str	r3, [r0, #12]
 800e97e:	e001      	b.n	800e984 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e980:	2c32      	cmp	r4, #50	; 0x32
 800e982:	d0f5      	beq.n	800e970 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e984:	2001      	movs	r0, #1
      ms++;
 800e986:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e988:	f7f8 fefa 	bl	8007780 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e98c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e98e:	07da      	lsls	r2, r3, #31
 800e990:	d5f6      	bpl.n	800e980 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800e992:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e996:	fab0 f080 	clz	r0, r0
 800e99a:	0940      	lsrs	r0, r0, #5
 800e99c:	e7e7      	b.n	800e96e <USB_SetCurrentMode+0x3a>
 800e99e:	bf00      	nop

0800e9a0 <USB_DevInit>:
{
 800e9a0:	b084      	sub	sp, #16
 800e9a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	ac0b      	add	r4, sp, #44	; 0x2c
 800e9aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e9ac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800e9b8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800e9bc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800e9c0:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800e9c4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800e9c8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800e9cc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800e9d0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800e9d4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800e9d8:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800e9dc:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800e9e0:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800e9e4:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800e9e8:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800e9ec:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800e9f0:	2d00      	cmp	r5, #0
 800e9f2:	f040 80aa 	bne.w	800eb4a <USB_DevInit+0x1aa>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9f6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e9fa:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800e9fe:	f043 0302 	orr.w	r3, r3, #2
 800ea02:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ea06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ea08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea0c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea0e:	6803      	ldr	r3, [r0, #0]
 800ea10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea14:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea16:	6803      	ldr	r3, [r0, #0]
 800ea18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea1c:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ea24:	f8dc 3000 	ldr.w	r3, [ip]
 800ea28:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	f000 80b5 	beq.w	800eb9e <USB_DevInit+0x1fe>
  USBx_DEVICE->DCFG |= speed;
 800ea34:	f8dc 3000 	ldr.w	r3, [ip]
 800ea38:	f043 0303 	orr.w	r3, r3, #3
 800ea3c:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800ea40:	2300      	movs	r3, #0
    if (count > 200000U)
 800ea42:	4a5e      	ldr	r2, [pc, #376]	; (800ebbc <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	e003      	b.n	800ea50 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea48:	6903      	ldr	r3, [r0, #16]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f2c0 8094 	blt.w	800eb78 <USB_DevInit+0x1d8>
    count++;
 800ea50:	9b00      	ldr	r3, [sp, #0]
 800ea52:	3301      	adds	r3, #1
 800ea54:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d9f5      	bls.n	800ea48 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800ea5c:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 800ea5e:	2300      	movs	r3, #0
    if (count > 200000U)
 800ea60:	4a56      	ldr	r2, [pc, #344]	; (800ebbc <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800ea62:	9301      	str	r3, [sp, #4]
 800ea64:	e002      	b.n	800ea6c <USB_DevInit+0xcc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea66:	6903      	ldr	r3, [r0, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	db75      	blt.n	800eb58 <USB_DevInit+0x1b8>
    count++;
 800ea6c:	9b01      	ldr	r3, [sp, #4]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ea72:	9b01      	ldr	r3, [sp, #4]
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d9f6      	bls.n	800ea66 <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 800ea78:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea80:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea84:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea88:	b1dc      	cbz	r4, 800eac2 <USB_DevInit+0x122>
 800ea8a:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea8e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea92:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea96:	4617      	mov	r7, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea98:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ea9c:	e007      	b.n	800eaae <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea9e:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaa0:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eaa2:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eaa4:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaa8:	3320      	adds	r3, #32
 800eaaa:	4294      	cmp	r4, r2
 800eaac:	d030      	beq.n	800eb10 <USB_DevInit+0x170>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eaae:	681e      	ldr	r6, [r3, #0]
 800eab0:	2e00      	cmp	r6, #0
 800eab2:	daf4      	bge.n	800ea9e <USB_DevInit+0xfe>
      if (i == 0U)
 800eab4:	b112      	cbz	r2, 800eabc <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eab6:	f8c3 8000 	str.w	r8, [r3]
 800eaba:	e7f1      	b.n	800eaa0 <USB_DevInit+0x100>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eabc:	f8c3 9000 	str.w	r9, [r3]
 800eac0:	e7ee      	b.n	800eaa0 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eac2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800eac6:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eacc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ead0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800ead4:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ead6:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800ead8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eada:	b91b      	cbnz	r3, 800eae4 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eadc:	6983      	ldr	r3, [r0, #24]
 800eade:	f043 0310 	orr.w	r3, r3, #16
 800eae2:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eae4:	6982      	ldr	r2, [r0, #24]
 800eae6:	4b36      	ldr	r3, [pc, #216]	; (800ebc0 <USB_DevInit+0x220>)
 800eae8:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800eaea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eaec:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800eaee:	b11a      	cbz	r2, 800eaf8 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eaf0:	6983      	ldr	r3, [r0, #24]
 800eaf2:	f043 0308 	orr.w	r3, r3, #8
 800eaf6:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800eaf8:	2d01      	cmp	r5, #1
 800eafa:	d103      	bne.n	800eb04 <USB_DevInit+0x164>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eafc:	6982      	ldr	r2, [r0, #24]
 800eafe:	4b31      	ldr	r3, [pc, #196]	; (800ebc4 <USB_DevInit+0x224>)
 800eb00:	4313      	orrs	r3, r2
 800eb02:	6183      	str	r3, [r0, #24]
}
 800eb04:	4608      	mov	r0, r1
 800eb06:	b003      	add	sp, #12
 800eb08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb0c:	b004      	add	sp, #16
 800eb0e:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb10:	2200      	movs	r2, #0
 800eb12:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb16:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb1a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb1e:	4617      	mov	r7, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb20:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800eb24:	e007      	b.n	800eb36 <USB_DevInit+0x196>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb26:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb28:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb2a:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb2c:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb30:	3320      	adds	r3, #32
 800eb32:	4294      	cmp	r4, r2
 800eb34:	d0c5      	beq.n	800eac2 <USB_DevInit+0x122>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb36:	681e      	ldr	r6, [r3, #0]
 800eb38:	2e00      	cmp	r6, #0
 800eb3a:	daf4      	bge.n	800eb26 <USB_DevInit+0x186>
      if (i == 0U)
 800eb3c:	b112      	cbz	r2, 800eb44 <USB_DevInit+0x1a4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb3e:	f8c3 8000 	str.w	r8, [r3]
 800eb42:	e7f1      	b.n	800eb28 <USB_DevInit+0x188>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb44:	f8c3 9000 	str.w	r9, [r3]
 800eb48:	e7ee      	b.n	800eb28 <USB_DevInit+0x188>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eb4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb4c:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eb50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eb54:	6383      	str	r3, [r0, #56]	; 0x38
 800eb56:	e762      	b.n	800ea1e <USB_DevInit+0x7e>
  count = 0U;
 800eb58:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb5a:	4a18      	ldr	r2, [pc, #96]	; (800ebbc <USB_DevInit+0x21c>)
  count = 0U;
 800eb5c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eb5e:	2310      	movs	r3, #16
 800eb60:	6103      	str	r3, [r0, #16]
 800eb62:	e002      	b.n	800eb6a <USB_DevInit+0x1ca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eb64:	6903      	ldr	r3, [r0, #16]
 800eb66:	06db      	lsls	r3, r3, #27
 800eb68:	d587      	bpl.n	800ea7a <USB_DevInit+0xda>
    count++;
 800eb6a:	9b01      	ldr	r3, [sp, #4]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eb70:	9b01      	ldr	r3, [sp, #4]
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d9f6      	bls.n	800eb64 <USB_DevInit+0x1c4>
 800eb76:	e77f      	b.n	800ea78 <USB_DevInit+0xd8>
  count = 0U;
 800eb78:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb7a:	4a10      	ldr	r2, [pc, #64]	; (800ebbc <USB_DevInit+0x21c>)
  count = 0U;
 800eb7c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb7e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800eb82:	6103      	str	r3, [r0, #16]
 800eb84:	e004      	b.n	800eb90 <USB_DevInit+0x1f0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb86:	6901      	ldr	r1, [r0, #16]
 800eb88:	f011 0120 	ands.w	r1, r1, #32
 800eb8c:	f43f af67 	beq.w	800ea5e <USB_DevInit+0xbe>
    count++;
 800eb90:	9b00      	ldr	r3, [sp, #0]
 800eb92:	3301      	adds	r3, #1
 800eb94:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800eb96:	9b00      	ldr	r3, [sp, #0]
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d9f4      	bls.n	800eb86 <USB_DevInit+0x1e6>
 800eb9c:	e75e      	b.n	800ea5c <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 800eb9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eba0:	b923      	cbnz	r3, 800ebac <USB_DevInit+0x20c>
  USBx_DEVICE->DCFG |= speed;
 800eba2:	f8dc 3000 	ldr.w	r3, [ip]
 800eba6:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ebaa:	e749      	b.n	800ea40 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800ebac:	f8dc 3000 	ldr.w	r3, [ip]
 800ebb0:	f043 0301 	orr.w	r3, r3, #1
 800ebb4:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ebb8:	e742      	b.n	800ea40 <USB_DevInit+0xa0>
 800ebba:	bf00      	nop
 800ebbc:	00030d40 	.word	0x00030d40
 800ebc0:	803c3800 	.word	0x803c3800
 800ebc4:	40000004 	.word	0x40000004

0800ebc8 <USB_DevDisconnect>:
{
 800ebc8:	4603      	mov	r3, r0
}
 800ebca:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ebcc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebd0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ebd4:	f022 0203 	bic.w	r2, r2, #3
 800ebd8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebdc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ebe0:	f043 0302 	orr.w	r3, r3, #2
 800ebe4:	604b      	str	r3, [r1, #4]
}
 800ebe6:	4770      	bx	lr

0800ebe8 <audiod_tx_done_cb.constprop.0>:
// This function is called once a transmit of an audio packet was successfully completed. Here, we encode samples and place it in IN EP's buffer for next transmission.
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800ebe8:	b5f0      	push	{r4, r5, r6, r7, lr}
// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
  if (audio->p_desc)
 800ebea:	4c2a      	ldr	r4, [pc, #168]	; (800ec94 <audiod_tx_done_cb.constprop.0+0xac>)
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800ebec:	b083      	sub	sp, #12
  if (audio->p_desc)
 800ebee:	6862      	ldr	r2, [r4, #4]
 800ebf0:	b312      	cbz	r2, 800ec38 <audiod_tx_done_cb.constprop.0+0x50>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ebf2:	7813      	ldrb	r3, [r2, #0]
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ebf4:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	f1ac 0c08 	sub.w	ip, ip, #8
 800ebfe:	4494      	add	ip, r2

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ec00:	88da      	ldrh	r2, [r3, #6]
 800ec02:	4413      	add	r3, r2

    uint8_t tmp = 0;
    while (p_desc < p_desc_end)
 800ec04:	459c      	cmp	ip, r3
 800ec06:	d917      	bls.n	800ec38 <audiod_tx_done_cb.constprop.0+0x50>
 800ec08:	4605      	mov	r5, r0
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800ec0a:	f894 e00c 	ldrb.w	lr, [r4, #12]
    uint8_t tmp = 0;
 800ec0e:	2600      	movs	r6, #0
 800ec10:	e003      	b.n	800ec1a <audiod_tx_done_cb.constprop.0+0x32>
 800ec12:	781a      	ldrb	r2, [r3, #0]
 800ec14:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ec16:	459c      	cmp	ip, r3
 800ec18:	d90e      	bls.n	800ec38 <audiod_tx_done_cb.constprop.0+0x50>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ec1a:	785a      	ldrb	r2, [r3, #1]
 800ec1c:	2a04      	cmp	r2, #4
 800ec1e:	d1f8      	bne.n	800ec12 <audiod_tx_done_cb.constprop.0+0x2a>
 800ec20:	78d9      	ldrb	r1, [r3, #3]
          *idxItf = tmp;
          *pp_desc_int = p_desc;
          return true;
        }
        // Increase index, bytes read, and pointer
        tmp++;
 800ec22:	1c72      	adds	r2, r6, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ec24:	2900      	cmp	r1, #0
 800ec26:	d1f4      	bne.n	800ec12 <audiod_tx_done_cb.constprop.0+0x2a>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ec28:	7898      	ldrb	r0, [r3, #2]
 800ec2a:	4570      	cmp	r0, lr
 800ec2c:	d007      	beq.n	800ec3e <audiod_tx_done_cb.constprop.0+0x56>
        tmp++;
 800ec2e:	b2d6      	uxtb	r6, r2
 800ec30:	781a      	ldrb	r2, [r3, #0]
 800ec32:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ec34:	459c      	cmp	ip, r3
 800ec36:	d8f0      	bhi.n	800ec1a <audiod_tx_done_cb.constprop.0+0x32>
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800ec38:	2000      	movs	r0, #0
}
 800ec3a:	b003      	add	sp, #12
 800ec3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 800ec3e:	69e3      	ldr	r3, [r4, #28]
 800ec40:	5d9b      	ldrb	r3, [r3, r6]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d0f8      	beq.n	800ec38 <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800ec46:	4a14      	ldr	r2, [pc, #80]	; (800ec98 <audiod_tx_done_cb.constprop.0+0xb0>)
 800ec48:	b12a      	cbz	r2, 800ec56 <audiod_tx_done_cb.constprop.0+0x6e>
 800ec4a:	7a22      	ldrb	r2, [r4, #8]
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	f7f6 fac7 	bl	80051e0 <tud_audio_tx_done_pre_load_cb>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d0f0      	beq.n	800ec38 <audiod_tx_done_cb.constprop.0+0x50>
  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 800ec56:	4811      	ldr	r0, [pc, #68]	; (800ec9c <audiod_tx_done_cb.constprop.0+0xb4>)
 800ec58:	f000 febc 	bl	800f9d4 <tu_fifo_count>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ec5c:	8963      	ldrh	r3, [r4, #10]
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 800ec5e:	4a0f      	ldr	r2, [pc, #60]	; (800ec9c <audiod_tx_done_cb.constprop.0+0xb4>)
 800ec60:	4298      	cmp	r0, r3
 800ec62:	7a21      	ldrb	r1, [r4, #8]
 800ec64:	bf28      	it	cs
 800ec66:	4618      	movcs	r0, r3
 800ec68:	b287      	uxth	r7, r0
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	463b      	mov	r3, r7
 800ec6e:	f001 fda3 	bl	80107b8 <usbd_edpt_xfer_fifo>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0e0      	beq.n	800ec38 <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800ec76:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <audiod_tx_done_cb.constprop.0+0xb8>)
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0de      	beq.n	800ec3a <audiod_tx_done_cb.constprop.0+0x52>
 800ec7c:	69e2      	ldr	r2, [r4, #28]
 800ec7e:	4639      	mov	r1, r7
 800ec80:	7a23      	ldrb	r3, [r4, #8]
 800ec82:	4628      	mov	r0, r5
 800ec84:	5d94      	ldrb	r4, [r2, r6]
 800ec86:	2200      	movs	r2, #0
 800ec88:	9400      	str	r4, [sp, #0]
 800ec8a:	f7f6 faab 	bl	80051e4 <tud_audio_tx_done_post_load_cb>
}
 800ec8e:	b003      	add	sp, #12
 800ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec92:	bf00      	nop
 800ec94:	2400c7bc 	.word	0x2400c7bc
 800ec98:	080051e1 	.word	0x080051e1
 800ec9c:	2400c7e8 	.word	0x2400c7e8
 800eca0:	080051e5 	.word	0x080051e5

0800eca4 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 800eca4:	b928      	cbnz	r0, 800ecb2 <tud_audio_n_read+0xe>
 800eca6:	4804      	ldr	r0, [pc, #16]	; (800ecb8 <tud_audio_n_read+0x14>)
 800eca8:	6843      	ldr	r3, [r0, #4]
 800ecaa:	b113      	cbz	r3, 800ecb2 <tud_audio_n_read+0xe>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 800ecac:	3020      	adds	r0, #32
 800ecae:	f000 bf0d 	b.w	800facc <tu_fifo_read_n>
}
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	2400c7bc 	.word	0x2400c7bc

0800ecbc <tud_audio_n_write>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 800ecbc:	b928      	cbnz	r0, 800ecca <tud_audio_n_write+0xe>
 800ecbe:	4804      	ldr	r0, [pc, #16]	; (800ecd0 <tud_audio_n_write+0x14>)
 800ecc0:	6843      	ldr	r3, [r0, #4]
 800ecc2:	b113      	cbz	r3, 800ecca <tud_audio_n_write+0xe>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 800ecc4:	302c      	adds	r0, #44	; 0x2c
 800ecc6:	f000 bf65 	b.w	800fb94 <tu_fifo_write_n>
}
 800ecca:	2000      	movs	r0, #0
 800eccc:	4770      	bx	lr
 800ecce:	bf00      	nop
 800ecd0:	2400c7bc 	.word	0x2400c7bc

0800ecd4 <audiod_init>:
{
 800ecd4:	b530      	push	{r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800ecd6:	4c11      	ldr	r4, [pc, #68]	; (800ed1c <audiod_init+0x48>)
{
 800ecd8:	b083      	sub	sp, #12
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800ecda:	2238      	movs	r2, #56	; 0x38
 800ecdc:	2100      	movs	r1, #0
 800ecde:	4620      	mov	r0, r4
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800ece0:	2501      	movs	r5, #1
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800ece2:	f002 fc09 	bl	80114f8 <memset>
        audio->ctrl_buf = ctrl_buf_1;
 800ece6:	4a0e      	ldr	r2, [pc, #56]	; (800ed20 <audiod_init+0x4c>)
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800ece8:	2340      	movs	r3, #64	; 0x40
        audio->alt_setting = alt_setting_1;
 800ecea:	490e      	ldr	r1, [pc, #56]	; (800ed24 <audiod_init+0x50>)
        audio->ctrl_buf = ctrl_buf_1;
 800ecec:	6162      	str	r2, [r4, #20]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800ecee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800ecf2:	7623      	strb	r3, [r4, #24]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800ecf4:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ecf8:	462b      	mov	r3, r5
        audio->alt_setting = alt_setting_1;
 800ecfa:	61e1      	str	r1, [r4, #28]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800ecfc:	9500      	str	r5, [sp, #0]
 800ecfe:	490a      	ldr	r1, [pc, #40]	; (800ed28 <audiod_init+0x54>)
 800ed00:	f000 fe4e 	bl	800f9a0 <tu_fifo_config>
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 800ed04:	462b      	mov	r3, r5
 800ed06:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800ed0a:	4908      	ldr	r1, [pc, #32]	; (800ed2c <audiod_init+0x58>)
 800ed0c:	f104 0020 	add.w	r0, r4, #32
 800ed10:	9500      	str	r5, [sp, #0]
 800ed12:	f000 fe45 	bl	800f9a0 <tu_fifo_config>
}
 800ed16:	b003      	add	sp, #12
 800ed18:	bd30      	pop	{r4, r5, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2400c7bc 	.word	0x2400c7bc
 800ed20:	2400d110 	.word	0x2400d110
 800ed24:	2400c7f4 	.word	0x2400c7f4
 800ed28:	2400c7f8 	.word	0x2400c7f8
 800ed2c:	2400cb00 	.word	0x2400cb00

0800ed30 <audiod_reset>:
{
 800ed30:	b510      	push	{r4, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800ed32:	4c08      	ldr	r4, [pc, #32]	; (800ed54 <audiod_reset+0x24>)
 800ed34:	2300      	movs	r3, #0
    tu_fifo_clear(&audio->ep_in_ff);
 800ed36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800ed3a:	6123      	str	r3, [r4, #16]
 800ed3c:	e9c4 3300 	strd	r3, r3, [r4]
 800ed40:	e9c4 3302 	strd	r3, r3, [r4, #8]
    tu_fifo_clear(&audio->ep_in_ff);
 800ed44:	f000 ffd2 	bl	800fcec <tu_fifo_clear>
    tu_fifo_clear(&audio->ep_out_ff);
 800ed48:	f104 0020 	add.w	r0, r4, #32
}
 800ed4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&audio->ep_out_ff);
 800ed50:	f000 bfcc 	b.w	800fcec <tu_fifo_clear>
 800ed54:	2400c7bc 	.word	0x2400c7bc

0800ed58 <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800ed58:	794a      	ldrb	r2, [r1, #5]
 800ed5a:	2a01      	cmp	r2, #1
 800ed5c:	d102      	bne.n	800ed64 <audiod_open+0xc>
 800ed5e:	798a      	ldrb	r2, [r1, #6]
 800ed60:	2a01      	cmp	r2, #1
 800ed62:	d001      	beq.n	800ed68 <audiod_open+0x10>
 800ed64:	2000      	movs	r0, #0
}
 800ed66:	4770      	bx	lr
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 800ed68:	79ca      	ldrb	r2, [r1, #7]
 800ed6a:	2a20      	cmp	r2, #32
 800ed6c:	d1fa      	bne.n	800ed64 <audiod_open+0xc>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 800ed6e:	790a      	ldrb	r2, [r1, #4]
 800ed70:	2a01      	cmp	r2, #1
 800ed72:	d0f7      	beq.n	800ed64 <audiod_open+0xc>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 800ed74:	78ca      	ldrb	r2, [r1, #3]
 800ed76:	2a00      	cmp	r2, #0
 800ed78:	d1f4      	bne.n	800ed64 <audiod_open+0xc>
    if (!_audiod_fct[i].p_desc)
 800ed7a:	4603      	mov	r3, r0
{
 800ed7c:	b410      	push	{r4}
    if (!_audiod_fct[i].p_desc)
 800ed7e:	4c0b      	ldr	r4, [pc, #44]	; (800edac <audiod_open+0x54>)
 800ed80:	6860      	ldr	r0, [r4, #4]
 800ed82:	b948      	cbnz	r0, 800ed98 <audiod_open+0x40>
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800ed84:	f44f 729c 	mov.w	r2, #312	; 0x138
  return drv_len;
 800ed88:	f44f 7098 	mov.w	r0, #304	; 0x130
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 800ed8c:	6061      	str	r1, [r4, #4]
      _audiod_fct[i].rhport = rhport;
 800ed8e:	7023      	strb	r3, [r4, #0]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800ed90:	8262      	strh	r2, [r4, #18]
}
 800ed92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed96:	4770      	bx	lr
  TU_ASSERT( i < CFG_TUD_AUDIO );
 800ed98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed9c:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 800eda0:	f010 0001 	ands.w	r0, r0, #1
 800eda4:	d0f5      	beq.n	800ed92 <audiod_open+0x3a>
 800eda6:	be00      	bkpt	0x0000
 800eda8:	4610      	mov	r0, r2
 800edaa:	e7f2      	b.n	800ed92 <audiod_open+0x3a>
 800edac:	2400c7bc 	.word	0x2400c7bc

0800edb0 <audiod_control_xfer_cb>:
  if ( stage == CONTROL_STAGE_SETUP )
 800edb0:	2901      	cmp	r1, #1
{
 800edb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb6:	4605      	mov	r5, r0
 800edb8:	b083      	sub	sp, #12
 800edba:	4614      	mov	r4, r2
  if ( stage == CONTROL_STAGE_SETUP )
 800edbc:	d006      	beq.n	800edcc <audiod_control_xfer_cb+0x1c>
  else if ( stage == CONTROL_STAGE_DATA )
 800edbe:	2902      	cmp	r1, #2
 800edc0:	d041      	beq.n	800ee46 <audiod_control_xfer_cb+0x96>
  return true;
 800edc2:	2201      	movs	r2, #1
}
 800edc4:	4610      	mov	r0, r2
 800edc6:	b003      	add	sp, #12
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 800edcc:	7810      	ldrb	r0, [r2, #0]
 800edce:	f010 0860 	ands.w	r8, r0, #96	; 0x60
 800edd2:	d129      	bne.n	800ee28 <audiod_control_xfer_cb+0x78>
    switch (p_request->bRequest)
 800edd4:	7853      	ldrb	r3, [r2, #1]
 800edd6:	2b0a      	cmp	r3, #10
 800edd8:	f000 8090 	beq.w	800eefc <audiod_control_xfer_cb+0x14c>
 800eddc:	2b0b      	cmp	r3, #11
 800edde:	d126      	bne.n	800ee2e <audiod_control_xfer_cb+0x7e>
  if (audio->p_desc)
 800ede0:	4f9e      	ldr	r7, [pc, #632]	; (800f05c <audiod_control_xfer_cb+0x2ac>)
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	b352      	cbz	r2, 800ee3c <audiod_control_xfer_cb+0x8c>
 800ede6:	7816      	ldrb	r6, [r2, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ede8:	8a7b      	ldrh	r3, [r7, #18]
 800edea:	4416      	add	r6, r2
 800edec:	3b08      	subs	r3, #8
 800edee:	441a      	add	r2, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800edf0:	88f3      	ldrh	r3, [r6, #6]
 800edf2:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 800edf4:	42b2      	cmp	r2, r6
 800edf6:	d921      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800edf8:	f8b4 a004 	ldrh.w	sl, [r4, #4]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800edfc:	fa5f fa8a 	uxtb.w	sl, sl
 800ee00:	e003      	b.n	800ee0a <audiod_control_xfer_cb+0x5a>
 800ee02:	7833      	ldrb	r3, [r6, #0]
 800ee04:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 800ee06:	42b2      	cmp	r2, r6
 800ee08:	d918      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ee0a:	7873      	ldrb	r3, [r6, #1]
 800ee0c:	2b04      	cmp	r3, #4
 800ee0e:	d1f8      	bne.n	800ee02 <audiod_control_xfer_cb+0x52>
 800ee10:	78f3      	ldrb	r3, [r6, #3]
        tmp++;
 800ee12:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1f3      	bne.n	800ee02 <audiod_control_xfer_cb+0x52>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ee1a:	78b0      	ldrb	r0, [r6, #2]
 800ee1c:	4550      	cmp	r0, sl
 800ee1e:	f000 808f 	beq.w	800ef40 <audiod_control_xfer_cb+0x190>
        tmp++;
 800ee22:	fa5f f881 	uxtb.w	r8, r1
 800ee26:	e7ec      	b.n	800ee02 <audiod_control_xfer_cb+0x52>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 800ee28:	f1b8 0f20 	cmp.w	r8, #32
 800ee2c:	d03a      	beq.n	800eea4 <audiod_control_xfer_cb+0xf4>
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800ee2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee32:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ee36:	07d8      	lsls	r0, r3, #31
 800ee38:	d500      	bpl.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800ee3a:	be00      	bkpt	0x0000
 800ee3c:	2200      	movs	r2, #0
}
 800ee3e:	4610      	mov	r0, r2
 800ee40:	b003      	add	sp, #12
 800ee42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 800ee46:	7813      	ldrb	r3, [r2, #0]
 800ee48:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800ee4c:	2a20      	cmp	r2, #32
 800ee4e:	d1b8      	bne.n	800edc2 <audiod_control_xfer_cb+0x12>
    switch (p_request->bmRequestType_bit.recipient)
 800ee50:	f003 031f 	and.w	r3, r3, #31
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	f000 80d6 	beq.w	800f006 <audiod_control_xfer_cb+0x256>
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d1e7      	bne.n	800ee2e <audiod_control_xfer_cb+0x7e>
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ee5e:	88a0      	ldrh	r0, [r4, #4]
        if (tud_audio_set_req_ep_cb)
 800ee60:	4b7f      	ldr	r3, [pc, #508]	; (800f060 <audiod_control_xfer_cb+0x2b0>)
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ee62:	b2c0      	uxtb	r0, r0
        if (tud_audio_set_req_ep_cb)
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d0e9      	beq.n	800ee3c <audiod_control_xfer_cb+0x8c>
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 800ee68:	4f7c      	ldr	r7, [pc, #496]	; (800f05c <audiod_control_xfer_cb+0x2ac>)
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	d0e5      	beq.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800ee70:	780b      	ldrb	r3, [r1, #0]
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800ee72:	8a7a      	ldrh	r2, [r7, #18]
 800ee74:	440b      	add	r3, r1
 800ee76:	4411      	add	r1, r2

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ee78:	88da      	ldrh	r2, [r3, #6]
 800ee7a:	4413      	add	r3, r2

      while (p_desc < p_desc_end)
 800ee7c:	4299      	cmp	r1, r3
 800ee7e:	d804      	bhi.n	800ee8a <audiod_control_xfer_cb+0xda>
 800ee80:	e7dc      	b.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800ee82:	781a      	ldrb	r2, [r3, #0]
 800ee84:	4413      	add	r3, r2
 800ee86:	4299      	cmp	r1, r3
 800ee88:	d9d8      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800ee8a:	785a      	ldrb	r2, [r3, #1]
 800ee8c:	2a05      	cmp	r2, #5
 800ee8e:	d1f8      	bne.n	800ee82 <audiod_control_xfer_cb+0xd2>
 800ee90:	789a      	ldrb	r2, [r3, #2]
 800ee92:	4282      	cmp	r2, r0
 800ee94:	d1f5      	bne.n	800ee82 <audiod_control_xfer_cb+0xd2>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	4621      	mov	r1, r4
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f3af 8000 	nop.w
 800eea0:	4602      	mov	r2, r0
 800eea2:	e78f      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800eea4:	8893      	ldrh	r3, [r2, #4]
    switch (p_request->bmRequestType_bit.recipient)
 800eea6:	f000 021f 	and.w	r2, r0, #31
 800eeaa:	2a01      	cmp	r2, #1
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800eeac:	b2de      	uxtb	r6, r3
    switch (p_request->bmRequestType_bit.recipient)
 800eeae:	f000 80ee 	beq.w	800f08e <audiod_control_xfer_cb+0x2de>
 800eeb2:	2a02      	cmp	r2, #2
 800eeb4:	d1bb      	bne.n	800ee2e <audiod_control_xfer_cb+0x7e>
    if (_audiod_fct[i].p_desc)
 800eeb6:	4f69      	ldr	r7, [pc, #420]	; (800f05c <audiod_control_xfer_cb+0x2ac>)
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	2900      	cmp	r1, #0
 800eebc:	d0be      	beq.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800eebe:	780b      	ldrb	r3, [r1, #0]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800eec0:	8a7a      	ldrh	r2, [r7, #18]
 800eec2:	440b      	add	r3, r1
 800eec4:	4411      	add	r1, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800eec6:	88da      	ldrh	r2, [r3, #6]
 800eec8:	4413      	add	r3, r2
      while (p_desc < p_desc_end)
 800eeca:	4299      	cmp	r1, r3
 800eecc:	d804      	bhi.n	800eed8 <audiod_control_xfer_cb+0x128>
 800eece:	e7b5      	b.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800eed0:	781a      	ldrb	r2, [r3, #0]
 800eed2:	4413      	add	r3, r2
 800eed4:	4299      	cmp	r1, r3
 800eed6:	d9b1      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800eed8:	785a      	ldrb	r2, [r3, #1]
 800eeda:	2a05      	cmp	r2, #5
 800eedc:	d1f8      	bne.n	800eed0 <audiod_control_xfer_cb+0x120>
 800eede:	789a      	ldrb	r2, [r3, #2]
 800eee0:	42b2      	cmp	r2, r6
 800eee2:	d1f5      	bne.n	800eed0 <audiod_control_xfer_cb+0x120>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800eee4:	0603      	lsls	r3, r0, #24
 800eee6:	f100 8171 	bmi.w	800f1cc <audiod_control_xfer_cb+0x41c>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 800eeea:	7e3b      	ldrb	r3, [r7, #24]
 800eeec:	4621      	mov	r1, r4
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	4628      	mov	r0, r5
}
 800eef2:	b003      	add	sp, #12
 800eef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800eef8:	f001 bd02 	b.w	8010900 <tud_control_xfer>
  if (audio->p_desc)
 800eefc:	4f57      	ldr	r7, [pc, #348]	; (800f05c <audiod_control_xfer_cb+0x2ac>)
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d09b      	beq.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800ef04:	7803      	ldrb	r3, [r0, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ef06:	8a7a      	ldrh	r2, [r7, #18]
 800ef08:	4403      	add	r3, r0
 800ef0a:	3a08      	subs	r2, #8
 800ef0c:	4410      	add	r0, r2
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ef0e:	88da      	ldrh	r2, [r3, #6]
 800ef10:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ef12:	4298      	cmp	r0, r3
 800ef14:	d992      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800ef16:	88a6      	ldrh	r6, [r4, #4]
 800ef18:	b2f6      	uxtb	r6, r6
 800ef1a:	e003      	b.n	800ef24 <audiod_control_xfer_cb+0x174>
 800ef1c:	781a      	ldrb	r2, [r3, #0]
 800ef1e:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ef20:	4298      	cmp	r0, r3
 800ef22:	d98b      	bls.n	800ee3c <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ef24:	785a      	ldrb	r2, [r3, #1]
 800ef26:	2a04      	cmp	r2, #4
 800ef28:	d1f8      	bne.n	800ef1c <audiod_control_xfer_cb+0x16c>
 800ef2a:	78da      	ldrb	r2, [r3, #3]
        tmp++;
 800ef2c:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ef30:	2a00      	cmp	r2, #0
 800ef32:	d1f3      	bne.n	800ef1c <audiod_control_xfer_cb+0x16c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ef34:	789a      	ldrb	r2, [r3, #2]
 800ef36:	42b2      	cmp	r2, r6
 800ef38:	d05f      	beq.n	800effa <audiod_control_xfer_cb+0x24a>
        tmp++;
 800ef3a:	fa5f f881 	uxtb.w	r8, r1
 800ef3e:	e7ed      	b.n	800ef1c <audiod_control_xfer_cb+0x16c>
  if (audio->ep_in_as_intf_num == itf)
 800ef40:	4699      	mov	r9, r3
 800ef42:	7b3b      	ldrb	r3, [r7, #12]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 800ef44:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  if (audio->ep_in_as_intf_num == itf)
 800ef48:	4553      	cmp	r3, sl
 800ef4a:	f000 8115 	beq.w	800f178 <audiod_control_xfer_cb+0x3c8>
  if (audio->ep_out_as_intf_num == itf)
 800ef4e:	7c3b      	ldrb	r3, [r7, #16]
 800ef50:	4553      	cmp	r3, sl
 800ef52:	f000 8126 	beq.w	800f1a2 <audiod_control_xfer_cb+0x3f2>
  audio->alt_setting[idxItf] = alt;
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	fa5f f28b 	uxtb.w	r2, fp
 800ef5c:	f803 2008 	strb.w	r2, [r3, r8]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ef60:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f1a8 0808 	sub.w	r8, r8, #8
 800ef6a:	4498      	add	r8, r3
  while (p_desc < p_desc_end)
 800ef6c:	45b0      	cmp	r8, r6
 800ef6e:	d805      	bhi.n	800ef7c <audiod_control_xfer_cb+0x1cc>
 800ef70:	e087      	b.n	800f082 <audiod_control_xfer_cb+0x2d2>
 800ef72:	7833      	ldrb	r3, [r6, #0]
 800ef74:	441e      	add	r6, r3
 800ef76:	45b0      	cmp	r8, r6
 800ef78:	f240 8083 	bls.w	800f082 <audiod_control_xfer_cb+0x2d2>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800ef7c:	7873      	ldrb	r3, [r6, #1]
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d1f7      	bne.n	800ef72 <audiod_control_xfer_cb+0x1c2>
 800ef82:	78b3      	ldrb	r3, [r6, #2]
 800ef84:	4553      	cmp	r3, sl
 800ef86:	d1f4      	bne.n	800ef72 <audiod_control_xfer_cb+0x1c2>
 800ef88:	78f3      	ldrb	r3, [r6, #3]
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d1f1      	bne.n	800ef72 <audiod_control_xfer_cb+0x1c2>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800ef8e:	f896 b004 	ldrb.w	fp, [r6, #4]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800ef92:	f1bb 0f00 	cmp.w	fp, #0
 800ef96:	d06b      	beq.n	800f070 <audiod_control_xfer_cb+0x2c0>
 800ef98:	45b0      	cmp	r8, r6
 800ef9a:	f67f af4f 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800ef9e:	7833      	ldrb	r3, [r6, #0]
 800efa0:	45cb      	cmp	fp, r9
 800efa2:	441e      	add	r6, r3
 800efa4:	d962      	bls.n	800f06c <audiod_control_xfer_cb+0x2bc>
 800efa6:	45b0      	cmp	r8, r6
 800efa8:	f67f af48 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 800efac:	7873      	ldrb	r3, [r6, #1]
 800efae:	2b05      	cmp	r3, #5
 800efb0:	d1f5      	bne.n	800ef9e <audiod_control_xfer_cb+0x1ee>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800efb2:	4631      	mov	r1, r6
 800efb4:	4628      	mov	r0, r5
 800efb6:	f001 fb87 	bl	80106c8 <usbd_edpt_open>
 800efba:	4602      	mov	r2, r0
          usbd_edpt_clear_stall(rhport, ep_addr);
 800efbc:	4628      	mov	r0, r5
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	f000 8121 	beq.w	800f206 <audiod_control_xfer_cb+0x456>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800efc4:	78b1      	ldrb	r1, [r6, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 800efc6:	9101      	str	r1, [sp, #4]
 800efc8:	f001 fc2e 	bl	8010828 <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800efcc:	9901      	ldr	r1, [sp, #4]
 800efce:	09cb      	lsrs	r3, r1, #7
 800efd0:	f040 8106 	bne.w	800f1e0 <audiod_control_xfer_cb+0x430>
            audio->ep_out = ep_addr;
 800efd4:	7379      	strb	r1, [r7, #13]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800efd6:	4628      	mov	r0, r5
            audio->ep_out_as_intf_num = itf;
 800efd8:	f887 a010 	strb.w	sl, [r7, #16]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800efdc:	88b3      	ldrh	r3, [r6, #4]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800efde:	4a21      	ldr	r2, [pc, #132]	; (800f064 <audiod_control_xfer_cb+0x2b4>)
 800efe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 800efe4:	81fb      	strh	r3, [r7, #14]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800efe6:	f001 fbe7 	bl	80107b8 <usbd_edpt_xfer_fifo>
 800efea:	2800      	cmp	r0, #0
 800efec:	f43f af26 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
          foundEPs += 1;
 800eff0:	f109 0901 	add.w	r9, r9, #1
 800eff4:	fa5f f989 	uxtb.w	r9, r9
 800eff8:	e7d1      	b.n	800ef9e <audiod_control_xfer_cb+0x1ee>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800effa:	69fa      	ldr	r2, [r7, #28]
 800effc:	2301      	movs	r3, #1
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	4442      	add	r2, r8
 800f004:	e775      	b.n	800eef2 <audiod_control_xfer_cb+0x142>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f006:	88a3      	ldrh	r3, [r4, #4]
 800f008:	b2de      	uxtb	r6, r3
        if (entityID != 0)
 800f00a:	0a1b      	lsrs	r3, r3, #8
 800f00c:	f000 8091 	beq.w	800f132 <audiod_control_xfer_cb+0x382>
          if (tud_audio_set_req_entity_cb)
 800f010:	4a15      	ldr	r2, [pc, #84]	; (800f068 <audiod_control_xfer_cb+0x2b8>)
 800f012:	2a00      	cmp	r2, #0
 800f014:	f43f af12 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f018:	4f10      	ldr	r7, [pc, #64]	; (800f05c <audiod_control_xfer_cb+0x2ac>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f01a:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	2900      	cmp	r1, #0
 800f020:	f43f af0c 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f024:	788b      	ldrb	r3, [r1, #2]
 800f026:	42b3      	cmp	r3, r6
 800f028:	f47f af08 	bne.w	800ee3c <audiod_control_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f02c:	780b      	ldrb	r3, [r1, #0]
 800f02e:	18c8      	adds	r0, r1, r3
 800f030:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f032:	88c1      	ldrh	r1, [r0, #6]
 800f034:	4403      	add	r3, r0
 800f036:	4408      	add	r0, r1
      while (p_desc < p_desc_end)
 800f038:	4298      	cmp	r0, r3
 800f03a:	d805      	bhi.n	800f048 <audiod_control_xfer_cb+0x298>
 800f03c:	e6fe      	b.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800f03e:	7819      	ldrb	r1, [r3, #0]
 800f040:	440b      	add	r3, r1
 800f042:	4298      	cmp	r0, r3
 800f044:	f67f aefa 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f048:	78d9      	ldrb	r1, [r3, #3]
 800f04a:	4291      	cmp	r1, r2
 800f04c:	d1f7      	bne.n	800f03e <audiod_control_xfer_cb+0x28e>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	4621      	mov	r1, r4
 800f052:	4628      	mov	r0, r5
 800f054:	f7f6 f868 	bl	8005128 <tud_audio_set_req_entity_cb>
 800f058:	4602      	mov	r2, r0
 800f05a:	e6b3      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
 800f05c:	2400c7bc 	.word	0x2400c7bc
 800f060:	00000000 	.word	0x00000000
 800f064:	2400c7dc 	.word	0x2400c7dc
 800f068:	08005129 	.word	0x08005129
      TU_VERIFY(foundEPs == nEps);
 800f06c:	f47f aee6 	bne.w	800ee3c <audiod_control_xfer_cb+0x8c>
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 800f070:	4b69      	ldr	r3, [pc, #420]	; (800f218 <audiod_control_xfer_cb+0x468>)
 800f072:	b133      	cbz	r3, 800f082 <audiod_control_xfer_cb+0x2d2>
 800f074:	4621      	mov	r1, r4
 800f076:	4628      	mov	r0, r5
 800f078:	f7f6 f88e 	bl	8005198 <tud_audio_set_itf_cb>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	f43f aedd 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
  tud_control_status(rhport, p_request);
 800f082:	4621      	mov	r1, r4
 800f084:	4628      	mov	r0, r5
 800f086:	f001 fc21 	bl	80108cc <tud_control_status>
  return true;
 800f08a:	2201      	movs	r2, #1
 800f08c:	e69a      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
        if (entityID != 0)
 800f08e:	0a1b      	lsrs	r3, r3, #8
 800f090:	d027      	beq.n	800f0e2 <audiod_control_xfer_cb+0x332>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f092:	4f62      	ldr	r7, [pc, #392]	; (800f21c <audiod_control_xfer_cb+0x46c>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f094:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f096:	6879      	ldr	r1, [r7, #4]
 800f098:	2900      	cmp	r1, #0
 800f09a:	f43f aecf 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f09e:	788b      	ldrb	r3, [r1, #2]
 800f0a0:	42b3      	cmp	r3, r6
 800f0a2:	f47f aecb 	bne.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f0a6:	780b      	ldrb	r3, [r1, #0]
 800f0a8:	18ce      	adds	r6, r1, r3
 800f0aa:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f0ac:	88f1      	ldrh	r1, [r6, #6]
 800f0ae:	4433      	add	r3, r6
 800f0b0:	440e      	add	r6, r1
      while (p_desc < p_desc_end)
 800f0b2:	429e      	cmp	r6, r3
 800f0b4:	d805      	bhi.n	800f0c2 <audiod_control_xfer_cb+0x312>
 800f0b6:	e6c1      	b.n	800ee3c <audiod_control_xfer_cb+0x8c>
 800f0b8:	7819      	ldrb	r1, [r3, #0]
 800f0ba:	440b      	add	r3, r1
 800f0bc:	429e      	cmp	r6, r3
 800f0be:	f67f aebd 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f0c2:	78d9      	ldrb	r1, [r3, #3]
 800f0c4:	4291      	cmp	r1, r2
 800f0c6:	d1f7      	bne.n	800f0b8 <audiod_control_xfer_cb+0x308>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800f0c8:	0601      	lsls	r1, r0, #24
 800f0ca:	f57f af0e 	bpl.w	800eeea <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_entity_cb)
 800f0ce:	4b54      	ldr	r3, [pc, #336]	; (800f220 <audiod_control_xfer_cb+0x470>)
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f43f aeb3 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f7f5 ff93 	bl	8005004 <tud_audio_get_req_entity_cb>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	e670      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
    if (_audiod_fct[i].p_desc)
 800f0e2:	4f4e      	ldr	r7, [pc, #312]	; (800f21c <audiod_control_xfer_cb+0x46c>)
 800f0e4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800f0e8:	f1bc 0f00 	cmp.w	ip, #0
 800f0ec:	f43f aea6 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f0f0:	8a79      	ldrh	r1, [r7, #18]
 800f0f2:	3908      	subs	r1, #8
 800f0f4:	4461      	add	r1, ip
      while (p_desc < p_desc_end)
 800f0f6:	458c      	cmp	ip, r1
 800f0f8:	f4bf aea0 	bcs.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f0fc:	4663      	mov	r3, ip
 800f0fe:	e004      	b.n	800f10a <audiod_control_xfer_cb+0x35a>
 800f100:	781a      	ldrb	r2, [r3, #0]
 800f102:	4413      	add	r3, r2
 800f104:	4299      	cmp	r1, r3
 800f106:	f67f ae99 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f10a:	785a      	ldrb	r2, [r3, #1]
 800f10c:	2a04      	cmp	r2, #4
 800f10e:	d1f7      	bne.n	800f100 <audiod_control_xfer_cb+0x350>
 800f110:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800f114:	42b2      	cmp	r2, r6
 800f116:	d1f3      	bne.n	800f100 <audiod_control_xfer_cb+0x350>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800f118:	0602      	lsls	r2, r0, #24
 800f11a:	f57f aee6 	bpl.w	800eeea <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_itf_cb)
 800f11e:	4b41      	ldr	r3, [pc, #260]	; (800f224 <audiod_control_xfer_cb+0x474>)
 800f120:	2b00      	cmp	r3, #0
 800f122:	f43f ae8b 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 800f126:	4621      	mov	r1, r4
 800f128:	4628      	mov	r0, r5
 800f12a:	f3af 8000 	nop.w
 800f12e:	4602      	mov	r2, r0
 800f130:	e648      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
          if (tud_audio_set_req_itf_cb)
 800f132:	4b3d      	ldr	r3, [pc, #244]	; (800f228 <audiod_control_xfer_cb+0x478>)
 800f134:	2b00      	cmp	r3, #0
 800f136:	f43f ae81 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc)
 800f13a:	4f38      	ldr	r7, [pc, #224]	; (800f21c <audiod_control_xfer_cb+0x46c>)
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	2800      	cmp	r0, #0
 800f140:	f43f ae7c 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f144:	8a79      	ldrh	r1, [r7, #18]
 800f146:	3908      	subs	r1, #8
 800f148:	4401      	add	r1, r0
      while (p_desc < p_desc_end)
 800f14a:	4288      	cmp	r0, r1
 800f14c:	f4bf ae76 	bcs.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f150:	4603      	mov	r3, r0
 800f152:	e004      	b.n	800f15e <audiod_control_xfer_cb+0x3ae>
 800f154:	781a      	ldrb	r2, [r3, #0]
 800f156:	4413      	add	r3, r2
 800f158:	4299      	cmp	r1, r3
 800f15a:	f67f ae6f 	bls.w	800ee3c <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f15e:	785a      	ldrb	r2, [r3, #1]
 800f160:	2a04      	cmp	r2, #4
 800f162:	d1f7      	bne.n	800f154 <audiod_control_xfer_cb+0x3a4>
 800f164:	7882      	ldrb	r2, [r0, #2]
 800f166:	42b2      	cmp	r2, r6
 800f168:	d1f4      	bne.n	800f154 <audiod_control_xfer_cb+0x3a4>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4621      	mov	r1, r4
 800f16e:	4628      	mov	r0, r5
 800f170:	f3af 8000 	nop.w
 800f174:	4602      	mov	r2, r0
 800f176:	e625      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
    usbd_edpt_close(rhport, audio->ep_in);
 800f178:	7a39      	ldrb	r1, [r7, #8]
 800f17a:	4628      	mov	r0, r5
    audio->ep_in_as_intf_num = 0;
 800f17c:	f887 900c 	strb.w	r9, [r7, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 800f180:	f001 fb72 	bl	8010868 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_in_ff);
 800f184:	4829      	ldr	r0, [pc, #164]	; (800f22c <audiod_control_xfer_cb+0x47c>)
 800f186:	f000 fdb1 	bl	800fcec <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800f18a:	4b29      	ldr	r3, [pc, #164]	; (800f230 <audiod_control_xfer_cb+0x480>)
 800f18c:	b133      	cbz	r3, 800f19c <audiod_control_xfer_cb+0x3ec>
 800f18e:	4621      	mov	r1, r4
 800f190:	4628      	mov	r0, r5
 800f192:	f7f5 ffff 	bl	8005194 <tud_audio_set_itf_close_EP_cb>
 800f196:	2800      	cmp	r0, #0
 800f198:	f43f ae50 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
    audio->ep_in = 0;                           // Necessary?
 800f19c:	2300      	movs	r3, #0
 800f19e:	723b      	strb	r3, [r7, #8]
 800f1a0:	e6d5      	b.n	800ef4e <audiod_control_xfer_cb+0x19e>
    audio->ep_out_as_intf_num = 0;
 800f1a2:	2300      	movs	r3, #0
    usbd_edpt_close(rhport, audio->ep_out);
 800f1a4:	7b79      	ldrb	r1, [r7, #13]
 800f1a6:	4628      	mov	r0, r5
    audio->ep_out_as_intf_num = 0;
 800f1a8:	743b      	strb	r3, [r7, #16]
    usbd_edpt_close(rhport, audio->ep_out);
 800f1aa:	f001 fb5d 	bl	8010868 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_out_ff);
 800f1ae:	4821      	ldr	r0, [pc, #132]	; (800f234 <audiod_control_xfer_cb+0x484>)
 800f1b0:	f000 fd9c 	bl	800fcec <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800f1b4:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <audiod_control_xfer_cb+0x480>)
 800f1b6:	b133      	cbz	r3, 800f1c6 <audiod_control_xfer_cb+0x416>
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	f7f5 ffea 	bl	8005194 <tud_audio_set_itf_close_EP_cb>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	f43f ae3b 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
    audio->ep_out = 0;                          // Necessary?
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	737b      	strb	r3, [r7, #13]
 800f1ca:	e6c4      	b.n	800ef56 <audiod_control_xfer_cb+0x1a6>
          if (tud_audio_get_req_ep_cb)
 800f1cc:	4b1a      	ldr	r3, [pc, #104]	; (800f238 <audiod_control_xfer_cb+0x488>)
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f43f ae34 	beq.w	800ee3c <audiod_control_xfer_cb+0x8c>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f3af 8000 	nop.w
 800f1dc:	4602      	mov	r2, r0
 800f1de:	e5f1      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800f1e0:	78f3      	ldrb	r3, [r6, #3]
 800f1e2:	f013 0f30 	tst.w	r3, #48	; 0x30
 800f1e6:	f47f af03 	bne.w	800eff0 <audiod_control_xfer_cb+0x240>
            audio->ep_in = ep_addr;
 800f1ea:	7239      	strb	r1, [r7, #8]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800f1ec:	4628      	mov	r0, r5
            audio->ep_in_as_intf_num = itf;
 800f1ee:	f887 a00c 	strb.w	sl, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800f1f2:	88b3      	ldrh	r3, [r6, #4]
 800f1f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 800f1f8:	817b      	strh	r3, [r7, #10]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800f1fa:	f7ff fcf5 	bl	800ebe8 <audiod_tx_done_cb.constprop.0>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	f47f aef6 	bne.w	800eff0 <audiod_control_xfer_cb+0x240>
 800f204:	e61a      	b.n	800ee3c <audiod_control_xfer_cb+0x8c>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800f206:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f20a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f20e:	07dc      	lsls	r4, r3, #31
 800f210:	f57f ae14 	bpl.w	800ee3c <audiod_control_xfer_cb+0x8c>
 800f214:	be00      	bkpt	0x0000
 800f216:	e5d5      	b.n	800edc4 <audiod_control_xfer_cb+0x14>
 800f218:	08005199 	.word	0x08005199
 800f21c:	2400c7bc 	.word	0x2400c7bc
 800f220:	08005005 	.word	0x08005005
	...
 800f22c:	2400c7e8 	.word	0x2400c7e8
 800f230:	08005195 	.word	0x08005195
 800f234:	2400c7dc 	.word	0x2400c7dc
 800f238:	00000000 	.word	0x00000000

0800f23c <audiod_xfer_cb>:
{
 800f23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f240:	4c42      	ldr	r4, [pc, #264]	; (800f34c <audiod_xfer_cb+0x110>)
{
 800f242:	b083      	sub	sp, #12
 800f244:	4606      	mov	r6, r0
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f246:	7a22      	ldrb	r2, [r4, #8]
 800f248:	428a      	cmp	r2, r1
 800f24a:	d063      	beq.n	800f314 <audiod_xfer_cb+0xd8>
    if (audio->ep_out == ep_addr)
 800f24c:	7b62      	ldrb	r2, [r4, #13]
 800f24e:	428a      	cmp	r2, r1
 800f250:	d13a      	bne.n	800f2c8 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f252:	f8df e104 	ldr.w	lr, [pc, #260]	; 800f358 <audiod_xfer_cb+0x11c>
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 800f256:	b29d      	uxth	r5, r3
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f258:	f04f 0301 	mov.w	r3, #1
 800f25c:	f1be 0f00 	cmp.w	lr, #0
 800f260:	d06a      	beq.n	800f338 <audiod_xfer_cb+0xfc>
 800f262:	b2db      	uxtb	r3, r3
 800f264:	b93b      	cbnz	r3, 800f276 <audiod_xfer_cb+0x3a>
 800f266:	4a3a      	ldr	r2, [pc, #232]	; (800f350 <audiod_xfer_cb+0x114>)
 800f268:	f04f 0301 	mov.w	r3, #1
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	d059      	beq.n	800f324 <audiod_xfer_cb+0xe8>
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d058      	beq.n	800f328 <audiod_xfer_cb+0xec>
  if (audio->p_desc)
 800f276:	6860      	ldr	r0, [r4, #4]
 800f278:	b330      	cbz	r0, 800f2c8 <audiod_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f27a:	f890 c000 	ldrb.w	ip, [r0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f27e:	8a63      	ldrh	r3, [r4, #18]
 800f280:	4484      	add	ip, r0
 800f282:	3b08      	subs	r3, #8
 800f284:	4418      	add	r0, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800f286:	f8bc 3006 	ldrh.w	r3, [ip, #6]
 800f28a:	449c      	add	ip, r3
    while (p_desc < p_desc_end)
 800f28c:	4560      	cmp	r0, ip
 800f28e:	d91b      	bls.n	800f2c8 <audiod_xfer_cb+0x8c>
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 800f290:	f894 9010 	ldrb.w	r9, [r4, #16]
    uint8_t tmp = 0;
 800f294:	2700      	movs	r7, #0
 800f296:	e004      	b.n	800f2a2 <audiod_xfer_cb+0x66>
 800f298:	f89c 2000 	ldrb.w	r2, [ip]
 800f29c:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800f29e:	4560      	cmp	r0, ip
 800f2a0:	d912      	bls.n	800f2c8 <audiod_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f2a2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800f2a6:	2a04      	cmp	r2, #4
 800f2a8:	d1f6      	bne.n	800f298 <audiod_xfer_cb+0x5c>
 800f2aa:	f89c 2003 	ldrb.w	r2, [ip, #3]
        tmp++;
 800f2ae:	1c7b      	adds	r3, r7, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	d1f1      	bne.n	800f298 <audiod_xfer_cb+0x5c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800f2b4:	f89c 8002 	ldrb.w	r8, [ip, #2]
 800f2b8:	45c8      	cmp	r8, r9
 800f2ba:	d009      	beq.n	800f2d0 <audiod_xfer_cb+0x94>
 800f2bc:	f89c 2000 	ldrb.w	r2, [ip]
        tmp++;
 800f2c0:	b2df      	uxtb	r7, r3
 800f2c2:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800f2c4:	4560      	cmp	r0, ip
 800f2c6:	d8ec      	bhi.n	800f2a2 <audiod_xfer_cb+0x66>
  return false;
 800f2c8:	2000      	movs	r0, #0
}
 800f2ca:	b003      	add	sp, #12
 800f2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (tud_audio_rx_done_pre_read_cb)
 800f2d0:	f1be 0f00 	cmp.w	lr, #0
 800f2d4:	d032      	beq.n	800f33c <audiod_xfer_cb+0x100>
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	69e1      	ldr	r1, [r4, #28]
 800f2da:	4630      	mov	r0, r6
 800f2dc:	5dc9      	ldrb	r1, [r1, r7]
 800f2de:	9100      	str	r1, [sp, #0]
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f5 ff6d 	bl	80051c0 <tud_audio_rx_done_pre_read_cb>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d0ee      	beq.n	800f2c8 <audiod_xfer_cb+0x8c>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f2ea:	89e3      	ldrh	r3, [r4, #14]
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	4a19      	ldr	r2, [pc, #100]	; (800f354 <audiod_xfer_cb+0x118>)
 800f2f0:	7b61      	ldrb	r1, [r4, #13]
 800f2f2:	f001 fa61 	bl	80107b8 <usbd_edpt_xfer_fifo>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0e6      	beq.n	800f2c8 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_post_read_cb)
 800f2fa:	4b15      	ldr	r3, [pc, #84]	; (800f350 <audiod_xfer_cb+0x114>)
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0e4      	beq.n	800f2ca <audiod_xfer_cb+0x8e>
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800f300:	69e2      	ldr	r2, [r4, #28]
 800f302:	4629      	mov	r1, r5
 800f304:	7b63      	ldrb	r3, [r4, #13]
 800f306:	4630      	mov	r0, r6
 800f308:	5dd4      	ldrb	r4, [r2, r7]
 800f30a:	2200      	movs	r2, #0
 800f30c:	9400      	str	r4, [sp, #0]
 800f30e:	f3af 8000 	nop.w
 800f312:	e7da      	b.n	800f2ca <audiod_xfer_cb+0x8e>
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f314:	69e2      	ldr	r2, [r4, #28]
 800f316:	2a00      	cmp	r2, #0
 800f318:	d098      	beq.n	800f24c <audiod_xfer_cb+0x10>
}
 800f31a:	b003      	add	sp, #12
 800f31c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800f320:	f7ff bc62 	b.w	800ebe8 <audiod_tx_done_cb.constprop.0>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f324:	4613      	mov	r3, r2
 800f326:	e7a3      	b.n	800f270 <audiod_xfer_cb+0x34>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f328:	89e3      	ldrh	r3, [r4, #14]
 800f32a:	4630      	mov	r0, r6
 800f32c:	4a09      	ldr	r2, [pc, #36]	; (800f354 <audiod_xfer_cb+0x118>)
 800f32e:	f001 fa43 	bl	80107b8 <usbd_edpt_xfer_fifo>
 800f332:	2800      	cmp	r0, #0
 800f334:	d1c9      	bne.n	800f2ca <audiod_xfer_cb+0x8e>
 800f336:	e7c7      	b.n	800f2c8 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f338:	4673      	mov	r3, lr
 800f33a:	e792      	b.n	800f262 <audiod_xfer_cb+0x26>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f33c:	89e3      	ldrh	r3, [r4, #14]
 800f33e:	4630      	mov	r0, r6
 800f340:	4a04      	ldr	r2, [pc, #16]	; (800f354 <audiod_xfer_cb+0x118>)
 800f342:	f001 fa39 	bl	80107b8 <usbd_edpt_xfer_fifo>
 800f346:	2800      	cmp	r0, #0
 800f348:	d1da      	bne.n	800f300 <audiod_xfer_cb+0xc4>
 800f34a:	e7bd      	b.n	800f2c8 <audiod_xfer_cb+0x8c>
 800f34c:	2400c7bc 	.word	0x2400c7bc
 800f350:	00000000 	.word	0x00000000
 800f354:	2400c7dc 	.word	0x2400c7dc
 800f358:	080051c1 	.word	0x080051c1

0800f35c <audiod_sof_isr>:
}
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop

0800f360 <tud_audio_buffer_and_schedule_control_xfer>:
{
 800f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f364:	460c      	mov	r4, r1
 800f366:	4611      	mov	r1, r2
 800f368:	b082      	sub	sp, #8
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800f36a:	f994 2000 	ldrsb.w	r2, [r4]
 800f36e:	2a00      	cmp	r2, #0
 800f370:	da44      	bge.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  switch (p_request->bmRequestType_bit.recipient)
 800f372:	7822      	ldrb	r2, [r4, #0]
 800f374:	4606      	mov	r6, r0
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f376:	88a0      	ldrh	r0, [r4, #4]
  switch (p_request->bmRequestType_bit.recipient)
 800f378:	f002 021f 	and.w	r2, r2, #31
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f37c:	fa5f f880 	uxtb.w	r8, r0
  switch (p_request->bmRequestType_bit.recipient)
 800f380:	2a01      	cmp	r2, #1
 800f382:	d032      	beq.n	800f3ea <tud_audio_buffer_and_schedule_control_xfer+0x8a>
 800f384:	2a02      	cmp	r2, #2
 800f386:	d13d      	bne.n	800f404 <tud_audio_buffer_and_schedule_control_xfer+0xa4>
    if (_audiod_fct[i].p_desc)
 800f388:	4d38      	ldr	r5, [pc, #224]	; (800f46c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800f38a:	686f      	ldr	r7, [r5, #4]
 800f38c:	2f00      	cmp	r7, #0
 800f38e:	d035      	beq.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f390:	f897 c000 	ldrb.w	ip, [r7]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800f394:	8a6a      	ldrh	r2, [r5, #18]
 800f396:	44bc      	add	ip, r7
 800f398:	4417      	add	r7, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800f39a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800f39e:	4494      	add	ip, r2
      while (p_desc < p_desc_end)
 800f3a0:	4567      	cmp	r7, ip
 800f3a2:	d805      	bhi.n	800f3b0 <tud_audio_buffer_and_schedule_control_xfer+0x50>
 800f3a4:	e02a      	b.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f3a6:	f89c 0000 	ldrb.w	r0, [ip]
 800f3aa:	4484      	add	ip, r0
 800f3ac:	4567      	cmp	r7, ip
 800f3ae:	d925      	bls.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800f3b0:	f89c e001 	ldrb.w	lr, [ip, #1]
 800f3b4:	f1be 0f05 	cmp.w	lr, #5
 800f3b8:	d1f5      	bne.n	800f3a6 <tud_audio_buffer_and_schedule_control_xfer+0x46>
 800f3ba:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800f3be:	4542      	cmp	r2, r8
 800f3c0:	d1f1      	bne.n	800f3a6 <tud_audio_buffer_and_schedule_control_xfer+0x46>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800f3c2:	7e2a      	ldrb	r2, [r5, #24]
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 800f3c4:	6968      	ldr	r0, [r5, #20]
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	bf28      	it	cs
 800f3ca:	4613      	movcs	r3, r2
  if (count > destsz) {
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d315      	bcc.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  memcpy(dest, src, count);
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	f002 f882 	bl	80114dc <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800f3d8:	9b01      	ldr	r3, [sp, #4]
 800f3da:	696a      	ldr	r2, [r5, #20]
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4630      	mov	r0, r6
}
 800f3e0:	b002      	add	sp, #8
 800f3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800f3e6:	f001 ba8b 	b.w	8010900 <tud_control_xfer>
      if (entityID != 0)
 800f3ea:	0a00      	lsrs	r0, r0, #8
 800f3ec:	d012      	beq.n	800f414 <tud_audio_buffer_and_schedule_control_xfer+0xb4>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f3ee:	4d1f      	ldr	r5, [pc, #124]	; (800f46c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f3f0:	b2c0      	uxtb	r0, r0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f3f2:	686f      	ldr	r7, [r5, #4]
 800f3f4:	b117      	cbz	r7, 800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f3f6:	78ba      	ldrb	r2, [r7, #2]
 800f3f8:	4542      	cmp	r2, r8
 800f3fa:	d023      	beq.n	800f444 <tud_audio_buffer_and_schedule_control_xfer+0xe4>
}
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	b002      	add	sp, #8
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800f404:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f408:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f40c:	07db      	lsls	r3, r3, #31
 800f40e:	d5f5      	bpl.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f410:	be00      	bkpt	0x0000
 800f412:	e7f3      	b.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
    if (_audiod_fct[i].p_desc)
 800f414:	4d15      	ldr	r5, [pc, #84]	; (800f46c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800f416:	686f      	ldr	r7, [r5, #4]
 800f418:	2f00      	cmp	r7, #0
 800f41a:	d0ef      	beq.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f41c:	8a68      	ldrh	r0, [r5, #18]
 800f41e:	3808      	subs	r0, #8
 800f420:	4438      	add	r0, r7
      while (p_desc < p_desc_end)
 800f422:	4287      	cmp	r7, r0
 800f424:	d2ea      	bcs.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f426:	46bc      	mov	ip, r7
 800f428:	e004      	b.n	800f434 <tud_audio_buffer_and_schedule_control_xfer+0xd4>
 800f42a:	f89c 2000 	ldrb.w	r2, [ip]
 800f42e:	4494      	add	ip, r2
 800f430:	4560      	cmp	r0, ip
 800f432:	d9e3      	bls.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f434:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800f438:	2a04      	cmp	r2, #4
 800f43a:	d1f6      	bne.n	800f42a <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f43c:	78ba      	ldrb	r2, [r7, #2]
 800f43e:	4542      	cmp	r2, r8
 800f440:	d1f3      	bne.n	800f42a <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f442:	e7be      	b.n	800f3c2 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f444:	783a      	ldrb	r2, [r7, #0]
 800f446:	eb07 0c02 	add.w	ip, r7, r2
 800f44a:	5cba      	ldrb	r2, [r7, r2]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f44c:	f8bc 7006 	ldrh.w	r7, [ip, #6]
 800f450:	4462      	add	r2, ip
 800f452:	44bc      	add	ip, r7
      while (p_desc < p_desc_end)
 800f454:	4594      	cmp	ip, r2
 800f456:	d804      	bhi.n	800f462 <tud_audio_buffer_and_schedule_control_xfer+0x102>
 800f458:	e7d0      	b.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f45a:	7817      	ldrb	r7, [r2, #0]
 800f45c:	443a      	add	r2, r7
 800f45e:	4594      	cmp	ip, r2
 800f460:	d9cc      	bls.n	800f3fc <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f462:	78d7      	ldrb	r7, [r2, #3]
 800f464:	4287      	cmp	r7, r0
 800f466:	d1f8      	bne.n	800f45a <tud_audio_buffer_and_schedule_control_xfer+0xfa>
 800f468:	e7ab      	b.n	800f3c2 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f46a:	bf00      	nop
 800f46c:	2400c7bc 	.word	0x2400c7bc

0800f470 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 800f470:	b510      	push	{r4, lr}
 800f472:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800f474:	f000 fca8 	bl	800fdc8 <tud_mounted>
 800f478:	b908      	cbnz	r0, 800f47e <tud_cdc_n_connected+0xe>
 800f47a:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
 800f47c:	bd10      	pop	{r4, pc}
 800f47e:	f000 fcab 	bl	800fdd8 <tud_suspended>
 800f482:	2800      	cmp	r0, #0
 800f484:	d1f9      	bne.n	800f47a <tud_cdc_n_connected+0xa>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800f486:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f48a:	4803      	ldr	r0, [pc, #12]	; (800f498 <tud_cdc_n_connected+0x28>)
 800f48c:	fb03 0004 	mla	r0, r3, r4, r0
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800f490:	7900      	ldrb	r0, [r0, #4]
 800f492:	f000 0001 	and.w	r0, r0, #1
}
 800f496:	bd10      	pop	{r4, pc}
 800f498:	2400d150 	.word	0x2400d150

0800f49c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f49c:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800f4a0:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f4a2:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <tud_cdc_n_available+0x14>)
 800f4a4:	fb02 3000 	mla	r0, r2, r0, r3
 800f4a8:	3010      	adds	r0, #16
 800f4aa:	f000 fa93 	bl	800f9d4 <tu_fifo_count>
}
 800f4ae:	bd08      	pop	{r3, pc}
 800f4b0:	2400d150 	.word	0x2400d150

0800f4b4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 800f4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b8:	f44f 7594 	mov.w	r5, #296	; 0x128
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800f4bc:	4f1a      	ldr	r7, [pc, #104]	; (800f528 <tud_cdc_n_read+0x74>)
 800f4be:	b292      	uxth	r2, r2
 800f4c0:	fb00 f505 	mul.w	r5, r0, r5
 800f4c4:	f105 0410 	add.w	r4, r5, #16
 800f4c8:	443c      	add	r4, r7
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f000 fafe 	bl	800facc <tu_fifo_read_n>
 800f4d0:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f000 fa9e 	bl	800fa14 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f4d8:	283f      	cmp	r0, #63	; 0x3f
 800f4da:	d802      	bhi.n	800f4e2 <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 800f4dc:	4630      	mov	r0, r6
 800f4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f4e2:	eb07 0805 	add.w	r8, r7, r5
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f4ec:	f001 f910 	bl	8010710 <usbd_edpt_claim>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d0f3      	beq.n	800f4dc <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fa8d 	bl	800fa14 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f4fa:	283f      	cmp	r0, #63	; 0x3f
 800f4fc:	d90b      	bls.n	800f516 <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f4fe:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800f502:	2340      	movs	r3, #64	; 0x40
 800f504:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f508:	2000      	movs	r0, #0
 800f50a:	443a      	add	r2, r7
 800f50c:	f001 f91c 	bl	8010748 <usbd_edpt_xfer>
}
 800f510:	4630      	mov	r0, r6
 800f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f516:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f51a:	2000      	movs	r0, #0
 800f51c:	f001 f906 	bl	801072c <usbd_edpt_release>
}
 800f520:	4630      	mov	r0, r6
 800f522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f526:	bf00      	nop
 800f528:	2400d150 	.word	0x2400d150

0800f52c <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800f52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f530:	4604      	mov	r4, r0
 800f532:	f000 fc49 	bl	800fdc8 <tud_mounted>
 800f536:	b910      	cbnz	r0, 800f53e <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800f538:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800f53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f53e:	f000 fc4b 	bl	800fdd8 <tud_suspended>
 800f542:	4606      	mov	r6, r0
 800f544:	2800      	cmp	r0, #0
 800f546:	d1f7      	bne.n	800f538 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800f548:	f44f 7094 	mov.w	r0, #296	; 0x128
 800f54c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f5b0 <tud_cdc_n_write_flush+0x84>
 800f550:	fb00 f404 	mul.w	r4, r0, r4
 800f554:	f104 051c 	add.w	r5, r4, #28
 800f558:	4445      	add	r5, r8
 800f55a:	4628      	mov	r0, r5
 800f55c:	f000 fa3a 	bl	800f9d4 <tu_fifo_count>
 800f560:	2800      	cmp	r0, #0
 800f562:	d0e9      	beq.n	800f538 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800f564:	eb08 0704 	add.w	r7, r8, r4
 800f568:	4630      	mov	r0, r6
 800f56a:	78b9      	ldrb	r1, [r7, #2]
 800f56c:	f001 f8d0 	bl	8010710 <usbd_edpt_claim>
 800f570:	2800      	cmp	r0, #0
 800f572:	d0e1      	beq.n	800f538 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800f574:	34e8      	adds	r4, #232	; 0xe8
 800f576:	4628      	mov	r0, r5
 800f578:	2240      	movs	r2, #64	; 0x40
 800f57a:	4444      	add	r4, r8
 800f57c:	4621      	mov	r1, r4
 800f57e:	f000 faa5 	bl	800facc <tu_fifo_read_n>
  if ( count )
 800f582:	4605      	mov	r5, r0
 800f584:	b170      	cbz	r0, 800f5a4 <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800f586:	4603      	mov	r3, r0
 800f588:	4622      	mov	r2, r4
 800f58a:	78b9      	ldrb	r1, [r7, #2]
 800f58c:	4630      	mov	r0, r6
 800f58e:	f001 f8db 	bl	8010748 <usbd_edpt_xfer>
 800f592:	b950      	cbnz	r0, 800f5aa <tud_cdc_n_write_flush+0x7e>
 800f594:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f598:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f59c:	07db      	lsls	r3, r3, #31
 800f59e:	d5cb      	bpl.n	800f538 <tud_cdc_n_write_flush+0xc>
 800f5a0:	be00      	bkpt	0x0000
 800f5a2:	e7ca      	b.n	800f53a <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800f5a4:	78b9      	ldrb	r1, [r7, #2]
 800f5a6:	f001 f8c1 	bl	801072c <usbd_edpt_release>
    return 0;
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	e7c5      	b.n	800f53a <tud_cdc_n_write_flush+0xe>
 800f5ae:	bf00      	nop
 800f5b0:	2400d150 	.word	0x2400d150

0800f5b4 <tud_cdc_n_write>:
{
 800f5b4:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f5b6:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f5ba:	4c0b      	ldr	r4, [pc, #44]	; (800f5e8 <tud_cdc_n_write+0x34>)
 800f5bc:	b292      	uxth	r2, r2
{
 800f5be:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f5c0:	fb03 4400 	mla	r4, r3, r0, r4
 800f5c4:	341c      	adds	r4, #28
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f000 fae4 	bl	800fb94 <tu_fifo_write_n>
 800f5cc:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f5ce:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f5d0:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f5d2:	f000 f9ff 	bl	800f9d4 <tu_fifo_count>
 800f5d6:	283f      	cmp	r0, #63	; 0x3f
 800f5d8:	d801      	bhi.n	800f5de <tud_cdc_n_write+0x2a>
}
 800f5da:	4620      	mov	r0, r4
 800f5dc:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7ff ffa4 	bl	800f52c <tud_cdc_n_write_flush>
}
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	2400d150 	.word	0x2400d150

0800f5ec <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 800f5ec:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800f5f0:	b508      	push	{r3, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 800f5f2:	4b03      	ldr	r3, [pc, #12]	; (800f600 <tud_cdc_n_write_available+0x14>)
 800f5f4:	fb02 3000 	mla	r0, r2, r0, r3
 800f5f8:	301c      	adds	r0, #28
 800f5fa:	f000 fa0b 	bl	800fa14 <tu_fifo_remaining>
}
 800f5fe:	bd08      	pop	{r3, pc}
 800f600:	2400d150 	.word	0x2400d150

0800f604 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800f604:	b510      	push	{r4, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f606:	4c12      	ldr	r4, [pc, #72]	; (800f650 <cdcd_init+0x4c>)
{
 800f608:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f60a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f60e:	2100      	movs	r1, #0
 800f610:	4620      	mov	r0, r4
 800f612:	f001 ff71 	bl	80114f8 <memset>
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f616:	2300      	movs	r3, #0
    p_cdc->wanted_char = (char) -1;
 800f618:	21ff      	movs	r1, #255	; 0xff
    p_cdc->line_coding.bit_rate  = 115200;
 800f61a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    p_cdc->line_coding.data_bits = 8;
 800f61e:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f620:	9300      	str	r3, [sp, #0]
    p_cdc->wanted_char = (char) -1;
 800f622:	7161      	strb	r1, [r4, #5]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f624:	2301      	movs	r3, #1
 800f626:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.bit_rate  = 115200;
 800f62a:	60a2      	str	r2, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 800f62c:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f62e:	2240      	movs	r2, #64	; 0x40
 800f630:	f104 0010 	add.w	r0, r4, #16
 800f634:	f000 f9b4 	bl	800f9a0 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800f638:	2301      	movs	r3, #1
 800f63a:	2240      	movs	r2, #64	; 0x40
 800f63c:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800f640:	f104 001c 	add.w	r0, r4, #28
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	f000 f9ab 	bl	800f9a0 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800f64a:	b002      	add	sp, #8
 800f64c:	bd10      	pop	{r4, pc}
 800f64e:	bf00      	nop
 800f650:	2400d150 	.word	0x2400d150

0800f654 <cdcd_reset>:

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f654:	4b09      	ldr	r3, [pc, #36]	; (800f67c <cdcd_reset+0x28>)
 800f656:	2200      	movs	r2, #0
{
 800f658:	b510      	push	{r4, lr}
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800f65a:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800f65e:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 800f666:	f000 fb41 	bl	800fcec <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fb3e 	bl	800fcec <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f670:	4620      	mov	r0, r4
 800f672:	2101      	movs	r1, #1
  }
}
 800f674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f678:	f000 bb3e 	b.w	800fcf8 <tu_fifo_set_overwritable>
 800f67c:	2400d150 	.word	0x2400d150

0800f680 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800f680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f684:	794b      	ldrb	r3, [r1, #5]
{
 800f686:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d102      	bne.n	800f692 <cdcd_open+0x12>
 800f68c:	798b      	ldrb	r3, [r1, #6]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d004      	beq.n	800f69c <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 800f692:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 800f694:	4628      	mov	r0, r5
 800f696:	b002      	add	sp, #8
 800f698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800f69c:	4e32      	ldr	r6, [pc, #200]	; (800f768 <cdcd_open+0xe8>)
 800f69e:	78b3      	ldrb	r3, [r6, #2]
 800f6a0:	b13b      	cbz	r3, 800f6b2 <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 800f6a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f6a6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f6aa:	07db      	lsls	r3, r3, #31
 800f6ac:	d5f1      	bpl.n	800f692 <cdcd_open+0x12>
 800f6ae:	be00      	bkpt	0x0000
 800f6b0:	e7ef      	b.n	800f692 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f6b2:	788b      	ldrb	r3, [r1, #2]
 800f6b4:	4607      	mov	r7, r0
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800f6b6:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f6b8:	7033      	strb	r3, [r6, #0]
 800f6ba:	780c      	ldrb	r4, [r1, #0]
 800f6bc:	440c      	add	r4, r1
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f6be:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f6c0:	2924      	cmp	r1, #36	; 0x24
 800f6c2:	d10b      	bne.n	800f6dc <cdcd_open+0x5c>
 800f6c4:	2a08      	cmp	r2, #8
 800f6c6:	d802      	bhi.n	800f6ce <cdcd_open+0x4e>
 800f6c8:	e00f      	b.n	800f6ea <cdcd_open+0x6a>
 800f6ca:	42aa      	cmp	r2, r5
 800f6cc:	d30d      	bcc.n	800f6ea <cdcd_open+0x6a>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f6ce:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f6d0:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800f6d2:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f6d4:	7861      	ldrb	r1, [r4, #1]
 800f6d6:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f6d8:	2924      	cmp	r1, #36	; 0x24
 800f6da:	d0f6      	beq.n	800f6ca <cdcd_open+0x4a>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800f6dc:	2905      	cmp	r1, #5
 800f6de:	d01b      	beq.n	800f718 <cdcd_open+0x98>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800f6e0:	2904      	cmp	r1, #4
 800f6e2:	d102      	bne.n	800f6ea <cdcd_open+0x6a>
 800f6e4:	7963      	ldrb	r3, [r4, #5]
 800f6e6:	2b0a      	cmp	r3, #10
 800f6e8:	d029      	beq.n	800f73e <cdcd_open+0xbe>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f6ea:	4820      	ldr	r0, [pc, #128]	; (800f76c <cdcd_open+0xec>)
 800f6ec:	f000 f992 	bl	800fa14 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f6f0:	283f      	cmp	r0, #63	; 0x3f
 800f6f2:	d9cf      	bls.n	800f694 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f6f4:	78f1      	ldrb	r1, [r6, #3]
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	f001 f80a 	bl	8010710 <usbd_edpt_claim>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d0c9      	beq.n	800f694 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f700:	481a      	ldr	r0, [pc, #104]	; (800f76c <cdcd_open+0xec>)
 800f702:	f000 f987 	bl	800fa14 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f706:	283f      	cmp	r0, #63	; 0x3f
 800f708:	d914      	bls.n	800f734 <cdcd_open+0xb4>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f70a:	2340      	movs	r3, #64	; 0x40
 800f70c:	4a18      	ldr	r2, [pc, #96]	; (800f770 <cdcd_open+0xf0>)
 800f70e:	78f1      	ldrb	r1, [r6, #3]
 800f710:	2000      	movs	r0, #0
 800f712:	f001 f819 	bl	8010748 <usbd_edpt_xfer>
 800f716:	e7bd      	b.n	800f694 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800f718:	4621      	mov	r1, r4
 800f71a:	4638      	mov	r0, r7
 800f71c:	f000 ffd4 	bl	80106c8 <usbd_edpt_open>
 800f720:	2800      	cmp	r0, #0
 800f722:	d0be      	beq.n	800f6a2 <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800f724:	78a3      	ldrb	r3, [r4, #2]
 800f726:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f728:	7822      	ldrb	r2, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 800f72a:	18ab      	adds	r3, r5, r2
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f72c:	4414      	add	r4, r2
 800f72e:	b29d      	uxth	r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f730:	7861      	ldrb	r1, [r4, #1]
 800f732:	e7d5      	b.n	800f6e0 <cdcd_open+0x60>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f734:	78f1      	ldrb	r1, [r6, #3]
 800f736:	2000      	movs	r0, #0
 800f738:	f000 fff8 	bl	801072c <usbd_edpt_release>
    return false;
 800f73c:	e7aa      	b.n	800f694 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800f73e:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <cdcd_open+0xf4>)
 800f740:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f742:	f894 8000 	ldrb.w	r8, [r4]
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	3301      	adds	r3, #1
 800f74a:	eb04 0108 	add.w	r1, r4, r8
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	2302      	movs	r3, #2
 800f752:	461a      	mov	r2, r3
 800f754:	f000 ff62 	bl	801061c <usbd_open_edpt_pair>
 800f758:	2800      	cmp	r0, #0
 800f75a:	d0a2      	beq.n	800f6a2 <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800f75c:	f105 030e 	add.w	r3, r5, #14
 800f760:	fa18 f383 	uxtah	r3, r8, r3
 800f764:	b29d      	uxth	r5, r3
 800f766:	e7c0      	b.n	800f6ea <cdcd_open+0x6a>
 800f768:	2400d150 	.word	0x2400d150
 800f76c:	2400d160 	.word	0x2400d160
 800f770:	2400d1f8 	.word	0x2400d1f8
 800f774:	2400d152 	.word	0x2400d152

0800f778 <cdcd_control_xfer_cb>:
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f778:	7813      	ldrb	r3, [r2, #0]
 800f77a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f77e:	2b20      	cmp	r3, #32
{
 800f780:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f782:	d10f      	bne.n	800f7a4 <cdcd_control_xfer_cb+0x2c>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 800f784:	4694      	mov	ip, r2
 800f786:	4c33      	ldr	r4, [pc, #204]	; (800f854 <cdcd_control_xfer_cb+0xdc>)
 800f788:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800f78c:	7822      	ldrb	r2, [r4, #0]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d108      	bne.n	800f7a4 <cdcd_control_xfer_cb+0x2c>
  }

  switch ( request->bRequest )
 800f792:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800f796:	3b20      	subs	r3, #32
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d803      	bhi.n	800f7a4 <cdcd_control_xfer_cb+0x2c>
 800f79c:	e8df f003 	tbb	[pc, r3]
 800f7a0:	05312816 	.word	0x05312816
 800f7a4:	2400      	movs	r4, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f7aa:	2901      	cmp	r1, #1
 800f7ac:	d042      	beq.n	800f834 <cdcd_control_xfer_cb+0xbc>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f7ae:	4b2a      	ldr	r3, [pc, #168]	; (800f858 <cdcd_control_xfer_cb+0xe0>)
 800f7b0:	f04f 0401 	mov.w	r4, #1
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d042      	beq.n	800f83e <cdcd_control_xfer_cb+0xc6>
 800f7b8:	2903      	cmp	r1, #3
 800f7ba:	bf14      	ite	ne
 800f7bc:	2400      	movne	r4, #0
 800f7be:	f004 0401 	andeq.w	r4, r4, #1
 800f7c2:	2c00      	cmp	r4, #0
 800f7c4:	d13f      	bne.n	800f846 <cdcd_control_xfer_cb+0xce>
  return true;
 800f7c6:	2401      	movs	r4, #1
}
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f7cc:	2901      	cmp	r1, #1
 800f7ce:	d011      	beq.n	800f7f4 <cdcd_control_xfer_cb+0x7c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f7d0:	4b22      	ldr	r3, [pc, #136]	; (800f85c <cdcd_control_xfer_cb+0xe4>)
 800f7d2:	f04f 0401 	mov.w	r4, #1
 800f7d6:	b3a3      	cbz	r3, 800f842 <cdcd_control_xfer_cb+0xca>
 800f7d8:	2903      	cmp	r1, #3
 800f7da:	bf14      	ite	ne
 800f7dc:	2400      	movne	r4, #0
 800f7de:	f004 0401 	andeq.w	r4, r4, #1
 800f7e2:	2c00      	cmp	r4, #0
 800f7e4:	d0ef      	beq.n	800f7c6 <cdcd_control_xfer_cb+0x4e>
 800f7e6:	491e      	ldr	r1, [pc, #120]	; (800f860 <cdcd_control_xfer_cb+0xe8>)
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f3af 8000 	nop.w
 800f7ee:	e7da      	b.n	800f7a6 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f7f0:	2901      	cmp	r1, #1
 800f7f2:	d1e8      	bne.n	800f7c6 <cdcd_control_xfer_cb+0x4e>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f7f4:	2307      	movs	r3, #7
 800f7f6:	4a1a      	ldr	r2, [pc, #104]	; (800f860 <cdcd_control_xfer_cb+0xe8>)
 800f7f8:	4661      	mov	r1, ip
  return true;
 800f7fa:	2401      	movs	r4, #1
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f7fc:	f001 f880 	bl	8010900 <tud_control_xfer>
 800f800:	e7d1      	b.n	800f7a6 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f802:	2901      	cmp	r1, #1
 800f804:	d016      	beq.n	800f834 <cdcd_control_xfer_cb+0xbc>
      else if (stage == CONTROL_STAGE_ACK)
 800f806:	2903      	cmp	r1, #3
 800f808:	d1dd      	bne.n	800f7c6 <cdcd_control_xfer_cb+0x4e>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800f80a:	f8bc 5002 	ldrh.w	r5, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f80e:	4815      	ldr	r0, [pc, #84]	; (800f864 <cdcd_control_xfer_cb+0xec>)
 800f810:	f005 0601 	and.w	r6, r5, #1
        p_cdc->line_state = (uint8_t) request->wValue;
 800f814:	7125      	strb	r5, [r4, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f816:	f086 0101 	eor.w	r1, r6, #1
 800f81a:	f000 fa6d 	bl	800fcf8 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f81e:	4b12      	ldr	r3, [pc, #72]	; (800f868 <cdcd_control_xfer_cb+0xf0>)
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0d0      	beq.n	800f7c6 <cdcd_control_xfer_cb+0x4e>
 800f824:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800f828:	4631      	mov	r1, r6
 800f82a:	2000      	movs	r0, #0
  return true;
 800f82c:	2401      	movs	r4, #1
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f82e:	f7f5 fd0b 	bl	8005248 <tud_cdc_line_state_cb>
 800f832:	e7b8      	b.n	800f7a6 <cdcd_control_xfer_cb+0x2e>
        tud_control_status(rhport, request);
 800f834:	4661      	mov	r1, ip
  return true;
 800f836:	2401      	movs	r4, #1
        tud_control_status(rhport, request);
 800f838:	f001 f848 	bl	80108cc <tud_control_status>
 800f83c:	e7b3      	b.n	800f7a6 <cdcd_control_xfer_cb+0x2e>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f83e:	461c      	mov	r4, r3
 800f840:	e7ba      	b.n	800f7b8 <cdcd_control_xfer_cb+0x40>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f842:	461c      	mov	r4, r3
 800f844:	e7c8      	b.n	800f7d8 <cdcd_control_xfer_cb+0x60>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f846:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800f84a:	2000      	movs	r0, #0
 800f84c:	f3af 8000 	nop.w
 800f850:	e7a9      	b.n	800f7a6 <cdcd_control_xfer_cb+0x2e>
 800f852:	bf00      	nop
 800f854:	2400d150 	.word	0x2400d150
	...
 800f860:	2400d158 	.word	0x2400d158
 800f864:	2400d16c 	.word	0x2400d16c
 800f868:	08005249 	.word	0x08005249

0800f86c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f870:	4e44      	ldr	r6, [pc, #272]	; (800f984 <cdcd_xfer_cb+0x118>)
{
 800f872:	460c      	mov	r4, r1
 800f874:	4607      	mov	r7, r0
 800f876:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f878:	78f2      	ldrb	r2, [r6, #3]
 800f87a:	428a      	cmp	r2, r1
 800f87c:	d15e      	bne.n	800f93c <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800f87e:	b29a      	uxth	r2, r3
 800f880:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800f884:	f106 0010 	add.w	r0, r6, #16
 800f888:	f000 f984 	bl	800fb94 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800f88c:	4b3e      	ldr	r3, [pc, #248]	; (800f988 <cdcd_xfer_cb+0x11c>)
 800f88e:	b1d3      	cbz	r3, 800f8c6 <cdcd_xfer_cb+0x5a>
 800f890:	7973      	ldrb	r3, [r6, #5]
 800f892:	2bff      	cmp	r3, #255	; 0xff
 800f894:	d017      	beq.n	800f8c6 <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f896:	b1b5      	cbz	r5, 800f8c6 <cdcd_xfer_cb+0x5a>
 800f898:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800f89c:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f8a0:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 800f8a4:	e002      	b.n	800f8ac <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f8a6:	45d0      	cmp	r8, sl
 800f8a8:	d00d      	beq.n	800f8c6 <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f8aa:	7973      	ldrb	r3, [r6, #5]
 800f8ac:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d1f8      	bne.n	800f8a6 <cdcd_xfer_cb+0x3a>
 800f8b4:	4648      	mov	r0, r9
 800f8b6:	f000 f8a3 	bl	800fa00 <tu_fifo_empty>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d1f3      	bne.n	800f8a6 <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800f8be:	7971      	ldrb	r1, [r6, #5]
 800f8c0:	f3af 8000 	nop.w
 800f8c4:	e7ef      	b.n	800f8a6 <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800f8c6:	4b31      	ldr	r3, [pc, #196]	; (800f98c <cdcd_xfer_cb+0x120>)
 800f8c8:	b123      	cbz	r3, 800f8d4 <cdcd_xfer_cb+0x68>
 800f8ca:	4831      	ldr	r0, [pc, #196]	; (800f990 <cdcd_xfer_cb+0x124>)
 800f8cc:	f000 f898 	bl	800fa00 <tu_fifo_empty>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d04f      	beq.n	800f974 <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f8d4:	482e      	ldr	r0, [pc, #184]	; (800f990 <cdcd_xfer_cb+0x124>)
 800f8d6:	f000 f89d 	bl	800fa14 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f8da:	283f      	cmp	r0, #63	; 0x3f
 800f8dc:	d905      	bls.n	800f8ea <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f8de:	78f1      	ldrb	r1, [r6, #3]
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	f000 ff15 	bl	8010710 <usbd_edpt_claim>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d137      	bne.n	800f95a <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800f8ea:	78b3      	ldrb	r3, [r6, #2]
 800f8ec:	42a3      	cmp	r3, r4
 800f8ee:	d003      	beq.n	800f8f8 <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800f8f0:	2401      	movs	r4, #1
}
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800f8f8:	4b26      	ldr	r3, [pc, #152]	; (800f994 <cdcd_xfer_cb+0x128>)
 800f8fa:	b113      	cbz	r3, 800f902 <cdcd_xfer_cb+0x96>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 800f902:	2000      	movs	r0, #0
 800f904:	f7ff fe12 	bl	800f52c <tud_cdc_n_write_flush>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1f1      	bne.n	800f8f0 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800f90c:	4822      	ldr	r0, [pc, #136]	; (800f998 <cdcd_xfer_cb+0x12c>)
 800f90e:	f000 f861 	bl	800f9d4 <tu_fifo_count>
 800f912:	2d00      	cmp	r5, #0
 800f914:	d0ec      	beq.n	800f8f0 <cdcd_xfer_cb+0x84>
 800f916:	2800      	cmp	r0, #0
 800f918:	d1ea      	bne.n	800f8f0 <cdcd_xfer_cb+0x84>
 800f91a:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800f91e:	d1e7      	bne.n	800f8f0 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800f920:	78b1      	ldrb	r1, [r6, #2]
 800f922:	4638      	mov	r0, r7
 800f924:	f000 fef4 	bl	8010710 <usbd_edpt_claim>
 800f928:	4604      	mov	r4, r0
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d0e0      	beq.n	800f8f0 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800f92e:	462b      	mov	r3, r5
 800f930:	462a      	mov	r2, r5
 800f932:	78b1      	ldrb	r1, [r6, #2]
 800f934:	4638      	mov	r0, r7
 800f936:	f000 ff07 	bl	8010748 <usbd_edpt_xfer>
 800f93a:	e7da      	b.n	800f8f2 <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f93c:	78b3      	ldrb	r3, [r6, #2]
 800f93e:	428b      	cmp	r3, r1
 800f940:	d0da      	beq.n	800f8f8 <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 800f942:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f946:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800f94a:	f014 0401 	ands.w	r4, r4, #1
 800f94e:	d0d0      	beq.n	800f8f2 <cdcd_xfer_cb+0x86>
 800f950:	be00      	bkpt	0x0000
 800f952:	2400      	movs	r4, #0
}
 800f954:	4620      	mov	r0, r4
 800f956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f95a:	480d      	ldr	r0, [pc, #52]	; (800f990 <cdcd_xfer_cb+0x124>)
 800f95c:	f000 f85a 	bl	800fa14 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f960:	283f      	cmp	r0, #63	; 0x3f
 800f962:	d90a      	bls.n	800f97a <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f964:	2340      	movs	r3, #64	; 0x40
 800f966:	4a0d      	ldr	r2, [pc, #52]	; (800f99c <cdcd_xfer_cb+0x130>)
 800f968:	78f1      	ldrb	r1, [r6, #3]
 800f96a:	2000      	movs	r0, #0
 800f96c:	f000 feec 	bl	8010748 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 800f970:	78b3      	ldrb	r3, [r6, #2]
 800f972:	e7bb      	b.n	800f8ec <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800f974:	f7f5 fc6a 	bl	800524c <tud_cdc_rx_cb>
 800f978:	e7ac      	b.n	800f8d4 <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f97a:	78f1      	ldrb	r1, [r6, #3]
 800f97c:	2000      	movs	r0, #0
 800f97e:	f000 fed5 	bl	801072c <usbd_edpt_release>
 800f982:	e7b2      	b.n	800f8ea <cdcd_xfer_cb+0x7e>
 800f984:	2400d150 	.word	0x2400d150
 800f988:	00000000 	.word	0x00000000
 800f98c:	0800524d 	.word	0x0800524d
 800f990:	2400d160 	.word	0x2400d160
 800f994:	00000000 	.word	0x00000000
 800f998:	2400d16c 	.word	0x2400d16c
 800f99c:	2400d1f8 	.word	0x2400d1f8

0800f9a0 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800f9a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 800f9a4:	4684      	mov	ip, r0
 800f9a6:	f89d 0000 	ldrb.w	r0, [sp]
  if (depth > 0x8000) return false;
 800f9aa:	d810      	bhi.n	800f9ce <tu_fifo_config+0x2e>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f9ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
  f->buffer       = (uint8_t*) buffer;
 800f9b0:	f8cc 1000 	str.w	r1, [ip]
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 800f9b4:	2100      	movs	r1, #0
  f->depth        = depth;
 800f9b6:	f8ac 2004 	strh.w	r2, [ip, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f9ba:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  f->wr_idx       = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800f9be:	2001      	movs	r0, #1
  f->rd_idx       = 0;
 800f9c0:	f8ac 100a 	strh.w	r1, [ip, #10]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f9c4:	f8ac 3006 	strh.w	r3, [ip, #6]
  f->wr_idx       = 0;
 800f9c8:	f8ac 1008 	strh.w	r1, [ip, #8]
  return true;
 800f9cc:	4770      	bx	lr
  if (depth > 0x8000) return false;
 800f9ce:	2000      	movs	r0, #0
}
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop

0800f9d4 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800f9d4:	8903      	ldrh	r3, [r0, #8]
 800f9d6:	8942      	ldrh	r2, [r0, #10]
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	8880      	ldrh	r0, [r0, #4]
 800f9dc:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d305      	bcc.n	800f9ee <tu_fifo_count+0x1a>
    return (uint16_t) (wr_idx - rd_idx);
 800f9e2:	1a9b      	subs	r3, r3, r2
 800f9e4:	b29b      	uxth	r3, r3
}
 800f9e6:	4298      	cmp	r0, r3
 800f9e8:	bf28      	it	cs
 800f9ea:	4618      	movcs	r0, r3
 800f9ec:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f9ee:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f9f2:	4413      	add	r3, r2
 800f9f4:	b29b      	uxth	r3, r3
}
 800f9f6:	4298      	cmp	r0, r3
 800f9f8:	bf28      	it	cs
 800f9fa:	4618      	movcs	r0, r3
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop

0800fa00 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 800fa00:	8902      	ldrh	r2, [r0, #8]
 800fa02:	8943      	ldrh	r3, [r0, #10]
 800fa04:	b290      	uxth	r0, r2
 800fa06:	b29b      	uxth	r3, r3
}
 800fa08:	1ac0      	subs	r0, r0, r3
 800fa0a:	fab0 f080 	clz	r0, r0
 800fa0e:	0940      	lsrs	r0, r0, #5
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop

0800fa14 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800fa14:	8903      	ldrh	r3, [r0, #8]
 800fa16:	8942      	ldrh	r2, [r0, #10]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	8880      	ldrh	r0, [r0, #4]
 800fa1c:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d306      	bcc.n	800fa30 <tu_fifo_remaining+0x1c>
    return (uint16_t) (wr_idx - rd_idx);
 800fa22:	1a9b      	subs	r3, r3, r2
 800fa24:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fa26:	4298      	cmp	r0, r3
 800fa28:	d908      	bls.n	800fa3c <tu_fifo_remaining+0x28>
 800fa2a:	1ac0      	subs	r0, r0, r3
 800fa2c:	b280      	uxth	r0, r0
 800fa2e:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fa30:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800fa34:	4413      	add	r3, r2
 800fa36:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fa38:	4298      	cmp	r0, r3
 800fa3a:	d8f6      	bhi.n	800fa2a <tu_fifo_remaining+0x16>
 800fa3c:	2000      	movs	r0, #0
}
 800fa3e:	4770      	bx	lr

0800fa40 <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fa40:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fa44:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fa46:	fa1f fc8c 	uxth.w	ip, ip
{
 800fa4a:	b538      	push	{r3, r4, r5, lr}
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fa4c:	8943      	ldrh	r3, [r0, #10]
{
 800fa4e:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fa50:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 800fa52:	459c      	cmp	ip, r3
 800fa54:	d32b      	bcc.n	800faae <tu_fifo_read+0x6e>
    return (uint16_t) (wr_idx - rd_idx);
 800fa56:	ebac 0503 	sub.w	r5, ip, r3
 800fa5a:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800fa5c:	b368      	cbz	r0, 800faba <tu_fifo_read+0x7a>
  if ( cnt > f->depth )
 800fa5e:	4282      	cmp	r2, r0
 800fa60:	d20b      	bcs.n	800fa7a <tu_fifo_read+0x3a>
  if ( wr_idx >= f->depth )
 800fa62:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 800fa64:	bf2c      	ite	cs
 800fa66:	ebac 0302 	subcs.w	r3, ip, r2
    rd_idx = wr_idx + f->depth;
 800fa6a:	eb0c 0302 	addcc.w	r3, ip, r2
 800fa6e:	b29b      	uxth	r3, r3
  while ( idx >= depth ) idx -= depth;
 800fa70:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800fa72:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 800fa74:	d803      	bhi.n	800fa7e <tu_fifo_read+0x3e>
 800fa76:	1a9b      	subs	r3, r3, r2
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d9fb      	bls.n	800fa76 <tu_fifo_read+0x36>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800fa7e:	88e2      	ldrh	r2, [r4, #6]
 800fa80:	4608      	mov	r0, r1
 800fa82:	6825      	ldr	r5, [r4, #0]
 800fa84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fa88:	fb02 5103 	mla	r1, r2, r3, r5
 800fa8c:	f001 fd26 	bl	80114dc <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fa90:	8961      	ldrh	r1, [r4, #10]
 800fa92:	88a2      	ldrh	r2, [r4, #4]
  return true;
 800fa94:	2001      	movs	r0, #1
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fa96:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fa98:	1c4b      	adds	r3, r1, #1
 800fa9a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fa9c:	4299      	cmp	r1, r3
 800fa9e:	d90e      	bls.n	800fabe <tu_fifo_read+0x7e>
 800faa0:	2300      	movs	r3, #0
 800faa2:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800faa6:	1a5b      	subs	r3, r3, r1
 800faa8:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800faaa:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800faac:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800faae:	ebc3 0542 	rsb	r5, r3, r2, lsl #1
 800fab2:	4465      	add	r5, ip
 800fab4:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d1d1      	bne.n	800fa5e <tu_fifo_read+0x1e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800faba:	8963      	ldrh	r3, [r4, #10]
 800fabc:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fabe:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fac2:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800fac6:	daee      	bge.n	800faa6 <tu_fifo_read+0x66>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fac8:	8163      	strh	r3, [r4, #10]
}
 800faca:	bd38      	pop	{r3, r4, r5, pc}

0800facc <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800facc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fad0:	8903      	ldrh	r3, [r0, #8]
{
 800fad2:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fad4:	8944      	ldrh	r4, [r0, #10]
{
 800fad6:	4688      	mov	r8, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fad8:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fada:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fadc:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 800fade:	42a3      	cmp	r3, r4
 800fae0:	d353      	bcc.n	800fb8a <tu_fifo_read_n+0xbe>
    return (uint16_t) (wr_idx - rd_idx);
 800fae2:	1b1f      	subs	r7, r3, r4
 800fae4:	b2bf      	uxth	r7, r7
  if ( cnt == 0 ) return 0;
 800fae6:	2f00      	cmp	r7, #0
 800fae8:	d044      	beq.n	800fb74 <tu_fifo_read_n+0xa8>
  if ( cnt > f->depth )
 800faea:	42bd      	cmp	r5, r7
 800faec:	d33a      	bcc.n	800fb64 <tu_fifo_read_n+0x98>
  if ( cnt < n ) n = cnt;
 800faee:	42ba      	cmp	r2, r7
 800faf0:	bf28      	it	cs
 800faf2:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 800faf4:	42a5      	cmp	r5, r4
 800faf6:	b297      	uxth	r7, r2
 800faf8:	d803      	bhi.n	800fb02 <tu_fifo_read_n+0x36>
 800fafa:	1b64      	subs	r4, r4, r5
 800fafc:	b2a4      	uxth	r4, r4
 800fafe:	42a5      	cmp	r5, r4
 800fb00:	d9fb      	bls.n	800fafa <tu_fifo_read_n+0x2e>
  uint16_t const lin_count = f->depth - rd_ptr;
 800fb02:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb04:	88f2      	ldrh	r2, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fb06:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 800fb08:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb0a:	f3c2 000e 	ubfx	r0, r2, #0, #15
      if ( n <= lin_count )
 800fb0e:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb10:	4682      	mov	sl, r0
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fb12:	fb00 1104 	mla	r1, r0, r4, r1
      if ( n <= lin_count )
 800fb16:	d91f      	bls.n	800fb58 <tu_fifo_read_n+0x8c>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb18:	fb13 f300 	smulbb	r3, r3, r0
        memcpy(app_buf, ff_buf, lin_bytes);
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	fa1f f983 	uxth.w	r9, r3
 800fb22:	464a      	mov	r2, r9
 800fb24:	f001 fcda 	bl	80114dc <memcpy>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fb28:	1b7a      	subs	r2, r7, r5
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800fb2a:	eb08 0009 	add.w	r0, r8, r9
 800fb2e:	6831      	ldr	r1, [r6, #0]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fb30:	4422      	add	r2, r4
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fb32:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800fb36:	b292      	uxth	r2, r2
 800fb38:	f001 fcd0 	bl	80114dc <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb3c:	8972      	ldrh	r2, [r6, #10]
 800fb3e:	88b5      	ldrh	r5, [r6, #4]
 800fb40:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fb42:	19d3      	adds	r3, r2, r7
 800fb44:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d916      	bls.n	800fb78 <tu_fifo_read_n+0xac>
 800fb4a:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fb4c:	1a9b      	subs	r3, r3, r2
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800fb4e:	4638      	mov	r0, r7
 800fb50:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb52:	8173      	strh	r3, [r6, #10]
}
 800fb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 800fb58:	fb00 f207 	mul.w	r2, r0, r7
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	f001 fcbd 	bl	80114dc <memcpy>
 800fb62:	e7eb      	b.n	800fb3c <tu_fifo_read_n+0x70>
  if ( wr_idx >= f->depth )
 800fb64:	42ab      	cmp	r3, r5
  f->rd_idx = rd_idx;
 800fb66:	462f      	mov	r7, r5
    rd_idx = wr_idx - f->depth;
 800fb68:	bf2c      	ite	cs
 800fb6a:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 800fb6c:	195b      	addcc	r3, r3, r5
 800fb6e:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 800fb70:	8174      	strh	r4, [r6, #10]
    cnt = f->depth;
 800fb72:	e7bc      	b.n	800faee <tu_fifo_read_n+0x22>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb74:	8973      	ldrh	r3, [r6, #10]
 800fb76:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb78:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800fb7c:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800fb80:	dae4      	bge.n	800fb4c <tu_fifo_read_n+0x80>
}
 800fb82:	4638      	mov	r0, r7
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb84:	8173      	strh	r3, [r6, #10]
}
 800fb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fb8a:	ebc4 0745 	rsb	r7, r4, r5, lsl #1
 800fb8e:	441f      	add	r7, r3
 800fb90:	b2bf      	uxth	r7, r7
 800fb92:	e7a8      	b.n	800fae6 <tu_fifo_read_n+0x1a>

0800fb94 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 800fb9a:	2a00      	cmp	r2, #0
 800fb9c:	d044      	beq.n	800fc28 <tu_fifo_write_n+0x94>
  uint16_t wr_idx = f->wr_idx;
 800fb9e:	8907      	ldrh	r7, [r0, #8]
 800fba0:	4606      	mov	r6, r0
  uint16_t rd_idx = f->rd_idx;
 800fba2:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fba4:	79c0      	ldrb	r0, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fba6:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fba8:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fbaa:	09c0      	lsrs	r0, r0, #7
 800fbac:	d142      	bne.n	800fc34 <tu_fifo_write_n+0xa0>
  if (wr_idx >= rd_idx)
 800fbae:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fbb0:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 800fbb2:	d255      	bcs.n	800fc60 <tu_fifo_write_n+0xcc>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fbb4:	ebc3 0345 	rsb	r3, r3, r5, lsl #1
 800fbb8:	443b      	add	r3, r7
 800fbba:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fbbc:	429d      	cmp	r5, r3
 800fbbe:	d933      	bls.n	800fc28 <tu_fifo_write_n+0x94>
 800fbc0:	eba5 0803 	sub.w	r8, r5, r3
 800fbc4:	f8b6 a006 	ldrh.w	sl, [r6, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fbc8:	fa1f f888 	uxth.w	r8, r8
 800fbcc:	4590      	cmp	r8, r2
 800fbce:	bf28      	it	cs
 800fbd0:	4690      	movcs	r8, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fbd2:	eb08 0907 	add.w	r9, r8, r7
 800fbd6:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fbda:	42bd      	cmp	r5, r7
 800fbdc:	463c      	mov	r4, r7
 800fbde:	d803      	bhi.n	800fbe8 <tu_fifo_write_n+0x54>
 800fbe0:	1b64      	subs	r4, r4, r5
 800fbe2:	b2a4      	uxth	r4, r4
 800fbe4:	42ac      	cmp	r4, r5
 800fbe6:	d2fb      	bcs.n	800fbe0 <tu_fifo_write_n+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fbe8:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbea:	f3ca 020e 	ubfx	r2, sl, #0, #15
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fbee:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fbf0:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbf2:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fbf4:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 800fbf8:	4543      	cmp	r3, r8
 800fbfa:	d342      	bcc.n	800fc82 <tu_fifo_write_n+0xee>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800fbfc:	fb02 f208 	mul.w	r2, r2, r8
 800fc00:	f001 fc6c 	bl	80114dc <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc04:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc06:	454f      	cmp	r7, r9
 800fc08:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800fc0c:	d802      	bhi.n	800fc14 <tu_fifo_write_n+0x80>
 800fc0e:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 800fc12:	db03      	blt.n	800fc1c <tu_fifo_write_n+0x88>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fc14:	eba9 0903 	sub.w	r9, r9, r3
 800fc18:	fa1f f989 	uxth.w	r9, r9
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800fc1c:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc1e:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 800fc22:	b003      	add	sp, #12
 800fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fc28:	f04f 0800 	mov.w	r8, #0
}
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	b003      	add	sp, #12
 800fc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fc34:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800fc38:	4542      	cmp	r2, r8
 800fc3a:	d214      	bcs.n	800fc66 <tu_fifo_write_n+0xd2>
  if (wr_idx >= rd_idx)
 800fc3c:	429f      	cmp	r7, r3
 800fc3e:	d34e      	bcc.n	800fcde <tu_fifo_write_n+0x14a>
    return (uint16_t) (wr_idx - rd_idx);
 800fc40:	1af8      	subs	r0, r7, r3
 800fc42:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fc46:	b280      	uxth	r0, r0
      if (overflowable_count + n >= 2*f->depth)
 800fc48:	4410      	add	r0, r2
 800fc4a:	42a0      	cmp	r0, r4
 800fc4c:	da2d      	bge.n	800fcaa <tu_fifo_write_n+0x116>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc4e:	eb02 0907 	add.w	r9, r2, r7
 800fc52:	4645      	mov	r5, r8
 800fc54:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fc58:	4690      	mov	r8, r2
 800fc5a:	fa1f f989 	uxth.w	r9, r9
 800fc5e:	e7bc      	b.n	800fbda <tu_fifo_write_n+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 800fc60:	1afb      	subs	r3, r7, r3
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	e7aa      	b.n	800fbbc <tu_fifo_write_n+0x28>
        buf8 += (n - f->depth) * f->item_size;
 800fc66:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fc6a:	eba2 0208 	sub.w	r2, r2, r8
 800fc6e:	f3ca 000e 	ubfx	r0, sl, #0, #15
 800fc72:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 800fc76:	f1b8 0f00 	cmp.w	r8, #0
 800fc7a:	d0d7      	beq.n	800fc2c <tu_fifo_write_n+0x98>
  uint16_t rd_idx = f->rd_idx;
 800fc7c:	461f      	mov	r7, r3
 800fc7e:	4645      	mov	r5, r8
 800fc80:	e7a7      	b.n	800fbd2 <tu_fifo_write_n+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fc82:	fb13 f302 	smulbb	r3, r3, r2
        memcpy(ff_buf, app_buf, lin_bytes);
 800fc86:	9101      	str	r1, [sp, #4]
 800fc88:	fa1f fb83 	uxth.w	fp, r3
 800fc8c:	465a      	mov	r2, fp
 800fc8e:	f001 fc25 	bl	80114dc <memcpy>
  uint16_t const wrap_count = n - lin_count;
 800fc92:	eba8 0205 	sub.w	r2, r8, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fc96:	9901      	ldr	r1, [sp, #4]
  uint16_t const wrap_count = n - lin_count;
 800fc98:	4422      	add	r2, r4
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fc9a:	6830      	ldr	r0, [r6, #0]
 800fc9c:	4459      	add	r1, fp
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fc9e:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fca2:	b292      	uxth	r2, r2
 800fca4:	f001 fc1a 	bl	80114dc <memcpy>
 800fca8:	e7ac      	b.n	800fc04 <tu_fifo_write_n+0x70>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fcaa:	eb03 0908 	add.w	r9, r3, r8
 800fcae:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fcb2:	eba9 0702 	sub.w	r7, r9, r2
 800fcb6:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fcb8:	42bb      	cmp	r3, r7
 800fcba:	d806      	bhi.n	800fcca <tu_fifo_write_n+0x136>
 800fcbc:	42bc      	cmp	r4, r7
 800fcbe:	dd04      	ble.n	800fcca <tu_fifo_write_n+0x136>
 800fcc0:	4645      	mov	r5, r8
 800fcc2:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fcc6:	4690      	mov	r8, r2
 800fcc8:	e787      	b.n	800fbda <tu_fifo_write_n+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fcca:	1b3f      	subs	r7, r7, r4
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fccc:	4645      	mov	r5, r8
 800fcce:	4690      	mov	r8, r2
 800fcd0:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fcd4:	b2bf      	uxth	r7, r7
 800fcd6:	443a      	add	r2, r7
 800fcd8:	fa1f f982 	uxth.w	r9, r2
 800fcdc:	e77d      	b.n	800fbda <tu_fifo_write_n+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fcde:	ebc3 0048 	rsb	r0, r3, r8, lsl #1
 800fce2:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fce6:	4438      	add	r0, r7
 800fce8:	b280      	uxth	r0, r0
 800fcea:	e7ad      	b.n	800fc48 <tu_fifo_write_n+0xb4>

0800fcec <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800fcec:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800fcee:	2200      	movs	r2, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 800fcf0:	2001      	movs	r0, #1
  f->rd_idx = 0;
 800fcf2:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800fcf4:	811a      	strh	r2, [r3, #8]
}
 800fcf6:	4770      	bx	lr

0800fcf8 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800fcf8:	4603      	mov	r3, r0

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 800fcfa:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 800fcfc:	79da      	ldrb	r2, [r3, #7]
 800fcfe:	f361 12c7 	bfi	r2, r1, #7, #1
 800fd02:	71da      	strb	r2, [r3, #7]
}
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop

0800fd08 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0c:	4b29      	ldr	r3, [pc, #164]	; (800fdb4 <configuration_reset+0xac>)
 800fd0e:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fd10:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fdc4 <configuration_reset+0xbc>
 800fd14:	f898 2000 	ldrb.w	r2, [r8]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d03a      	beq.n	800fd92 <configuration_reset+0x8a>
 800fd1c:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fd1e:	4d26      	ldr	r5, [pc, #152]	; (800fdb8 <configuration_reset+0xb0>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fd20:	4e26      	ldr	r6, [pc, #152]	; (800fdbc <configuration_reset+0xb4>)
    drvid -= _app_driver_count;
 800fd22:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fd24:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 800fd26:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fd28:	d83d      	bhi.n	800fda6 <configuration_reset+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd30:	d908      	bls.n	800fd44 <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 800fd32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd36:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800fd3a:	07db      	lsls	r3, r3, #31
 800fd3c:	d500      	bpl.n	800fd40 <configuration_reset+0x38>
 800fd3e:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 800fd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fd44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	4638      	mov	r0, r7
 800fd4c:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fd4e:	3401      	adds	r4, #1
 800fd50:	f898 2000 	ldrb.w	r2, [r8]
 800fd54:	b2e4      	uxtb	r4, r4
 800fd56:	1c53      	adds	r3, r2, #1
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	dae2      	bge.n	800fd22 <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 800fd5c:	4b18      	ldr	r3, [pc, #96]	; (800fdc0 <configuration_reset+0xb8>)
 800fd5e:	2237      	movs	r2, #55	; 0x37
 800fd60:	2100      	movs	r1, #0
 800fd62:	4618      	mov	r0, r3
 800fd64:	f001 fbc8 	bl	80114f8 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800fd68:	f04f 32ff 	mov.w	r2, #4294967295
 800fd6c:	f8c0 2003 	str.w	r2, [r0, #3]
 800fd70:	f8c0 2007 	str.w	r2, [r0, #7]
 800fd74:	f8c0 200b 	str.w	r2, [r0, #11]
 800fd78:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800fd7c:	f8c0 2013 	str.w	r2, [r0, #19]
 800fd80:	f8c0 2017 	str.w	r2, [r0, #23]
 800fd84:	f8c0 201b 	str.w	r2, [r0, #27]
 800fd88:	f8c0 201f 	str.w	r2, [r0, #31]
 800fd8c:	f8a0 2023 	strh.w	r2, [r0, #35]	; 0x23
 800fd90:	e7d6      	b.n	800fd40 <configuration_reset+0x38>
    driver->reset(rhport);
 800fd92:	f7ff fc5f 	bl	800f654 <cdcd_reset>
 800fd96:	4638      	mov	r0, r7
 800fd98:	f7fe ffca 	bl	800ed30 <audiod_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fd9c:	f898 3000 	ldrb.w	r3, [r8]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1c6      	bne.n	800fd32 <configuration_reset+0x2a>
 800fda4:	e7da      	b.n	800fd5c <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fda6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fdaa:	6832      	ldr	r2, [r6, #0]
    TU_ASSERT(driver, );
 800fdac:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 800fdb0:	d1ca      	bne.n	800fd48 <configuration_reset+0x40>
 800fdb2:	e7be      	b.n	800fd32 <configuration_reset+0x2a>
 800fdb4:	00000000 	.word	0x00000000
 800fdb8:	08018c9c 	.word	0x08018c9c
 800fdbc:	2400d278 	.word	0x2400d278
 800fdc0:	2400d280 	.word	0x2400d280
 800fdc4:	2400d27c 	.word	0x2400d27c

0800fdc8 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 800fdc8:	4b02      	ldr	r3, [pc, #8]	; (800fdd4 <tud_mounted+0xc>)
 800fdca:	7858      	ldrb	r0, [r3, #1]
}
 800fdcc:	3800      	subs	r0, #0
 800fdce:	bf18      	it	ne
 800fdd0:	2001      	movne	r0, #1
 800fdd2:	4770      	bx	lr
 800fdd4:	2400d280 	.word	0x2400d280

0800fdd8 <tud_suspended>:
  return _usbd_dev.suspended;
 800fdd8:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <tud_suspended+0xc>)
 800fdda:	7818      	ldrb	r0, [r3, #0]
}
 800fddc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	2400d280 	.word	0x2400d280

0800fde8 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 800fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 800fdec:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8010100 <tud_task_ext+0x318>
{
 800fdf0:	b08b      	sub	sp, #44	; 0x2c
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 800fdf2:	f899 3000 	ldrb.w	r3, [r9]
 800fdf6:	2bff      	cmp	r3, #255	; 0xff
 800fdf8:	d052      	beq.n	800fea0 <tud_task_ext+0xb8>
 800fdfa:	4db9      	ldr	r5, [pc, #740]	; (80100e0 <tud_task_ext+0x2f8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fdfc:	f8df a304 	ldr.w	sl, [pc, #772]	; 8010104 <tud_task_ext+0x31c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe00:	f8df b304 	ldr.w	fp, [pc, #772]	; 8010108 <tud_task_ext+0x320>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800fe04:	682e      	ldr	r6, [r5, #0]

// lock queue by disable USB interrupt
TU_ATTR_ALWAYS_INLINE static inline void _osal_q_lock(osal_queue_t qhdl)
{
  // disable dcd/hcd interrupt
  qhdl->interrupt_set(false);
 800fe06:	2000      	movs	r0, #0
 800fe08:	4634      	mov	r4, r6
 800fe0a:	f854 3b04 	ldr.w	r3, [r4], #4
 800fe0e:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 800fe10:	a907      	add	r1, sp, #28
 800fe12:	4620      	mov	r0, r4
 800fe14:	f7ff fe14 	bl	800fa40 <tu_fifo_read>
 800fe18:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 800fe1a:	6833      	ldr	r3, [r6, #0]
 800fe1c:	2001      	movs	r0, #1
 800fe1e:	4798      	blx	r3
 800fe20:	2c00      	cmp	r4, #0
 800fe22:	d03d      	beq.n	800fea0 <tud_task_ext+0xb8>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 800fe24:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	2b07      	cmp	r3, #7
 800fe2c:	f200 80c4 	bhi.w	800ffb8 <tud_task_ext+0x1d0>
 800fe30:	e8df f003 	tbb	[pc, r3]
 800fe34:	94c2aab7 	.word	0x94c2aab7
 800fe38:	040a3981 	.word	0x040a3981
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800fe3c:	9b08      	ldr	r3, [sp, #32]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0e0      	beq.n	800fe04 <tud_task_ext+0x1c>
 800fe42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe44:	4798      	blx	r3
 800fe46:	e7dd      	b.n	800fe04 <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800fe48:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800fe4c:	4ba5      	ldr	r3, [pc, #660]	; (80100e4 <tud_task_ext+0x2fc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800fe4e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 800fe52:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe56:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800fe5a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fe5e:	f36f 0200 	bfc	r2, #0, #1
 800fe62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800fe66:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fe6a:	f36f 0282 	bfc	r2, #2, #1
 800fe6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if ( 0 == epnum )
 800fe72:	2800      	cmp	r0, #0
 800fe74:	f000 80bd 	beq.w	800fff2 <tud_task_ext+0x20a>
  if ( usbd_app_driver_get_cb )
 800fe78:	4a9b      	ldr	r2, [pc, #620]	; (80100e8 <tud_task_ext+0x300>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 800fe7a:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 800fe7c:	b132      	cbz	r2, 800fe8c <tud_task_ext+0xa4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe7e:	4a9b      	ldr	r2, [pc, #620]	; (80100ec <tud_task_ext+0x304>)
 800fe80:	7812      	ldrb	r2, [r2, #0]
 800fe82:	4293      	cmp	r3, r2
 800fe84:	f0c0 80ad 	bcc.w	800ffe2 <tud_task_ext+0x1fa>
    drvid -= _app_driver_count;
 800fe88:	1a9b      	subs	r3, r3, r2
 800fe8a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	f240 809c 	bls.w	800ffca <tud_task_ext+0x1e2>
          TU_ASSERT(driver, );
 800fe92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe96:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800fe9a:	07da      	lsls	r2, r3, #31
 800fe9c:	d500      	bpl.n	800fea0 <tud_task_ext+0xb8>
 800fe9e:	be00      	bkpt	0x0000
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 800fea0:	b00b      	add	sp, #44	; 0x2c
 800fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 800fea6:	4c8f      	ldr	r4, [pc, #572]	; (80100e4 <tud_task_ext+0x2fc>)

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
 800fea8:	2000      	movs	r0, #0
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800feaa:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 800feae:	7823      	ldrb	r3, [r4, #0]
 800feb0:	f043 0301 	orr.w	r3, r3, #1
 800feb4:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800feb6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800feba:	f36f 0300 	bfc	r3, #0, #1
 800febe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800fec2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fec6:	f36f 0382 	bfc	r3, #2, #1
 800feca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 800fece:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fed2:	f36f 0300 	bfc	r3, #0, #1
 800fed6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 800feda:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fede:	f36f 0382 	bfc	r3, #2, #1
 800fee2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  usbd_control_set_complete_callback(NULL);
 800fee6:	f000 fd73 	bl	80109d0 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800feea:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800feee:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800fef2:	2a60      	cmp	r2, #96	; 0x60
 800fef4:	d00d      	beq.n	800ff12 <tud_task_ext+0x12a>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800fef6:	2a40      	cmp	r2, #64	; 0x40
 800fef8:	f000 8087 	beq.w	801000a <tud_task_ext+0x222>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 800fefc:	f003 031f 	and.w	r3, r3, #31
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	f000 8103 	beq.w	801010c <tud_task_ext+0x324>
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	f000 80b0 	beq.w	801006c <tud_task_ext+0x284>
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 808a 	beq.w	8010026 <tud_task_ext+0x23e>
      }
    }
    break;

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 800ff12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ff16:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ff1a:	07d9      	lsls	r1, r3, #31
 800ff1c:	d500      	bpl.n	800ff20 <tud_task_ext+0x138>
 800ff1e:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 800ff20:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ff24:	2100      	movs	r1, #0
 800ff26:	f001 f965 	bl	80111f4 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800ff2a:	2180      	movs	r1, #128	; 0x80
 800ff2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ff30:	f001 f960 	bl	80111f4 <dcd_edpt_stall>
 800ff34:	e766      	b.n	800fe04 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 800ff36:	4a6b      	ldr	r2, [pc, #428]	; (80100e4 <tud_task_ext+0x2fc>)
          if (tud_resume_cb) tud_resume_cb();
 800ff38:	f04f 0301 	mov.w	r3, #1
 800ff3c:	496c      	ldr	r1, [pc, #432]	; (80100f0 <tud_task_ext+0x308>)
        if ( _usbd_dev.connected )
 800ff3e:	7812      	ldrb	r2, [r2, #0]
 800ff40:	f002 0201 	and.w	r2, r2, #1
          if (tud_resume_cb) tud_resume_cb();
 800ff44:	2900      	cmp	r1, #0
 800ff46:	d05e      	beq.n	8010006 <tud_task_ext+0x21e>
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f43f af5a 	beq.w	800fe04 <tud_task_ext+0x1c>
 800ff50:	2a00      	cmp	r2, #0
 800ff52:	f43f af57 	beq.w	800fe04 <tud_task_ext+0x1c>
 800ff56:	f7f5 f853 	bl	8005000 <tud_resume_cb>
 800ff5a:	e753      	b.n	800fe04 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 800ff5c:	4c61      	ldr	r4, [pc, #388]	; (80100e4 <tud_task_ext+0x2fc>)
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800ff5e:	f04f 0301 	mov.w	r3, #1
 800ff62:	4964      	ldr	r1, [pc, #400]	; (80100f4 <tud_task_ext+0x30c>)
        if ( _usbd_dev.connected )
 800ff64:	7822      	ldrb	r2, [r4, #0]
 800ff66:	f002 0201 	and.w	r2, r2, #1
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800ff6a:	2900      	cmp	r1, #0
 800ff6c:	d049      	beq.n	8010002 <tud_task_ext+0x21a>
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f43f af47 	beq.w	800fe04 <tud_task_ext+0x1c>
 800ff76:	2a00      	cmp	r2, #0
 800ff78:	f43f af44 	beq.w	800fe04 <tud_task_ext+0x1c>
 800ff7c:	7820      	ldrb	r0, [r4, #0]
 800ff7e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800ff82:	f7f5 f83b 	bl	8004ffc <tud_suspend_cb>
 800ff86:	e73d      	b.n	800fe04 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 800ff88:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ff8c:	f7ff febc 	bl	800fd08 <configuration_reset>
  usbd_control_reset();
 800ff90:	f000 fd14 	bl	80109bc <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 800ff94:	4b58      	ldr	r3, [pc, #352]	; (80100f8 <tud_task_ext+0x310>)
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f43f af34 	beq.w	800fe04 <tud_task_ext+0x1c>
 800ff9c:	f7f5 f82c 	bl	8004ff8 <tud_umount_cb>
 800ffa0:	e730      	b.n	800fe04 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 800ffa2:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ffa6:	f7ff feaf 	bl	800fd08 <configuration_reset>
  usbd_control_reset();
 800ffaa:	f000 fd07 	bl	80109bc <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800ffae:	4b4d      	ldr	r3, [pc, #308]	; (80100e4 <tud_task_ext+0x2fc>)
 800ffb0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800ffb4:	709a      	strb	r2, [r3, #2]
      break;
 800ffb6:	e725      	b.n	800fe04 <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 800ffb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffbc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ffc0:	07db      	lsls	r3, r3, #31
 800ffc2:	f57f af1f 	bpl.w	800fe04 <tud_task_ext+0x1c>
 800ffc6:	be00      	bkpt	0x0000
  {
 800ffc8:	e71c      	b.n	800fe04 <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ffca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ffce:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800ffd2:	691c      	ldr	r4, [r3, #16]
 800ffd4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800ffd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffda:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ffde:	47a0      	blx	r4
 800ffe0:	e710      	b.n	800fe04 <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ffe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ffe6:	f8db 2000 	ldr.w	r2, [fp]
          TU_ASSERT(driver, );
 800ffea:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 800ffee:	d1f0      	bne.n	800ffd2 <tud_task_ext+0x1ea>
 800fff0:	e74f      	b.n	800fe92 <tud_task_ext+0xaa>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 800fff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fff4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800fff8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800fffc:	f000 fcfe 	bl	80109fc <usbd_control_xfer_cb>
 8010000:	e700      	b.n	800fe04 <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8010002:	460b      	mov	r3, r1
 8010004:	e7b3      	b.n	800ff6e <tud_task_ext+0x186>
          if (tud_resume_cb) tud_resume_cb();
 8010006:	460b      	mov	r3, r1
 8010008:	e79e      	b.n	800ff48 <tud_task_ext+0x160>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 801000a:	483c      	ldr	r0, [pc, #240]	; (80100fc <tud_task_ext+0x314>)
 801000c:	2800      	cmp	r0, #0
 801000e:	d087      	beq.n	800ff20 <tud_task_ext+0x138>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8010010:	f000 fcde 	bl	80109d0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8010014:	4640      	mov	r0, r8
 8010016:	aa08      	add	r2, sp, #32
 8010018:	2101      	movs	r1, #1
 801001a:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801001e:	2800      	cmp	r0, #0
 8010020:	f47f aef0 	bne.w	800fe04 <tud_task_ext+0x1c>
 8010024:	e77c      	b.n	800ff20 <tud_task_ext+0x138>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8010026:	2a20      	cmp	r2, #32
 8010028:	f000 80aa 	beq.w	8010180 <tud_task_ext+0x398>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801002c:	2a00      	cmp	r2, #0
 801002e:	f47f af70 	bne.w	800ff12 <tud_task_ext+0x12a>
      switch ( p_request->bRequest )
 8010032:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010036:	2b09      	cmp	r3, #9
 8010038:	f63f af6b 	bhi.w	800ff12 <tud_task_ext+0x12a>
 801003c:	a201      	add	r2, pc, #4	; (adr r2, 8010044 <tud_task_ext+0x25c>)
 801003e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010042:	bf00      	nop
 8010044:	080101ed 	.word	0x080101ed
 8010048:	080102d7 	.word	0x080102d7
 801004c:	0800ff13 	.word	0x0800ff13
 8010050:	080102bb 	.word	0x080102bb
 8010054:	0800ff13 	.word	0x0800ff13
 8010058:	080102a1 	.word	0x080102a1
 801005c:	0801024f 	.word	0x0801024f
 8010060:	0800ff13 	.word	0x0800ff13
 8010064:	08010239 	.word	0x08010239
 8010068:	0801020f 	.word	0x0801020f
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 801006c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8010070:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8010074:	2b08      	cmp	r3, #8
 8010076:	f63f af4c 	bhi.w	800ff12 <tud_task_ext+0x12a>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801007a:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( usbd_app_driver_get_cb )
 801007e:	4e1a      	ldr	r6, [pc, #104]	; (80100e8 <tud_task_ext+0x300>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
 8010086:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
 801008a:	7cc0      	ldrb	r0, [r0, #19]
  if ( usbd_app_driver_get_cb )
 801008c:	b136      	cbz	r6, 801009c <tud_task_ext+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801008e:	4e17      	ldr	r6, [pc, #92]	; (80100ec <tud_task_ext+0x304>)
 8010090:	7836      	ldrb	r6, [r6, #0]
 8010092:	42b0      	cmp	r0, r6
 8010094:	f0c0 8174 	bcc.w	8010380 <tud_task_ext+0x598>
    drvid -= _app_driver_count;
 8010098:	1b80      	subs	r0, r0, r6
 801009a:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801009c:	2801      	cmp	r0, #1
 801009e:	f240 8092 	bls.w	80101c6 <tud_task_ext+0x3de>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80100a2:	2a00      	cmp	r2, #0
 80100a4:	f47f af3c 	bne.w	800ff20 <tud_task_ext+0x138>
  return NULL;
 80100a8:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 80100aa:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80100ae:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 80100b2:	2801      	cmp	r0, #1
 80100b4:	f000 817a 	beq.w	80103ac <tud_task_ext+0x5c4>
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	f47f af2a 	bne.w	800ff12 <tud_task_ext+0x12a>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80100be:	4423      	add	r3, r4
            tud_control_xfer(rhport, p_request, &status, 2);
 80100c0:	4640      	mov	r0, r8
 80100c2:	f10d 021a 	add.w	r2, sp, #26
 80100c6:	a908      	add	r1, sp, #32
  return _usbd_dev.ep_status[epnum][dir].stalled;
 80100c8:	449c      	add	ip, r3
 80100ca:	f89c 3025 	ldrb.w	r3, [ip, #37]	; 0x25
 80100ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80100d2:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 80100d6:	2302      	movs	r3, #2
 80100d8:	f000 fc12 	bl	8010900 <tud_control_xfer>
          break;
 80100dc:	e692      	b.n	800fe04 <tud_task_ext+0x1c>
 80100de:	bf00      	nop
 80100e0:	2400d2b8 	.word	0x2400d2b8
 80100e4:	2400d280 	.word	0x2400d280
 80100e8:	00000000 	.word	0x00000000
 80100ec:	2400d27c 	.word	0x2400d27c
 80100f0:	08005001 	.word	0x08005001
 80100f4:	08004ffd 	.word	0x08004ffd
 80100f8:	08004ff9 	.word	0x08004ff9
 80100fc:	00000000 	.word	0x00000000
 8010100:	24000344 	.word	0x24000344
 8010104:	08018c9c 	.word	0x08018c9c
 8010108:	2400d278 	.word	0x2400d278
 801010c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010110:	2b0f      	cmp	r3, #15
 8010112:	f63f af05 	bhi.w	800ff20 <tud_task_ext+0x138>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8010116:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 8010118:	4abb      	ldr	r2, [pc, #748]	; (8010408 <tud_task_ext+0x620>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801011a:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 801011c:	b132      	cbz	r2, 801012c <tud_task_ext+0x344>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801011e:	4abb      	ldr	r2, [pc, #748]	; (801040c <tud_task_ext+0x624>)
 8010120:	7812      	ldrb	r2, [r2, #0]
 8010122:	4293      	cmp	r3, r2
 8010124:	f0c0 8139 	bcc.w	801039a <tud_task_ext+0x5b2>
    drvid -= _app_driver_count;
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801012c:	2b01      	cmp	r3, #1
 801012e:	f63f aef7 	bhi.w	800ff20 <tud_task_ext+0x138>
 8010132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010136:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 801013a:	68e0      	ldr	r0, [r4, #12]
 801013c:	f000 fc48 	bl	80109d0 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010140:	68e3      	ldr	r3, [r4, #12]
 8010142:	aa08      	add	r2, sp, #32
 8010144:	2101      	movs	r1, #1
 8010146:	4640      	mov	r0, r8
 8010148:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 801014a:	2800      	cmp	r0, #0
 801014c:	f47f ae5a 	bne.w	800fe04 <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8010150:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010154:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 8010158:	f47f aee2 	bne.w	800ff20 <tud_task_ext+0x138>
        switch(p_request->bRequest)
 801015c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010160:	3b0a      	subs	r3, #10
 8010162:	2b01      	cmp	r3, #1
 8010164:	f63f aedc 	bhi.w	800ff20 <tud_task_ext+0x138>
            usbd_control_set_complete_callback(NULL);
 8010168:	f000 fc32 	bl	80109d0 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 801016c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010170:	2b0a      	cmp	r3, #10
 8010172:	f000 8173 	beq.w	801045c <tud_task_ext+0x674>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010176:	a908      	add	r1, sp, #32
 8010178:	4640      	mov	r0, r8
 801017a:	f000 fba7 	bl	80108cc <tud_control_status>
 801017e:	e641      	b.n	800fe04 <tud_task_ext+0x1c>
 8010180:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010184:	2b0f      	cmp	r3, #15
 8010186:	f63f aecb 	bhi.w	800ff20 <tud_task_ext+0x138>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801018a:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 801018c:	4a9e      	ldr	r2, [pc, #632]	; (8010408 <tud_task_ext+0x620>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801018e:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8010190:	b132      	cbz	r2, 80101a0 <tud_task_ext+0x3b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010192:	4a9e      	ldr	r2, [pc, #632]	; (801040c <tud_task_ext+0x624>)
 8010194:	7812      	ldrb	r2, [r2, #0]
 8010196:	4293      	cmp	r3, r2
 8010198:	f0c0 8140 	bcc.w	801041c <tud_task_ext+0x634>
    drvid -= _app_driver_count;
 801019c:	1a9b      	subs	r3, r3, r2
 801019e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	f63f aebd 	bhi.w	800ff20 <tud_task_ext+0x138>
 80101a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101aa:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80101ae:	68e0      	ldr	r0, [r4, #12]
 80101b0:	f000 fc0e 	bl	80109d0 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80101b4:	68e3      	ldr	r3, [r4, #12]
 80101b6:	4640      	mov	r0, r8
 80101b8:	aa08      	add	r2, sp, #32
 80101ba:	2101      	movs	r1, #1
 80101bc:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80101be:	2800      	cmp	r0, #0
 80101c0:	f47f ae20 	bne.w	800fe04 <tud_task_ext+0x1c>
 80101c4:	e6ac      	b.n	800ff20 <tud_task_ext+0x138>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80101ca:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80101ce:	2a00      	cmp	r2, #0
 80101d0:	f43f af6b 	beq.w	80100aa <tud_task_ext+0x2c2>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80101d4:	68f0      	ldr	r0, [r6, #12]
 80101d6:	f000 fbfb 	bl	80109d0 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80101da:	68f3      	ldr	r3, [r6, #12]
 80101dc:	4640      	mov	r0, r8
 80101de:	aa08      	add	r2, sp, #32
 80101e0:	2101      	movs	r1, #1
 80101e2:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80101e4:	2800      	cmp	r0, #0
 80101e6:	f47f ae0d 	bne.w	800fe04 <tud_task_ext+0x1c>
 80101ea:	e699      	b.n	800ff20 <tud_task_ext+0x138>
          tud_control_xfer(rhport, p_request, &status, 2);
 80101ec:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80101ee:	7821      	ldrb	r1, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 80101f0:	4640      	mov	r0, r8
 80101f2:	f10d 021a 	add.w	r2, sp, #26
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80101f6:	fa21 f403 	lsr.w	r4, r1, r3
 80101fa:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80101fe:	401c      	ands	r4, r3
 8010200:	4321      	orrs	r1, r4
 8010202:	f8ad 101a 	strh.w	r1, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
 8010206:	a908      	add	r1, sp, #32
 8010208:	f000 fb7a 	bl	8010900 <tud_control_xfer>
        break;
 801020c:	e5fa      	b.n	800fe04 <tud_task_ext+0x1c>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 801020e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 8010212:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8010214:	9201      	str	r2, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 8010216:	429a      	cmp	r2, r3
 8010218:	d007      	beq.n	801022a <tud_task_ext+0x442>
            if ( _usbd_dev.cfg_num )
 801021a:	7863      	ldrb	r3, [r4, #1]
 801021c:	2b00      	cmp	r3, #0
 801021e:	f040 816d 	bne.w	80104fc <tud_task_ext+0x714>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8010222:	9b01      	ldr	r3, [sp, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	f040 8123 	bne.w	8010470 <tud_task_ext+0x688>
          _usbd_dev.cfg_num = cfg_num;
 801022a:	9b01      	ldr	r3, [sp, #4]
          tud_control_status(rhport, p_request);
 801022c:	4640      	mov	r0, r8
 801022e:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
 8010230:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 8010232:	f000 fb4b 	bl	80108cc <tud_control_status>
        break;
 8010236:	e5e5      	b.n	800fe04 <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8010238:	7863      	ldrb	r3, [r4, #1]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 801023a:	4640      	mov	r0, r8
 801023c:	f10d 021a 	add.w	r2, sp, #26
 8010240:	a908      	add	r1, sp, #32
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8010242:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8010246:	2301      	movs	r3, #1
 8010248:	f000 fb5a 	bl	8010900 <tud_control_xfer>
        break;
 801024c:	e5da      	b.n	800fe04 <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 801024e:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8010252:	0a03      	lsrs	r3, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8010254:	b2c0      	uxtb	r0, r0
  switch(desc_type)
 8010256:	1e5a      	subs	r2, r3, #1
 8010258:	2a0e      	cmp	r2, #14
 801025a:	f63f ae61 	bhi.w	800ff20 <tud_task_ext+0x138>
 801025e:	a101      	add	r1, pc, #4	; (adr r1, 8010264 <tud_task_ext+0x47c>)
 8010260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010264:	0801031f 	.word	0x0801031f
 8010268:	080102f3 	.word	0x080102f3
 801026c:	0801035d 	.word	0x0801035d
 8010270:	0800ff21 	.word	0x0800ff21
 8010274:	0800ff21 	.word	0x0800ff21
 8010278:	08010337 	.word	0x08010337
 801027c:	080102f3 	.word	0x080102f3
 8010280:	0800ff21 	.word	0x0800ff21
 8010284:	0800ff21 	.word	0x0800ff21
 8010288:	0800ff21 	.word	0x0800ff21
 801028c:	0800ff21 	.word	0x0800ff21
 8010290:	0800ff21 	.word	0x0800ff21
 8010294:	0800ff21 	.word	0x0800ff21
 8010298:	0800ff21 	.word	0x0800ff21
 801029c:	0801036d 	.word	0x0801036d
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80102a0:	a808      	add	r0, sp, #32
 80102a2:	f000 fb9b 	bl	80109dc <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80102a6:	4640      	mov	r0, r8
 80102a8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80102ac:	f000 fc40 	bl	8010b30 <dcd_set_address>
          _usbd_dev.addressed = 1;
 80102b0:	7823      	ldrb	r3, [r4, #0]
 80102b2:	f043 0302 	orr.w	r3, r3, #2
 80102b6:	7023      	strb	r3, [r4, #0]
        break;
 80102b8:	e5a4      	b.n	800fe04 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80102ba:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80102be:	2b01      	cmp	r3, #1
 80102c0:	f47f ae2e 	bne.w	800ff20 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = true;
 80102c4:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80102c6:	4640      	mov	r0, r8
 80102c8:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 80102ca:	f043 0308 	orr.w	r3, r3, #8
 80102ce:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80102d0:	f000 fafc 	bl	80108cc <tud_control_status>
        break;
 80102d4:	e596      	b.n	800fe04 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80102d6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80102da:	2b01      	cmp	r3, #1
 80102dc:	f47f ae20 	bne.w	800ff20 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = false;
 80102e0:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80102e2:	4640      	mov	r0, r8
 80102e4:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 80102e6:	f36f 03c3 	bfc	r3, #3, #1
 80102ea:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80102ec:	f000 faee 	bl	80108cc <tud_control_status>
        break;
 80102f0:	e588      	b.n	800fe04 <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	f000 8121 	beq.w	801053a <tud_task_ext+0x752>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80102f8:	4b45      	ldr	r3, [pc, #276]	; (8010410 <tud_task_ext+0x628>)
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f43f ae10 	beq.w	800ff20 <tud_task_ext+0x138>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8010300:	f3af 8000 	nop.w
 8010304:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 8010306:	2a00      	cmp	r2, #0
 8010308:	f43f ae03 	beq.w	800ff12 <tud_task_ext+0x12a>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 801030c:	4640      	mov	r0, r8
 801030e:	8853      	ldrh	r3, [r2, #2]
 8010310:	a908      	add	r1, sp, #32
 8010312:	f000 faf5 	bl	8010900 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010316:	2800      	cmp	r0, #0
 8010318:	f47f ad74 	bne.w	800fe04 <tud_task_ext+0x1c>
 801031c:	e600      	b.n	800ff20 <tud_task_ext+0x138>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 801031e:	f7f7 f95d 	bl	80075dc <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8010322:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8010324:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8010326:	a908      	add	r1, sp, #32
 8010328:	4640      	mov	r0, r8
 801032a:	f000 fae9 	bl	8010900 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801032e:	2800      	cmp	r0, #0
 8010330:	f47f ad68 	bne.w	800fe04 <tud_task_ext+0x1c>
 8010334:	e5f4      	b.n	800ff20 <tud_task_ext+0x138>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8010336:	4b37      	ldr	r3, [pc, #220]	; (8010414 <tud_task_ext+0x62c>)
 8010338:	2b00      	cmp	r3, #0
 801033a:	f43f adf1 	beq.w	800ff20 <tud_task_ext+0x138>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 801033e:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 8010342:	4602      	mov	r2, r0
 8010344:	2800      	cmp	r0, #0
 8010346:	f43f adeb 	beq.w	800ff20 <tud_task_ext+0x138>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 801034a:	4640      	mov	r0, r8
 801034c:	7813      	ldrb	r3, [r2, #0]
 801034e:	a908      	add	r1, sp, #32
 8010350:	f000 fad6 	bl	8010900 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010354:	2800      	cmp	r0, #0
 8010356:	f47f ad55 	bne.w	800fe04 <tud_task_ext+0x1c>
 801035a:	e5e1      	b.n	800ff20 <tud_task_ext+0x138>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 801035c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8010360:	f7f7 f944 	bl	80075ec <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 8010364:	4602      	mov	r2, r0
 8010366:	2800      	cmp	r0, #0
 8010368:	d1ef      	bne.n	801034a <tud_task_ext+0x562>
 801036a:	e5d9      	b.n	800ff20 <tud_task_ext+0x138>
      if (!tud_descriptor_bos_cb) return false;
 801036c:	4b2a      	ldr	r3, [pc, #168]	; (8010418 <tud_task_ext+0x630>)
 801036e:	2b00      	cmp	r3, #0
 8010370:	f43f add6 	beq.w	800ff20 <tud_task_ext+0x138>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8010374:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 8010378:	4602      	mov	r2, r0
 801037a:	2800      	cmp	r0, #0
 801037c:	d1c6      	bne.n	801030c <tud_task_ext+0x524>
 801037e:	e5c8      	b.n	800ff12 <tud_task_ext+0x12a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010380:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010384:	f8db 6000 	ldr.w	r6, [fp]
 8010388:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801038c:	2a00      	cmp	r2, #0
 801038e:	f43f ae8c 	beq.w	80100aa <tud_task_ext+0x2c2>
        TU_VERIFY(driver);
 8010392:	2e00      	cmp	r6, #0
 8010394:	f47f af1e 	bne.w	80101d4 <tud_task_ext+0x3ec>
 8010398:	e5c2      	b.n	800ff20 <tud_task_ext+0x138>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801039a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801039e:	f8db 4000 	ldr.w	r4, [fp]
      TU_VERIFY(driver);
 80103a2:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 80103a6:	f43f adbb 	beq.w	800ff20 <tud_task_ext+0x138>
 80103aa:	e6c6      	b.n	801013a <tud_task_ext+0x352>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80103ac:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 80103b0:	b947      	cbnz	r7, 80103c4 <tud_task_ext+0x5dc>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80103b2:	2a01      	cmp	r2, #1
 80103b4:	d03b      	beq.n	801042e <tud_task_ext+0x646>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80103b6:	18e7      	adds	r7, r4, r3
 80103b8:	4467      	add	r7, ip
 80103ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80103be:	3720      	adds	r7, #32
 80103c0:	079b      	lsls	r3, r3, #30
 80103c2:	d513      	bpl.n	80103ec <tud_task_ext+0x604>
            if (driver)
 80103c4:	2e00      	cmp	r6, #0
 80103c6:	f43f ad1d 	beq.w	800fe04 <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80103ca:	68f0      	ldr	r0, [r6, #12]
 80103cc:	f000 fb00 	bl	80109d0 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80103d0:	68f3      	ldr	r3, [r6, #12]
 80103d2:	aa08      	add	r2, sp, #32
 80103d4:	2101      	movs	r1, #1
 80103d6:	4640      	mov	r0, r8
 80103d8:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 80103da:	2000      	movs	r0, #0
 80103dc:	f000 faf8 	bl	80109d0 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80103e0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80103e4:	07d8      	lsls	r0, r3, #31
 80103e6:	f53f ad0d 	bmi.w	800fe04 <tud_task_ext+0x1c>
 80103ea:	e6c4      	b.n	8010176 <tud_task_ext+0x38e>
    dcd_edpt_stall(rhport, ep_addr);
 80103ec:	f899 0000 	ldrb.w	r0, [r9]
 80103f0:	f000 ff00 	bl	80111f4 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80103f4:	797b      	ldrb	r3, [r7, #5]
 80103f6:	f043 0302 	orr.w	r3, r3, #2
 80103fa:	717b      	strb	r3, [r7, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80103fc:	797b      	ldrb	r3, [r7, #5]
 80103fe:	f043 0301 	orr.w	r3, r3, #1
 8010402:	717b      	strb	r3, [r7, #5]
 8010404:	e7de      	b.n	80103c4 <tud_task_ext+0x5dc>
 8010406:	bf00      	nop
 8010408:	00000000 	.word	0x00000000
 801040c:	2400d27c 	.word	0x2400d27c
	...
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801041c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010420:	f8db 4000 	ldr.w	r4, [fp]
        TU_VERIFY(driver);
 8010424:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 8010428:	f43f ad7a 	beq.w	800ff20 <tud_task_ext+0x138>
 801042c:	e6bf      	b.n	80101ae <tud_task_ext+0x3c6>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 801042e:	4423      	add	r3, r4
 8010430:	449c      	add	ip, r3
 8010432:	f89c 3025 	ldrb.w	r3, [ip, #37]	; 0x25
 8010436:	f10c 0220 	add.w	r2, ip, #32
 801043a:	0798      	lsls	r0, r3, #30
 801043c:	d5c2      	bpl.n	80103c4 <tud_task_ext+0x5dc>
    dcd_edpt_clear_stall(rhport, ep_addr);
 801043e:	f899 0000 	ldrb.w	r0, [r9]
 8010442:	9200      	str	r2, [sp, #0]
 8010444:	f000 ff46 	bl	80112d4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010448:	9a00      	ldr	r2, [sp, #0]
 801044a:	7953      	ldrb	r3, [r2, #5]
 801044c:	f367 0341 	bfi	r3, r7, #1, #1
 8010450:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010452:	7953      	ldrb	r3, [r2, #5]
 8010454:	f367 0300 	bfi	r3, r7, #0, #1
 8010458:	7153      	strb	r3, [r2, #5]
 801045a:	e7b3      	b.n	80103c4 <tud_task_ext+0x5dc>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 801045c:	a908      	add	r1, sp, #32
 801045e:	4640      	mov	r0, r8
 8010460:	2301      	movs	r3, #1
 8010462:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 8010466:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 801046a:	f000 fa49 	bl	8010900 <tud_control_xfer>
 801046e:	e4c9      	b.n	800fe04 <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8010470:	1e58      	subs	r0, r3, #1
 8010472:	b2c0      	uxtb	r0, r0
 8010474:	f7f7 f8b6 	bl	80075e4 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8010478:	2800      	cmp	r0, #0
 801047a:	d036      	beq.n	80104ea <tud_task_ext+0x702>
 801047c:	7843      	ldrb	r3, [r0, #1]
 801047e:	2b02      	cmp	r3, #2
 8010480:	d133      	bne.n	80104ea <tud_task_ext+0x702>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010482:	7823      	ldrb	r3, [r4, #0]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8010484:	f100 0709 	add.w	r7, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010488:	79c2      	ldrb	r2, [r0, #7]
 801048a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801048e:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8010492:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8010496:	011b      	lsls	r3, r3, #4
 8010498:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801049c:	430b      	orrs	r3, r1
 801049e:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80104a0:	8843      	ldrh	r3, [r0, #2]
 80104a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80104a6:	18c3      	adds	r3, r0, r3
 80104a8:	9404      	str	r4, [sp, #16]
 80104aa:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	42bb      	cmp	r3, r7
 80104b0:	d97c      	bls.n	80105ac <tud_task_ext+0x7c4>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80104b2:	787b      	ldrb	r3, [r7, #1]
 80104b4:	2b0b      	cmp	r3, #11
 80104b6:	d074      	beq.n	80105a2 <tud_task_ext+0x7ba>
    uint8_t assoc_itf_count = 1;
 80104b8:	2301      	movs	r3, #1
 80104ba:	9300      	str	r3, [sp, #0]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80104bc:	787b      	ldrb	r3, [r7, #1]
 80104be:	2b04      	cmp	r3, #4
 80104c0:	d113      	bne.n	80104ea <tud_task_ext+0x702>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	494f      	ldr	r1, [pc, #316]	; (8010604 <tud_task_ext+0x81c>)
 80104c6:	1bda      	subs	r2, r3, r7
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80104c8:	4b4f      	ldr	r3, [pc, #316]	; (8010608 <tud_task_ext+0x820>)
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80104ca:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2900      	cmp	r1, #0
 80104d0:	d076      	beq.n	80105c0 <tud_task_ext+0x7d8>
 80104d2:	2600      	movs	r6, #0
 80104d4:	4639      	mov	r1, r7
 80104d6:	4617      	mov	r7, r2
 80104d8:	46b0      	mov	r8, r6
    drvid -= _app_driver_count;
 80104da:	1af4      	subs	r4, r6, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80104dc:	429e      	cmp	r6, r3
    drvid -= _app_driver_count;
 80104de:	b2e4      	uxtb	r4, r4
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80104e0:	d357      	bcc.n	8010592 <tud_task_ext+0x7aa>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80104e2:	2c01      	cmp	r4, #1
 80104e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80104e8:	d911      	bls.n	801050e <tud_task_ext+0x726>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80104ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80104ee:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80104f2:	07dc      	lsls	r4, r3, #31
 80104f4:	f57f ad0d 	bpl.w	800ff12 <tud_task_ext+0x12a>
 80104f8:	be00      	bkpt	0x0000
 80104fa:	e50a      	b.n	800ff12 <tud_task_ext+0x12a>
              dcd_edpt_close_all(rhport);
 80104fc:	4640      	mov	r0, r8
 80104fe:	f000 fc05 	bl	8010d0c <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8010502:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 8010504:	4640      	mov	r0, r8
 8010506:	f7ff fbff 	bl	800fd08 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 801050a:	70a6      	strb	r6, [r4, #2]
 801050c:	e689      	b.n	8010222 <tud_task_ext+0x43a>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801050e:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8010512:	68a3      	ldr	r3, [r4, #8]
 8010514:	463a      	mov	r2, r7
 8010516:	9802      	ldr	r0, [sp, #8]
 8010518:	9105      	str	r1, [sp, #20]
 801051a:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801051c:	2808      	cmp	r0, #8
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801051e:	f106 0301 	add.w	r3, r6, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010522:	9905      	ldr	r1, [sp, #20]
 8010524:	d901      	bls.n	801052a <tud_task_ext+0x742>
 8010526:	4287      	cmp	r7, r0
 8010528:	d20b      	bcs.n	8010542 <tud_task_ext+0x75a>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801052a:	b2de      	uxtb	r6, r3
 801052c:	4b36      	ldr	r3, [pc, #216]	; (8010608 <tud_task_ext+0x820>)
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	46b0      	mov	r8, r6
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	42b2      	cmp	r2, r6
 8010536:	dad0      	bge.n	80104da <tud_task_ext+0x6f2>
 8010538:	e7d7      	b.n	80104ea <tud_task_ext+0x702>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 801053a:	f7f7 f853 	bl	80075e4 <tud_descriptor_configuration_cb>
 801053e:	4602      	mov	r2, r0
 8010540:	e6e1      	b.n	8010306 <tud_task_ext+0x51e>
 8010542:	460f      	mov	r7, r1
        if ( assoc_itf_count == 1)
 8010544:	9b00      	ldr	r3, [sp, #0]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d106      	bne.n	8010558 <tud_task_ext+0x770>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 801054a:	9900      	ldr	r1, [sp, #0]
 801054c:	68a2      	ldr	r2, [r4, #8]
 801054e:	4b2f      	ldr	r3, [pc, #188]	; (801060c <tud_task_ext+0x824>)
 8010550:	429a      	cmp	r2, r3
 8010552:	bf08      	it	eq
 8010554:	2102      	moveq	r1, #2
 8010556:	9100      	str	r1, [sp, #0]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010558:	2200      	movs	r2, #0
 801055a:	e008      	b.n	801056e <tud_task_ext+0x786>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 801055c:	78b9      	ldrb	r1, [r7, #2]
 801055e:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010560:	9904      	ldr	r1, [sp, #16]
 8010562:	fa51 f383 	uxtab	r3, r1, r3
 8010566:	78d9      	ldrb	r1, [r3, #3]
 8010568:	29ff      	cmp	r1, #255	; 0xff
 801056a:	d1be      	bne.n	80104ea <tud_task_ext+0x702>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 801056c:	70de      	strb	r6, [r3, #3]
 801056e:	b2d3      	uxtb	r3, r2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010570:	9900      	ldr	r1, [sp, #0]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010572:	3201      	adds	r2, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010574:	4299      	cmp	r1, r3
 8010576:	d8f1      	bhi.n	801055c <tud_task_ext+0x774>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010578:	4633      	mov	r3, r6
 801057a:	4639      	mov	r1, r7
 801057c:	4602      	mov	r2, r0
        p_desc += drv_len;
 801057e:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010580:	4823      	ldr	r0, [pc, #140]	; (8010610 <tud_task_ext+0x828>)
 8010582:	f000 ff1d 	bl	80113c0 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010586:	4b20      	ldr	r3, [pc, #128]	; (8010608 <tud_task_ext+0x820>)
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	3301      	adds	r3, #1
 801058c:	4543      	cmp	r3, r8
 801058e:	da8d      	bge.n	80104ac <tud_task_ext+0x6c4>
 8010590:	e7ab      	b.n	80104ea <tud_task_ext+0x702>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010592:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8010596:	f8db 4000 	ldr.w	r4, [fp]
      TU_ASSERT(driver);
 801059a:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 801059e:	d1b8      	bne.n	8010512 <tud_task_ext+0x72a>
 80105a0:	e7a3      	b.n	80104ea <tud_task_ext+0x702>
      assoc_itf_count = desc_iad->bInterfaceCount;
 80105a2:	78fa      	ldrb	r2, [r7, #3]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80105a4:	783b      	ldrb	r3, [r7, #0]
 80105a6:	9200      	str	r2, [sp, #0]
 80105a8:	441f      	add	r7, r3
 80105aa:	e787      	b.n	80104bc <tud_task_ext+0x6d4>
  if (tud_mount_cb) tud_mount_cb();
 80105ac:	4b19      	ldr	r3, [pc, #100]	; (8010614 <tud_task_ext+0x82c>)
 80105ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80105b2:	9c04      	ldr	r4, [sp, #16]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f43f ae38 	beq.w	801022a <tud_task_ext+0x442>
 80105ba:	f7f4 fd1b 	bl	8004ff4 <tud_mount_cb>
 80105be:	e634      	b.n	801022a <tud_task_ext+0x442>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80105c0:	4688      	mov	r8, r1
 80105c2:	4c15      	ldr	r4, [pc, #84]	; (8010618 <tud_task_ext+0x830>)
 80105c4:	4639      	mov	r1, r7
 80105c6:	4616      	mov	r6, r2
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80105c8:	f1b8 0f02 	cmp.w	r8, #2
 80105cc:	fa5f f788 	uxtb.w	r7, r8
 80105d0:	d08b      	beq.n	80104ea <tud_task_ext+0x702>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80105d2:	68a3      	ldr	r3, [r4, #8]
 80105d4:	4632      	mov	r2, r6
 80105d6:	9802      	ldr	r0, [sp, #8]
 80105d8:	9105      	str	r1, [sp, #20]
 80105da:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80105dc:	4286      	cmp	r6, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80105de:	4623      	mov	r3, r4
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80105e0:	9905      	ldr	r1, [sp, #20]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80105e2:	f104 0418 	add.w	r4, r4, #24
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80105e6:	d301      	bcc.n	80105ec <tud_task_ext+0x804>
 80105e8:	2808      	cmp	r0, #8
 80105ea:	d807      	bhi.n	80105fc <tud_task_ext+0x814>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80105ec:	4b06      	ldr	r3, [pc, #24]	; (8010608 <tud_task_ext+0x820>)
 80105ee:	f108 0801 	add.w	r8, r8, #1
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	3301      	adds	r3, #1
 80105f6:	4598      	cmp	r8, r3
 80105f8:	dde6      	ble.n	80105c8 <tud_task_ext+0x7e0>
 80105fa:	e776      	b.n	80104ea <tud_task_ext+0x702>
 80105fc:	463e      	mov	r6, r7
 80105fe:	461c      	mov	r4, r3
 8010600:	460f      	mov	r7, r1
 8010602:	e79f      	b.n	8010544 <tud_task_ext+0x75c>
 8010604:	00000000 	.word	0x00000000
 8010608:	2400d27c 	.word	0x2400d27c
 801060c:	0800f681 	.word	0x0800f681
 8010610:	2400d293 	.word	0x2400d293
 8010614:	08004ff5 	.word	0x08004ff5
 8010618:	08018c9c 	.word	0x08018c9c

0801061c <usbd_open_edpt_pair>:
{
 801061c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010620:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 8010622:	2a00      	cmp	r2, #0
 8010624:	d046      	beq.n	80106b4 <usbd_open_edpt_pair+0x98>
 8010626:	460c      	mov	r4, r1
 8010628:	461e      	mov	r6, r3
 801062a:	4615      	mov	r5, r2
 801062c:	f04f 0b00 	mov.w	fp, #0
  rhport = _usbd_rhport;
 8010630:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80106c0 <usbd_open_edpt_pair+0xa4>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010634:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80106c4 <usbd_open_edpt_pair+0xa8>
 8010638:	e016      	b.n	8010668 <usbd_open_edpt_pair+0x4c>
 801063a:	f898 1002 	ldrb.w	r1, [r8, #2]
  rhport = _usbd_rhport;
 801063e:	f899 a000 	ldrb.w	sl, [r9]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010642:	f000 fe89 	bl	8011358 <tu_edpt_validate>
 8010646:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 8010648:	4621      	mov	r1, r4
 801064a:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 801064c:	b1d3      	cbz	r3, 8010684 <usbd_open_edpt_pair+0x68>
  return dcd_edpt_open(rhport, desc_ep);
 801064e:	f000 faaf 	bl	8010bb0 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010652:	b1f0      	cbz	r0, 8010692 <usbd_open_edpt_pair+0x76>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8010654:	78a3      	ldrb	r3, [r4, #2]
 8010656:	09da      	lsrs	r2, r3, #7
 8010658:	d124      	bne.n	80106a4 <usbd_open_edpt_pair+0x88>
  for(int i=0; i<ep_count; i++)
 801065a:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_out) = desc_ep->bEndpointAddress;
 801065e:	703b      	strb	r3, [r7, #0]
 8010660:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 8010662:	45ab      	cmp	fp, r5
 8010664:	441c      	add	r4, r3
 8010666:	d025      	beq.n	80106b4 <usbd_open_edpt_pair+0x98>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010668:	7863      	ldrb	r3, [r4, #1]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 801066a:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801066c:	2b05      	cmp	r3, #5
 801066e:	d110      	bne.n	8010692 <usbd_open_edpt_pair+0x76>
 8010670:	78e1      	ldrb	r1, [r4, #3]
 8010672:	f001 0103 	and.w	r1, r1, #3
 8010676:	42b1      	cmp	r1, r6
 8010678:	d10b      	bne.n	8010692 <usbd_open_edpt_pair+0x76>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801067a:	78a3      	ldrb	r3, [r4, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 801067c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010680:	2b08      	cmp	r3, #8
 8010682:	d9da      	bls.n	801063a <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010688:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801068c:	07da      	lsls	r2, r3, #31
 801068e:	d500      	bpl.n	8010692 <usbd_open_edpt_pair+0x76>
 8010690:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010692:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010696:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801069a:	07db      	lsls	r3, r3, #31
 801069c:	d40d      	bmi.n	80106ba <usbd_open_edpt_pair+0x9e>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801069e:	2000      	movs	r0, #0
}
 80106a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ep_in) = desc_ep->bEndpointAddress;
 80106a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  for(int i=0; i<ep_count; i++)
 80106a6:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_in) = desc_ep->bEndpointAddress;
 80106aa:	7013      	strb	r3, [r2, #0]
  for(int i=0; i<ep_count; i++)
 80106ac:	45ab      	cmp	fp, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
 80106ae:	7823      	ldrb	r3, [r4, #0]
 80106b0:	441c      	add	r4, r3
 80106b2:	d1d9      	bne.n	8010668 <usbd_open_edpt_pair+0x4c>
  return true;
 80106b4:	2001      	movs	r0, #1
}
 80106b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80106ba:	be00      	bkpt	0x0000
 80106bc:	e7ef      	b.n	801069e <usbd_open_edpt_pair+0x82>
 80106be:	bf00      	nop
 80106c0:	24000344 	.word	0x24000344
 80106c4:	2400d280 	.word	0x2400d280

080106c8 <usbd_edpt_open>:
{
 80106c8:	b538      	push	{r3, r4, r5, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80106ca:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80106cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106d0:	2b08      	cmp	r3, #8
 80106d2:	d908      	bls.n	80106e6 <usbd_edpt_open+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80106d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80106d8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80106dc:	07db      	lsls	r3, r3, #31
 80106de:	d500      	bpl.n	80106e2 <usbd_edpt_open+0x1a>
 80106e0:	be00      	bkpt	0x0000
}
 80106e2:	2000      	movs	r0, #0
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80106e6:	4a08      	ldr	r2, [pc, #32]	; (8010708 <usbd_edpt_open+0x40>)
 80106e8:	460c      	mov	r4, r1
  rhport = _usbd_rhport;
 80106ea:	4b08      	ldr	r3, [pc, #32]	; (801070c <usbd_edpt_open+0x44>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80106ec:	4608      	mov	r0, r1
 80106ee:	7891      	ldrb	r1, [r2, #2]
  rhport = _usbd_rhport;
 80106f0:	781d      	ldrb	r5, [r3, #0]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80106f2:	f000 fe31 	bl	8011358 <tu_edpt_validate>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d0ec      	beq.n	80106d4 <usbd_edpt_open+0xc>
  return dcd_edpt_open(rhport, desc_ep);
 80106fa:	4621      	mov	r1, r4
 80106fc:	4628      	mov	r0, r5
}
 80106fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8010702:	f000 ba55 	b.w	8010bb0 <dcd_edpt_open>
 8010706:	bf00      	nop
 8010708:	2400d280 	.word	0x2400d280
 801070c:	24000344 	.word	0x24000344

08010710 <usbd_edpt_claim>:
{
 8010710:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010712:	4805      	ldr	r0, [pc, #20]	; (8010728 <usbd_edpt_claim+0x18>)
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010714:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010716:	09da      	lsrs	r2, r3, #7
 8010718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801071c:	3225      	adds	r2, #37	; 0x25
 801071e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010722:	4418      	add	r0, r3
 8010724:	f000 bdec 	b.w	8011300 <tu_edpt_claim>
 8010728:	2400d280 	.word	0x2400d280

0801072c <usbd_edpt_release>:
{
 801072c:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 801072e:	4805      	ldr	r0, [pc, #20]	; (8010744 <usbd_edpt_release+0x18>)
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010730:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010732:	09da      	lsrs	r2, r3, #7
 8010734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010738:	3225      	adds	r2, #37	; 0x25
 801073a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 801073e:	4418      	add	r0, r3
 8010740:	f000 bdf6 	b.w	8011330 <tu_edpt_release>
 8010744:	2400d280 	.word	0x2400d280

08010748 <usbd_edpt_xfer>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010748:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
{
 801074c:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 801074e:	4c18      	ldr	r4, [pc, #96]	; (80107b0 <usbd_edpt_xfer+0x68>)
 8010750:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 8010754:	eb04 10d1 	add.w	r0, r4, r1, lsr #7
 8010758:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 801075c:	f01c 0f01 	tst.w	ip, #1
 8010760:	d008      	beq.n	8010774 <usbd_edpt_xfer+0x2c>
 8010762:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010766:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801076a:	07da      	lsls	r2, r3, #31
 801076c:	d500      	bpl.n	8010770 <usbd_edpt_xfer+0x28>
 801076e:	be00      	bkpt	0x0000
 8010770:	2000      	movs	r0, #0
}
 8010772:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010774:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 8010778:	f100 0420 	add.w	r4, r0, #32
  rhport = _usbd_rhport;
 801077c:	480d      	ldr	r0, [pc, #52]	; (80107b4 <usbd_edpt_xfer+0x6c>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 801077e:	f04c 0c01 	orr.w	ip, ip, #1
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8010782:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010784:	f884 c005 	strb.w	ip, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8010788:	f000 fb14 	bl	8010db4 <dcd_edpt_xfer>
 801078c:	2800      	cmp	r0, #0
 801078e:	d1f0      	bne.n	8010772 <usbd_edpt_xfer+0x2a>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010790:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010792:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010796:	f360 0300 	bfi	r3, r0, #0, #1
 801079a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 801079c:	7963      	ldrb	r3, [r4, #5]
 801079e:	f360 0382 	bfi	r3, r0, #2, #1
 80107a2:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 80107a4:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 80107a8:	07db      	lsls	r3, r3, #31
 80107aa:	d5e1      	bpl.n	8010770 <usbd_edpt_xfer+0x28>
 80107ac:	be00      	bkpt	0x0000
}
 80107ae:	bd10      	pop	{r4, pc}
 80107b0:	2400d280 	.word	0x2400d280
 80107b4:	24000344 	.word	0x24000344

080107b8 <usbd_edpt_xfer_fifo>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80107b8:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
{
 80107bc:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80107be:	4c18      	ldr	r4, [pc, #96]	; (8010820 <usbd_edpt_xfer_fifo+0x68>)
 80107c0:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 80107c4:	eb04 10d1 	add.w	r0, r4, r1, lsr #7
 80107c8:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 80107cc:	f01c 0f01 	tst.w	ip, #1
 80107d0:	d008      	beq.n	80107e4 <usbd_edpt_xfer_fifo+0x2c>
 80107d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80107d6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80107da:	07da      	lsls	r2, r3, #31
 80107dc:	d500      	bpl.n	80107e0 <usbd_edpt_xfer_fifo+0x28>
 80107de:	be00      	bkpt	0x0000
 80107e0:	2000      	movs	r0, #0
}
 80107e2:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80107e4:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 80107e8:	f100 0420 	add.w	r4, r0, #32
  rhport = _usbd_rhport;
 80107ec:	480d      	ldr	r0, [pc, #52]	; (8010824 <usbd_edpt_xfer_fifo+0x6c>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80107ee:	f04c 0c01 	orr.w	ip, ip, #1
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 80107f2:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80107f4:	f884 c005 	strb.w	ip, [r4, #5]
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 80107f8:	f000 fbbc 	bl	8010f74 <dcd_edpt_xfer_fifo>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d1f0      	bne.n	80107e2 <usbd_edpt_xfer_fifo+0x2a>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010800:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010802:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010806:	f360 0300 	bfi	r3, r0, #0, #1
 801080a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 801080c:	7963      	ldrb	r3, [r4, #5]
 801080e:	f360 0382 	bfi	r3, r0, #2, #1
 8010812:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010814:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010818:	07db      	lsls	r3, r3, #31
 801081a:	d5e1      	bpl.n	80107e0 <usbd_edpt_xfer_fifo+0x28>
 801081c:	be00      	bkpt	0x0000
}
 801081e:	bd10      	pop	{r4, pc}
 8010820:	2400d280 	.word	0x2400d280
 8010824:	24000344 	.word	0x24000344

08010828 <usbd_edpt_clear_stall>:
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8010828:	4a0d      	ldr	r2, [pc, #52]	; (8010860 <usbd_edpt_clear_stall+0x38>)
 801082a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 801082e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010832:	eb02 13d1 	add.w	r3, r2, r1, lsr #7
 8010836:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801083a:	0792      	lsls	r2, r2, #30
 801083c:	d400      	bmi.n	8010840 <usbd_edpt_clear_stall+0x18>
 801083e:	4770      	bx	lr
{
 8010840:	b510      	push	{r4, lr}
 8010842:	f103 0420 	add.w	r4, r3, #32
  rhport = _usbd_rhport;
 8010846:	4b07      	ldr	r3, [pc, #28]	; (8010864 <usbd_edpt_clear_stall+0x3c>)
    dcd_edpt_clear_stall(rhport, ep_addr);
 8010848:	7818      	ldrb	r0, [r3, #0]
 801084a:	f000 fd43 	bl	80112d4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 801084e:	7963      	ldrb	r3, [r4, #5]
 8010850:	f36f 0341 	bfc	r3, #1, #1
 8010854:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010856:	7963      	ldrb	r3, [r4, #5]
 8010858:	f36f 0300 	bfc	r3, #0, #1
 801085c:	7163      	strb	r3, [r4, #5]
}
 801085e:	bd10      	pop	{r4, pc}
 8010860:	2400d280 	.word	0x2400d280
 8010864:	24000344 	.word	0x24000344

08010868 <usbd_edpt_close>:
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  rhport = _usbd_rhport;

  TU_ASSERT(dcd_edpt_close, /**/);
 8010868:	4b15      	ldr	r3, [pc, #84]	; (80108c0 <usbd_edpt_close+0x58>)
 801086a:	b1fb      	cbz	r3, 80108ac <usbd_edpt_close+0x44>
  rhport = _usbd_rhport;
 801086c:	4b15      	ldr	r3, [pc, #84]	; (80108c4 <usbd_edpt_close+0x5c>)
{
 801086e:	b510      	push	{r4, lr}
 8010870:	460c      	mov	r4, r1
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8010872:	7818      	ldrb	r0, [r3, #0]
 8010874:	f000 fc24 	bl	80110c0 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010878:	4b13      	ldr	r3, [pc, #76]	; (80108c8 <usbd_edpt_close+0x60>)
 801087a:	f004 017f 	and.w	r1, r4, #127	; 0x7f
 801087e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010882:	eb03 11d4 	add.w	r1, r3, r4, lsr #7
 8010886:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 801088a:	f36f 0341 	bfc	r3, #1, #1
 801088e:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010892:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010896:	f36f 0300 	bfc	r3, #0, #1
 801089a:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 801089e:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 80108a2:	f36f 0382 	bfc	r3, #2, #1
 80108a6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25

  return;
}
 80108aa:	bd10      	pop	{r4, pc}
  TU_ASSERT(dcd_edpt_close, /**/);
 80108ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80108b0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80108b4:	07db      	lsls	r3, r3, #31
 80108b6:	d501      	bpl.n	80108bc <usbd_edpt_close+0x54>
 80108b8:	be00      	bkpt	0x0000
 80108ba:	4770      	bx	lr
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	080110c1 	.word	0x080110c1
 80108c4:	24000344 	.word	0x24000344
 80108c8:	2400d280 	.word	0x2400d280

080108cc <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80108cc:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 80108ce:	4c0b      	ldr	r4, [pc, #44]	; (80108fc <tud_control_status+0x30>)
{
 80108d0:	460b      	mov	r3, r1
 80108d2:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 80108d4:	6808      	ldr	r0, [r1, #0]
 80108d6:	4622      	mov	r2, r4
 80108d8:	6849      	ldr	r1, [r1, #4]
 80108da:	c203      	stmia	r2!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80108dc:	f993 2000 	ldrsb.w	r2, [r3]
  _ctrl_xfer.buffer        = NULL;
 80108e0:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80108e2:	4660      	mov	r0, ip
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80108e4:	429a      	cmp	r2, r3
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80108e6:	461a      	mov	r2, r3
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 80108e8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80108ec:	bfac      	ite	ge
 80108ee:	2180      	movge	r1, #128	; 0x80
 80108f0:	4619      	movlt	r1, r3

  return _status_stage_xact(rhport, request);
}
 80108f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80108f6:	f7ff bf27 	b.w	8010748 <usbd_edpt_xfer>
 80108fa:	bf00      	nop
 80108fc:	2400d2bc 	.word	0x2400d2bc

08010900 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8010900:	b5f0      	push	{r4, r5, r6, r7, lr}
  _ctrl_xfer.request       = (*request);
 8010902:	4f2c      	ldr	r7, [pc, #176]	; (80109b4 <tud_control_xfer+0xb4>)
{
 8010904:	468c      	mov	ip, r1
 8010906:	4606      	mov	r6, r0
  _ctrl_xfer.request       = (*request);
 8010908:	6808      	ldr	r0, [r1, #0]
 801090a:	46be      	mov	lr, r7
 801090c:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 801090e:	60ba      	str	r2, [r7, #8]
{
 8010910:	b083      	sub	sp, #12
  _ctrl_xfer.request       = (*request);
 8010912:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8010916:	2100      	movs	r1, #0
 8010918:	81f9      	strh	r1, [r7, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 801091a:	f8bc 5006 	ldrh.w	r5, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801091e:	42ab      	cmp	r3, r5
 8010920:	bf28      	it	cs
 8010922:	462b      	movcs	r3, r5
 8010924:	81bb      	strh	r3, [r7, #12]

  if (request->wLength > 0U)
 8010926:	b18d      	cbz	r5, 801094c <tud_control_xfer+0x4c>
  {
    if(_ctrl_xfer.data_len > 0U)
 8010928:	b333      	cbz	r3, 8010978 <tud_control_xfer+0x78>
    {
      TU_ASSERT(buffer);
 801092a:	4614      	mov	r4, r2
 801092c:	b362      	cbz	r2, 8010988 <tud_control_xfer+0x88>
 801092e:	2b40      	cmp	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010930:	f997 2000 	ldrsb.w	r2, [r7]
 8010934:	bf28      	it	cs
 8010936:	2340      	movcs	r3, #64	; 0x40
 8010938:	2a00      	cmp	r2, #0
 801093a:	db2e      	blt.n	801099a <tud_control_xfer+0x9a>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 801093c:	4a1e      	ldr	r2, [pc, #120]	; (80109b8 <tud_control_xfer+0xb8>)
 801093e:	4630      	mov	r0, r6
 8010940:	f7ff ff02 	bl	8010748 <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8010944:	b178      	cbz	r0, 8010966 <tud_control_xfer+0x66>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8010946:	2001      	movs	r0, #1
}
 8010948:	b003      	add	sp, #12
 801094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801094c:	f99c 1000 	ldrsb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010950:	462b      	mov	r3, r5
 8010952:	462a      	mov	r2, r5
 8010954:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010956:	2900      	cmp	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010958:	bfac      	ite	ge
 801095a:	2180      	movge	r1, #128	; 0x80
 801095c:	2100      	movlt	r1, #0
 801095e:	f7ff fef3 	bl	8010748 <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8010962:	2800      	cmp	r0, #0
 8010964:	d1ef      	bne.n	8010946 <tud_control_xfer+0x46>
 8010966:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801096a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801096e:	07db      	lsls	r3, r3, #31
 8010970:	d510      	bpl.n	8010994 <tud_control_xfer+0x94>
 8010972:	be00      	bkpt	0x0000
}
 8010974:	b003      	add	sp, #12
 8010976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010978:	f997 1000 	ldrsb.w	r1, [r7]
 801097c:	461a      	mov	r2, r3
 801097e:	2900      	cmp	r1, #0
 8010980:	bfac      	ite	ge
 8010982:	4619      	movge	r1, r3
 8010984:	2180      	movlt	r1, #128	; 0x80
 8010986:	e7da      	b.n	801093e <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010988:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801098c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010990:	07da      	lsls	r2, r3, #31
 8010992:	d40c      	bmi.n	80109ae <tud_control_xfer+0xae>
 8010994:	2000      	movs	r0, #0
}
 8010996:	b003      	add	sp, #12
 8010998:	bdf0      	pop	{r4, r5, r6, r7, pc}
  memcpy(dest, src, count);
 801099a:	461a      	mov	r2, r3
 801099c:	4621      	mov	r1, r4
 801099e:	4806      	ldr	r0, [pc, #24]	; (80109b8 <tud_control_xfer+0xb8>)
 80109a0:	9301      	str	r3, [sp, #4]
 80109a2:	f000 fd9b 	bl	80114dc <memcpy>
    ep_addr = EDPT_CTRL_IN;
 80109a6:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80109a8:	4a03      	ldr	r2, [pc, #12]	; (80109b8 <tud_control_xfer+0xb8>)
 80109aa:	9b01      	ldr	r3, [sp, #4]
 80109ac:	e7c7      	b.n	801093e <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 80109ae:	be00      	bkpt	0x0000
 80109b0:	4620      	mov	r0, r4
 80109b2:	e7c9      	b.n	8010948 <tud_control_xfer+0x48>
 80109b4:	2400d2bc 	.word	0x2400d2bc
 80109b8:	2400d2d0 	.word	0x2400d2d0

080109bc <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 80109bc:	4b03      	ldr	r3, [pc, #12]	; (80109cc <usbd_control_reset+0x10>)
 80109be:	2200      	movs	r2, #0
 80109c0:	e9c3 2200 	strd	r2, r2, [r3]
 80109c4:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80109c8:	611a      	str	r2, [r3, #16]
}
 80109ca:	4770      	bx	lr
 80109cc:	2400d2bc 	.word	0x2400d2bc

080109d0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 80109d0:	4b01      	ldr	r3, [pc, #4]	; (80109d8 <usbd_control_set_complete_callback+0x8>)
 80109d2:	6118      	str	r0, [r3, #16]
}
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	2400d2bc 	.word	0x2400d2bc

080109dc <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80109dc:	b410      	push	{r4}
 80109de:	4602      	mov	r2, r0
  _ctrl_xfer.request       = (*request);
 80109e0:	4c05      	ldr	r4, [pc, #20]	; (80109f8 <usbd_control_set_request+0x1c>)
 80109e2:	6800      	ldr	r0, [r0, #0]
 80109e4:	4623      	mov	r3, r4
 80109e6:	6851      	ldr	r1, [r2, #4]
 80109e8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80109ea:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 80109ec:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 80109f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	2400d2bc 	.word	0x2400d2bc

080109fc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80109fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80109fe:	4c48      	ldr	r4, [pc, #288]	; (8010b20 <usbd_control_xfer_cb+0x124>)
 8010a00:	09c9      	lsrs	r1, r1, #7
{
 8010a02:	b083      	sub	sp, #12
 8010a04:	4606      	mov	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010a06:	7822      	ldrb	r2, [r4, #0]
{
 8010a08:	461f      	mov	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010a0a:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
 8010a0e:	d01a      	beq.n	8010a46 <usbd_control_xfer_cb+0x4a>
  {
    TU_ASSERT(0 == xferred_bytes);
 8010a10:	b14b      	cbz	r3, 8010a26 <usbd_control_xfer_cb+0x2a>
 8010a12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010a16:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010a1a:	07da      	lsls	r2, r3, #31
 8010a1c:	d465      	bmi.n	8010aea <usbd_control_xfer_cb+0xee>
 8010a1e:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8010a20:	4628      	mov	r0, r5
 8010a22:	b003      	add	sp, #12
 8010a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8010a26:	4b3f      	ldr	r3, [pc, #252]	; (8010b24 <usbd_control_xfer_cb+0x128>)
 8010a28:	b113      	cbz	r3, 8010a30 <usbd_control_xfer_cb+0x34>
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 8010a30:	6923      	ldr	r3, [r4, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d055      	beq.n	8010ae2 <usbd_control_xfer_cb+0xe6>
    return true;
 8010a36:	2501      	movs	r5, #1
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8010a38:	4a39      	ldr	r2, [pc, #228]	; (8010b20 <usbd_control_xfer_cb+0x124>)
 8010a3a:	2103      	movs	r1, #3
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	4798      	blx	r3
}
 8010a40:	4628      	mov	r0, r5
 8010a42:	b003      	add	sp, #12
 8010a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8010a46:	f994 2000 	ldrsb.w	r2, [r4]
 8010a4a:	2a00      	cmp	r2, #0
 8010a4c:	db06      	blt.n	8010a5c <usbd_control_xfer_cb+0x60>
    TU_VERIFY(_ctrl_xfer.buffer);
 8010a4e:	68a0      	ldr	r0, [r4, #8]
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d0e4      	beq.n	8010a1e <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8010a54:	461a      	mov	r2, r3
 8010a56:	4934      	ldr	r1, [pc, #208]	; (8010b28 <usbd_control_xfer_cb+0x12c>)
 8010a58:	f000 fd40 	bl	80114dc <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010a5c:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010a60:	88e5      	ldrh	r5, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010a62:	44bc      	add	ip, r7
  _ctrl_xfer.buffer += xferred_bytes;
 8010a64:	68a1      	ldr	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010a66:	fa1f fc8c 	uxth.w	ip, ip
  _ctrl_xfer.buffer += xferred_bytes;
 8010a6a:	4439      	add	r1, r7
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010a6c:	4565      	cmp	r5, ip
 8010a6e:	bf18      	it	ne
 8010a70:	2f3f      	cmpne	r7, #63	; 0x3f
  _ctrl_xfer.buffer += xferred_bytes;
 8010a72:	60a1      	str	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010a74:	f8a4 c00e 	strh.w	ip, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010a78:	bf94      	ite	ls
 8010a7a:	2501      	movls	r5, #1
 8010a7c:	2500      	movhi	r5, #0
 8010a7e:	d81b      	bhi.n	8010ab8 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
 8010a80:	6923      	ldr	r3, [r4, #16]
 8010a82:	b123      	cbz	r3, 8010a8e <usbd_control_xfer_cb+0x92>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8010a84:	4a26      	ldr	r2, [pc, #152]	; (8010b20 <usbd_control_xfer_cb+0x124>)
 8010a86:	2102      	movs	r1, #2
 8010a88:	4630      	mov	r0, r6
 8010a8a:	4798      	blx	r3
    if ( is_ok )
 8010a8c:	b378      	cbz	r0, 8010aee <usbd_control_xfer_cb+0xf2>
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010a8e:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010a90:	f994 2000 	ldrsb.w	r2, [r4]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010a94:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010a96:	429a      	cmp	r2, r3
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010a98:	461a      	mov	r2, r3
 8010a9a:	bfac      	ite	ge
 8010a9c:	2180      	movge	r1, #128	; 0x80
 8010a9e:	4619      	movlt	r1, r3
 8010aa0:	f7ff fe52 	bl	8010748 <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	b9e0      	cbnz	r0, 8010ae2 <usbd_control_xfer_cb+0xe6>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010aa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010aac:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ab0:	07db      	lsls	r3, r3, #31
 8010ab2:	d5b4      	bpl.n	8010a1e <usbd_control_xfer_cb+0x22>
 8010ab4:	be00      	bkpt	0x0000
 8010ab6:	e7b3      	b.n	8010a20 <usbd_control_xfer_cb+0x24>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010ab8:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010aba:	f994 0000 	ldrsb.w	r0, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010abe:	eba2 030c 	sub.w	r3, r2, ip
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	2b40      	cmp	r3, #64	; 0x40
 8010ac6:	bf28      	it	cs
 8010ac8:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010aca:	2800      	cmp	r0, #0
 8010acc:	db18      	blt.n	8010b00 <usbd_control_xfer_cb+0x104>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010ace:	4594      	cmp	ip, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8010ad0:	4629      	mov	r1, r5
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010ad2:	d023      	beq.n	8010b1c <usbd_control_xfer_cb+0x120>
 8010ad4:	4a14      	ldr	r2, [pc, #80]	; (8010b28 <usbd_control_xfer_cb+0x12c>)
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f7ff fe36 	bl	8010748 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010adc:	4605      	mov	r5, r0
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d0e2      	beq.n	8010aa8 <usbd_control_xfer_cb+0xac>
    return true;
 8010ae2:	2501      	movs	r5, #1
}
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	b003      	add	sp, #12
 8010ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(0 == xferred_bytes);
 8010aea:	be00      	bkpt	0x0000
 8010aec:	e797      	b.n	8010a1e <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8010aee:	4601      	mov	r1, r0
 8010af0:	4630      	mov	r0, r6
 8010af2:	f000 fb7f 	bl	80111f4 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8010af6:	2180      	movs	r1, #128	; 0x80
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fb7b 	bl	80111f4 <dcd_edpt_stall>
 8010afe:	e78f      	b.n	8010a20 <usbd_control_xfer_cb+0x24>
    if ( xact_len ) {
 8010b00:	4594      	cmp	ip, r2
 8010b02:	d008      	beq.n	8010b16 <usbd_control_xfer_cb+0x11a>
  memcpy(dest, src, count);
 8010b04:	461a      	mov	r2, r3
 8010b06:	4808      	ldr	r0, [pc, #32]	; (8010b28 <usbd_control_xfer_cb+0x12c>)
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	f000 fce7 	bl	80114dc <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010b0e:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010b10:	4a05      	ldr	r2, [pc, #20]	; (8010b28 <usbd_control_xfer_cb+0x12c>)
 8010b12:	9b01      	ldr	r3, [sp, #4]
 8010b14:	e7df      	b.n	8010ad6 <usbd_control_xfer_cb+0xda>
    ep_addr = EDPT_CTRL_IN;
 8010b16:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010b18:	462a      	mov	r2, r5
 8010b1a:	e7dc      	b.n	8010ad6 <usbd_control_xfer_cb+0xda>
 8010b1c:	462a      	mov	r2, r5
 8010b1e:	e7da      	b.n	8010ad6 <usbd_control_xfer_cb+0xda>
 8010b20:	2400d2bc 	.word	0x2400d2bc
 8010b24:	00000000 	.word	0x00000000
 8010b28:	2400d2d0 	.word	0x2400d2d0
 8010b2c:	00000000 	.word	0x00000000

08010b30 <dcd_set_address>:
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
}

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8010b30:	b410      	push	{r4}
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010b32:	4c1b      	ldr	r4, [pc, #108]	; (8010ba0 <dcd_set_address+0x70>)
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;
 8010b34:	f04f 0c00 	mov.w	ip, #0
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010b38:	4a1a      	ldr	r2, [pc, #104]	; (8010ba4 <dcd_set_address+0x74>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010b3a:	6823      	ldr	r3, [r4, #0]
  xfer->buffer      = buffer;
 8010b3c:	481a      	ldr	r0, [pc, #104]	; (8010ba8 <dcd_set_address+0x78>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010b3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010b42:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  // EP0 can only handle one packet
  if(epnum == 0) {
    ep0_pending[dir] = total_bytes;
 8010b46:	4b19      	ldr	r3, [pc, #100]	; (8010bac <dcd_set_address+0x7c>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010b48:	6021      	str	r1, [r4, #0]
    ep0_pending[dir] = total_bytes;
 8010b4a:	f8a3 c002 	strh.w	ip, [r3, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010b4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  xfer->total_len   = total_bytes;
 8010b52:	f8a0 c018 	strh.w	ip, [r0, #24]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010b56:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8010b58:	6813      	ldr	r3, [r2, #0]
 8010b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b5e:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010b60:	6813      	ldr	r3, [r2, #0]
 8010b62:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  xfer->buffer      = buffer;
 8010b66:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010b98 <dcd_set_address+0x68>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010b6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  xfer->buffer      = buffer;
 8010b6e:	ed80 7b04 	vstr	d7, [r0, #16]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010b72:	d002      	beq.n	8010b7a <dcd_set_address+0x4a>
}
 8010b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b78:	4770      	bx	lr
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010b7a:	7f03      	ldrb	r3, [r0, #28]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d1f9      	bne.n	8010b74 <dcd_set_address+0x44>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010b80:	68a1      	ldr	r1, [r4, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8010b82:	6813      	ldr	r3, [r2, #0]
 8010b84:	f411 7f80 	tst.w	r1, #256	; 0x100
 8010b88:	bf14      	ite	ne
 8010b8a:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8010b8e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8010b92:	430b      	orrs	r3, r1
 8010b94:	6013      	str	r3, [r2, #0]
}
 8010b96:	e7ed      	b.n	8010b74 <dcd_set_address+0x44>
	...
 8010ba0:	40040800 	.word	0x40040800
 8010ba4:	40040900 	.word	0x40040900
 8010ba8:	2400d318 	.word	0x2400d318
 8010bac:	2400d314 	.word	0x2400d314

08010bb0 <dcd_edpt_open>:
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8010bb0:	7888      	ldrb	r0, [r1, #2]
 8010bb2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  TU_ASSERT(epnum < EP_MAX);
 8010bb6:	2b08      	cmp	r3, #8
 8010bb8:	d87e      	bhi.n	8010cb8 <dcd_edpt_open+0x108>
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010bba:	4a4e      	ldr	r2, [pc, #312]	; (8010cf4 <dcd_edpt_open+0x144>)
{
 8010bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010bc0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8010bc4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8010bc8:	eb0e 1ed0 	add.w	lr, lr, r0, lsr #7
 8010bcc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
  if(dir == TUSB_DIR_OUT)
 8010bd0:	09c0      	lsrs	r0, r0, #7
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010bd2:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010bd6:	f10c 0203 	add.w	r2, ip, #3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010bda:	f8ae c00a 	strh.w	ip, [lr, #10]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010bde:	ea4f 06a2 	mov.w	r6, r2, asr #2
  xfer->interval = desc_edpt->bInterval;
 8010be2:	798c      	ldrb	r4, [r1, #6]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010be4:	ea4f 0292 	mov.w	r2, r2, lsr #2
  xfer->interval = desc_edpt->bInterval;
 8010be8:	f88e 400c 	strb.w	r4, [lr, #12]
  if(dir == TUSB_DIR_OUT)
 8010bec:	d03a      	beq.n	8010c64 <dcd_edpt_open+0xb4>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8010bee:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8010d04 <dcd_edpt_open+0x154>
 8010bf2:	4d41      	ldr	r5, [pc, #260]	; (8010cf8 <dcd_edpt_open+0x148>)
 8010bf4:	f8b8 7000 	ldrh.w	r7, [r8]
 8010bf8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8010bfa:	19b8      	adds	r0, r7, r6
 8010bfc:	eb00 0e04 	add.w	lr, r0, r4
 8010c00:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8010c04:	d863      	bhi.n	8010cce <dcd_edpt_open+0x11e>
    _allocated_fifo_words_tx += fifo_size;
 8010c06:	443a      	add	r2, r7
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010c08:	b280      	uxth	r0, r0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8010c0a:	78cc      	ldrb	r4, [r1, #3]
    _allocated_fifo_words_tx += fifo_size;
 8010c0c:	f8a8 2000 	strh.w	r2, [r8]
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010c10:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
 8010c14:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8010c18:	f004 0103 	and.w	r1, r4, #3
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010c1c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010c20:	eb05 0582 	add.w	r5, r5, r2, lsl #2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8010c24:	2901      	cmp	r1, #1
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8010c26:	ea4f 5283 	mov.w	r2, r3, lsl #22
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010c2a:	6068      	str	r0, [r5, #4]
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010c2c:	ea4f 1543 	mov.w	r5, r3, lsl #5
 8010c30:	4832      	ldr	r0, [pc, #200]	; (8010cfc <dcd_edpt_open+0x14c>)
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8010c32:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8010c36:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010c3a:	582a      	ldr	r2, [r5, r0]
 8010c3c:	ea4c 0202 	orr.w	r2, ip, r2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8010c40:	bf14      	ite	ne
 8010c42:	f04f 5c80 	movne.w	ip, #268435456	; 0x10000000
 8010c46:	f04f 0c00 	moveq.w	ip, #0
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010c4a:	430a      	orrs	r2, r1
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8010c4c:	492c      	ldr	r1, [pc, #176]	; (8010d00 <dcd_edpt_open+0x150>)
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010c4e:	ea42 020c 	orr.w	r2, r2, ip
 8010c52:	502a      	str	r2, [r5, r0]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8010c54:	2001      	movs	r0, #1
 8010c56:	69ca      	ldr	r2, [r1, #28]
 8010c58:	fa00 f303 	lsl.w	r3, r0, r3
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	61cb      	str	r3, [r1, #28]
}
 8010c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8010c64:	0052      	lsls	r2, r2, #1
    if (usb_otg->GRXFSIZ < sz)
 8010c66:	4c24      	ldr	r4, [pc, #144]	; (8010cf8 <dcd_edpt_open+0x148>)
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8010c68:	3221      	adds	r2, #33	; 0x21
    if (usb_otg->GRXFSIZ < sz)
 8010c6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010c6c:	4295      	cmp	r5, r2
 8010c6e:	d206      	bcs.n	8010c7e <dcd_edpt_open+0xce>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8010c70:	4d24      	ldr	r5, [pc, #144]	; (8010d04 <dcd_edpt_open+0x154>)
 8010c72:	882d      	ldrh	r5, [r5, #0]
 8010c74:	4415      	add	r5, r2
 8010c76:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010c7a:	dc32      	bgt.n	8010ce2 <dcd_edpt_open+0x132>
      usb_otg->GRXFSIZ = sz;
 8010c7c:	6262      	str	r2, [r4, #36]	; 0x24
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8010c7e:	78ca      	ldrb	r2, [r1, #3]
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010c80:	015d      	lsls	r5, r3, #5
 8010c82:	4821      	ldr	r0, [pc, #132]	; (8010d08 <dcd_edpt_open+0x158>)
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010c84:	3310      	adds	r3, #16
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8010c86:	f002 0103 	and.w	r1, r2, #3
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010c8a:	4c1d      	ldr	r4, [pc, #116]	; (8010d00 <dcd_edpt_open+0x150>)
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010c8c:	582e      	ldr	r6, [r5, r0]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8010c8e:	2901      	cmp	r1, #1
 8010c90:	bf14      	ite	ne
 8010c92:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8010c96:	2200      	moveq	r2, #0
 8010c98:	ea4c 0202 	orr.w	r2, ip, r2
 8010c9c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010ca0:	4332      	orrs	r2, r6
 8010ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010ca6:	502a      	str	r2, [r5, r0]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010ca8:	2001      	movs	r0, #1
 8010caa:	69e2      	ldr	r2, [r4, #28]
 8010cac:	fa00 f303 	lsl.w	r3, r0, r3
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	61e3      	str	r3, [r4, #28]
}
 8010cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_ASSERT(epnum < EP_MAX);
 8010cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010cbc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010cc0:	07d9      	lsls	r1, r3, #31
 8010cc2:	d502      	bpl.n	8010cca <dcd_edpt_open+0x11a>
 8010cc4:	be00      	bkpt	0x0000
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	4770      	bx	lr
 8010cca:	2000      	movs	r0, #0
}
 8010ccc:	4770      	bx	lr
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8010cce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010cd2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010cd6:	07db      	lsls	r3, r3, #31
 8010cd8:	d500      	bpl.n	8010cdc <dcd_edpt_open+0x12c>
 8010cda:	be00      	bkpt	0x0000
 8010cdc:	2000      	movs	r0, #0
}
 8010cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8010ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010ce6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010cea:	07da      	lsls	r2, r3, #31
 8010cec:	d5f6      	bpl.n	8010cdc <dcd_edpt_open+0x12c>
 8010cee:	be00      	bkpt	0x0000
 8010cf0:	e7b6      	b.n	8010c60 <dcd_edpt_open+0xb0>
 8010cf2:	bf00      	nop
 8010cf4:	2400d318 	.word	0x2400d318
 8010cf8:	40040000 	.word	0x40040000
 8010cfc:	40040900 	.word	0x40040900
 8010d00:	40040800 	.word	0x40040800
 8010d04:	2400d310 	.word	0x2400d310
 8010d08:	40040b00 	.word	0x40040b00

08010d0c <dcd_edpt_close_all>:
{
 8010d0c:	b430      	push	{r4, r5}
    out_ep[n].DOEPCTL = 0;
 8010d0e:	2300      	movs	r3, #0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d10:	4a23      	ldr	r2, [pc, #140]	; (8010da0 <dcd_edpt_close_all+0x94>)
    out_ep[n].DOEPCTL = 0;
 8010d12:	4824      	ldr	r0, [pc, #144]	; (8010da4 <dcd_edpt_close_all+0x98>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8010d14:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    in_ep[n].DIEPCTL = 0;
 8010d18:	4923      	ldr	r1, [pc, #140]	; (8010da8 <dcd_edpt_close_all+0x9c>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8010d1a:	4c24      	ldr	r4, [pc, #144]	; (8010dac <dcd_edpt_close_all+0xa0>)
    in_ep[n].DIEPCTL = 0;
 8010d1c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d20:	8553      	strh	r3, [r2, #42]	; 0x2a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d22:	8753      	strh	r3, [r2, #58]	; 0x3a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d24:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d28:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d2c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d30:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d34:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d38:	f8a2 309a 	strh.w	r3, [r2, #154]	; 0x9a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d3c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d40:	f8a2 30ba 	strh.w	r3, [r2, #186]	; 0xba
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d44:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d48:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d4c:	f8a2 30ea 	strh.w	r3, [r2, #234]	; 0xea
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d50:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8010d54:	f8a2 310a 	strh.w	r3, [r2, #266]	; 0x10a
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8010d58:	61e5      	str	r5, [r4, #28]
    out_ep[n].DOEPCTL = 0;
 8010d5a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    in_ep[n].DIEPCTL = 0;
 8010d5e:	620b      	str	r3, [r1, #32]
    out_ep[n].DOEPCTL = 0;
 8010d60:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    in_ep[n].DIEPCTL = 0;
 8010d64:	640b      	str	r3, [r1, #64]	; 0x40
    out_ep[n].DOEPCTL = 0;
 8010d66:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
    in_ep[n].DIEPCTL = 0;
 8010d6a:	660b      	str	r3, [r1, #96]	; 0x60
    out_ep[n].DOEPCTL = 0;
 8010d6c:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    in_ep[n].DIEPCTL = 0;
 8010d70:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    out_ep[n].DOEPCTL = 0;
 8010d74:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
    in_ep[n].DIEPCTL = 0;
 8010d78:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
    out_ep[n].DOEPCTL = 0;
 8010d7c:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
    in_ep[n].DIEPCTL = 0;
 8010d80:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
    out_ep[n].DOEPCTL = 0;
 8010d84:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
    in_ep[n].DIEPCTL = 0;
 8010d88:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
    out_ep[n].DOEPCTL = 0;
 8010d8c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  _allocated_fifo_words_tx = 16;
 8010d90:	4907      	ldr	r1, [pc, #28]	; (8010db0 <dcd_edpt_close_all+0xa4>)
    in_ep[n].DIEPCTL = 0;
 8010d92:	6003      	str	r3, [r0, #0]
  _allocated_fifo_words_tx = 16;
 8010d94:	2010      	movs	r0, #16
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8010d96:	f8a2 311a 	strh.w	r3, [r2, #282]	; 0x11a
  _allocated_fifo_words_tx = 16;
 8010d9a:	8008      	strh	r0, [r1, #0]
}
 8010d9c:	bc30      	pop	{r4, r5}
 8010d9e:	4770      	bx	lr
 8010da0:	2400d318 	.word	0x2400d318
 8010da4:	40040b00 	.word	0x40040b00
 8010da8:	40040900 	.word	0x40040900
 8010dac:	40040800 	.word	0x40040800
 8010db0:	2400d310 	.word	0x2400d310

08010db4 <dcd_edpt_xfer>:
{
 8010db4:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010db6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 8010dba:	4d69      	ldr	r5, [pc, #420]	; (8010f60 <dcd_edpt_xfer+0x1ac>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8010dbc:	09ce      	lsrs	r6, r1, #7
  xfer->ff          = NULL;
 8010dbe:	2700      	movs	r7, #0
  xfer->buffer      = buffer;
 8010dc0:	0060      	lsls	r0, r4, #1
 8010dc2:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8010dc6:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8010dca:	0109      	lsls	r1, r1, #4
  xfer->ff          = NULL;
 8010dcc:	6047      	str	r7, [r0, #4]
  xfer->buffer      = buffer;
 8010dce:	506a      	str	r2, [r5, r1]
  xfer->total_len   = total_bytes;
 8010dd0:	8103      	strh	r3, [r0, #8]
  if(epnum == 0) {
 8010dd2:	2c00      	cmp	r4, #0
 8010dd4:	d044      	beq.n	8010e60 <dcd_edpt_xfer+0xac>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
    return true;
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8010dd6:	8942      	ldrh	r2, [r0, #10]
 8010dd8:	fbb3 f1f2 	udiv	r1, r3, r2
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8010ddc:	fb02 3211 	mls	r2, r2, r1, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8010de0:	b289      	uxth	r1, r1

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8010de2:	b292      	uxth	r2, r2
 8010de4:	b9da      	cbnz	r2, 8010e1e <dcd_edpt_xfer+0x6a>
 8010de6:	b1d3      	cbz	r3, 8010e1e <dcd_edpt_xfer+0x6a>
  if(dir == TUSB_DIR_IN) {
 8010de8:	b9ee      	cbnz	r6, 8010e26 <dcd_edpt_xfer+0x72>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8010dea:	485e      	ldr	r0, [pc, #376]	; (8010f64 <dcd_edpt_xfer+0x1b0>)
 8010dec:	0166      	lsls	r6, r4, #5
 8010dee:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8010df2:	6917      	ldr	r7, [r2, #16]
 8010df4:	f007 4760 	and.w	r7, r7, #3758096384	; 0xe0000000
 8010df8:	6117      	str	r7, [r2, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8010dfa:	6917      	ldr	r7, [r2, #16]
 8010dfc:	433b      	orrs	r3, r7
 8010dfe:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 8010e02:	6113      	str	r3, [r2, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8010e04:	5833      	ldr	r3, [r6, r0]
 8010e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e0a:	5033      	str	r3, [r6, r0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010e0c:	5833      	ldr	r3, [r6, r0]
 8010e0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8010e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010e16:	d053      	beq.n	8010ec0 <dcd_edpt_xfer+0x10c>

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 8010e18:	2001      	movs	r0, #1
 8010e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8010e1c:	4770      	bx	lr
    num_packets++;
 8010e1e:	3101      	adds	r1, #1
 8010e20:	b289      	uxth	r1, r1
  if(dir == TUSB_DIR_IN) {
 8010e22:	2e00      	cmp	r6, #0
 8010e24:	d0e1      	beq.n	8010dea <dcd_edpt_xfer+0x36>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010e26:	4a50      	ldr	r2, [pc, #320]	; (8010f68 <dcd_edpt_xfer+0x1b4>)
 8010e28:	0160      	lsls	r0, r4, #5
 8010e2a:	ea43 41c1 	orr.w	r1, r3, r1, lsl #19
 8010e2e:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 8010e32:	6131      	str	r1, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8010e34:	5881      	ldr	r1, [r0, r2]
 8010e36:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8010e3a:	5081      	str	r1, [r0, r2]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010e3c:	5881      	ldr	r1, [r0, r2]
 8010e3e:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8010e42:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8010e46:	d04d      	beq.n	8010ee4 <dcd_edpt_xfer+0x130>
    if(total_bytes != 0) {
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d0e5      	beq.n	8010e18 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 8010e4c:	4a47      	ldr	r2, [pc, #284]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010e4e:	2301      	movs	r3, #1
}
 8010e50:	2001      	movs	r0, #1
      dev->DIEPEMPMSK |= (1 << epnum);
 8010e52:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010e54:	fa03 f404 	lsl.w	r4, r3, r4
 8010e58:	430c      	orrs	r4, r1
 8010e5a:	6354      	str	r4, [r2, #52]	; 0x34
}
 8010e5c:	bcf0      	pop	{r4, r5, r6, r7}
 8010e5e:	4770      	bx	lr
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8010e60:	eb05 1206 	add.w	r2, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 8010e64:	4942      	ldr	r1, [pc, #264]	; (8010f70 <dcd_edpt_xfer+0x1bc>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010e66:	8952      	ldrh	r2, [r2, #10]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	bf28      	it	cs
 8010e6c:	461a      	movcs	r2, r3
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 8010e74:	2e00      	cmp	r6, #0
 8010e76:	d149      	bne.n	8010f0c <dcd_edpt_xfer+0x158>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8010e78:	4b3a      	ldr	r3, [pc, #232]	; (8010f64 <dcd_edpt_xfer+0x1b0>)
 8010e7a:	6919      	ldr	r1, [r3, #16]
 8010e7c:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 8010e80:	6119      	str	r1, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8010e82:	6919      	ldr	r1, [r3, #16]
 8010e84:	430a      	orrs	r2, r1
 8010e86:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8010e8a:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8010e92:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8010e9a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8010e9e:	d1bb      	bne.n	8010e18 <dcd_edpt_xfer+0x64>
 8010ea0:	7b2a      	ldrb	r2, [r5, #12]
 8010ea2:	2a01      	cmp	r2, #1
 8010ea4:	d1b8      	bne.n	8010e18 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010ea6:	4a31      	ldr	r2, [pc, #196]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010ea8:	6891      	ldr	r1, [r2, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	f411 7f80 	tst.w	r1, #256	; 0x100
 8010eb0:	bf14      	ite	ne
 8010eb2:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8010eb6:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8010eba:	430a      	orrs	r2, r1
 8010ebc:	601a      	str	r2, [r3, #0]
 8010ebe:	e7ab      	b.n	8010e18 <dcd_edpt_xfer+0x64>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010ec0:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8010ec4:	7b23      	ldrb	r3, [r4, #12]
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d1a6      	bne.n	8010e18 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010eca:	4b28      	ldr	r3, [pc, #160]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010ecc:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8010ece:	5833      	ldr	r3, [r6, r0]
 8010ed0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010ed4:	bf14      	ite	ne
 8010ed6:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8010eda:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8010ede:	4313      	orrs	r3, r2
 8010ee0:	5033      	str	r3, [r6, r0]
 8010ee2:	e799      	b.n	8010e18 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010ee4:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8010ee8:	7f29      	ldrb	r1, [r5, #28]
 8010eea:	2901      	cmp	r1, #1
 8010eec:	d1ac      	bne.n	8010e48 <dcd_edpt_xfer+0x94>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010eee:	491f      	ldr	r1, [pc, #124]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010ef0:	6889      	ldr	r1, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8010ef2:	f411 7f80 	tst.w	r1, #256	; 0x100
 8010ef6:	5881      	ldr	r1, [r0, r2]
 8010ef8:	bf14      	ite	ne
 8010efa:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 8010efe:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 8010f02:	4329      	orrs	r1, r5
 8010f04:	5081      	str	r1, [r0, r2]
    if(total_bytes != 0) {
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d086      	beq.n	8010e18 <dcd_edpt_xfer+0x64>
 8010f0a:	e79f      	b.n	8010e4c <dcd_edpt_xfer+0x98>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010f0c:	4b16      	ldr	r3, [pc, #88]	; (8010f68 <dcd_edpt_xfer+0x1b4>)
 8010f0e:	f442 2100 	orr.w	r1, r2, #524288	; 0x80000
 8010f12:	6119      	str	r1, [r3, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8010f14:	6819      	ldr	r1, [r3, #0]
 8010f16:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8010f1a:	6019      	str	r1, [r3, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010f1c:	6819      	ldr	r1, [r3, #0]
 8010f1e:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8010f22:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8010f26:	d008      	beq.n	8010f3a <dcd_edpt_xfer+0x186>
    if(total_bytes != 0) {
 8010f28:	2a00      	cmp	r2, #0
 8010f2a:	f43f af75 	beq.w	8010e18 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 8010f2e:	4a0f      	ldr	r2, [pc, #60]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010f30:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010f32:	f043 0301 	orr.w	r3, r3, #1
 8010f36:	6353      	str	r3, [r2, #52]	; 0x34
 8010f38:	e76e      	b.n	8010e18 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010f3a:	7f29      	ldrb	r1, [r5, #28]
 8010f3c:	2901      	cmp	r1, #1
 8010f3e:	d1f3      	bne.n	8010f28 <dcd_edpt_xfer+0x174>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010f40:	490a      	ldr	r1, [pc, #40]	; (8010f6c <dcd_edpt_xfer+0x1b8>)
 8010f42:	6888      	ldr	r0, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8010f44:	6819      	ldr	r1, [r3, #0]
 8010f46:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010f4a:	bf14      	ite	ne
 8010f4c:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8010f50:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 8010f54:	4301      	orrs	r1, r0
 8010f56:	6019      	str	r1, [r3, #0]
    if(total_bytes != 0) {
 8010f58:	2a00      	cmp	r2, #0
 8010f5a:	f43f af5d 	beq.w	8010e18 <dcd_edpt_xfer+0x64>
 8010f5e:	e7e6      	b.n	8010f2e <dcd_edpt_xfer+0x17a>
 8010f60:	2400d318 	.word	0x2400d318
 8010f64:	40040b00 	.word	0x40040b00
 8010f68:	40040900 	.word	0x40040900
 8010f6c:	40040800 	.word	0x40040800
 8010f70:	2400d314 	.word	0x2400d314

08010f74 <dcd_edpt_xfer_fifo>:
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8010f74:	88d0      	ldrh	r0, [r2, #6]
 8010f76:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8010f7a:	2801      	cmp	r0, #1
 8010f7c:	d00a      	beq.n	8010f94 <dcd_edpt_xfer_fifo+0x20>
 8010f7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010f82:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8010f86:	f010 0001 	ands.w	r0, r0, #1
 8010f8a:	d002      	beq.n	8010f92 <dcd_edpt_xfer_fifo+0x1e>
 8010f8c:	be00      	bkpt	0x0000
 8010f8e:	2000      	movs	r0, #0
 8010f90:	4770      	bx	lr

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 8010f92:	4770      	bx	lr
{
 8010f94:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010f96:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = NULL;
 8010f9a:	4d44      	ldr	r5, [pc, #272]	; (80110ac <dcd_edpt_xfer_fifo+0x138>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8010f9c:	09ce      	lsrs	r6, r1, #7
 8010f9e:	2700      	movs	r7, #0
 8010fa0:	0060      	lsls	r0, r4, #1
 8010fa2:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8010fa6:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8010faa:	0109      	lsls	r1, r1, #4
  xfer->ff          = ff;
 8010fac:	6042      	str	r2, [r0, #4]
  xfer->buffer      = NULL;
 8010fae:	506f      	str	r7, [r5, r1]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8010fb0:	8941      	ldrh	r1, [r0, #10]
  xfer->total_len   = total_bytes;
 8010fb2:	8103      	strh	r3, [r0, #8]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8010fb4:	fbb3 f2f1 	udiv	r2, r3, r1
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8010fb8:	fb01 3112 	mls	r1, r1, r2, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8010fbc:	b292      	uxth	r2, r2
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 8010fbe:	b289      	uxth	r1, r1
 8010fc0:	bb61      	cbnz	r1, 801101c <dcd_edpt_xfer_fifo+0xa8>
 8010fc2:	b35b      	cbz	r3, 801101c <dcd_edpt_xfer_fifo+0xa8>
  if(epnum == 0) {
 8010fc4:	b95c      	cbnz	r4, 8010fde <dcd_edpt_xfer_fifo+0x6a>
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8010fc6:	483a      	ldr	r0, [pc, #232]	; (80110b0 <dcd_edpt_xfer_fifo+0x13c>)
 8010fc8:	eb05 1306 	add.w	r3, r5, r6, lsl #4
 8010fcc:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
 8010fd0:	895b      	ldrh	r3, [r3, #10]
 8010fd2:	428b      	cmp	r3, r1
 8010fd4:	bf28      	it	cs
 8010fd6:	460b      	movcs	r3, r1
    ep0_pending[dir] -= total_bytes;
 8010fd8:	1ac9      	subs	r1, r1, r3
 8010fda:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 8010fde:	bb06      	cbnz	r6, 8011022 <dcd_edpt_xfer_fifo+0xae>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8010fe0:	4e34      	ldr	r6, [pc, #208]	; (80110b4 <dcd_edpt_xfer_fifo+0x140>)
 8010fe2:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 8010fe6:	eb06 1044 	add.w	r0, r6, r4, lsl #5
 8010fea:	6901      	ldr	r1, [r0, #16]
 8010fec:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 8010ff0:	6101      	str	r1, [r0, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8010ff2:	6901      	ldr	r1, [r0, #16]
 8010ff4:	ea41 42c2 	orr.w	r2, r1, r2, lsl #19
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	6103      	str	r3, [r0, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8010ffc:	f85c 3006 	ldr.w	r3, [ip, r6]
 8011000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011004:	f84c 3006 	str.w	r3, [ip, r6]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011008:	f85c 3006 	ldr.w	r3, [ip, r6]
 801100c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011014:	d032      	beq.n	801107c <dcd_edpt_xfer_fifo+0x108>
  return true;
 8011016:	2001      	movs	r0, #1
}
 8011018:	bcf0      	pop	{r4, r5, r6, r7}
 801101a:	4770      	bx	lr
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 801101c:	3201      	adds	r2, #1
 801101e:	b292      	uxth	r2, r2
 8011020:	e7d0      	b.n	8010fc4 <dcd_edpt_xfer_fifo+0x50>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8011022:	4925      	ldr	r1, [pc, #148]	; (80110b8 <dcd_edpt_xfer_fifo+0x144>)
 8011024:	0160      	lsls	r0, r4, #5
 8011026:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 801102a:	eb01 1644 	add.w	r6, r1, r4, lsl #5
 801102e:	6132      	str	r2, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011030:	5842      	ldr	r2, [r0, r1]
 8011032:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011036:	5042      	str	r2, [r0, r1]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011038:	5842      	ldr	r2, [r0, r1]
 801103a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 801103e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8011042:	d009      	beq.n	8011058 <dcd_edpt_xfer_fifo+0xe4>
    if(total_bytes != 0) {
 8011044:	2b00      	cmp	r3, #0
 8011046:	d0e6      	beq.n	8011016 <dcd_edpt_xfer_fifo+0xa2>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011048:	4b1c      	ldr	r3, [pc, #112]	; (80110bc <dcd_edpt_xfer_fifo+0x148>)
 801104a:	2001      	movs	r0, #1
 801104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801104e:	fa00 f404 	lsl.w	r4, r0, r4
 8011052:	4314      	orrs	r4, r2
 8011054:	635c      	str	r4, [r3, #52]	; 0x34
 8011056:	e7df      	b.n	8011018 <dcd_edpt_xfer_fifo+0xa4>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011058:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 801105c:	7f2a      	ldrb	r2, [r5, #28]
 801105e:	2a01      	cmp	r2, #1
 8011060:	d1f0      	bne.n	8011044 <dcd_edpt_xfer_fifo+0xd0>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011062:	4a16      	ldr	r2, [pc, #88]	; (80110bc <dcd_edpt_xfer_fifo+0x148>)
 8011064:	6892      	ldr	r2, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8011066:	f412 7f80 	tst.w	r2, #256	; 0x100
 801106a:	5842      	ldr	r2, [r0, r1]
 801106c:	bf14      	ite	ne
 801106e:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 8011072:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 8011076:	432a      	orrs	r2, r5
 8011078:	5042      	str	r2, [r0, r1]
 801107a:	e7e3      	b.n	8011044 <dcd_edpt_xfer_fifo+0xd0>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801107c:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8011080:	7b20      	ldrb	r0, [r4, #12]
 8011082:	2801      	cmp	r0, #1
 8011084:	d1c7      	bne.n	8011016 <dcd_edpt_xfer_fifo+0xa2>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011086:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801108a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801108e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8011092:	f85c 3006 	ldr.w	r3, [ip, r6]
 8011096:	f412 7f80 	tst.w	r2, #256	; 0x100
 801109a:	bf14      	ite	ne
 801109c:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80110a0:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80110a4:	4313      	orrs	r3, r2
 80110a6:	f84c 3006 	str.w	r3, [ip, r6]
 80110aa:	e7b5      	b.n	8011018 <dcd_edpt_xfer_fifo+0xa4>
 80110ac:	2400d318 	.word	0x2400d318
 80110b0:	2400d314 	.word	0x2400d314
 80110b4:	40040b00 	.word	0x40040b00
 80110b8:	40040900 	.word	0x40040900
 80110bc:	40040800 	.word	0x40040800

080110c0 <dcd_edpt_close>:
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  if(dir == TUSB_DIR_IN) {
 80110c0:	09cb      	lsrs	r3, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80110c2:	f001 007f 	and.w	r0, r1, #127	; 0x7f

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80110c6:	b430      	push	{r4, r5}
  if(dir == TUSB_DIR_IN) {
 80110c8:	d132      	bne.n	8011130 <dcd_edpt_close+0x70>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80110ca:	b970      	cbnz	r0, 80110ea <dcd_edpt_close+0x2a>
 80110cc:	4b42      	ldr	r3, [pc, #264]	; (80111d8 <dcd_edpt_close+0x118>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	601a      	str	r2, [r3, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_disable(rhport, ep_addr, false);

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80110d2:	4b42      	ldr	r3, [pc, #264]	; (80111dc <dcd_edpt_close+0x11c>)
 80110d4:	2200      	movs	r2, #0
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
    _allocated_fifo_words_tx -= fifo_size;
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80110d6:	4942      	ldr	r1, [pc, #264]	; (80111e0 <dcd_edpt_close+0x120>)
 80110d8:	f04f 0c01 	mov.w	ip, #1
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80110dc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80110e0:	f881 c000 	strb.w	ip, [r1]
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80110e4:	8142      	strh	r2, [r0, #10]
  }
}
 80110e6:	bc30      	pop	{r4, r5}
 80110e8:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80110ea:	4c3b      	ldr	r4, [pc, #236]	; (80111d8 <dcd_edpt_close+0x118>)
 80110ec:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80110f0:	f85c 2004 	ldr.w	r2, [ip, r4]
 80110f4:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	dae8      	bge.n	80110ce <dcd_edpt_close+0xe>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80110fc:	4d39      	ldr	r5, [pc, #228]	; (80111e4 <dcd_edpt_close+0x124>)
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80110fe:	493a      	ldr	r1, [pc, #232]	; (80111e8 <dcd_edpt_close+0x128>)
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8011100:	686a      	ldr	r2, [r5, #4]
 8011102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011106:	606a      	str	r2, [r5, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8011108:	694a      	ldr	r2, [r1, #20]
 801110a:	0615      	lsls	r5, r2, #24
 801110c:	d5fc      	bpl.n	8011108 <dcd_edpt_close+0x48>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 801110e:	f85c 2004 	ldr.w	r2, [ip, r4]
 8011112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011116:	f84c 2004 	str.w	r2, [ip, r4]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 801111a:	689a      	ldr	r2, [r3, #8]
 801111c:	0792      	lsls	r2, r2, #30
 801111e:	d5fc      	bpl.n	801111a <dcd_edpt_close+0x5a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011120:	4a30      	ldr	r2, [pc, #192]	; (80111e4 <dcd_edpt_close+0x124>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8011122:	2102      	movs	r1, #2
 8011124:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011126:	6853      	ldr	r3, [r2, #4]
 8011128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801112c:	6053      	str	r3, [r2, #4]
 801112e:	e7d0      	b.n	80110d2 <dcd_edpt_close+0x12>
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011130:	2800      	cmp	r0, #0
 8011132:	d033      	beq.n	801119c <dcd_edpt_close+0xdc>
 8011134:	4a2d      	ldr	r2, [pc, #180]	; (80111ec <dcd_edpt_close+0x12c>)
 8011136:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801113a:	b204      	sxth	r4, r0
 801113c:	f85c 1002 	ldr.w	r1, [ip, r2]
 8011140:	eb02 1340 	add.w	r3, r2, r0, lsl #5
 8011144:	2900      	cmp	r1, #0
 8011146:	db31      	blt.n	80111ac <dcd_edpt_close+0xec>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011148:	6819      	ldr	r1, [r3, #0]
 801114a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801114e:	6019      	str	r1, [r3, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8011150:	4a25      	ldr	r2, [pc, #148]	; (80111e8 <dcd_edpt_close+0x128>)
 8011152:	6913      	ldr	r3, [r2, #16]
 8011154:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8011158:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 801115a:	6913      	ldr	r3, [r2, #16]
 801115c:	f043 0320 	orr.w	r3, r3, #32
 8011160:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8011162:	6913      	ldr	r3, [r2, #16]
 8011164:	f013 0320 	ands.w	r3, r3, #32
 8011168:	d1fb      	bne.n	8011162 <dcd_edpt_close+0xa2>
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 801116a:	491c      	ldr	r1, [pc, #112]	; (80111dc <dcd_edpt_close+0x11c>)
 801116c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011170:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8011174:	491e      	ldr	r1, [pc, #120]	; (80111f0 <dcd_edpt_close+0x130>)
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 8011176:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 801117a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 801117e:	8343      	strh	r3, [r0, #26]
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8011180:	880b      	ldrh	r3, [r1, #0]
 8011182:	b292      	uxth	r2, r2
 8011184:	f5c3 6080 	rsb	r0, r3, #1024	; 0x400
 8011188:	4282      	cmp	r2, r0
 801118a:	d00a      	beq.n	80111a2 <dcd_edpt_close+0xe2>
 801118c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011190:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011194:	07db      	lsls	r3, r3, #31
 8011196:	d5a6      	bpl.n	80110e6 <dcd_edpt_close+0x26>
 8011198:	be00      	bkpt	0x0000
 801119a:	e7a4      	b.n	80110e6 <dcd_edpt_close+0x26>
 801119c:	4b13      	ldr	r3, [pc, #76]	; (80111ec <dcd_edpt_close+0x12c>)
 801119e:	4604      	mov	r4, r0
 80111a0:	e7d2      	b.n	8011148 <dcd_edpt_close+0x88>
    _allocated_fifo_words_tx -= fifo_size;
 80111a2:	eba3 4314 	sub.w	r3, r3, r4, lsr #16
}
 80111a6:	bc30      	pop	{r4, r5}
    _allocated_fifo_words_tx -= fifo_size;
 80111a8:	800b      	strh	r3, [r1, #0]
}
 80111aa:	4770      	bx	lr
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80111ac:	f85c 1002 	ldr.w	r1, [ip, r2]
 80111b0:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80111b4:	f84c 1002 	str.w	r1, [ip, r2]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80111b8:	6899      	ldr	r1, [r3, #8]
 80111ba:	0649      	lsls	r1, r1, #25
 80111bc:	d5fc      	bpl.n	80111b8 <dcd_edpt_close+0xf8>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80111be:	f85c 1002 	ldr.w	r1, [ip, r2]
 80111c2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80111c6:	f84c 1002 	str.w	r1, [ip, r2]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80111ca:	6899      	ldr	r1, [r3, #8]
 80111cc:	078a      	lsls	r2, r1, #30
 80111ce:	d5fc      	bpl.n	80111ca <dcd_edpt_close+0x10a>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80111d0:	2202      	movs	r2, #2
 80111d2:	609a      	str	r2, [r3, #8]
 80111d4:	e7bc      	b.n	8011150 <dcd_edpt_close+0x90>
 80111d6:	bf00      	nop
 80111d8:	40040b00 	.word	0x40040b00
 80111dc:	2400d318 	.word	0x2400d318
 80111e0:	2400d312 	.word	0x2400d312
 80111e4:	40040800 	.word	0x40040800
 80111e8:	40040000 	.word	0x40040000
 80111ec:	40040900 	.word	0x40040900
 80111f0:	2400d310 	.word	0x2400d310

080111f4 <dcd_edpt_stall>:
  if(dir == TUSB_DIR_IN) {
 80111f4:	09ca      	lsrs	r2, r1, #7
 80111f6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80111fa:	d12b      	bne.n	8011254 <dcd_edpt_stall+0x60>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80111fc:	b92b      	cbnz	r3, 801120a <dcd_edpt_stall+0x16>
 80111fe:	4b30      	ldr	r3, [pc, #192]	; (80112c0 <dcd_edpt_stall+0xcc>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8011206:	601a      	str	r2, [r3, #0]
 8011208:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 801120a:	482d      	ldr	r0, [pc, #180]	; (80112c0 <dcd_edpt_stall+0xcc>)
 801120c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8011210:	f85c 2000 	ldr.w	r2, [ip, r0]
 8011214:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8011218:	2a00      	cmp	r2, #0
 801121a:	daf1      	bge.n	8011200 <dcd_edpt_stall+0xc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 801121c:	4929      	ldr	r1, [pc, #164]	; (80112c4 <dcd_edpt_stall+0xd0>)
 801121e:	684a      	ldr	r2, [r1, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8011220:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8011224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011228:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 801122c:	694a      	ldr	r2, [r1, #20]
 801122e:	0612      	lsls	r2, r2, #24
 8011230:	d5fc      	bpl.n	801122c <dcd_edpt_stall+0x38>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8011232:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011236:	4a24      	ldr	r2, [pc, #144]	; (80112c8 <dcd_edpt_stall+0xd4>)
 8011238:	430a      	orrs	r2, r1
 801123a:	f84c 2000 	str.w	r2, [ip, r0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 801123e:	689a      	ldr	r2, [r3, #8]
 8011240:	0792      	lsls	r2, r2, #30
 8011242:	d5fc      	bpl.n	801123e <dcd_edpt_stall+0x4a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011244:	4a1f      	ldr	r2, [pc, #124]	; (80112c4 <dcd_edpt_stall+0xd0>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8011246:	2102      	movs	r1, #2
 8011248:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 801124a:	6853      	ldr	r3, [r2, #4]
 801124c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011250:	6053      	str	r3, [r2, #4]
 8011252:	4770      	bx	lr

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8011254:	b410      	push	{r4}
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011256:	b1db      	cbz	r3, 8011290 <dcd_edpt_stall+0x9c>
 8011258:	481c      	ldr	r0, [pc, #112]	; (80112cc <dcd_edpt_stall+0xd8>)
 801125a:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 801125e:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011262:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8011266:	2900      	cmp	r1, #0
 8011268:	db14      	blt.n	8011294 <dcd_edpt_stall+0xa0>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 801126a:	6811      	ldr	r1, [r2, #0]
 801126c:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 8011270:	6011      	str	r1, [r2, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8011272:	4a17      	ldr	r2, [pc, #92]	; (80112d0 <dcd_edpt_stall+0xdc>)
 8011274:	6911      	ldr	r1, [r2, #16]
 8011276:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 801127a:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 801127c:	6913      	ldr	r3, [r2, #16]
 801127e:	f043 0320 	orr.w	r3, r3, #32
 8011282:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8011284:	6913      	ldr	r3, [r2, #16]
 8011286:	0699      	lsls	r1, r3, #26
 8011288:	d4fc      	bmi.n	8011284 <dcd_edpt_stall+0x90>
  dcd_edpt_disable(rhport, ep_addr, true);
}
 801128a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	4a0e      	ldr	r2, [pc, #56]	; (80112cc <dcd_edpt_stall+0xd8>)
 8011292:	e7ea      	b.n	801126a <dcd_edpt_stall+0x76>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011294:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011298:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801129c:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80112a0:	6891      	ldr	r1, [r2, #8]
 80112a2:	064c      	lsls	r4, r1, #25
 80112a4:	d5fc      	bpl.n	80112a0 <dcd_edpt_stall+0xac>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80112a6:	f85c 4000 	ldr.w	r4, [ip, r0]
 80112aa:	4907      	ldr	r1, [pc, #28]	; (80112c8 <dcd_edpt_stall+0xd4>)
 80112ac:	4321      	orrs	r1, r4
 80112ae:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80112b2:	6891      	ldr	r1, [r2, #8]
 80112b4:	0788      	lsls	r0, r1, #30
 80112b6:	d5fc      	bpl.n	80112b2 <dcd_edpt_stall+0xbe>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80112b8:	2102      	movs	r1, #2
 80112ba:	6091      	str	r1, [r2, #8]
 80112bc:	e7d9      	b.n	8011272 <dcd_edpt_stall+0x7e>
 80112be:	bf00      	nop
 80112c0:	40040b00 	.word	0x40040b00
 80112c4:	40040800 	.word	0x40040800
 80112c8:	40200000 	.word	0x40200000
 80112cc:	40040900 	.word	0x40040900
 80112d0:	40040000 	.word	0x40040000

080112d4 <dcd_edpt_clear_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 80112d4:	09ca      	lsrs	r2, r1, #7
 80112d6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80112da:	bf18      	it	ne
 80112dc:	4a06      	ldrne	r2, [pc, #24]	; (80112f8 <dcd_edpt_clear_stall+0x24>)
 80112de:	ea4f 1343 	mov.w	r3, r3, lsl #5
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80112e2:	bf08      	it	eq
 80112e4:	4a05      	ldreq	r2, [pc, #20]	; (80112fc <dcd_edpt_clear_stall+0x28>)
 80112e6:	5899      	ldr	r1, [r3, r2]
 80112e8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80112ec:	5099      	str	r1, [r3, r2]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80112ee:	5899      	ldr	r1, [r3, r2]
 80112f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80112f4:	5099      	str	r1, [r3, r2]
  }
}
 80112f6:	4770      	bx	lr
 80112f8:	40040900 	.word	0x40040900
 80112fc:	40040b00 	.word	0x40040b00

08011300 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011300:	7803      	ldrb	r3, [r0, #0]
{
 8011302:	4602      	mov	r2, r0
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011304:	f013 0001 	ands.w	r0, r3, #1
 8011308:	d10f      	bne.n	801132a <tu_edpt_claim+0x2a>
 801130a:	7813      	ldrb	r3, [r2, #0]
 801130c:	0759      	lsls	r1, r3, #29
 801130e:	d40b      	bmi.n	8011328 <tu_edpt_claim+0x28>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8011310:	7813      	ldrb	r3, [r2, #0]
 8011312:	f013 0001 	ands.w	r0, r3, #1
 8011316:	d108      	bne.n	801132a <tu_edpt_claim+0x2a>
 8011318:	7813      	ldrb	r3, [r2, #0]
 801131a:	075b      	lsls	r3, r3, #29
 801131c:	d407      	bmi.n	801132e <tu_edpt_claim+0x2e>
  if (available)
  {
    ep_state->claimed = 1;
 801131e:	7813      	ldrb	r3, [r2, #0]
 8011320:	2001      	movs	r0, #1
 8011322:	f043 0304 	orr.w	r3, r3, #4
 8011326:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8011328:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 801132a:	2000      	movs	r0, #0
 801132c:	4770      	bx	lr
 801132e:	4770      	bx	lr

08011330 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011330:	7803      	ldrb	r3, [r0, #0]
 8011332:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011336:	075b      	lsls	r3, r3, #29
 8011338:	d401      	bmi.n	801133e <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 801133a:	4610      	mov	r0, r2
 801133c:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 801133e:	7803      	ldrb	r3, [r0, #0]
 8011340:	f013 0101 	ands.w	r1, r3, #1
 8011344:	d105      	bne.n	8011352 <tu_edpt_release+0x22>
    ep_state->claimed = 0;
 8011346:	7803      	ldrb	r3, [r0, #0]
 8011348:	f361 0382 	bfi	r3, r1, #2, #1
 801134c:	7003      	strb	r3, [r0, #0]
}
 801134e:	4610      	mov	r0, r2
 8011350:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011352:	2200      	movs	r2, #0
}
 8011354:	4610      	mov	r0, r2
 8011356:	4770      	bx	lr

08011358 <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8011358:	78c3      	ldrb	r3, [r0, #3]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 801135a:	8882      	ldrh	r2, [r0, #4]
 801135c:	f003 0003 	and.w	r0, r3, #3
 8011360:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8011364:	2802      	cmp	r0, #2
 8011366:	d005      	beq.n	8011374 <tu_edpt_validate+0x1c>
 8011368:	2803      	cmp	r0, #3
 801136a:	d01b      	beq.n	80113a4 <tu_edpt_validate+0x4c>
 801136c:	2801      	cmp	r0, #1
 801136e:	d007      	beq.n	8011380 <tu_edpt_validate+0x28>
 8011370:	2000      	movs	r0, #0
 8011372:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8011374:	2902      	cmp	r1, #2
 8011376:	d01e      	beq.n	80113b6 <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8011378:	2a40      	cmp	r2, #64	; 0x40
 801137a:	d809      	bhi.n	8011390 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 801137c:	2001      	movs	r0, #1
}
 801137e:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8011380:	2902      	cmp	r1, #2
 8011382:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011386:	bf08      	it	eq
 8011388:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 801138c:	4293      	cmp	r3, r2
 801138e:	d2f6      	bcs.n	801137e <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 8011390:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011394:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8011398:	f010 0001 	ands.w	r0, r0, #1
 801139c:	d0ef      	beq.n	801137e <tu_edpt_validate+0x26>
 801139e:	be00      	bkpt	0x0000
 80113a0:	2000      	movs	r0, #0
 80113a2:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80113a4:	2902      	cmp	r1, #2
 80113a6:	bf0c      	ite	eq
 80113a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113ac:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d3ee      	bcc.n	8011390 <tu_edpt_validate+0x38>
  return true;
 80113b2:	2001      	movs	r0, #1
 80113b4:	e7e3      	b.n	801137e <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 80113b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80113ba:	d0df      	beq.n	801137c <tu_edpt_validate+0x24>
 80113bc:	e7e8      	b.n	8011390 <tu_edpt_validate+0x38>
 80113be:	bf00      	nop

080113c0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 80113c0:	440a      	add	r2, r1

  while( p_desc < desc_end )
 80113c2:	4291      	cmp	r1, r2
 80113c4:	d226      	bcs.n	8011414 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80113c6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80113ca:	f1bc 0f05 	cmp.w	ip, #5
 80113ce:	d005      	beq.n	80113dc <tu_edpt_bind_driver+0x1c>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 80113d0:	f891 c000 	ldrb.w	ip, [r1]
 80113d4:	4461      	add	r1, ip
  while( p_desc < desc_end )
 80113d6:	428a      	cmp	r2, r1
 80113d8:	d8f5      	bhi.n	80113c6 <tu_edpt_bind_driver+0x6>
 80113da:	4770      	bx	lr
{
 80113dc:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80113de:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80113e2:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 80113e6:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 80113ea:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80113ee:	f80e 300c 	strb.w	r3, [lr, ip]
 80113f2:	f891 c000 	ldrb.w	ip, [r1]
 80113f6:	4461      	add	r1, ip
  while( p_desc < desc_end )
 80113f8:	428a      	cmp	r2, r1
 80113fa:	d909      	bls.n	8011410 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80113fc:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011400:	f1bc 0f05 	cmp.w	ip, #5
 8011404:	d0eb      	beq.n	80113de <tu_edpt_bind_driver+0x1e>
 8011406:	f891 c000 	ldrb.w	ip, [r1]
 801140a:	4461      	add	r1, ip
  while( p_desc < desc_end )
 801140c:	428a      	cmp	r2, r1
 801140e:	d8f5      	bhi.n	80113fc <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8011410:	f85d fb04 	ldr.w	pc, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop

08011418 <abs>:
 8011418:	2800      	cmp	r0, #0
 801141a:	bfb8      	it	lt
 801141c:	4240      	neglt	r0, r0
 801141e:	4770      	bx	lr

08011420 <__assert_func>:
 8011420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011422:	4614      	mov	r4, r2
 8011424:	461a      	mov	r2, r3
 8011426:	4b09      	ldr	r3, [pc, #36]	; (801144c <__assert_func+0x2c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4605      	mov	r5, r0
 801142c:	68d8      	ldr	r0, [r3, #12]
 801142e:	b14c      	cbz	r4, 8011444 <__assert_func+0x24>
 8011430:	4b07      	ldr	r3, [pc, #28]	; (8011450 <__assert_func+0x30>)
 8011432:	9100      	str	r1, [sp, #0]
 8011434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011438:	4906      	ldr	r1, [pc, #24]	; (8011454 <__assert_func+0x34>)
 801143a:	462b      	mov	r3, r5
 801143c:	f000 f818 	bl	8011470 <fiprintf>
 8011440:	f001 f84e 	bl	80124e0 <abort>
 8011444:	4b04      	ldr	r3, [pc, #16]	; (8011458 <__assert_func+0x38>)
 8011446:	461c      	mov	r4, r3
 8011448:	e7f3      	b.n	8011432 <__assert_func+0x12>
 801144a:	bf00      	nop
 801144c:	24000348 	.word	0x24000348
 8011450:	08018ccc 	.word	0x08018ccc
 8011454:	08018cd9 	.word	0x08018cd9
 8011458:	08018d07 	.word	0x08018d07

0801145c <atoi>:
 801145c:	220a      	movs	r2, #10
 801145e:	2100      	movs	r1, #0
 8011460:	f000 bf74 	b.w	801234c <strtol>

08011464 <__errno>:
 8011464:	4b01      	ldr	r3, [pc, #4]	; (801146c <__errno+0x8>)
 8011466:	6818      	ldr	r0, [r3, #0]
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop
 801146c:	24000348 	.word	0x24000348

08011470 <fiprintf>:
 8011470:	b40e      	push	{r1, r2, r3}
 8011472:	b503      	push	{r0, r1, lr}
 8011474:	4601      	mov	r1, r0
 8011476:	ab03      	add	r3, sp, #12
 8011478:	4805      	ldr	r0, [pc, #20]	; (8011490 <fiprintf+0x20>)
 801147a:	f853 2b04 	ldr.w	r2, [r3], #4
 801147e:	6800      	ldr	r0, [r0, #0]
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	f000 f86b 	bl	801155c <_vfiprintf_r>
 8011486:	b002      	add	sp, #8
 8011488:	f85d eb04 	ldr.w	lr, [sp], #4
 801148c:	b003      	add	sp, #12
 801148e:	4770      	bx	lr
 8011490:	24000348 	.word	0x24000348

08011494 <__libc_init_array>:
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	4d0d      	ldr	r5, [pc, #52]	; (80114cc <__libc_init_array+0x38>)
 8011498:	4c0d      	ldr	r4, [pc, #52]	; (80114d0 <__libc_init_array+0x3c>)
 801149a:	1b64      	subs	r4, r4, r5
 801149c:	10a4      	asrs	r4, r4, #2
 801149e:	2600      	movs	r6, #0
 80114a0:	42a6      	cmp	r6, r4
 80114a2:	d109      	bne.n	80114b8 <__libc_init_array+0x24>
 80114a4:	4d0b      	ldr	r5, [pc, #44]	; (80114d4 <__libc_init_array+0x40>)
 80114a6:	4c0c      	ldr	r4, [pc, #48]	; (80114d8 <__libc_init_array+0x44>)
 80114a8:	f004 f9a0 	bl	80157ec <_init>
 80114ac:	1b64      	subs	r4, r4, r5
 80114ae:	10a4      	asrs	r4, r4, #2
 80114b0:	2600      	movs	r6, #0
 80114b2:	42a6      	cmp	r6, r4
 80114b4:	d105      	bne.n	80114c2 <__libc_init_array+0x2e>
 80114b6:	bd70      	pop	{r4, r5, r6, pc}
 80114b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80114bc:	4798      	blx	r3
 80114be:	3601      	adds	r6, #1
 80114c0:	e7ee      	b.n	80114a0 <__libc_init_array+0xc>
 80114c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80114c6:	4798      	blx	r3
 80114c8:	3601      	adds	r6, #1
 80114ca:	e7f2      	b.n	80114b2 <__libc_init_array+0x1e>
 80114cc:	0801a588 	.word	0x0801a588
 80114d0:	0801a588 	.word	0x0801a588
 80114d4:	0801a588 	.word	0x0801a588
 80114d8:	0801a58c 	.word	0x0801a58c

080114dc <memcpy>:
 80114dc:	440a      	add	r2, r1
 80114de:	4291      	cmp	r1, r2
 80114e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80114e4:	d100      	bne.n	80114e8 <memcpy+0xc>
 80114e6:	4770      	bx	lr
 80114e8:	b510      	push	{r4, lr}
 80114ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114f2:	4291      	cmp	r1, r2
 80114f4:	d1f9      	bne.n	80114ea <memcpy+0xe>
 80114f6:	bd10      	pop	{r4, pc}

080114f8 <memset>:
 80114f8:	4402      	add	r2, r0
 80114fa:	4603      	mov	r3, r0
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d100      	bne.n	8011502 <memset+0xa>
 8011500:	4770      	bx	lr
 8011502:	f803 1b01 	strb.w	r1, [r3], #1
 8011506:	e7f9      	b.n	80114fc <memset+0x4>

08011508 <__sfputc_r>:
 8011508:	6893      	ldr	r3, [r2, #8]
 801150a:	3b01      	subs	r3, #1
 801150c:	2b00      	cmp	r3, #0
 801150e:	b410      	push	{r4}
 8011510:	6093      	str	r3, [r2, #8]
 8011512:	da08      	bge.n	8011526 <__sfputc_r+0x1e>
 8011514:	6994      	ldr	r4, [r2, #24]
 8011516:	42a3      	cmp	r3, r4
 8011518:	db01      	blt.n	801151e <__sfputc_r+0x16>
 801151a:	290a      	cmp	r1, #10
 801151c:	d103      	bne.n	8011526 <__sfputc_r+0x1e>
 801151e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011522:	f000 bf1d 	b.w	8012360 <__swbuf_r>
 8011526:	6813      	ldr	r3, [r2, #0]
 8011528:	1c58      	adds	r0, r3, #1
 801152a:	6010      	str	r0, [r2, #0]
 801152c:	7019      	strb	r1, [r3, #0]
 801152e:	4608      	mov	r0, r1
 8011530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011534:	4770      	bx	lr

08011536 <__sfputs_r>:
 8011536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011538:	4606      	mov	r6, r0
 801153a:	460f      	mov	r7, r1
 801153c:	4614      	mov	r4, r2
 801153e:	18d5      	adds	r5, r2, r3
 8011540:	42ac      	cmp	r4, r5
 8011542:	d101      	bne.n	8011548 <__sfputs_r+0x12>
 8011544:	2000      	movs	r0, #0
 8011546:	e007      	b.n	8011558 <__sfputs_r+0x22>
 8011548:	f814 1b01 	ldrb.w	r1, [r4], #1
 801154c:	463a      	mov	r2, r7
 801154e:	4630      	mov	r0, r6
 8011550:	f7ff ffda 	bl	8011508 <__sfputc_r>
 8011554:	1c43      	adds	r3, r0, #1
 8011556:	d1f3      	bne.n	8011540 <__sfputs_r+0xa>
 8011558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801155c <_vfiprintf_r>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	460d      	mov	r5, r1
 8011562:	b09d      	sub	sp, #116	; 0x74
 8011564:	4614      	mov	r4, r2
 8011566:	4698      	mov	r8, r3
 8011568:	4606      	mov	r6, r0
 801156a:	b118      	cbz	r0, 8011574 <_vfiprintf_r+0x18>
 801156c:	6983      	ldr	r3, [r0, #24]
 801156e:	b90b      	cbnz	r3, 8011574 <_vfiprintf_r+0x18>
 8011570:	f001 fed2 	bl	8013318 <__sinit>
 8011574:	4b89      	ldr	r3, [pc, #548]	; (801179c <_vfiprintf_r+0x240>)
 8011576:	429d      	cmp	r5, r3
 8011578:	d11b      	bne.n	80115b2 <_vfiprintf_r+0x56>
 801157a:	6875      	ldr	r5, [r6, #4]
 801157c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801157e:	07d9      	lsls	r1, r3, #31
 8011580:	d405      	bmi.n	801158e <_vfiprintf_r+0x32>
 8011582:	89ab      	ldrh	r3, [r5, #12]
 8011584:	059a      	lsls	r2, r3, #22
 8011586:	d402      	bmi.n	801158e <_vfiprintf_r+0x32>
 8011588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801158a:	f001 ff68 	bl	801345e <__retarget_lock_acquire_recursive>
 801158e:	89ab      	ldrh	r3, [r5, #12]
 8011590:	071b      	lsls	r3, r3, #28
 8011592:	d501      	bpl.n	8011598 <_vfiprintf_r+0x3c>
 8011594:	692b      	ldr	r3, [r5, #16]
 8011596:	b9eb      	cbnz	r3, 80115d4 <_vfiprintf_r+0x78>
 8011598:	4629      	mov	r1, r5
 801159a:	4630      	mov	r0, r6
 801159c:	f000 ff32 	bl	8012404 <__swsetup_r>
 80115a0:	b1c0      	cbz	r0, 80115d4 <_vfiprintf_r+0x78>
 80115a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a4:	07dc      	lsls	r4, r3, #31
 80115a6:	d50e      	bpl.n	80115c6 <_vfiprintf_r+0x6a>
 80115a8:	f04f 30ff 	mov.w	r0, #4294967295
 80115ac:	b01d      	add	sp, #116	; 0x74
 80115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b2:	4b7b      	ldr	r3, [pc, #492]	; (80117a0 <_vfiprintf_r+0x244>)
 80115b4:	429d      	cmp	r5, r3
 80115b6:	d101      	bne.n	80115bc <_vfiprintf_r+0x60>
 80115b8:	68b5      	ldr	r5, [r6, #8]
 80115ba:	e7df      	b.n	801157c <_vfiprintf_r+0x20>
 80115bc:	4b79      	ldr	r3, [pc, #484]	; (80117a4 <_vfiprintf_r+0x248>)
 80115be:	429d      	cmp	r5, r3
 80115c0:	bf08      	it	eq
 80115c2:	68f5      	ldreq	r5, [r6, #12]
 80115c4:	e7da      	b.n	801157c <_vfiprintf_r+0x20>
 80115c6:	89ab      	ldrh	r3, [r5, #12]
 80115c8:	0598      	lsls	r0, r3, #22
 80115ca:	d4ed      	bmi.n	80115a8 <_vfiprintf_r+0x4c>
 80115cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ce:	f001 ff47 	bl	8013460 <__retarget_lock_release_recursive>
 80115d2:	e7e9      	b.n	80115a8 <_vfiprintf_r+0x4c>
 80115d4:	2300      	movs	r3, #0
 80115d6:	9309      	str	r3, [sp, #36]	; 0x24
 80115d8:	2320      	movs	r3, #32
 80115da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115de:	f8cd 800c 	str.w	r8, [sp, #12]
 80115e2:	2330      	movs	r3, #48	; 0x30
 80115e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80117a8 <_vfiprintf_r+0x24c>
 80115e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115ec:	f04f 0901 	mov.w	r9, #1
 80115f0:	4623      	mov	r3, r4
 80115f2:	469a      	mov	sl, r3
 80115f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115f8:	b10a      	cbz	r2, 80115fe <_vfiprintf_r+0xa2>
 80115fa:	2a25      	cmp	r2, #37	; 0x25
 80115fc:	d1f9      	bne.n	80115f2 <_vfiprintf_r+0x96>
 80115fe:	ebba 0b04 	subs.w	fp, sl, r4
 8011602:	d00b      	beq.n	801161c <_vfiprintf_r+0xc0>
 8011604:	465b      	mov	r3, fp
 8011606:	4622      	mov	r2, r4
 8011608:	4629      	mov	r1, r5
 801160a:	4630      	mov	r0, r6
 801160c:	f7ff ff93 	bl	8011536 <__sfputs_r>
 8011610:	3001      	adds	r0, #1
 8011612:	f000 80aa 	beq.w	801176a <_vfiprintf_r+0x20e>
 8011616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011618:	445a      	add	r2, fp
 801161a:	9209      	str	r2, [sp, #36]	; 0x24
 801161c:	f89a 3000 	ldrb.w	r3, [sl]
 8011620:	2b00      	cmp	r3, #0
 8011622:	f000 80a2 	beq.w	801176a <_vfiprintf_r+0x20e>
 8011626:	2300      	movs	r3, #0
 8011628:	f04f 32ff 	mov.w	r2, #4294967295
 801162c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011630:	f10a 0a01 	add.w	sl, sl, #1
 8011634:	9304      	str	r3, [sp, #16]
 8011636:	9307      	str	r3, [sp, #28]
 8011638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801163c:	931a      	str	r3, [sp, #104]	; 0x68
 801163e:	4654      	mov	r4, sl
 8011640:	2205      	movs	r2, #5
 8011642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011646:	4858      	ldr	r0, [pc, #352]	; (80117a8 <_vfiprintf_r+0x24c>)
 8011648:	f7ee feb2 	bl	80003b0 <memchr>
 801164c:	9a04      	ldr	r2, [sp, #16]
 801164e:	b9d8      	cbnz	r0, 8011688 <_vfiprintf_r+0x12c>
 8011650:	06d1      	lsls	r1, r2, #27
 8011652:	bf44      	itt	mi
 8011654:	2320      	movmi	r3, #32
 8011656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801165a:	0713      	lsls	r3, r2, #28
 801165c:	bf44      	itt	mi
 801165e:	232b      	movmi	r3, #43	; 0x2b
 8011660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011664:	f89a 3000 	ldrb.w	r3, [sl]
 8011668:	2b2a      	cmp	r3, #42	; 0x2a
 801166a:	d015      	beq.n	8011698 <_vfiprintf_r+0x13c>
 801166c:	9a07      	ldr	r2, [sp, #28]
 801166e:	4654      	mov	r4, sl
 8011670:	2000      	movs	r0, #0
 8011672:	f04f 0c0a 	mov.w	ip, #10
 8011676:	4621      	mov	r1, r4
 8011678:	f811 3b01 	ldrb.w	r3, [r1], #1
 801167c:	3b30      	subs	r3, #48	; 0x30
 801167e:	2b09      	cmp	r3, #9
 8011680:	d94e      	bls.n	8011720 <_vfiprintf_r+0x1c4>
 8011682:	b1b0      	cbz	r0, 80116b2 <_vfiprintf_r+0x156>
 8011684:	9207      	str	r2, [sp, #28]
 8011686:	e014      	b.n	80116b2 <_vfiprintf_r+0x156>
 8011688:	eba0 0308 	sub.w	r3, r0, r8
 801168c:	fa09 f303 	lsl.w	r3, r9, r3
 8011690:	4313      	orrs	r3, r2
 8011692:	9304      	str	r3, [sp, #16]
 8011694:	46a2      	mov	sl, r4
 8011696:	e7d2      	b.n	801163e <_vfiprintf_r+0xe2>
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	1d19      	adds	r1, r3, #4
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	9103      	str	r1, [sp, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bfbb      	ittet	lt
 80116a4:	425b      	neglt	r3, r3
 80116a6:	f042 0202 	orrlt.w	r2, r2, #2
 80116aa:	9307      	strge	r3, [sp, #28]
 80116ac:	9307      	strlt	r3, [sp, #28]
 80116ae:	bfb8      	it	lt
 80116b0:	9204      	strlt	r2, [sp, #16]
 80116b2:	7823      	ldrb	r3, [r4, #0]
 80116b4:	2b2e      	cmp	r3, #46	; 0x2e
 80116b6:	d10c      	bne.n	80116d2 <_vfiprintf_r+0x176>
 80116b8:	7863      	ldrb	r3, [r4, #1]
 80116ba:	2b2a      	cmp	r3, #42	; 0x2a
 80116bc:	d135      	bne.n	801172a <_vfiprintf_r+0x1ce>
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	1d1a      	adds	r2, r3, #4
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	9203      	str	r2, [sp, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	bfb8      	it	lt
 80116ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80116ce:	3402      	adds	r4, #2
 80116d0:	9305      	str	r3, [sp, #20]
 80116d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80117b8 <_vfiprintf_r+0x25c>
 80116d6:	7821      	ldrb	r1, [r4, #0]
 80116d8:	2203      	movs	r2, #3
 80116da:	4650      	mov	r0, sl
 80116dc:	f7ee fe68 	bl	80003b0 <memchr>
 80116e0:	b140      	cbz	r0, 80116f4 <_vfiprintf_r+0x198>
 80116e2:	2340      	movs	r3, #64	; 0x40
 80116e4:	eba0 000a 	sub.w	r0, r0, sl
 80116e8:	fa03 f000 	lsl.w	r0, r3, r0
 80116ec:	9b04      	ldr	r3, [sp, #16]
 80116ee:	4303      	orrs	r3, r0
 80116f0:	3401      	adds	r4, #1
 80116f2:	9304      	str	r3, [sp, #16]
 80116f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116f8:	482c      	ldr	r0, [pc, #176]	; (80117ac <_vfiprintf_r+0x250>)
 80116fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116fe:	2206      	movs	r2, #6
 8011700:	f7ee fe56 	bl	80003b0 <memchr>
 8011704:	2800      	cmp	r0, #0
 8011706:	d03f      	beq.n	8011788 <_vfiprintf_r+0x22c>
 8011708:	4b29      	ldr	r3, [pc, #164]	; (80117b0 <_vfiprintf_r+0x254>)
 801170a:	bb1b      	cbnz	r3, 8011754 <_vfiprintf_r+0x1f8>
 801170c:	9b03      	ldr	r3, [sp, #12]
 801170e:	3307      	adds	r3, #7
 8011710:	f023 0307 	bic.w	r3, r3, #7
 8011714:	3308      	adds	r3, #8
 8011716:	9303      	str	r3, [sp, #12]
 8011718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801171a:	443b      	add	r3, r7
 801171c:	9309      	str	r3, [sp, #36]	; 0x24
 801171e:	e767      	b.n	80115f0 <_vfiprintf_r+0x94>
 8011720:	fb0c 3202 	mla	r2, ip, r2, r3
 8011724:	460c      	mov	r4, r1
 8011726:	2001      	movs	r0, #1
 8011728:	e7a5      	b.n	8011676 <_vfiprintf_r+0x11a>
 801172a:	2300      	movs	r3, #0
 801172c:	3401      	adds	r4, #1
 801172e:	9305      	str	r3, [sp, #20]
 8011730:	4619      	mov	r1, r3
 8011732:	f04f 0c0a 	mov.w	ip, #10
 8011736:	4620      	mov	r0, r4
 8011738:	f810 2b01 	ldrb.w	r2, [r0], #1
 801173c:	3a30      	subs	r2, #48	; 0x30
 801173e:	2a09      	cmp	r2, #9
 8011740:	d903      	bls.n	801174a <_vfiprintf_r+0x1ee>
 8011742:	2b00      	cmp	r3, #0
 8011744:	d0c5      	beq.n	80116d2 <_vfiprintf_r+0x176>
 8011746:	9105      	str	r1, [sp, #20]
 8011748:	e7c3      	b.n	80116d2 <_vfiprintf_r+0x176>
 801174a:	fb0c 2101 	mla	r1, ip, r1, r2
 801174e:	4604      	mov	r4, r0
 8011750:	2301      	movs	r3, #1
 8011752:	e7f0      	b.n	8011736 <_vfiprintf_r+0x1da>
 8011754:	ab03      	add	r3, sp, #12
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	462a      	mov	r2, r5
 801175a:	4b16      	ldr	r3, [pc, #88]	; (80117b4 <_vfiprintf_r+0x258>)
 801175c:	a904      	add	r1, sp, #16
 801175e:	4630      	mov	r0, r6
 8011760:	f000 f8be 	bl	80118e0 <_printf_float>
 8011764:	4607      	mov	r7, r0
 8011766:	1c78      	adds	r0, r7, #1
 8011768:	d1d6      	bne.n	8011718 <_vfiprintf_r+0x1bc>
 801176a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801176c:	07d9      	lsls	r1, r3, #31
 801176e:	d405      	bmi.n	801177c <_vfiprintf_r+0x220>
 8011770:	89ab      	ldrh	r3, [r5, #12]
 8011772:	059a      	lsls	r2, r3, #22
 8011774:	d402      	bmi.n	801177c <_vfiprintf_r+0x220>
 8011776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011778:	f001 fe72 	bl	8013460 <__retarget_lock_release_recursive>
 801177c:	89ab      	ldrh	r3, [r5, #12]
 801177e:	065b      	lsls	r3, r3, #25
 8011780:	f53f af12 	bmi.w	80115a8 <_vfiprintf_r+0x4c>
 8011784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011786:	e711      	b.n	80115ac <_vfiprintf_r+0x50>
 8011788:	ab03      	add	r3, sp, #12
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	462a      	mov	r2, r5
 801178e:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <_vfiprintf_r+0x258>)
 8011790:	a904      	add	r1, sp, #16
 8011792:	4630      	mov	r0, r6
 8011794:	f000 fb30 	bl	8011df8 <_printf_i>
 8011798:	e7e4      	b.n	8011764 <_vfiprintf_r+0x208>
 801179a:	bf00      	nop
 801179c:	08018fc0 	.word	0x08018fc0
 80117a0:	08018fe0 	.word	0x08018fe0
 80117a4:	08018fa0 	.word	0x08018fa0
 80117a8:	08018e10 	.word	0x08018e10
 80117ac:	08018e1a 	.word	0x08018e1a
 80117b0:	080118e1 	.word	0x080118e1
 80117b4:	08011537 	.word	0x08011537
 80117b8:	08018e16 	.word	0x08018e16

080117bc <__cvt>:
 80117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117be:	ed2d 8b02 	vpush	{d8}
 80117c2:	eeb0 8b40 	vmov.f64	d8, d0
 80117c6:	b085      	sub	sp, #20
 80117c8:	4617      	mov	r7, r2
 80117ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80117cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80117ce:	ee18 2a90 	vmov	r2, s17
 80117d2:	f025 0520 	bic.w	r5, r5, #32
 80117d6:	2a00      	cmp	r2, #0
 80117d8:	bfb6      	itet	lt
 80117da:	222d      	movlt	r2, #45	; 0x2d
 80117dc:	2200      	movge	r2, #0
 80117de:	eeb1 8b40 	vneglt.f64	d8, d0
 80117e2:	2d46      	cmp	r5, #70	; 0x46
 80117e4:	460c      	mov	r4, r1
 80117e6:	701a      	strb	r2, [r3, #0]
 80117e8:	d004      	beq.n	80117f4 <__cvt+0x38>
 80117ea:	2d45      	cmp	r5, #69	; 0x45
 80117ec:	d100      	bne.n	80117f0 <__cvt+0x34>
 80117ee:	3401      	adds	r4, #1
 80117f0:	2102      	movs	r1, #2
 80117f2:	e000      	b.n	80117f6 <__cvt+0x3a>
 80117f4:	2103      	movs	r1, #3
 80117f6:	ab03      	add	r3, sp, #12
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	ab02      	add	r3, sp, #8
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	4622      	mov	r2, r4
 8011800:	4633      	mov	r3, r6
 8011802:	eeb0 0b48 	vmov.f64	d0, d8
 8011806:	f000 feff 	bl	8012608 <_dtoa_r>
 801180a:	2d47      	cmp	r5, #71	; 0x47
 801180c:	d101      	bne.n	8011812 <__cvt+0x56>
 801180e:	07fb      	lsls	r3, r7, #31
 8011810:	d51a      	bpl.n	8011848 <__cvt+0x8c>
 8011812:	2d46      	cmp	r5, #70	; 0x46
 8011814:	eb00 0204 	add.w	r2, r0, r4
 8011818:	d10c      	bne.n	8011834 <__cvt+0x78>
 801181a:	7803      	ldrb	r3, [r0, #0]
 801181c:	2b30      	cmp	r3, #48	; 0x30
 801181e:	d107      	bne.n	8011830 <__cvt+0x74>
 8011820:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011828:	bf1c      	itt	ne
 801182a:	f1c4 0401 	rsbne	r4, r4, #1
 801182e:	6034      	strne	r4, [r6, #0]
 8011830:	6833      	ldr	r3, [r6, #0]
 8011832:	441a      	add	r2, r3
 8011834:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183c:	bf08      	it	eq
 801183e:	9203      	streq	r2, [sp, #12]
 8011840:	2130      	movs	r1, #48	; 0x30
 8011842:	9b03      	ldr	r3, [sp, #12]
 8011844:	4293      	cmp	r3, r2
 8011846:	d307      	bcc.n	8011858 <__cvt+0x9c>
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801184c:	1a1b      	subs	r3, r3, r0
 801184e:	6013      	str	r3, [r2, #0]
 8011850:	b005      	add	sp, #20
 8011852:	ecbd 8b02 	vpop	{d8}
 8011856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011858:	1c5c      	adds	r4, r3, #1
 801185a:	9403      	str	r4, [sp, #12]
 801185c:	7019      	strb	r1, [r3, #0]
 801185e:	e7f0      	b.n	8011842 <__cvt+0x86>

08011860 <__exponent>:
 8011860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011862:	4603      	mov	r3, r0
 8011864:	2900      	cmp	r1, #0
 8011866:	bfb8      	it	lt
 8011868:	4249      	neglt	r1, r1
 801186a:	f803 2b02 	strb.w	r2, [r3], #2
 801186e:	bfb4      	ite	lt
 8011870:	222d      	movlt	r2, #45	; 0x2d
 8011872:	222b      	movge	r2, #43	; 0x2b
 8011874:	2909      	cmp	r1, #9
 8011876:	7042      	strb	r2, [r0, #1]
 8011878:	dd2a      	ble.n	80118d0 <__exponent+0x70>
 801187a:	f10d 0407 	add.w	r4, sp, #7
 801187e:	46a4      	mov	ip, r4
 8011880:	270a      	movs	r7, #10
 8011882:	46a6      	mov	lr, r4
 8011884:	460a      	mov	r2, r1
 8011886:	fb91 f6f7 	sdiv	r6, r1, r7
 801188a:	fb07 1516 	mls	r5, r7, r6, r1
 801188e:	3530      	adds	r5, #48	; 0x30
 8011890:	2a63      	cmp	r2, #99	; 0x63
 8011892:	f104 34ff 	add.w	r4, r4, #4294967295
 8011896:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801189a:	4631      	mov	r1, r6
 801189c:	dcf1      	bgt.n	8011882 <__exponent+0x22>
 801189e:	3130      	adds	r1, #48	; 0x30
 80118a0:	f1ae 0502 	sub.w	r5, lr, #2
 80118a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80118a8:	1c44      	adds	r4, r0, #1
 80118aa:	4629      	mov	r1, r5
 80118ac:	4561      	cmp	r1, ip
 80118ae:	d30a      	bcc.n	80118c6 <__exponent+0x66>
 80118b0:	f10d 0209 	add.w	r2, sp, #9
 80118b4:	eba2 020e 	sub.w	r2, r2, lr
 80118b8:	4565      	cmp	r5, ip
 80118ba:	bf88      	it	hi
 80118bc:	2200      	movhi	r2, #0
 80118be:	4413      	add	r3, r2
 80118c0:	1a18      	subs	r0, r3, r0
 80118c2:	b003      	add	sp, #12
 80118c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80118ce:	e7ed      	b.n	80118ac <__exponent+0x4c>
 80118d0:	2330      	movs	r3, #48	; 0x30
 80118d2:	3130      	adds	r1, #48	; 0x30
 80118d4:	7083      	strb	r3, [r0, #2]
 80118d6:	70c1      	strb	r1, [r0, #3]
 80118d8:	1d03      	adds	r3, r0, #4
 80118da:	e7f1      	b.n	80118c0 <__exponent+0x60>
 80118dc:	0000      	movs	r0, r0
	...

080118e0 <_printf_float>:
 80118e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e4:	b08b      	sub	sp, #44	; 0x2c
 80118e6:	460c      	mov	r4, r1
 80118e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80118ec:	4616      	mov	r6, r2
 80118ee:	461f      	mov	r7, r3
 80118f0:	4605      	mov	r5, r0
 80118f2:	f001 fdaf 	bl	8013454 <_localeconv_r>
 80118f6:	f8d0 b000 	ldr.w	fp, [r0]
 80118fa:	4658      	mov	r0, fp
 80118fc:	f7ee fd50 	bl	80003a0 <strlen>
 8011900:	2300      	movs	r3, #0
 8011902:	9308      	str	r3, [sp, #32]
 8011904:	f8d8 3000 	ldr.w	r3, [r8]
 8011908:	f894 9018 	ldrb.w	r9, [r4, #24]
 801190c:	6822      	ldr	r2, [r4, #0]
 801190e:	3307      	adds	r3, #7
 8011910:	f023 0307 	bic.w	r3, r3, #7
 8011914:	f103 0108 	add.w	r1, r3, #8
 8011918:	f8c8 1000 	str.w	r1, [r8]
 801191c:	4682      	mov	sl, r0
 801191e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011922:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011926:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011b88 <_printf_float+0x2a8>
 801192a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801192e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011932:	eeb4 6b47 	vcmp.f64	d6, d7
 8011936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193a:	dd24      	ble.n	8011986 <_printf_float+0xa6>
 801193c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	d502      	bpl.n	801194c <_printf_float+0x6c>
 8011946:	232d      	movs	r3, #45	; 0x2d
 8011948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801194c:	4b90      	ldr	r3, [pc, #576]	; (8011b90 <_printf_float+0x2b0>)
 801194e:	4891      	ldr	r0, [pc, #580]	; (8011b94 <_printf_float+0x2b4>)
 8011950:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011954:	bf94      	ite	ls
 8011956:	4698      	movls	r8, r3
 8011958:	4680      	movhi	r8, r0
 801195a:	2303      	movs	r3, #3
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	f022 0204 	bic.w	r2, r2, #4
 8011962:	2300      	movs	r3, #0
 8011964:	6022      	str	r2, [r4, #0]
 8011966:	9304      	str	r3, [sp, #16]
 8011968:	9700      	str	r7, [sp, #0]
 801196a:	4633      	mov	r3, r6
 801196c:	aa09      	add	r2, sp, #36	; 0x24
 801196e:	4621      	mov	r1, r4
 8011970:	4628      	mov	r0, r5
 8011972:	f000 f9d3 	bl	8011d1c <_printf_common>
 8011976:	3001      	adds	r0, #1
 8011978:	f040 808a 	bne.w	8011a90 <_printf_float+0x1b0>
 801197c:	f04f 30ff 	mov.w	r0, #4294967295
 8011980:	b00b      	add	sp, #44	; 0x2c
 8011982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011986:	eeb4 0b40 	vcmp.f64	d0, d0
 801198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198e:	d709      	bvc.n	80119a4 <_printf_float+0xc4>
 8011990:	ee10 3a90 	vmov	r3, s1
 8011994:	2b00      	cmp	r3, #0
 8011996:	bfbc      	itt	lt
 8011998:	232d      	movlt	r3, #45	; 0x2d
 801199a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801199e:	487e      	ldr	r0, [pc, #504]	; (8011b98 <_printf_float+0x2b8>)
 80119a0:	4b7e      	ldr	r3, [pc, #504]	; (8011b9c <_printf_float+0x2bc>)
 80119a2:	e7d5      	b.n	8011950 <_printf_float+0x70>
 80119a4:	6863      	ldr	r3, [r4, #4]
 80119a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80119aa:	9104      	str	r1, [sp, #16]
 80119ac:	1c59      	adds	r1, r3, #1
 80119ae:	d13c      	bne.n	8011a2a <_printf_float+0x14a>
 80119b0:	2306      	movs	r3, #6
 80119b2:	6063      	str	r3, [r4, #4]
 80119b4:	2300      	movs	r3, #0
 80119b6:	9303      	str	r3, [sp, #12]
 80119b8:	ab08      	add	r3, sp, #32
 80119ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80119be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80119c2:	ab07      	add	r3, sp, #28
 80119c4:	6861      	ldr	r1, [r4, #4]
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	6022      	str	r2, [r4, #0]
 80119ca:	f10d 031b 	add.w	r3, sp, #27
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7ff fef4 	bl	80117bc <__cvt>
 80119d4:	9b04      	ldr	r3, [sp, #16]
 80119d6:	9907      	ldr	r1, [sp, #28]
 80119d8:	2b47      	cmp	r3, #71	; 0x47
 80119da:	4680      	mov	r8, r0
 80119dc:	d108      	bne.n	80119f0 <_printf_float+0x110>
 80119de:	1cc8      	adds	r0, r1, #3
 80119e0:	db02      	blt.n	80119e8 <_printf_float+0x108>
 80119e2:	6863      	ldr	r3, [r4, #4]
 80119e4:	4299      	cmp	r1, r3
 80119e6:	dd41      	ble.n	8011a6c <_printf_float+0x18c>
 80119e8:	f1a9 0902 	sub.w	r9, r9, #2
 80119ec:	fa5f f989 	uxtb.w	r9, r9
 80119f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119f4:	d820      	bhi.n	8011a38 <_printf_float+0x158>
 80119f6:	3901      	subs	r1, #1
 80119f8:	464a      	mov	r2, r9
 80119fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119fe:	9107      	str	r1, [sp, #28]
 8011a00:	f7ff ff2e 	bl	8011860 <__exponent>
 8011a04:	9a08      	ldr	r2, [sp, #32]
 8011a06:	9004      	str	r0, [sp, #16]
 8011a08:	1813      	adds	r3, r2, r0
 8011a0a:	2a01      	cmp	r2, #1
 8011a0c:	6123      	str	r3, [r4, #16]
 8011a0e:	dc02      	bgt.n	8011a16 <_printf_float+0x136>
 8011a10:	6822      	ldr	r2, [r4, #0]
 8011a12:	07d2      	lsls	r2, r2, #31
 8011a14:	d501      	bpl.n	8011a1a <_printf_float+0x13a>
 8011a16:	3301      	adds	r3, #1
 8011a18:	6123      	str	r3, [r4, #16]
 8011a1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0a2      	beq.n	8011968 <_printf_float+0x88>
 8011a22:	232d      	movs	r3, #45	; 0x2d
 8011a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a28:	e79e      	b.n	8011968 <_printf_float+0x88>
 8011a2a:	9904      	ldr	r1, [sp, #16]
 8011a2c:	2947      	cmp	r1, #71	; 0x47
 8011a2e:	d1c1      	bne.n	80119b4 <_printf_float+0xd4>
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1bf      	bne.n	80119b4 <_printf_float+0xd4>
 8011a34:	2301      	movs	r3, #1
 8011a36:	e7bc      	b.n	80119b2 <_printf_float+0xd2>
 8011a38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011a3c:	d118      	bne.n	8011a70 <_printf_float+0x190>
 8011a3e:	2900      	cmp	r1, #0
 8011a40:	6863      	ldr	r3, [r4, #4]
 8011a42:	dd0b      	ble.n	8011a5c <_printf_float+0x17c>
 8011a44:	6121      	str	r1, [r4, #16]
 8011a46:	b913      	cbnz	r3, 8011a4e <_printf_float+0x16e>
 8011a48:	6822      	ldr	r2, [r4, #0]
 8011a4a:	07d0      	lsls	r0, r2, #31
 8011a4c:	d502      	bpl.n	8011a54 <_printf_float+0x174>
 8011a4e:	3301      	adds	r3, #1
 8011a50:	440b      	add	r3, r1
 8011a52:	6123      	str	r3, [r4, #16]
 8011a54:	2300      	movs	r3, #0
 8011a56:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a58:	9304      	str	r3, [sp, #16]
 8011a5a:	e7de      	b.n	8011a1a <_printf_float+0x13a>
 8011a5c:	b913      	cbnz	r3, 8011a64 <_printf_float+0x184>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	07d2      	lsls	r2, r2, #31
 8011a62:	d501      	bpl.n	8011a68 <_printf_float+0x188>
 8011a64:	3302      	adds	r3, #2
 8011a66:	e7f4      	b.n	8011a52 <_printf_float+0x172>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e7f2      	b.n	8011a52 <_printf_float+0x172>
 8011a6c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011a70:	9b08      	ldr	r3, [sp, #32]
 8011a72:	4299      	cmp	r1, r3
 8011a74:	db05      	blt.n	8011a82 <_printf_float+0x1a2>
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	6121      	str	r1, [r4, #16]
 8011a7a:	07d8      	lsls	r0, r3, #31
 8011a7c:	d5ea      	bpl.n	8011a54 <_printf_float+0x174>
 8011a7e:	1c4b      	adds	r3, r1, #1
 8011a80:	e7e7      	b.n	8011a52 <_printf_float+0x172>
 8011a82:	2900      	cmp	r1, #0
 8011a84:	bfd4      	ite	le
 8011a86:	f1c1 0202 	rsble	r2, r1, #2
 8011a8a:	2201      	movgt	r2, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	e7e0      	b.n	8011a52 <_printf_float+0x172>
 8011a90:	6823      	ldr	r3, [r4, #0]
 8011a92:	055a      	lsls	r2, r3, #21
 8011a94:	d407      	bmi.n	8011aa6 <_printf_float+0x1c6>
 8011a96:	6923      	ldr	r3, [r4, #16]
 8011a98:	4642      	mov	r2, r8
 8011a9a:	4631      	mov	r1, r6
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	47b8      	blx	r7
 8011aa0:	3001      	adds	r0, #1
 8011aa2:	d12a      	bne.n	8011afa <_printf_float+0x21a>
 8011aa4:	e76a      	b.n	801197c <_printf_float+0x9c>
 8011aa6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011aaa:	f240 80e2 	bls.w	8011c72 <_printf_float+0x392>
 8011aae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aba:	d133      	bne.n	8011b24 <_printf_float+0x244>
 8011abc:	4a38      	ldr	r2, [pc, #224]	; (8011ba0 <_printf_float+0x2c0>)
 8011abe:	2301      	movs	r3, #1
 8011ac0:	4631      	mov	r1, r6
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	47b8      	blx	r7
 8011ac6:	3001      	adds	r0, #1
 8011ac8:	f43f af58 	beq.w	801197c <_printf_float+0x9c>
 8011acc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	db02      	blt.n	8011ada <_printf_float+0x1fa>
 8011ad4:	6823      	ldr	r3, [r4, #0]
 8011ad6:	07d8      	lsls	r0, r3, #31
 8011ad8:	d50f      	bpl.n	8011afa <_printf_float+0x21a>
 8011ada:	4653      	mov	r3, sl
 8011adc:	465a      	mov	r2, fp
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b8      	blx	r7
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f43f af49 	beq.w	801197c <_printf_float+0x9c>
 8011aea:	f04f 0800 	mov.w	r8, #0
 8011aee:	f104 091a 	add.w	r9, r4, #26
 8011af2:	9b08      	ldr	r3, [sp, #32]
 8011af4:	3b01      	subs	r3, #1
 8011af6:	4543      	cmp	r3, r8
 8011af8:	dc09      	bgt.n	8011b0e <_printf_float+0x22e>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	079b      	lsls	r3, r3, #30
 8011afe:	f100 8108 	bmi.w	8011d12 <_printf_float+0x432>
 8011b02:	68e0      	ldr	r0, [r4, #12]
 8011b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b06:	4298      	cmp	r0, r3
 8011b08:	bfb8      	it	lt
 8011b0a:	4618      	movlt	r0, r3
 8011b0c:	e738      	b.n	8011980 <_printf_float+0xa0>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	464a      	mov	r2, r9
 8011b12:	4631      	mov	r1, r6
 8011b14:	4628      	mov	r0, r5
 8011b16:	47b8      	blx	r7
 8011b18:	3001      	adds	r0, #1
 8011b1a:	f43f af2f 	beq.w	801197c <_printf_float+0x9c>
 8011b1e:	f108 0801 	add.w	r8, r8, #1
 8011b22:	e7e6      	b.n	8011af2 <_printf_float+0x212>
 8011b24:	9b07      	ldr	r3, [sp, #28]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	dc3c      	bgt.n	8011ba4 <_printf_float+0x2c4>
 8011b2a:	4a1d      	ldr	r2, [pc, #116]	; (8011ba0 <_printf_float+0x2c0>)
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	4631      	mov	r1, r6
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b8      	blx	r7
 8011b34:	3001      	adds	r0, #1
 8011b36:	f43f af21 	beq.w	801197c <_printf_float+0x9c>
 8011b3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	d102      	bne.n	8011b48 <_printf_float+0x268>
 8011b42:	6823      	ldr	r3, [r4, #0]
 8011b44:	07d9      	lsls	r1, r3, #31
 8011b46:	d5d8      	bpl.n	8011afa <_printf_float+0x21a>
 8011b48:	4653      	mov	r3, sl
 8011b4a:	465a      	mov	r2, fp
 8011b4c:	4631      	mov	r1, r6
 8011b4e:	4628      	mov	r0, r5
 8011b50:	47b8      	blx	r7
 8011b52:	3001      	adds	r0, #1
 8011b54:	f43f af12 	beq.w	801197c <_printf_float+0x9c>
 8011b58:	f04f 0900 	mov.w	r9, #0
 8011b5c:	f104 0a1a 	add.w	sl, r4, #26
 8011b60:	9b07      	ldr	r3, [sp, #28]
 8011b62:	425b      	negs	r3, r3
 8011b64:	454b      	cmp	r3, r9
 8011b66:	dc01      	bgt.n	8011b6c <_printf_float+0x28c>
 8011b68:	9b08      	ldr	r3, [sp, #32]
 8011b6a:	e795      	b.n	8011a98 <_printf_float+0x1b8>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	4652      	mov	r2, sl
 8011b70:	4631      	mov	r1, r6
 8011b72:	4628      	mov	r0, r5
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	f43f af00 	beq.w	801197c <_printf_float+0x9c>
 8011b7c:	f109 0901 	add.w	r9, r9, #1
 8011b80:	e7ee      	b.n	8011b60 <_printf_float+0x280>
 8011b82:	bf00      	nop
 8011b84:	f3af 8000 	nop.w
 8011b88:	ffffffff 	.word	0xffffffff
 8011b8c:	7fefffff 	.word	0x7fefffff
 8011b90:	08018e21 	.word	0x08018e21
 8011b94:	08018e25 	.word	0x08018e25
 8011b98:	08018e2d 	.word	0x08018e2d
 8011b9c:	08018e29 	.word	0x08018e29
 8011ba0:	08018e31 	.word	0x08018e31
 8011ba4:	9a08      	ldr	r2, [sp, #32]
 8011ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	bfa8      	it	ge
 8011bac:	461a      	movge	r2, r3
 8011bae:	2a00      	cmp	r2, #0
 8011bb0:	4691      	mov	r9, r2
 8011bb2:	dc38      	bgt.n	8011c26 <_printf_float+0x346>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	9305      	str	r3, [sp, #20]
 8011bb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bbc:	f104 021a 	add.w	r2, r4, #26
 8011bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011bc2:	9905      	ldr	r1, [sp, #20]
 8011bc4:	9304      	str	r3, [sp, #16]
 8011bc6:	eba3 0309 	sub.w	r3, r3, r9
 8011bca:	428b      	cmp	r3, r1
 8011bcc:	dc33      	bgt.n	8011c36 <_printf_float+0x356>
 8011bce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	db3c      	blt.n	8011c50 <_printf_float+0x370>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	07da      	lsls	r2, r3, #31
 8011bda:	d439      	bmi.n	8011c50 <_printf_float+0x370>
 8011bdc:	9b08      	ldr	r3, [sp, #32]
 8011bde:	9a04      	ldr	r2, [sp, #16]
 8011be0:	9907      	ldr	r1, [sp, #28]
 8011be2:	1a9a      	subs	r2, r3, r2
 8011be4:	eba3 0901 	sub.w	r9, r3, r1
 8011be8:	4591      	cmp	r9, r2
 8011bea:	bfa8      	it	ge
 8011bec:	4691      	movge	r9, r2
 8011bee:	f1b9 0f00 	cmp.w	r9, #0
 8011bf2:	dc35      	bgt.n	8011c60 <_printf_float+0x380>
 8011bf4:	f04f 0800 	mov.w	r8, #0
 8011bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bfc:	f104 0a1a 	add.w	sl, r4, #26
 8011c00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011c04:	1a9b      	subs	r3, r3, r2
 8011c06:	eba3 0309 	sub.w	r3, r3, r9
 8011c0a:	4543      	cmp	r3, r8
 8011c0c:	f77f af75 	ble.w	8011afa <_printf_float+0x21a>
 8011c10:	2301      	movs	r3, #1
 8011c12:	4652      	mov	r2, sl
 8011c14:	4631      	mov	r1, r6
 8011c16:	4628      	mov	r0, r5
 8011c18:	47b8      	blx	r7
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	f43f aeae 	beq.w	801197c <_printf_float+0x9c>
 8011c20:	f108 0801 	add.w	r8, r8, #1
 8011c24:	e7ec      	b.n	8011c00 <_printf_float+0x320>
 8011c26:	4613      	mov	r3, r2
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4642      	mov	r2, r8
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	47b8      	blx	r7
 8011c30:	3001      	adds	r0, #1
 8011c32:	d1bf      	bne.n	8011bb4 <_printf_float+0x2d4>
 8011c34:	e6a2      	b.n	801197c <_printf_float+0x9c>
 8011c36:	2301      	movs	r3, #1
 8011c38:	4631      	mov	r1, r6
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	9204      	str	r2, [sp, #16]
 8011c3e:	47b8      	blx	r7
 8011c40:	3001      	adds	r0, #1
 8011c42:	f43f ae9b 	beq.w	801197c <_printf_float+0x9c>
 8011c46:	9b05      	ldr	r3, [sp, #20]
 8011c48:	9a04      	ldr	r2, [sp, #16]
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	9305      	str	r3, [sp, #20]
 8011c4e:	e7b7      	b.n	8011bc0 <_printf_float+0x2e0>
 8011c50:	4653      	mov	r3, sl
 8011c52:	465a      	mov	r2, fp
 8011c54:	4631      	mov	r1, r6
 8011c56:	4628      	mov	r0, r5
 8011c58:	47b8      	blx	r7
 8011c5a:	3001      	adds	r0, #1
 8011c5c:	d1be      	bne.n	8011bdc <_printf_float+0x2fc>
 8011c5e:	e68d      	b.n	801197c <_printf_float+0x9c>
 8011c60:	9a04      	ldr	r2, [sp, #16]
 8011c62:	464b      	mov	r3, r9
 8011c64:	4442      	add	r2, r8
 8011c66:	4631      	mov	r1, r6
 8011c68:	4628      	mov	r0, r5
 8011c6a:	47b8      	blx	r7
 8011c6c:	3001      	adds	r0, #1
 8011c6e:	d1c1      	bne.n	8011bf4 <_printf_float+0x314>
 8011c70:	e684      	b.n	801197c <_printf_float+0x9c>
 8011c72:	9a08      	ldr	r2, [sp, #32]
 8011c74:	2a01      	cmp	r2, #1
 8011c76:	dc01      	bgt.n	8011c7c <_printf_float+0x39c>
 8011c78:	07db      	lsls	r3, r3, #31
 8011c7a:	d537      	bpl.n	8011cec <_printf_float+0x40c>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	4642      	mov	r2, r8
 8011c80:	4631      	mov	r1, r6
 8011c82:	4628      	mov	r0, r5
 8011c84:	47b8      	blx	r7
 8011c86:	3001      	adds	r0, #1
 8011c88:	f43f ae78 	beq.w	801197c <_printf_float+0x9c>
 8011c8c:	4653      	mov	r3, sl
 8011c8e:	465a      	mov	r2, fp
 8011c90:	4631      	mov	r1, r6
 8011c92:	4628      	mov	r0, r5
 8011c94:	47b8      	blx	r7
 8011c96:	3001      	adds	r0, #1
 8011c98:	f43f ae70 	beq.w	801197c <_printf_float+0x9c>
 8011c9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011ca0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	d01b      	beq.n	8011ce2 <_printf_float+0x402>
 8011caa:	9b08      	ldr	r3, [sp, #32]
 8011cac:	f108 0201 	add.w	r2, r8, #1
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b8      	blx	r7
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d10e      	bne.n	8011cda <_printf_float+0x3fa>
 8011cbc:	e65e      	b.n	801197c <_printf_float+0x9c>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	464a      	mov	r2, r9
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	47b8      	blx	r7
 8011cc8:	3001      	adds	r0, #1
 8011cca:	f43f ae57 	beq.w	801197c <_printf_float+0x9c>
 8011cce:	f108 0801 	add.w	r8, r8, #1
 8011cd2:	9b08      	ldr	r3, [sp, #32]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	4543      	cmp	r3, r8
 8011cd8:	dcf1      	bgt.n	8011cbe <_printf_float+0x3de>
 8011cda:	9b04      	ldr	r3, [sp, #16]
 8011cdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ce0:	e6db      	b.n	8011a9a <_printf_float+0x1ba>
 8011ce2:	f04f 0800 	mov.w	r8, #0
 8011ce6:	f104 091a 	add.w	r9, r4, #26
 8011cea:	e7f2      	b.n	8011cd2 <_printf_float+0x3f2>
 8011cec:	2301      	movs	r3, #1
 8011cee:	4642      	mov	r2, r8
 8011cf0:	e7df      	b.n	8011cb2 <_printf_float+0x3d2>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	464a      	mov	r2, r9
 8011cf6:	4631      	mov	r1, r6
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	47b8      	blx	r7
 8011cfc:	3001      	adds	r0, #1
 8011cfe:	f43f ae3d 	beq.w	801197c <_printf_float+0x9c>
 8011d02:	f108 0801 	add.w	r8, r8, #1
 8011d06:	68e3      	ldr	r3, [r4, #12]
 8011d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d0a:	1a5b      	subs	r3, r3, r1
 8011d0c:	4543      	cmp	r3, r8
 8011d0e:	dcf0      	bgt.n	8011cf2 <_printf_float+0x412>
 8011d10:	e6f7      	b.n	8011b02 <_printf_float+0x222>
 8011d12:	f04f 0800 	mov.w	r8, #0
 8011d16:	f104 0919 	add.w	r9, r4, #25
 8011d1a:	e7f4      	b.n	8011d06 <_printf_float+0x426>

08011d1c <_printf_common>:
 8011d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d20:	4616      	mov	r6, r2
 8011d22:	4699      	mov	r9, r3
 8011d24:	688a      	ldr	r2, [r1, #8]
 8011d26:	690b      	ldr	r3, [r1, #16]
 8011d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	bfb8      	it	lt
 8011d30:	4613      	movlt	r3, r2
 8011d32:	6033      	str	r3, [r6, #0]
 8011d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d38:	4607      	mov	r7, r0
 8011d3a:	460c      	mov	r4, r1
 8011d3c:	b10a      	cbz	r2, 8011d42 <_printf_common+0x26>
 8011d3e:	3301      	adds	r3, #1
 8011d40:	6033      	str	r3, [r6, #0]
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	0699      	lsls	r1, r3, #26
 8011d46:	bf42      	ittt	mi
 8011d48:	6833      	ldrmi	r3, [r6, #0]
 8011d4a:	3302      	addmi	r3, #2
 8011d4c:	6033      	strmi	r3, [r6, #0]
 8011d4e:	6825      	ldr	r5, [r4, #0]
 8011d50:	f015 0506 	ands.w	r5, r5, #6
 8011d54:	d106      	bne.n	8011d64 <_printf_common+0x48>
 8011d56:	f104 0a19 	add.w	sl, r4, #25
 8011d5a:	68e3      	ldr	r3, [r4, #12]
 8011d5c:	6832      	ldr	r2, [r6, #0]
 8011d5e:	1a9b      	subs	r3, r3, r2
 8011d60:	42ab      	cmp	r3, r5
 8011d62:	dc26      	bgt.n	8011db2 <_printf_common+0x96>
 8011d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d68:	1e13      	subs	r3, r2, #0
 8011d6a:	6822      	ldr	r2, [r4, #0]
 8011d6c:	bf18      	it	ne
 8011d6e:	2301      	movne	r3, #1
 8011d70:	0692      	lsls	r2, r2, #26
 8011d72:	d42b      	bmi.n	8011dcc <_printf_common+0xb0>
 8011d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d78:	4649      	mov	r1, r9
 8011d7a:	4638      	mov	r0, r7
 8011d7c:	47c0      	blx	r8
 8011d7e:	3001      	adds	r0, #1
 8011d80:	d01e      	beq.n	8011dc0 <_printf_common+0xa4>
 8011d82:	6823      	ldr	r3, [r4, #0]
 8011d84:	68e5      	ldr	r5, [r4, #12]
 8011d86:	6832      	ldr	r2, [r6, #0]
 8011d88:	f003 0306 	and.w	r3, r3, #6
 8011d8c:	2b04      	cmp	r3, #4
 8011d8e:	bf08      	it	eq
 8011d90:	1aad      	subeq	r5, r5, r2
 8011d92:	68a3      	ldr	r3, [r4, #8]
 8011d94:	6922      	ldr	r2, [r4, #16]
 8011d96:	bf0c      	ite	eq
 8011d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d9c:	2500      	movne	r5, #0
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	bfc4      	itt	gt
 8011da2:	1a9b      	subgt	r3, r3, r2
 8011da4:	18ed      	addgt	r5, r5, r3
 8011da6:	2600      	movs	r6, #0
 8011da8:	341a      	adds	r4, #26
 8011daa:	42b5      	cmp	r5, r6
 8011dac:	d11a      	bne.n	8011de4 <_printf_common+0xc8>
 8011dae:	2000      	movs	r0, #0
 8011db0:	e008      	b.n	8011dc4 <_printf_common+0xa8>
 8011db2:	2301      	movs	r3, #1
 8011db4:	4652      	mov	r2, sl
 8011db6:	4649      	mov	r1, r9
 8011db8:	4638      	mov	r0, r7
 8011dba:	47c0      	blx	r8
 8011dbc:	3001      	adds	r0, #1
 8011dbe:	d103      	bne.n	8011dc8 <_printf_common+0xac>
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dc8:	3501      	adds	r5, #1
 8011dca:	e7c6      	b.n	8011d5a <_printf_common+0x3e>
 8011dcc:	18e1      	adds	r1, r4, r3
 8011dce:	1c5a      	adds	r2, r3, #1
 8011dd0:	2030      	movs	r0, #48	; 0x30
 8011dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dd6:	4422      	add	r2, r4
 8011dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011de0:	3302      	adds	r3, #2
 8011de2:	e7c7      	b.n	8011d74 <_printf_common+0x58>
 8011de4:	2301      	movs	r3, #1
 8011de6:	4622      	mov	r2, r4
 8011de8:	4649      	mov	r1, r9
 8011dea:	4638      	mov	r0, r7
 8011dec:	47c0      	blx	r8
 8011dee:	3001      	adds	r0, #1
 8011df0:	d0e6      	beq.n	8011dc0 <_printf_common+0xa4>
 8011df2:	3601      	adds	r6, #1
 8011df4:	e7d9      	b.n	8011daa <_printf_common+0x8e>
	...

08011df8 <_printf_i>:
 8011df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dfc:	7e0f      	ldrb	r7, [r1, #24]
 8011dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e00:	2f78      	cmp	r7, #120	; 0x78
 8011e02:	4691      	mov	r9, r2
 8011e04:	4680      	mov	r8, r0
 8011e06:	460c      	mov	r4, r1
 8011e08:	469a      	mov	sl, r3
 8011e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e0e:	d807      	bhi.n	8011e20 <_printf_i+0x28>
 8011e10:	2f62      	cmp	r7, #98	; 0x62
 8011e12:	d80a      	bhi.n	8011e2a <_printf_i+0x32>
 8011e14:	2f00      	cmp	r7, #0
 8011e16:	f000 80d8 	beq.w	8011fca <_printf_i+0x1d2>
 8011e1a:	2f58      	cmp	r7, #88	; 0x58
 8011e1c:	f000 80a3 	beq.w	8011f66 <_printf_i+0x16e>
 8011e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e28:	e03a      	b.n	8011ea0 <_printf_i+0xa8>
 8011e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e2e:	2b15      	cmp	r3, #21
 8011e30:	d8f6      	bhi.n	8011e20 <_printf_i+0x28>
 8011e32:	a101      	add	r1, pc, #4	; (adr r1, 8011e38 <_printf_i+0x40>)
 8011e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e38:	08011e91 	.word	0x08011e91
 8011e3c:	08011ea5 	.word	0x08011ea5
 8011e40:	08011e21 	.word	0x08011e21
 8011e44:	08011e21 	.word	0x08011e21
 8011e48:	08011e21 	.word	0x08011e21
 8011e4c:	08011e21 	.word	0x08011e21
 8011e50:	08011ea5 	.word	0x08011ea5
 8011e54:	08011e21 	.word	0x08011e21
 8011e58:	08011e21 	.word	0x08011e21
 8011e5c:	08011e21 	.word	0x08011e21
 8011e60:	08011e21 	.word	0x08011e21
 8011e64:	08011fb1 	.word	0x08011fb1
 8011e68:	08011ed5 	.word	0x08011ed5
 8011e6c:	08011f93 	.word	0x08011f93
 8011e70:	08011e21 	.word	0x08011e21
 8011e74:	08011e21 	.word	0x08011e21
 8011e78:	08011fd3 	.word	0x08011fd3
 8011e7c:	08011e21 	.word	0x08011e21
 8011e80:	08011ed5 	.word	0x08011ed5
 8011e84:	08011e21 	.word	0x08011e21
 8011e88:	08011e21 	.word	0x08011e21
 8011e8c:	08011f9b 	.word	0x08011f9b
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	1d1a      	adds	r2, r3, #4
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	602a      	str	r2, [r5, #0]
 8011e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e0a3      	b.n	8011fec <_printf_i+0x1f4>
 8011ea4:	6820      	ldr	r0, [r4, #0]
 8011ea6:	6829      	ldr	r1, [r5, #0]
 8011ea8:	0606      	lsls	r6, r0, #24
 8011eaa:	f101 0304 	add.w	r3, r1, #4
 8011eae:	d50a      	bpl.n	8011ec6 <_printf_i+0xce>
 8011eb0:	680e      	ldr	r6, [r1, #0]
 8011eb2:	602b      	str	r3, [r5, #0]
 8011eb4:	2e00      	cmp	r6, #0
 8011eb6:	da03      	bge.n	8011ec0 <_printf_i+0xc8>
 8011eb8:	232d      	movs	r3, #45	; 0x2d
 8011eba:	4276      	negs	r6, r6
 8011ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ec0:	485e      	ldr	r0, [pc, #376]	; (801203c <_printf_i+0x244>)
 8011ec2:	230a      	movs	r3, #10
 8011ec4:	e019      	b.n	8011efa <_printf_i+0x102>
 8011ec6:	680e      	ldr	r6, [r1, #0]
 8011ec8:	602b      	str	r3, [r5, #0]
 8011eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ece:	bf18      	it	ne
 8011ed0:	b236      	sxthne	r6, r6
 8011ed2:	e7ef      	b.n	8011eb4 <_printf_i+0xbc>
 8011ed4:	682b      	ldr	r3, [r5, #0]
 8011ed6:	6820      	ldr	r0, [r4, #0]
 8011ed8:	1d19      	adds	r1, r3, #4
 8011eda:	6029      	str	r1, [r5, #0]
 8011edc:	0601      	lsls	r1, r0, #24
 8011ede:	d501      	bpl.n	8011ee4 <_printf_i+0xec>
 8011ee0:	681e      	ldr	r6, [r3, #0]
 8011ee2:	e002      	b.n	8011eea <_printf_i+0xf2>
 8011ee4:	0646      	lsls	r6, r0, #25
 8011ee6:	d5fb      	bpl.n	8011ee0 <_printf_i+0xe8>
 8011ee8:	881e      	ldrh	r6, [r3, #0]
 8011eea:	4854      	ldr	r0, [pc, #336]	; (801203c <_printf_i+0x244>)
 8011eec:	2f6f      	cmp	r7, #111	; 0x6f
 8011eee:	bf0c      	ite	eq
 8011ef0:	2308      	moveq	r3, #8
 8011ef2:	230a      	movne	r3, #10
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011efa:	6865      	ldr	r5, [r4, #4]
 8011efc:	60a5      	str	r5, [r4, #8]
 8011efe:	2d00      	cmp	r5, #0
 8011f00:	bfa2      	ittt	ge
 8011f02:	6821      	ldrge	r1, [r4, #0]
 8011f04:	f021 0104 	bicge.w	r1, r1, #4
 8011f08:	6021      	strge	r1, [r4, #0]
 8011f0a:	b90e      	cbnz	r6, 8011f10 <_printf_i+0x118>
 8011f0c:	2d00      	cmp	r5, #0
 8011f0e:	d04d      	beq.n	8011fac <_printf_i+0x1b4>
 8011f10:	4615      	mov	r5, r2
 8011f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8011f16:	fb03 6711 	mls	r7, r3, r1, r6
 8011f1a:	5dc7      	ldrb	r7, [r0, r7]
 8011f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011f20:	4637      	mov	r7, r6
 8011f22:	42bb      	cmp	r3, r7
 8011f24:	460e      	mov	r6, r1
 8011f26:	d9f4      	bls.n	8011f12 <_printf_i+0x11a>
 8011f28:	2b08      	cmp	r3, #8
 8011f2a:	d10b      	bne.n	8011f44 <_printf_i+0x14c>
 8011f2c:	6823      	ldr	r3, [r4, #0]
 8011f2e:	07de      	lsls	r6, r3, #31
 8011f30:	d508      	bpl.n	8011f44 <_printf_i+0x14c>
 8011f32:	6923      	ldr	r3, [r4, #16]
 8011f34:	6861      	ldr	r1, [r4, #4]
 8011f36:	4299      	cmp	r1, r3
 8011f38:	bfde      	ittt	le
 8011f3a:	2330      	movle	r3, #48	; 0x30
 8011f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f44:	1b52      	subs	r2, r2, r5
 8011f46:	6122      	str	r2, [r4, #16]
 8011f48:	f8cd a000 	str.w	sl, [sp]
 8011f4c:	464b      	mov	r3, r9
 8011f4e:	aa03      	add	r2, sp, #12
 8011f50:	4621      	mov	r1, r4
 8011f52:	4640      	mov	r0, r8
 8011f54:	f7ff fee2 	bl	8011d1c <_printf_common>
 8011f58:	3001      	adds	r0, #1
 8011f5a:	d14c      	bne.n	8011ff6 <_printf_i+0x1fe>
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f60:	b004      	add	sp, #16
 8011f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f66:	4835      	ldr	r0, [pc, #212]	; (801203c <_printf_i+0x244>)
 8011f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011f6c:	6829      	ldr	r1, [r5, #0]
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f74:	6029      	str	r1, [r5, #0]
 8011f76:	061d      	lsls	r5, r3, #24
 8011f78:	d514      	bpl.n	8011fa4 <_printf_i+0x1ac>
 8011f7a:	07df      	lsls	r7, r3, #31
 8011f7c:	bf44      	itt	mi
 8011f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8011f82:	6023      	strmi	r3, [r4, #0]
 8011f84:	b91e      	cbnz	r6, 8011f8e <_printf_i+0x196>
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	f023 0320 	bic.w	r3, r3, #32
 8011f8c:	6023      	str	r3, [r4, #0]
 8011f8e:	2310      	movs	r3, #16
 8011f90:	e7b0      	b.n	8011ef4 <_printf_i+0xfc>
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	f043 0320 	orr.w	r3, r3, #32
 8011f98:	6023      	str	r3, [r4, #0]
 8011f9a:	2378      	movs	r3, #120	; 0x78
 8011f9c:	4828      	ldr	r0, [pc, #160]	; (8012040 <_printf_i+0x248>)
 8011f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fa2:	e7e3      	b.n	8011f6c <_printf_i+0x174>
 8011fa4:	0659      	lsls	r1, r3, #25
 8011fa6:	bf48      	it	mi
 8011fa8:	b2b6      	uxthmi	r6, r6
 8011faa:	e7e6      	b.n	8011f7a <_printf_i+0x182>
 8011fac:	4615      	mov	r5, r2
 8011fae:	e7bb      	b.n	8011f28 <_printf_i+0x130>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	6826      	ldr	r6, [r4, #0]
 8011fb4:	6961      	ldr	r1, [r4, #20]
 8011fb6:	1d18      	adds	r0, r3, #4
 8011fb8:	6028      	str	r0, [r5, #0]
 8011fba:	0635      	lsls	r5, r6, #24
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	d501      	bpl.n	8011fc4 <_printf_i+0x1cc>
 8011fc0:	6019      	str	r1, [r3, #0]
 8011fc2:	e002      	b.n	8011fca <_printf_i+0x1d2>
 8011fc4:	0670      	lsls	r0, r6, #25
 8011fc6:	d5fb      	bpl.n	8011fc0 <_printf_i+0x1c8>
 8011fc8:	8019      	strh	r1, [r3, #0]
 8011fca:	2300      	movs	r3, #0
 8011fcc:	6123      	str	r3, [r4, #16]
 8011fce:	4615      	mov	r5, r2
 8011fd0:	e7ba      	b.n	8011f48 <_printf_i+0x150>
 8011fd2:	682b      	ldr	r3, [r5, #0]
 8011fd4:	1d1a      	adds	r2, r3, #4
 8011fd6:	602a      	str	r2, [r5, #0]
 8011fd8:	681d      	ldr	r5, [r3, #0]
 8011fda:	6862      	ldr	r2, [r4, #4]
 8011fdc:	2100      	movs	r1, #0
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f7ee f9e6 	bl	80003b0 <memchr>
 8011fe4:	b108      	cbz	r0, 8011fea <_printf_i+0x1f2>
 8011fe6:	1b40      	subs	r0, r0, r5
 8011fe8:	6060      	str	r0, [r4, #4]
 8011fea:	6863      	ldr	r3, [r4, #4]
 8011fec:	6123      	str	r3, [r4, #16]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ff4:	e7a8      	b.n	8011f48 <_printf_i+0x150>
 8011ff6:	6923      	ldr	r3, [r4, #16]
 8011ff8:	462a      	mov	r2, r5
 8011ffa:	4649      	mov	r1, r9
 8011ffc:	4640      	mov	r0, r8
 8011ffe:	47d0      	blx	sl
 8012000:	3001      	adds	r0, #1
 8012002:	d0ab      	beq.n	8011f5c <_printf_i+0x164>
 8012004:	6823      	ldr	r3, [r4, #0]
 8012006:	079b      	lsls	r3, r3, #30
 8012008:	d413      	bmi.n	8012032 <_printf_i+0x23a>
 801200a:	68e0      	ldr	r0, [r4, #12]
 801200c:	9b03      	ldr	r3, [sp, #12]
 801200e:	4298      	cmp	r0, r3
 8012010:	bfb8      	it	lt
 8012012:	4618      	movlt	r0, r3
 8012014:	e7a4      	b.n	8011f60 <_printf_i+0x168>
 8012016:	2301      	movs	r3, #1
 8012018:	4632      	mov	r2, r6
 801201a:	4649      	mov	r1, r9
 801201c:	4640      	mov	r0, r8
 801201e:	47d0      	blx	sl
 8012020:	3001      	adds	r0, #1
 8012022:	d09b      	beq.n	8011f5c <_printf_i+0x164>
 8012024:	3501      	adds	r5, #1
 8012026:	68e3      	ldr	r3, [r4, #12]
 8012028:	9903      	ldr	r1, [sp, #12]
 801202a:	1a5b      	subs	r3, r3, r1
 801202c:	42ab      	cmp	r3, r5
 801202e:	dcf2      	bgt.n	8012016 <_printf_i+0x21e>
 8012030:	e7eb      	b.n	801200a <_printf_i+0x212>
 8012032:	2500      	movs	r5, #0
 8012034:	f104 0619 	add.w	r6, r4, #25
 8012038:	e7f5      	b.n	8012026 <_printf_i+0x22e>
 801203a:	bf00      	nop
 801203c:	08018e33 	.word	0x08018e33
 8012040:	08018e44 	.word	0x08018e44

08012044 <srand>:
 8012044:	b538      	push	{r3, r4, r5, lr}
 8012046:	4b10      	ldr	r3, [pc, #64]	; (8012088 <srand+0x44>)
 8012048:	681d      	ldr	r5, [r3, #0]
 801204a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801204c:	4604      	mov	r4, r0
 801204e:	b9b3      	cbnz	r3, 801207e <srand+0x3a>
 8012050:	2018      	movs	r0, #24
 8012052:	f001 fa6b 	bl	801352c <malloc>
 8012056:	4602      	mov	r2, r0
 8012058:	63a8      	str	r0, [r5, #56]	; 0x38
 801205a:	b920      	cbnz	r0, 8012066 <srand+0x22>
 801205c:	4b0b      	ldr	r3, [pc, #44]	; (801208c <srand+0x48>)
 801205e:	480c      	ldr	r0, [pc, #48]	; (8012090 <srand+0x4c>)
 8012060:	2142      	movs	r1, #66	; 0x42
 8012062:	f7ff f9dd 	bl	8011420 <__assert_func>
 8012066:	490b      	ldr	r1, [pc, #44]	; (8012094 <srand+0x50>)
 8012068:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <srand+0x54>)
 801206a:	e9c0 1300 	strd	r1, r3, [r0]
 801206e:	4b0b      	ldr	r3, [pc, #44]	; (801209c <srand+0x58>)
 8012070:	6083      	str	r3, [r0, #8]
 8012072:	230b      	movs	r3, #11
 8012074:	8183      	strh	r3, [r0, #12]
 8012076:	2100      	movs	r1, #0
 8012078:	2001      	movs	r0, #1
 801207a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801207e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012080:	2200      	movs	r2, #0
 8012082:	611c      	str	r4, [r3, #16]
 8012084:	615a      	str	r2, [r3, #20]
 8012086:	bd38      	pop	{r3, r4, r5, pc}
 8012088:	24000348 	.word	0x24000348
 801208c:	08018e55 	.word	0x08018e55
 8012090:	08018e6c 	.word	0x08018e6c
 8012094:	abcd330e 	.word	0xabcd330e
 8012098:	e66d1234 	.word	0xe66d1234
 801209c:	0005deec 	.word	0x0005deec

080120a0 <rand>:
 80120a0:	4b16      	ldr	r3, [pc, #88]	; (80120fc <rand+0x5c>)
 80120a2:	b510      	push	{r4, lr}
 80120a4:	681c      	ldr	r4, [r3, #0]
 80120a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80120a8:	b9b3      	cbnz	r3, 80120d8 <rand+0x38>
 80120aa:	2018      	movs	r0, #24
 80120ac:	f001 fa3e 	bl	801352c <malloc>
 80120b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80120b2:	b928      	cbnz	r0, 80120c0 <rand+0x20>
 80120b4:	4602      	mov	r2, r0
 80120b6:	4b12      	ldr	r3, [pc, #72]	; (8012100 <rand+0x60>)
 80120b8:	4812      	ldr	r0, [pc, #72]	; (8012104 <rand+0x64>)
 80120ba:	214e      	movs	r1, #78	; 0x4e
 80120bc:	f7ff f9b0 	bl	8011420 <__assert_func>
 80120c0:	4a11      	ldr	r2, [pc, #68]	; (8012108 <rand+0x68>)
 80120c2:	4b12      	ldr	r3, [pc, #72]	; (801210c <rand+0x6c>)
 80120c4:	e9c0 2300 	strd	r2, r3, [r0]
 80120c8:	4b11      	ldr	r3, [pc, #68]	; (8012110 <rand+0x70>)
 80120ca:	6083      	str	r3, [r0, #8]
 80120cc:	230b      	movs	r3, #11
 80120ce:	8183      	strh	r3, [r0, #12]
 80120d0:	2201      	movs	r2, #1
 80120d2:	2300      	movs	r3, #0
 80120d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80120d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80120da:	4a0e      	ldr	r2, [pc, #56]	; (8012114 <rand+0x74>)
 80120dc:	6920      	ldr	r0, [r4, #16]
 80120de:	6963      	ldr	r3, [r4, #20]
 80120e0:	490d      	ldr	r1, [pc, #52]	; (8012118 <rand+0x78>)
 80120e2:	4342      	muls	r2, r0
 80120e4:	fb01 2203 	mla	r2, r1, r3, r2
 80120e8:	fba0 0101 	umull	r0, r1, r0, r1
 80120ec:	1c43      	adds	r3, r0, #1
 80120ee:	eb42 0001 	adc.w	r0, r2, r1
 80120f2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80120f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80120fa:	bd10      	pop	{r4, pc}
 80120fc:	24000348 	.word	0x24000348
 8012100:	08018e55 	.word	0x08018e55
 8012104:	08018e6c 	.word	0x08018e6c
 8012108:	abcd330e 	.word	0xabcd330e
 801210c:	e66d1234 	.word	0xe66d1234
 8012110:	0005deec 	.word	0x0005deec
 8012114:	5851f42d 	.word	0x5851f42d
 8012118:	4c957f2d 	.word	0x4c957f2d

0801211c <siprintf>:
 801211c:	b40e      	push	{r1, r2, r3}
 801211e:	b500      	push	{lr}
 8012120:	b09c      	sub	sp, #112	; 0x70
 8012122:	ab1d      	add	r3, sp, #116	; 0x74
 8012124:	9002      	str	r0, [sp, #8]
 8012126:	9006      	str	r0, [sp, #24]
 8012128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801212c:	4809      	ldr	r0, [pc, #36]	; (8012154 <siprintf+0x38>)
 801212e:	9107      	str	r1, [sp, #28]
 8012130:	9104      	str	r1, [sp, #16]
 8012132:	4909      	ldr	r1, [pc, #36]	; (8012158 <siprintf+0x3c>)
 8012134:	f853 2b04 	ldr.w	r2, [r3], #4
 8012138:	9105      	str	r1, [sp, #20]
 801213a:	6800      	ldr	r0, [r0, #0]
 801213c:	9301      	str	r3, [sp, #4]
 801213e:	a902      	add	r1, sp, #8
 8012140:	f001 ff1a 	bl	8013f78 <_svfiprintf_r>
 8012144:	9b02      	ldr	r3, [sp, #8]
 8012146:	2200      	movs	r2, #0
 8012148:	701a      	strb	r2, [r3, #0]
 801214a:	b01c      	add	sp, #112	; 0x70
 801214c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012150:	b003      	add	sp, #12
 8012152:	4770      	bx	lr
 8012154:	24000348 	.word	0x24000348
 8012158:	ffff0208 	.word	0xffff0208

0801215c <strcpy>:
 801215c:	4603      	mov	r3, r0
 801215e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012162:	f803 2b01 	strb.w	r2, [r3], #1
 8012166:	2a00      	cmp	r2, #0
 8012168:	d1f9      	bne.n	801215e <strcpy+0x2>
 801216a:	4770      	bx	lr

0801216c <strcspn>:
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	4603      	mov	r3, r0
 8012170:	461e      	mov	r6, r3
 8012172:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012176:	b144      	cbz	r4, 801218a <strcspn+0x1e>
 8012178:	1e4a      	subs	r2, r1, #1
 801217a:	e001      	b.n	8012180 <strcspn+0x14>
 801217c:	42a5      	cmp	r5, r4
 801217e:	d004      	beq.n	801218a <strcspn+0x1e>
 8012180:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012184:	2d00      	cmp	r5, #0
 8012186:	d1f9      	bne.n	801217c <strcspn+0x10>
 8012188:	e7f2      	b.n	8012170 <strcspn+0x4>
 801218a:	1a30      	subs	r0, r6, r0
 801218c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012190 <strtok>:
 8012190:	4b16      	ldr	r3, [pc, #88]	; (80121ec <strtok+0x5c>)
 8012192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012194:	681e      	ldr	r6, [r3, #0]
 8012196:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012198:	4605      	mov	r5, r0
 801219a:	b9fc      	cbnz	r4, 80121dc <strtok+0x4c>
 801219c:	2050      	movs	r0, #80	; 0x50
 801219e:	9101      	str	r1, [sp, #4]
 80121a0:	f001 f9c4 	bl	801352c <malloc>
 80121a4:	9901      	ldr	r1, [sp, #4]
 80121a6:	65b0      	str	r0, [r6, #88]	; 0x58
 80121a8:	4602      	mov	r2, r0
 80121aa:	b920      	cbnz	r0, 80121b6 <strtok+0x26>
 80121ac:	4b10      	ldr	r3, [pc, #64]	; (80121f0 <strtok+0x60>)
 80121ae:	4811      	ldr	r0, [pc, #68]	; (80121f4 <strtok+0x64>)
 80121b0:	2157      	movs	r1, #87	; 0x57
 80121b2:	f7ff f935 	bl	8011420 <__assert_func>
 80121b6:	e9c0 4400 	strd	r4, r4, [r0]
 80121ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80121be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80121c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80121c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80121ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80121ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80121d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80121d6:	6184      	str	r4, [r0, #24]
 80121d8:	7704      	strb	r4, [r0, #28]
 80121da:	6244      	str	r4, [r0, #36]	; 0x24
 80121dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80121de:	2301      	movs	r3, #1
 80121e0:	4628      	mov	r0, r5
 80121e2:	b002      	add	sp, #8
 80121e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121e8:	f000 b806 	b.w	80121f8 <__strtok_r>
 80121ec:	24000348 	.word	0x24000348
 80121f0:	08018e55 	.word	0x08018e55
 80121f4:	08018ec7 	.word	0x08018ec7

080121f8 <__strtok_r>:
 80121f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121fa:	b908      	cbnz	r0, 8012200 <__strtok_r+0x8>
 80121fc:	6810      	ldr	r0, [r2, #0]
 80121fe:	b188      	cbz	r0, 8012224 <__strtok_r+0x2c>
 8012200:	4604      	mov	r4, r0
 8012202:	4620      	mov	r0, r4
 8012204:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012208:	460f      	mov	r7, r1
 801220a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801220e:	b91e      	cbnz	r6, 8012218 <__strtok_r+0x20>
 8012210:	b965      	cbnz	r5, 801222c <__strtok_r+0x34>
 8012212:	6015      	str	r5, [r2, #0]
 8012214:	4628      	mov	r0, r5
 8012216:	e005      	b.n	8012224 <__strtok_r+0x2c>
 8012218:	42b5      	cmp	r5, r6
 801221a:	d1f6      	bne.n	801220a <__strtok_r+0x12>
 801221c:	2b00      	cmp	r3, #0
 801221e:	d1f0      	bne.n	8012202 <__strtok_r+0xa>
 8012220:	6014      	str	r4, [r2, #0]
 8012222:	7003      	strb	r3, [r0, #0]
 8012224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012226:	461c      	mov	r4, r3
 8012228:	e00c      	b.n	8012244 <__strtok_r+0x4c>
 801222a:	b915      	cbnz	r5, 8012232 <__strtok_r+0x3a>
 801222c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012230:	460e      	mov	r6, r1
 8012232:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012236:	42ab      	cmp	r3, r5
 8012238:	d1f7      	bne.n	801222a <__strtok_r+0x32>
 801223a:	2b00      	cmp	r3, #0
 801223c:	d0f3      	beq.n	8012226 <__strtok_r+0x2e>
 801223e:	2300      	movs	r3, #0
 8012240:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012244:	6014      	str	r4, [r2, #0]
 8012246:	e7ed      	b.n	8012224 <__strtok_r+0x2c>

08012248 <_strtol_l.constprop.0>:
 8012248:	2b01      	cmp	r3, #1
 801224a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801224e:	d001      	beq.n	8012254 <_strtol_l.constprop.0+0xc>
 8012250:	2b24      	cmp	r3, #36	; 0x24
 8012252:	d906      	bls.n	8012262 <_strtol_l.constprop.0+0x1a>
 8012254:	f7ff f906 	bl	8011464 <__errno>
 8012258:	2316      	movs	r3, #22
 801225a:	6003      	str	r3, [r0, #0]
 801225c:	2000      	movs	r0, #0
 801225e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012262:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012348 <_strtol_l.constprop.0+0x100>
 8012266:	460d      	mov	r5, r1
 8012268:	462e      	mov	r6, r5
 801226a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801226e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012272:	f017 0708 	ands.w	r7, r7, #8
 8012276:	d1f7      	bne.n	8012268 <_strtol_l.constprop.0+0x20>
 8012278:	2c2d      	cmp	r4, #45	; 0x2d
 801227a:	d132      	bne.n	80122e2 <_strtol_l.constprop.0+0x9a>
 801227c:	782c      	ldrb	r4, [r5, #0]
 801227e:	2701      	movs	r7, #1
 8012280:	1cb5      	adds	r5, r6, #2
 8012282:	2b00      	cmp	r3, #0
 8012284:	d05b      	beq.n	801233e <_strtol_l.constprop.0+0xf6>
 8012286:	2b10      	cmp	r3, #16
 8012288:	d109      	bne.n	801229e <_strtol_l.constprop.0+0x56>
 801228a:	2c30      	cmp	r4, #48	; 0x30
 801228c:	d107      	bne.n	801229e <_strtol_l.constprop.0+0x56>
 801228e:	782c      	ldrb	r4, [r5, #0]
 8012290:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012294:	2c58      	cmp	r4, #88	; 0x58
 8012296:	d14d      	bne.n	8012334 <_strtol_l.constprop.0+0xec>
 8012298:	786c      	ldrb	r4, [r5, #1]
 801229a:	2310      	movs	r3, #16
 801229c:	3502      	adds	r5, #2
 801229e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80122a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80122a6:	f04f 0c00 	mov.w	ip, #0
 80122aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80122ae:	4666      	mov	r6, ip
 80122b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80122b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80122b8:	f1be 0f09 	cmp.w	lr, #9
 80122bc:	d816      	bhi.n	80122ec <_strtol_l.constprop.0+0xa4>
 80122be:	4674      	mov	r4, lr
 80122c0:	42a3      	cmp	r3, r4
 80122c2:	dd24      	ble.n	801230e <_strtol_l.constprop.0+0xc6>
 80122c4:	f1bc 0f00 	cmp.w	ip, #0
 80122c8:	db1e      	blt.n	8012308 <_strtol_l.constprop.0+0xc0>
 80122ca:	45b1      	cmp	r9, r6
 80122cc:	d31c      	bcc.n	8012308 <_strtol_l.constprop.0+0xc0>
 80122ce:	d101      	bne.n	80122d4 <_strtol_l.constprop.0+0x8c>
 80122d0:	45a2      	cmp	sl, r4
 80122d2:	db19      	blt.n	8012308 <_strtol_l.constprop.0+0xc0>
 80122d4:	fb06 4603 	mla	r6, r6, r3, r4
 80122d8:	f04f 0c01 	mov.w	ip, #1
 80122dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122e0:	e7e8      	b.n	80122b4 <_strtol_l.constprop.0+0x6c>
 80122e2:	2c2b      	cmp	r4, #43	; 0x2b
 80122e4:	bf04      	itt	eq
 80122e6:	782c      	ldrbeq	r4, [r5, #0]
 80122e8:	1cb5      	addeq	r5, r6, #2
 80122ea:	e7ca      	b.n	8012282 <_strtol_l.constprop.0+0x3a>
 80122ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80122f0:	f1be 0f19 	cmp.w	lr, #25
 80122f4:	d801      	bhi.n	80122fa <_strtol_l.constprop.0+0xb2>
 80122f6:	3c37      	subs	r4, #55	; 0x37
 80122f8:	e7e2      	b.n	80122c0 <_strtol_l.constprop.0+0x78>
 80122fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80122fe:	f1be 0f19 	cmp.w	lr, #25
 8012302:	d804      	bhi.n	801230e <_strtol_l.constprop.0+0xc6>
 8012304:	3c57      	subs	r4, #87	; 0x57
 8012306:	e7db      	b.n	80122c0 <_strtol_l.constprop.0+0x78>
 8012308:	f04f 3cff 	mov.w	ip, #4294967295
 801230c:	e7e6      	b.n	80122dc <_strtol_l.constprop.0+0x94>
 801230e:	f1bc 0f00 	cmp.w	ip, #0
 8012312:	da05      	bge.n	8012320 <_strtol_l.constprop.0+0xd8>
 8012314:	2322      	movs	r3, #34	; 0x22
 8012316:	6003      	str	r3, [r0, #0]
 8012318:	4646      	mov	r6, r8
 801231a:	b942      	cbnz	r2, 801232e <_strtol_l.constprop.0+0xe6>
 801231c:	4630      	mov	r0, r6
 801231e:	e79e      	b.n	801225e <_strtol_l.constprop.0+0x16>
 8012320:	b107      	cbz	r7, 8012324 <_strtol_l.constprop.0+0xdc>
 8012322:	4276      	negs	r6, r6
 8012324:	2a00      	cmp	r2, #0
 8012326:	d0f9      	beq.n	801231c <_strtol_l.constprop.0+0xd4>
 8012328:	f1bc 0f00 	cmp.w	ip, #0
 801232c:	d000      	beq.n	8012330 <_strtol_l.constprop.0+0xe8>
 801232e:	1e69      	subs	r1, r5, #1
 8012330:	6011      	str	r1, [r2, #0]
 8012332:	e7f3      	b.n	801231c <_strtol_l.constprop.0+0xd4>
 8012334:	2430      	movs	r4, #48	; 0x30
 8012336:	2b00      	cmp	r3, #0
 8012338:	d1b1      	bne.n	801229e <_strtol_l.constprop.0+0x56>
 801233a:	2308      	movs	r3, #8
 801233c:	e7af      	b.n	801229e <_strtol_l.constprop.0+0x56>
 801233e:	2c30      	cmp	r4, #48	; 0x30
 8012340:	d0a5      	beq.n	801228e <_strtol_l.constprop.0+0x46>
 8012342:	230a      	movs	r3, #10
 8012344:	e7ab      	b.n	801229e <_strtol_l.constprop.0+0x56>
 8012346:	bf00      	nop
 8012348:	08018d09 	.word	0x08018d09

0801234c <strtol>:
 801234c:	4613      	mov	r3, r2
 801234e:	460a      	mov	r2, r1
 8012350:	4601      	mov	r1, r0
 8012352:	4802      	ldr	r0, [pc, #8]	; (801235c <strtol+0x10>)
 8012354:	6800      	ldr	r0, [r0, #0]
 8012356:	f7ff bf77 	b.w	8012248 <_strtol_l.constprop.0>
 801235a:	bf00      	nop
 801235c:	24000348 	.word	0x24000348

08012360 <__swbuf_r>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	460e      	mov	r6, r1
 8012364:	4614      	mov	r4, r2
 8012366:	4605      	mov	r5, r0
 8012368:	b118      	cbz	r0, 8012372 <__swbuf_r+0x12>
 801236a:	6983      	ldr	r3, [r0, #24]
 801236c:	b90b      	cbnz	r3, 8012372 <__swbuf_r+0x12>
 801236e:	f000 ffd3 	bl	8013318 <__sinit>
 8012372:	4b21      	ldr	r3, [pc, #132]	; (80123f8 <__swbuf_r+0x98>)
 8012374:	429c      	cmp	r4, r3
 8012376:	d12b      	bne.n	80123d0 <__swbuf_r+0x70>
 8012378:	686c      	ldr	r4, [r5, #4]
 801237a:	69a3      	ldr	r3, [r4, #24]
 801237c:	60a3      	str	r3, [r4, #8]
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	071a      	lsls	r2, r3, #28
 8012382:	d52f      	bpl.n	80123e4 <__swbuf_r+0x84>
 8012384:	6923      	ldr	r3, [r4, #16]
 8012386:	b36b      	cbz	r3, 80123e4 <__swbuf_r+0x84>
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	6820      	ldr	r0, [r4, #0]
 801238c:	1ac0      	subs	r0, r0, r3
 801238e:	6963      	ldr	r3, [r4, #20]
 8012390:	b2f6      	uxtb	r6, r6
 8012392:	4283      	cmp	r3, r0
 8012394:	4637      	mov	r7, r6
 8012396:	dc04      	bgt.n	80123a2 <__swbuf_r+0x42>
 8012398:	4621      	mov	r1, r4
 801239a:	4628      	mov	r0, r5
 801239c:	f000 ff28 	bl	80131f0 <_fflush_r>
 80123a0:	bb30      	cbnz	r0, 80123f0 <__swbuf_r+0x90>
 80123a2:	68a3      	ldr	r3, [r4, #8]
 80123a4:	3b01      	subs	r3, #1
 80123a6:	60a3      	str	r3, [r4, #8]
 80123a8:	6823      	ldr	r3, [r4, #0]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	6022      	str	r2, [r4, #0]
 80123ae:	701e      	strb	r6, [r3, #0]
 80123b0:	6963      	ldr	r3, [r4, #20]
 80123b2:	3001      	adds	r0, #1
 80123b4:	4283      	cmp	r3, r0
 80123b6:	d004      	beq.n	80123c2 <__swbuf_r+0x62>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	07db      	lsls	r3, r3, #31
 80123bc:	d506      	bpl.n	80123cc <__swbuf_r+0x6c>
 80123be:	2e0a      	cmp	r6, #10
 80123c0:	d104      	bne.n	80123cc <__swbuf_r+0x6c>
 80123c2:	4621      	mov	r1, r4
 80123c4:	4628      	mov	r0, r5
 80123c6:	f000 ff13 	bl	80131f0 <_fflush_r>
 80123ca:	b988      	cbnz	r0, 80123f0 <__swbuf_r+0x90>
 80123cc:	4638      	mov	r0, r7
 80123ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d0:	4b0a      	ldr	r3, [pc, #40]	; (80123fc <__swbuf_r+0x9c>)
 80123d2:	429c      	cmp	r4, r3
 80123d4:	d101      	bne.n	80123da <__swbuf_r+0x7a>
 80123d6:	68ac      	ldr	r4, [r5, #8]
 80123d8:	e7cf      	b.n	801237a <__swbuf_r+0x1a>
 80123da:	4b09      	ldr	r3, [pc, #36]	; (8012400 <__swbuf_r+0xa0>)
 80123dc:	429c      	cmp	r4, r3
 80123de:	bf08      	it	eq
 80123e0:	68ec      	ldreq	r4, [r5, #12]
 80123e2:	e7ca      	b.n	801237a <__swbuf_r+0x1a>
 80123e4:	4621      	mov	r1, r4
 80123e6:	4628      	mov	r0, r5
 80123e8:	f000 f80c 	bl	8012404 <__swsetup_r>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d0cb      	beq.n	8012388 <__swbuf_r+0x28>
 80123f0:	f04f 37ff 	mov.w	r7, #4294967295
 80123f4:	e7ea      	b.n	80123cc <__swbuf_r+0x6c>
 80123f6:	bf00      	nop
 80123f8:	08018fc0 	.word	0x08018fc0
 80123fc:	08018fe0 	.word	0x08018fe0
 8012400:	08018fa0 	.word	0x08018fa0

08012404 <__swsetup_r>:
 8012404:	4b32      	ldr	r3, [pc, #200]	; (80124d0 <__swsetup_r+0xcc>)
 8012406:	b570      	push	{r4, r5, r6, lr}
 8012408:	681d      	ldr	r5, [r3, #0]
 801240a:	4606      	mov	r6, r0
 801240c:	460c      	mov	r4, r1
 801240e:	b125      	cbz	r5, 801241a <__swsetup_r+0x16>
 8012410:	69ab      	ldr	r3, [r5, #24]
 8012412:	b913      	cbnz	r3, 801241a <__swsetup_r+0x16>
 8012414:	4628      	mov	r0, r5
 8012416:	f000 ff7f 	bl	8013318 <__sinit>
 801241a:	4b2e      	ldr	r3, [pc, #184]	; (80124d4 <__swsetup_r+0xd0>)
 801241c:	429c      	cmp	r4, r3
 801241e:	d10f      	bne.n	8012440 <__swsetup_r+0x3c>
 8012420:	686c      	ldr	r4, [r5, #4]
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012428:	0719      	lsls	r1, r3, #28
 801242a:	d42c      	bmi.n	8012486 <__swsetup_r+0x82>
 801242c:	06dd      	lsls	r5, r3, #27
 801242e:	d411      	bmi.n	8012454 <__swsetup_r+0x50>
 8012430:	2309      	movs	r3, #9
 8012432:	6033      	str	r3, [r6, #0]
 8012434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012438:	81a3      	strh	r3, [r4, #12]
 801243a:	f04f 30ff 	mov.w	r0, #4294967295
 801243e:	e03e      	b.n	80124be <__swsetup_r+0xba>
 8012440:	4b25      	ldr	r3, [pc, #148]	; (80124d8 <__swsetup_r+0xd4>)
 8012442:	429c      	cmp	r4, r3
 8012444:	d101      	bne.n	801244a <__swsetup_r+0x46>
 8012446:	68ac      	ldr	r4, [r5, #8]
 8012448:	e7eb      	b.n	8012422 <__swsetup_r+0x1e>
 801244a:	4b24      	ldr	r3, [pc, #144]	; (80124dc <__swsetup_r+0xd8>)
 801244c:	429c      	cmp	r4, r3
 801244e:	bf08      	it	eq
 8012450:	68ec      	ldreq	r4, [r5, #12]
 8012452:	e7e6      	b.n	8012422 <__swsetup_r+0x1e>
 8012454:	0758      	lsls	r0, r3, #29
 8012456:	d512      	bpl.n	801247e <__swsetup_r+0x7a>
 8012458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801245a:	b141      	cbz	r1, 801246e <__swsetup_r+0x6a>
 801245c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012460:	4299      	cmp	r1, r3
 8012462:	d002      	beq.n	801246a <__swsetup_r+0x66>
 8012464:	4630      	mov	r0, r6
 8012466:	f001 fc1d 	bl	8013ca4 <_free_r>
 801246a:	2300      	movs	r3, #0
 801246c:	6363      	str	r3, [r4, #52]	; 0x34
 801246e:	89a3      	ldrh	r3, [r4, #12]
 8012470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012474:	81a3      	strh	r3, [r4, #12]
 8012476:	2300      	movs	r3, #0
 8012478:	6063      	str	r3, [r4, #4]
 801247a:	6923      	ldr	r3, [r4, #16]
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	f043 0308 	orr.w	r3, r3, #8
 8012484:	81a3      	strh	r3, [r4, #12]
 8012486:	6923      	ldr	r3, [r4, #16]
 8012488:	b94b      	cbnz	r3, 801249e <__swsetup_r+0x9a>
 801248a:	89a3      	ldrh	r3, [r4, #12]
 801248c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012494:	d003      	beq.n	801249e <__swsetup_r+0x9a>
 8012496:	4621      	mov	r1, r4
 8012498:	4630      	mov	r0, r6
 801249a:	f001 f807 	bl	80134ac <__smakebuf_r>
 801249e:	89a0      	ldrh	r0, [r4, #12]
 80124a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124a4:	f010 0301 	ands.w	r3, r0, #1
 80124a8:	d00a      	beq.n	80124c0 <__swsetup_r+0xbc>
 80124aa:	2300      	movs	r3, #0
 80124ac:	60a3      	str	r3, [r4, #8]
 80124ae:	6963      	ldr	r3, [r4, #20]
 80124b0:	425b      	negs	r3, r3
 80124b2:	61a3      	str	r3, [r4, #24]
 80124b4:	6923      	ldr	r3, [r4, #16]
 80124b6:	b943      	cbnz	r3, 80124ca <__swsetup_r+0xc6>
 80124b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124bc:	d1ba      	bne.n	8012434 <__swsetup_r+0x30>
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	0781      	lsls	r1, r0, #30
 80124c2:	bf58      	it	pl
 80124c4:	6963      	ldrpl	r3, [r4, #20]
 80124c6:	60a3      	str	r3, [r4, #8]
 80124c8:	e7f4      	b.n	80124b4 <__swsetup_r+0xb0>
 80124ca:	2000      	movs	r0, #0
 80124cc:	e7f7      	b.n	80124be <__swsetup_r+0xba>
 80124ce:	bf00      	nop
 80124d0:	24000348 	.word	0x24000348
 80124d4:	08018fc0 	.word	0x08018fc0
 80124d8:	08018fe0 	.word	0x08018fe0
 80124dc:	08018fa0 	.word	0x08018fa0

080124e0 <abort>:
 80124e0:	b508      	push	{r3, lr}
 80124e2:	2006      	movs	r0, #6
 80124e4:	f001 fe80 	bl	80141e8 <raise>
 80124e8:	2001      	movs	r0, #1
 80124ea:	f7f4 ffb9 	bl	8007460 <_exit>

080124ee <quorem>:
 80124ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f2:	6903      	ldr	r3, [r0, #16]
 80124f4:	690c      	ldr	r4, [r1, #16]
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	4607      	mov	r7, r0
 80124fa:	f2c0 8081 	blt.w	8012600 <quorem+0x112>
 80124fe:	3c01      	subs	r4, #1
 8012500:	f101 0814 	add.w	r8, r1, #20
 8012504:	f100 0514 	add.w	r5, r0, #20
 8012508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801250c:	9301      	str	r3, [sp, #4]
 801250e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012516:	3301      	adds	r3, #1
 8012518:	429a      	cmp	r2, r3
 801251a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801251e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012522:	fbb2 f6f3 	udiv	r6, r2, r3
 8012526:	d331      	bcc.n	801258c <quorem+0x9e>
 8012528:	f04f 0e00 	mov.w	lr, #0
 801252c:	4640      	mov	r0, r8
 801252e:	46ac      	mov	ip, r5
 8012530:	46f2      	mov	sl, lr
 8012532:	f850 2b04 	ldr.w	r2, [r0], #4
 8012536:	b293      	uxth	r3, r2
 8012538:	fb06 e303 	mla	r3, r6, r3, lr
 801253c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012540:	b29b      	uxth	r3, r3
 8012542:	ebaa 0303 	sub.w	r3, sl, r3
 8012546:	f8dc a000 	ldr.w	sl, [ip]
 801254a:	0c12      	lsrs	r2, r2, #16
 801254c:	fa13 f38a 	uxtah	r3, r3, sl
 8012550:	fb06 e202 	mla	r2, r6, r2, lr
 8012554:	9300      	str	r3, [sp, #0]
 8012556:	9b00      	ldr	r3, [sp, #0]
 8012558:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801255c:	b292      	uxth	r2, r2
 801255e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012562:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012566:	f8bd 3000 	ldrh.w	r3, [sp]
 801256a:	4581      	cmp	r9, r0
 801256c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012570:	f84c 3b04 	str.w	r3, [ip], #4
 8012574:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012578:	d2db      	bcs.n	8012532 <quorem+0x44>
 801257a:	f855 300b 	ldr.w	r3, [r5, fp]
 801257e:	b92b      	cbnz	r3, 801258c <quorem+0x9e>
 8012580:	9b01      	ldr	r3, [sp, #4]
 8012582:	3b04      	subs	r3, #4
 8012584:	429d      	cmp	r5, r3
 8012586:	461a      	mov	r2, r3
 8012588:	d32e      	bcc.n	80125e8 <quorem+0xfa>
 801258a:	613c      	str	r4, [r7, #16]
 801258c:	4638      	mov	r0, r7
 801258e:	f001 fa71 	bl	8013a74 <__mcmp>
 8012592:	2800      	cmp	r0, #0
 8012594:	db24      	blt.n	80125e0 <quorem+0xf2>
 8012596:	3601      	adds	r6, #1
 8012598:	4628      	mov	r0, r5
 801259a:	f04f 0c00 	mov.w	ip, #0
 801259e:	f858 2b04 	ldr.w	r2, [r8], #4
 80125a2:	f8d0 e000 	ldr.w	lr, [r0]
 80125a6:	b293      	uxth	r3, r2
 80125a8:	ebac 0303 	sub.w	r3, ip, r3
 80125ac:	0c12      	lsrs	r2, r2, #16
 80125ae:	fa13 f38e 	uxtah	r3, r3, lr
 80125b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80125b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125c0:	45c1      	cmp	r9, r8
 80125c2:	f840 3b04 	str.w	r3, [r0], #4
 80125c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80125ca:	d2e8      	bcs.n	801259e <quorem+0xb0>
 80125cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125d4:	b922      	cbnz	r2, 80125e0 <quorem+0xf2>
 80125d6:	3b04      	subs	r3, #4
 80125d8:	429d      	cmp	r5, r3
 80125da:	461a      	mov	r2, r3
 80125dc:	d30a      	bcc.n	80125f4 <quorem+0x106>
 80125de:	613c      	str	r4, [r7, #16]
 80125e0:	4630      	mov	r0, r6
 80125e2:	b003      	add	sp, #12
 80125e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e8:	6812      	ldr	r2, [r2, #0]
 80125ea:	3b04      	subs	r3, #4
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	d1cc      	bne.n	801258a <quorem+0x9c>
 80125f0:	3c01      	subs	r4, #1
 80125f2:	e7c7      	b.n	8012584 <quorem+0x96>
 80125f4:	6812      	ldr	r2, [r2, #0]
 80125f6:	3b04      	subs	r3, #4
 80125f8:	2a00      	cmp	r2, #0
 80125fa:	d1f0      	bne.n	80125de <quorem+0xf0>
 80125fc:	3c01      	subs	r4, #1
 80125fe:	e7eb      	b.n	80125d8 <quorem+0xea>
 8012600:	2000      	movs	r0, #0
 8012602:	e7ee      	b.n	80125e2 <quorem+0xf4>
 8012604:	0000      	movs	r0, r0
	...

08012608 <_dtoa_r>:
 8012608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801260c:	ed2d 8b02 	vpush	{d8}
 8012610:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012612:	b091      	sub	sp, #68	; 0x44
 8012614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012618:	ec59 8b10 	vmov	r8, r9, d0
 801261c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801261e:	9106      	str	r1, [sp, #24]
 8012620:	4606      	mov	r6, r0
 8012622:	9208      	str	r2, [sp, #32]
 8012624:	930c      	str	r3, [sp, #48]	; 0x30
 8012626:	b975      	cbnz	r5, 8012646 <_dtoa_r+0x3e>
 8012628:	2010      	movs	r0, #16
 801262a:	f000 ff7f 	bl	801352c <malloc>
 801262e:	4602      	mov	r2, r0
 8012630:	6270      	str	r0, [r6, #36]	; 0x24
 8012632:	b920      	cbnz	r0, 801263e <_dtoa_r+0x36>
 8012634:	4baa      	ldr	r3, [pc, #680]	; (80128e0 <_dtoa_r+0x2d8>)
 8012636:	21ea      	movs	r1, #234	; 0xea
 8012638:	48aa      	ldr	r0, [pc, #680]	; (80128e4 <_dtoa_r+0x2dc>)
 801263a:	f7fe fef1 	bl	8011420 <__assert_func>
 801263e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012642:	6005      	str	r5, [r0, #0]
 8012644:	60c5      	str	r5, [r0, #12]
 8012646:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012648:	6819      	ldr	r1, [r3, #0]
 801264a:	b151      	cbz	r1, 8012662 <_dtoa_r+0x5a>
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	604a      	str	r2, [r1, #4]
 8012650:	2301      	movs	r3, #1
 8012652:	4093      	lsls	r3, r2
 8012654:	608b      	str	r3, [r1, #8]
 8012656:	4630      	mov	r0, r6
 8012658:	f000 ffca 	bl	80135f0 <_Bfree>
 801265c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	f1b9 0300 	subs.w	r3, r9, #0
 8012666:	bfbb      	ittet	lt
 8012668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801266c:	9303      	strlt	r3, [sp, #12]
 801266e:	2300      	movge	r3, #0
 8012670:	2201      	movlt	r2, #1
 8012672:	bfac      	ite	ge
 8012674:	6023      	strge	r3, [r4, #0]
 8012676:	6022      	strlt	r2, [r4, #0]
 8012678:	4b9b      	ldr	r3, [pc, #620]	; (80128e8 <_dtoa_r+0x2e0>)
 801267a:	9c03      	ldr	r4, [sp, #12]
 801267c:	43a3      	bics	r3, r4
 801267e:	d11c      	bne.n	80126ba <_dtoa_r+0xb2>
 8012680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012682:	f242 730f 	movw	r3, #9999	; 0x270f
 8012686:	6013      	str	r3, [r2, #0]
 8012688:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801268c:	ea53 0308 	orrs.w	r3, r3, r8
 8012690:	f000 84fd 	beq.w	801308e <_dtoa_r+0xa86>
 8012694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012696:	b963      	cbnz	r3, 80126b2 <_dtoa_r+0xaa>
 8012698:	4b94      	ldr	r3, [pc, #592]	; (80128ec <_dtoa_r+0x2e4>)
 801269a:	e01f      	b.n	80126dc <_dtoa_r+0xd4>
 801269c:	4b94      	ldr	r3, [pc, #592]	; (80128f0 <_dtoa_r+0x2e8>)
 801269e:	9301      	str	r3, [sp, #4]
 80126a0:	3308      	adds	r3, #8
 80126a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80126a4:	6013      	str	r3, [r2, #0]
 80126a6:	9801      	ldr	r0, [sp, #4]
 80126a8:	b011      	add	sp, #68	; 0x44
 80126aa:	ecbd 8b02 	vpop	{d8}
 80126ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b2:	4b8e      	ldr	r3, [pc, #568]	; (80128ec <_dtoa_r+0x2e4>)
 80126b4:	9301      	str	r3, [sp, #4]
 80126b6:	3303      	adds	r3, #3
 80126b8:	e7f3      	b.n	80126a2 <_dtoa_r+0x9a>
 80126ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80126be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80126c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c6:	d10b      	bne.n	80126e0 <_dtoa_r+0xd8>
 80126c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126ca:	2301      	movs	r3, #1
 80126cc:	6013      	str	r3, [r2, #0]
 80126ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 84d9 	beq.w	8013088 <_dtoa_r+0xa80>
 80126d6:	4887      	ldr	r0, [pc, #540]	; (80128f4 <_dtoa_r+0x2ec>)
 80126d8:	6018      	str	r0, [r3, #0]
 80126da:	1e43      	subs	r3, r0, #1
 80126dc:	9301      	str	r3, [sp, #4]
 80126de:	e7e2      	b.n	80126a6 <_dtoa_r+0x9e>
 80126e0:	a90f      	add	r1, sp, #60	; 0x3c
 80126e2:	aa0e      	add	r2, sp, #56	; 0x38
 80126e4:	4630      	mov	r0, r6
 80126e6:	eeb0 0b48 	vmov.f64	d0, d8
 80126ea:	f001 fa69 	bl	8013bc0 <__d2b>
 80126ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80126f2:	4605      	mov	r5, r0
 80126f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80126f6:	2900      	cmp	r1, #0
 80126f8:	d046      	beq.n	8012788 <_dtoa_r+0x180>
 80126fa:	ee18 4a90 	vmov	r4, s17
 80126fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012702:	ec53 2b18 	vmov	r2, r3, d8
 8012706:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801270a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801270e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012712:	2400      	movs	r4, #0
 8012714:	ec43 2b16 	vmov	d6, r2, r3
 8012718:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801271c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80128c8 <_dtoa_r+0x2c0>
 8012720:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012724:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80128d0 <_dtoa_r+0x2c8>
 8012728:	eea7 6b05 	vfma.f64	d6, d7, d5
 801272c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80128d8 <_dtoa_r+0x2d0>
 8012730:	ee07 1a90 	vmov	s15, r1
 8012734:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012738:	eeb0 7b46 	vmov.f64	d7, d6
 801273c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012740:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012744:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274c:	ee16 ba90 	vmov	fp, s13
 8012750:	940a      	str	r4, [sp, #40]	; 0x28
 8012752:	d508      	bpl.n	8012766 <_dtoa_r+0x15e>
 8012754:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012758:	eeb4 6b47 	vcmp.f64	d6, d7
 801275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012760:	bf18      	it	ne
 8012762:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012766:	f1bb 0f16 	cmp.w	fp, #22
 801276a:	d82f      	bhi.n	80127cc <_dtoa_r+0x1c4>
 801276c:	4b62      	ldr	r3, [pc, #392]	; (80128f8 <_dtoa_r+0x2f0>)
 801276e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012772:	ed93 7b00 	vldr	d7, [r3]
 8012776:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277e:	d501      	bpl.n	8012784 <_dtoa_r+0x17c>
 8012780:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012784:	2300      	movs	r3, #0
 8012786:	e022      	b.n	80127ce <_dtoa_r+0x1c6>
 8012788:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801278a:	4401      	add	r1, r0
 801278c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012790:	2b20      	cmp	r3, #32
 8012792:	bfc1      	itttt	gt
 8012794:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012798:	fa04 f303 	lslgt.w	r3, r4, r3
 801279c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80127a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80127a4:	bfd6      	itet	le
 80127a6:	f1c3 0320 	rsble	r3, r3, #32
 80127aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80127ae:	fa08 f803 	lslle.w	r8, r8, r3
 80127b2:	ee07 8a90 	vmov	s15, r8
 80127b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80127ba:	3901      	subs	r1, #1
 80127bc:	ee17 4a90 	vmov	r4, s15
 80127c0:	ec53 2b17 	vmov	r2, r3, d7
 80127c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80127c8:	2401      	movs	r4, #1
 80127ca:	e7a3      	b.n	8012714 <_dtoa_r+0x10c>
 80127cc:	2301      	movs	r3, #1
 80127ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80127d0:	1a43      	subs	r3, r0, r1
 80127d2:	1e5a      	subs	r2, r3, #1
 80127d4:	bf45      	ittet	mi
 80127d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80127da:	9304      	strmi	r3, [sp, #16]
 80127dc:	2300      	movpl	r3, #0
 80127de:	2300      	movmi	r3, #0
 80127e0:	9205      	str	r2, [sp, #20]
 80127e2:	bf54      	ite	pl
 80127e4:	9304      	strpl	r3, [sp, #16]
 80127e6:	9305      	strmi	r3, [sp, #20]
 80127e8:	f1bb 0f00 	cmp.w	fp, #0
 80127ec:	db18      	blt.n	8012820 <_dtoa_r+0x218>
 80127ee:	9b05      	ldr	r3, [sp, #20]
 80127f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80127f4:	445b      	add	r3, fp
 80127f6:	9305      	str	r3, [sp, #20]
 80127f8:	2300      	movs	r3, #0
 80127fa:	9a06      	ldr	r2, [sp, #24]
 80127fc:	2a09      	cmp	r2, #9
 80127fe:	d849      	bhi.n	8012894 <_dtoa_r+0x28c>
 8012800:	2a05      	cmp	r2, #5
 8012802:	bfc4      	itt	gt
 8012804:	3a04      	subgt	r2, #4
 8012806:	9206      	strgt	r2, [sp, #24]
 8012808:	9a06      	ldr	r2, [sp, #24]
 801280a:	f1a2 0202 	sub.w	r2, r2, #2
 801280e:	bfcc      	ite	gt
 8012810:	2400      	movgt	r4, #0
 8012812:	2401      	movle	r4, #1
 8012814:	2a03      	cmp	r2, #3
 8012816:	d848      	bhi.n	80128aa <_dtoa_r+0x2a2>
 8012818:	e8df f002 	tbb	[pc, r2]
 801281c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012820:	9b04      	ldr	r3, [sp, #16]
 8012822:	2200      	movs	r2, #0
 8012824:	eba3 030b 	sub.w	r3, r3, fp
 8012828:	9304      	str	r3, [sp, #16]
 801282a:	9209      	str	r2, [sp, #36]	; 0x24
 801282c:	f1cb 0300 	rsb	r3, fp, #0
 8012830:	e7e3      	b.n	80127fa <_dtoa_r+0x1f2>
 8012832:	2200      	movs	r2, #0
 8012834:	9207      	str	r2, [sp, #28]
 8012836:	9a08      	ldr	r2, [sp, #32]
 8012838:	2a00      	cmp	r2, #0
 801283a:	dc39      	bgt.n	80128b0 <_dtoa_r+0x2a8>
 801283c:	f04f 0a01 	mov.w	sl, #1
 8012840:	46d1      	mov	r9, sl
 8012842:	4652      	mov	r2, sl
 8012844:	f8cd a020 	str.w	sl, [sp, #32]
 8012848:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801284a:	2100      	movs	r1, #0
 801284c:	6079      	str	r1, [r7, #4]
 801284e:	2004      	movs	r0, #4
 8012850:	f100 0c14 	add.w	ip, r0, #20
 8012854:	4594      	cmp	ip, r2
 8012856:	6879      	ldr	r1, [r7, #4]
 8012858:	d92f      	bls.n	80128ba <_dtoa_r+0x2b2>
 801285a:	4630      	mov	r0, r6
 801285c:	930d      	str	r3, [sp, #52]	; 0x34
 801285e:	f000 fe87 	bl	8013570 <_Balloc>
 8012862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012864:	9001      	str	r0, [sp, #4]
 8012866:	4602      	mov	r2, r0
 8012868:	2800      	cmp	r0, #0
 801286a:	d149      	bne.n	8012900 <_dtoa_r+0x2f8>
 801286c:	4b23      	ldr	r3, [pc, #140]	; (80128fc <_dtoa_r+0x2f4>)
 801286e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012872:	e6e1      	b.n	8012638 <_dtoa_r+0x30>
 8012874:	2201      	movs	r2, #1
 8012876:	e7dd      	b.n	8012834 <_dtoa_r+0x22c>
 8012878:	2200      	movs	r2, #0
 801287a:	9207      	str	r2, [sp, #28]
 801287c:	9a08      	ldr	r2, [sp, #32]
 801287e:	eb0b 0a02 	add.w	sl, fp, r2
 8012882:	f10a 0901 	add.w	r9, sl, #1
 8012886:	464a      	mov	r2, r9
 8012888:	2a01      	cmp	r2, #1
 801288a:	bfb8      	it	lt
 801288c:	2201      	movlt	r2, #1
 801288e:	e7db      	b.n	8012848 <_dtoa_r+0x240>
 8012890:	2201      	movs	r2, #1
 8012892:	e7f2      	b.n	801287a <_dtoa_r+0x272>
 8012894:	2401      	movs	r4, #1
 8012896:	2200      	movs	r2, #0
 8012898:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801289c:	f04f 3aff 	mov.w	sl, #4294967295
 80128a0:	2100      	movs	r1, #0
 80128a2:	46d1      	mov	r9, sl
 80128a4:	2212      	movs	r2, #18
 80128a6:	9108      	str	r1, [sp, #32]
 80128a8:	e7ce      	b.n	8012848 <_dtoa_r+0x240>
 80128aa:	2201      	movs	r2, #1
 80128ac:	9207      	str	r2, [sp, #28]
 80128ae:	e7f5      	b.n	801289c <_dtoa_r+0x294>
 80128b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80128b4:	46d1      	mov	r9, sl
 80128b6:	4652      	mov	r2, sl
 80128b8:	e7c6      	b.n	8012848 <_dtoa_r+0x240>
 80128ba:	3101      	adds	r1, #1
 80128bc:	6079      	str	r1, [r7, #4]
 80128be:	0040      	lsls	r0, r0, #1
 80128c0:	e7c6      	b.n	8012850 <_dtoa_r+0x248>
 80128c2:	bf00      	nop
 80128c4:	f3af 8000 	nop.w
 80128c8:	636f4361 	.word	0x636f4361
 80128cc:	3fd287a7 	.word	0x3fd287a7
 80128d0:	8b60c8b3 	.word	0x8b60c8b3
 80128d4:	3fc68a28 	.word	0x3fc68a28
 80128d8:	509f79fb 	.word	0x509f79fb
 80128dc:	3fd34413 	.word	0x3fd34413
 80128e0:	08018e55 	.word	0x08018e55
 80128e4:	08018f31 	.word	0x08018f31
 80128e8:	7ff00000 	.word	0x7ff00000
 80128ec:	08018f2d 	.word	0x08018f2d
 80128f0:	08018f24 	.word	0x08018f24
 80128f4:	08018e32 	.word	0x08018e32
 80128f8:	08019088 	.word	0x08019088
 80128fc:	08018f8c 	.word	0x08018f8c
 8012900:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012902:	9901      	ldr	r1, [sp, #4]
 8012904:	6011      	str	r1, [r2, #0]
 8012906:	f1b9 0f0e 	cmp.w	r9, #14
 801290a:	d86c      	bhi.n	80129e6 <_dtoa_r+0x3de>
 801290c:	2c00      	cmp	r4, #0
 801290e:	d06a      	beq.n	80129e6 <_dtoa_r+0x3de>
 8012910:	f1bb 0f00 	cmp.w	fp, #0
 8012914:	f340 80a0 	ble.w	8012a58 <_dtoa_r+0x450>
 8012918:	49c1      	ldr	r1, [pc, #772]	; (8012c20 <_dtoa_r+0x618>)
 801291a:	f00b 020f 	and.w	r2, fp, #15
 801291e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012922:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012926:	ed92 7b00 	vldr	d7, [r2]
 801292a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801292e:	f000 8087 	beq.w	8012a40 <_dtoa_r+0x438>
 8012932:	4abc      	ldr	r2, [pc, #752]	; (8012c24 <_dtoa_r+0x61c>)
 8012934:	ed92 6b08 	vldr	d6, [r2, #32]
 8012938:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801293c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012940:	f001 010f 	and.w	r1, r1, #15
 8012944:	2203      	movs	r2, #3
 8012946:	48b7      	ldr	r0, [pc, #732]	; (8012c24 <_dtoa_r+0x61c>)
 8012948:	2900      	cmp	r1, #0
 801294a:	d17b      	bne.n	8012a44 <_dtoa_r+0x43c>
 801294c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012950:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012954:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801295a:	2900      	cmp	r1, #0
 801295c:	f000 80a2 	beq.w	8012aa4 <_dtoa_r+0x49c>
 8012960:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012964:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012968:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012970:	f140 8098 	bpl.w	8012aa4 <_dtoa_r+0x49c>
 8012974:	f1b9 0f00 	cmp.w	r9, #0
 8012978:	f000 8094 	beq.w	8012aa4 <_dtoa_r+0x49c>
 801297c:	f1ba 0f00 	cmp.w	sl, #0
 8012980:	dd2f      	ble.n	80129e2 <_dtoa_r+0x3da>
 8012982:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012986:	ee27 7b06 	vmul.f64	d7, d7, d6
 801298a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801298e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012992:	3201      	adds	r2, #1
 8012994:	4650      	mov	r0, sl
 8012996:	ed9d 6b02 	vldr	d6, [sp, #8]
 801299a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801299e:	ee07 2a90 	vmov	s15, r2
 80129a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80129a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80129aa:	ee15 4a90 	vmov	r4, s11
 80129ae:	ec52 1b15 	vmov	r1, r2, d5
 80129b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d177      	bne.n	8012aaa <_dtoa_r+0x4a2>
 80129ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80129be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80129c2:	ec42 1b17 	vmov	d7, r1, r2
 80129c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ce:	f300 8263 	bgt.w	8012e98 <_dtoa_r+0x890>
 80129d2:	eeb1 7b47 	vneg.f64	d7, d7
 80129d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	f100 8258 	bmi.w	8012e92 <_dtoa_r+0x88a>
 80129e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80129e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129e8:	2a00      	cmp	r2, #0
 80129ea:	f2c0 811d 	blt.w	8012c28 <_dtoa_r+0x620>
 80129ee:	f1bb 0f0e 	cmp.w	fp, #14
 80129f2:	f300 8119 	bgt.w	8012c28 <_dtoa_r+0x620>
 80129f6:	4b8a      	ldr	r3, [pc, #552]	; (8012c20 <_dtoa_r+0x618>)
 80129f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80129fc:	ed93 6b00 	vldr	d6, [r3]
 8012a00:	9b08      	ldr	r3, [sp, #32]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	f280 80b7 	bge.w	8012b76 <_dtoa_r+0x56e>
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	f300 80b3 	bgt.w	8012b76 <_dtoa_r+0x56e>
 8012a10:	f040 823f 	bne.w	8012e92 <_dtoa_r+0x88a>
 8012a14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012a18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a28:	464c      	mov	r4, r9
 8012a2a:	464f      	mov	r7, r9
 8012a2c:	f280 8215 	bge.w	8012e5a <_dtoa_r+0x852>
 8012a30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a34:	2331      	movs	r3, #49	; 0x31
 8012a36:	f808 3b01 	strb.w	r3, [r8], #1
 8012a3a:	f10b 0b01 	add.w	fp, fp, #1
 8012a3e:	e211      	b.n	8012e64 <_dtoa_r+0x85c>
 8012a40:	2202      	movs	r2, #2
 8012a42:	e780      	b.n	8012946 <_dtoa_r+0x33e>
 8012a44:	07cc      	lsls	r4, r1, #31
 8012a46:	d504      	bpl.n	8012a52 <_dtoa_r+0x44a>
 8012a48:	ed90 6b00 	vldr	d6, [r0]
 8012a4c:	3201      	adds	r2, #1
 8012a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a52:	1049      	asrs	r1, r1, #1
 8012a54:	3008      	adds	r0, #8
 8012a56:	e777      	b.n	8012948 <_dtoa_r+0x340>
 8012a58:	d022      	beq.n	8012aa0 <_dtoa_r+0x498>
 8012a5a:	f1cb 0100 	rsb	r1, fp, #0
 8012a5e:	4a70      	ldr	r2, [pc, #448]	; (8012c20 <_dtoa_r+0x618>)
 8012a60:	f001 000f 	and.w	r0, r1, #15
 8012a64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a68:	ed92 7b00 	vldr	d7, [r2]
 8012a6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012a70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a74:	486b      	ldr	r0, [pc, #428]	; (8012c24 <_dtoa_r+0x61c>)
 8012a76:	1109      	asrs	r1, r1, #4
 8012a78:	2400      	movs	r4, #0
 8012a7a:	2202      	movs	r2, #2
 8012a7c:	b929      	cbnz	r1, 8012a8a <_dtoa_r+0x482>
 8012a7e:	2c00      	cmp	r4, #0
 8012a80:	f43f af6a 	beq.w	8012958 <_dtoa_r+0x350>
 8012a84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a88:	e766      	b.n	8012958 <_dtoa_r+0x350>
 8012a8a:	07cf      	lsls	r7, r1, #31
 8012a8c:	d505      	bpl.n	8012a9a <_dtoa_r+0x492>
 8012a8e:	ed90 6b00 	vldr	d6, [r0]
 8012a92:	3201      	adds	r2, #1
 8012a94:	2401      	movs	r4, #1
 8012a96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a9a:	1049      	asrs	r1, r1, #1
 8012a9c:	3008      	adds	r0, #8
 8012a9e:	e7ed      	b.n	8012a7c <_dtoa_r+0x474>
 8012aa0:	2202      	movs	r2, #2
 8012aa2:	e759      	b.n	8012958 <_dtoa_r+0x350>
 8012aa4:	465f      	mov	r7, fp
 8012aa6:	4648      	mov	r0, r9
 8012aa8:	e775      	b.n	8012996 <_dtoa_r+0x38e>
 8012aaa:	ec42 1b17 	vmov	d7, r1, r2
 8012aae:	4a5c      	ldr	r2, [pc, #368]	; (8012c20 <_dtoa_r+0x618>)
 8012ab0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012ab4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012ab8:	9a01      	ldr	r2, [sp, #4]
 8012aba:	1814      	adds	r4, r2, r0
 8012abc:	9a07      	ldr	r2, [sp, #28]
 8012abe:	b352      	cbz	r2, 8012b16 <_dtoa_r+0x50e>
 8012ac0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012ac4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012ac8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012acc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012ad0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ad4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ad8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012adc:	ee14 2a90 	vmov	r2, s9
 8012ae0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ae4:	3230      	adds	r2, #48	; 0x30
 8012ae6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012aea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	f808 2b01 	strb.w	r2, [r8], #1
 8012af6:	d439      	bmi.n	8012b6c <_dtoa_r+0x564>
 8012af8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012afc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b04:	d472      	bmi.n	8012bec <_dtoa_r+0x5e4>
 8012b06:	45a0      	cmp	r8, r4
 8012b08:	f43f af6b 	beq.w	80129e2 <_dtoa_r+0x3da>
 8012b0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012b10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b14:	e7e0      	b.n	8012ad8 <_dtoa_r+0x4d0>
 8012b16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b1e:	4621      	mov	r1, r4
 8012b20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012b24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b28:	ee14 2a90 	vmov	r2, s9
 8012b2c:	3230      	adds	r2, #48	; 0x30
 8012b2e:	f808 2b01 	strb.w	r2, [r8], #1
 8012b32:	45a0      	cmp	r8, r4
 8012b34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b3c:	d118      	bne.n	8012b70 <_dtoa_r+0x568>
 8012b3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012b42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012b46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4e:	dc4d      	bgt.n	8012bec <_dtoa_r+0x5e4>
 8012b50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012b54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	f57f af41 	bpl.w	80129e2 <_dtoa_r+0x3da>
 8012b60:	4688      	mov	r8, r1
 8012b62:	3901      	subs	r1, #1
 8012b64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012b68:	2b30      	cmp	r3, #48	; 0x30
 8012b6a:	d0f9      	beq.n	8012b60 <_dtoa_r+0x558>
 8012b6c:	46bb      	mov	fp, r7
 8012b6e:	e02a      	b.n	8012bc6 <_dtoa_r+0x5be>
 8012b70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b74:	e7d6      	b.n	8012b24 <_dtoa_r+0x51c>
 8012b76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012b7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012b86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012b8a:	ee15 3a10 	vmov	r3, s10
 8012b8e:	3330      	adds	r3, #48	; 0x30
 8012b90:	f808 3b01 	strb.w	r3, [r8], #1
 8012b94:	9b01      	ldr	r3, [sp, #4]
 8012b96:	eba8 0303 	sub.w	r3, r8, r3
 8012b9a:	4599      	cmp	r9, r3
 8012b9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ba0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012ba4:	d133      	bne.n	8012c0e <_dtoa_r+0x606>
 8012ba6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012baa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb2:	dc1a      	bgt.n	8012bea <_dtoa_r+0x5e2>
 8012bb4:	eeb4 7b46 	vcmp.f64	d7, d6
 8012bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bbc:	d103      	bne.n	8012bc6 <_dtoa_r+0x5be>
 8012bbe:	ee15 3a10 	vmov	r3, s10
 8012bc2:	07d9      	lsls	r1, r3, #31
 8012bc4:	d411      	bmi.n	8012bea <_dtoa_r+0x5e2>
 8012bc6:	4629      	mov	r1, r5
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f000 fd11 	bl	80135f0 <_Bfree>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bd2:	f888 3000 	strb.w	r3, [r8]
 8012bd6:	f10b 0301 	add.w	r3, fp, #1
 8012bda:	6013      	str	r3, [r2, #0]
 8012bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f43f ad61 	beq.w	80126a6 <_dtoa_r+0x9e>
 8012be4:	f8c3 8000 	str.w	r8, [r3]
 8012be8:	e55d      	b.n	80126a6 <_dtoa_r+0x9e>
 8012bea:	465f      	mov	r7, fp
 8012bec:	4643      	mov	r3, r8
 8012bee:	4698      	mov	r8, r3
 8012bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bf4:	2a39      	cmp	r2, #57	; 0x39
 8012bf6:	d106      	bne.n	8012c06 <_dtoa_r+0x5fe>
 8012bf8:	9a01      	ldr	r2, [sp, #4]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d1f7      	bne.n	8012bee <_dtoa_r+0x5e6>
 8012bfe:	9901      	ldr	r1, [sp, #4]
 8012c00:	2230      	movs	r2, #48	; 0x30
 8012c02:	3701      	adds	r7, #1
 8012c04:	700a      	strb	r2, [r1, #0]
 8012c06:	781a      	ldrb	r2, [r3, #0]
 8012c08:	3201      	adds	r2, #1
 8012c0a:	701a      	strb	r2, [r3, #0]
 8012c0c:	e7ae      	b.n	8012b6c <_dtoa_r+0x564>
 8012c0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1a:	d1b2      	bne.n	8012b82 <_dtoa_r+0x57a>
 8012c1c:	e7d3      	b.n	8012bc6 <_dtoa_r+0x5be>
 8012c1e:	bf00      	nop
 8012c20:	08019088 	.word	0x08019088
 8012c24:	08019060 	.word	0x08019060
 8012c28:	9907      	ldr	r1, [sp, #28]
 8012c2a:	2900      	cmp	r1, #0
 8012c2c:	f000 80d0 	beq.w	8012dd0 <_dtoa_r+0x7c8>
 8012c30:	9906      	ldr	r1, [sp, #24]
 8012c32:	2901      	cmp	r1, #1
 8012c34:	f300 80b4 	bgt.w	8012da0 <_dtoa_r+0x798>
 8012c38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c3a:	2900      	cmp	r1, #0
 8012c3c:	f000 80ac 	beq.w	8012d98 <_dtoa_r+0x790>
 8012c40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012c44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012c48:	461c      	mov	r4, r3
 8012c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8012c4c:	9b04      	ldr	r3, [sp, #16]
 8012c4e:	4413      	add	r3, r2
 8012c50:	9304      	str	r3, [sp, #16]
 8012c52:	9b05      	ldr	r3, [sp, #20]
 8012c54:	2101      	movs	r1, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	4630      	mov	r0, r6
 8012c5a:	9305      	str	r3, [sp, #20]
 8012c5c:	f000 fd80 	bl	8013760 <__i2b>
 8012c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c62:	4607      	mov	r7, r0
 8012c64:	f1b8 0f00 	cmp.w	r8, #0
 8012c68:	dd0d      	ble.n	8012c86 <_dtoa_r+0x67e>
 8012c6a:	9a05      	ldr	r2, [sp, #20]
 8012c6c:	2a00      	cmp	r2, #0
 8012c6e:	dd0a      	ble.n	8012c86 <_dtoa_r+0x67e>
 8012c70:	4542      	cmp	r2, r8
 8012c72:	9904      	ldr	r1, [sp, #16]
 8012c74:	bfa8      	it	ge
 8012c76:	4642      	movge	r2, r8
 8012c78:	1a89      	subs	r1, r1, r2
 8012c7a:	9104      	str	r1, [sp, #16]
 8012c7c:	9905      	ldr	r1, [sp, #20]
 8012c7e:	eba8 0802 	sub.w	r8, r8, r2
 8012c82:	1a8a      	subs	r2, r1, r2
 8012c84:	9205      	str	r2, [sp, #20]
 8012c86:	b303      	cbz	r3, 8012cca <_dtoa_r+0x6c2>
 8012c88:	9a07      	ldr	r2, [sp, #28]
 8012c8a:	2a00      	cmp	r2, #0
 8012c8c:	f000 80a5 	beq.w	8012dda <_dtoa_r+0x7d2>
 8012c90:	2c00      	cmp	r4, #0
 8012c92:	dd13      	ble.n	8012cbc <_dtoa_r+0x6b4>
 8012c94:	4639      	mov	r1, r7
 8012c96:	4622      	mov	r2, r4
 8012c98:	4630      	mov	r0, r6
 8012c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8012c9c:	f000 fe20 	bl	80138e0 <__pow5mult>
 8012ca0:	462a      	mov	r2, r5
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	4607      	mov	r7, r0
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	f000 fd70 	bl	801378c <__multiply>
 8012cac:	4629      	mov	r1, r5
 8012cae:	900a      	str	r0, [sp, #40]	; 0x28
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f000 fc9d 	bl	80135f0 <_Bfree>
 8012cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cba:	4615      	mov	r5, r2
 8012cbc:	1b1a      	subs	r2, r3, r4
 8012cbe:	d004      	beq.n	8012cca <_dtoa_r+0x6c2>
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f000 fe0c 	bl	80138e0 <__pow5mult>
 8012cc8:	4605      	mov	r5, r0
 8012cca:	2101      	movs	r1, #1
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f000 fd47 	bl	8013760 <__i2b>
 8012cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	f340 8081 	ble.w	8012dde <_dtoa_r+0x7d6>
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4601      	mov	r1, r0
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f000 fdfd 	bl	80138e0 <__pow5mult>
 8012ce6:	9b06      	ldr	r3, [sp, #24]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	4604      	mov	r4, r0
 8012cec:	dd7a      	ble.n	8012de4 <_dtoa_r+0x7dc>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8012cf2:	6922      	ldr	r2, [r4, #16]
 8012cf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012cf8:	6910      	ldr	r0, [r2, #16]
 8012cfa:	f000 fce1 	bl	80136c0 <__hi0bits>
 8012cfe:	f1c0 0020 	rsb	r0, r0, #32
 8012d02:	9b05      	ldr	r3, [sp, #20]
 8012d04:	4418      	add	r0, r3
 8012d06:	f010 001f 	ands.w	r0, r0, #31
 8012d0a:	f000 808c 	beq.w	8012e26 <_dtoa_r+0x81e>
 8012d0e:	f1c0 0220 	rsb	r2, r0, #32
 8012d12:	2a04      	cmp	r2, #4
 8012d14:	f340 8085 	ble.w	8012e22 <_dtoa_r+0x81a>
 8012d18:	f1c0 001c 	rsb	r0, r0, #28
 8012d1c:	9b04      	ldr	r3, [sp, #16]
 8012d1e:	4403      	add	r3, r0
 8012d20:	9304      	str	r3, [sp, #16]
 8012d22:	9b05      	ldr	r3, [sp, #20]
 8012d24:	4403      	add	r3, r0
 8012d26:	4480      	add	r8, r0
 8012d28:	9305      	str	r3, [sp, #20]
 8012d2a:	9b04      	ldr	r3, [sp, #16]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	dd05      	ble.n	8012d3c <_dtoa_r+0x734>
 8012d30:	4629      	mov	r1, r5
 8012d32:	461a      	mov	r2, r3
 8012d34:	4630      	mov	r0, r6
 8012d36:	f000 fe2d 	bl	8013994 <__lshift>
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	9b05      	ldr	r3, [sp, #20]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	dd05      	ble.n	8012d4e <_dtoa_r+0x746>
 8012d42:	4621      	mov	r1, r4
 8012d44:	461a      	mov	r2, r3
 8012d46:	4630      	mov	r0, r6
 8012d48:	f000 fe24 	bl	8013994 <__lshift>
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d06a      	beq.n	8012e2a <_dtoa_r+0x822>
 8012d54:	4621      	mov	r1, r4
 8012d56:	4628      	mov	r0, r5
 8012d58:	f000 fe8c 	bl	8013a74 <__mcmp>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	da64      	bge.n	8012e2a <_dtoa_r+0x822>
 8012d60:	2300      	movs	r3, #0
 8012d62:	4629      	mov	r1, r5
 8012d64:	220a      	movs	r2, #10
 8012d66:	4630      	mov	r0, r6
 8012d68:	f000 fc64 	bl	8013634 <__multadd>
 8012d6c:	9b07      	ldr	r3, [sp, #28]
 8012d6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d72:	4605      	mov	r5, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	f000 8191 	beq.w	801309c <_dtoa_r+0xa94>
 8012d7a:	4639      	mov	r1, r7
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	220a      	movs	r2, #10
 8012d80:	4630      	mov	r0, r6
 8012d82:	f000 fc57 	bl	8013634 <__multadd>
 8012d86:	f1ba 0f00 	cmp.w	sl, #0
 8012d8a:	4607      	mov	r7, r0
 8012d8c:	f300 808d 	bgt.w	8012eaa <_dtoa_r+0x8a2>
 8012d90:	9b06      	ldr	r3, [sp, #24]
 8012d92:	2b02      	cmp	r3, #2
 8012d94:	dc50      	bgt.n	8012e38 <_dtoa_r+0x830>
 8012d96:	e088      	b.n	8012eaa <_dtoa_r+0x8a2>
 8012d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012d9e:	e751      	b.n	8012c44 <_dtoa_r+0x63c>
 8012da0:	f109 34ff 	add.w	r4, r9, #4294967295
 8012da4:	42a3      	cmp	r3, r4
 8012da6:	bfbf      	itttt	lt
 8012da8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012daa:	1ae3      	sublt	r3, r4, r3
 8012dac:	18d2      	addlt	r2, r2, r3
 8012dae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012db0:	bfb6      	itet	lt
 8012db2:	4623      	movlt	r3, r4
 8012db4:	1b1c      	subge	r4, r3, r4
 8012db6:	2400      	movlt	r4, #0
 8012db8:	f1b9 0f00 	cmp.w	r9, #0
 8012dbc:	bfb5      	itete	lt
 8012dbe:	9a04      	ldrlt	r2, [sp, #16]
 8012dc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012dc4:	eba2 0809 	sublt.w	r8, r2, r9
 8012dc8:	464a      	movge	r2, r9
 8012dca:	bfb8      	it	lt
 8012dcc:	2200      	movlt	r2, #0
 8012dce:	e73c      	b.n	8012c4a <_dtoa_r+0x642>
 8012dd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012dd4:	9f07      	ldr	r7, [sp, #28]
 8012dd6:	461c      	mov	r4, r3
 8012dd8:	e744      	b.n	8012c64 <_dtoa_r+0x65c>
 8012dda:	461a      	mov	r2, r3
 8012ddc:	e770      	b.n	8012cc0 <_dtoa_r+0x6b8>
 8012dde:	9b06      	ldr	r3, [sp, #24]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	dc18      	bgt.n	8012e16 <_dtoa_r+0x80e>
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	b9b3      	cbnz	r3, 8012e16 <_dtoa_r+0x80e>
 8012de8:	9b03      	ldr	r3, [sp, #12]
 8012dea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012dee:	b9a2      	cbnz	r2, 8012e1a <_dtoa_r+0x812>
 8012df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012df4:	0d12      	lsrs	r2, r2, #20
 8012df6:	0512      	lsls	r2, r2, #20
 8012df8:	b18a      	cbz	r2, 8012e1e <_dtoa_r+0x816>
 8012dfa:	9b04      	ldr	r3, [sp, #16]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	9304      	str	r3, [sp, #16]
 8012e00:	9b05      	ldr	r3, [sp, #20]
 8012e02:	3301      	adds	r3, #1
 8012e04:	9305      	str	r3, [sp, #20]
 8012e06:	2301      	movs	r3, #1
 8012e08:	930a      	str	r3, [sp, #40]	; 0x28
 8012e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f47f af70 	bne.w	8012cf2 <_dtoa_r+0x6ea>
 8012e12:	2001      	movs	r0, #1
 8012e14:	e775      	b.n	8012d02 <_dtoa_r+0x6fa>
 8012e16:	2300      	movs	r3, #0
 8012e18:	e7f6      	b.n	8012e08 <_dtoa_r+0x800>
 8012e1a:	9b02      	ldr	r3, [sp, #8]
 8012e1c:	e7f4      	b.n	8012e08 <_dtoa_r+0x800>
 8012e1e:	920a      	str	r2, [sp, #40]	; 0x28
 8012e20:	e7f3      	b.n	8012e0a <_dtoa_r+0x802>
 8012e22:	d082      	beq.n	8012d2a <_dtoa_r+0x722>
 8012e24:	4610      	mov	r0, r2
 8012e26:	301c      	adds	r0, #28
 8012e28:	e778      	b.n	8012d1c <_dtoa_r+0x714>
 8012e2a:	f1b9 0f00 	cmp.w	r9, #0
 8012e2e:	dc37      	bgt.n	8012ea0 <_dtoa_r+0x898>
 8012e30:	9b06      	ldr	r3, [sp, #24]
 8012e32:	2b02      	cmp	r3, #2
 8012e34:	dd34      	ble.n	8012ea0 <_dtoa_r+0x898>
 8012e36:	46ca      	mov	sl, r9
 8012e38:	f1ba 0f00 	cmp.w	sl, #0
 8012e3c:	d10d      	bne.n	8012e5a <_dtoa_r+0x852>
 8012e3e:	4621      	mov	r1, r4
 8012e40:	4653      	mov	r3, sl
 8012e42:	2205      	movs	r2, #5
 8012e44:	4630      	mov	r0, r6
 8012e46:	f000 fbf5 	bl	8013634 <__multadd>
 8012e4a:	4601      	mov	r1, r0
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f000 fe10 	bl	8013a74 <__mcmp>
 8012e54:	2800      	cmp	r0, #0
 8012e56:	f73f adeb 	bgt.w	8012a30 <_dtoa_r+0x428>
 8012e5a:	9b08      	ldr	r3, [sp, #32]
 8012e5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e60:	ea6f 0b03 	mvn.w	fp, r3
 8012e64:	f04f 0900 	mov.w	r9, #0
 8012e68:	4621      	mov	r1, r4
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	f000 fbc0 	bl	80135f0 <_Bfree>
 8012e70:	2f00      	cmp	r7, #0
 8012e72:	f43f aea8 	beq.w	8012bc6 <_dtoa_r+0x5be>
 8012e76:	f1b9 0f00 	cmp.w	r9, #0
 8012e7a:	d005      	beq.n	8012e88 <_dtoa_r+0x880>
 8012e7c:	45b9      	cmp	r9, r7
 8012e7e:	d003      	beq.n	8012e88 <_dtoa_r+0x880>
 8012e80:	4649      	mov	r1, r9
 8012e82:	4630      	mov	r0, r6
 8012e84:	f000 fbb4 	bl	80135f0 <_Bfree>
 8012e88:	4639      	mov	r1, r7
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f000 fbb0 	bl	80135f0 <_Bfree>
 8012e90:	e699      	b.n	8012bc6 <_dtoa_r+0x5be>
 8012e92:	2400      	movs	r4, #0
 8012e94:	4627      	mov	r7, r4
 8012e96:	e7e0      	b.n	8012e5a <_dtoa_r+0x852>
 8012e98:	46bb      	mov	fp, r7
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	e5c7      	b.n	8012a30 <_dtoa_r+0x428>
 8012ea0:	9b07      	ldr	r3, [sp, #28]
 8012ea2:	46ca      	mov	sl, r9
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	f000 8100 	beq.w	80130aa <_dtoa_r+0xaa2>
 8012eaa:	f1b8 0f00 	cmp.w	r8, #0
 8012eae:	dd05      	ble.n	8012ebc <_dtoa_r+0x8b4>
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	4642      	mov	r2, r8
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f000 fd6d 	bl	8013994 <__lshift>
 8012eba:	4607      	mov	r7, r0
 8012ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d05d      	beq.n	8012f7e <_dtoa_r+0x976>
 8012ec2:	6879      	ldr	r1, [r7, #4]
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f000 fb53 	bl	8013570 <_Balloc>
 8012eca:	4680      	mov	r8, r0
 8012ecc:	b928      	cbnz	r0, 8012eda <_dtoa_r+0x8d2>
 8012ece:	4b82      	ldr	r3, [pc, #520]	; (80130d8 <_dtoa_r+0xad0>)
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012ed6:	f7ff bbaf 	b.w	8012638 <_dtoa_r+0x30>
 8012eda:	693a      	ldr	r2, [r7, #16]
 8012edc:	3202      	adds	r2, #2
 8012ede:	0092      	lsls	r2, r2, #2
 8012ee0:	f107 010c 	add.w	r1, r7, #12
 8012ee4:	300c      	adds	r0, #12
 8012ee6:	f7fe faf9 	bl	80114dc <memcpy>
 8012eea:	2201      	movs	r2, #1
 8012eec:	4641      	mov	r1, r8
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f000 fd50 	bl	8013994 <__lshift>
 8012ef4:	9b01      	ldr	r3, [sp, #4]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	9304      	str	r3, [sp, #16]
 8012efa:	9b01      	ldr	r3, [sp, #4]
 8012efc:	4453      	add	r3, sl
 8012efe:	9308      	str	r3, [sp, #32]
 8012f00:	9b02      	ldr	r3, [sp, #8]
 8012f02:	f003 0301 	and.w	r3, r3, #1
 8012f06:	46b9      	mov	r9, r7
 8012f08:	9307      	str	r3, [sp, #28]
 8012f0a:	4607      	mov	r7, r0
 8012f0c:	9b04      	ldr	r3, [sp, #16]
 8012f0e:	4621      	mov	r1, r4
 8012f10:	3b01      	subs	r3, #1
 8012f12:	4628      	mov	r0, r5
 8012f14:	9302      	str	r3, [sp, #8]
 8012f16:	f7ff faea 	bl	80124ee <quorem>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	3330      	adds	r3, #48	; 0x30
 8012f1e:	9005      	str	r0, [sp, #20]
 8012f20:	4649      	mov	r1, r9
 8012f22:	4628      	mov	r0, r5
 8012f24:	9309      	str	r3, [sp, #36]	; 0x24
 8012f26:	f000 fda5 	bl	8013a74 <__mcmp>
 8012f2a:	463a      	mov	r2, r7
 8012f2c:	4682      	mov	sl, r0
 8012f2e:	4621      	mov	r1, r4
 8012f30:	4630      	mov	r0, r6
 8012f32:	f000 fdbb 	bl	8013aac <__mdiff>
 8012f36:	68c2      	ldr	r2, [r0, #12]
 8012f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f3a:	4680      	mov	r8, r0
 8012f3c:	bb0a      	cbnz	r2, 8012f82 <_dtoa_r+0x97a>
 8012f3e:	4601      	mov	r1, r0
 8012f40:	4628      	mov	r0, r5
 8012f42:	f000 fd97 	bl	8013a74 <__mcmp>
 8012f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f48:	4602      	mov	r2, r0
 8012f4a:	4641      	mov	r1, r8
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012f52:	f000 fb4d 	bl	80135f0 <_Bfree>
 8012f56:	9b06      	ldr	r3, [sp, #24]
 8012f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012f5e:	ea43 0102 	orr.w	r1, r3, r2
 8012f62:	9b07      	ldr	r3, [sp, #28]
 8012f64:	430b      	orrs	r3, r1
 8012f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f68:	d10d      	bne.n	8012f86 <_dtoa_r+0x97e>
 8012f6a:	2b39      	cmp	r3, #57	; 0x39
 8012f6c:	d029      	beq.n	8012fc2 <_dtoa_r+0x9ba>
 8012f6e:	f1ba 0f00 	cmp.w	sl, #0
 8012f72:	dd01      	ble.n	8012f78 <_dtoa_r+0x970>
 8012f74:	9b05      	ldr	r3, [sp, #20]
 8012f76:	3331      	adds	r3, #49	; 0x31
 8012f78:	9a02      	ldr	r2, [sp, #8]
 8012f7a:	7013      	strb	r3, [r2, #0]
 8012f7c:	e774      	b.n	8012e68 <_dtoa_r+0x860>
 8012f7e:	4638      	mov	r0, r7
 8012f80:	e7b8      	b.n	8012ef4 <_dtoa_r+0x8ec>
 8012f82:	2201      	movs	r2, #1
 8012f84:	e7e1      	b.n	8012f4a <_dtoa_r+0x942>
 8012f86:	f1ba 0f00 	cmp.w	sl, #0
 8012f8a:	db06      	blt.n	8012f9a <_dtoa_r+0x992>
 8012f8c:	9906      	ldr	r1, [sp, #24]
 8012f8e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012f92:	9907      	ldr	r1, [sp, #28]
 8012f94:	ea5a 0101 	orrs.w	r1, sl, r1
 8012f98:	d120      	bne.n	8012fdc <_dtoa_r+0x9d4>
 8012f9a:	2a00      	cmp	r2, #0
 8012f9c:	ddec      	ble.n	8012f78 <_dtoa_r+0x970>
 8012f9e:	4629      	mov	r1, r5
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	9304      	str	r3, [sp, #16]
 8012fa6:	f000 fcf5 	bl	8013994 <__lshift>
 8012faa:	4621      	mov	r1, r4
 8012fac:	4605      	mov	r5, r0
 8012fae:	f000 fd61 	bl	8013a74 <__mcmp>
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	9b04      	ldr	r3, [sp, #16]
 8012fb6:	dc02      	bgt.n	8012fbe <_dtoa_r+0x9b6>
 8012fb8:	d1de      	bne.n	8012f78 <_dtoa_r+0x970>
 8012fba:	07da      	lsls	r2, r3, #31
 8012fbc:	d5dc      	bpl.n	8012f78 <_dtoa_r+0x970>
 8012fbe:	2b39      	cmp	r3, #57	; 0x39
 8012fc0:	d1d8      	bne.n	8012f74 <_dtoa_r+0x96c>
 8012fc2:	9a02      	ldr	r2, [sp, #8]
 8012fc4:	2339      	movs	r3, #57	; 0x39
 8012fc6:	7013      	strb	r3, [r2, #0]
 8012fc8:	4643      	mov	r3, r8
 8012fca:	4698      	mov	r8, r3
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012fd2:	2a39      	cmp	r2, #57	; 0x39
 8012fd4:	d051      	beq.n	801307a <_dtoa_r+0xa72>
 8012fd6:	3201      	adds	r2, #1
 8012fd8:	701a      	strb	r2, [r3, #0]
 8012fda:	e745      	b.n	8012e68 <_dtoa_r+0x860>
 8012fdc:	2a00      	cmp	r2, #0
 8012fde:	dd03      	ble.n	8012fe8 <_dtoa_r+0x9e0>
 8012fe0:	2b39      	cmp	r3, #57	; 0x39
 8012fe2:	d0ee      	beq.n	8012fc2 <_dtoa_r+0x9ba>
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	e7c7      	b.n	8012f78 <_dtoa_r+0x970>
 8012fe8:	9a04      	ldr	r2, [sp, #16]
 8012fea:	9908      	ldr	r1, [sp, #32]
 8012fec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012ff0:	428a      	cmp	r2, r1
 8012ff2:	d02b      	beq.n	801304c <_dtoa_r+0xa44>
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	220a      	movs	r2, #10
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f000 fb1a 	bl	8013634 <__multadd>
 8013000:	45b9      	cmp	r9, r7
 8013002:	4605      	mov	r5, r0
 8013004:	f04f 0300 	mov.w	r3, #0
 8013008:	f04f 020a 	mov.w	r2, #10
 801300c:	4649      	mov	r1, r9
 801300e:	4630      	mov	r0, r6
 8013010:	d107      	bne.n	8013022 <_dtoa_r+0xa1a>
 8013012:	f000 fb0f 	bl	8013634 <__multadd>
 8013016:	4681      	mov	r9, r0
 8013018:	4607      	mov	r7, r0
 801301a:	9b04      	ldr	r3, [sp, #16]
 801301c:	3301      	adds	r3, #1
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	e774      	b.n	8012f0c <_dtoa_r+0x904>
 8013022:	f000 fb07 	bl	8013634 <__multadd>
 8013026:	4639      	mov	r1, r7
 8013028:	4681      	mov	r9, r0
 801302a:	2300      	movs	r3, #0
 801302c:	220a      	movs	r2, #10
 801302e:	4630      	mov	r0, r6
 8013030:	f000 fb00 	bl	8013634 <__multadd>
 8013034:	4607      	mov	r7, r0
 8013036:	e7f0      	b.n	801301a <_dtoa_r+0xa12>
 8013038:	f1ba 0f00 	cmp.w	sl, #0
 801303c:	9a01      	ldr	r2, [sp, #4]
 801303e:	bfcc      	ite	gt
 8013040:	46d0      	movgt	r8, sl
 8013042:	f04f 0801 	movle.w	r8, #1
 8013046:	4490      	add	r8, r2
 8013048:	f04f 0900 	mov.w	r9, #0
 801304c:	4629      	mov	r1, r5
 801304e:	2201      	movs	r2, #1
 8013050:	4630      	mov	r0, r6
 8013052:	9302      	str	r3, [sp, #8]
 8013054:	f000 fc9e 	bl	8013994 <__lshift>
 8013058:	4621      	mov	r1, r4
 801305a:	4605      	mov	r5, r0
 801305c:	f000 fd0a 	bl	8013a74 <__mcmp>
 8013060:	2800      	cmp	r0, #0
 8013062:	dcb1      	bgt.n	8012fc8 <_dtoa_r+0x9c0>
 8013064:	d102      	bne.n	801306c <_dtoa_r+0xa64>
 8013066:	9b02      	ldr	r3, [sp, #8]
 8013068:	07db      	lsls	r3, r3, #31
 801306a:	d4ad      	bmi.n	8012fc8 <_dtoa_r+0x9c0>
 801306c:	4643      	mov	r3, r8
 801306e:	4698      	mov	r8, r3
 8013070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013074:	2a30      	cmp	r2, #48	; 0x30
 8013076:	d0fa      	beq.n	801306e <_dtoa_r+0xa66>
 8013078:	e6f6      	b.n	8012e68 <_dtoa_r+0x860>
 801307a:	9a01      	ldr	r2, [sp, #4]
 801307c:	429a      	cmp	r2, r3
 801307e:	d1a4      	bne.n	8012fca <_dtoa_r+0x9c2>
 8013080:	f10b 0b01 	add.w	fp, fp, #1
 8013084:	2331      	movs	r3, #49	; 0x31
 8013086:	e778      	b.n	8012f7a <_dtoa_r+0x972>
 8013088:	4b14      	ldr	r3, [pc, #80]	; (80130dc <_dtoa_r+0xad4>)
 801308a:	f7ff bb27 	b.w	80126dc <_dtoa_r+0xd4>
 801308e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013090:	2b00      	cmp	r3, #0
 8013092:	f47f ab03 	bne.w	801269c <_dtoa_r+0x94>
 8013096:	4b12      	ldr	r3, [pc, #72]	; (80130e0 <_dtoa_r+0xad8>)
 8013098:	f7ff bb20 	b.w	80126dc <_dtoa_r+0xd4>
 801309c:	f1ba 0f00 	cmp.w	sl, #0
 80130a0:	dc03      	bgt.n	80130aa <_dtoa_r+0xaa2>
 80130a2:	9b06      	ldr	r3, [sp, #24]
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	f73f aec7 	bgt.w	8012e38 <_dtoa_r+0x830>
 80130aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130ae:	4621      	mov	r1, r4
 80130b0:	4628      	mov	r0, r5
 80130b2:	f7ff fa1c 	bl	80124ee <quorem>
 80130b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80130ba:	f808 3b01 	strb.w	r3, [r8], #1
 80130be:	9a01      	ldr	r2, [sp, #4]
 80130c0:	eba8 0202 	sub.w	r2, r8, r2
 80130c4:	4592      	cmp	sl, r2
 80130c6:	ddb7      	ble.n	8013038 <_dtoa_r+0xa30>
 80130c8:	4629      	mov	r1, r5
 80130ca:	2300      	movs	r3, #0
 80130cc:	220a      	movs	r2, #10
 80130ce:	4630      	mov	r0, r6
 80130d0:	f000 fab0 	bl	8013634 <__multadd>
 80130d4:	4605      	mov	r5, r0
 80130d6:	e7ea      	b.n	80130ae <_dtoa_r+0xaa6>
 80130d8:	08018f8c 	.word	0x08018f8c
 80130dc:	08018e31 	.word	0x08018e31
 80130e0:	08018f24 	.word	0x08018f24

080130e4 <__sflush_r>:
 80130e4:	898a      	ldrh	r2, [r1, #12]
 80130e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ea:	4605      	mov	r5, r0
 80130ec:	0710      	lsls	r0, r2, #28
 80130ee:	460c      	mov	r4, r1
 80130f0:	d458      	bmi.n	80131a4 <__sflush_r+0xc0>
 80130f2:	684b      	ldr	r3, [r1, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dc05      	bgt.n	8013104 <__sflush_r+0x20>
 80130f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	dc02      	bgt.n	8013104 <__sflush_r+0x20>
 80130fe:	2000      	movs	r0, #0
 8013100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013106:	2e00      	cmp	r6, #0
 8013108:	d0f9      	beq.n	80130fe <__sflush_r+0x1a>
 801310a:	2300      	movs	r3, #0
 801310c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013110:	682f      	ldr	r7, [r5, #0]
 8013112:	602b      	str	r3, [r5, #0]
 8013114:	d032      	beq.n	801317c <__sflush_r+0x98>
 8013116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013118:	89a3      	ldrh	r3, [r4, #12]
 801311a:	075a      	lsls	r2, r3, #29
 801311c:	d505      	bpl.n	801312a <__sflush_r+0x46>
 801311e:	6863      	ldr	r3, [r4, #4]
 8013120:	1ac0      	subs	r0, r0, r3
 8013122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013124:	b10b      	cbz	r3, 801312a <__sflush_r+0x46>
 8013126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013128:	1ac0      	subs	r0, r0, r3
 801312a:	2300      	movs	r3, #0
 801312c:	4602      	mov	r2, r0
 801312e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013130:	6a21      	ldr	r1, [r4, #32]
 8013132:	4628      	mov	r0, r5
 8013134:	47b0      	blx	r6
 8013136:	1c43      	adds	r3, r0, #1
 8013138:	89a3      	ldrh	r3, [r4, #12]
 801313a:	d106      	bne.n	801314a <__sflush_r+0x66>
 801313c:	6829      	ldr	r1, [r5, #0]
 801313e:	291d      	cmp	r1, #29
 8013140:	d82c      	bhi.n	801319c <__sflush_r+0xb8>
 8013142:	4a2a      	ldr	r2, [pc, #168]	; (80131ec <__sflush_r+0x108>)
 8013144:	40ca      	lsrs	r2, r1
 8013146:	07d6      	lsls	r6, r2, #31
 8013148:	d528      	bpl.n	801319c <__sflush_r+0xb8>
 801314a:	2200      	movs	r2, #0
 801314c:	6062      	str	r2, [r4, #4]
 801314e:	04d9      	lsls	r1, r3, #19
 8013150:	6922      	ldr	r2, [r4, #16]
 8013152:	6022      	str	r2, [r4, #0]
 8013154:	d504      	bpl.n	8013160 <__sflush_r+0x7c>
 8013156:	1c42      	adds	r2, r0, #1
 8013158:	d101      	bne.n	801315e <__sflush_r+0x7a>
 801315a:	682b      	ldr	r3, [r5, #0]
 801315c:	b903      	cbnz	r3, 8013160 <__sflush_r+0x7c>
 801315e:	6560      	str	r0, [r4, #84]	; 0x54
 8013160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013162:	602f      	str	r7, [r5, #0]
 8013164:	2900      	cmp	r1, #0
 8013166:	d0ca      	beq.n	80130fe <__sflush_r+0x1a>
 8013168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801316c:	4299      	cmp	r1, r3
 801316e:	d002      	beq.n	8013176 <__sflush_r+0x92>
 8013170:	4628      	mov	r0, r5
 8013172:	f000 fd97 	bl	8013ca4 <_free_r>
 8013176:	2000      	movs	r0, #0
 8013178:	6360      	str	r0, [r4, #52]	; 0x34
 801317a:	e7c1      	b.n	8013100 <__sflush_r+0x1c>
 801317c:	6a21      	ldr	r1, [r4, #32]
 801317e:	2301      	movs	r3, #1
 8013180:	4628      	mov	r0, r5
 8013182:	47b0      	blx	r6
 8013184:	1c41      	adds	r1, r0, #1
 8013186:	d1c7      	bne.n	8013118 <__sflush_r+0x34>
 8013188:	682b      	ldr	r3, [r5, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d0c4      	beq.n	8013118 <__sflush_r+0x34>
 801318e:	2b1d      	cmp	r3, #29
 8013190:	d001      	beq.n	8013196 <__sflush_r+0xb2>
 8013192:	2b16      	cmp	r3, #22
 8013194:	d101      	bne.n	801319a <__sflush_r+0xb6>
 8013196:	602f      	str	r7, [r5, #0]
 8013198:	e7b1      	b.n	80130fe <__sflush_r+0x1a>
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131a0:	81a3      	strh	r3, [r4, #12]
 80131a2:	e7ad      	b.n	8013100 <__sflush_r+0x1c>
 80131a4:	690f      	ldr	r7, [r1, #16]
 80131a6:	2f00      	cmp	r7, #0
 80131a8:	d0a9      	beq.n	80130fe <__sflush_r+0x1a>
 80131aa:	0793      	lsls	r3, r2, #30
 80131ac:	680e      	ldr	r6, [r1, #0]
 80131ae:	bf08      	it	eq
 80131b0:	694b      	ldreq	r3, [r1, #20]
 80131b2:	600f      	str	r7, [r1, #0]
 80131b4:	bf18      	it	ne
 80131b6:	2300      	movne	r3, #0
 80131b8:	eba6 0807 	sub.w	r8, r6, r7
 80131bc:	608b      	str	r3, [r1, #8]
 80131be:	f1b8 0f00 	cmp.w	r8, #0
 80131c2:	dd9c      	ble.n	80130fe <__sflush_r+0x1a>
 80131c4:	6a21      	ldr	r1, [r4, #32]
 80131c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131c8:	4643      	mov	r3, r8
 80131ca:	463a      	mov	r2, r7
 80131cc:	4628      	mov	r0, r5
 80131ce:	47b0      	blx	r6
 80131d0:	2800      	cmp	r0, #0
 80131d2:	dc06      	bgt.n	80131e2 <__sflush_r+0xfe>
 80131d4:	89a3      	ldrh	r3, [r4, #12]
 80131d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131da:	81a3      	strh	r3, [r4, #12]
 80131dc:	f04f 30ff 	mov.w	r0, #4294967295
 80131e0:	e78e      	b.n	8013100 <__sflush_r+0x1c>
 80131e2:	4407      	add	r7, r0
 80131e4:	eba8 0800 	sub.w	r8, r8, r0
 80131e8:	e7e9      	b.n	80131be <__sflush_r+0xda>
 80131ea:	bf00      	nop
 80131ec:	20400001 	.word	0x20400001

080131f0 <_fflush_r>:
 80131f0:	b538      	push	{r3, r4, r5, lr}
 80131f2:	690b      	ldr	r3, [r1, #16]
 80131f4:	4605      	mov	r5, r0
 80131f6:	460c      	mov	r4, r1
 80131f8:	b913      	cbnz	r3, 8013200 <_fflush_r+0x10>
 80131fa:	2500      	movs	r5, #0
 80131fc:	4628      	mov	r0, r5
 80131fe:	bd38      	pop	{r3, r4, r5, pc}
 8013200:	b118      	cbz	r0, 801320a <_fflush_r+0x1a>
 8013202:	6983      	ldr	r3, [r0, #24]
 8013204:	b90b      	cbnz	r3, 801320a <_fflush_r+0x1a>
 8013206:	f000 f887 	bl	8013318 <__sinit>
 801320a:	4b14      	ldr	r3, [pc, #80]	; (801325c <_fflush_r+0x6c>)
 801320c:	429c      	cmp	r4, r3
 801320e:	d11b      	bne.n	8013248 <_fflush_r+0x58>
 8013210:	686c      	ldr	r4, [r5, #4]
 8013212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d0ef      	beq.n	80131fa <_fflush_r+0xa>
 801321a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801321c:	07d0      	lsls	r0, r2, #31
 801321e:	d404      	bmi.n	801322a <_fflush_r+0x3a>
 8013220:	0599      	lsls	r1, r3, #22
 8013222:	d402      	bmi.n	801322a <_fflush_r+0x3a>
 8013224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013226:	f000 f91a 	bl	801345e <__retarget_lock_acquire_recursive>
 801322a:	4628      	mov	r0, r5
 801322c:	4621      	mov	r1, r4
 801322e:	f7ff ff59 	bl	80130e4 <__sflush_r>
 8013232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013234:	07da      	lsls	r2, r3, #31
 8013236:	4605      	mov	r5, r0
 8013238:	d4e0      	bmi.n	80131fc <_fflush_r+0xc>
 801323a:	89a3      	ldrh	r3, [r4, #12]
 801323c:	059b      	lsls	r3, r3, #22
 801323e:	d4dd      	bmi.n	80131fc <_fflush_r+0xc>
 8013240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013242:	f000 f90d 	bl	8013460 <__retarget_lock_release_recursive>
 8013246:	e7d9      	b.n	80131fc <_fflush_r+0xc>
 8013248:	4b05      	ldr	r3, [pc, #20]	; (8013260 <_fflush_r+0x70>)
 801324a:	429c      	cmp	r4, r3
 801324c:	d101      	bne.n	8013252 <_fflush_r+0x62>
 801324e:	68ac      	ldr	r4, [r5, #8]
 8013250:	e7df      	b.n	8013212 <_fflush_r+0x22>
 8013252:	4b04      	ldr	r3, [pc, #16]	; (8013264 <_fflush_r+0x74>)
 8013254:	429c      	cmp	r4, r3
 8013256:	bf08      	it	eq
 8013258:	68ec      	ldreq	r4, [r5, #12]
 801325a:	e7da      	b.n	8013212 <_fflush_r+0x22>
 801325c:	08018fc0 	.word	0x08018fc0
 8013260:	08018fe0 	.word	0x08018fe0
 8013264:	08018fa0 	.word	0x08018fa0

08013268 <std>:
 8013268:	2300      	movs	r3, #0
 801326a:	b510      	push	{r4, lr}
 801326c:	4604      	mov	r4, r0
 801326e:	e9c0 3300 	strd	r3, r3, [r0]
 8013272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013276:	6083      	str	r3, [r0, #8]
 8013278:	8181      	strh	r1, [r0, #12]
 801327a:	6643      	str	r3, [r0, #100]	; 0x64
 801327c:	81c2      	strh	r2, [r0, #14]
 801327e:	6183      	str	r3, [r0, #24]
 8013280:	4619      	mov	r1, r3
 8013282:	2208      	movs	r2, #8
 8013284:	305c      	adds	r0, #92	; 0x5c
 8013286:	f7fe f937 	bl	80114f8 <memset>
 801328a:	4b05      	ldr	r3, [pc, #20]	; (80132a0 <std+0x38>)
 801328c:	6263      	str	r3, [r4, #36]	; 0x24
 801328e:	4b05      	ldr	r3, [pc, #20]	; (80132a4 <std+0x3c>)
 8013290:	62a3      	str	r3, [r4, #40]	; 0x28
 8013292:	4b05      	ldr	r3, [pc, #20]	; (80132a8 <std+0x40>)
 8013294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013296:	4b05      	ldr	r3, [pc, #20]	; (80132ac <std+0x44>)
 8013298:	6224      	str	r4, [r4, #32]
 801329a:	6323      	str	r3, [r4, #48]	; 0x30
 801329c:	bd10      	pop	{r4, pc}
 801329e:	bf00      	nop
 80132a0:	08014221 	.word	0x08014221
 80132a4:	08014243 	.word	0x08014243
 80132a8:	0801427b 	.word	0x0801427b
 80132ac:	0801429f 	.word	0x0801429f

080132b0 <_cleanup_r>:
 80132b0:	4901      	ldr	r1, [pc, #4]	; (80132b8 <_cleanup_r+0x8>)
 80132b2:	f000 b8af 	b.w	8013414 <_fwalk_reent>
 80132b6:	bf00      	nop
 80132b8:	080131f1 	.word	0x080131f1

080132bc <__sfmoreglue>:
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	2268      	movs	r2, #104	; 0x68
 80132c0:	1e4d      	subs	r5, r1, #1
 80132c2:	4355      	muls	r5, r2
 80132c4:	460e      	mov	r6, r1
 80132c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132ca:	f000 fd57 	bl	8013d7c <_malloc_r>
 80132ce:	4604      	mov	r4, r0
 80132d0:	b140      	cbz	r0, 80132e4 <__sfmoreglue+0x28>
 80132d2:	2100      	movs	r1, #0
 80132d4:	e9c0 1600 	strd	r1, r6, [r0]
 80132d8:	300c      	adds	r0, #12
 80132da:	60a0      	str	r0, [r4, #8]
 80132dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132e0:	f7fe f90a 	bl	80114f8 <memset>
 80132e4:	4620      	mov	r0, r4
 80132e6:	bd70      	pop	{r4, r5, r6, pc}

080132e8 <__sfp_lock_acquire>:
 80132e8:	4801      	ldr	r0, [pc, #4]	; (80132f0 <__sfp_lock_acquire+0x8>)
 80132ea:	f000 b8b8 	b.w	801345e <__retarget_lock_acquire_recursive>
 80132ee:	bf00      	nop
 80132f0:	2400d439 	.word	0x2400d439

080132f4 <__sfp_lock_release>:
 80132f4:	4801      	ldr	r0, [pc, #4]	; (80132fc <__sfp_lock_release+0x8>)
 80132f6:	f000 b8b3 	b.w	8013460 <__retarget_lock_release_recursive>
 80132fa:	bf00      	nop
 80132fc:	2400d439 	.word	0x2400d439

08013300 <__sinit_lock_acquire>:
 8013300:	4801      	ldr	r0, [pc, #4]	; (8013308 <__sinit_lock_acquire+0x8>)
 8013302:	f000 b8ac 	b.w	801345e <__retarget_lock_acquire_recursive>
 8013306:	bf00      	nop
 8013308:	2400d43a 	.word	0x2400d43a

0801330c <__sinit_lock_release>:
 801330c:	4801      	ldr	r0, [pc, #4]	; (8013314 <__sinit_lock_release+0x8>)
 801330e:	f000 b8a7 	b.w	8013460 <__retarget_lock_release_recursive>
 8013312:	bf00      	nop
 8013314:	2400d43a 	.word	0x2400d43a

08013318 <__sinit>:
 8013318:	b510      	push	{r4, lr}
 801331a:	4604      	mov	r4, r0
 801331c:	f7ff fff0 	bl	8013300 <__sinit_lock_acquire>
 8013320:	69a3      	ldr	r3, [r4, #24]
 8013322:	b11b      	cbz	r3, 801332c <__sinit+0x14>
 8013324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013328:	f7ff bff0 	b.w	801330c <__sinit_lock_release>
 801332c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013330:	6523      	str	r3, [r4, #80]	; 0x50
 8013332:	4b13      	ldr	r3, [pc, #76]	; (8013380 <__sinit+0x68>)
 8013334:	4a13      	ldr	r2, [pc, #76]	; (8013384 <__sinit+0x6c>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	62a2      	str	r2, [r4, #40]	; 0x28
 801333a:	42a3      	cmp	r3, r4
 801333c:	bf04      	itt	eq
 801333e:	2301      	moveq	r3, #1
 8013340:	61a3      	streq	r3, [r4, #24]
 8013342:	4620      	mov	r0, r4
 8013344:	f000 f820 	bl	8013388 <__sfp>
 8013348:	6060      	str	r0, [r4, #4]
 801334a:	4620      	mov	r0, r4
 801334c:	f000 f81c 	bl	8013388 <__sfp>
 8013350:	60a0      	str	r0, [r4, #8]
 8013352:	4620      	mov	r0, r4
 8013354:	f000 f818 	bl	8013388 <__sfp>
 8013358:	2200      	movs	r2, #0
 801335a:	60e0      	str	r0, [r4, #12]
 801335c:	2104      	movs	r1, #4
 801335e:	6860      	ldr	r0, [r4, #4]
 8013360:	f7ff ff82 	bl	8013268 <std>
 8013364:	68a0      	ldr	r0, [r4, #8]
 8013366:	2201      	movs	r2, #1
 8013368:	2109      	movs	r1, #9
 801336a:	f7ff ff7d 	bl	8013268 <std>
 801336e:	68e0      	ldr	r0, [r4, #12]
 8013370:	2202      	movs	r2, #2
 8013372:	2112      	movs	r1, #18
 8013374:	f7ff ff78 	bl	8013268 <std>
 8013378:	2301      	movs	r3, #1
 801337a:	61a3      	str	r3, [r4, #24]
 801337c:	e7d2      	b.n	8013324 <__sinit+0xc>
 801337e:	bf00      	nop
 8013380:	08018e0c 	.word	0x08018e0c
 8013384:	080132b1 	.word	0x080132b1

08013388 <__sfp>:
 8013388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338a:	4607      	mov	r7, r0
 801338c:	f7ff ffac 	bl	80132e8 <__sfp_lock_acquire>
 8013390:	4b1e      	ldr	r3, [pc, #120]	; (801340c <__sfp+0x84>)
 8013392:	681e      	ldr	r6, [r3, #0]
 8013394:	69b3      	ldr	r3, [r6, #24]
 8013396:	b913      	cbnz	r3, 801339e <__sfp+0x16>
 8013398:	4630      	mov	r0, r6
 801339a:	f7ff ffbd 	bl	8013318 <__sinit>
 801339e:	3648      	adds	r6, #72	; 0x48
 80133a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	d503      	bpl.n	80133b0 <__sfp+0x28>
 80133a8:	6833      	ldr	r3, [r6, #0]
 80133aa:	b30b      	cbz	r3, 80133f0 <__sfp+0x68>
 80133ac:	6836      	ldr	r6, [r6, #0]
 80133ae:	e7f7      	b.n	80133a0 <__sfp+0x18>
 80133b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133b4:	b9d5      	cbnz	r5, 80133ec <__sfp+0x64>
 80133b6:	4b16      	ldr	r3, [pc, #88]	; (8013410 <__sfp+0x88>)
 80133b8:	60e3      	str	r3, [r4, #12]
 80133ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133be:	6665      	str	r5, [r4, #100]	; 0x64
 80133c0:	f000 f84c 	bl	801345c <__retarget_lock_init_recursive>
 80133c4:	f7ff ff96 	bl	80132f4 <__sfp_lock_release>
 80133c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133d0:	6025      	str	r5, [r4, #0]
 80133d2:	61a5      	str	r5, [r4, #24]
 80133d4:	2208      	movs	r2, #8
 80133d6:	4629      	mov	r1, r5
 80133d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133dc:	f7fe f88c 	bl	80114f8 <memset>
 80133e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133e8:	4620      	mov	r0, r4
 80133ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ec:	3468      	adds	r4, #104	; 0x68
 80133ee:	e7d9      	b.n	80133a4 <__sfp+0x1c>
 80133f0:	2104      	movs	r1, #4
 80133f2:	4638      	mov	r0, r7
 80133f4:	f7ff ff62 	bl	80132bc <__sfmoreglue>
 80133f8:	4604      	mov	r4, r0
 80133fa:	6030      	str	r0, [r6, #0]
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d1d5      	bne.n	80133ac <__sfp+0x24>
 8013400:	f7ff ff78 	bl	80132f4 <__sfp_lock_release>
 8013404:	230c      	movs	r3, #12
 8013406:	603b      	str	r3, [r7, #0]
 8013408:	e7ee      	b.n	80133e8 <__sfp+0x60>
 801340a:	bf00      	nop
 801340c:	08018e0c 	.word	0x08018e0c
 8013410:	ffff0001 	.word	0xffff0001

08013414 <_fwalk_reent>:
 8013414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013418:	4606      	mov	r6, r0
 801341a:	4688      	mov	r8, r1
 801341c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013420:	2700      	movs	r7, #0
 8013422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013426:	f1b9 0901 	subs.w	r9, r9, #1
 801342a:	d505      	bpl.n	8013438 <_fwalk_reent+0x24>
 801342c:	6824      	ldr	r4, [r4, #0]
 801342e:	2c00      	cmp	r4, #0
 8013430:	d1f7      	bne.n	8013422 <_fwalk_reent+0xe>
 8013432:	4638      	mov	r0, r7
 8013434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013438:	89ab      	ldrh	r3, [r5, #12]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d907      	bls.n	801344e <_fwalk_reent+0x3a>
 801343e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013442:	3301      	adds	r3, #1
 8013444:	d003      	beq.n	801344e <_fwalk_reent+0x3a>
 8013446:	4629      	mov	r1, r5
 8013448:	4630      	mov	r0, r6
 801344a:	47c0      	blx	r8
 801344c:	4307      	orrs	r7, r0
 801344e:	3568      	adds	r5, #104	; 0x68
 8013450:	e7e9      	b.n	8013426 <_fwalk_reent+0x12>
	...

08013454 <_localeconv_r>:
 8013454:	4800      	ldr	r0, [pc, #0]	; (8013458 <_localeconv_r+0x4>)
 8013456:	4770      	bx	lr
 8013458:	2400049c 	.word	0x2400049c

0801345c <__retarget_lock_init_recursive>:
 801345c:	4770      	bx	lr

0801345e <__retarget_lock_acquire_recursive>:
 801345e:	4770      	bx	lr

08013460 <__retarget_lock_release_recursive>:
 8013460:	4770      	bx	lr

08013462 <__swhatbuf_r>:
 8013462:	b570      	push	{r4, r5, r6, lr}
 8013464:	460e      	mov	r6, r1
 8013466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801346a:	2900      	cmp	r1, #0
 801346c:	b096      	sub	sp, #88	; 0x58
 801346e:	4614      	mov	r4, r2
 8013470:	461d      	mov	r5, r3
 8013472:	da08      	bge.n	8013486 <__swhatbuf_r+0x24>
 8013474:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013478:	2200      	movs	r2, #0
 801347a:	602a      	str	r2, [r5, #0]
 801347c:	061a      	lsls	r2, r3, #24
 801347e:	d410      	bmi.n	80134a2 <__swhatbuf_r+0x40>
 8013480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013484:	e00e      	b.n	80134a4 <__swhatbuf_r+0x42>
 8013486:	466a      	mov	r2, sp
 8013488:	f000 ff30 	bl	80142ec <_fstat_r>
 801348c:	2800      	cmp	r0, #0
 801348e:	dbf1      	blt.n	8013474 <__swhatbuf_r+0x12>
 8013490:	9a01      	ldr	r2, [sp, #4]
 8013492:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013496:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801349a:	425a      	negs	r2, r3
 801349c:	415a      	adcs	r2, r3
 801349e:	602a      	str	r2, [r5, #0]
 80134a0:	e7ee      	b.n	8013480 <__swhatbuf_r+0x1e>
 80134a2:	2340      	movs	r3, #64	; 0x40
 80134a4:	2000      	movs	r0, #0
 80134a6:	6023      	str	r3, [r4, #0]
 80134a8:	b016      	add	sp, #88	; 0x58
 80134aa:	bd70      	pop	{r4, r5, r6, pc}

080134ac <__smakebuf_r>:
 80134ac:	898b      	ldrh	r3, [r1, #12]
 80134ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134b0:	079d      	lsls	r5, r3, #30
 80134b2:	4606      	mov	r6, r0
 80134b4:	460c      	mov	r4, r1
 80134b6:	d507      	bpl.n	80134c8 <__smakebuf_r+0x1c>
 80134b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	6123      	str	r3, [r4, #16]
 80134c0:	2301      	movs	r3, #1
 80134c2:	6163      	str	r3, [r4, #20]
 80134c4:	b002      	add	sp, #8
 80134c6:	bd70      	pop	{r4, r5, r6, pc}
 80134c8:	ab01      	add	r3, sp, #4
 80134ca:	466a      	mov	r2, sp
 80134cc:	f7ff ffc9 	bl	8013462 <__swhatbuf_r>
 80134d0:	9900      	ldr	r1, [sp, #0]
 80134d2:	4605      	mov	r5, r0
 80134d4:	4630      	mov	r0, r6
 80134d6:	f000 fc51 	bl	8013d7c <_malloc_r>
 80134da:	b948      	cbnz	r0, 80134f0 <__smakebuf_r+0x44>
 80134dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134e0:	059a      	lsls	r2, r3, #22
 80134e2:	d4ef      	bmi.n	80134c4 <__smakebuf_r+0x18>
 80134e4:	f023 0303 	bic.w	r3, r3, #3
 80134e8:	f043 0302 	orr.w	r3, r3, #2
 80134ec:	81a3      	strh	r3, [r4, #12]
 80134ee:	e7e3      	b.n	80134b8 <__smakebuf_r+0xc>
 80134f0:	4b0d      	ldr	r3, [pc, #52]	; (8013528 <__smakebuf_r+0x7c>)
 80134f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80134f4:	89a3      	ldrh	r3, [r4, #12]
 80134f6:	6020      	str	r0, [r4, #0]
 80134f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134fc:	81a3      	strh	r3, [r4, #12]
 80134fe:	9b00      	ldr	r3, [sp, #0]
 8013500:	6163      	str	r3, [r4, #20]
 8013502:	9b01      	ldr	r3, [sp, #4]
 8013504:	6120      	str	r0, [r4, #16]
 8013506:	b15b      	cbz	r3, 8013520 <__smakebuf_r+0x74>
 8013508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801350c:	4630      	mov	r0, r6
 801350e:	f000 feff 	bl	8014310 <_isatty_r>
 8013512:	b128      	cbz	r0, 8013520 <__smakebuf_r+0x74>
 8013514:	89a3      	ldrh	r3, [r4, #12]
 8013516:	f023 0303 	bic.w	r3, r3, #3
 801351a:	f043 0301 	orr.w	r3, r3, #1
 801351e:	81a3      	strh	r3, [r4, #12]
 8013520:	89a0      	ldrh	r0, [r4, #12]
 8013522:	4305      	orrs	r5, r0
 8013524:	81a5      	strh	r5, [r4, #12]
 8013526:	e7cd      	b.n	80134c4 <__smakebuf_r+0x18>
 8013528:	080132b1 	.word	0x080132b1

0801352c <malloc>:
 801352c:	4b02      	ldr	r3, [pc, #8]	; (8013538 <malloc+0xc>)
 801352e:	4601      	mov	r1, r0
 8013530:	6818      	ldr	r0, [r3, #0]
 8013532:	f000 bc23 	b.w	8013d7c <_malloc_r>
 8013536:	bf00      	nop
 8013538:	24000348 	.word	0x24000348

0801353c <memmove>:
 801353c:	4288      	cmp	r0, r1
 801353e:	b510      	push	{r4, lr}
 8013540:	eb01 0402 	add.w	r4, r1, r2
 8013544:	d902      	bls.n	801354c <memmove+0x10>
 8013546:	4284      	cmp	r4, r0
 8013548:	4623      	mov	r3, r4
 801354a:	d807      	bhi.n	801355c <memmove+0x20>
 801354c:	1e43      	subs	r3, r0, #1
 801354e:	42a1      	cmp	r1, r4
 8013550:	d008      	beq.n	8013564 <memmove+0x28>
 8013552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801355a:	e7f8      	b.n	801354e <memmove+0x12>
 801355c:	4402      	add	r2, r0
 801355e:	4601      	mov	r1, r0
 8013560:	428a      	cmp	r2, r1
 8013562:	d100      	bne.n	8013566 <memmove+0x2a>
 8013564:	bd10      	pop	{r4, pc}
 8013566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801356a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801356e:	e7f7      	b.n	8013560 <memmove+0x24>

08013570 <_Balloc>:
 8013570:	b570      	push	{r4, r5, r6, lr}
 8013572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013574:	4604      	mov	r4, r0
 8013576:	460d      	mov	r5, r1
 8013578:	b976      	cbnz	r6, 8013598 <_Balloc+0x28>
 801357a:	2010      	movs	r0, #16
 801357c:	f7ff ffd6 	bl	801352c <malloc>
 8013580:	4602      	mov	r2, r0
 8013582:	6260      	str	r0, [r4, #36]	; 0x24
 8013584:	b920      	cbnz	r0, 8013590 <_Balloc+0x20>
 8013586:	4b18      	ldr	r3, [pc, #96]	; (80135e8 <_Balloc+0x78>)
 8013588:	4818      	ldr	r0, [pc, #96]	; (80135ec <_Balloc+0x7c>)
 801358a:	2166      	movs	r1, #102	; 0x66
 801358c:	f7fd ff48 	bl	8011420 <__assert_func>
 8013590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013594:	6006      	str	r6, [r0, #0]
 8013596:	60c6      	str	r6, [r0, #12]
 8013598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801359a:	68f3      	ldr	r3, [r6, #12]
 801359c:	b183      	cbz	r3, 80135c0 <_Balloc+0x50>
 801359e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80135a6:	b9b8      	cbnz	r0, 80135d8 <_Balloc+0x68>
 80135a8:	2101      	movs	r1, #1
 80135aa:	fa01 f605 	lsl.w	r6, r1, r5
 80135ae:	1d72      	adds	r2, r6, #5
 80135b0:	0092      	lsls	r2, r2, #2
 80135b2:	4620      	mov	r0, r4
 80135b4:	f000 fb60 	bl	8013c78 <_calloc_r>
 80135b8:	b160      	cbz	r0, 80135d4 <_Balloc+0x64>
 80135ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80135be:	e00e      	b.n	80135de <_Balloc+0x6e>
 80135c0:	2221      	movs	r2, #33	; 0x21
 80135c2:	2104      	movs	r1, #4
 80135c4:	4620      	mov	r0, r4
 80135c6:	f000 fb57 	bl	8013c78 <_calloc_r>
 80135ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135cc:	60f0      	str	r0, [r6, #12]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e4      	bne.n	801359e <_Balloc+0x2e>
 80135d4:	2000      	movs	r0, #0
 80135d6:	bd70      	pop	{r4, r5, r6, pc}
 80135d8:	6802      	ldr	r2, [r0, #0]
 80135da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80135de:	2300      	movs	r3, #0
 80135e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80135e4:	e7f7      	b.n	80135d6 <_Balloc+0x66>
 80135e6:	bf00      	nop
 80135e8:	08018e55 	.word	0x08018e55
 80135ec:	08019000 	.word	0x08019000

080135f0 <_Bfree>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80135f4:	4605      	mov	r5, r0
 80135f6:	460c      	mov	r4, r1
 80135f8:	b976      	cbnz	r6, 8013618 <_Bfree+0x28>
 80135fa:	2010      	movs	r0, #16
 80135fc:	f7ff ff96 	bl	801352c <malloc>
 8013600:	4602      	mov	r2, r0
 8013602:	6268      	str	r0, [r5, #36]	; 0x24
 8013604:	b920      	cbnz	r0, 8013610 <_Bfree+0x20>
 8013606:	4b09      	ldr	r3, [pc, #36]	; (801362c <_Bfree+0x3c>)
 8013608:	4809      	ldr	r0, [pc, #36]	; (8013630 <_Bfree+0x40>)
 801360a:	218a      	movs	r1, #138	; 0x8a
 801360c:	f7fd ff08 	bl	8011420 <__assert_func>
 8013610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013614:	6006      	str	r6, [r0, #0]
 8013616:	60c6      	str	r6, [r0, #12]
 8013618:	b13c      	cbz	r4, 801362a <_Bfree+0x3a>
 801361a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801361c:	6862      	ldr	r2, [r4, #4]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013624:	6021      	str	r1, [r4, #0]
 8013626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801362a:	bd70      	pop	{r4, r5, r6, pc}
 801362c:	08018e55 	.word	0x08018e55
 8013630:	08019000 	.word	0x08019000

08013634 <__multadd>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	690d      	ldr	r5, [r1, #16]
 801363a:	4607      	mov	r7, r0
 801363c:	460c      	mov	r4, r1
 801363e:	461e      	mov	r6, r3
 8013640:	f101 0c14 	add.w	ip, r1, #20
 8013644:	2000      	movs	r0, #0
 8013646:	f8dc 3000 	ldr.w	r3, [ip]
 801364a:	b299      	uxth	r1, r3
 801364c:	fb02 6101 	mla	r1, r2, r1, r6
 8013650:	0c1e      	lsrs	r6, r3, #16
 8013652:	0c0b      	lsrs	r3, r1, #16
 8013654:	fb02 3306 	mla	r3, r2, r6, r3
 8013658:	b289      	uxth	r1, r1
 801365a:	3001      	adds	r0, #1
 801365c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013660:	4285      	cmp	r5, r0
 8013662:	f84c 1b04 	str.w	r1, [ip], #4
 8013666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801366a:	dcec      	bgt.n	8013646 <__multadd+0x12>
 801366c:	b30e      	cbz	r6, 80136b2 <__multadd+0x7e>
 801366e:	68a3      	ldr	r3, [r4, #8]
 8013670:	42ab      	cmp	r3, r5
 8013672:	dc19      	bgt.n	80136a8 <__multadd+0x74>
 8013674:	6861      	ldr	r1, [r4, #4]
 8013676:	4638      	mov	r0, r7
 8013678:	3101      	adds	r1, #1
 801367a:	f7ff ff79 	bl	8013570 <_Balloc>
 801367e:	4680      	mov	r8, r0
 8013680:	b928      	cbnz	r0, 801368e <__multadd+0x5a>
 8013682:	4602      	mov	r2, r0
 8013684:	4b0c      	ldr	r3, [pc, #48]	; (80136b8 <__multadd+0x84>)
 8013686:	480d      	ldr	r0, [pc, #52]	; (80136bc <__multadd+0x88>)
 8013688:	21b5      	movs	r1, #181	; 0xb5
 801368a:	f7fd fec9 	bl	8011420 <__assert_func>
 801368e:	6922      	ldr	r2, [r4, #16]
 8013690:	3202      	adds	r2, #2
 8013692:	f104 010c 	add.w	r1, r4, #12
 8013696:	0092      	lsls	r2, r2, #2
 8013698:	300c      	adds	r0, #12
 801369a:	f7fd ff1f 	bl	80114dc <memcpy>
 801369e:	4621      	mov	r1, r4
 80136a0:	4638      	mov	r0, r7
 80136a2:	f7ff ffa5 	bl	80135f0 <_Bfree>
 80136a6:	4644      	mov	r4, r8
 80136a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80136ac:	3501      	adds	r5, #1
 80136ae:	615e      	str	r6, [r3, #20]
 80136b0:	6125      	str	r5, [r4, #16]
 80136b2:	4620      	mov	r0, r4
 80136b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b8:	08018f8c 	.word	0x08018f8c
 80136bc:	08019000 	.word	0x08019000

080136c0 <__hi0bits>:
 80136c0:	0c03      	lsrs	r3, r0, #16
 80136c2:	041b      	lsls	r3, r3, #16
 80136c4:	b9d3      	cbnz	r3, 80136fc <__hi0bits+0x3c>
 80136c6:	0400      	lsls	r0, r0, #16
 80136c8:	2310      	movs	r3, #16
 80136ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136ce:	bf04      	itt	eq
 80136d0:	0200      	lsleq	r0, r0, #8
 80136d2:	3308      	addeq	r3, #8
 80136d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80136d8:	bf04      	itt	eq
 80136da:	0100      	lsleq	r0, r0, #4
 80136dc:	3304      	addeq	r3, #4
 80136de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80136e2:	bf04      	itt	eq
 80136e4:	0080      	lsleq	r0, r0, #2
 80136e6:	3302      	addeq	r3, #2
 80136e8:	2800      	cmp	r0, #0
 80136ea:	db05      	blt.n	80136f8 <__hi0bits+0x38>
 80136ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80136f0:	f103 0301 	add.w	r3, r3, #1
 80136f4:	bf08      	it	eq
 80136f6:	2320      	moveq	r3, #32
 80136f8:	4618      	mov	r0, r3
 80136fa:	4770      	bx	lr
 80136fc:	2300      	movs	r3, #0
 80136fe:	e7e4      	b.n	80136ca <__hi0bits+0xa>

08013700 <__lo0bits>:
 8013700:	6803      	ldr	r3, [r0, #0]
 8013702:	f013 0207 	ands.w	r2, r3, #7
 8013706:	4601      	mov	r1, r0
 8013708:	d00b      	beq.n	8013722 <__lo0bits+0x22>
 801370a:	07da      	lsls	r2, r3, #31
 801370c:	d423      	bmi.n	8013756 <__lo0bits+0x56>
 801370e:	0798      	lsls	r0, r3, #30
 8013710:	bf49      	itett	mi
 8013712:	085b      	lsrmi	r3, r3, #1
 8013714:	089b      	lsrpl	r3, r3, #2
 8013716:	2001      	movmi	r0, #1
 8013718:	600b      	strmi	r3, [r1, #0]
 801371a:	bf5c      	itt	pl
 801371c:	600b      	strpl	r3, [r1, #0]
 801371e:	2002      	movpl	r0, #2
 8013720:	4770      	bx	lr
 8013722:	b298      	uxth	r0, r3
 8013724:	b9a8      	cbnz	r0, 8013752 <__lo0bits+0x52>
 8013726:	0c1b      	lsrs	r3, r3, #16
 8013728:	2010      	movs	r0, #16
 801372a:	b2da      	uxtb	r2, r3
 801372c:	b90a      	cbnz	r2, 8013732 <__lo0bits+0x32>
 801372e:	3008      	adds	r0, #8
 8013730:	0a1b      	lsrs	r3, r3, #8
 8013732:	071a      	lsls	r2, r3, #28
 8013734:	bf04      	itt	eq
 8013736:	091b      	lsreq	r3, r3, #4
 8013738:	3004      	addeq	r0, #4
 801373a:	079a      	lsls	r2, r3, #30
 801373c:	bf04      	itt	eq
 801373e:	089b      	lsreq	r3, r3, #2
 8013740:	3002      	addeq	r0, #2
 8013742:	07da      	lsls	r2, r3, #31
 8013744:	d403      	bmi.n	801374e <__lo0bits+0x4e>
 8013746:	085b      	lsrs	r3, r3, #1
 8013748:	f100 0001 	add.w	r0, r0, #1
 801374c:	d005      	beq.n	801375a <__lo0bits+0x5a>
 801374e:	600b      	str	r3, [r1, #0]
 8013750:	4770      	bx	lr
 8013752:	4610      	mov	r0, r2
 8013754:	e7e9      	b.n	801372a <__lo0bits+0x2a>
 8013756:	2000      	movs	r0, #0
 8013758:	4770      	bx	lr
 801375a:	2020      	movs	r0, #32
 801375c:	4770      	bx	lr
	...

08013760 <__i2b>:
 8013760:	b510      	push	{r4, lr}
 8013762:	460c      	mov	r4, r1
 8013764:	2101      	movs	r1, #1
 8013766:	f7ff ff03 	bl	8013570 <_Balloc>
 801376a:	4602      	mov	r2, r0
 801376c:	b928      	cbnz	r0, 801377a <__i2b+0x1a>
 801376e:	4b05      	ldr	r3, [pc, #20]	; (8013784 <__i2b+0x24>)
 8013770:	4805      	ldr	r0, [pc, #20]	; (8013788 <__i2b+0x28>)
 8013772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013776:	f7fd fe53 	bl	8011420 <__assert_func>
 801377a:	2301      	movs	r3, #1
 801377c:	6144      	str	r4, [r0, #20]
 801377e:	6103      	str	r3, [r0, #16]
 8013780:	bd10      	pop	{r4, pc}
 8013782:	bf00      	nop
 8013784:	08018f8c 	.word	0x08018f8c
 8013788:	08019000 	.word	0x08019000

0801378c <__multiply>:
 801378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013790:	4691      	mov	r9, r2
 8013792:	690a      	ldr	r2, [r1, #16]
 8013794:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013798:	429a      	cmp	r2, r3
 801379a:	bfb8      	it	lt
 801379c:	460b      	movlt	r3, r1
 801379e:	460c      	mov	r4, r1
 80137a0:	bfbc      	itt	lt
 80137a2:	464c      	movlt	r4, r9
 80137a4:	4699      	movlt	r9, r3
 80137a6:	6927      	ldr	r7, [r4, #16]
 80137a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80137ac:	68a3      	ldr	r3, [r4, #8]
 80137ae:	6861      	ldr	r1, [r4, #4]
 80137b0:	eb07 060a 	add.w	r6, r7, sl
 80137b4:	42b3      	cmp	r3, r6
 80137b6:	b085      	sub	sp, #20
 80137b8:	bfb8      	it	lt
 80137ba:	3101      	addlt	r1, #1
 80137bc:	f7ff fed8 	bl	8013570 <_Balloc>
 80137c0:	b930      	cbnz	r0, 80137d0 <__multiply+0x44>
 80137c2:	4602      	mov	r2, r0
 80137c4:	4b44      	ldr	r3, [pc, #272]	; (80138d8 <__multiply+0x14c>)
 80137c6:	4845      	ldr	r0, [pc, #276]	; (80138dc <__multiply+0x150>)
 80137c8:	f240 115d 	movw	r1, #349	; 0x15d
 80137cc:	f7fd fe28 	bl	8011420 <__assert_func>
 80137d0:	f100 0514 	add.w	r5, r0, #20
 80137d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80137d8:	462b      	mov	r3, r5
 80137da:	2200      	movs	r2, #0
 80137dc:	4543      	cmp	r3, r8
 80137de:	d321      	bcc.n	8013824 <__multiply+0x98>
 80137e0:	f104 0314 	add.w	r3, r4, #20
 80137e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80137e8:	f109 0314 	add.w	r3, r9, #20
 80137ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80137f0:	9202      	str	r2, [sp, #8]
 80137f2:	1b3a      	subs	r2, r7, r4
 80137f4:	3a15      	subs	r2, #21
 80137f6:	f022 0203 	bic.w	r2, r2, #3
 80137fa:	3204      	adds	r2, #4
 80137fc:	f104 0115 	add.w	r1, r4, #21
 8013800:	428f      	cmp	r7, r1
 8013802:	bf38      	it	cc
 8013804:	2204      	movcc	r2, #4
 8013806:	9201      	str	r2, [sp, #4]
 8013808:	9a02      	ldr	r2, [sp, #8]
 801380a:	9303      	str	r3, [sp, #12]
 801380c:	429a      	cmp	r2, r3
 801380e:	d80c      	bhi.n	801382a <__multiply+0x9e>
 8013810:	2e00      	cmp	r6, #0
 8013812:	dd03      	ble.n	801381c <__multiply+0x90>
 8013814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013818:	2b00      	cmp	r3, #0
 801381a:	d05a      	beq.n	80138d2 <__multiply+0x146>
 801381c:	6106      	str	r6, [r0, #16]
 801381e:	b005      	add	sp, #20
 8013820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013824:	f843 2b04 	str.w	r2, [r3], #4
 8013828:	e7d8      	b.n	80137dc <__multiply+0x50>
 801382a:	f8b3 a000 	ldrh.w	sl, [r3]
 801382e:	f1ba 0f00 	cmp.w	sl, #0
 8013832:	d024      	beq.n	801387e <__multiply+0xf2>
 8013834:	f104 0e14 	add.w	lr, r4, #20
 8013838:	46a9      	mov	r9, r5
 801383a:	f04f 0c00 	mov.w	ip, #0
 801383e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013842:	f8d9 1000 	ldr.w	r1, [r9]
 8013846:	fa1f fb82 	uxth.w	fp, r2
 801384a:	b289      	uxth	r1, r1
 801384c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013850:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013854:	f8d9 2000 	ldr.w	r2, [r9]
 8013858:	4461      	add	r1, ip
 801385a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801385e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013862:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013866:	b289      	uxth	r1, r1
 8013868:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801386c:	4577      	cmp	r7, lr
 801386e:	f849 1b04 	str.w	r1, [r9], #4
 8013872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013876:	d8e2      	bhi.n	801383e <__multiply+0xb2>
 8013878:	9a01      	ldr	r2, [sp, #4]
 801387a:	f845 c002 	str.w	ip, [r5, r2]
 801387e:	9a03      	ldr	r2, [sp, #12]
 8013880:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013884:	3304      	adds	r3, #4
 8013886:	f1b9 0f00 	cmp.w	r9, #0
 801388a:	d020      	beq.n	80138ce <__multiply+0x142>
 801388c:	6829      	ldr	r1, [r5, #0]
 801388e:	f104 0c14 	add.w	ip, r4, #20
 8013892:	46ae      	mov	lr, r5
 8013894:	f04f 0a00 	mov.w	sl, #0
 8013898:	f8bc b000 	ldrh.w	fp, [ip]
 801389c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80138a0:	fb09 220b 	mla	r2, r9, fp, r2
 80138a4:	4492      	add	sl, r2
 80138a6:	b289      	uxth	r1, r1
 80138a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80138ac:	f84e 1b04 	str.w	r1, [lr], #4
 80138b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80138b4:	f8be 1000 	ldrh.w	r1, [lr]
 80138b8:	0c12      	lsrs	r2, r2, #16
 80138ba:	fb09 1102 	mla	r1, r9, r2, r1
 80138be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80138c2:	4567      	cmp	r7, ip
 80138c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138c8:	d8e6      	bhi.n	8013898 <__multiply+0x10c>
 80138ca:	9a01      	ldr	r2, [sp, #4]
 80138cc:	50a9      	str	r1, [r5, r2]
 80138ce:	3504      	adds	r5, #4
 80138d0:	e79a      	b.n	8013808 <__multiply+0x7c>
 80138d2:	3e01      	subs	r6, #1
 80138d4:	e79c      	b.n	8013810 <__multiply+0x84>
 80138d6:	bf00      	nop
 80138d8:	08018f8c 	.word	0x08018f8c
 80138dc:	08019000 	.word	0x08019000

080138e0 <__pow5mult>:
 80138e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e4:	4615      	mov	r5, r2
 80138e6:	f012 0203 	ands.w	r2, r2, #3
 80138ea:	4606      	mov	r6, r0
 80138ec:	460f      	mov	r7, r1
 80138ee:	d007      	beq.n	8013900 <__pow5mult+0x20>
 80138f0:	4c25      	ldr	r4, [pc, #148]	; (8013988 <__pow5mult+0xa8>)
 80138f2:	3a01      	subs	r2, #1
 80138f4:	2300      	movs	r3, #0
 80138f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138fa:	f7ff fe9b 	bl	8013634 <__multadd>
 80138fe:	4607      	mov	r7, r0
 8013900:	10ad      	asrs	r5, r5, #2
 8013902:	d03d      	beq.n	8013980 <__pow5mult+0xa0>
 8013904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013906:	b97c      	cbnz	r4, 8013928 <__pow5mult+0x48>
 8013908:	2010      	movs	r0, #16
 801390a:	f7ff fe0f 	bl	801352c <malloc>
 801390e:	4602      	mov	r2, r0
 8013910:	6270      	str	r0, [r6, #36]	; 0x24
 8013912:	b928      	cbnz	r0, 8013920 <__pow5mult+0x40>
 8013914:	4b1d      	ldr	r3, [pc, #116]	; (801398c <__pow5mult+0xac>)
 8013916:	481e      	ldr	r0, [pc, #120]	; (8013990 <__pow5mult+0xb0>)
 8013918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801391c:	f7fd fd80 	bl	8011420 <__assert_func>
 8013920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013924:	6004      	str	r4, [r0, #0]
 8013926:	60c4      	str	r4, [r0, #12]
 8013928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801392c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013930:	b94c      	cbnz	r4, 8013946 <__pow5mult+0x66>
 8013932:	f240 2171 	movw	r1, #625	; 0x271
 8013936:	4630      	mov	r0, r6
 8013938:	f7ff ff12 	bl	8013760 <__i2b>
 801393c:	2300      	movs	r3, #0
 801393e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013942:	4604      	mov	r4, r0
 8013944:	6003      	str	r3, [r0, #0]
 8013946:	f04f 0900 	mov.w	r9, #0
 801394a:	07eb      	lsls	r3, r5, #31
 801394c:	d50a      	bpl.n	8013964 <__pow5mult+0x84>
 801394e:	4639      	mov	r1, r7
 8013950:	4622      	mov	r2, r4
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff ff1a 	bl	801378c <__multiply>
 8013958:	4639      	mov	r1, r7
 801395a:	4680      	mov	r8, r0
 801395c:	4630      	mov	r0, r6
 801395e:	f7ff fe47 	bl	80135f0 <_Bfree>
 8013962:	4647      	mov	r7, r8
 8013964:	106d      	asrs	r5, r5, #1
 8013966:	d00b      	beq.n	8013980 <__pow5mult+0xa0>
 8013968:	6820      	ldr	r0, [r4, #0]
 801396a:	b938      	cbnz	r0, 801397c <__pow5mult+0x9c>
 801396c:	4622      	mov	r2, r4
 801396e:	4621      	mov	r1, r4
 8013970:	4630      	mov	r0, r6
 8013972:	f7ff ff0b 	bl	801378c <__multiply>
 8013976:	6020      	str	r0, [r4, #0]
 8013978:	f8c0 9000 	str.w	r9, [r0]
 801397c:	4604      	mov	r4, r0
 801397e:	e7e4      	b.n	801394a <__pow5mult+0x6a>
 8013980:	4638      	mov	r0, r7
 8013982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013986:	bf00      	nop
 8013988:	08019150 	.word	0x08019150
 801398c:	08018e55 	.word	0x08018e55
 8013990:	08019000 	.word	0x08019000

08013994 <__lshift>:
 8013994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013998:	460c      	mov	r4, r1
 801399a:	6849      	ldr	r1, [r1, #4]
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139a2:	68a3      	ldr	r3, [r4, #8]
 80139a4:	4607      	mov	r7, r0
 80139a6:	4691      	mov	r9, r2
 80139a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139ac:	f108 0601 	add.w	r6, r8, #1
 80139b0:	42b3      	cmp	r3, r6
 80139b2:	db0b      	blt.n	80139cc <__lshift+0x38>
 80139b4:	4638      	mov	r0, r7
 80139b6:	f7ff fddb 	bl	8013570 <_Balloc>
 80139ba:	4605      	mov	r5, r0
 80139bc:	b948      	cbnz	r0, 80139d2 <__lshift+0x3e>
 80139be:	4602      	mov	r2, r0
 80139c0:	4b2a      	ldr	r3, [pc, #168]	; (8013a6c <__lshift+0xd8>)
 80139c2:	482b      	ldr	r0, [pc, #172]	; (8013a70 <__lshift+0xdc>)
 80139c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80139c8:	f7fd fd2a 	bl	8011420 <__assert_func>
 80139cc:	3101      	adds	r1, #1
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	e7ee      	b.n	80139b0 <__lshift+0x1c>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f100 0114 	add.w	r1, r0, #20
 80139d8:	f100 0210 	add.w	r2, r0, #16
 80139dc:	4618      	mov	r0, r3
 80139de:	4553      	cmp	r3, sl
 80139e0:	db37      	blt.n	8013a52 <__lshift+0xbe>
 80139e2:	6920      	ldr	r0, [r4, #16]
 80139e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139e8:	f104 0314 	add.w	r3, r4, #20
 80139ec:	f019 091f 	ands.w	r9, r9, #31
 80139f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80139f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80139f8:	d02f      	beq.n	8013a5a <__lshift+0xc6>
 80139fa:	f1c9 0e20 	rsb	lr, r9, #32
 80139fe:	468a      	mov	sl, r1
 8013a00:	f04f 0c00 	mov.w	ip, #0
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	fa02 f209 	lsl.w	r2, r2, r9
 8013a0a:	ea42 020c 	orr.w	r2, r2, ip
 8013a0e:	f84a 2b04 	str.w	r2, [sl], #4
 8013a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a16:	4298      	cmp	r0, r3
 8013a18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013a1c:	d8f2      	bhi.n	8013a04 <__lshift+0x70>
 8013a1e:	1b03      	subs	r3, r0, r4
 8013a20:	3b15      	subs	r3, #21
 8013a22:	f023 0303 	bic.w	r3, r3, #3
 8013a26:	3304      	adds	r3, #4
 8013a28:	f104 0215 	add.w	r2, r4, #21
 8013a2c:	4290      	cmp	r0, r2
 8013a2e:	bf38      	it	cc
 8013a30:	2304      	movcc	r3, #4
 8013a32:	f841 c003 	str.w	ip, [r1, r3]
 8013a36:	f1bc 0f00 	cmp.w	ip, #0
 8013a3a:	d001      	beq.n	8013a40 <__lshift+0xac>
 8013a3c:	f108 0602 	add.w	r6, r8, #2
 8013a40:	3e01      	subs	r6, #1
 8013a42:	4638      	mov	r0, r7
 8013a44:	612e      	str	r6, [r5, #16]
 8013a46:	4621      	mov	r1, r4
 8013a48:	f7ff fdd2 	bl	80135f0 <_Bfree>
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a56:	3301      	adds	r3, #1
 8013a58:	e7c1      	b.n	80139de <__lshift+0x4a>
 8013a5a:	3904      	subs	r1, #4
 8013a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a60:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a64:	4298      	cmp	r0, r3
 8013a66:	d8f9      	bhi.n	8013a5c <__lshift+0xc8>
 8013a68:	e7ea      	b.n	8013a40 <__lshift+0xac>
 8013a6a:	bf00      	nop
 8013a6c:	08018f8c 	.word	0x08018f8c
 8013a70:	08019000 	.word	0x08019000

08013a74 <__mcmp>:
 8013a74:	b530      	push	{r4, r5, lr}
 8013a76:	6902      	ldr	r2, [r0, #16]
 8013a78:	690c      	ldr	r4, [r1, #16]
 8013a7a:	1b12      	subs	r2, r2, r4
 8013a7c:	d10e      	bne.n	8013a9c <__mcmp+0x28>
 8013a7e:	f100 0314 	add.w	r3, r0, #20
 8013a82:	3114      	adds	r1, #20
 8013a84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a94:	42a5      	cmp	r5, r4
 8013a96:	d003      	beq.n	8013aa0 <__mcmp+0x2c>
 8013a98:	d305      	bcc.n	8013aa6 <__mcmp+0x32>
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	4610      	mov	r0, r2
 8013a9e:	bd30      	pop	{r4, r5, pc}
 8013aa0:	4283      	cmp	r3, r0
 8013aa2:	d3f3      	bcc.n	8013a8c <__mcmp+0x18>
 8013aa4:	e7fa      	b.n	8013a9c <__mcmp+0x28>
 8013aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8013aaa:	e7f7      	b.n	8013a9c <__mcmp+0x28>

08013aac <__mdiff>:
 8013aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab0:	460c      	mov	r4, r1
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	4690      	mov	r8, r2
 8013aba:	f7ff ffdb 	bl	8013a74 <__mcmp>
 8013abe:	1e05      	subs	r5, r0, #0
 8013ac0:	d110      	bne.n	8013ae4 <__mdiff+0x38>
 8013ac2:	4629      	mov	r1, r5
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f7ff fd53 	bl	8013570 <_Balloc>
 8013aca:	b930      	cbnz	r0, 8013ada <__mdiff+0x2e>
 8013acc:	4b3a      	ldr	r3, [pc, #232]	; (8013bb8 <__mdiff+0x10c>)
 8013ace:	4602      	mov	r2, r0
 8013ad0:	f240 2132 	movw	r1, #562	; 0x232
 8013ad4:	4839      	ldr	r0, [pc, #228]	; (8013bbc <__mdiff+0x110>)
 8013ad6:	f7fd fca3 	bl	8011420 <__assert_func>
 8013ada:	2301      	movs	r3, #1
 8013adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	bfa4      	itt	ge
 8013ae6:	4643      	movge	r3, r8
 8013ae8:	46a0      	movge	r8, r4
 8013aea:	4630      	mov	r0, r6
 8013aec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013af0:	bfa6      	itte	ge
 8013af2:	461c      	movge	r4, r3
 8013af4:	2500      	movge	r5, #0
 8013af6:	2501      	movlt	r5, #1
 8013af8:	f7ff fd3a 	bl	8013570 <_Balloc>
 8013afc:	b920      	cbnz	r0, 8013b08 <__mdiff+0x5c>
 8013afe:	4b2e      	ldr	r3, [pc, #184]	; (8013bb8 <__mdiff+0x10c>)
 8013b00:	4602      	mov	r2, r0
 8013b02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013b06:	e7e5      	b.n	8013ad4 <__mdiff+0x28>
 8013b08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b0c:	6926      	ldr	r6, [r4, #16]
 8013b0e:	60c5      	str	r5, [r0, #12]
 8013b10:	f104 0914 	add.w	r9, r4, #20
 8013b14:	f108 0514 	add.w	r5, r8, #20
 8013b18:	f100 0e14 	add.w	lr, r0, #20
 8013b1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013b20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013b24:	f108 0210 	add.w	r2, r8, #16
 8013b28:	46f2      	mov	sl, lr
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b34:	fa1f f883 	uxth.w	r8, r3
 8013b38:	fa11 f18b 	uxtah	r1, r1, fp
 8013b3c:	0c1b      	lsrs	r3, r3, #16
 8013b3e:	eba1 0808 	sub.w	r8, r1, r8
 8013b42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b4a:	fa1f f888 	uxth.w	r8, r8
 8013b4e:	1419      	asrs	r1, r3, #16
 8013b50:	454e      	cmp	r6, r9
 8013b52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b56:	f84a 3b04 	str.w	r3, [sl], #4
 8013b5a:	d8e7      	bhi.n	8013b2c <__mdiff+0x80>
 8013b5c:	1b33      	subs	r3, r6, r4
 8013b5e:	3b15      	subs	r3, #21
 8013b60:	f023 0303 	bic.w	r3, r3, #3
 8013b64:	3304      	adds	r3, #4
 8013b66:	3415      	adds	r4, #21
 8013b68:	42a6      	cmp	r6, r4
 8013b6a:	bf38      	it	cc
 8013b6c:	2304      	movcc	r3, #4
 8013b6e:	441d      	add	r5, r3
 8013b70:	4473      	add	r3, lr
 8013b72:	469e      	mov	lr, r3
 8013b74:	462e      	mov	r6, r5
 8013b76:	4566      	cmp	r6, ip
 8013b78:	d30e      	bcc.n	8013b98 <__mdiff+0xec>
 8013b7a:	f10c 0203 	add.w	r2, ip, #3
 8013b7e:	1b52      	subs	r2, r2, r5
 8013b80:	f022 0203 	bic.w	r2, r2, #3
 8013b84:	3d03      	subs	r5, #3
 8013b86:	45ac      	cmp	ip, r5
 8013b88:	bf38      	it	cc
 8013b8a:	2200      	movcc	r2, #0
 8013b8c:	441a      	add	r2, r3
 8013b8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013b92:	b17b      	cbz	r3, 8013bb4 <__mdiff+0x108>
 8013b94:	6107      	str	r7, [r0, #16]
 8013b96:	e7a3      	b.n	8013ae0 <__mdiff+0x34>
 8013b98:	f856 8b04 	ldr.w	r8, [r6], #4
 8013b9c:	fa11 f288 	uxtah	r2, r1, r8
 8013ba0:	1414      	asrs	r4, r2, #16
 8013ba2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ba6:	b292      	uxth	r2, r2
 8013ba8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013bac:	f84e 2b04 	str.w	r2, [lr], #4
 8013bb0:	1421      	asrs	r1, r4, #16
 8013bb2:	e7e0      	b.n	8013b76 <__mdiff+0xca>
 8013bb4:	3f01      	subs	r7, #1
 8013bb6:	e7ea      	b.n	8013b8e <__mdiff+0xe2>
 8013bb8:	08018f8c 	.word	0x08018f8c
 8013bbc:	08019000 	.word	0x08019000

08013bc0 <__d2b>:
 8013bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bc4:	4689      	mov	r9, r1
 8013bc6:	2101      	movs	r1, #1
 8013bc8:	ec57 6b10 	vmov	r6, r7, d0
 8013bcc:	4690      	mov	r8, r2
 8013bce:	f7ff fccf 	bl	8013570 <_Balloc>
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	b930      	cbnz	r0, 8013be4 <__d2b+0x24>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	4b25      	ldr	r3, [pc, #148]	; (8013c70 <__d2b+0xb0>)
 8013bda:	4826      	ldr	r0, [pc, #152]	; (8013c74 <__d2b+0xb4>)
 8013bdc:	f240 310a 	movw	r1, #778	; 0x30a
 8013be0:	f7fd fc1e 	bl	8011420 <__assert_func>
 8013be4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013bec:	bb35      	cbnz	r5, 8013c3c <__d2b+0x7c>
 8013bee:	2e00      	cmp	r6, #0
 8013bf0:	9301      	str	r3, [sp, #4]
 8013bf2:	d028      	beq.n	8013c46 <__d2b+0x86>
 8013bf4:	4668      	mov	r0, sp
 8013bf6:	9600      	str	r6, [sp, #0]
 8013bf8:	f7ff fd82 	bl	8013700 <__lo0bits>
 8013bfc:	9900      	ldr	r1, [sp, #0]
 8013bfe:	b300      	cbz	r0, 8013c42 <__d2b+0x82>
 8013c00:	9a01      	ldr	r2, [sp, #4]
 8013c02:	f1c0 0320 	rsb	r3, r0, #32
 8013c06:	fa02 f303 	lsl.w	r3, r2, r3
 8013c0a:	430b      	orrs	r3, r1
 8013c0c:	40c2      	lsrs	r2, r0
 8013c0e:	6163      	str	r3, [r4, #20]
 8013c10:	9201      	str	r2, [sp, #4]
 8013c12:	9b01      	ldr	r3, [sp, #4]
 8013c14:	61a3      	str	r3, [r4, #24]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	bf14      	ite	ne
 8013c1a:	2202      	movne	r2, #2
 8013c1c:	2201      	moveq	r2, #1
 8013c1e:	6122      	str	r2, [r4, #16]
 8013c20:	b1d5      	cbz	r5, 8013c58 <__d2b+0x98>
 8013c22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c26:	4405      	add	r5, r0
 8013c28:	f8c9 5000 	str.w	r5, [r9]
 8013c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c30:	f8c8 0000 	str.w	r0, [r8]
 8013c34:	4620      	mov	r0, r4
 8013c36:	b003      	add	sp, #12
 8013c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c40:	e7d5      	b.n	8013bee <__d2b+0x2e>
 8013c42:	6161      	str	r1, [r4, #20]
 8013c44:	e7e5      	b.n	8013c12 <__d2b+0x52>
 8013c46:	a801      	add	r0, sp, #4
 8013c48:	f7ff fd5a 	bl	8013700 <__lo0bits>
 8013c4c:	9b01      	ldr	r3, [sp, #4]
 8013c4e:	6163      	str	r3, [r4, #20]
 8013c50:	2201      	movs	r2, #1
 8013c52:	6122      	str	r2, [r4, #16]
 8013c54:	3020      	adds	r0, #32
 8013c56:	e7e3      	b.n	8013c20 <__d2b+0x60>
 8013c58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c60:	f8c9 0000 	str.w	r0, [r9]
 8013c64:	6918      	ldr	r0, [r3, #16]
 8013c66:	f7ff fd2b 	bl	80136c0 <__hi0bits>
 8013c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c6e:	e7df      	b.n	8013c30 <__d2b+0x70>
 8013c70:	08018f8c 	.word	0x08018f8c
 8013c74:	08019000 	.word	0x08019000

08013c78 <_calloc_r>:
 8013c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c7a:	fba1 2402 	umull	r2, r4, r1, r2
 8013c7e:	b94c      	cbnz	r4, 8013c94 <_calloc_r+0x1c>
 8013c80:	4611      	mov	r1, r2
 8013c82:	9201      	str	r2, [sp, #4]
 8013c84:	f000 f87a 	bl	8013d7c <_malloc_r>
 8013c88:	9a01      	ldr	r2, [sp, #4]
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	b930      	cbnz	r0, 8013c9c <_calloc_r+0x24>
 8013c8e:	4628      	mov	r0, r5
 8013c90:	b003      	add	sp, #12
 8013c92:	bd30      	pop	{r4, r5, pc}
 8013c94:	220c      	movs	r2, #12
 8013c96:	6002      	str	r2, [r0, #0]
 8013c98:	2500      	movs	r5, #0
 8013c9a:	e7f8      	b.n	8013c8e <_calloc_r+0x16>
 8013c9c:	4621      	mov	r1, r4
 8013c9e:	f7fd fc2b 	bl	80114f8 <memset>
 8013ca2:	e7f4      	b.n	8013c8e <_calloc_r+0x16>

08013ca4 <_free_r>:
 8013ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ca6:	2900      	cmp	r1, #0
 8013ca8:	d044      	beq.n	8013d34 <_free_r+0x90>
 8013caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cae:	9001      	str	r0, [sp, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8013cb6:	bfb8      	it	lt
 8013cb8:	18e4      	addlt	r4, r4, r3
 8013cba:	f000 fb5d 	bl	8014378 <__malloc_lock>
 8013cbe:	4a1e      	ldr	r2, [pc, #120]	; (8013d38 <_free_r+0x94>)
 8013cc0:	9801      	ldr	r0, [sp, #4]
 8013cc2:	6813      	ldr	r3, [r2, #0]
 8013cc4:	b933      	cbnz	r3, 8013cd4 <_free_r+0x30>
 8013cc6:	6063      	str	r3, [r4, #4]
 8013cc8:	6014      	str	r4, [r2, #0]
 8013cca:	b003      	add	sp, #12
 8013ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cd0:	f000 bb58 	b.w	8014384 <__malloc_unlock>
 8013cd4:	42a3      	cmp	r3, r4
 8013cd6:	d908      	bls.n	8013cea <_free_r+0x46>
 8013cd8:	6825      	ldr	r5, [r4, #0]
 8013cda:	1961      	adds	r1, r4, r5
 8013cdc:	428b      	cmp	r3, r1
 8013cde:	bf01      	itttt	eq
 8013ce0:	6819      	ldreq	r1, [r3, #0]
 8013ce2:	685b      	ldreq	r3, [r3, #4]
 8013ce4:	1949      	addeq	r1, r1, r5
 8013ce6:	6021      	streq	r1, [r4, #0]
 8013ce8:	e7ed      	b.n	8013cc6 <_free_r+0x22>
 8013cea:	461a      	mov	r2, r3
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	b10b      	cbz	r3, 8013cf4 <_free_r+0x50>
 8013cf0:	42a3      	cmp	r3, r4
 8013cf2:	d9fa      	bls.n	8013cea <_free_r+0x46>
 8013cf4:	6811      	ldr	r1, [r2, #0]
 8013cf6:	1855      	adds	r5, r2, r1
 8013cf8:	42a5      	cmp	r5, r4
 8013cfa:	d10b      	bne.n	8013d14 <_free_r+0x70>
 8013cfc:	6824      	ldr	r4, [r4, #0]
 8013cfe:	4421      	add	r1, r4
 8013d00:	1854      	adds	r4, r2, r1
 8013d02:	42a3      	cmp	r3, r4
 8013d04:	6011      	str	r1, [r2, #0]
 8013d06:	d1e0      	bne.n	8013cca <_free_r+0x26>
 8013d08:	681c      	ldr	r4, [r3, #0]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	6053      	str	r3, [r2, #4]
 8013d0e:	4421      	add	r1, r4
 8013d10:	6011      	str	r1, [r2, #0]
 8013d12:	e7da      	b.n	8013cca <_free_r+0x26>
 8013d14:	d902      	bls.n	8013d1c <_free_r+0x78>
 8013d16:	230c      	movs	r3, #12
 8013d18:	6003      	str	r3, [r0, #0]
 8013d1a:	e7d6      	b.n	8013cca <_free_r+0x26>
 8013d1c:	6825      	ldr	r5, [r4, #0]
 8013d1e:	1961      	adds	r1, r4, r5
 8013d20:	428b      	cmp	r3, r1
 8013d22:	bf04      	itt	eq
 8013d24:	6819      	ldreq	r1, [r3, #0]
 8013d26:	685b      	ldreq	r3, [r3, #4]
 8013d28:	6063      	str	r3, [r4, #4]
 8013d2a:	bf04      	itt	eq
 8013d2c:	1949      	addeq	r1, r1, r5
 8013d2e:	6021      	streq	r1, [r4, #0]
 8013d30:	6054      	str	r4, [r2, #4]
 8013d32:	e7ca      	b.n	8013cca <_free_r+0x26>
 8013d34:	b003      	add	sp, #12
 8013d36:	bd30      	pop	{r4, r5, pc}
 8013d38:	2400d43c 	.word	0x2400d43c

08013d3c <sbrk_aligned>:
 8013d3c:	b570      	push	{r4, r5, r6, lr}
 8013d3e:	4e0e      	ldr	r6, [pc, #56]	; (8013d78 <sbrk_aligned+0x3c>)
 8013d40:	460c      	mov	r4, r1
 8013d42:	6831      	ldr	r1, [r6, #0]
 8013d44:	4605      	mov	r5, r0
 8013d46:	b911      	cbnz	r1, 8013d4e <sbrk_aligned+0x12>
 8013d48:	f000 fa16 	bl	8014178 <_sbrk_r>
 8013d4c:	6030      	str	r0, [r6, #0]
 8013d4e:	4621      	mov	r1, r4
 8013d50:	4628      	mov	r0, r5
 8013d52:	f000 fa11 	bl	8014178 <_sbrk_r>
 8013d56:	1c43      	adds	r3, r0, #1
 8013d58:	d00a      	beq.n	8013d70 <sbrk_aligned+0x34>
 8013d5a:	1cc4      	adds	r4, r0, #3
 8013d5c:	f024 0403 	bic.w	r4, r4, #3
 8013d60:	42a0      	cmp	r0, r4
 8013d62:	d007      	beq.n	8013d74 <sbrk_aligned+0x38>
 8013d64:	1a21      	subs	r1, r4, r0
 8013d66:	4628      	mov	r0, r5
 8013d68:	f000 fa06 	bl	8014178 <_sbrk_r>
 8013d6c:	3001      	adds	r0, #1
 8013d6e:	d101      	bne.n	8013d74 <sbrk_aligned+0x38>
 8013d70:	f04f 34ff 	mov.w	r4, #4294967295
 8013d74:	4620      	mov	r0, r4
 8013d76:	bd70      	pop	{r4, r5, r6, pc}
 8013d78:	2400d440 	.word	0x2400d440

08013d7c <_malloc_r>:
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	1ccd      	adds	r5, r1, #3
 8013d82:	f025 0503 	bic.w	r5, r5, #3
 8013d86:	3508      	adds	r5, #8
 8013d88:	2d0c      	cmp	r5, #12
 8013d8a:	bf38      	it	cc
 8013d8c:	250c      	movcc	r5, #12
 8013d8e:	2d00      	cmp	r5, #0
 8013d90:	4607      	mov	r7, r0
 8013d92:	db01      	blt.n	8013d98 <_malloc_r+0x1c>
 8013d94:	42a9      	cmp	r1, r5
 8013d96:	d905      	bls.n	8013da4 <_malloc_r+0x28>
 8013d98:	230c      	movs	r3, #12
 8013d9a:	603b      	str	r3, [r7, #0]
 8013d9c:	2600      	movs	r6, #0
 8013d9e:	4630      	mov	r0, r6
 8013da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da4:	4e2e      	ldr	r6, [pc, #184]	; (8013e60 <_malloc_r+0xe4>)
 8013da6:	f000 fae7 	bl	8014378 <__malloc_lock>
 8013daa:	6833      	ldr	r3, [r6, #0]
 8013dac:	461c      	mov	r4, r3
 8013dae:	bb34      	cbnz	r4, 8013dfe <_malloc_r+0x82>
 8013db0:	4629      	mov	r1, r5
 8013db2:	4638      	mov	r0, r7
 8013db4:	f7ff ffc2 	bl	8013d3c <sbrk_aligned>
 8013db8:	1c43      	adds	r3, r0, #1
 8013dba:	4604      	mov	r4, r0
 8013dbc:	d14d      	bne.n	8013e5a <_malloc_r+0xde>
 8013dbe:	6834      	ldr	r4, [r6, #0]
 8013dc0:	4626      	mov	r6, r4
 8013dc2:	2e00      	cmp	r6, #0
 8013dc4:	d140      	bne.n	8013e48 <_malloc_r+0xcc>
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	4631      	mov	r1, r6
 8013dca:	4638      	mov	r0, r7
 8013dcc:	eb04 0803 	add.w	r8, r4, r3
 8013dd0:	f000 f9d2 	bl	8014178 <_sbrk_r>
 8013dd4:	4580      	cmp	r8, r0
 8013dd6:	d13a      	bne.n	8013e4e <_malloc_r+0xd2>
 8013dd8:	6821      	ldr	r1, [r4, #0]
 8013dda:	3503      	adds	r5, #3
 8013ddc:	1a6d      	subs	r5, r5, r1
 8013dde:	f025 0503 	bic.w	r5, r5, #3
 8013de2:	3508      	adds	r5, #8
 8013de4:	2d0c      	cmp	r5, #12
 8013de6:	bf38      	it	cc
 8013de8:	250c      	movcc	r5, #12
 8013dea:	4629      	mov	r1, r5
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7ff ffa5 	bl	8013d3c <sbrk_aligned>
 8013df2:	3001      	adds	r0, #1
 8013df4:	d02b      	beq.n	8013e4e <_malloc_r+0xd2>
 8013df6:	6823      	ldr	r3, [r4, #0]
 8013df8:	442b      	add	r3, r5
 8013dfa:	6023      	str	r3, [r4, #0]
 8013dfc:	e00e      	b.n	8013e1c <_malloc_r+0xa0>
 8013dfe:	6822      	ldr	r2, [r4, #0]
 8013e00:	1b52      	subs	r2, r2, r5
 8013e02:	d41e      	bmi.n	8013e42 <_malloc_r+0xc6>
 8013e04:	2a0b      	cmp	r2, #11
 8013e06:	d916      	bls.n	8013e36 <_malloc_r+0xba>
 8013e08:	1961      	adds	r1, r4, r5
 8013e0a:	42a3      	cmp	r3, r4
 8013e0c:	6025      	str	r5, [r4, #0]
 8013e0e:	bf18      	it	ne
 8013e10:	6059      	strne	r1, [r3, #4]
 8013e12:	6863      	ldr	r3, [r4, #4]
 8013e14:	bf08      	it	eq
 8013e16:	6031      	streq	r1, [r6, #0]
 8013e18:	5162      	str	r2, [r4, r5]
 8013e1a:	604b      	str	r3, [r1, #4]
 8013e1c:	4638      	mov	r0, r7
 8013e1e:	f104 060b 	add.w	r6, r4, #11
 8013e22:	f000 faaf 	bl	8014384 <__malloc_unlock>
 8013e26:	f026 0607 	bic.w	r6, r6, #7
 8013e2a:	1d23      	adds	r3, r4, #4
 8013e2c:	1af2      	subs	r2, r6, r3
 8013e2e:	d0b6      	beq.n	8013d9e <_malloc_r+0x22>
 8013e30:	1b9b      	subs	r3, r3, r6
 8013e32:	50a3      	str	r3, [r4, r2]
 8013e34:	e7b3      	b.n	8013d9e <_malloc_r+0x22>
 8013e36:	6862      	ldr	r2, [r4, #4]
 8013e38:	42a3      	cmp	r3, r4
 8013e3a:	bf0c      	ite	eq
 8013e3c:	6032      	streq	r2, [r6, #0]
 8013e3e:	605a      	strne	r2, [r3, #4]
 8013e40:	e7ec      	b.n	8013e1c <_malloc_r+0xa0>
 8013e42:	4623      	mov	r3, r4
 8013e44:	6864      	ldr	r4, [r4, #4]
 8013e46:	e7b2      	b.n	8013dae <_malloc_r+0x32>
 8013e48:	4634      	mov	r4, r6
 8013e4a:	6876      	ldr	r6, [r6, #4]
 8013e4c:	e7b9      	b.n	8013dc2 <_malloc_r+0x46>
 8013e4e:	230c      	movs	r3, #12
 8013e50:	603b      	str	r3, [r7, #0]
 8013e52:	4638      	mov	r0, r7
 8013e54:	f000 fa96 	bl	8014384 <__malloc_unlock>
 8013e58:	e7a1      	b.n	8013d9e <_malloc_r+0x22>
 8013e5a:	6025      	str	r5, [r4, #0]
 8013e5c:	e7de      	b.n	8013e1c <_malloc_r+0xa0>
 8013e5e:	bf00      	nop
 8013e60:	2400d43c 	.word	0x2400d43c

08013e64 <_realloc_r>:
 8013e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e68:	4680      	mov	r8, r0
 8013e6a:	4614      	mov	r4, r2
 8013e6c:	460e      	mov	r6, r1
 8013e6e:	b921      	cbnz	r1, 8013e7a <_realloc_r+0x16>
 8013e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e74:	4611      	mov	r1, r2
 8013e76:	f7ff bf81 	b.w	8013d7c <_malloc_r>
 8013e7a:	b92a      	cbnz	r2, 8013e88 <_realloc_r+0x24>
 8013e7c:	f7ff ff12 	bl	8013ca4 <_free_r>
 8013e80:	4625      	mov	r5, r4
 8013e82:	4628      	mov	r0, r5
 8013e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e88:	f000 fa82 	bl	8014390 <_malloc_usable_size_r>
 8013e8c:	4284      	cmp	r4, r0
 8013e8e:	4607      	mov	r7, r0
 8013e90:	d802      	bhi.n	8013e98 <_realloc_r+0x34>
 8013e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e96:	d812      	bhi.n	8013ebe <_realloc_r+0x5a>
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4640      	mov	r0, r8
 8013e9c:	f7ff ff6e 	bl	8013d7c <_malloc_r>
 8013ea0:	4605      	mov	r5, r0
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d0ed      	beq.n	8013e82 <_realloc_r+0x1e>
 8013ea6:	42bc      	cmp	r4, r7
 8013ea8:	4622      	mov	r2, r4
 8013eaa:	4631      	mov	r1, r6
 8013eac:	bf28      	it	cs
 8013eae:	463a      	movcs	r2, r7
 8013eb0:	f7fd fb14 	bl	80114dc <memcpy>
 8013eb4:	4631      	mov	r1, r6
 8013eb6:	4640      	mov	r0, r8
 8013eb8:	f7ff fef4 	bl	8013ca4 <_free_r>
 8013ebc:	e7e1      	b.n	8013e82 <_realloc_r+0x1e>
 8013ebe:	4635      	mov	r5, r6
 8013ec0:	e7df      	b.n	8013e82 <_realloc_r+0x1e>

08013ec2 <__ssputs_r>:
 8013ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ec6:	688e      	ldr	r6, [r1, #8]
 8013ec8:	429e      	cmp	r6, r3
 8013eca:	4682      	mov	sl, r0
 8013ecc:	460c      	mov	r4, r1
 8013ece:	4690      	mov	r8, r2
 8013ed0:	461f      	mov	r7, r3
 8013ed2:	d838      	bhi.n	8013f46 <__ssputs_r+0x84>
 8013ed4:	898a      	ldrh	r2, [r1, #12]
 8013ed6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013eda:	d032      	beq.n	8013f42 <__ssputs_r+0x80>
 8013edc:	6825      	ldr	r5, [r4, #0]
 8013ede:	6909      	ldr	r1, [r1, #16]
 8013ee0:	eba5 0901 	sub.w	r9, r5, r1
 8013ee4:	6965      	ldr	r5, [r4, #20]
 8013ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013eea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013eee:	3301      	adds	r3, #1
 8013ef0:	444b      	add	r3, r9
 8013ef2:	106d      	asrs	r5, r5, #1
 8013ef4:	429d      	cmp	r5, r3
 8013ef6:	bf38      	it	cc
 8013ef8:	461d      	movcc	r5, r3
 8013efa:	0553      	lsls	r3, r2, #21
 8013efc:	d531      	bpl.n	8013f62 <__ssputs_r+0xa0>
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7ff ff3c 	bl	8013d7c <_malloc_r>
 8013f04:	4606      	mov	r6, r0
 8013f06:	b950      	cbnz	r0, 8013f1e <__ssputs_r+0x5c>
 8013f08:	230c      	movs	r3, #12
 8013f0a:	f8ca 3000 	str.w	r3, [sl]
 8013f0e:	89a3      	ldrh	r3, [r4, #12]
 8013f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f14:	81a3      	strh	r3, [r4, #12]
 8013f16:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f1e:	6921      	ldr	r1, [r4, #16]
 8013f20:	464a      	mov	r2, r9
 8013f22:	f7fd fadb 	bl	80114dc <memcpy>
 8013f26:	89a3      	ldrh	r3, [r4, #12]
 8013f28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f30:	81a3      	strh	r3, [r4, #12]
 8013f32:	6126      	str	r6, [r4, #16]
 8013f34:	6165      	str	r5, [r4, #20]
 8013f36:	444e      	add	r6, r9
 8013f38:	eba5 0509 	sub.w	r5, r5, r9
 8013f3c:	6026      	str	r6, [r4, #0]
 8013f3e:	60a5      	str	r5, [r4, #8]
 8013f40:	463e      	mov	r6, r7
 8013f42:	42be      	cmp	r6, r7
 8013f44:	d900      	bls.n	8013f48 <__ssputs_r+0x86>
 8013f46:	463e      	mov	r6, r7
 8013f48:	6820      	ldr	r0, [r4, #0]
 8013f4a:	4632      	mov	r2, r6
 8013f4c:	4641      	mov	r1, r8
 8013f4e:	f7ff faf5 	bl	801353c <memmove>
 8013f52:	68a3      	ldr	r3, [r4, #8]
 8013f54:	1b9b      	subs	r3, r3, r6
 8013f56:	60a3      	str	r3, [r4, #8]
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	4433      	add	r3, r6
 8013f5c:	6023      	str	r3, [r4, #0]
 8013f5e:	2000      	movs	r0, #0
 8013f60:	e7db      	b.n	8013f1a <__ssputs_r+0x58>
 8013f62:	462a      	mov	r2, r5
 8013f64:	f7ff ff7e 	bl	8013e64 <_realloc_r>
 8013f68:	4606      	mov	r6, r0
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	d1e1      	bne.n	8013f32 <__ssputs_r+0x70>
 8013f6e:	6921      	ldr	r1, [r4, #16]
 8013f70:	4650      	mov	r0, sl
 8013f72:	f7ff fe97 	bl	8013ca4 <_free_r>
 8013f76:	e7c7      	b.n	8013f08 <__ssputs_r+0x46>

08013f78 <_svfiprintf_r>:
 8013f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	4698      	mov	r8, r3
 8013f7e:	898b      	ldrh	r3, [r1, #12]
 8013f80:	061b      	lsls	r3, r3, #24
 8013f82:	b09d      	sub	sp, #116	; 0x74
 8013f84:	4607      	mov	r7, r0
 8013f86:	460d      	mov	r5, r1
 8013f88:	4614      	mov	r4, r2
 8013f8a:	d50e      	bpl.n	8013faa <_svfiprintf_r+0x32>
 8013f8c:	690b      	ldr	r3, [r1, #16]
 8013f8e:	b963      	cbnz	r3, 8013faa <_svfiprintf_r+0x32>
 8013f90:	2140      	movs	r1, #64	; 0x40
 8013f92:	f7ff fef3 	bl	8013d7c <_malloc_r>
 8013f96:	6028      	str	r0, [r5, #0]
 8013f98:	6128      	str	r0, [r5, #16]
 8013f9a:	b920      	cbnz	r0, 8013fa6 <_svfiprintf_r+0x2e>
 8013f9c:	230c      	movs	r3, #12
 8013f9e:	603b      	str	r3, [r7, #0]
 8013fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa4:	e0d1      	b.n	801414a <_svfiprintf_r+0x1d2>
 8013fa6:	2340      	movs	r3, #64	; 0x40
 8013fa8:	616b      	str	r3, [r5, #20]
 8013faa:	2300      	movs	r3, #0
 8013fac:	9309      	str	r3, [sp, #36]	; 0x24
 8013fae:	2320      	movs	r3, #32
 8013fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fb8:	2330      	movs	r3, #48	; 0x30
 8013fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014164 <_svfiprintf_r+0x1ec>
 8013fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fc2:	f04f 0901 	mov.w	r9, #1
 8013fc6:	4623      	mov	r3, r4
 8013fc8:	469a      	mov	sl, r3
 8013fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fce:	b10a      	cbz	r2, 8013fd4 <_svfiprintf_r+0x5c>
 8013fd0:	2a25      	cmp	r2, #37	; 0x25
 8013fd2:	d1f9      	bne.n	8013fc8 <_svfiprintf_r+0x50>
 8013fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8013fd8:	d00b      	beq.n	8013ff2 <_svfiprintf_r+0x7a>
 8013fda:	465b      	mov	r3, fp
 8013fdc:	4622      	mov	r2, r4
 8013fde:	4629      	mov	r1, r5
 8013fe0:	4638      	mov	r0, r7
 8013fe2:	f7ff ff6e 	bl	8013ec2 <__ssputs_r>
 8013fe6:	3001      	adds	r0, #1
 8013fe8:	f000 80aa 	beq.w	8014140 <_svfiprintf_r+0x1c8>
 8013fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fee:	445a      	add	r2, fp
 8013ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8013ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f000 80a2 	beq.w	8014140 <_svfiprintf_r+0x1c8>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8014002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014006:	f10a 0a01 	add.w	sl, sl, #1
 801400a:	9304      	str	r3, [sp, #16]
 801400c:	9307      	str	r3, [sp, #28]
 801400e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014012:	931a      	str	r3, [sp, #104]	; 0x68
 8014014:	4654      	mov	r4, sl
 8014016:	2205      	movs	r2, #5
 8014018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801401c:	4851      	ldr	r0, [pc, #324]	; (8014164 <_svfiprintf_r+0x1ec>)
 801401e:	f7ec f9c7 	bl	80003b0 <memchr>
 8014022:	9a04      	ldr	r2, [sp, #16]
 8014024:	b9d8      	cbnz	r0, 801405e <_svfiprintf_r+0xe6>
 8014026:	06d0      	lsls	r0, r2, #27
 8014028:	bf44      	itt	mi
 801402a:	2320      	movmi	r3, #32
 801402c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014030:	0711      	lsls	r1, r2, #28
 8014032:	bf44      	itt	mi
 8014034:	232b      	movmi	r3, #43	; 0x2b
 8014036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801403a:	f89a 3000 	ldrb.w	r3, [sl]
 801403e:	2b2a      	cmp	r3, #42	; 0x2a
 8014040:	d015      	beq.n	801406e <_svfiprintf_r+0xf6>
 8014042:	9a07      	ldr	r2, [sp, #28]
 8014044:	4654      	mov	r4, sl
 8014046:	2000      	movs	r0, #0
 8014048:	f04f 0c0a 	mov.w	ip, #10
 801404c:	4621      	mov	r1, r4
 801404e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014052:	3b30      	subs	r3, #48	; 0x30
 8014054:	2b09      	cmp	r3, #9
 8014056:	d94e      	bls.n	80140f6 <_svfiprintf_r+0x17e>
 8014058:	b1b0      	cbz	r0, 8014088 <_svfiprintf_r+0x110>
 801405a:	9207      	str	r2, [sp, #28]
 801405c:	e014      	b.n	8014088 <_svfiprintf_r+0x110>
 801405e:	eba0 0308 	sub.w	r3, r0, r8
 8014062:	fa09 f303 	lsl.w	r3, r9, r3
 8014066:	4313      	orrs	r3, r2
 8014068:	9304      	str	r3, [sp, #16]
 801406a:	46a2      	mov	sl, r4
 801406c:	e7d2      	b.n	8014014 <_svfiprintf_r+0x9c>
 801406e:	9b03      	ldr	r3, [sp, #12]
 8014070:	1d19      	adds	r1, r3, #4
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	9103      	str	r1, [sp, #12]
 8014076:	2b00      	cmp	r3, #0
 8014078:	bfbb      	ittet	lt
 801407a:	425b      	neglt	r3, r3
 801407c:	f042 0202 	orrlt.w	r2, r2, #2
 8014080:	9307      	strge	r3, [sp, #28]
 8014082:	9307      	strlt	r3, [sp, #28]
 8014084:	bfb8      	it	lt
 8014086:	9204      	strlt	r2, [sp, #16]
 8014088:	7823      	ldrb	r3, [r4, #0]
 801408a:	2b2e      	cmp	r3, #46	; 0x2e
 801408c:	d10c      	bne.n	80140a8 <_svfiprintf_r+0x130>
 801408e:	7863      	ldrb	r3, [r4, #1]
 8014090:	2b2a      	cmp	r3, #42	; 0x2a
 8014092:	d135      	bne.n	8014100 <_svfiprintf_r+0x188>
 8014094:	9b03      	ldr	r3, [sp, #12]
 8014096:	1d1a      	adds	r2, r3, #4
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	9203      	str	r2, [sp, #12]
 801409c:	2b00      	cmp	r3, #0
 801409e:	bfb8      	it	lt
 80140a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80140a4:	3402      	adds	r4, #2
 80140a6:	9305      	str	r3, [sp, #20]
 80140a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014174 <_svfiprintf_r+0x1fc>
 80140ac:	7821      	ldrb	r1, [r4, #0]
 80140ae:	2203      	movs	r2, #3
 80140b0:	4650      	mov	r0, sl
 80140b2:	f7ec f97d 	bl	80003b0 <memchr>
 80140b6:	b140      	cbz	r0, 80140ca <_svfiprintf_r+0x152>
 80140b8:	2340      	movs	r3, #64	; 0x40
 80140ba:	eba0 000a 	sub.w	r0, r0, sl
 80140be:	fa03 f000 	lsl.w	r0, r3, r0
 80140c2:	9b04      	ldr	r3, [sp, #16]
 80140c4:	4303      	orrs	r3, r0
 80140c6:	3401      	adds	r4, #1
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140ce:	4826      	ldr	r0, [pc, #152]	; (8014168 <_svfiprintf_r+0x1f0>)
 80140d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140d4:	2206      	movs	r2, #6
 80140d6:	f7ec f96b 	bl	80003b0 <memchr>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d038      	beq.n	8014150 <_svfiprintf_r+0x1d8>
 80140de:	4b23      	ldr	r3, [pc, #140]	; (801416c <_svfiprintf_r+0x1f4>)
 80140e0:	bb1b      	cbnz	r3, 801412a <_svfiprintf_r+0x1b2>
 80140e2:	9b03      	ldr	r3, [sp, #12]
 80140e4:	3307      	adds	r3, #7
 80140e6:	f023 0307 	bic.w	r3, r3, #7
 80140ea:	3308      	adds	r3, #8
 80140ec:	9303      	str	r3, [sp, #12]
 80140ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f0:	4433      	add	r3, r6
 80140f2:	9309      	str	r3, [sp, #36]	; 0x24
 80140f4:	e767      	b.n	8013fc6 <_svfiprintf_r+0x4e>
 80140f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80140fa:	460c      	mov	r4, r1
 80140fc:	2001      	movs	r0, #1
 80140fe:	e7a5      	b.n	801404c <_svfiprintf_r+0xd4>
 8014100:	2300      	movs	r3, #0
 8014102:	3401      	adds	r4, #1
 8014104:	9305      	str	r3, [sp, #20]
 8014106:	4619      	mov	r1, r3
 8014108:	f04f 0c0a 	mov.w	ip, #10
 801410c:	4620      	mov	r0, r4
 801410e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014112:	3a30      	subs	r2, #48	; 0x30
 8014114:	2a09      	cmp	r2, #9
 8014116:	d903      	bls.n	8014120 <_svfiprintf_r+0x1a8>
 8014118:	2b00      	cmp	r3, #0
 801411a:	d0c5      	beq.n	80140a8 <_svfiprintf_r+0x130>
 801411c:	9105      	str	r1, [sp, #20]
 801411e:	e7c3      	b.n	80140a8 <_svfiprintf_r+0x130>
 8014120:	fb0c 2101 	mla	r1, ip, r1, r2
 8014124:	4604      	mov	r4, r0
 8014126:	2301      	movs	r3, #1
 8014128:	e7f0      	b.n	801410c <_svfiprintf_r+0x194>
 801412a:	ab03      	add	r3, sp, #12
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	462a      	mov	r2, r5
 8014130:	4b0f      	ldr	r3, [pc, #60]	; (8014170 <_svfiprintf_r+0x1f8>)
 8014132:	a904      	add	r1, sp, #16
 8014134:	4638      	mov	r0, r7
 8014136:	f7fd fbd3 	bl	80118e0 <_printf_float>
 801413a:	1c42      	adds	r2, r0, #1
 801413c:	4606      	mov	r6, r0
 801413e:	d1d6      	bne.n	80140ee <_svfiprintf_r+0x176>
 8014140:	89ab      	ldrh	r3, [r5, #12]
 8014142:	065b      	lsls	r3, r3, #25
 8014144:	f53f af2c 	bmi.w	8013fa0 <_svfiprintf_r+0x28>
 8014148:	9809      	ldr	r0, [sp, #36]	; 0x24
 801414a:	b01d      	add	sp, #116	; 0x74
 801414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014150:	ab03      	add	r3, sp, #12
 8014152:	9300      	str	r3, [sp, #0]
 8014154:	462a      	mov	r2, r5
 8014156:	4b06      	ldr	r3, [pc, #24]	; (8014170 <_svfiprintf_r+0x1f8>)
 8014158:	a904      	add	r1, sp, #16
 801415a:	4638      	mov	r0, r7
 801415c:	f7fd fe4c 	bl	8011df8 <_printf_i>
 8014160:	e7eb      	b.n	801413a <_svfiprintf_r+0x1c2>
 8014162:	bf00      	nop
 8014164:	08018e10 	.word	0x08018e10
 8014168:	08018e1a 	.word	0x08018e1a
 801416c:	080118e1 	.word	0x080118e1
 8014170:	08013ec3 	.word	0x08013ec3
 8014174:	08018e16 	.word	0x08018e16

08014178 <_sbrk_r>:
 8014178:	b538      	push	{r3, r4, r5, lr}
 801417a:	4d06      	ldr	r5, [pc, #24]	; (8014194 <_sbrk_r+0x1c>)
 801417c:	2300      	movs	r3, #0
 801417e:	4604      	mov	r4, r0
 8014180:	4608      	mov	r0, r1
 8014182:	602b      	str	r3, [r5, #0]
 8014184:	f7f3 f99c 	bl	80074c0 <_sbrk>
 8014188:	1c43      	adds	r3, r0, #1
 801418a:	d102      	bne.n	8014192 <_sbrk_r+0x1a>
 801418c:	682b      	ldr	r3, [r5, #0]
 801418e:	b103      	cbz	r3, 8014192 <_sbrk_r+0x1a>
 8014190:	6023      	str	r3, [r4, #0]
 8014192:	bd38      	pop	{r3, r4, r5, pc}
 8014194:	2400d444 	.word	0x2400d444

08014198 <_raise_r>:
 8014198:	291f      	cmp	r1, #31
 801419a:	b538      	push	{r3, r4, r5, lr}
 801419c:	4604      	mov	r4, r0
 801419e:	460d      	mov	r5, r1
 80141a0:	d904      	bls.n	80141ac <_raise_r+0x14>
 80141a2:	2316      	movs	r3, #22
 80141a4:	6003      	str	r3, [r0, #0]
 80141a6:	f04f 30ff 	mov.w	r0, #4294967295
 80141aa:	bd38      	pop	{r3, r4, r5, pc}
 80141ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80141ae:	b112      	cbz	r2, 80141b6 <_raise_r+0x1e>
 80141b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141b4:	b94b      	cbnz	r3, 80141ca <_raise_r+0x32>
 80141b6:	4620      	mov	r0, r4
 80141b8:	f000 f830 	bl	801421c <_getpid_r>
 80141bc:	462a      	mov	r2, r5
 80141be:	4601      	mov	r1, r0
 80141c0:	4620      	mov	r0, r4
 80141c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141c6:	f000 b817 	b.w	80141f8 <_kill_r>
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d00a      	beq.n	80141e4 <_raise_r+0x4c>
 80141ce:	1c59      	adds	r1, r3, #1
 80141d0:	d103      	bne.n	80141da <_raise_r+0x42>
 80141d2:	2316      	movs	r3, #22
 80141d4:	6003      	str	r3, [r0, #0]
 80141d6:	2001      	movs	r0, #1
 80141d8:	e7e7      	b.n	80141aa <_raise_r+0x12>
 80141da:	2400      	movs	r4, #0
 80141dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80141e0:	4628      	mov	r0, r5
 80141e2:	4798      	blx	r3
 80141e4:	2000      	movs	r0, #0
 80141e6:	e7e0      	b.n	80141aa <_raise_r+0x12>

080141e8 <raise>:
 80141e8:	4b02      	ldr	r3, [pc, #8]	; (80141f4 <raise+0xc>)
 80141ea:	4601      	mov	r1, r0
 80141ec:	6818      	ldr	r0, [r3, #0]
 80141ee:	f7ff bfd3 	b.w	8014198 <_raise_r>
 80141f2:	bf00      	nop
 80141f4:	24000348 	.word	0x24000348

080141f8 <_kill_r>:
 80141f8:	b538      	push	{r3, r4, r5, lr}
 80141fa:	4d07      	ldr	r5, [pc, #28]	; (8014218 <_kill_r+0x20>)
 80141fc:	2300      	movs	r3, #0
 80141fe:	4604      	mov	r4, r0
 8014200:	4608      	mov	r0, r1
 8014202:	4611      	mov	r1, r2
 8014204:	602b      	str	r3, [r5, #0]
 8014206:	f7f3 f921 	bl	800744c <_kill>
 801420a:	1c43      	adds	r3, r0, #1
 801420c:	d102      	bne.n	8014214 <_kill_r+0x1c>
 801420e:	682b      	ldr	r3, [r5, #0]
 8014210:	b103      	cbz	r3, 8014214 <_kill_r+0x1c>
 8014212:	6023      	str	r3, [r4, #0]
 8014214:	bd38      	pop	{r3, r4, r5, pc}
 8014216:	bf00      	nop
 8014218:	2400d444 	.word	0x2400d444

0801421c <_getpid_r>:
 801421c:	f7f3 b914 	b.w	8007448 <_getpid>

08014220 <__sread>:
 8014220:	b510      	push	{r4, lr}
 8014222:	460c      	mov	r4, r1
 8014224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014228:	f000 f8ba 	bl	80143a0 <_read_r>
 801422c:	2800      	cmp	r0, #0
 801422e:	bfab      	itete	ge
 8014230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014232:	89a3      	ldrhlt	r3, [r4, #12]
 8014234:	181b      	addge	r3, r3, r0
 8014236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801423a:	bfac      	ite	ge
 801423c:	6563      	strge	r3, [r4, #84]	; 0x54
 801423e:	81a3      	strhlt	r3, [r4, #12]
 8014240:	bd10      	pop	{r4, pc}

08014242 <__swrite>:
 8014242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014246:	461f      	mov	r7, r3
 8014248:	898b      	ldrh	r3, [r1, #12]
 801424a:	05db      	lsls	r3, r3, #23
 801424c:	4605      	mov	r5, r0
 801424e:	460c      	mov	r4, r1
 8014250:	4616      	mov	r6, r2
 8014252:	d505      	bpl.n	8014260 <__swrite+0x1e>
 8014254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014258:	2302      	movs	r3, #2
 801425a:	2200      	movs	r2, #0
 801425c:	f000 f868 	bl	8014330 <_lseek_r>
 8014260:	89a3      	ldrh	r3, [r4, #12]
 8014262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801426a:	81a3      	strh	r3, [r4, #12]
 801426c:	4632      	mov	r2, r6
 801426e:	463b      	mov	r3, r7
 8014270:	4628      	mov	r0, r5
 8014272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014276:	f000 b817 	b.w	80142a8 <_write_r>

0801427a <__sseek>:
 801427a:	b510      	push	{r4, lr}
 801427c:	460c      	mov	r4, r1
 801427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014282:	f000 f855 	bl	8014330 <_lseek_r>
 8014286:	1c43      	adds	r3, r0, #1
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	bf15      	itete	ne
 801428c:	6560      	strne	r0, [r4, #84]	; 0x54
 801428e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014296:	81a3      	strheq	r3, [r4, #12]
 8014298:	bf18      	it	ne
 801429a:	81a3      	strhne	r3, [r4, #12]
 801429c:	bd10      	pop	{r4, pc}

0801429e <__sclose>:
 801429e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142a2:	f000 b813 	b.w	80142cc <_close_r>
	...

080142a8 <_write_r>:
 80142a8:	b538      	push	{r3, r4, r5, lr}
 80142aa:	4d07      	ldr	r5, [pc, #28]	; (80142c8 <_write_r+0x20>)
 80142ac:	4604      	mov	r4, r0
 80142ae:	4608      	mov	r0, r1
 80142b0:	4611      	mov	r1, r2
 80142b2:	2200      	movs	r2, #0
 80142b4:	602a      	str	r2, [r5, #0]
 80142b6:	461a      	mov	r2, r3
 80142b8:	f7f3 f8e6 	bl	8007488 <_write>
 80142bc:	1c43      	adds	r3, r0, #1
 80142be:	d102      	bne.n	80142c6 <_write_r+0x1e>
 80142c0:	682b      	ldr	r3, [r5, #0]
 80142c2:	b103      	cbz	r3, 80142c6 <_write_r+0x1e>
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	bd38      	pop	{r3, r4, r5, pc}
 80142c8:	2400d444 	.word	0x2400d444

080142cc <_close_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	4d06      	ldr	r5, [pc, #24]	; (80142e8 <_close_r+0x1c>)
 80142d0:	2300      	movs	r3, #0
 80142d2:	4604      	mov	r4, r0
 80142d4:	4608      	mov	r0, r1
 80142d6:	602b      	str	r3, [r5, #0]
 80142d8:	f7f3 f8e4 	bl	80074a4 <_close>
 80142dc:	1c43      	adds	r3, r0, #1
 80142de:	d102      	bne.n	80142e6 <_close_r+0x1a>
 80142e0:	682b      	ldr	r3, [r5, #0]
 80142e2:	b103      	cbz	r3, 80142e6 <_close_r+0x1a>
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
 80142e8:	2400d444 	.word	0x2400d444

080142ec <_fstat_r>:
 80142ec:	b538      	push	{r3, r4, r5, lr}
 80142ee:	4d07      	ldr	r5, [pc, #28]	; (801430c <_fstat_r+0x20>)
 80142f0:	2300      	movs	r3, #0
 80142f2:	4604      	mov	r4, r0
 80142f4:	4608      	mov	r0, r1
 80142f6:	4611      	mov	r1, r2
 80142f8:	602b      	str	r3, [r5, #0]
 80142fa:	f7f3 f8d7 	bl	80074ac <_fstat>
 80142fe:	1c43      	adds	r3, r0, #1
 8014300:	d102      	bne.n	8014308 <_fstat_r+0x1c>
 8014302:	682b      	ldr	r3, [r5, #0]
 8014304:	b103      	cbz	r3, 8014308 <_fstat_r+0x1c>
 8014306:	6023      	str	r3, [r4, #0]
 8014308:	bd38      	pop	{r3, r4, r5, pc}
 801430a:	bf00      	nop
 801430c:	2400d444 	.word	0x2400d444

08014310 <_isatty_r>:
 8014310:	b538      	push	{r3, r4, r5, lr}
 8014312:	4d06      	ldr	r5, [pc, #24]	; (801432c <_isatty_r+0x1c>)
 8014314:	2300      	movs	r3, #0
 8014316:	4604      	mov	r4, r0
 8014318:	4608      	mov	r0, r1
 801431a:	602b      	str	r3, [r5, #0]
 801431c:	f7f3 f8cc 	bl	80074b8 <_isatty>
 8014320:	1c43      	adds	r3, r0, #1
 8014322:	d102      	bne.n	801432a <_isatty_r+0x1a>
 8014324:	682b      	ldr	r3, [r5, #0]
 8014326:	b103      	cbz	r3, 801432a <_isatty_r+0x1a>
 8014328:	6023      	str	r3, [r4, #0]
 801432a:	bd38      	pop	{r3, r4, r5, pc}
 801432c:	2400d444 	.word	0x2400d444

08014330 <_lseek_r>:
 8014330:	b538      	push	{r3, r4, r5, lr}
 8014332:	4d07      	ldr	r5, [pc, #28]	; (8014350 <_lseek_r+0x20>)
 8014334:	4604      	mov	r4, r0
 8014336:	4608      	mov	r0, r1
 8014338:	4611      	mov	r1, r2
 801433a:	2200      	movs	r2, #0
 801433c:	602a      	str	r2, [r5, #0]
 801433e:	461a      	mov	r2, r3
 8014340:	f7f3 f8bc 	bl	80074bc <_lseek>
 8014344:	1c43      	adds	r3, r0, #1
 8014346:	d102      	bne.n	801434e <_lseek_r+0x1e>
 8014348:	682b      	ldr	r3, [r5, #0]
 801434a:	b103      	cbz	r3, 801434e <_lseek_r+0x1e>
 801434c:	6023      	str	r3, [r4, #0]
 801434e:	bd38      	pop	{r3, r4, r5, pc}
 8014350:	2400d444 	.word	0x2400d444

08014354 <__ascii_mbtowc>:
 8014354:	b082      	sub	sp, #8
 8014356:	b901      	cbnz	r1, 801435a <__ascii_mbtowc+0x6>
 8014358:	a901      	add	r1, sp, #4
 801435a:	b142      	cbz	r2, 801436e <__ascii_mbtowc+0x1a>
 801435c:	b14b      	cbz	r3, 8014372 <__ascii_mbtowc+0x1e>
 801435e:	7813      	ldrb	r3, [r2, #0]
 8014360:	600b      	str	r3, [r1, #0]
 8014362:	7812      	ldrb	r2, [r2, #0]
 8014364:	1e10      	subs	r0, r2, #0
 8014366:	bf18      	it	ne
 8014368:	2001      	movne	r0, #1
 801436a:	b002      	add	sp, #8
 801436c:	4770      	bx	lr
 801436e:	4610      	mov	r0, r2
 8014370:	e7fb      	b.n	801436a <__ascii_mbtowc+0x16>
 8014372:	f06f 0001 	mvn.w	r0, #1
 8014376:	e7f8      	b.n	801436a <__ascii_mbtowc+0x16>

08014378 <__malloc_lock>:
 8014378:	4801      	ldr	r0, [pc, #4]	; (8014380 <__malloc_lock+0x8>)
 801437a:	f7ff b870 	b.w	801345e <__retarget_lock_acquire_recursive>
 801437e:	bf00      	nop
 8014380:	2400d438 	.word	0x2400d438

08014384 <__malloc_unlock>:
 8014384:	4801      	ldr	r0, [pc, #4]	; (801438c <__malloc_unlock+0x8>)
 8014386:	f7ff b86b 	b.w	8013460 <__retarget_lock_release_recursive>
 801438a:	bf00      	nop
 801438c:	2400d438 	.word	0x2400d438

08014390 <_malloc_usable_size_r>:
 8014390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014394:	1f18      	subs	r0, r3, #4
 8014396:	2b00      	cmp	r3, #0
 8014398:	bfbc      	itt	lt
 801439a:	580b      	ldrlt	r3, [r1, r0]
 801439c:	18c0      	addlt	r0, r0, r3
 801439e:	4770      	bx	lr

080143a0 <_read_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4d07      	ldr	r5, [pc, #28]	; (80143c0 <_read_r+0x20>)
 80143a4:	4604      	mov	r4, r0
 80143a6:	4608      	mov	r0, r1
 80143a8:	4611      	mov	r1, r2
 80143aa:	2200      	movs	r2, #0
 80143ac:	602a      	str	r2, [r5, #0]
 80143ae:	461a      	mov	r2, r3
 80143b0:	f7f3 f85c 	bl	800746c <_read>
 80143b4:	1c43      	adds	r3, r0, #1
 80143b6:	d102      	bne.n	80143be <_read_r+0x1e>
 80143b8:	682b      	ldr	r3, [r5, #0]
 80143ba:	b103      	cbz	r3, 80143be <_read_r+0x1e>
 80143bc:	6023      	str	r3, [r4, #0]
 80143be:	bd38      	pop	{r3, r4, r5, pc}
 80143c0:	2400d444 	.word	0x2400d444

080143c4 <__ascii_wctomb>:
 80143c4:	b149      	cbz	r1, 80143da <__ascii_wctomb+0x16>
 80143c6:	2aff      	cmp	r2, #255	; 0xff
 80143c8:	bf85      	ittet	hi
 80143ca:	238a      	movhi	r3, #138	; 0x8a
 80143cc:	6003      	strhi	r3, [r0, #0]
 80143ce:	700a      	strbls	r2, [r1, #0]
 80143d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80143d4:	bf98      	it	ls
 80143d6:	2001      	movls	r0, #1
 80143d8:	4770      	bx	lr
 80143da:	4608      	mov	r0, r1
 80143dc:	4770      	bx	lr
	...

080143e0 <exp>:
 80143e0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80143e2:	ee10 3a90 	vmov	r3, s1
 80143e6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80143ea:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80143ee:	18a2      	adds	r2, r4, r2
 80143f0:	2a3e      	cmp	r2, #62	; 0x3e
 80143f2:	ee10 1a10 	vmov	r1, s0
 80143f6:	d922      	bls.n	801443e <exp+0x5e>
 80143f8:	2a00      	cmp	r2, #0
 80143fa:	da06      	bge.n	801440a <exp+0x2a>
 80143fc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014400:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014404:	b004      	add	sp, #16
 8014406:	bcf0      	pop	{r4, r5, r6, r7}
 8014408:	4770      	bx	lr
 801440a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801440e:	f04f 0000 	mov.w	r0, #0
 8014412:	d913      	bls.n	801443c <exp+0x5c>
 8014414:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8014418:	bf08      	it	eq
 801441a:	4281      	cmpeq	r1, r0
 801441c:	f000 80a0 	beq.w	8014560 <exp+0x180>
 8014420:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014424:	4294      	cmp	r4, r2
 8014426:	d0e9      	beq.n	80143fc <exp+0x1c>
 8014428:	4283      	cmp	r3, r0
 801442a:	da03      	bge.n	8014434 <exp+0x54>
 801442c:	b004      	add	sp, #16
 801442e:	bcf0      	pop	{r4, r5, r6, r7}
 8014430:	f000 b8c6 	b.w	80145c0 <__math_uflow>
 8014434:	b004      	add	sp, #16
 8014436:	bcf0      	pop	{r4, r5, r6, r7}
 8014438:	f000 b8ca 	b.w	80145d0 <__math_oflow>
 801443c:	4604      	mov	r4, r0
 801443e:	4950      	ldr	r1, [pc, #320]	; (8014580 <exp+0x1a0>)
 8014440:	ed91 6b02 	vldr	d6, [r1, #8]
 8014444:	ed91 5b00 	vldr	d5, [r1]
 8014448:	eeb0 7b46 	vmov.f64	d7, d6
 801444c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8014450:	ee17 5a10 	vmov	r5, s14
 8014454:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014458:	ed91 6b04 	vldr	d6, [r1, #16]
 801445c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8014460:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014464:	ed91 6b06 	vldr	d6, [r1, #24]
 8014468:	18d8      	adds	r0, r3, r3
 801446a:	f100 030f 	add.w	r3, r0, #15
 801446e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8014472:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014476:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801447a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801447e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8014482:	ed91 5b08 	vldr	d5, [r1, #32]
 8014486:	ee30 6b06 	vadd.f64	d6, d0, d6
 801448a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801448e:	eea4 5b00 	vfma.f64	d5, d4, d0
 8014492:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8014496:	eea5 6b07 	vfma.f64	d6, d5, d7
 801449a:	ee27 7b07 	vmul.f64	d7, d7, d7
 801449e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80144a2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 80144a6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80144aa:	eea4 5b00 	vfma.f64	d5, d4, d0
 80144ae:	2600      	movs	r6, #0
 80144b0:	19f2      	adds	r2, r6, r7
 80144b2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 80144b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80144ba:	2c00      	cmp	r4, #0
 80144bc:	d14b      	bne.n	8014556 <exp+0x176>
 80144be:	42b5      	cmp	r5, r6
 80144c0:	db10      	blt.n	80144e4 <exp+0x104>
 80144c2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80144c6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8014568 <exp+0x188>
 80144ca:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80144ce:	4610      	mov	r0, r2
 80144d0:	ec41 0b10 	vmov	d0, r0, r1
 80144d4:	eea6 0b00 	vfma.f64	d0, d6, d0
 80144d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80144dc:	b004      	add	sp, #16
 80144de:	bcf0      	pop	{r4, r5, r6, r7}
 80144e0:	f000 b8ae 	b.w	8014640 <__math_check_oflow>
 80144e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80144e8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80144ec:	4610      	mov	r0, r2
 80144ee:	ec41 0b17 	vmov	d7, r0, r1
 80144f2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80144f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80144fa:	ee37 5b06 	vadd.f64	d5, d7, d6
 80144fe:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8014502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014506:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014570 <exp+0x190>
 801450a:	d51e      	bpl.n	801454a <exp+0x16a>
 801450c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8014510:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014514:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014518:	ee34 6b43 	vsub.f64	d6, d4, d3
 801451c:	ee36 5b05 	vadd.f64	d5, d6, d5
 8014520:	ee35 5b07 	vadd.f64	d5, d5, d7
 8014524:	ee35 5b03 	vadd.f64	d5, d5, d3
 8014528:	ee35 5b44 	vsub.f64	d5, d5, d4
 801452c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8014530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014534:	d101      	bne.n	801453a <exp+0x15a>
 8014536:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8014578 <exp+0x198>
 801453a:	ed8d 0b00 	vstr	d0, [sp]
 801453e:	ed9d 7b00 	vldr	d7, [sp]
 8014542:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014546:	ed8d 7b02 	vstr	d7, [sp, #8]
 801454a:	ee25 0b00 	vmul.f64	d0, d5, d0
 801454e:	b004      	add	sp, #16
 8014550:	bcf0      	pop	{r4, r5, r6, r7}
 8014552:	f000 b86c 	b.w	801462e <__math_check_uflow>
 8014556:	ec43 2b10 	vmov	d0, r2, r3
 801455a:	eea6 0b00 	vfma.f64	d0, d6, d0
 801455e:	e751      	b.n	8014404 <exp+0x24>
 8014560:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014578 <exp+0x198>
 8014564:	e74e      	b.n	8014404 <exp+0x24>
 8014566:	bf00      	nop
 8014568:	00000000 	.word	0x00000000
 801456c:	7f000000 	.word	0x7f000000
 8014570:	00000000 	.word	0x00000000
 8014574:	00100000 	.word	0x00100000
	...
 8014580:	08019168 	.word	0x08019168

08014584 <with_errno>:
 8014584:	b513      	push	{r0, r1, r4, lr}
 8014586:	4604      	mov	r4, r0
 8014588:	ed8d 0b00 	vstr	d0, [sp]
 801458c:	f7fc ff6a 	bl	8011464 <__errno>
 8014590:	ed9d 0b00 	vldr	d0, [sp]
 8014594:	6004      	str	r4, [r0, #0]
 8014596:	b002      	add	sp, #8
 8014598:	bd10      	pop	{r4, pc}

0801459a <xflow>:
 801459a:	b082      	sub	sp, #8
 801459c:	b158      	cbz	r0, 80145b6 <xflow+0x1c>
 801459e:	eeb1 7b40 	vneg.f64	d7, d0
 80145a2:	ed8d 7b00 	vstr	d7, [sp]
 80145a6:	ed9d 7b00 	vldr	d7, [sp]
 80145aa:	2022      	movs	r0, #34	; 0x22
 80145ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80145b0:	b002      	add	sp, #8
 80145b2:	f7ff bfe7 	b.w	8014584 <with_errno>
 80145b6:	eeb0 7b40 	vmov.f64	d7, d0
 80145ba:	e7f2      	b.n	80145a2 <xflow+0x8>
 80145bc:	0000      	movs	r0, r0
	...

080145c0 <__math_uflow>:
 80145c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80145c8 <__math_uflow+0x8>
 80145c4:	f7ff bfe9 	b.w	801459a <xflow>
 80145c8:	00000000 	.word	0x00000000
 80145cc:	10000000 	.word	0x10000000

080145d0 <__math_oflow>:
 80145d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80145d8 <__math_oflow+0x8>
 80145d4:	f7ff bfe1 	b.w	801459a <xflow>
 80145d8:	00000000 	.word	0x00000000
 80145dc:	70000000 	.word	0x70000000

080145e0 <__math_divzero>:
 80145e0:	b082      	sub	sp, #8
 80145e2:	2800      	cmp	r0, #0
 80145e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80145e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80145ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80145f0:	ed8d 7b00 	vstr	d7, [sp]
 80145f4:	ed9d 0b00 	vldr	d0, [sp]
 80145f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8014608 <__math_divzero+0x28>
 80145fc:	2022      	movs	r0, #34	; 0x22
 80145fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8014602:	b002      	add	sp, #8
 8014604:	f7ff bfbe 	b.w	8014584 <with_errno>
	...

08014610 <__math_invalid>:
 8014610:	eeb0 7b40 	vmov.f64	d7, d0
 8014614:	eeb4 7b47 	vcmp.f64	d7, d7
 8014618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8014620:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8014624:	d602      	bvs.n	801462c <__math_invalid+0x1c>
 8014626:	2021      	movs	r0, #33	; 0x21
 8014628:	f7ff bfac 	b.w	8014584 <with_errno>
 801462c:	4770      	bx	lr

0801462e <__math_check_uflow>:
 801462e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014636:	d102      	bne.n	801463e <__math_check_uflow+0x10>
 8014638:	2022      	movs	r0, #34	; 0x22
 801463a:	f7ff bfa3 	b.w	8014584 <with_errno>
 801463e:	4770      	bx	lr

08014640 <__math_check_oflow>:
 8014640:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8014660 <__math_check_oflow+0x20>
 8014644:	eeb0 7bc0 	vabs.f64	d7, d0
 8014648:	eeb4 7b46 	vcmp.f64	d7, d6
 801464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014650:	dd02      	ble.n	8014658 <__math_check_oflow+0x18>
 8014652:	2022      	movs	r0, #34	; 0x22
 8014654:	f7ff bf96 	b.w	8014584 <with_errno>
 8014658:	4770      	bx	lr
 801465a:	bf00      	nop
 801465c:	f3af 8000 	nop.w
 8014660:	ffffffff 	.word	0xffffffff
 8014664:	7fefffff 	.word	0x7fefffff

08014668 <cos>:
 8014668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801466a:	eeb0 7b40 	vmov.f64	d7, d0
 801466e:	ee17 3a90 	vmov	r3, s15
 8014672:	4a21      	ldr	r2, [pc, #132]	; (80146f8 <cos+0x90>)
 8014674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014678:	4293      	cmp	r3, r2
 801467a:	dc06      	bgt.n	801468a <cos+0x22>
 801467c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80146f0 <cos+0x88>
 8014680:	b005      	add	sp, #20
 8014682:	f85d eb04 	ldr.w	lr, [sp], #4
 8014686:	f000 bb33 	b.w	8014cf0 <__kernel_cos>
 801468a:	4a1c      	ldr	r2, [pc, #112]	; (80146fc <cos+0x94>)
 801468c:	4293      	cmp	r3, r2
 801468e:	dd04      	ble.n	801469a <cos+0x32>
 8014690:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014694:	b005      	add	sp, #20
 8014696:	f85d fb04 	ldr.w	pc, [sp], #4
 801469a:	4668      	mov	r0, sp
 801469c:	f000 f9e4 	bl	8014a68 <__ieee754_rem_pio2>
 80146a0:	f000 0003 	and.w	r0, r0, #3
 80146a4:	2801      	cmp	r0, #1
 80146a6:	d009      	beq.n	80146bc <cos+0x54>
 80146a8:	2802      	cmp	r0, #2
 80146aa:	d010      	beq.n	80146ce <cos+0x66>
 80146ac:	b9b0      	cbnz	r0, 80146dc <cos+0x74>
 80146ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146b2:	ed9d 0b00 	vldr	d0, [sp]
 80146b6:	f000 fb1b 	bl	8014cf0 <__kernel_cos>
 80146ba:	e7eb      	b.n	8014694 <cos+0x2c>
 80146bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146c0:	ed9d 0b00 	vldr	d0, [sp]
 80146c4:	f000 fe18 	bl	80152f8 <__kernel_sin>
 80146c8:	eeb1 0b40 	vneg.f64	d0, d0
 80146cc:	e7e2      	b.n	8014694 <cos+0x2c>
 80146ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146d2:	ed9d 0b00 	vldr	d0, [sp]
 80146d6:	f000 fb0b 	bl	8014cf0 <__kernel_cos>
 80146da:	e7f5      	b.n	80146c8 <cos+0x60>
 80146dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146e0:	ed9d 0b00 	vldr	d0, [sp]
 80146e4:	2001      	movs	r0, #1
 80146e6:	f000 fe07 	bl	80152f8 <__kernel_sin>
 80146ea:	e7d3      	b.n	8014694 <cos+0x2c>
 80146ec:	f3af 8000 	nop.w
	...
 80146f8:	3fe921fb 	.word	0x3fe921fb
 80146fc:	7fefffff 	.word	0x7fefffff

08014700 <sin>:
 8014700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014702:	eeb0 7b40 	vmov.f64	d7, d0
 8014706:	ee17 3a90 	vmov	r3, s15
 801470a:	4a21      	ldr	r2, [pc, #132]	; (8014790 <sin+0x90>)
 801470c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014710:	4293      	cmp	r3, r2
 8014712:	dc07      	bgt.n	8014724 <sin+0x24>
 8014714:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8014788 <sin+0x88>
 8014718:	2000      	movs	r0, #0
 801471a:	b005      	add	sp, #20
 801471c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014720:	f000 bdea 	b.w	80152f8 <__kernel_sin>
 8014724:	4a1b      	ldr	r2, [pc, #108]	; (8014794 <sin+0x94>)
 8014726:	4293      	cmp	r3, r2
 8014728:	dd04      	ble.n	8014734 <sin+0x34>
 801472a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801472e:	b005      	add	sp, #20
 8014730:	f85d fb04 	ldr.w	pc, [sp], #4
 8014734:	4668      	mov	r0, sp
 8014736:	f000 f997 	bl	8014a68 <__ieee754_rem_pio2>
 801473a:	f000 0003 	and.w	r0, r0, #3
 801473e:	2801      	cmp	r0, #1
 8014740:	d00a      	beq.n	8014758 <sin+0x58>
 8014742:	2802      	cmp	r0, #2
 8014744:	d00f      	beq.n	8014766 <sin+0x66>
 8014746:	b9c0      	cbnz	r0, 801477a <sin+0x7a>
 8014748:	ed9d 1b02 	vldr	d1, [sp, #8]
 801474c:	ed9d 0b00 	vldr	d0, [sp]
 8014750:	2001      	movs	r0, #1
 8014752:	f000 fdd1 	bl	80152f8 <__kernel_sin>
 8014756:	e7ea      	b.n	801472e <sin+0x2e>
 8014758:	ed9d 1b02 	vldr	d1, [sp, #8]
 801475c:	ed9d 0b00 	vldr	d0, [sp]
 8014760:	f000 fac6 	bl	8014cf0 <__kernel_cos>
 8014764:	e7e3      	b.n	801472e <sin+0x2e>
 8014766:	ed9d 1b02 	vldr	d1, [sp, #8]
 801476a:	ed9d 0b00 	vldr	d0, [sp]
 801476e:	2001      	movs	r0, #1
 8014770:	f000 fdc2 	bl	80152f8 <__kernel_sin>
 8014774:	eeb1 0b40 	vneg.f64	d0, d0
 8014778:	e7d9      	b.n	801472e <sin+0x2e>
 801477a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801477e:	ed9d 0b00 	vldr	d0, [sp]
 8014782:	f000 fab5 	bl	8014cf0 <__kernel_cos>
 8014786:	e7f5      	b.n	8014774 <sin+0x74>
	...
 8014790:	3fe921fb 	.word	0x3fe921fb
 8014794:	7fefffff 	.word	0x7fefffff

08014798 <sinf_poly>:
 8014798:	07cb      	lsls	r3, r1, #31
 801479a:	d412      	bmi.n	80147c2 <sinf_poly+0x2a>
 801479c:	ee21 5b00 	vmul.f64	d5, d1, d0
 80147a0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80147a4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80147a8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80147ac:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80147b0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80147b4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80147b8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80147bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80147c0:	4770      	bx	lr
 80147c2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80147c6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80147ca:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80147ce:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80147d2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80147d6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80147da:	eea1 0b06 	vfma.f64	d0, d1, d6
 80147de:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80147e2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80147e6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80147ea:	e7e5      	b.n	80147b8 <sinf_poly+0x20>
 80147ec:	0000      	movs	r0, r0
	...

080147f0 <sinf>:
 80147f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147f2:	ee10 4a10 	vmov	r4, s0
 80147f6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80147fa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80147fe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014802:	eef0 7a40 	vmov.f32	s15, s0
 8014806:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801480a:	d218      	bcs.n	801483e <sinf+0x4e>
 801480c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014810:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8014814:	d20a      	bcs.n	801482c <sinf+0x3c>
 8014816:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801481a:	d103      	bne.n	8014824 <sinf+0x34>
 801481c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8014820:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014824:	eeb0 0a67 	vmov.f32	s0, s15
 8014828:	b003      	add	sp, #12
 801482a:	bd30      	pop	{r4, r5, pc}
 801482c:	483a      	ldr	r0, [pc, #232]	; (8014918 <sinf+0x128>)
 801482e:	eeb0 0b46 	vmov.f64	d0, d6
 8014832:	2100      	movs	r1, #0
 8014834:	b003      	add	sp, #12
 8014836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801483a:	f7ff bfad 	b.w	8014798 <sinf_poly>
 801483e:	f240 422e 	movw	r2, #1070	; 0x42e
 8014842:	4293      	cmp	r3, r2
 8014844:	d824      	bhi.n	8014890 <sinf+0xa0>
 8014846:	4b34      	ldr	r3, [pc, #208]	; (8014918 <sinf+0x128>)
 8014848:	ed93 7b08 	vldr	d7, [r3, #32]
 801484c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014850:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014854:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014858:	ee17 1a90 	vmov	r1, s15
 801485c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8014860:	1609      	asrs	r1, r1, #24
 8014862:	ee07 1a90 	vmov	s15, r1
 8014866:	f001 0203 	and.w	r2, r1, #3
 801486a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801486e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014872:	ed92 0b00 	vldr	d0, [r2]
 8014876:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801487a:	f011 0f02 	tst.w	r1, #2
 801487e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014882:	bf08      	it	eq
 8014884:	4618      	moveq	r0, r3
 8014886:	ee26 1b06 	vmul.f64	d1, d6, d6
 801488a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801488e:	e7d1      	b.n	8014834 <sinf+0x44>
 8014890:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014894:	d237      	bcs.n	8014906 <sinf+0x116>
 8014896:	4a21      	ldr	r2, [pc, #132]	; (801491c <sinf+0x12c>)
 8014898:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801489c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80148a0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80148a4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80148a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80148ac:	4083      	lsls	r3, r0
 80148ae:	6a28      	ldr	r0, [r5, #32]
 80148b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80148b4:	fba3 1000 	umull	r1, r0, r3, r0
 80148b8:	6929      	ldr	r1, [r5, #16]
 80148ba:	435a      	muls	r2, r3
 80148bc:	fbe3 0201 	umlal	r0, r2, r3, r1
 80148c0:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 80148c4:	0f8d      	lsrs	r5, r1, #30
 80148c6:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80148ca:	1a51      	subs	r1, r2, r1
 80148cc:	f7eb ff4e 	bl	800076c <__aeabi_l2d>
 80148d0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80148d4:	4b10      	ldr	r3, [pc, #64]	; (8014918 <sinf+0x128>)
 80148d6:	f004 0203 	and.w	r2, r4, #3
 80148da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80148de:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014910 <sinf+0x120>
 80148e2:	ed92 0b00 	vldr	d0, [r2]
 80148e6:	ec41 0b16 	vmov	d6, r0, r1
 80148ea:	f014 0f02 	tst.w	r4, #2
 80148ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80148f2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80148f6:	4629      	mov	r1, r5
 80148f8:	bf08      	it	eq
 80148fa:	4618      	moveq	r0, r3
 80148fc:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014900:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014904:	e796      	b.n	8014834 <sinf+0x44>
 8014906:	b003      	add	sp, #12
 8014908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801490c:	f000 be4f 	b.w	80155ae <__math_invalidf>
 8014910:	54442d18 	.word	0x54442d18
 8014914:	3c1921fb 	.word	0x3c1921fb
 8014918:	0801a4a0 	.word	0x0801a4a0
 801491c:	0801a440 	.word	0x0801a440

08014920 <log10>:
 8014920:	b508      	push	{r3, lr}
 8014922:	ed2d 8b02 	vpush	{d8}
 8014926:	eeb0 8b40 	vmov.f64	d8, d0
 801492a:	f000 f82d 	bl	8014988 <__ieee754_log10>
 801492e:	eeb4 8b48 	vcmp.f64	d8, d8
 8014932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014936:	d60f      	bvs.n	8014958 <log10+0x38>
 8014938:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014940:	d80a      	bhi.n	8014958 <log10+0x38>
 8014942:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494a:	d108      	bne.n	801495e <log10+0x3e>
 801494c:	f7fc fd8a 	bl	8011464 <__errno>
 8014950:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014978 <log10+0x58>
 8014954:	2322      	movs	r3, #34	; 0x22
 8014956:	6003      	str	r3, [r0, #0]
 8014958:	ecbd 8b02 	vpop	{d8}
 801495c:	bd08      	pop	{r3, pc}
 801495e:	f7fc fd81 	bl	8011464 <__errno>
 8014962:	ecbd 8b02 	vpop	{d8}
 8014966:	2321      	movs	r3, #33	; 0x21
 8014968:	6003      	str	r3, [r0, #0]
 801496a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801496e:	4804      	ldr	r0, [pc, #16]	; (8014980 <log10+0x60>)
 8014970:	f000 beaa 	b.w	80156c8 <nan>
 8014974:	f3af 8000 	nop.w
 8014978:	00000000 	.word	0x00000000
 801497c:	fff00000 	.word	0xfff00000
 8014980:	08018d07 	.word	0x08018d07
 8014984:	00000000 	.word	0x00000000

08014988 <__ieee754_log10>:
 8014988:	b510      	push	{r4, lr}
 801498a:	ee10 3a90 	vmov	r3, s1
 801498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014992:	ed2d 8b02 	vpush	{d8}
 8014996:	da21      	bge.n	80149dc <__ieee754_log10+0x54>
 8014998:	ee10 1a10 	vmov	r1, s0
 801499c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80149a0:	430a      	orrs	r2, r1
 80149a2:	d108      	bne.n	80149b6 <__ieee754_log10+0x2e>
 80149a4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8014a30 <__ieee754_log10+0xa8>
 80149a8:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8014a38 <__ieee754_log10+0xb0>
 80149ac:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80149b0:	ecbd 8b02 	vpop	{d8}
 80149b4:	bd10      	pop	{r4, pc}
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	da02      	bge.n	80149c0 <__ieee754_log10+0x38>
 80149ba:	ee30 6b40 	vsub.f64	d6, d0, d0
 80149be:	e7f3      	b.n	80149a8 <__ieee754_log10+0x20>
 80149c0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014a40 <__ieee754_log10+0xb8>
 80149c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80149c8:	ee10 3a90 	vmov	r3, s1
 80149cc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80149d0:	4923      	ldr	r1, [pc, #140]	; (8014a60 <__ieee754_log10+0xd8>)
 80149d2:	428b      	cmp	r3, r1
 80149d4:	dd04      	ble.n	80149e0 <__ieee754_log10+0x58>
 80149d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80149da:	e7e9      	b.n	80149b0 <__ieee754_log10+0x28>
 80149dc:	2200      	movs	r2, #0
 80149de:	e7f7      	b.n	80149d0 <__ieee754_log10+0x48>
 80149e0:	1518      	asrs	r0, r3, #20
 80149e2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80149e6:	4410      	add	r0, r2
 80149e8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80149ec:	f240 34ff 	movw	r4, #1023	; 0x3ff
 80149f0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80149f4:	ee08 3a10 	vmov	s16, r3
 80149f8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 80149fc:	ec53 2b10 	vmov	r2, r3, d0
 8014a00:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8014a04:	ec43 2b10 	vmov	d0, r2, r3
 8014a08:	f000 fcce 	bl	80153a8 <log>
 8014a0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014a48 <__ieee754_log10+0xc0>
 8014a10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014a50 <__ieee754_log10+0xc8>
 8014a18:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8014a1c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8014a20:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014a58 <__ieee754_log10+0xd0>
 8014a24:	eea8 0b07 	vfma.f64	d0, d8, d7
 8014a28:	e7c2      	b.n	80149b0 <__ieee754_log10+0x28>
 8014a2a:	bf00      	nop
 8014a2c:	f3af 8000 	nop.w
 8014a30:	00000000 	.word	0x00000000
 8014a34:	c3500000 	.word	0xc3500000
	...
 8014a44:	43500000 	.word	0x43500000
 8014a48:	1526e50e 	.word	0x1526e50e
 8014a4c:	3fdbcb7b 	.word	0x3fdbcb7b
 8014a50:	11f12b36 	.word	0x11f12b36
 8014a54:	3d59fef3 	.word	0x3d59fef3
 8014a58:	509f6000 	.word	0x509f6000
 8014a5c:	3fd34413 	.word	0x3fd34413
 8014a60:	7fefffff 	.word	0x7fefffff
 8014a64:	00000000 	.word	0x00000000

08014a68 <__ieee754_rem_pio2>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8014a6e:	ee17 5a90 	vmov	r5, s15
 8014a72:	4b99      	ldr	r3, [pc, #612]	; (8014cd8 <__ieee754_rem_pio2+0x270>)
 8014a74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014a78:	429e      	cmp	r6, r3
 8014a7a:	b088      	sub	sp, #32
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	dc07      	bgt.n	8014a90 <__ieee754_rem_pio2+0x28>
 8014a80:	2200      	movs	r2, #0
 8014a82:	2300      	movs	r3, #0
 8014a84:	ed84 0b00 	vstr	d0, [r4]
 8014a88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014a8c:	2000      	movs	r0, #0
 8014a8e:	e01b      	b.n	8014ac8 <__ieee754_rem_pio2+0x60>
 8014a90:	4b92      	ldr	r3, [pc, #584]	; (8014cdc <__ieee754_rem_pio2+0x274>)
 8014a92:	429e      	cmp	r6, r3
 8014a94:	dc3b      	bgt.n	8014b0e <__ieee754_rem_pio2+0xa6>
 8014a96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8014a9a:	2d00      	cmp	r5, #0
 8014a9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8014c98 <__ieee754_rem_pio2+0x230>
 8014aa0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8014aa4:	dd19      	ble.n	8014ada <__ieee754_rem_pio2+0x72>
 8014aa6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014aaa:	429e      	cmp	r6, r3
 8014aac:	d00e      	beq.n	8014acc <__ieee754_rem_pio2+0x64>
 8014aae:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014ca0 <__ieee754_rem_pio2+0x238>
 8014ab2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8014ab6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014aba:	ed84 5b00 	vstr	d5, [r4]
 8014abe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014ac2:	ed84 7b02 	vstr	d7, [r4, #8]
 8014ac6:	2001      	movs	r0, #1
 8014ac8:	b008      	add	sp, #32
 8014aca:	bd70      	pop	{r4, r5, r6, pc}
 8014acc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014ca8 <__ieee754_rem_pio2+0x240>
 8014ad0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014ad4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014cb0 <__ieee754_rem_pio2+0x248>
 8014ad8:	e7eb      	b.n	8014ab2 <__ieee754_rem_pio2+0x4a>
 8014ada:	429e      	cmp	r6, r3
 8014adc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014ae0:	d00e      	beq.n	8014b00 <__ieee754_rem_pio2+0x98>
 8014ae2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8014ca0 <__ieee754_rem_pio2+0x238>
 8014ae6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014aea:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014aee:	ed84 5b00 	vstr	d5, [r4]
 8014af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014af6:	f04f 30ff 	mov.w	r0, #4294967295
 8014afa:	ed84 7b02 	vstr	d7, [r4, #8]
 8014afe:	e7e3      	b.n	8014ac8 <__ieee754_rem_pio2+0x60>
 8014b00:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014ca8 <__ieee754_rem_pio2+0x240>
 8014b04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014b08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014cb0 <__ieee754_rem_pio2+0x248>
 8014b0c:	e7eb      	b.n	8014ae6 <__ieee754_rem_pio2+0x7e>
 8014b0e:	4b74      	ldr	r3, [pc, #464]	; (8014ce0 <__ieee754_rem_pio2+0x278>)
 8014b10:	429e      	cmp	r6, r3
 8014b12:	dc70      	bgt.n	8014bf6 <__ieee754_rem_pio2+0x18e>
 8014b14:	f000 fd5a 	bl	80155cc <fabs>
 8014b18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014b1c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014cb8 <__ieee754_rem_pio2+0x250>
 8014b20:	eea0 7b06 	vfma.f64	d7, d0, d6
 8014b24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014b2c:	ee17 0a90 	vmov	r0, s15
 8014b30:	eeb1 4b45 	vneg.f64	d4, d5
 8014b34:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014c98 <__ieee754_rem_pio2+0x230>
 8014b38:	eea5 0b47 	vfms.f64	d0, d5, d7
 8014b3c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014ca0 <__ieee754_rem_pio2+0x238>
 8014b40:	281f      	cmp	r0, #31
 8014b42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014b46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014b4a:	dc08      	bgt.n	8014b5e <__ieee754_rem_pio2+0xf6>
 8014b4c:	4b65      	ldr	r3, [pc, #404]	; (8014ce4 <__ieee754_rem_pio2+0x27c>)
 8014b4e:	1e42      	subs	r2, r0, #1
 8014b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b54:	42b3      	cmp	r3, r6
 8014b56:	d002      	beq.n	8014b5e <__ieee754_rem_pio2+0xf6>
 8014b58:	ed84 6b00 	vstr	d6, [r4]
 8014b5c:	e026      	b.n	8014bac <__ieee754_rem_pio2+0x144>
 8014b5e:	ee16 3a90 	vmov	r3, s13
 8014b62:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014b66:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014b6a:	2b10      	cmp	r3, #16
 8014b6c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014b70:	ddf2      	ble.n	8014b58 <__ieee754_rem_pio2+0xf0>
 8014b72:	eeb0 6b40 	vmov.f64	d6, d0
 8014b76:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014ca8 <__ieee754_rem_pio2+0x240>
 8014b7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014cb0 <__ieee754_rem_pio2+0x248>
 8014b7e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8014b82:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014b86:	eea4 0b07 	vfma.f64	d0, d4, d7
 8014b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8014b8e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014b92:	ee36 3b47 	vsub.f64	d3, d6, d7
 8014b96:	ee13 3a90 	vmov	r3, s7
 8014b9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	2b31      	cmp	r3, #49	; 0x31
 8014ba2:	dc17      	bgt.n	8014bd4 <__ieee754_rem_pio2+0x16c>
 8014ba4:	eeb0 0b46 	vmov.f64	d0, d6
 8014ba8:	ed84 3b00 	vstr	d3, [r4]
 8014bac:	ed94 6b00 	vldr	d6, [r4]
 8014bb0:	2d00      	cmp	r5, #0
 8014bb2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014bb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014bba:	ed84 0b02 	vstr	d0, [r4, #8]
 8014bbe:	da83      	bge.n	8014ac8 <__ieee754_rem_pio2+0x60>
 8014bc0:	eeb1 6b46 	vneg.f64	d6, d6
 8014bc4:	eeb1 0b40 	vneg.f64	d0, d0
 8014bc8:	ed84 6b00 	vstr	d6, [r4]
 8014bcc:	ed84 0b02 	vstr	d0, [r4, #8]
 8014bd0:	4240      	negs	r0, r0
 8014bd2:	e779      	b.n	8014ac8 <__ieee754_rem_pio2+0x60>
 8014bd4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8014cc0 <__ieee754_rem_pio2+0x258>
 8014bd8:	eeb0 0b46 	vmov.f64	d0, d6
 8014bdc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8014be0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8014be4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8014cc8 <__ieee754_rem_pio2+0x260>
 8014be8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014bec:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014bf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014bf4:	e7b0      	b.n	8014b58 <__ieee754_rem_pio2+0xf0>
 8014bf6:	4b3c      	ldr	r3, [pc, #240]	; (8014ce8 <__ieee754_rem_pio2+0x280>)
 8014bf8:	429e      	cmp	r6, r3
 8014bfa:	dd06      	ble.n	8014c0a <__ieee754_rem_pio2+0x1a2>
 8014bfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014c00:	ed80 7b02 	vstr	d7, [r0, #8]
 8014c04:	ed80 7b00 	vstr	d7, [r0]
 8014c08:	e740      	b.n	8014a8c <__ieee754_rem_pio2+0x24>
 8014c0a:	1532      	asrs	r2, r6, #20
 8014c0c:	ee10 0a10 	vmov	r0, s0
 8014c10:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8014c14:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8014c18:	ec41 0b17 	vmov	d7, r0, r1
 8014c1c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014c20:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8014cd0 <__ieee754_rem_pio2+0x268>
 8014c24:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014c2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014c30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014c34:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014c38:	a902      	add	r1, sp, #8
 8014c3a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014c3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014c42:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014c46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014c4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c4e:	2603      	movs	r6, #3
 8014c50:	4608      	mov	r0, r1
 8014c52:	ed91 7b04 	vldr	d7, [r1, #16]
 8014c56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	4633      	mov	r3, r6
 8014c60:	f1a1 0108 	sub.w	r1, r1, #8
 8014c64:	f106 36ff 	add.w	r6, r6, #4294967295
 8014c68:	d0f3      	beq.n	8014c52 <__ieee754_rem_pio2+0x1ea>
 8014c6a:	4920      	ldr	r1, [pc, #128]	; (8014cec <__ieee754_rem_pio2+0x284>)
 8014c6c:	9101      	str	r1, [sp, #4]
 8014c6e:	2102      	movs	r1, #2
 8014c70:	9100      	str	r1, [sp, #0]
 8014c72:	4621      	mov	r1, r4
 8014c74:	f000 f8a8 	bl	8014dc8 <__kernel_rem_pio2>
 8014c78:	2d00      	cmp	r5, #0
 8014c7a:	f6bf af25 	bge.w	8014ac8 <__ieee754_rem_pio2+0x60>
 8014c7e:	ed94 7b00 	vldr	d7, [r4]
 8014c82:	eeb1 7b47 	vneg.f64	d7, d7
 8014c86:	ed84 7b00 	vstr	d7, [r4]
 8014c8a:	ed94 7b02 	vldr	d7, [r4, #8]
 8014c8e:	eeb1 7b47 	vneg.f64	d7, d7
 8014c92:	ed84 7b02 	vstr	d7, [r4, #8]
 8014c96:	e79b      	b.n	8014bd0 <__ieee754_rem_pio2+0x168>
 8014c98:	54400000 	.word	0x54400000
 8014c9c:	3ff921fb 	.word	0x3ff921fb
 8014ca0:	1a626331 	.word	0x1a626331
 8014ca4:	3dd0b461 	.word	0x3dd0b461
 8014ca8:	1a600000 	.word	0x1a600000
 8014cac:	3dd0b461 	.word	0x3dd0b461
 8014cb0:	2e037073 	.word	0x2e037073
 8014cb4:	3ba3198a 	.word	0x3ba3198a
 8014cb8:	6dc9c883 	.word	0x6dc9c883
 8014cbc:	3fe45f30 	.word	0x3fe45f30
 8014cc0:	2e000000 	.word	0x2e000000
 8014cc4:	3ba3198a 	.word	0x3ba3198a
 8014cc8:	252049c1 	.word	0x252049c1
 8014ccc:	397b839a 	.word	0x397b839a
 8014cd0:	00000000 	.word	0x00000000
 8014cd4:	41700000 	.word	0x41700000
 8014cd8:	3fe921fb 	.word	0x3fe921fb
 8014cdc:	4002d97b 	.word	0x4002d97b
 8014ce0:	413921fb 	.word	0x413921fb
 8014ce4:	080199d8 	.word	0x080199d8
 8014ce8:	7fefffff 	.word	0x7fefffff
 8014cec:	08019a58 	.word	0x08019a58

08014cf0 <__kernel_cos>:
 8014cf0:	ee10 1a90 	vmov	r1, s1
 8014cf4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014cfc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8014d00:	da05      	bge.n	8014d0e <__kernel_cos+0x1e>
 8014d02:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014d06:	ee17 3a90 	vmov	r3, s15
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d03d      	beq.n	8014d8a <__kernel_cos+0x9a>
 8014d0e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8014d12:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014d90 <__kernel_cos+0xa0>
 8014d16:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014d98 <__kernel_cos+0xa8>
 8014d1a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8014d1e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014da0 <__kernel_cos+0xb0>
 8014d22:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014d26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014da8 <__kernel_cos+0xb8>
 8014d2a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014d2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014db0 <__kernel_cos+0xc0>
 8014d32:	4b23      	ldr	r3, [pc, #140]	; (8014dc0 <__kernel_cos+0xd0>)
 8014d34:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014d38:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014db8 <__kernel_cos+0xc8>
 8014d3c:	4299      	cmp	r1, r3
 8014d3e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014d42:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014d46:	ee26 5b03 	vmul.f64	d5, d6, d3
 8014d4a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8014d4e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8014d52:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014d56:	dc04      	bgt.n	8014d62 <__kernel_cos+0x72>
 8014d58:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014d5c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014d60:	4770      	bx	lr
 8014d62:	4b18      	ldr	r3, [pc, #96]	; (8014dc4 <__kernel_cos+0xd4>)
 8014d64:	4299      	cmp	r1, r3
 8014d66:	dc0d      	bgt.n	8014d84 <__kernel_cos+0x94>
 8014d68:	2200      	movs	r2, #0
 8014d6a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8014d6e:	ec43 2b15 	vmov	d5, r2, r3
 8014d72:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014d76:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014d7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d7e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014d82:	4770      	bx	lr
 8014d84:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014d88:	e7f3      	b.n	8014d72 <__kernel_cos+0x82>
 8014d8a:	eeb0 0b44 	vmov.f64	d0, d4
 8014d8e:	4770      	bx	lr
 8014d90:	be8838d4 	.word	0xbe8838d4
 8014d94:	bda8fae9 	.word	0xbda8fae9
 8014d98:	bdb4b1c4 	.word	0xbdb4b1c4
 8014d9c:	3e21ee9e 	.word	0x3e21ee9e
 8014da0:	809c52ad 	.word	0x809c52ad
 8014da4:	be927e4f 	.word	0xbe927e4f
 8014da8:	19cb1590 	.word	0x19cb1590
 8014dac:	3efa01a0 	.word	0x3efa01a0
 8014db0:	16c15177 	.word	0x16c15177
 8014db4:	bf56c16c 	.word	0xbf56c16c
 8014db8:	5555554c 	.word	0x5555554c
 8014dbc:	3fa55555 	.word	0x3fa55555
 8014dc0:	3fd33332 	.word	0x3fd33332
 8014dc4:	3fe90000 	.word	0x3fe90000

08014dc8 <__kernel_rem_pio2>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ed2d 8b06 	vpush	{d8-d10}
 8014dd0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8014dd4:	460f      	mov	r7, r1
 8014dd6:	9002      	str	r0, [sp, #8]
 8014dd8:	49c5      	ldr	r1, [pc, #788]	; (80150f0 <__kernel_rem_pio2+0x328>)
 8014dda:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8014ddc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8014de0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8014de4:	9301      	str	r3, [sp, #4]
 8014de6:	f112 0f14 	cmn.w	r2, #20
 8014dea:	bfa8      	it	ge
 8014dec:	2018      	movge	r0, #24
 8014dee:	f103 31ff 	add.w	r1, r3, #4294967295
 8014df2:	bfb8      	it	lt
 8014df4:	2000      	movlt	r0, #0
 8014df6:	f06f 0417 	mvn.w	r4, #23
 8014dfa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80150d8 <__kernel_rem_pio2+0x310>
 8014dfe:	bfa4      	itt	ge
 8014e00:	f1a2 0a03 	subge.w	sl, r2, #3
 8014e04:	fb9a f0f0 	sdivge	r0, sl, r0
 8014e08:	fb00 4404 	mla	r4, r0, r4, r4
 8014e0c:	1a46      	subs	r6, r0, r1
 8014e0e:	4414      	add	r4, r2
 8014e10:	eb09 0c01 	add.w	ip, r9, r1
 8014e14:	ad1a      	add	r5, sp, #104	; 0x68
 8014e16:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	4562      	cmp	r2, ip
 8014e1e:	dd10      	ble.n	8014e42 <__kernel_rem_pio2+0x7a>
 8014e20:	9a01      	ldr	r2, [sp, #4]
 8014e22:	ab1a      	add	r3, sp, #104	; 0x68
 8014e24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014e28:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8014e2c:	f04f 0c00 	mov.w	ip, #0
 8014e30:	45cc      	cmp	ip, r9
 8014e32:	dc26      	bgt.n	8014e82 <__kernel_rem_pio2+0xba>
 8014e34:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80150d8 <__kernel_rem_pio2+0x310>
 8014e38:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014e3c:	4616      	mov	r6, r2
 8014e3e:	2500      	movs	r5, #0
 8014e40:	e015      	b.n	8014e6e <__kernel_rem_pio2+0xa6>
 8014e42:	42d6      	cmn	r6, r2
 8014e44:	d409      	bmi.n	8014e5a <__kernel_rem_pio2+0x92>
 8014e46:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8014e4a:	ee07 3a90 	vmov	s15, r3
 8014e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014e52:	eca5 7b02 	vstmia	r5!, {d7}
 8014e56:	3201      	adds	r2, #1
 8014e58:	e7e0      	b.n	8014e1c <__kernel_rem_pio2+0x54>
 8014e5a:	eeb0 7b46 	vmov.f64	d7, d6
 8014e5e:	e7f8      	b.n	8014e52 <__kernel_rem_pio2+0x8a>
 8014e60:	ecb8 5b02 	vldmia	r8!, {d5}
 8014e64:	ed96 6b00 	vldr	d6, [r6]
 8014e68:	3501      	adds	r5, #1
 8014e6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014e6e:	428d      	cmp	r5, r1
 8014e70:	f1a6 0608 	sub.w	r6, r6, #8
 8014e74:	ddf4      	ble.n	8014e60 <__kernel_rem_pio2+0x98>
 8014e76:	ecaa 7b02 	vstmia	sl!, {d7}
 8014e7a:	f10c 0c01 	add.w	ip, ip, #1
 8014e7e:	3208      	adds	r2, #8
 8014e80:	e7d6      	b.n	8014e30 <__kernel_rem_pio2+0x68>
 8014e82:	ab06      	add	r3, sp, #24
 8014e84:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80150e0 <__kernel_rem_pio2+0x318>
 8014e88:	ed9f ab97 	vldr	d10, [pc, #604]	; 80150e8 <__kernel_rem_pio2+0x320>
 8014e8c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014e90:	9303      	str	r3, [sp, #12]
 8014e92:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8014e96:	464d      	mov	r5, r9
 8014e98:	00eb      	lsls	r3, r5, #3
 8014e9a:	9304      	str	r3, [sp, #16]
 8014e9c:	ab92      	add	r3, sp, #584	; 0x248
 8014e9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014ea2:	f10d 0b18 	add.w	fp, sp, #24
 8014ea6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8014ea8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8014eac:	465e      	mov	r6, fp
 8014eae:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	f1a2 0208 	sub.w	r2, r2, #8
 8014eba:	dc4c      	bgt.n	8014f56 <__kernel_rem_pio2+0x18e>
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	9105      	str	r1, [sp, #20]
 8014ec0:	f000 fc0a 	bl	80156d8 <scalbn>
 8014ec4:	eeb0 8b40 	vmov.f64	d8, d0
 8014ec8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8014ecc:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014ed0:	f000 fb86 	bl	80155e0 <floor>
 8014ed4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014ed8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014edc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8014ee6:	ee17 8a90 	vmov	r8, s15
 8014eea:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014eee:	9905      	ldr	r1, [sp, #20]
 8014ef0:	dd43      	ble.n	8014f7a <__kernel_rem_pio2+0x1b2>
 8014ef2:	1e68      	subs	r0, r5, #1
 8014ef4:	ab06      	add	r3, sp, #24
 8014ef6:	f1c4 0c18 	rsb	ip, r4, #24
 8014efa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014efe:	fa46 f20c 	asr.w	r2, r6, ip
 8014f02:	4490      	add	r8, r2
 8014f04:	fa02 f20c 	lsl.w	r2, r2, ip
 8014f08:	1ab6      	subs	r6, r6, r2
 8014f0a:	f1c4 0217 	rsb	r2, r4, #23
 8014f0e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8014f12:	4116      	asrs	r6, r2
 8014f14:	2e00      	cmp	r6, #0
 8014f16:	dd3f      	ble.n	8014f98 <__kernel_rem_pio2+0x1d0>
 8014f18:	f04f 0c00 	mov.w	ip, #0
 8014f1c:	f108 0801 	add.w	r8, r8, #1
 8014f20:	4660      	mov	r0, ip
 8014f22:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014f26:	4565      	cmp	r5, ip
 8014f28:	dc6e      	bgt.n	8015008 <__kernel_rem_pio2+0x240>
 8014f2a:	2c00      	cmp	r4, #0
 8014f2c:	dd04      	ble.n	8014f38 <__kernel_rem_pio2+0x170>
 8014f2e:	2c01      	cmp	r4, #1
 8014f30:	d07f      	beq.n	8015032 <__kernel_rem_pio2+0x26a>
 8014f32:	2c02      	cmp	r4, #2
 8014f34:	f000 8087 	beq.w	8015046 <__kernel_rem_pio2+0x27e>
 8014f38:	2e02      	cmp	r6, #2
 8014f3a:	d12d      	bne.n	8014f98 <__kernel_rem_pio2+0x1d0>
 8014f3c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014f40:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014f44:	b340      	cbz	r0, 8014f98 <__kernel_rem_pio2+0x1d0>
 8014f46:	4620      	mov	r0, r4
 8014f48:	9105      	str	r1, [sp, #20]
 8014f4a:	f000 fbc5 	bl	80156d8 <scalbn>
 8014f4e:	9905      	ldr	r1, [sp, #20]
 8014f50:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014f54:	e020      	b.n	8014f98 <__kernel_rem_pio2+0x1d0>
 8014f56:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014f5a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014f5e:	3801      	subs	r0, #1
 8014f60:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014f64:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014f68:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014f6c:	eca6 0a01 	vstmia	r6!, {s0}
 8014f70:	ed92 0b00 	vldr	d0, [r2]
 8014f74:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014f78:	e79c      	b.n	8014eb4 <__kernel_rem_pio2+0xec>
 8014f7a:	d105      	bne.n	8014f88 <__kernel_rem_pio2+0x1c0>
 8014f7c:	1e6a      	subs	r2, r5, #1
 8014f7e:	ab06      	add	r3, sp, #24
 8014f80:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014f84:	15f6      	asrs	r6, r6, #23
 8014f86:	e7c5      	b.n	8014f14 <__kernel_rem_pio2+0x14c>
 8014f88:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014f8c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	da36      	bge.n	8015004 <__kernel_rem_pio2+0x23c>
 8014f96:	2600      	movs	r6, #0
 8014f98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa0:	f040 80aa 	bne.w	80150f8 <__kernel_rem_pio2+0x330>
 8014fa4:	f105 3bff 	add.w	fp, r5, #4294967295
 8014fa8:	4658      	mov	r0, fp
 8014faa:	2200      	movs	r2, #0
 8014fac:	4548      	cmp	r0, r9
 8014fae:	da52      	bge.n	8015056 <__kernel_rem_pio2+0x28e>
 8014fb0:	2a00      	cmp	r2, #0
 8014fb2:	f000 8081 	beq.w	80150b8 <__kernel_rem_pio2+0x2f0>
 8014fb6:	ab06      	add	r3, sp, #24
 8014fb8:	3c18      	subs	r4, #24
 8014fba:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	f000 8087 	beq.w	80150d2 <__kernel_rem_pio2+0x30a>
 8014fc4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f000 fb85 	bl	80156d8 <scalbn>
 8014fce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014fd2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80150e0 <__kernel_rem_pio2+0x318>
 8014fd6:	a96a      	add	r1, sp, #424	; 0x1a8
 8014fd8:	f103 0208 	add.w	r2, r3, #8
 8014fdc:	1888      	adds	r0, r1, r2
 8014fde:	4659      	mov	r1, fp
 8014fe0:	2900      	cmp	r1, #0
 8014fe2:	f280 80b7 	bge.w	8015154 <__kernel_rem_pio2+0x38c>
 8014fe6:	4659      	mov	r1, fp
 8014fe8:	2900      	cmp	r1, #0
 8014fea:	f2c0 80d5 	blt.w	8015198 <__kernel_rem_pio2+0x3d0>
 8014fee:	a86a      	add	r0, sp, #424	; 0x1a8
 8014ff0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8014ff4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80150d8 <__kernel_rem_pio2+0x310>
 8014ff8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80150f4 <__kernel_rem_pio2+0x32c>
 8014ffc:	2400      	movs	r4, #0
 8014ffe:	ebab 0001 	sub.w	r0, fp, r1
 8015002:	e0be      	b.n	8015182 <__kernel_rem_pio2+0x3ba>
 8015004:	2602      	movs	r6, #2
 8015006:	e787      	b.n	8014f18 <__kernel_rem_pio2+0x150>
 8015008:	f8db 2000 	ldr.w	r2, [fp]
 801500c:	b958      	cbnz	r0, 8015026 <__kernel_rem_pio2+0x25e>
 801500e:	b122      	cbz	r2, 801501a <__kernel_rem_pio2+0x252>
 8015010:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8015014:	f8cb 2000 	str.w	r2, [fp]
 8015018:	2201      	movs	r2, #1
 801501a:	f10c 0c01 	add.w	ip, ip, #1
 801501e:	f10b 0b04 	add.w	fp, fp, #4
 8015022:	4610      	mov	r0, r2
 8015024:	e77f      	b.n	8014f26 <__kernel_rem_pio2+0x15e>
 8015026:	ebae 0202 	sub.w	r2, lr, r2
 801502a:	f8cb 2000 	str.w	r2, [fp]
 801502e:	4602      	mov	r2, r0
 8015030:	e7f3      	b.n	801501a <__kernel_rem_pio2+0x252>
 8015032:	f105 3cff 	add.w	ip, r5, #4294967295
 8015036:	ab06      	add	r3, sp, #24
 8015038:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801503c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015040:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8015044:	e778      	b.n	8014f38 <__kernel_rem_pio2+0x170>
 8015046:	f105 3cff 	add.w	ip, r5, #4294967295
 801504a:	ab06      	add	r3, sp, #24
 801504c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015050:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8015054:	e7f4      	b.n	8015040 <__kernel_rem_pio2+0x278>
 8015056:	ab06      	add	r3, sp, #24
 8015058:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801505c:	3801      	subs	r0, #1
 801505e:	431a      	orrs	r2, r3
 8015060:	e7a4      	b.n	8014fac <__kernel_rem_pio2+0x1e4>
 8015062:	f10c 0c01 	add.w	ip, ip, #1
 8015066:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801506a:	2800      	cmp	r0, #0
 801506c:	d0f9      	beq.n	8015062 <__kernel_rem_pio2+0x29a>
 801506e:	9b04      	ldr	r3, [sp, #16]
 8015070:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8015074:	eb0d 0203 	add.w	r2, sp, r3
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	18e8      	adds	r0, r5, r3
 801507c:	ab1a      	add	r3, sp, #104	; 0x68
 801507e:	1c6e      	adds	r6, r5, #1
 8015080:	3a98      	subs	r2, #152	; 0x98
 8015082:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8015086:	4465      	add	r5, ip
 8015088:	42b5      	cmp	r5, r6
 801508a:	f6ff af05 	blt.w	8014e98 <__kernel_rem_pio2+0xd0>
 801508e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8015092:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015096:	ee07 3a90 	vmov	s15, r3
 801509a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801509e:	f04f 0c00 	mov.w	ip, #0
 80150a2:	eca0 7b02 	vstmia	r0!, {d7}
 80150a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80150d8 <__kernel_rem_pio2+0x310>
 80150aa:	4680      	mov	r8, r0
 80150ac:	458c      	cmp	ip, r1
 80150ae:	dd07      	ble.n	80150c0 <__kernel_rem_pio2+0x2f8>
 80150b0:	eca2 7b02 	vstmia	r2!, {d7}
 80150b4:	3601      	adds	r6, #1
 80150b6:	e7e7      	b.n	8015088 <__kernel_rem_pio2+0x2c0>
 80150b8:	9a03      	ldr	r2, [sp, #12]
 80150ba:	f04f 0c01 	mov.w	ip, #1
 80150be:	e7d2      	b.n	8015066 <__kernel_rem_pio2+0x29e>
 80150c0:	ecbe 5b02 	vldmia	lr!, {d5}
 80150c4:	ed38 6b02 	vldmdb	r8!, {d6}
 80150c8:	f10c 0c01 	add.w	ip, ip, #1
 80150cc:	eea5 7b06 	vfma.f64	d7, d5, d6
 80150d0:	e7ec      	b.n	80150ac <__kernel_rem_pio2+0x2e4>
 80150d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150d6:	e76e      	b.n	8014fb6 <__kernel_rem_pio2+0x1ee>
	...
 80150e4:	3e700000 	.word	0x3e700000
 80150e8:	00000000 	.word	0x00000000
 80150ec:	41700000 	.word	0x41700000
 80150f0:	08019ba0 	.word	0x08019ba0
 80150f4:	08019b60 	.word	0x08019b60
 80150f8:	4260      	negs	r0, r4
 80150fa:	eeb0 0b48 	vmov.f64	d0, d8
 80150fe:	f000 faeb 	bl	80156d8 <scalbn>
 8015102:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80152e0 <__kernel_rem_pio2+0x518>
 8015106:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801510e:	db18      	blt.n	8015142 <__kernel_rem_pio2+0x37a>
 8015110:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80152e8 <__kernel_rem_pio2+0x520>
 8015114:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015118:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801511c:	aa06      	add	r2, sp, #24
 801511e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8015122:	eea5 0b46 	vfms.f64	d0, d5, d6
 8015126:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801512a:	f105 0b01 	add.w	fp, r5, #1
 801512e:	ee10 3a10 	vmov	r3, s0
 8015132:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015136:	ee17 3a10 	vmov	r3, s14
 801513a:	3418      	adds	r4, #24
 801513c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8015140:	e740      	b.n	8014fc4 <__kernel_rem_pio2+0x1fc>
 8015142:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015146:	aa06      	add	r2, sp, #24
 8015148:	ee10 3a10 	vmov	r3, s0
 801514c:	46ab      	mov	fp, r5
 801514e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015152:	e737      	b.n	8014fc4 <__kernel_rem_pio2+0x1fc>
 8015154:	ac06      	add	r4, sp, #24
 8015156:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801515a:	9401      	str	r4, [sp, #4]
 801515c:	ee07 4a90 	vmov	s15, r4
 8015160:	3901      	subs	r1, #1
 8015162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015166:	ee27 7b00 	vmul.f64	d7, d7, d0
 801516a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801516e:	ed20 7b02 	vstmdb	r0!, {d7}
 8015172:	e735      	b.n	8014fe0 <__kernel_rem_pio2+0x218>
 8015174:	ecbc 5b02 	vldmia	ip!, {d5}
 8015178:	ecb5 6b02 	vldmia	r5!, {d6}
 801517c:	3401      	adds	r4, #1
 801517e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015182:	454c      	cmp	r4, r9
 8015184:	dc01      	bgt.n	801518a <__kernel_rem_pio2+0x3c2>
 8015186:	4284      	cmp	r4, r0
 8015188:	ddf4      	ble.n	8015174 <__kernel_rem_pio2+0x3ac>
 801518a:	ac42      	add	r4, sp, #264	; 0x108
 801518c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8015190:	ed80 7b00 	vstr	d7, [r0]
 8015194:	3901      	subs	r1, #1
 8015196:	e727      	b.n	8014fe8 <__kernel_rem_pio2+0x220>
 8015198:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801519a:	2902      	cmp	r1, #2
 801519c:	dc0a      	bgt.n	80151b4 <__kernel_rem_pio2+0x3ec>
 801519e:	2900      	cmp	r1, #0
 80151a0:	dc2c      	bgt.n	80151fc <__kernel_rem_pio2+0x434>
 80151a2:	d045      	beq.n	8015230 <__kernel_rem_pio2+0x468>
 80151a4:	f008 0007 	and.w	r0, r8, #7
 80151a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80151ac:	ecbd 8b06 	vpop	{d8-d10}
 80151b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80151b6:	2a03      	cmp	r2, #3
 80151b8:	d1f4      	bne.n	80151a4 <__kernel_rem_pio2+0x3dc>
 80151ba:	aa42      	add	r2, sp, #264	; 0x108
 80151bc:	4413      	add	r3, r2
 80151be:	461a      	mov	r2, r3
 80151c0:	4619      	mov	r1, r3
 80151c2:	4658      	mov	r0, fp
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f1a1 0108 	sub.w	r1, r1, #8
 80151ca:	dc54      	bgt.n	8015276 <__kernel_rem_pio2+0x4ae>
 80151cc:	4659      	mov	r1, fp
 80151ce:	2901      	cmp	r1, #1
 80151d0:	f1a2 0208 	sub.w	r2, r2, #8
 80151d4:	dc5f      	bgt.n	8015296 <__kernel_rem_pio2+0x4ce>
 80151d6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80152f0 <__kernel_rem_pio2+0x528>
 80151da:	3308      	adds	r3, #8
 80151dc:	f1bb 0f01 	cmp.w	fp, #1
 80151e0:	dc69      	bgt.n	80152b6 <__kernel_rem_pio2+0x4ee>
 80151e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80151e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80151ea:	2e00      	cmp	r6, #0
 80151ec:	d16a      	bne.n	80152c4 <__kernel_rem_pio2+0x4fc>
 80151ee:	ed87 5b00 	vstr	d5, [r7]
 80151f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80151f6:	ed87 7b04 	vstr	d7, [r7, #16]
 80151fa:	e7d3      	b.n	80151a4 <__kernel_rem_pio2+0x3dc>
 80151fc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80152f0 <__kernel_rem_pio2+0x528>
 8015200:	ab42      	add	r3, sp, #264	; 0x108
 8015202:	441a      	add	r2, r3
 8015204:	465b      	mov	r3, fp
 8015206:	2b00      	cmp	r3, #0
 8015208:	da26      	bge.n	8015258 <__kernel_rem_pio2+0x490>
 801520a:	b35e      	cbz	r6, 8015264 <__kernel_rem_pio2+0x49c>
 801520c:	eeb1 7b46 	vneg.f64	d7, d6
 8015210:	ed87 7b00 	vstr	d7, [r7]
 8015214:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8015218:	aa44      	add	r2, sp, #272	; 0x110
 801521a:	2301      	movs	r3, #1
 801521c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015220:	459b      	cmp	fp, r3
 8015222:	da22      	bge.n	801526a <__kernel_rem_pio2+0x4a2>
 8015224:	b10e      	cbz	r6, 801522a <__kernel_rem_pio2+0x462>
 8015226:	eeb1 7b47 	vneg.f64	d7, d7
 801522a:	ed87 7b02 	vstr	d7, [r7, #8]
 801522e:	e7b9      	b.n	80151a4 <__kernel_rem_pio2+0x3dc>
 8015230:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80152f0 <__kernel_rem_pio2+0x528>
 8015234:	ab42      	add	r3, sp, #264	; 0x108
 8015236:	441a      	add	r2, r3
 8015238:	f1bb 0f00 	cmp.w	fp, #0
 801523c:	da05      	bge.n	801524a <__kernel_rem_pio2+0x482>
 801523e:	b10e      	cbz	r6, 8015244 <__kernel_rem_pio2+0x47c>
 8015240:	eeb1 7b47 	vneg.f64	d7, d7
 8015244:	ed87 7b00 	vstr	d7, [r7]
 8015248:	e7ac      	b.n	80151a4 <__kernel_rem_pio2+0x3dc>
 801524a:	ed32 6b02 	vldmdb	r2!, {d6}
 801524e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015252:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015256:	e7ef      	b.n	8015238 <__kernel_rem_pio2+0x470>
 8015258:	ed32 7b02 	vldmdb	r2!, {d7}
 801525c:	3b01      	subs	r3, #1
 801525e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015262:	e7d0      	b.n	8015206 <__kernel_rem_pio2+0x43e>
 8015264:	eeb0 7b46 	vmov.f64	d7, d6
 8015268:	e7d2      	b.n	8015210 <__kernel_rem_pio2+0x448>
 801526a:	ecb2 6b02 	vldmia	r2!, {d6}
 801526e:	3301      	adds	r3, #1
 8015270:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015274:	e7d4      	b.n	8015220 <__kernel_rem_pio2+0x458>
 8015276:	ed91 7b00 	vldr	d7, [r1]
 801527a:	ed91 5b02 	vldr	d5, [r1, #8]
 801527e:	3801      	subs	r0, #1
 8015280:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015284:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015288:	ed81 6b00 	vstr	d6, [r1]
 801528c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015290:	ed81 7b02 	vstr	d7, [r1, #8]
 8015294:	e796      	b.n	80151c4 <__kernel_rem_pio2+0x3fc>
 8015296:	ed92 7b00 	vldr	d7, [r2]
 801529a:	ed92 5b02 	vldr	d5, [r2, #8]
 801529e:	3901      	subs	r1, #1
 80152a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80152a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152a8:	ed82 6b00 	vstr	d6, [r2]
 80152ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80152b0:	ed82 7b02 	vstr	d7, [r2, #8]
 80152b4:	e78b      	b.n	80151ce <__kernel_rem_pio2+0x406>
 80152b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80152ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80152c2:	e78b      	b.n	80151dc <__kernel_rem_pio2+0x414>
 80152c4:	eeb1 5b45 	vneg.f64	d5, d5
 80152c8:	eeb1 6b46 	vneg.f64	d6, d6
 80152cc:	ed87 5b00 	vstr	d5, [r7]
 80152d0:	eeb1 7b47 	vneg.f64	d7, d7
 80152d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80152d8:	e78d      	b.n	80151f6 <__kernel_rem_pio2+0x42e>
 80152da:	bf00      	nop
 80152dc:	f3af 8000 	nop.w
 80152e0:	00000000 	.word	0x00000000
 80152e4:	41700000 	.word	0x41700000
 80152e8:	00000000 	.word	0x00000000
 80152ec:	3e700000 	.word	0x3e700000
	...

080152f8 <__kernel_sin>:
 80152f8:	ee10 3a90 	vmov	r3, s1
 80152fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015300:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015304:	da04      	bge.n	8015310 <__kernel_sin+0x18>
 8015306:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801530a:	ee17 3a90 	vmov	r3, s15
 801530e:	b35b      	cbz	r3, 8015368 <__kernel_sin+0x70>
 8015310:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015314:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015318:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8015370 <__kernel_sin+0x78>
 801531c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015378 <__kernel_sin+0x80>
 8015320:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015324:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015380 <__kernel_sin+0x88>
 8015328:	eea4 7b06 	vfma.f64	d7, d4, d6
 801532c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015388 <__kernel_sin+0x90>
 8015330:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015334:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015390 <__kernel_sin+0x98>
 8015338:	eea4 7b06 	vfma.f64	d7, d4, d6
 801533c:	b930      	cbnz	r0, 801534c <__kernel_sin+0x54>
 801533e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015398 <__kernel_sin+0xa0>
 8015342:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015346:	eea4 0b05 	vfma.f64	d0, d4, d5
 801534a:	4770      	bx	lr
 801534c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015350:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8015354:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015358:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801535c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80153a0 <__kernel_sin+0xa8>
 8015360:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015364:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	f3af 8000 	nop.w
 8015370:	5acfd57c 	.word	0x5acfd57c
 8015374:	3de5d93a 	.word	0x3de5d93a
 8015378:	8a2b9ceb 	.word	0x8a2b9ceb
 801537c:	be5ae5e6 	.word	0xbe5ae5e6
 8015380:	57b1fe7d 	.word	0x57b1fe7d
 8015384:	3ec71de3 	.word	0x3ec71de3
 8015388:	19c161d5 	.word	0x19c161d5
 801538c:	bf2a01a0 	.word	0xbf2a01a0
 8015390:	1110f8a6 	.word	0x1110f8a6
 8015394:	3f811111 	.word	0x3f811111
 8015398:	55555549 	.word	0x55555549
 801539c:	bfc55555 	.word	0xbfc55555
 80153a0:	55555549 	.word	0x55555549
 80153a4:	3fc55555 	.word	0x3fc55555

080153a8 <log>:
 80153a8:	b470      	push	{r4, r5, r6}
 80153aa:	ee10 1a90 	vmov	r1, s1
 80153ae:	ee10 2a10 	vmov	r2, s0
 80153b2:	f04f 34ff 	mov.w	r4, #4294967295
 80153b6:	4294      	cmp	r4, r2
 80153b8:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 80153bc:	4c72      	ldr	r4, [pc, #456]	; (8015588 <log+0x1e0>)
 80153be:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 80153c2:	eb74 0000 	sbcs.w	r0, r4, r0
 80153c6:	ed2d 8b02 	vpush	{d8}
 80153ca:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80153ce:	d35c      	bcc.n	801548a <log+0xe2>
 80153d0:	4b6e      	ldr	r3, [pc, #440]	; (801558c <log+0x1e4>)
 80153d2:	4299      	cmp	r1, r3
 80153d4:	bf08      	it	eq
 80153d6:	2a00      	cmpeq	r2, #0
 80153d8:	f000 80c6 	beq.w	8015568 <log+0x1c0>
 80153dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80153e0:	ee30 0b47 	vsub.f64	d0, d0, d7
 80153e4:	4b6a      	ldr	r3, [pc, #424]	; (8015590 <log+0x1e8>)
 80153e6:	ee20 2b00 	vmul.f64	d2, d0, d0
 80153ea:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80153ee:	ee20 4b02 	vmul.f64	d4, d0, d2
 80153f2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80153f6:	eea6 7b00 	vfma.f64	d7, d6, d0
 80153fa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80153fe:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8015402:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015406:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 801540a:	eea5 6b00 	vfma.f64	d6, d5, d0
 801540e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8015412:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8015416:	eea5 6b02 	vfma.f64	d6, d5, d2
 801541a:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 801541e:	eea3 5b00 	vfma.f64	d5, d3, d0
 8015422:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8015426:	eea3 5b02 	vfma.f64	d5, d3, d2
 801542a:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 801542e:	eeb0 2b40 	vmov.f64	d2, d0
 8015432:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015436:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801543a:	eea5 6b04 	vfma.f64	d6, d5, d4
 801543e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8015442:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8015570 <log+0x1c8>
 8015446:	eeb0 1b47 	vmov.f64	d1, d7
 801544a:	eeb0 5b40 	vmov.f64	d5, d0
 801544e:	eea0 5b06 	vfma.f64	d5, d0, d6
 8015452:	eea0 5b46 	vfms.f64	d5, d0, d6
 8015456:	ee30 8b45 	vsub.f64	d8, d0, d5
 801545a:	ee25 7b05 	vmul.f64	d7, d5, d5
 801545e:	ee30 5b05 	vadd.f64	d5, d0, d5
 8015462:	eea7 2b03 	vfma.f64	d2, d7, d3
 8015466:	ee30 6b42 	vsub.f64	d6, d0, d2
 801546a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801546e:	ee23 3b08 	vmul.f64	d3, d3, d8
 8015472:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015476:	eeb0 0b46 	vmov.f64	d0, d6
 801547a:	eea1 0b04 	vfma.f64	d0, d1, d4
 801547e:	ee32 0b00 	vadd.f64	d0, d2, d0
 8015482:	ecbd 8b02 	vpop	{d8}
 8015486:	bc70      	pop	{r4, r5, r6}
 8015488:	4770      	bx	lr
 801548a:	f1a3 0410 	sub.w	r4, r3, #16
 801548e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8015492:	4284      	cmp	r4, r0
 8015494:	d923      	bls.n	80154de <log+0x136>
 8015496:	1894      	adds	r4, r2, r2
 8015498:	eb41 0001 	adc.w	r0, r1, r1
 801549c:	4320      	orrs	r0, r4
 801549e:	d105      	bne.n	80154ac <log+0x104>
 80154a0:	ecbd 8b02 	vpop	{d8}
 80154a4:	2001      	movs	r0, #1
 80154a6:	bc70      	pop	{r4, r5, r6}
 80154a8:	f7ff b89a 	b.w	80145e0 <__math_divzero>
 80154ac:	4839      	ldr	r0, [pc, #228]	; (8015594 <log+0x1ec>)
 80154ae:	4281      	cmp	r1, r0
 80154b0:	bf08      	it	eq
 80154b2:	2a00      	cmpeq	r2, #0
 80154b4:	d0e5      	beq.n	8015482 <log+0xda>
 80154b6:	041a      	lsls	r2, r3, #16
 80154b8:	d404      	bmi.n	80154c4 <log+0x11c>
 80154ba:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80154be:	ea32 0303 	bics.w	r3, r2, r3
 80154c2:	d104      	bne.n	80154ce <log+0x126>
 80154c4:	ecbd 8b02 	vpop	{d8}
 80154c8:	bc70      	pop	{r4, r5, r6}
 80154ca:	f7ff b8a1 	b.w	8014610 <__math_invalid>
 80154ce:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8015578 <log+0x1d0>
 80154d2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80154d6:	ec53 2b17 	vmov	r2, r3, d7
 80154da:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80154de:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80154e2:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 80154e6:	0d1e      	lsrs	r6, r3, #20
 80154e8:	1e14      	subs	r4, r2, #0
 80154ea:	4a29      	ldr	r2, [pc, #164]	; (8015590 <log+0x1e8>)
 80154ec:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80154f0:	f3c3 3046 	ubfx	r0, r3, #13, #7
 80154f4:	0536      	lsls	r6, r6, #20
 80154f6:	1b8d      	subs	r5, r1, r6
 80154f8:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 80154fc:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8015500:	ec45 4b16 	vmov	d6, r4, r5
 8015504:	151b      	asrs	r3, r3, #20
 8015506:	eea6 5b07 	vfma.f64	d5, d6, d7
 801550a:	ee07 3a90 	vmov	s15, r3
 801550e:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015512:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015516:	ed92 4b00 	vldr	d4, [r2]
 801551a:	ee25 1b02 	vmul.f64	d1, d5, d2
 801551e:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8015522:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015526:	ee35 4b07 	vadd.f64	d4, d5, d7
 801552a:	ee37 0b44 	vsub.f64	d0, d7, d4
 801552e:	ed92 7b02 	vldr	d7, [r2, #8]
 8015532:	ee30 0b05 	vadd.f64	d0, d0, d5
 8015536:	eea7 0b06 	vfma.f64	d0, d7, d6
 801553a:	ed92 7b04 	vldr	d7, [r2, #16]
 801553e:	ed92 6b08 	vldr	d6, [r2, #32]
 8015542:	eea7 0b02 	vfma.f64	d0, d7, d2
 8015546:	ed92 7b06 	vldr	d7, [r2, #24]
 801554a:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 801554e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8015552:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8015556:	eea3 6b05 	vfma.f64	d6, d3, d5
 801555a:	eea6 7b02 	vfma.f64	d7, d6, d2
 801555e:	eea1 0b07 	vfma.f64	d0, d1, d7
 8015562:	ee30 0b04 	vadd.f64	d0, d0, d4
 8015566:	e78c      	b.n	8015482 <log+0xda>
 8015568:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8015580 <log+0x1d8>
 801556c:	e789      	b.n	8015482 <log+0xda>
 801556e:	bf00      	nop
 8015570:	00000000 	.word	0x00000000
 8015574:	41a00000 	.word	0x41a00000
 8015578:	00000000 	.word	0x00000000
 801557c:	43300000 	.word	0x43300000
	...
 8015588:	000308ff 	.word	0x000308ff
 801558c:	3ff00000 	.word	0x3ff00000
 8015590:	08019bb0 	.word	0x08019bb0
 8015594:	7ff00000 	.word	0x7ff00000

08015598 <with_errnof>:
 8015598:	b513      	push	{r0, r1, r4, lr}
 801559a:	4604      	mov	r4, r0
 801559c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80155a0:	f7fb ff60 	bl	8011464 <__errno>
 80155a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80155a8:	6004      	str	r4, [r0, #0]
 80155aa:	b002      	add	sp, #8
 80155ac:	bd10      	pop	{r4, pc}

080155ae <__math_invalidf>:
 80155ae:	eef0 7a40 	vmov.f32	s15, s0
 80155b2:	ee30 7a40 	vsub.f32	s14, s0, s0
 80155b6:	eef4 7a67 	vcmp.f32	s15, s15
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80155c2:	d602      	bvs.n	80155ca <__math_invalidf+0x1c>
 80155c4:	2021      	movs	r0, #33	; 0x21
 80155c6:	f7ff bfe7 	b.w	8015598 <with_errnof>
 80155ca:	4770      	bx	lr

080155cc <fabs>:
 80155cc:	ec51 0b10 	vmov	r0, r1, d0
 80155d0:	ee10 2a10 	vmov	r2, s0
 80155d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155d8:	ec43 2b10 	vmov	d0, r2, r3
 80155dc:	4770      	bx	lr
	...

080155e0 <floor>:
 80155e0:	ee10 1a90 	vmov	r1, s1
 80155e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80155e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80155ec:	2b13      	cmp	r3, #19
 80155ee:	b530      	push	{r4, r5, lr}
 80155f0:	ee10 0a10 	vmov	r0, s0
 80155f4:	ee10 5a10 	vmov	r5, s0
 80155f8:	dc31      	bgt.n	801565e <floor+0x7e>
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	da15      	bge.n	801562a <floor+0x4a>
 80155fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80156b8 <floor+0xd8>
 8015602:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015606:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560e:	dd07      	ble.n	8015620 <floor+0x40>
 8015610:	2900      	cmp	r1, #0
 8015612:	da4e      	bge.n	80156b2 <floor+0xd2>
 8015614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015618:	4318      	orrs	r0, r3
 801561a:	d001      	beq.n	8015620 <floor+0x40>
 801561c:	4928      	ldr	r1, [pc, #160]	; (80156c0 <floor+0xe0>)
 801561e:	2000      	movs	r0, #0
 8015620:	460b      	mov	r3, r1
 8015622:	4602      	mov	r2, r0
 8015624:	ec43 2b10 	vmov	d0, r2, r3
 8015628:	e020      	b.n	801566c <floor+0x8c>
 801562a:	4a26      	ldr	r2, [pc, #152]	; (80156c4 <floor+0xe4>)
 801562c:	411a      	asrs	r2, r3
 801562e:	ea01 0402 	and.w	r4, r1, r2
 8015632:	4304      	orrs	r4, r0
 8015634:	d01a      	beq.n	801566c <floor+0x8c>
 8015636:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80156b8 <floor+0xd8>
 801563a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801563e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015646:	ddeb      	ble.n	8015620 <floor+0x40>
 8015648:	2900      	cmp	r1, #0
 801564a:	bfbe      	ittt	lt
 801564c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8015650:	fa40 f303 	asrlt.w	r3, r0, r3
 8015654:	18c9      	addlt	r1, r1, r3
 8015656:	ea21 0102 	bic.w	r1, r1, r2
 801565a:	2000      	movs	r0, #0
 801565c:	e7e0      	b.n	8015620 <floor+0x40>
 801565e:	2b33      	cmp	r3, #51	; 0x33
 8015660:	dd05      	ble.n	801566e <floor+0x8e>
 8015662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015666:	d101      	bne.n	801566c <floor+0x8c>
 8015668:	ee30 0b00 	vadd.f64	d0, d0, d0
 801566c:	bd30      	pop	{r4, r5, pc}
 801566e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8015672:	f04f 32ff 	mov.w	r2, #4294967295
 8015676:	40e2      	lsrs	r2, r4
 8015678:	4202      	tst	r2, r0
 801567a:	d0f7      	beq.n	801566c <floor+0x8c>
 801567c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80156b8 <floor+0xd8>
 8015680:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015684:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801568c:	ddc8      	ble.n	8015620 <floor+0x40>
 801568e:	2900      	cmp	r1, #0
 8015690:	da02      	bge.n	8015698 <floor+0xb8>
 8015692:	2b14      	cmp	r3, #20
 8015694:	d103      	bne.n	801569e <floor+0xbe>
 8015696:	3101      	adds	r1, #1
 8015698:	ea20 0002 	bic.w	r0, r0, r2
 801569c:	e7c0      	b.n	8015620 <floor+0x40>
 801569e:	2401      	movs	r4, #1
 80156a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80156a4:	fa04 f303 	lsl.w	r3, r4, r3
 80156a8:	4418      	add	r0, r3
 80156aa:	42a8      	cmp	r0, r5
 80156ac:	bf38      	it	cc
 80156ae:	1909      	addcc	r1, r1, r4
 80156b0:	e7f2      	b.n	8015698 <floor+0xb8>
 80156b2:	2000      	movs	r0, #0
 80156b4:	4601      	mov	r1, r0
 80156b6:	e7b3      	b.n	8015620 <floor+0x40>
 80156b8:	8800759c 	.word	0x8800759c
 80156bc:	7e37e43c 	.word	0x7e37e43c
 80156c0:	bff00000 	.word	0xbff00000
 80156c4:	000fffff 	.word	0x000fffff

080156c8 <nan>:
 80156c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80156d0 <nan+0x8>
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	00000000 	.word	0x00000000
 80156d4:	7ff80000 	.word	0x7ff80000

080156d8 <scalbn>:
 80156d8:	ee10 1a90 	vmov	r1, s1
 80156dc:	b510      	push	{r4, lr}
 80156de:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80156e2:	b98c      	cbnz	r4, 8015708 <scalbn+0x30>
 80156e4:	ee10 3a10 	vmov	r3, s0
 80156e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80156ec:	430b      	orrs	r3, r1
 80156ee:	d011      	beq.n	8015714 <scalbn+0x3c>
 80156f0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80157b8 <scalbn+0xe0>
 80156f4:	4b3c      	ldr	r3, [pc, #240]	; (80157e8 <scalbn+0x110>)
 80156f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80156fa:	4298      	cmp	r0, r3
 80156fc:	da0b      	bge.n	8015716 <scalbn+0x3e>
 80156fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80157c0 <scalbn+0xe8>
 8015702:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015706:	e005      	b.n	8015714 <scalbn+0x3c>
 8015708:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801570c:	429c      	cmp	r4, r3
 801570e:	d107      	bne.n	8015720 <scalbn+0x48>
 8015710:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015714:	bd10      	pop	{r4, pc}
 8015716:	ee10 1a90 	vmov	r1, s1
 801571a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801571e:	3c36      	subs	r4, #54	; 0x36
 8015720:	4404      	add	r4, r0
 8015722:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8015726:	429c      	cmp	r4, r3
 8015728:	dd0d      	ble.n	8015746 <scalbn+0x6e>
 801572a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80157c8 <scalbn+0xf0>
 801572e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80157d0 <scalbn+0xf8>
 8015732:	eeb0 6b47 	vmov.f64	d6, d7
 8015736:	ee10 3a90 	vmov	r3, s1
 801573a:	2b00      	cmp	r3, #0
 801573c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8015740:	ee27 0b06 	vmul.f64	d0, d7, d6
 8015744:	e7e6      	b.n	8015714 <scalbn+0x3c>
 8015746:	2c00      	cmp	r4, #0
 8015748:	dd0a      	ble.n	8015760 <scalbn+0x88>
 801574a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801574e:	ec53 2b10 	vmov	r2, r3, d0
 8015752:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015756:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801575a:	ec43 2b10 	vmov	d0, r2, r3
 801575e:	e7d9      	b.n	8015714 <scalbn+0x3c>
 8015760:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8015764:	da19      	bge.n	801579a <scalbn+0xc2>
 8015766:	f24c 3350 	movw	r3, #50000	; 0xc350
 801576a:	4298      	cmp	r0, r3
 801576c:	ee10 3a90 	vmov	r3, s1
 8015770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015774:	dd09      	ble.n	801578a <scalbn+0xb2>
 8015776:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80157c8 <scalbn+0xf0>
 801577a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80157d0 <scalbn+0xf8>
 801577e:	eeb0 7b40 	vmov.f64	d7, d0
 8015782:	2b00      	cmp	r3, #0
 8015784:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8015788:	e7bb      	b.n	8015702 <scalbn+0x2a>
 801578a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80157c0 <scalbn+0xe8>
 801578e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80157d8 <scalbn+0x100>
 8015792:	eeb0 7b40 	vmov.f64	d7, d0
 8015796:	2b00      	cmp	r3, #0
 8015798:	e7f4      	b.n	8015784 <scalbn+0xac>
 801579a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801579e:	ec53 2b10 	vmov	r2, r3, d0
 80157a2:	3436      	adds	r4, #54	; 0x36
 80157a4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80157a8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80157ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80157e0 <scalbn+0x108>
 80157b0:	ec43 2b10 	vmov	d0, r2, r3
 80157b4:	e7a5      	b.n	8015702 <scalbn+0x2a>
 80157b6:	bf00      	nop
 80157b8:	00000000 	.word	0x00000000
 80157bc:	43500000 	.word	0x43500000
 80157c0:	c2f8f359 	.word	0xc2f8f359
 80157c4:	01a56e1f 	.word	0x01a56e1f
 80157c8:	8800759c 	.word	0x8800759c
 80157cc:	7e37e43c 	.word	0x7e37e43c
 80157d0:	8800759c 	.word	0x8800759c
 80157d4:	fe37e43c 	.word	0xfe37e43c
 80157d8:	c2f8f359 	.word	0xc2f8f359
 80157dc:	81a56e1f 	.word	0x81a56e1f
 80157e0:	00000000 	.word	0x00000000
 80157e4:	3c900000 	.word	0x3c900000
 80157e8:	ffff3cb0 	.word	0xffff3cb0

080157ec <_init>:
 80157ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ee:	bf00      	nop
 80157f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157f2:	bc08      	pop	{r3}
 80157f4:	469e      	mov	lr, r3
 80157f6:	4770      	bx	lr

080157f8 <_fini>:
 80157f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157fa:	bf00      	nop
 80157fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157fe:	bc08      	pop	{r3}
 8015800:	469e      	mov	lr, r3
 8015802:	4770      	bx	lr
