
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016108  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004bc0  080163a8  080163a8  000263a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af68  0801af68  00051800  2**0
                  CONTENTS
  4 .ARM          00000008  0801af68  0801af68  0002af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af70  0801af70  00051800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af70  0801af70  0002af70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af74  0801af74  0002af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  24000000  0801af78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d154  24000520  0801b494  00030520  2**5
                  ALLOC
 10 ._user_heap_stack 00000844  2400d674  0801b494  0003d674  2**0
                  ALLOC
 11 .dtcm         00011800  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00051800  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY
 14 .debug_line   0004cb65  00000000  00000000  00051871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000081  00000000  00000000  0009e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0004db30  00000000  00000000  0009e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008f32  00000000  00000000  000ebf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001db0  00000000  00000000  000f4ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00199551  00000000  00000000  000f6c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00026f7c  00000000  00000000  002901c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 0000469c  00000000  00000000  002b713d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000ac82  00000000  00000000  002bb7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000076e8  00000000  00000000  002c645c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000520 	.word	0x24000520
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016390 	.word	0x08016390

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000524 	.word	0x24000524
 80002dc:	08016390 	.word	0x08016390

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <strlen>:
 8000440:	4603      	mov	r3, r0
 8000442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000446:	2a00      	cmp	r2, #0
 8000448:	d1fb      	bne.n	8000442 <strlen+0x2>
 800044a:	1a18      	subs	r0, r3, r0
 800044c:	3801      	subs	r0, #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b970 	b.w	8000748 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	460d      	mov	r5, r1
 8000488:	4604      	mov	r4, r0
 800048a:	460f      	mov	r7, r1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14a      	bne.n	8000526 <__udivmoddi4+0xa6>
 8000490:	428a      	cmp	r2, r1
 8000492:	4694      	mov	ip, r2
 8000494:	d965      	bls.n	8000562 <__udivmoddi4+0xe2>
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	b143      	cbz	r3, 80004ae <__udivmoddi4+0x2e>
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	f1c3 0220 	rsb	r2, r3, #32
 80004a4:	409f      	lsls	r7, r3
 80004a6:	fa20 f202 	lsr.w	r2, r0, r2
 80004aa:	4317      	orrs	r7, r2
 80004ac:	409c      	lsls	r4, r3
 80004ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004b2:	fa1f f58c 	uxth.w	r5, ip
 80004b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ba:	0c22      	lsrs	r2, r4, #16
 80004bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004c4:	fb01 f005 	mul.w	r0, r1, r5
 80004c8:	4290      	cmp	r0, r2
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x62>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80004d4:	f080 811c 	bcs.w	8000710 <__udivmoddi4+0x290>
 80004d8:	4290      	cmp	r0, r2
 80004da:	f240 8119 	bls.w	8000710 <__udivmoddi4+0x290>
 80004de:	3902      	subs	r1, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a12      	subs	r2, r2, r0
 80004e4:	b2a4      	uxth	r4, r4
 80004e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80004ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f2:	fb00 f505 	mul.w	r5, r0, r5
 80004f6:	42a5      	cmp	r5, r4
 80004f8:	d90a      	bls.n	8000510 <__udivmoddi4+0x90>
 80004fa:	eb1c 0404 	adds.w	r4, ip, r4
 80004fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000502:	f080 8107 	bcs.w	8000714 <__udivmoddi4+0x294>
 8000506:	42a5      	cmp	r5, r4
 8000508:	f240 8104 	bls.w	8000714 <__udivmoddi4+0x294>
 800050c:	4464      	add	r4, ip
 800050e:	3802      	subs	r0, #2
 8000510:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	2100      	movs	r1, #0
 8000518:	b11e      	cbz	r6, 8000522 <__udivmoddi4+0xa2>
 800051a:	40dc      	lsrs	r4, r3
 800051c:	2300      	movs	r3, #0
 800051e:	e9c6 4300 	strd	r4, r3, [r6]
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0xbc>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80ed 	beq.w	800070a <__udivmoddi4+0x28a>
 8000530:	2100      	movs	r1, #0
 8000532:	e9c6 0500 	strd	r0, r5, [r6]
 8000536:	4608      	mov	r0, r1
 8000538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053c:	fab3 f183 	clz	r1, r3
 8000540:	2900      	cmp	r1, #0
 8000542:	d149      	bne.n	80005d8 <__udivmoddi4+0x158>
 8000544:	42ab      	cmp	r3, r5
 8000546:	d302      	bcc.n	800054e <__udivmoddi4+0xce>
 8000548:	4282      	cmp	r2, r0
 800054a:	f200 80f8 	bhi.w	800073e <__udivmoddi4+0x2be>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	2e00      	cmp	r6, #0
 800055a:	d0e2      	beq.n	8000522 <__udivmoddi4+0xa2>
 800055c:	e9c6 4700 	strd	r4, r7, [r6]
 8000560:	e7df      	b.n	8000522 <__udivmoddi4+0xa2>
 8000562:	b902      	cbnz	r2, 8000566 <__udivmoddi4+0xe6>
 8000564:	deff      	udf	#255	; 0xff
 8000566:	fab2 f382 	clz	r3, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	f040 8090 	bne.w	8000690 <__udivmoddi4+0x210>
 8000570:	1a8a      	subs	r2, r1, r2
 8000572:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000576:	fa1f fe8c 	uxth.w	lr, ip
 800057a:	2101      	movs	r1, #1
 800057c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000580:	fb07 2015 	mls	r0, r7, r5, r2
 8000584:	0c22      	lsrs	r2, r4, #16
 8000586:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800058a:	fb0e f005 	mul.w	r0, lr, r5
 800058e:	4290      	cmp	r0, r2
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000592:	eb1c 0202 	adds.w	r2, ip, r2
 8000596:	f105 38ff 	add.w	r8, r5, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4290      	cmp	r0, r2
 800059e:	f200 80cb 	bhi.w	8000738 <__udivmoddi4+0x2b8>
 80005a2:	4645      	mov	r5, r8
 80005a4:	1a12      	subs	r2, r2, r0
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005ac:	fb07 2210 	mls	r2, r7, r0, r2
 80005b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005b4:	fb0e fe00 	mul.w	lr, lr, r0
 80005b8:	45a6      	cmp	lr, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x14e>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005c4:	d202      	bcs.n	80005cc <__udivmoddi4+0x14c>
 80005c6:	45a6      	cmp	lr, r4
 80005c8:	f200 80bb 	bhi.w	8000742 <__udivmoddi4+0x2c2>
 80005cc:	4610      	mov	r0, r2
 80005ce:	eba4 040e 	sub.w	r4, r4, lr
 80005d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x98>
 80005d8:	f1c1 0720 	rsb	r7, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 fc07 	lsr.w	ip, r2, r7
 80005e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005e6:	fa05 f401 	lsl.w	r4, r5, r1
 80005ea:	fa20 f307 	lsr.w	r3, r0, r7
 80005ee:	40fd      	lsrs	r5, r7
 80005f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005f4:	4323      	orrs	r3, r4
 80005f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80005fa:	fa1f fe8c 	uxth.w	lr, ip
 80005fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000602:	0c1c      	lsrs	r4, r3, #16
 8000604:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000608:	fb08 f50e 	mul.w	r5, r8, lr
 800060c:	42a5      	cmp	r5, r4
 800060e:	fa02 f201 	lsl.w	r2, r2, r1
 8000612:	fa00 f001 	lsl.w	r0, r0, r1
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1c 0404 	adds.w	r4, ip, r4
 800061c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000620:	f080 8088 	bcs.w	8000734 <__udivmoddi4+0x2b4>
 8000624:	42a5      	cmp	r5, r4
 8000626:	f240 8085 	bls.w	8000734 <__udivmoddi4+0x2b4>
 800062a:	f1a8 0802 	sub.w	r8, r8, #2
 800062e:	4464      	add	r4, ip
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	b29d      	uxth	r5, r3
 8000634:	fbb4 f3f9 	udiv	r3, r4, r9
 8000638:	fb09 4413 	mls	r4, r9, r3, r4
 800063c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000640:	fb03 fe0e 	mul.w	lr, r3, lr
 8000644:	45a6      	cmp	lr, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1c 0404 	adds.w	r4, ip, r4
 800064c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000650:	d26c      	bcs.n	800072c <__udivmoddi4+0x2ac>
 8000652:	45a6      	cmp	lr, r4
 8000654:	d96a      	bls.n	800072c <__udivmoddi4+0x2ac>
 8000656:	3b02      	subs	r3, #2
 8000658:	4464      	add	r4, ip
 800065a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065e:	fba3 9502 	umull	r9, r5, r3, r2
 8000662:	eba4 040e 	sub.w	r4, r4, lr
 8000666:	42ac      	cmp	r4, r5
 8000668:	46c8      	mov	r8, r9
 800066a:	46ae      	mov	lr, r5
 800066c:	d356      	bcc.n	800071c <__udivmoddi4+0x29c>
 800066e:	d053      	beq.n	8000718 <__udivmoddi4+0x298>
 8000670:	b156      	cbz	r6, 8000688 <__udivmoddi4+0x208>
 8000672:	ebb0 0208 	subs.w	r2, r0, r8
 8000676:	eb64 040e 	sbc.w	r4, r4, lr
 800067a:	fa04 f707 	lsl.w	r7, r4, r7
 800067e:	40ca      	lsrs	r2, r1
 8000680:	40cc      	lsrs	r4, r1
 8000682:	4317      	orrs	r7, r2
 8000684:	e9c6 7400 	strd	r7, r4, [r6]
 8000688:	4618      	mov	r0, r3
 800068a:	2100      	movs	r1, #0
 800068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000690:	f1c3 0120 	rsb	r1, r3, #32
 8000694:	fa02 fc03 	lsl.w	ip, r2, r3
 8000698:	fa20 f201 	lsr.w	r2, r0, r1
 800069c:	fa25 f101 	lsr.w	r1, r5, r1
 80006a0:	409d      	lsls	r5, r3
 80006a2:	432a      	orrs	r2, r5
 80006a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a8:	fa1f fe8c 	uxth.w	lr, ip
 80006ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b0:	fb07 1510 	mls	r5, r7, r0, r1
 80006b4:	0c11      	lsrs	r1, r2, #16
 80006b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ba:	fb00 f50e 	mul.w	r5, r0, lr
 80006be:	428d      	cmp	r5, r1
 80006c0:	fa04 f403 	lsl.w	r4, r4, r3
 80006c4:	d908      	bls.n	80006d8 <__udivmoddi4+0x258>
 80006c6:	eb1c 0101 	adds.w	r1, ip, r1
 80006ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80006ce:	d22f      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 80006d0:	428d      	cmp	r5, r1
 80006d2:	d92d      	bls.n	8000730 <__udivmoddi4+0x2b0>
 80006d4:	3802      	subs	r0, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	1b49      	subs	r1, r1, r5
 80006da:	b292      	uxth	r2, r2
 80006dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80006e0:	fb07 1115 	mls	r1, r7, r5, r1
 80006e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006e8:	fb05 f10e 	mul.w	r1, r5, lr
 80006ec:	4291      	cmp	r1, r2
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x282>
 80006f0:	eb1c 0202 	adds.w	r2, ip, r2
 80006f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80006f8:	d216      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 80006fa:	4291      	cmp	r1, r2
 80006fc:	d914      	bls.n	8000728 <__udivmoddi4+0x2a8>
 80006fe:	3d02      	subs	r5, #2
 8000700:	4462      	add	r2, ip
 8000702:	1a52      	subs	r2, r2, r1
 8000704:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000708:	e738      	b.n	800057c <__udivmoddi4+0xfc>
 800070a:	4631      	mov	r1, r6
 800070c:	4630      	mov	r0, r6
 800070e:	e708      	b.n	8000522 <__udivmoddi4+0xa2>
 8000710:	4639      	mov	r1, r7
 8000712:	e6e6      	b.n	80004e2 <__udivmoddi4+0x62>
 8000714:	4610      	mov	r0, r2
 8000716:	e6fb      	b.n	8000510 <__udivmoddi4+0x90>
 8000718:	4548      	cmp	r0, r9
 800071a:	d2a9      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 800071c:	ebb9 0802 	subs.w	r8, r9, r2
 8000720:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000724:	3b01      	subs	r3, #1
 8000726:	e7a3      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000728:	4645      	mov	r5, r8
 800072a:	e7ea      	b.n	8000702 <__udivmoddi4+0x282>
 800072c:	462b      	mov	r3, r5
 800072e:	e794      	b.n	800065a <__udivmoddi4+0x1da>
 8000730:	4640      	mov	r0, r8
 8000732:	e7d1      	b.n	80006d8 <__udivmoddi4+0x258>
 8000734:	46d0      	mov	r8, sl
 8000736:	e77b      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000738:	3d02      	subs	r5, #2
 800073a:	4462      	add	r2, ip
 800073c:	e732      	b.n	80005a4 <__udivmoddi4+0x124>
 800073e:	4608      	mov	r0, r1
 8000740:	e70a      	b.n	8000558 <__udivmoddi4+0xd8>
 8000742:	4464      	add	r4, ip
 8000744:	3802      	subs	r0, #2
 8000746:	e742      	b.n	80005ce <__udivmoddi4+0x14e>

08000748 <__aeabi_idiv0>:
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000750:	4605      	mov	r5, r0
 8000752:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 8000754:	f8b5 8000 	ldrh.w	r8, [r5]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000758:	686a      	ldr	r2, [r5, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 800075a:	ea4f 0158 	mov.w	r1, r8, lsr #1
  float32_t * p2 = p1 + L;
 800075e:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000762:	ea5f 08d8 	movs.w	r8, r8, lsr #3
{
 8000766:	ed2d 8b08 	vpush	{d8-d11}
 800076a:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
 800076c:	f000 80a9 	beq.w	80008c2 <arm_cfft_radix8by2_f32+0x176>
 8000770:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8000774:	f100 0310 	add.w	r3, r0, #16
 8000778:	f102 0710 	add.w	r7, r2, #16
 800077c:	f106 0e10 	add.w	lr, r6, #16
 8000780:	f10c 0c10 	add.w	ip, ip, #16
 8000784:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 8000788:	eb00 040c 	add.w	r4, r0, ip
 800078c:	44b4      	add	ip, r6
    t1[0] = p1[0];
    t1[1] = p1[1];
    t1[2] = p1[2];
    t1[3] = p1[3];

    t2[0] = p2[0];
 800078e:	ed5e 2a04 	vldr	s5, [lr, #-16]
  for (l = L >> 2; l > 0; l-- )
 8000792:	f10c 0c10 	add.w	ip, ip, #16
    t2[1] = p2[1];
 8000796:	ed1e 3a03 	vldr	s6, [lr, #-12]
  for (l = L >> 2; l > 0; l-- )
 800079a:	f10e 0e10 	add.w	lr, lr, #16
    t3[0] = pMid1[0];
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
 800079e:	ed1c 2a08 	vldr	s4, [ip, #-32]	; 0xffffffe0
  for (l = L >> 2; l > 0; l-- )
 80007a2:	3710      	adds	r7, #16
    t4[1] = pMid2[1];
 80007a4:	ed5c 5a07 	vldr	s11, [ip, #-28]	; 0xffffffe4
  for (l = L >> 2; l > 0; l-- )
 80007a8:	3310      	adds	r3, #16
    t2[2] = p2[2];
 80007aa:	ed5e 3a06 	vldr	s7, [lr, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80007ae:	3410      	adds	r4, #16
    t2[3] = p2[3];
 80007b0:	ed1e 4a05 	vldr	s8, [lr, #-20]	; 0xffffffec
    t4[2] = pMid2[2];
 80007b4:	ed5c 7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
    t4[3] = pMid2[3];
 80007b8:	ed5c 6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
    t1[0] = p1[0];
 80007bc:	ed13 1a08 	vldr	s2, [r3, #-32]	; 0xffffffe0
    t1[1] = p1[1];
 80007c0:	ed53 1a07 	vldr	s3, [r3, #-28]	; 0xffffffe4
    t1[2] = p1[2];
 80007c4:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8

    *p1++ = t1[0] + t2[0];
 80007c8:	ee71 ba22 	vadd.f32	s23, s2, s5
    t1[3] = p1[3];
 80007cc:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
    *p1++ = t1[1] + t2[1];
 80007d0:	ee31 ba83 	vadd.f32	s22, s3, s6
    t3[0] = pMid1[0];
 80007d4:	ed54 4a08 	vldr	s9, [r4, #-32]	; 0xffffffe0
    *p1++ = t1[2] + t2[2];
 80007d8:	ee76 aa23 	vadd.f32	s21, s12, s7
    t3[1] = pMid1[1];
 80007dc:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80007e0:	ee37 aa04 	vadd.f32	s20, s14, s8
    t3[2] = pMid1[2];
 80007e4:	ed54 0a06 	vldr	s1, [r4, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
 80007e8:	ee74 9a82 	vadd.f32	s19, s9, s4
    t3[3] = pMid1[3];
 80007ec:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    *pMid1++ = t3[1] + t4[1];
 80007f0:	ee35 9a25 	vadd.f32	s18, s10, s11
    *pMid1++ = t3[2] + t4[2];
 80007f4:	ee70 8aa7 	vadd.f32	s17, s1, s15
    *p1++ = t1[0] + t2[0];
 80007f8:	ed43 ba08 	vstr	s23, [r3, #-32]	; 0xffffffe0
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80007fc:	ee30 8a26 	vadd.f32	s16, s0, s13
    *p1++ = t1[1] + t2[1];
 8000800:	ed03 ba07 	vstr	s22, [r3, #-28]	; 0xffffffe4
    *p1++ = t1[2] + t2[2];
 8000804:	ed43 aa06 	vstr	s21, [r3, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
 8000808:	ee31 1a62 	vsub.f32	s2, s2, s5
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800080c:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
    t2[1] = t1[1] - t2[1];
 8000810:	ee71 1ac3 	vsub.f32	s3, s3, s6
    *pMid1++ = t3[0] + t4[0];
 8000814:	ed44 9a08 	vstr	s19, [r4, #-32]	; 0xffffffe0

    t4[0] = t4[0] - t3[0];
 8000818:	ee32 2a64 	vsub.f32	s4, s4, s9
    *pMid1++ = t3[1] + t4[1];
 800081c:	ed04 9a07 	vstr	s18, [r4, #-28]	; 0xffffffe4
    t4[1] = t4[1] - t3[1];
 8000820:	ee75 5ac5 	vsub.f32	s11, s11, s10
    *pMid1++ = t3[2] + t4[2];
 8000824:	ed44 8a06 	vstr	s17, [r4, #-24]	; 0xffffffe8
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000828:	ee37 7a44 	vsub.f32	s14, s14, s8
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800082c:	ed04 8a05 	vstr	s16, [r4, #-20]	; 0xffffffec
    t2[2] = t1[2] - t2[2];
 8000830:	ee36 6a63 	vsub.f32	s12, s12, s7
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
 8000834:	ed57 4a08 	vldr	s9, [r7, #-32]	; 0xffffffe0
    t4[2] = t4[2] - t3[2];
 8000838:	ee77 7ae0 	vsub.f32	s15, s15, s1
    twI = *tw++;
 800083c:	ed17 5a07 	vldr	s10, [r7, #-28]	; 0xffffffe4
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000840:	ee76 6ac0 	vsub.f32	s13, s13, s0
    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
    m1 = t4[1] * twR;
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
 8000844:	ee22 4a24 	vmul.f32	s8, s4, s9
  for (l = L >> 2; l > 0; l-- )
 8000848:	4543      	cmp	r3, r8
    m1 = t2[1] * twI;
 800084a:	ee61 2a85 	vmul.f32	s5, s3, s10
    *p2++ = m2 - m3;
 800084e:	ee25 3a41 	vnmul.f32	s6, s10, s2

    *pMid2++ = m0 - m1;
 8000852:	ee64 3ae5 	vnmul.f32	s7, s9, s11
    *p2++ = m0 + m1;
 8000856:	eee1 2a24 	vfma.f32	s5, s2, s9
    *p2++ = m2 - m3;
 800085a:	eea1 3aa4 	vfma.f32	s6, s3, s9
    *pMid2++ = m2 + m3;
 800085e:	eef0 4a44 	vmov.f32	s9, s8
    *pMid2++ = m0 - m1;
 8000862:	eee2 3a05 	vfma.f32	s7, s4, s10
    *pMid2++ = m2 + m3;
 8000866:	eee5 4a85 	vfma.f32	s9, s11, s10
    *p2++ = m0 + m1;
 800086a:	ed4e 2a08 	vstr	s5, [lr, #-32]	; 0xffffffe0
    *p2++ = m2 - m3;
 800086e:	ed0e 3a07 	vstr	s6, [lr, #-28]	; 0xffffffe4
    *pMid2++ = m0 - m1;
 8000872:	ed4c 3a08 	vstr	s7, [ip, #-32]	; 0xffffffe0
    *pMid2++ = m2 + m3;
 8000876:	ed4c 4a07 	vstr	s9, [ip, #-28]	; 0xffffffe4

    twR = *tw++;
 800087a:	ed17 5a06 	vldr	s10, [r7, #-24]	; 0xffffffe8
    twI = *tw++;
 800087e:	ed57 5a05 	vldr	s11, [r7, #-20]	; 0xffffffec
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
    m1 = t4[3] * twR;
    m2 = t4[3] * twI;
    m3 = t4[2] * twR;
 8000882:	ee67 4a85 	vmul.f32	s9, s15, s10
    m1 = t2[3] * twI;
 8000886:	ee27 3a25 	vmul.f32	s6, s14, s11
    *p2++ = m2 - m3;
 800088a:	ee65 3ac6 	vnmul.f32	s7, s11, s12

    *pMid2++ = m0 - m1;
 800088e:	ee25 4a66 	vnmul.f32	s8, s10, s13
    *p2++ = m0 + m1;
 8000892:	eea6 3a05 	vfma.f32	s6, s12, s10
    *pMid2++ = m2 + m3;
 8000896:	eeb0 6a64 	vmov.f32	s12, s9
 800089a:	eea6 6aa5 	vfma.f32	s12, s13, s11
    *p2++ = m2 - m3;
 800089e:	eef0 6a63 	vmov.f32	s13, s7
    *p2++ = m0 + m1;
 80008a2:	ed0e 3a06 	vstr	s6, [lr, #-24]	; 0xffffffe8
    *p2++ = m2 - m3;
 80008a6:	eee7 6a05 	vfma.f32	s13, s14, s10
    *pMid2++ = m0 - m1;
 80008aa:	eeb0 7a44 	vmov.f32	s14, s8
 80008ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
    *p2++ = m2 - m3;
 80008b2:	ed4e 6a05 	vstr	s13, [lr, #-20]	; 0xffffffec
    *pMid2++ = m2 + m3;
 80008b6:	ed0c 6a05 	vstr	s12, [ip, #-20]	; 0xffffffec
    *pMid2++ = m0 - m1;
 80008ba:	ed0c 7a06 	vstr	s14, [ip, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80008be:	f47f af66 	bne.w	800078e <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80008c2:	b289      	uxth	r1, r1
 80008c4:	2302      	movs	r3, #2
 80008c6:	9101      	str	r1, [sp, #4]
 80008c8:	f000 facc 	bl	8000e64 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008cc:	2302      	movs	r3, #2
 80008ce:	686a      	ldr	r2, [r5, #4]
 80008d0:	9901      	ldr	r1, [sp, #4]
 80008d2:	4630      	mov	r0, r6
}
 80008d4:	b002      	add	sp, #8
 80008d6:	ecbd 8b08 	vpop	{d8-d11}
 80008da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008de:	f000 bac1 	b.w	8000e64 <arm_radix8_butterfly_f32>
 80008e2:	bf00      	nop

080008e4 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80008e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e8:	4607      	mov	r7, r0
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80008ea:	edd1 7a00 	vldr	s15, [r1]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 80008ee:	ed91 7a01 	vldr	s14, [r1, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80008f2:	460e      	mov	r6, r1
    uint32_t    L  = S->fftLen >> 1;
 80008f4:	883a      	ldrh	r2, [r7, #0]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80008f6:	687f      	ldr	r7, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80008f8:	3608      	adds	r6, #8
    uint32_t    L  = S->fftLen >> 1;
 80008fa:	0852      	lsrs	r2, r2, #1
{
 80008fc:	ed2d 8b06 	vpush	{d8-d10}
 8000900:	b08f      	sub	sp, #60	; 0x3c
    float32_t * p2 = p1 + L;
 8000902:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8000906:	0093      	lsls	r3, r2, #2
{
 8000908:	900b      	str	r0, [sp, #44]	; 0x2c
 800090a:	4608      	mov	r0, r1
 800090c:	910c      	str	r1, [sp, #48]	; 0x30
    float32_t * p3 = p2 + L;
 800090e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000912:	ed95 5a00 	vldr	s10, [r5]
    p1ap3_0 = p1[0] + p3[0];
 8000916:	edd1 6a00 	vldr	s13, [r1]
    float32_t * p4 = p3 + L;
 800091a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 800091e:	edd1 5a01 	vldr	s11, [r1, #4]
    L >>= 1;
 8000922:	0852      	lsrs	r2, r2, #1
    p1ap3_0 = p1[0] + p3[0];
 8000924:	ee37 6aa6 	vadd.f32	s12, s15, s13
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000928:	edd5 2a01 	vldr	s5, [r5, #4]
    p1sp3_0 = p1[0] - p3[0];
 800092c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    L >>= 1;
 8000930:	9207      	str	r2, [sp, #28]
    p1ap3_1 = p1[1] + p3[1];
 8000932:	ee77 6a25 	vadd.f32	s13, s14, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000936:	462a      	mov	r2, r5
    p1sp3_1 = p1[1] - p3[1];
 8000938:	ee37 7a65 	vsub.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800093c:	edd4 5a00 	vldr	s11, [r4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000940:	ee76 3a45 	vsub.f32	s7, s12, s10
    *p2++ = t2[0];
 8000944:	3208      	adds	r2, #8
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000946:	ee35 6a86 	vadd.f32	s12, s11, s12
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800094a:	ed94 2a01 	vldr	s4, [r4, #4]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800094e:	ee75 4a07 	vadd.f32	s9, s10, s14
    *p2++ = t2[0];
 8000952:	9206      	str	r2, [sp, #24]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000954:	ee35 7a87 	vadd.f32	s14, s11, s14
    *p2++ = t2[1];
    *p3++ = t3[0];
 8000958:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800095a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800095e:	9604      	str	r6, [sp, #16]
    *p3++ = t3[0];
 8000960:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000962:	ee32 3aa7 	vadd.f32	s6, s5, s15
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000966:	ee37 7a45 	vsub.f32	s14, s14, s10
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
 800096a:	f107 0608 	add.w	r6, r7, #8
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800096e:	ed80 6a00 	vstr	s12, [r0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000972:	ee36 4ae2 	vsub.f32	s8, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000976:	ed94 5a01 	vldr	s10, [r4, #4]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800097a:	ee72 7a27 	vadd.f32	s15, s4, s15
    *p3++ = t3[0];
 800097e:	9200      	str	r2, [sp, #0]
    *p4++ = t4[0];
 8000980:	4622      	mov	r2, r4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000982:	ee76 6a85 	vadd.f32	s13, s13, s10
 8000986:	ed95 6a01 	vldr	s12, [r5, #4]
    *p4++ = t4[0];
 800098a:	3208      	adds	r2, #8
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800098c:	ee73 3ae5 	vsub.f32	s7, s7, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000990:	ee33 3a42 	vsub.f32	s6, s6, s4
    float32_t * p3 = p2 + L;
 8000994:	9109      	str	r1, [sp, #36]	; 0x24
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000996:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p4++ = t4[0];
 800099a:	9205      	str	r2, [sp, #20]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800099c:	ee77 7ae2 	vsub.f32	s15, s15, s5
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
 80009a0:	9a07      	ldr	r2, [sp, #28]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80009a2:	ee74 5ae5 	vsub.f32	s11, s9, s11
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80009a6:	970a      	str	r7, [sp, #40]	; 0x28
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009a8:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009ac:	3a02      	subs	r2, #2
 80009ae:	0852      	lsrs	r2, r2, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009b0:	edc0 6a01 	vstr	s13, [r0, #4]
    *p2++ = t2[0];
 80009b4:	ed85 3a00 	vstr	s6, [r5]
    *p2++ = t2[1];
 80009b8:	ed85 7a01 	vstr	s14, [r5, #4]
    *p3++ = t3[0];
 80009bc:	edc1 3a00 	vstr	s7, [r1]
    *p3++ = t3[1];
 80009c0:	ed81 4a01 	vstr	s8, [r1, #4]
    *p4++ = t4[0];
 80009c4:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 80009c8:	edc4 5a01 	vstr	s11, [r4, #4]
    tw2 += twMod2;
 80009cc:	9603      	str	r6, [sp, #12]
    tw3 += twMod3;
 80009ce:	f107 0610 	add.w	r6, r7, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d2:	9208      	str	r2, [sp, #32]
    tw3 += twMod3;
 80009d4:	9601      	str	r6, [sp, #4]
    tw4 += twMod4;
 80009d6:	f107 0618 	add.w	r6, r7, #24
 80009da:	9602      	str	r6, [sp, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009dc:	f000 8134 	beq.w	8000c48 <arm_cfft_radix8by4_f32+0x364>
 80009e0:	4693      	mov	fp, r2
 80009e2:	f100 0210 	add.w	r2, r0, #16
 80009e6:	3b0c      	subs	r3, #12
 80009e8:	f107 0920 	add.w	r9, r7, #32
 80009ec:	920d      	str	r2, [sp, #52]	; 0x34
 80009ee:	460a      	mov	r2, r1
 80009f0:	f107 0830 	add.w	r8, r7, #48	; 0x30
 80009f4:	4423      	add	r3, r4
 80009f6:	f102 0e10 	add.w	lr, r2, #16
 80009fa:	f1a5 060c 	sub.w	r6, r5, #12
 80009fe:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000a02:	f105 0010 	add.w	r0, r5, #16
 8000a06:	390c      	subs	r1, #12
 8000a08:	f1a4 0c0c 	sub.w	ip, r4, #12
 8000a0c:	f104 0210 	add.w	r2, r4, #16
 8000a10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a12:	ed12 5a02 	vldr	s10, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a16:	f1bb 0b01 	subs.w	fp, fp, #1
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a1a:	ed50 5a02 	vldr	s11, [r0, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a1e:	f107 0708 	add.w	r7, r7, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a22:	ed5e 3a02 	vldr	s7, [lr, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a26:	f1a6 0608 	sub.w	r6, r6, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a2a:	ed17 7a04 	vldr	s14, [r7, #-16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a2e:	ee75 6a85 	vadd.f32	s13, s11, s10
      p1ap3_1 = p1[1] + p3[1];
 8000a32:	ed1e 4a01 	vldr	s8, [lr, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a36:	f10a 0a08 	add.w	sl, sl, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a3a:	ee37 1a23 	vadd.f32	s2, s14, s7
      p1ap3_1 = p1[1] + p3[1];
 8000a3e:	ed57 7a03 	vldr	s15, [r7, #-12]
      p1sp3_0 = p1[0] - p3[0];
 8000a42:	ee37 7a63 	vsub.f32	s14, s14, s7
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a46:	ed52 4a01 	vldr	s9, [r2, #-4]
 8000a4a:	ed10 6a01 	vldr	s12, [r0, #-4]
      p1ap3_1 = p1[1] + p3[1];
 8000a4e:	ee77 3a84 	vadd.f32	s7, s15, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a52:	ee76 6a81 	vadd.f32	s13, s13, s2
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a56:	f100 0008 	add.w	r0, r0, #8
      p1sp3_1 = p1[1] - p3[1];
 8000a5a:	ee77 7ac4 	vsub.f32	s15, s15, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a5e:	f1a1 0108 	sub.w	r1, r1, #8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a62:	ee77 0a64 	vsub.f32	s1, s14, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a66:	f109 0910 	add.w	r9, r9, #16
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a6a:	ed47 6a04 	vstr	s13, [r7, #-16]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a6e:	ee31 1a65 	vsub.f32	s2, s2, s11
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a72:	ed12 4a01 	vldr	s8, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a76:	ee37 0ae5 	vsub.f32	s0, s15, s11
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a7a:	ed50 6a03 	vldr	s13, [r0, #-12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a7e:	ee70 0a86 	vadd.f32	s1, s1, s12
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000a82:	ee37 7a46 	vsub.f32	s14, s14, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a86:	f10e 0e08 	add.w	lr, lr, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a8a:	ee76 6a84 	vadd.f32	s13, s13, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a8e:	f1ac 0c08 	sub.w	ip, ip, #8
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000a92:	ee33 6ac6 	vsub.f32	s12, s7, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a96:	f108 0818 	add.w	r8, r8, #24
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a9a:	ee77 7ac5 	vsub.f32	s15, s15, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a9e:	f102 0208 	add.w	r2, r2, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000aa2:	ee76 6aa3 	vadd.f32	s13, s13, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa6:	f1a3 0308 	sub.w	r3, r3, #8
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000aaa:	ee36 4a64 	vsub.f32	s8, s12, s9
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000aae:	ee31 1a45 	vsub.f32	s2, s2, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ab2:	ed47 6a03 	vstr	s13, [r7, #-12]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ab6:	ee30 0a05 	vadd.f32	s0, s0, s10
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000aba:	edd3 9a04 	vldr	s19, [r3, #16]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000abe:	ee37 5aa5 	vadd.f32	s10, s15, s11
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ac2:	ed96 8a04 	vldr	s16, [r6, #16]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000ac6:	ee37 7a24 	vadd.f32	s14, s14, s9
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000aca:	eddc 7a04 	vldr	s15, [ip, #16]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ace:	ed91 6a04 	vldr	s12, [r1, #16]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ad2:	ee38 3a27 	vadd.f32	s6, s16, s15
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000ad6:	ed93 9a03 	vldr	s18, [r3, #12]
 8000ada:	ee76 2a29 	vadd.f32	s5, s12, s19
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000ade:	eddc 3a03 	vldr	s7, [ip, #12]
 8000ae2:	edd6 8a03 	vldr	s17, [r6, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ae6:	ee76 4a69 	vsub.f32	s9, s12, s19
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000aea:	ed91 2a03 	vldr	s4, [r1, #12]
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000aee:	ee73 5a46 	vsub.f32	s11, s6, s12
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000af2:	ee73 aa22 	vadd.f32	s21, s6, s5
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af6:	ee78 6a09 	vadd.f32	s13, s16, s18
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000afa:	ee38 aaa3 	vadd.f32	s20, s17, s7
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000afe:	edc6 aa04 	vstr	s21, [r6, #16]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b02:	ee74 1ae3 	vsub.f32	s3, s9, s7
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b06:	edd3 aa03 	vldr	s21, [r3, #12]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b0e:	ed91 6a03 	vldr	s12, [r1, #12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b12:	ee77 7a89 	vadd.f32	s15, s15, s18
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b16:	ee74 4ae8 	vsub.f32	s9, s9, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b1a:	ee36 6a2a 	vadd.f32	s12, s12, s21
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b1e:	ee71 1aa8 	vadd.f32	s3, s3, s17
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b22:	ee76 6ac2 	vsub.f32	s13, s13, s4
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b26:	ee36 6a0a 	vadd.f32	s12, s12, s20
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b2a:	ee77 7ac2 	vsub.f32	s15, s15, s4
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000b2e:	ee72 2ac3 	vsub.f32	s5, s5, s6
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b32:	ee3a 3a42 	vsub.f32	s6, s20, s4
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b36:	ed86 6a03 	vstr	s12, [r6, #12]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b3a:	ee74 4aa3 	vadd.f32	s9, s9, s7
      twI = *tw2++;
 8000b3e:	ed1a 2a03 	vldr	s4, [sl, #-12]
      twR = *tw2++;
 8000b42:	ed5a 3a04 	vldr	s7, [sl, #-16]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b46:	ee37 6ac8 	vsub.f32	s12, s15, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b4a:	ee33 3a49 	vsub.f32	s6, s6, s18
      m3 = t2[3] * twR;
 8000b4e:	ee66 7aa3 	vmul.f32	s15, s13, s7
      *pEnd2-- = m0 - m1;
 8000b52:	ee23 8ae1 	vnmul.f32	s16, s7, s3
      *p2++ = m2 - m3;
 8000b56:	ee62 8a60 	vnmul.f32	s17, s4, s1
      m1 = t2[1] * twI;
 8000b5a:	ee20 9a02 	vmul.f32	s18, s0, s4
      *pEnd2-- = m2 + m3;
 8000b5e:	eee1 7a82 	vfma.f32	s15, s3, s4
      *pEnd2-- = m0 - m1;
 8000b62:	eea6 8a82 	vfma.f32	s16, s13, s4
      *p2++ = m0 + m1;
 8000b66:	eeb0 2a49 	vmov.f32	s4, s18
      *p2++ = m2 - m3;
 8000b6a:	eef0 6a68 	vmov.f32	s13, s17
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b6e:	ee75 5ae9 	vsub.f32	s11, s11, s19
      *p2++ = m0 + m1;
 8000b72:	eea0 2aa3 	vfma.f32	s4, s1, s7
      *p2++ = m2 - m3;
 8000b76:	eee0 6a23 	vfma.f32	s13, s0, s7
      *p2++ = m0 + m1;
 8000b7a:	ed00 2a04 	vstr	s4, [r0, #-16]
      *p2++ = m2 - m3;
 8000b7e:	ed40 6a03 	vstr	s13, [r0, #-12]
      *pEnd2-- = m0 - m1;
 8000b82:	ed81 8a04 	vstr	s16, [r1, #16]
      *pEnd2-- = m2 + m3;
 8000b86:	edc1 7a03 	vstr	s15, [r1, #12]
      twI = tw3[1];
 8000b8a:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
      twR = tw3[0];
 8000b8e:	ed59 3a08 	vldr	s7, [r9, #-32]	; 0xffffffe0
      *p3++ = m2 - m3;
 8000b92:	ee27 2ac1 	vnmul.f32	s4, s15, s2
      m1 = t3[1] * twI;
 8000b96:	ee64 1a27 	vmul.f32	s3, s8, s15
      m1 =  t3[2] * twI;
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
 8000b9a:	ee65 6aa7 	vmul.f32	s13, s11, s15

      *pEnd3-- = m0 - m1;
 8000b9e:	ee67 7ac3 	vnmul.f32	s15, s15, s6
      *p3++ = m2 - m3;
 8000ba2:	eef0 5a42 	vmov.f32	s11, s4
      *pEnd3-- = m3 - m2;
 8000ba6:	eee3 6a63 	vfms.f32	s13, s6, s7
      *pEnd3-- = m0 - m1;
 8000baa:	eee2 7aa3 	vfma.f32	s15, s5, s7
      *p3++ = m2 - m3;
 8000bae:	eee4 5a23 	vfma.f32	s11, s8, s7
      *p3++ = m0 + m1;
 8000bb2:	eee1 1a23 	vfma.f32	s3, s2, s7
 8000bb6:	ed4e 1a04 	vstr	s3, [lr, #-16]
      *p3++ = m2 - m3;
 8000bba:	ed4e 5a03 	vstr	s11, [lr, #-12]
      *pEnd3-- = m0 - m1;
 8000bbe:	edcc 7a04 	vstr	s15, [ip, #16]
      *pEnd3-- = m3 - m2;
 8000bc2:	edcc 6a03 	vstr	s13, [ip, #12]

      /* COL 4 */
      twR = tw4[0];
 8000bc6:	ed58 6a0c 	vldr	s13, [r8, #-48]	; 0xffffffd0
      twI = tw4[1];
 8000bca:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
 8000bce:	ee66 5a26 	vmul.f32	s11, s12, s13
      *p4++ = m2 - m3;
 8000bd2:	ee67 3ac7 	vnmul.f32	s7, s15, s14
      m1 = t4[1] * twI;
 8000bd6:	ee25 3a27 	vmul.f32	s6, s10, s15

      *pEnd4-- = m0 - m1;
 8000bda:	ee26 4ae4 	vnmul.f32	s8, s13, s9
      *p4++ = m2 - m3;
 8000bde:	eee5 3a26 	vfma.f32	s7, s10, s13
      *p4++ = m0 + m1;
 8000be2:	eea7 3a26 	vfma.f32	s6, s14, s13
      *pEnd4-- = m0 - m1;
 8000be6:	eef0 6a44 	vmov.f32	s13, s8
      *pEnd4-- = m2 + m3;
 8000bea:	eeb0 7a65 	vmov.f32	s14, s11
      *pEnd4-- = m0 - m1;
 8000bee:	eee6 6a27 	vfma.f32	s13, s12, s15
      *pEnd4-- = m2 + m3;
 8000bf2:	eea4 7aa7 	vfma.f32	s14, s9, s15
      *p4++ = m2 - m3;
 8000bf6:	ed42 3a03 	vstr	s7, [r2, #-12]
      *p4++ = m0 + m1;
 8000bfa:	ed02 3a04 	vstr	s6, [r2, #-16]
      *pEnd4-- = m0 - m1;
 8000bfe:	edc3 6a04 	vstr	s13, [r3, #16]
      *pEnd4-- = m2 + m3;
 8000c02:	ed83 7a03 	vstr	s14, [r3, #12]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000c06:	f47f af04 	bne.w	8000a12 <arm_cfft_radix8by4_f32+0x12e>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c0a:	9b08      	ldr	r3, [sp, #32]
 8000c0c:	9a04      	ldr	r2, [sp, #16]
 8000c0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c12:	9204      	str	r2, [sp, #16]
      twI = *tw2++;
 8000c14:	9a03      	ldr	r2, [sp, #12]
 8000c16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c1a:	9203      	str	r2, [sp, #12]
      *p2++ = m2 - m3;
 8000c1c:	9a06      	ldr	r2, [sp, #24]
 8000c1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c22:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
 8000c24:	9a01      	ldr	r2, [sp, #4]
 8000c26:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000c2a:	9201      	str	r2, [sp, #4]
      *p3++ = m2 - m3;
 8000c2c:	9a00      	ldr	r2, [sp, #0]
 8000c2e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c32:	9200      	str	r2, [sp, #0]
      *p4++ = m2 - m3;
 8000c34:	9a05      	ldr	r2, [sp, #20]
 8000c36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      tw4 += twMod4;
 8000c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      *p4++ = m2 - m3;
 8000c3e:	9205      	str	r2, [sp, #20]
      tw4 += twMod4;
 8000c40:	9a02      	ldr	r2, [sp, #8]
 8000c42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000c46:	9302      	str	r3, [sp, #8]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c48:	9b06      	ldr	r3, [sp, #24]
 8000c4a:	9e05      	ldr	r6, [sp, #20]
    p1ap3_0 = p1[0] + p3[0];
 8000c4c:	9f04      	ldr	r7, [sp, #16]
 8000c4e:	9900      	ldr	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c50:	edd3 3a00 	vldr	s7, [r3]
 8000c54:	ed96 3a00 	vldr	s6, [r6]
    p1ap3_0 = p1[0] + p3[0];
 8000c58:	ed91 7a00 	vldr	s14, [r1]
 8000c5c:	edd7 7a00 	vldr	s15, [r7]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c60:	ee73 6a83 	vadd.f32	s13, s7, s6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c64:	edd6 2a01 	vldr	s5, [r6, #4]
    p1ap3_0 = p1[0] + p3[0];
 8000c68:	ee77 5a87 	vadd.f32	s11, s15, s14
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c6c:	ed93 2a01 	vldr	s4, [r3, #4]
    p1ap3_1 = p1[1] + p3[1];
 8000c70:	ed91 5a01 	vldr	s10, [r1, #4]
    p1sp3_0 = p1[0] - p3[0];
 8000c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8000c78:	ed97 6a01 	vldr	s12, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c7c:	ee76 6aa5 	vadd.f32	s13, s13, s11

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c80:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    p1sp3_1 = p1[1] - p3[1];
 8000c84:	ee36 7a45 	vsub.f32	s14, s12, s10
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    p1ap3_1 = p1[1] + p3[1];
 8000c8a:	ee36 6a05 	vadd.f32	s12, s12, s10
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c90:	edc7 6a00 	vstr	s13, [r7]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c94:	ee37 4ae2 	vsub.f32	s8, s15, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c98:	edd6 1a01 	vldr	s3, [r6, #4]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c9c:	ee77 4a63 	vsub.f32	s9, s14, s7
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ca0:	edd3 6a01 	vldr	s13, [r3, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000ca4:	ee35 5ae3 	vsub.f32	s10, s11, s7
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ca8:	ee34 4a02 	vadd.f32	s8, s8, s4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cac:	ee76 6aa1 	vadd.f32	s13, s13, s3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cb0:	ee74 4a83 	vadd.f32	s9, s9, s6
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cb4:	ee76 5a42 	vsub.f32	s11, s12, s4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cb8:	ee76 6a86 	vadd.f32	s13, s13, s12
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cbc:	ee35 5a43 	vsub.f32	s10, s10, s6
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cc0:	ee37 7a43 	vsub.f32	s14, s14, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cc4:	edc7 6a01 	vstr	s13, [r7, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cc8:	ee75 5ae2 	vsub.f32	s11, s11, s5
    twI = tw2[1];
 8000ccc:	9f03      	ldr	r7, [sp, #12]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cce:	ee77 7ac2 	vsub.f32	s15, s15, s4
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cd2:	ee37 7a23 	vadd.f32	s14, s14, s7
    twI = tw2[1];
 8000cd6:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw2[0];
 8000cda:	ed97 3a00 	vldr	s6, [r7]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cde:	ee77 7aa2 	vadd.f32	s15, s15, s5
    m1 = t2[1] * twI;
 8000ce2:	ee24 6aa6 	vmul.f32	s12, s9, s13
    twI = tw3[1];
 8000ce6:	9f01      	ldr	r7, [sp, #4]
    *p2++ = m2 - m3;
 8000ce8:	ee66 6ac4 	vnmul.f32	s13, s13, s8
    *p2++ = m0 + m1;
 8000cec:	eea4 6a03 	vfma.f32	s12, s8, s6
    *p2++ = m2 - m3;
 8000cf0:	eee4 6a83 	vfma.f32	s13, s9, s6
    *p2++ = m0 + m1;
 8000cf4:	ed83 6a00 	vstr	s12, [r3]
    *p2++ = m2 - m3;
 8000cf8:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw3[1];
 8000cfc:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw3[0];
 8000d00:	edd7 4a00 	vldr	s9, [r7]
    m1 = t3[1] * twI;
 8000d04:	ee25 6aa6 	vmul.f32	s12, s11, s13
    *p3++ = m0 + m1;
 8000d08:	9b00      	ldr	r3, [sp, #0]
    *p3++ = m2 - m3;
 8000d0a:	ee66 6ac5 	vnmul.f32	s13, s13, s10
    *p3++ = m0 + m1;
 8000d0e:	eea5 6a24 	vfma.f32	s12, s10, s9
    *p3++ = m2 - m3;
 8000d12:	eee5 6aa4 	vfma.f32	s13, s11, s9
    *p3++ = m0 + m1;
 8000d16:	ed83 6a00 	vstr	s12, [r3]
    *p3++ = m2 - m3;
 8000d1a:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw4[1];
 8000d1e:	9b02      	ldr	r3, [sp, #8]
 8000d20:	edd3 6a01 	vldr	s13, [r3, #4]
    twR = tw4[0];
 8000d24:	edd3 5a00 	vldr	s11, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d28:	2304      	movs	r3, #4
    m1 = t4[1] * twI;
 8000d2a:	ee27 6a26 	vmul.f32	s12, s14, s13
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d2e:	9100      	str	r1, [sp, #0]
    *p4++ = m2 - m3;
 8000d30:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    *p4++ = m0 + m1;
 8000d34:	eea7 6aa5 	vfma.f32	s12, s15, s11
    *p4++ = m2 - m3;
 8000d38:	eee7 6a25 	vfma.f32	s13, s14, s11
    *p4++ = m0 + m1;
 8000d3c:	ed86 6a00 	vstr	s12, [r6]
    *p4++ = m2 - m3;
 8000d40:	edc6 6a01 	vstr	s13, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d44:	f000 f88e 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8000d48:	4628      	mov	r0, r5
 8000d4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	9900      	ldr	r1, [sp, #0]
 8000d50:	686a      	ldr	r2, [r5, #4]
 8000d52:	f000 f887 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8000d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d58:	686a      	ldr	r2, [r5, #4]
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	9900      	ldr	r1, [sp, #0]
 8000d5e:	f000 f881 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d62:	2304      	movs	r3, #4
 8000d64:	686a      	ldr	r2, [r5, #4]
 8000d66:	4620      	mov	r0, r4
 8000d68:	9900      	ldr	r1, [sp, #0]
}
 8000d6a:	b00f      	add	sp, #60	; 0x3c
 8000d6c:	ecbd 8b06 	vpop	{d8-d10}
 8000d70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d74:	f000 b876 	b.w	8000e64 <arm_radix8_butterfly_f32>

08000d78 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8000d78:	2a01      	cmp	r2, #1
{
 8000d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7e:	4606      	mov	r6, r0
 8000d80:	4617      	mov	r7, r2
 8000d82:	460c      	mov	r4, r1
 8000d84:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8000d86:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8000d88:	d059      	beq.n	8000e3e <arm_cfft_f32+0xc6>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 8000d8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000d8e:	d051      	beq.n	8000e34 <arm_cfft_f32+0xbc>
 8000d90:	d80f      	bhi.n	8000db2 <arm_cfft_f32+0x3a>
 8000d92:	2d40      	cmp	r5, #64	; 0x40
 8000d94:	d014      	beq.n	8000dc0 <arm_cfft_f32+0x48>
 8000d96:	d949      	bls.n	8000e2c <arm_cfft_f32+0xb4>
 8000d98:	2d80      	cmp	r5, #128	; 0x80
 8000d9a:	d103      	bne.n	8000da4 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f7ff fcd4 	bl	800074c <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8000da4:	f1b8 0f00 	cmp.w	r8, #0
 8000da8:	d113      	bne.n	8000dd2 <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
 8000daa:	2f01      	cmp	r7, #1
 8000dac:	d018      	beq.n	8000de0 <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000db2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000db6:	d03d      	beq.n	8000e34 <arm_cfft_f32+0xbc>
 8000db8:	d931      	bls.n	8000e1e <arm_cfft_f32+0xa6>
 8000dba:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8000dbe:	d1f1      	bne.n	8000da4 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	6872      	ldr	r2, [r6, #4]
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 f84c 	bl	8000e64 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
 8000dcc:	f1b8 0f00 	cmp.w	r8, #0
 8000dd0:	d0eb      	beq.n	8000daa <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8000dd2:	68b2      	ldr	r2, [r6, #8]
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	89b1      	ldrh	r1, [r6, #12]
 8000dd8:	f7ff fa82 	bl	80002e0 <arm_bitreversal_32>
  if (ifftFlag == 1U)
 8000ddc:	2f01      	cmp	r7, #1
 8000dde:	d1e6      	bne.n	8000dae <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
 8000de0:	ee07 5a90 	vmov	s15, r5
 8000de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d0dc      	beq.n	8000dae <arm_cfft_f32+0x36>
 8000df4:	f104 0108 	add.w	r1, r4, #8
 8000df8:	2300      	movs	r3, #0
      *pSrc++ *=   invL ;
 8000dfa:	ed11 7a02 	vldr	s14, [r1, #-8]
    for (l= 0; l < L; l++)
 8000dfe:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 8000e00:	ed51 7a01 	vldr	s15, [r1, #-4]
    for (l= 0; l < L; l++)
 8000e04:	3108      	adds	r1, #8
 8000e06:	429d      	cmp	r5, r3
      *pSrc++ *=   invL ;
 8000e08:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
 8000e0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
 8000e10:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
 8000e14:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
 8000e18:	d1ef      	bne.n	8000dfa <arm_cfft_f32+0x82>
}
 8000e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000e1e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000e22:	d0cd      	beq.n	8000dc0 <arm_cfft_f32+0x48>
 8000e24:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000e28:	d0b8      	beq.n	8000d9c <arm_cfft_f32+0x24>
 8000e2a:	e7bb      	b.n	8000da4 <arm_cfft_f32+0x2c>
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d0b5      	beq.n	8000d9c <arm_cfft_f32+0x24>
 8000e30:	2d20      	cmp	r5, #32
 8000e32:	d1b7      	bne.n	8000da4 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000e34:	4621      	mov	r1, r4
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff fd54 	bl	80008e4 <arm_cfft_radix8by4_f32>
    break;
 8000e3c:	e7b2      	b.n	8000da4 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
 8000e3e:	b175      	cbz	r5, 8000e5e <arm_cfft_f32+0xe6>
 8000e40:	310c      	adds	r1, #12
 8000e42:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
 8000e46:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
 8000e4a:	f10c 0c01 	add.w	ip, ip, #1
 8000e4e:	3108      	adds	r1, #8
      *pSrc = -*pSrc;
 8000e50:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 8000e54:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
 8000e56:	ed41 7a04 	vstr	s15, [r1, #-16]
    for (l = 0; l < L; l++)
 8000e5a:	d1f4      	bne.n	8000e46 <arm_cfft_f32+0xce>
 8000e5c:	e795      	b.n	8000d8a <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0a5      	beq.n	8000dae <arm_cfft_f32+0x36>
 8000e62:	e7b6      	b.n	8000dd2 <arm_cfft_f32+0x5a>

08000e64 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8000e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e68:	ed2d 8b10 	vpush	{d8-d15}
 8000e6c:	b091      	sub	sp, #68	; 0x44
 8000e6e:	468a      	mov	sl, r1
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8000e70:	468b      	mov	fp, r1
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8000e72:	eddf babd 	vldr	s23, [pc, #756]	; 8001168 <arm_radix8_butterfly_f32+0x304>
{
 8000e76:	900e      	str	r0, [sp, #56]	; 0x38
 8000e78:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	3304      	adds	r3, #4
 8000e80:	930f      	str	r3, [sp, #60]	; 0x3c
      n2 = n2 >> 3;
 8000e82:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8000e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
      i1 = 0;
 8000e8c:	f04f 0e00 	mov.w	lr, #0
 8000e90:	eb07 0187 	add.w	r1, r7, r7, lsl #2
      n2 = n2 >> 3;
 8000e94:	970b      	str	r7, [sp, #44]	; 0x2c
      i1 = 0;
 8000e96:	0178      	lsls	r0, r7, #5
 8000e98:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8000e9c:	9002      	str	r0, [sp, #8]
 8000e9e:	00c8      	lsls	r0, r1, #3
 8000ea0:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
 8000ea4:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8000ea8:	9003      	str	r0, [sp, #12]
 8000eaa:	00c8      	lsls	r0, r1, #3
 8000eac:	eb02 1447 	add.w	r4, r2, r7, lsl #5
 8000eb0:	f108 0104 	add.w	r1, r8, #4
 8000eb4:	9006      	str	r0, [sp, #24]
 8000eb6:	f109 0004 	add.w	r0, r9, #4
 8000eba:	9401      	str	r4, [sp, #4]
 8000ebc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000ec0:	4410      	add	r0, r2
 8000ec2:	4411      	add	r1, r2
 8000ec4:	9a01      	ldr	r2, [sp, #4]
 8000ec6:	eb04 1507 	add.w	r5, r4, r7, lsl #4
 8000eca:	eb02 0cc7 	add.w	ip, r2, r7, lsl #3
 8000ece:	0132      	lsls	r2, r6, #4
 8000ed0:	eba5 04c6 	sub.w	r4, r5, r6, lsl #3
 8000ed4:	9204      	str	r2, [sp, #16]
 8000ed6:	00f2      	lsls	r2, r6, #3
 8000ed8:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8000edc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000ede:	9205      	str	r2, [sp, #20]
 8000ee0:	9a01      	ldr	r2, [sp, #4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ee2:	ed11 7a01 	vldr	s14, [r1, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
 8000ee6:	44de      	add	lr, fp
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000ee8:	edd4 4a00 	vldr	s9, [r4]
 8000eec:	ed97 5a00 	vldr	s10, [r7]
      } while (i1 < fftLen);
 8000ef0:	45f2      	cmp	sl, lr
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ef2:	ed95 9a00 	vldr	s18, [r5]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000ef6:	ed92 6a00 	vldr	s12, [r2]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000efa:	ee74 8a85 	vadd.f32	s17, s9, s10
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000efe:	ed9c 4a00 	vldr	s8, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f02:	ee77 5a09 	vadd.f32	s11, s14, s18
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f06:	ed56 6a01 	vldr	s13, [r6, #-4]
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000f0a:	ee37 1a49 	vsub.f32	s2, s14, s18
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f0e:	ed50 7a01 	vldr	s15, [r0, #-4]
 8000f12:	ee39 9a47 	vsub.f32	s18, s18, s14
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f16:	ee76 1a86 	vadd.f32	s3, s13, s12
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f1a:	ee37 8a84 	vadd.f32	s16, s15, s8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000f1e:	ee76 6ac6 	vsub.f32	s13, s13, s12
         r1 = r1 + r3;
 8000f22:	ee31 7aa5 	vadd.f32	s14, s3, s11
         r2 = r2 + r4;
 8000f26:	ee38 6a28 	vadd.f32	s12, s16, s17
         t1 = r1 - r3;
 8000f2a:	ee71 1ae5 	vsub.f32	s3, s3, s11
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000f2e:	ee77 7ac4 	vsub.f32	s15, s15, s8
         pSrc[2 * i1] = r1 + r2;
 8000f32:	ee77 5a06 	vadd.f32	s11, s14, s12
         pSrc[2 * i5] = r1 - r2;
 8000f36:	ee37 7a46 	vsub.f32	s14, s14, s12
         r1 = (r6 - r8) * C81;
 8000f3a:	ee37 4ae4 	vsub.f32	s8, s15, s9
         pSrc[2 * i1] = r1 + r2;
 8000f3e:	ed46 5a01 	vstr	s11, [r6, #-4]
         r6 = (r6 + r8) * C81;
 8000f42:	ee77 7ac5 	vsub.f32	s15, s15, s10
         pSrc[2 * i5] = r1 - r2;
 8000f46:	ed82 7a00 	vstr	s14, [r2]
         t1 = r5 - r1;
 8000f4a:	eeb0 0a66 	vmov.f32	s0, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f4e:	ed9c aa01 	vldr	s20, [ip, #4]
         r1 = (r6 - r8) * C81;
 8000f52:	ee34 4a05 	vadd.f32	s8, s8, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f56:	ed90 2a00 	vldr	s4, [r0]
         r6 = (r6 + r8) * C81;
 8000f5a:	ee77 7aa4 	vadd.f32	s15, s15, s9
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f5e:	edd2 3a01 	vldr	s7, [r2, #4]
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000f62:	ee32 6a4a 	vsub.f32	s12, s4, s20
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f66:	edd4 2a01 	vldr	s5, [r4, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f6a:	edd6 5a00 	vldr	s11, [r6]
         t1 = r5 - r1;
 8000f6e:	eea4 0a6b 	vfms.f32	s0, s8, s23
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f72:	edd7 9a01 	vldr	s19, [r7, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f76:	ee32 2a0a 	vadd.f32	s4, s4, s20
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000f7a:	ee75 0ae3 	vsub.f32	s1, s11, s7
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f7e:	ed91 5a00 	vldr	s10, [r1]
         r2 = (s6 - s8) * C81;
 8000f82:	ee36 3a62 	vsub.f32	s6, s12, s5
         s6 = (s6 + s8) * C81;
 8000f86:	ee36 7a69 	vsub.f32	s14, s12, s19
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f8a:	ed95 6a01 	vldr	s12, [r5, #4]
         t2 = s5 - r2;
 8000f8e:	eef0 4a60 	vmov.f32	s9, s1
         r2 = (s6 - s8) * C81;
 8000f92:	ee33 3a29 	vadd.f32	s6, s6, s19
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f96:	ee75 5aa3 	vadd.f32	s11, s11, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000f9a:	ee75 3a46 	vsub.f32	s7, s10, s12
         t2 = s5 - r2;
 8000f9e:	eee3 4a6b 	vfms.f32	s9, s6, s23
         s6 = (s6 + s8) * C81;
 8000fa2:	ee37 7a22 	vadd.f32	s14, s14, s5
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000fa6:	ee75 aa06 	vadd.f32	s21, s10, s12
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000faa:	ee72 2aa9 	vadd.f32	s5, s5, s19
         t2 = r1 - s3;
 8000fae:	ee36 5a45 	vsub.f32	s10, s12, s10
         s7 = s7 + s6;
 8000fb2:	eeb0 aa63 	vmov.f32	s20, s7
 8000fb6:	eef0 9a40 	vmov.f32	s19, s0
         t2 = r1 - s3;
 8000fba:	ee35 6aea 	vsub.f32	s12, s11, s21
         r5 = r5 + r1;
 8000fbe:	eee4 6a2b 	vfma.f32	s13, s8, s23
         s7 = s7 + s6;
 8000fc2:	eea7 aa2b 	vfma.f32	s20, s14, s23
 8000fc6:	eee7 9a6b 	vfms.f32	s19, s14, s23
 8000fca:	eea7 5a2b 	vfma.f32	s10, s14, s23
         r7 = r7 + r6;
 8000fce:	eeb0 4a41 	vmov.f32	s8, s2
         r1 = r1 + s3;
 8000fd2:	ee35 7aaa 	vadd.f32	s14, s11, s21
 8000fd6:	eef0 5a64 	vmov.f32	s11, s9
         r7 = r7 + r6;
 8000fda:	eea7 4aab 	vfma.f32	s8, s15, s23
         s5 = s5 + r2;
 8000fde:	eee3 0a2b 	vfma.f32	s1, s6, s23
 8000fe2:	eea7 9aab 	vfma.f32	s18, s15, s23
 8000fe6:	eee7 5aeb 	vfms.f32	s11, s15, s23
         r2 = r2 + r4;
 8000fea:	ee72 aa22 	vadd.f32	s21, s4, s5
         pSrc[2 * i3]     = t1 + s3;
 8000fee:	ee31 bae2 	vsub.f32	s22, s3, s5
         pSrc[2 * i7]     = t1 - s3;
 8000ff2:	ee71 7ac2 	vsub.f32	s15, s3, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8000ff6:	ee36 3a48 	vsub.f32	s6, s12, s16
         pSrc[2 * i7 + 1] = t2 + r3;
 8000ffa:	ee36 6a68 	vsub.f32	s12, s12, s17
         pSrc[2 * i1 + 1] = r1 + r2;
 8000ffe:	ee77 1a2a 	vadd.f32	s3, s14, s21
         pSrc[2 * i7]     = t1 - s3;
 8001002:	ee77 7aa2 	vadd.f32	s15, s15, s5
         pSrc[2 * i7 + 1] = t2 + r3;
 8001006:	ee36 6a08 	vadd.f32	s12, s12, s16
         pSrc[2 * i2 + 1] = s5 - r7;
 800100a:	ee70 2ac4 	vsub.f32	s5, s1, s8
         pSrc[2 * i1 + 1] = r1 + r2;
 800100e:	edc6 1a00 	vstr	s3, [r6]
         pSrc[2 * i2]     = r5 + s7;
 8001012:	ee36 8a8a 	vadd.f32	s16, s13, s20
      } while (i1 < fftLen);
 8001016:	441e      	add	r6, r3
         pSrc[2 * i5 + 1] = r1 - r2;
 8001018:	ee37 7a6a 	vsub.f32	s14, s14, s21
         pSrc[2 * i3]     = t1 + s3;
 800101c:	ee3b 2a02 	vadd.f32	s4, s22, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8001020:	ee33 3a28 	vadd.f32	s6, s6, s17
         pSrc[2 * i8]     = r5 - s7;
 8001024:	ee76 6aca 	vsub.f32	s13, s13, s20
         pSrc[2 * i5 + 1] = r1 - r2;
 8001028:	ed82 7a01 	vstr	s14, [r2, #4]
         pSrc[2 * i6]     = t1 + s8;
 800102c:	ee73 3aa9 	vadd.f32	s7, s7, s19
         pSrc[2 * i3]     = t1 + s3;
 8001030:	ed01 2a01 	vstr	s4, [r1, #-4]
         pSrc[2 * i4]     = t1 - s8;
 8001034:	ee30 5a05 	vadd.f32	s10, s0, s10
         pSrc[2 * i7]     = t1 - s3;
 8001038:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 800103c:	ee34 4a20 	vadd.f32	s8, s8, s1
         pSrc[2 * i3 + 1] = t2 - r3;
 8001040:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001044:	ee74 4a89 	vadd.f32	s9, s9, s18
         pSrc[2 * i7 + 1] = t2 + r3;
 8001048:	ed85 6a01 	vstr	s12, [r5, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 800104c:	ee71 5a25 	vadd.f32	s11, s2, s11
         pSrc[2 * i2]     = r5 + s7;
 8001050:	ed00 8a01 	vstr	s16, [r0, #-4]
      } while (i1 < fftLen);
 8001054:	441a      	add	r2, r3
         pSrc[2 * i8]     = r5 - s7;
 8001056:	edc7 6a00 	vstr	s13, [r7]
      } while (i1 < fftLen);
 800105a:	4419      	add	r1, r3
         pSrc[2 * i6]     = t1 + s8;
 800105c:	edcc 3a00 	vstr	s7, [ip]
      } while (i1 < fftLen);
 8001060:	441d      	add	r5, r3
         pSrc[2 * i4]     = t1 - s8;
 8001062:	ed84 5a00 	vstr	s10, [r4]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001066:	edc0 2a00 	vstr	s5, [r0]
      } while (i1 < fftLen);
 800106a:	4418      	add	r0, r3
         pSrc[2 * i8 + 1] = s5 + r7;
 800106c:	ed87 4a01 	vstr	s8, [r7, #4]
      } while (i1 < fftLen);
 8001070:	441f      	add	r7, r3
         pSrc[2 * i6 + 1] = t2 - r8;
 8001072:	edcc 4a01 	vstr	s9, [ip, #4]
      } while (i1 < fftLen);
 8001076:	449c      	add	ip, r3
         pSrc[2 * i4 + 1] = t2 + r8;
 8001078:	edc4 5a01 	vstr	s11, [r4, #4]
      } while (i1 < fftLen);
 800107c:	441c      	add	r4, r3
 800107e:	f63f af30 	bhi.w	8000ee2 <arm_radix8_butterfly_f32+0x7e>

      if (n2 < 8)
 8001082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001084:	2a07      	cmp	r2, #7
 8001086:	f240 819f 	bls.w	80013c8 <arm_radix8_butterfly_f32+0x564>
 800108a:	9d02      	ldr	r5, [sp, #8]
 800108c:	f109 0908 	add.w	r9, r9, #8
 8001090:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001092:	f108 080c 	add.w	r8, r8, #12
 8001096:	3508      	adds	r5, #8
 8001098:	9a06      	ldr	r2, [sp, #24]
 800109a:	9905      	ldr	r1, [sp, #20]
 800109c:	1975      	adds	r5, r6, r5
 800109e:	3208      	adds	r2, #8
 80010a0:	9c03      	ldr	r4, [sp, #12]
 80010a2:	3108      	adds	r1, #8
 80010a4:	950a      	str	r5, [sp, #40]	; 0x28
 80010a6:	4635      	mov	r5, r6
 80010a8:	9804      	ldr	r0, [sp, #16]
 80010aa:	3408      	adds	r4, #8
 80010ac:	18aa      	adds	r2, r5, r2
 80010ae:	1869      	adds	r1, r5, r1
 80010b0:	3008      	adds	r0, #8
 80010b2:	444e      	add	r6, r9
 80010b4:	9205      	str	r2, [sp, #20]
 80010b6:	462a      	mov	r2, r5
 80010b8:	192c      	adds	r4, r5, r4
 80010ba:	1828      	adds	r0, r5, r0
 80010bc:	320c      	adds	r2, #12
 80010be:	9106      	str	r1, [sp, #24]
         break;

      ia1 = 0;
      j = 1;
 80010c0:	f04f 0901 	mov.w	r9, #1
 80010c4:	eb05 0108 	add.w	r1, r5, r8
      ia1 = 0;
 80010c8:	f04f 0800 	mov.w	r8, #0
 80010cc:	9609      	str	r6, [sp, #36]	; 0x24
 80010ce:	9408      	str	r4, [sp, #32]
 80010d0:	9007      	str	r0, [sp, #28]
 80010d2:	9103      	str	r1, [sp, #12]
 80010d4:	9204      	str	r2, [sp, #16]

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80010d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 80010d8:	46ce      	mov	lr, r9
         si8 = pCoef[2 * ia7 + 1];
 80010da:	9e05      	ldr	r6, [sp, #20]
         id  = ia1 + twidCoefModifier;
 80010dc:	4490      	add	r8, r2
         co2 = pCoef[2 * ia1];
 80010de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80010e0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010e4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 80010e8:	ed92 fa00 	vldr	s30, [r2]
         co3 = pCoef[2 * ia2];
 80010ec:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f0:	edd2 ea00 	vldr	s29, [r2]
         co4 = pCoef[2 * ia3];
 80010f4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f8:	ed92 ea00 	vldr	s28, [r2]
         co5 = pCoef[2 * ia4];
 80010fc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001100:	edd2 da00 	vldr	s27, [r2]
         co6 = pCoef[2 * ia5];
 8001104:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001108:	ed92 da00 	vldr	s26, [r2]
         co7 = pCoef[2 * ia6];
 800110c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001110:	edd2 ca00 	vldr	s25, [r2]
         co8 = pCoef[2 * ia7];
 8001114:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001118:	ed92 ca00 	vldr	s24, [r2]
         si8 = pCoef[2 * ia7 + 1];
 800111c:	ed92 ba01 	vldr	s22, [r2, #4]
 8001120:	eba2 1201 	sub.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
 8001124:	edd2 aa01 	vldr	s21, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
 8001128:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800112c:	ed92 aa01 	vldr	s20, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
 8001130:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001134:	edd2 9a01 	vldr	s19, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
 8001138:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800113c:	ed92 9a01 	vldr	s18, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
 8001140:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001144:	edd2 7a01 	vldr	s15, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001148:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
         si6 = pCoef[2 * ia5 + 1];
 800114c:	edcd 7a01 	vstr	s15, [sp, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001150:	edd2 7a01 	vldr	s15, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
 8001154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         si7 = pCoef[2 * ia6 + 1];
 8001156:	edcd 7a02 	vstr	s15, [sp, #8]
         si8 = pCoef[2 * ia7 + 1];
 800115a:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 800115e:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8001162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001166:	e001      	b.n	800116c <arm_radix8_butterfly_f32+0x308>
 8001168:	3f3504f3 	.word	0x3f3504f3
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800116c:	edd5 3a00 	vldr	s7, [r5]
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
 8001170:	44de      	add	lr, fp
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001172:	ed1c 7a01 	vldr	s14, [ip, #-4]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001176:	edd6 fa00 	vldr	s31, [r6]
         } while (i1 < fftLen);
 800117a:	45f2      	cmp	sl, lr
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800117c:	edd4 6a00 	vldr	s13, [r4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001180:	edd2 4a00 	vldr	s9, [r2]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001184:	ee33 0aaf 	vadd.f32	s0, s7, s31
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001188:	ed90 4a00 	vldr	s8, [r0]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800118c:	ee37 5a26 	vadd.f32	s10, s14, s13
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001190:	ed57 5a01 	vldr	s11, [r7, #-4]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001194:	ee77 8a66 	vsub.f32	s17, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001198:	edd1 7a00 	vldr	s15, [r1]
 800119c:	ee76 6ac7 	vsub.f32	s13, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011a0:	ee35 6aa4 	vadd.f32	s12, s11, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011a4:	ed97 1a00 	vldr	s2, [r7]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011a8:	ee77 0a84 	vadd.f32	s1, s15, s8
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80011ac:	ee77 7ac4 	vsub.f32	s15, s15, s8
            r1 = r1 + r3;
 80011b0:	ee36 2a05 	vadd.f32	s4, s12, s10
            r2 = r2 + r4;
 80011b4:	ee30 7a80 	vadd.f32	s14, s1, s0
            t1 = r1 - r3;
 80011b8:	ee36 6a45 	vsub.f32	s12, s12, s10
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80011bc:	ee75 5ae4 	vsub.f32	s11, s11, s9
            pSrc[2 * i1] = r1 + r2;
 80011c0:	ee32 5a07 	vadd.f32	s10, s4, s14
            r2 = r1 - r2;
 80011c4:	ee32 2a47 	vsub.f32	s4, s4, s14
            pSrc[2 * i1] = r1 + r2;
 80011c8:	ed07 5a01 	vstr	s10, [r7, #-4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011cc:	edd2 4a01 	vldr	s9, [r2, #4]
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011d0:	ed90 7a01 	vldr	s14, [r0, #4]
 80011d4:	ed91 3a01 	vldr	s6, [r1, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80011d8:	ee71 2a64 	vsub.f32	s5, s2, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011dc:	ee31 1a24 	vadd.f32	s2, s2, s9
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011e0:	ed95 4a01 	vldr	s8, [r5, #4]
            r1 = (r6 - r8) * C81;
 80011e4:	ee77 4ae3 	vsub.f32	s9, s15, s7
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80011e8:	ed9c 8a00 	vldr	s16, [ip]
            r6 = (r6 + r8) * C81;
 80011ec:	ee77 7aef 	vsub.f32	s15, s15, s31
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80011f0:	ee33 5a47 	vsub.f32	s10, s6, s14
            r1 = (r6 - r8) * C81;
 80011f4:	ee74 4aaf 	vadd.f32	s9, s9, s31
            r6 = (r6 + r8) * C81;
 80011f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011fc:	edd6 3a01 	vldr	s7, [r6, #4]
            s1 = (s6 - s8) * C81;
 8001200:	ee75 fa44 	vsub.f32	s31, s10, s8
            s6 = (s6 + s8) * C81;
 8001204:	ee35 5a63 	vsub.f32	s10, s10, s7
 8001208:	eee7 6aab 	vfma.f32	s13, s15, s23
            s1 = (s6 - s8) * C81;
 800120c:	ee7f faa3 	vadd.f32	s31, s31, s7
            s6 = (s6 + s8) * C81;
 8001210:	ee35 5a04 	vadd.f32	s10, s10, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001214:	ee74 3a23 	vadd.f32	s7, s8, s7
            t1 = r5 - r1;
 8001218:	eeb0 4a65 	vmov.f32	s8, s11
            r5 = r5 + r1;
 800121c:	eee4 5aab 	vfma.f32	s11, s9, s23
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001220:	ee33 3a07 	vadd.f32	s6, s6, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001224:	ed94 7a01 	vldr	s14, [r4, #4]
            t1 = r5 - r1;
 8001228:	eea4 4aeb 	vfms.f32	s8, s9, s23
            t2 = s5 - s1;
 800122c:	eef0 4a62 	vmov.f32	s9, s5
            s5 = s5 + s1;
 8001230:	eeef 2aab 	vfma.f32	s5, s31, s23
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001234:	ee78 1a07 	vadd.f32	s3, s16, s14
            t2 = s5 - s1;
 8001238:	eeef 4aeb 	vfms.f32	s9, s31, s23
            r7 = r7 + r6;
 800123c:	eef0 fa68 	vmov.f32	s31, s17
 8001240:	eee7 faab 	vfma.f32	s31, s15, s23
            s6 = t2 - r8;
 8001244:	ee74 6aa6 	vadd.f32	s13, s9, s13
 8001248:	eee7 4aeb 	vfms.f32	s9, s15, s23
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800124c:	ee78 7a47 	vsub.f32	s15, s16, s14
            t2 = s1 - s3;
 8001250:	ee37 7a48 	vsub.f32	s14, s14, s16
            s7 = s7 + s6;
 8001254:	eeb0 8a67 	vmov.f32	s16, s15
 8001258:	eea5 7a2b 	vfma.f32	s14, s10, s23
            t2 = t2 + r8;
 800125c:	ee78 4aa4 	vadd.f32	s9, s17, s9
            s7 = s7 + s6;
 8001260:	eea5 8a2b 	vfma.f32	s16, s10, s23
            t1 = t1 - s8;
 8001264:	ee37 7a04 	vadd.f32	s14, s14, s8
 8001268:	eea5 4a6b 	vfms.f32	s8, s10, s23
            s2 = s2 + s4;
 800126c:	ee33 5a23 	vadd.f32	s10, s6, s7
            r6 = t1 + s8;
 8001270:	ee34 4a27 	vadd.f32	s8, s8, s15
            t2 = s1 - s3;
 8001274:	ee71 7a61 	vsub.f32	s15, s2, s3
            s1 = s1 + s3;
 8001278:	ee71 1a21 	vadd.f32	s3, s2, s3
            r1 = t1 + s3;
 800127c:	ee36 1a63 	vsub.f32	s2, s12, s7
 8001280:	ee36 6a43 	vsub.f32	s12, s12, s6
 8001284:	ee31 1a03 	vadd.f32	s2, s2, s6
            t1 = t1 - s3;
 8001288:	ee33 6a86 	vadd.f32	s12, s7, s12
            s1 = t2 - r3;
 800128c:	ee37 3ae0 	vsub.f32	s6, s15, s1
            pSrc[2 * i1 + 1] = s1 + s2;
 8001290:	ee71 3a85 	vadd.f32	s7, s3, s10
 8001294:	ee77 7ac0 	vsub.f32	s15, s15, s0
            s2 = s1 - s2;
 8001298:	ee31 5ac5 	vsub.f32	s10, s3, s10
            pSrc[2 * i1 + 1] = s1 + s2;
 800129c:	edc7 3a00 	vstr	s7, [r7]
            s1 = t2 - r3;
 80012a0:	ee73 3a00 	vadd.f32	s7, s6, s0
            t2 = t2 + r3;
 80012a4:	ee70 7aa7 	vadd.f32	s15, s1, s15
         } while (i1 < fftLen);
 80012a8:	441f      	add	r7, r3
            pSrc[2 * i5 + 1] = p3 - p4;
 80012aa:	ee62 0a49 	vnmul.f32	s1, s4, s18
            p2 = si3 * s1;
 80012ae:	ee6a 1a23 	vmul.f32	s3, s20, s7
            pSrc[2 * i3 + 1] = p3 - p4;
 80012b2:	ee21 3a4a 	vnmul.f32	s6, s2, s20
            pSrc[2 * i5 + 1] = p3 - p4;
 80012b6:	eeed 0a85 	vfma.f32	s1, s27, s10
            pSrc[2 * i3]     = p1 + p2;
 80012ba:	eeee 1a81 	vfma.f32	s3, s29, s2
            p2 = si7 * t2;
 80012be:	ed9d 1a02 	vldr	s2, [sp, #8]
            p2 = si5 * s2;
 80012c2:	ee29 0a05 	vmul.f32	s0, s18, s10
            r1 = r5 + s7;
 80012c6:	ee35 5a88 	vadd.f32	s10, s11, s16
            r5 = r5 - s7;
 80012ca:	ee35 8ac8 	vsub.f32	s16, s11, s16
            s1 = s5 - r7;
 80012ce:	ee72 5aef 	vsub.f32	s11, s5, s31
            s5 = s5 + r7;
 80012d2:	ee7f faa2 	vadd.f32	s31, s31, s5
            pSrc[2 * i5 + 1] = p3 - p4;
 80012d6:	edc2 0a01 	vstr	s1, [r2, #4]
            pSrc[2 * i7 + 1] = p3 - p4;
 80012da:	ee66 2a41 	vnmul.f32	s5, s12, s2
            pSrc[2 * i3 + 1] = p3 - p4;
 80012de:	eeae 3aa3 	vfma.f32	s6, s29, s7
            p2 = si7 * t2;
 80012e2:	ee61 3a27 	vmul.f32	s7, s2, s15
            pSrc[2 * i7 + 1] = p3 - p4;
 80012e6:	eeec 2aa7 	vfma.f32	s5, s25, s15
            pSrc[2 * i2 + 1] = p3 - p4;
 80012ea:	ee65 7a6a 	vnmul.f32	s15, s10, s21
            pSrc[2 * i5]     = p1 + p2;
 80012ee:	eead 0a82 	vfma.f32	s0, s27, s4
            p2 = si2 * s1;
 80012f2:	ee6a 0aa5 	vmul.f32	s1, s21, s11
            pSrc[2 * i2 + 1] = p3 - p4;
 80012f6:	eeef 7a25 	vfma.f32	s15, s30, s11
            pSrc[2 * i7]     = p1 + p2;
 80012fa:	eeec 3a86 	vfma.f32	s7, s25, s12
            pSrc[2 * i2]     = p1 + p2;
 80012fe:	eeef 0a05 	vfma.f32	s1, s30, s10
            p2 = si8 * s5;
 8001302:	ee2b 1a2f 	vmul.f32	s2, s22, s31
            pSrc[2 * i5]     = p1 + p2;
 8001306:	ed82 0a00 	vstr	s0, [r2]
            pSrc[2 * i8 + 1] = p3 - p4;
 800130a:	ee28 2a4b 	vnmul.f32	s4, s16, s22
            p2 = si6 * s6;
 800130e:	ed9d 0a01 	vldr	s0, [sp, #4]
            p2 = si4 * t2;
 8001312:	ee69 5aa4 	vmul.f32	s11, s19, s9
            pSrc[2 * i3]     = p1 + p2;
 8001316:	ed4c 1a01 	vstr	s3, [ip, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 800131a:	eeb0 5a67 	vmov.f32	s10, s15
            p2 = si6 * s6;
 800131e:	ee20 6a26 	vmul.f32	s12, s0, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 8001322:	ed8c 3a00 	vstr	s6, [ip]
            pSrc[2 * i6 + 1] = p3 - p4;
 8001326:	ee64 1a40 	vnmul.f32	s3, s8, s0
            pSrc[2 * i7]     = p1 + p2;
 800132a:	edc4 3a00 	vstr	s7, [r4]
            pSrc[2 * i4 + 1] = p3 - p4;
 800132e:	ee67 7a69 	vnmul.f32	s15, s14, s19
            pSrc[2 * i7 + 1] = p3 - p4;
 8001332:	edc4 2a01 	vstr	s5, [r4, #4]
            pSrc[2 * i8]     = p1 + p2;
 8001336:	eeac 1a08 	vfma.f32	s2, s24, s16
            pSrc[2 * i2]     = p1 + p2;
 800133a:	edc1 0a00 	vstr	s1, [r1]
            pSrc[2 * i8 + 1] = p3 - p4;
 800133e:	eeac 2a2f 	vfma.f32	s4, s24, s31
            pSrc[2 * i2 + 1] = p3 - p4;
 8001342:	ed81 5a01 	vstr	s10, [r1, #4]
            pSrc[2 * i6]     = p1 + p2;
 8001346:	eead 6a04 	vfma.f32	s12, s26, s8
         } while (i1 < fftLen);
 800134a:	441a      	add	r2, r3
            pSrc[2 * i6 + 1] = p3 - p4;
 800134c:	eeed 1a26 	vfma.f32	s3, s26, s13
         } while (i1 < fftLen);
 8001350:	449c      	add	ip, r3
            pSrc[2 * i4]     = p1 + p2;
 8001352:	eeee 5a07 	vfma.f32	s11, s28, s14
         } while (i1 < fftLen);
 8001356:	441c      	add	r4, r3
            pSrc[2 * i4 + 1] = p3 - p4;
 8001358:	eeee 7a24 	vfma.f32	s15, s28, s9
         } while (i1 < fftLen);
 800135c:	4419      	add	r1, r3
            pSrc[2 * i8]     = p1 + p2;
 800135e:	ed86 1a00 	vstr	s2, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
 8001362:	ed86 2a01 	vstr	s4, [r6, #4]
         } while (i1 < fftLen);
 8001366:	441e      	add	r6, r3
            pSrc[2 * i6]     = p1 + p2;
 8001368:	ed80 6a00 	vstr	s12, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
 800136c:	edc0 1a01 	vstr	s3, [r0, #4]
         } while (i1 < fftLen);
 8001370:	4418      	add	r0, r3
            pSrc[2 * i4]     = p1 + p2;
 8001372:	edc5 5a00 	vstr	s11, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
 8001376:	edc5 7a01 	vstr	s15, [r5, #4]
         } while (i1 < fftLen);
 800137a:	441d      	add	r5, r3
 800137c:	f63f aef6 	bhi.w	800116c <arm_radix8_butterfly_f32+0x308>

         j++;
      } while (j < n2);
 8001380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         j++;
 8001382:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 8001386:	3208      	adds	r2, #8
 8001388:	920a      	str	r2, [sp, #40]	; 0x28
 800138a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800138c:	3208      	adds	r2, #8
 800138e:	9209      	str	r2, [sp, #36]	; 0x24
 8001390:	9a08      	ldr	r2, [sp, #32]
 8001392:	3208      	adds	r2, #8
 8001394:	9208      	str	r2, [sp, #32]
 8001396:	9a07      	ldr	r2, [sp, #28]
 8001398:	3208      	adds	r2, #8
 800139a:	9207      	str	r2, [sp, #28]
 800139c:	9a06      	ldr	r2, [sp, #24]
 800139e:	3208      	adds	r2, #8
 80013a0:	9206      	str	r2, [sp, #24]
 80013a2:	9a05      	ldr	r2, [sp, #20]
 80013a4:	3208      	adds	r2, #8
 80013a6:	9205      	str	r2, [sp, #20]
 80013a8:	9a04      	ldr	r2, [sp, #16]
 80013aa:	3208      	adds	r2, #8
 80013ac:	9204      	str	r2, [sp, #16]
 80013ae:	9a03      	ldr	r2, [sp, #12]
 80013b0:	3208      	adds	r2, #8
 80013b2:	9203      	str	r2, [sp, #12]
 80013b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013b6:	454a      	cmp	r2, r9
 80013b8:	f47f ae8d 	bne.w	80010d6 <arm_radix8_butterfly_f32+0x272>

      twidCoefModifier <<= 3;
 80013bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013be:	4693      	mov	fp, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	930c      	str	r3, [sp, #48]	; 0x30
   } while (n2 > 7);
 80013c6:	e55c      	b.n	8000e82 <arm_radix8_butterfly_f32+0x1e>
}
 80013c8:	b011      	add	sp, #68	; 0x44
 80013ca:	ecbd 8b10 	vpop	{d8-d15}
 80013ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d2:	bf00      	nop

080013d4 <arm_cmplx_mult_cmplx_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80013d4:	b1eb      	cbz	r3, 8001412 <arm_cmplx_mult_cmplx_f32+0x3e>
 80013d6:	3008      	adds	r0, #8
 80013d8:	3108      	adds	r1, #8
 80013da:	3208      	adds	r2, #8
  {
    /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */

    a = *pSrcA++;
    b = *pSrcA++;
 80013dc:	ed50 7a01 	vldr	s15, [r0, #-4]
  while (blkCnt > 0U)
 80013e0:	3208      	adds	r2, #8
    c = *pSrcB++;
 80013e2:	ed51 6a02 	vldr	s13, [r1, #-8]
  while (blkCnt > 0U)
 80013e6:	3b01      	subs	r3, #1
    d = *pSrcB++;
 80013e8:	ed51 5a01 	vldr	s11, [r1, #-4]
  while (blkCnt > 0U)
 80013ec:	f100 0008 	add.w	r0, r0, #8

    /* store result in destination buffer. */
    *pDst++ = (a * c) - (b * d);
    *pDst++ = (a * d) + (b * c);
 80013f0:	ee27 7aa6 	vmul.f32	s14, s15, s13
    a = *pSrcA++;
 80013f4:	ed10 6a04 	vldr	s12, [r0, #-16]
    *pDst++ = (a * c) - (b * d);
 80013f8:	ee65 7ae7 	vnmul.f32	s15, s11, s15
  while (blkCnt > 0U)
 80013fc:	f101 0108 	add.w	r1, r1, #8
    *pDst++ = (a * d) + (b * c);
 8001400:	eea6 7a25 	vfma.f32	s14, s12, s11
    *pDst++ = (a * c) - (b * d);
 8001404:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pDst++ = (a * d) + (b * c);
 8001408:	ed02 7a03 	vstr	s14, [r2, #-12]
    *pDst++ = (a * c) - (b * d);
 800140c:	ed42 7a04 	vstr	s15, [r2, #-16]
  while (blkCnt > 0U)
 8001410:	d1e4      	bne.n	80013dc <arm_cmplx_mult_cmplx_f32+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8001412:	4770      	bx	lr

08001414 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001418:	8844      	ldrh	r4, [r0, #2]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 800141a:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800141e:	f890 8000 	ldrb.w	r8, [r0]
        float32_t *pState = S->pState;                 /* State pointer */
 8001422:	6887      	ldr	r7, [r0, #8]
  pStateCur = S->pState + (numTaps - 1U);
 8001424:	44a6      	add	lr, r4
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001426:	4598      	cmp	r8, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001428:	f8d0 9004 	ldr.w	r9, [r0, #4]
  pStateCur = S->pState + (numTaps - 1U);
 800142c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001430:	fbb3 faf8 	udiv	sl, r3, r8
  while (blkCnt > 0U)
 8001434:	d834      	bhi.n	80014a0 <arm_fir_decimate_f32+0x8c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001436:	ea4f 0c88 	mov.w	ip, r8, lsl #2
  blkCnt = outBlockSize;
 800143a:	4655      	mov	r5, sl
        float32_t *pState = S->pState;                 /* State pointer */
 800143c:	463e      	mov	r6, r7
 800143e:	46f3      	mov	fp, lr
 8001440:	4643      	mov	r3, r8
 8001442:	4608      	mov	r0, r1
      *pStateCur++ = *pSrc++;
 8001444:	ecf0 7a01 	vldmia	r0!, {s15}
    } while (--i);
 8001448:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 800144a:	eceb 7a01 	vstmia	fp!, {s15}
    } while (--i);
 800144e:	d1f9      	bne.n	8001444 <arm_fir_decimate_f32+0x30>
      *pStateCur++ = *pSrc++;
 8001450:	4461      	add	r1, ip
 8001452:	44e6      	add	lr, ip
    while (tapCnt > 0U)
 8001454:	b1e4      	cbz	r4, 8001490 <arm_fir_decimate_f32+0x7c>
 8001456:	4623      	mov	r3, r4
    acc0 = 0.0f;
 8001458:	eddf 7a12 	vldr	s15, [pc, #72]	; 80014a4 <arm_fir_decimate_f32+0x90>
    pb = pCoeffs;
 800145c:	46cb      	mov	fp, r9
    while (tapCnt > 0U)
 800145e:	4630      	mov	r0, r6
      acc0 += x0 * c0;
 8001460:	ecfb 6a01 	vldmia	fp!, {s13}
    while (tapCnt > 0U)
 8001464:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8001466:	ecb0 7a01 	vldmia	r0!, {s14}
 800146a:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 800146e:	d1f7      	bne.n	8001460 <arm_fir_decimate_f32+0x4c>
  while (blkCnt > 0U)
 8001470:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001472:	4466      	add	r6, ip

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8001474:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001478:	d1e1      	bne.n	800143e <arm_fir_decimate_f32+0x2a>
    pState = pState + S->M;
 800147a:	fb0a 7c0c 	mla	ip, sl, ip, r7
 800147e:	e003      	b.n	8001488 <arm_fir_decimate_f32+0x74>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8001480:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001484:	f847 3b04 	str.w	r3, [r7], #4
  while (tapCnt > 0U)
 8001488:	3c01      	subs	r4, #1
 800148a:	d1f9      	bne.n	8001480 <arm_fir_decimate_f32+0x6c>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc0 = 0.0f;
 8001490:	eddf 7a04 	vldr	s15, [pc, #16]	; 80014a4 <arm_fir_decimate_f32+0x90>
  while (blkCnt > 0U)
 8001494:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001496:	4466      	add	r6, ip
    *pDst++ = acc0;
 8001498:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 800149c:	d1cf      	bne.n	800143e <arm_fir_decimate_f32+0x2a>
 800149e:	e7ec      	b.n	800147a <arm_fir_decimate_f32+0x66>
        float32_t *pState = S->pState;                 /* State pointer */
 80014a0:	46bc      	mov	ip, r7
 80014a2:	e7f1      	b.n	8001488 <arm_fir_decimate_f32+0x74>
 80014a4:	00000000 	.word	0x00000000

080014a8 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	4616      	mov	r6, r2
 80014ac:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 80014b0:	fbb2 f4f6 	udiv	r4, r2, r6
 80014b4:	fb06 2414 	mls	r4, r6, r4, r2
 80014b8:	b96c      	cbnz	r4, 80014d6 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80014ba:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014bc:	1e4b      	subs	r3, r1, #1
 80014be:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 80014c0:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014c2:	441a      	add	r2, r3
 80014c4:	4621      	mov	r1, r4
 80014c6:	4638      	mov	r0, r7
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	f011 fd88 	bl	8012fde <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 80014ce:	4620      	mov	r0, r4
    S->pState = pState;
 80014d0:	60af      	str	r7, [r5, #8]
    S->M = M;
 80014d2:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 80014d6:	f06f 0001 	mvn.w	r0, #1
}
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014dc <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 80014dc:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014de:	4c05      	ldr	r4, [pc, #20]	; (80014f4 <loadWPM+0x18>)
{
 80014e0:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014e2:	17c3      	asrs	r3, r0, #31
 80014e4:	2100      	movs	r1, #0
 80014e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014ea:	f7fe ffb1 	bl	8000450 <__aeabi_uldivmod>
 80014ee:	6020      	str	r0, [r4, #0]

}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	24007b1c 	.word	0x24007b1c

080014f8 <DoKeyer>:
#endif
}
#endif

void DoKeyer(void)
{
 80014f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80014fc:	4c9a      	ldr	r4, [pc, #616]	; (8001768 <DoKeyer+0x270>)
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12f      	bne.n	8001564 <DoKeyer+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 8001504:	4a99      	ldr	r2, [pc, #612]	; (800176c <DoKeyer+0x274>)
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	2a02      	cmp	r2, #2
 800150a:	d029      	beq.n	8001560 <DoKeyer+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 800150c:	4d98      	ldr	r5, [pc, #608]	; (8001770 <DoKeyer+0x278>)
 800150e:	782a      	ldrb	r2, [r5, #0]
 8001510:	2a05      	cmp	r2, #5
 8001512:	d825      	bhi.n	8001560 <DoKeyer+0x68>
 8001514:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001518:	009f0070 	.word	0x009f0070
 800151c:	000600d9 	.word	0x000600d9
 8001520:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 8001524:	4a93      	ldr	r2, [pc, #588]	; (8001774 <DoKeyer+0x27c>)
 8001526:	2001      	movs	r0, #1
 8001528:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80e2 	beq.w	80016f4 <DoKeyer+0x1fc>
 8001530:	4f91      	ldr	r7, [pc, #580]	; (8001778 <DoKeyer+0x280>)
	tx = tx_enable;
 8001532:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 8001534:	2300      	movs	r3, #0
			CarrierEnable(1);
 8001536:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 8001538:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800153a:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 800153c:	f003 ff40 	bl	80053c0 <CarrierEnable>
		TXSwitch(1);
 8001540:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 8001542:	2404      	movs	r4, #4
		TXSwitch(1);
 8001544:	f003 fed4 	bl	80052f0 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001548:	f006 f81e 	bl	8007588 <HAL_GetTick>
 800154c:	498b      	ldr	r1, [pc, #556]	; (800177c <DoKeyer+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800154e:	4a8c      	ldr	r2, [pc, #560]	; (8001780 <DoKeyer+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001550:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 8001552:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001554:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8001556:	7813      	ldrb	r3, [r2, #0]
 8001558:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800155c:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800155e:	7013      	strb	r3, [r2, #0]
				}
			}
			break;
		}
	}
}
 8001560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8001564:	f006 f810 	bl	8007588 <HAL_GetTick>
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800156e:	4290      	cmp	r0, r2
 8001570:	f200 80b9 	bhi.w	80016e6 <DoKeyer+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0c5      	beq.n	8001504 <DoKeyer+0xc>
 8001578:	f006 f806 	bl	8007588 <HAL_GetTick>
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	4298      	cmp	r0, r3
 8001580:	d9c0      	bls.n	8001504 <DoKeyer+0xc>
						pk = Saved_pk;
 8001582:	4f80      	ldr	r7, [pc, #512]	; (8001784 <DoKeyer+0x28c>)
			TXSwitch(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f003 feb3 	bl	80052f0 <TXSwitch>
						pk = Saved_pk;
 800158a:	4e7f      	ldr	r6, [pc, #508]	; (8001788 <DoKeyer+0x290>)
			semi_qsk_timeout = 0;
 800158c:	2200      	movs	r2, #0
						pk = Saved_pk;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 8001592:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 8001594:	6031      	str	r1, [r6, #0]
 8001596:	e7b5      	b.n	8001504 <DoKeyer+0xc>
	if(KEYER_DASH) {
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	487c      	ldr	r0, [pc, #496]	; (800178c <DoKeyer+0x294>)
 800159c:	f009 f9da 	bl	800a954 <HAL_GPIO_ReadPin>
 80015a0:	b948      	cbnz	r0, 80015b6 <DoKeyer+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80015a2:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <DoKeyer+0x298>)
 80015a4:	4a76      	ldr	r2, [pc, #472]	; (8001780 <DoKeyer+0x288>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	7811      	ldrb	r1, [r2, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2302      	movne	r3, #2
 80015b0:	2301      	moveq	r3, #1
 80015b2:	430b      	orrs	r3, r1
 80015b4:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	4874      	ldr	r0, [pc, #464]	; (800178c <DoKeyer+0x294>)
 80015ba:	f009 f9cb 	bl	800a954 <HAL_GPIO_ReadPin>
 80015be:	b948      	cbnz	r0, 80015d4 <DoKeyer+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80015c0:	4b73      	ldr	r3, [pc, #460]	; (8001790 <DoKeyer+0x298>)
 80015c2:	4a6f      	ldr	r2, [pc, #444]	; (8001780 <DoKeyer+0x288>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	7811      	ldrb	r1, [r2, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2302      	moveq	r3, #2
 80015d0:	430b      	orrs	r3, r1
 80015d2:	7013      	strb	r3, [r2, #0]
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 80015d4:	f005 ffd8 	bl	8007588 <HAL_GetTick>
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <DoKeyer+0x284>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4298      	cmp	r0, r3
 80015de:	d9bf      	bls.n	8001560 <DoKeyer+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 80015e0:	4a67      	ldr	r2, [pc, #412]	; (8001780 <DoKeyer+0x288>)
 80015e2:	7813      	ldrb	r3, [r2, #0]
 80015e4:	f013 0104 	ands.w	r1, r3, #4
 80015e8:	f000 80b9 	beq.w	800175e <DoKeyer+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015ec:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80015f0:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015f2:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80015f4:	7029      	strb	r1, [r5, #0]
 80015f6:	e7b3      	b.n	8001560 <DoKeyer+0x68>
			if((KEYER_DASH) ||
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	4864      	ldr	r0, [pc, #400]	; (800178c <DoKeyer+0x294>)
 80015fc:	f009 f9aa 	bl	800a954 <HAL_GPIO_ReadPin>
 8001600:	b140      	cbz	r0, 8001614 <DoKeyer+0x11c>
					(KEYER_DOT) ||
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	4861      	ldr	r0, [pc, #388]	; (800178c <DoKeyer+0x294>)
 8001606:	f009 f9a5 	bl	800a954 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 800160a:	b118      	cbz	r0, 8001614 <DoKeyer+0x11c>
					(keyerControl & 0x03))
 800160c:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <DoKeyer+0x288>)
					(KEYER_DOT) ||
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	0798      	lsls	r0, r3, #30
 8001612:	d0a5      	beq.n	8001560 <DoKeyer+0x68>
	if(KEYER_DASH) {
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	485d      	ldr	r0, [pc, #372]	; (800178c <DoKeyer+0x294>)
 8001618:	f009 f99c 	bl	800a954 <HAL_GPIO_ReadPin>
 800161c:	b948      	cbnz	r0, 8001632 <DoKeyer+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <DoKeyer+0x298>)
 8001620:	4a57      	ldr	r2, [pc, #348]	; (8001780 <DoKeyer+0x288>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	7811      	ldrb	r1, [r2, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2302      	movne	r3, #2
 800162c:	2301      	moveq	r3, #1
 800162e:	430b      	orrs	r3, r1
 8001630:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4855      	ldr	r0, [pc, #340]	; (800178c <DoKeyer+0x294>)
 8001636:	f009 f98d 	bl	800a954 <HAL_GPIO_ReadPin>
 800163a:	b948      	cbnz	r0, 8001650 <DoKeyer+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800163c:	4b54      	ldr	r3, [pc, #336]	; (8001790 <DoKeyer+0x298>)
 800163e:	4a50      	ldr	r2, [pc, #320]	; (8001780 <DoKeyer+0x288>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	7811      	ldrb	r1, [r2, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2302      	moveq	r3, #2
 800164c:	430b      	orrs	r3, r1
 800164e:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8001650:	2301      	movs	r3, #1
 8001652:	702b      	strb	r3, [r5, #0]
 8001654:	e784      	b.n	8001560 <DoKeyer+0x68>
			if(keyerControl & DIT_L) {
 8001656:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <DoKeyer+0x288>)
 8001658:	7813      	ldrb	r3, [r2, #0]
 800165a:	07d9      	lsls	r1, r3, #31
 800165c:	d55e      	bpl.n	800171c <DoKeyer+0x224>
				keyerControl |= DIT_PROC;
 800165e:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 8001662:	484c      	ldr	r0, [pc, #304]	; (8001794 <DoKeyer+0x29c>)
 8001664:	4945      	ldr	r1, [pc, #276]	; (800177c <DoKeyer+0x284>)
 8001666:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8001668:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800166a:	2303      	movs	r3, #3
				ktimer = ditTime;
 800166c:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 800166e:	702b      	strb	r3, [r5, #0]
 8001670:	e776      	b.n	8001560 <DoKeyer+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 8001672:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800177c <DoKeyer+0x284>
 8001676:	f005 ff87 	bl	8007588 <HAL_GetTick>
 800167a:	f8d8 3000 	ldr.w	r3, [r8]
 800167e:	4298      	cmp	r0, r3
 8001680:	d84f      	bhi.n	8001722 <DoKeyer+0x22a>
			} else if(keyerControl & IAMBICB) {
 8001682:	4c3f      	ldr	r4, [pc, #252]	; (8001780 <DoKeyer+0x288>)
 8001684:	7823      	ldrb	r3, [r4, #0]
 8001686:	06db      	lsls	r3, r3, #27
 8001688:	f57f af6a 	bpl.w	8001560 <DoKeyer+0x68>
	if(KEYER_DASH) {
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	483f      	ldr	r0, [pc, #252]	; (800178c <DoKeyer+0x294>)
 8001690:	f009 f960 	bl	800a954 <HAL_GPIO_ReadPin>
 8001694:	b940      	cbnz	r0, 80016a8 <DoKeyer+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <DoKeyer+0x298>)
 8001698:	7822      	ldrb	r2, [r4, #0]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2302      	movne	r3, #2
 80016a2:	2301      	moveq	r3, #1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <DoKeyer+0x294>)
 80016ac:	f009 f952 	bl	800a954 <HAL_GPIO_ReadPin>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f47f af55 	bne.w	8001560 <DoKeyer+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <DoKeyer+0x298>)
 80016b8:	7822      	ldrb	r2, [r4, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2302      	moveq	r3, #2
 80016c4:	4313      	orrs	r3, r2
 80016c6:	7023      	strb	r3, [r4, #0]
}
 80016c8:	e74a      	b.n	8001560 <DoKeyer+0x68>
			if(keyerControl & DAH_L) {
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <DoKeyer+0x288>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f013 0302 	ands.w	r3, r3, #2
 80016d2:	d00d      	beq.n	80016f0 <DoKeyer+0x1f8>
				ktimer = ditTime*3;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <DoKeyer+0x29c>)
				keyerState = KEYED_PREP;
 80016d6:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <DoKeyer+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 80016dc:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 80016de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016e2:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 80016e4:	e73c      	b.n	8001560 <DoKeyer+0x68>
		TXSwitch(0);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f003 fe02 	bl	80052f0 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	e741      	b.n	8001574 <DoKeyer+0x7c>
				keyerState = IDLE;
 80016f0:	702b      	strb	r3, [r5, #0]
 80016f2:	e735      	b.n	8001560 <DoKeyer+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80016f4:	4e28      	ldr	r6, [pc, #160]	; (8001798 <DoKeyer+0x2a0>)
 80016f6:	4f20      	ldr	r7, [pc, #128]	; (8001778 <DoKeyer+0x280>)
 80016f8:	7833      	ldrb	r3, [r6, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f af19 	beq.w	8001532 <DoKeyer+0x3a>
 8001700:	783b      	ldrb	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f af15 	bne.w	8001532 <DoKeyer+0x3a>
					Saved_pk = pk;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <DoKeyer+0x290>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <DoKeyer+0x28c>)
 800170e:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 8001710:	f003 fdee 	bl	80052f0 <TXSwitch>
			HAL_Delay(txdelay);
 8001714:	7830      	ldrb	r0, [r6, #0]
 8001716:	f005 ff3d 	bl	8007594 <HAL_Delay>
 800171a:	e70a      	b.n	8001532 <DoKeyer+0x3a>
				keyerState = CHK_DAH;
 800171c:	2302      	movs	r3, #2
 800171e:	702b      	strb	r3, [r5, #0]
 8001720:	e71e      	b.n	8001560 <DoKeyer+0x68>
				Key_state = LOW;
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <DoKeyer+0x27c>)
 8001724:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 8001726:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 8001728:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 800172a:	bbb8      	cbnz	r0, 800179c <DoKeyer+0x2a4>
	tx = tx_enable;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <DoKeyer+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 800172e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8001794 <DoKeyer+0x29c>
	tx = tx_enable;
 8001732:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 8001734:	f003 fe44 	bl	80053c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001738:	f005 ff26 	bl	8007588 <HAL_GetTick>
 800173c:	f8d9 3000 	ldr.w	r3, [r9]
 8001740:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001744:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001746:	2800      	cmp	r0, #0
 8001748:	d039      	beq.n	80017be <DoKeyer+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800174a:	f005 ff1d 	bl	8007588 <HAL_GetTick>
 800174e:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 8001752:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001754:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 8001756:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001758:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 800175c:	e700      	b.n	8001560 <DoKeyer+0x68>
					keyerControl &= ~(DAH_L);              // clear dah latch
 800175e:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8001762:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001764:	7013      	strb	r3, [r2, #0]
}
 8001766:	e6fb      	b.n	8001560 <DoKeyer+0x68>
 8001768:	2400b140 	.word	0x2400b140
 800176c:	2400acaa 	.word	0x2400acaa
 8001770:	2400aca9 	.word	0x2400aca9
 8001774:	24005120 	.word	0x24005120
 8001778:	2400c788 	.word	0x2400c788
 800177c:	2400acb4 	.word	0x2400acb4
 8001780:	2400aca8 	.word	0x2400aca8
 8001784:	24006158 	.word	0x24006158
 8001788:	2400afec 	.word	0x2400afec
 800178c:	58020000 	.word	0x58020000
 8001790:	2400acb0 	.word	0x2400acb0
 8001794:	24007b1c 	.word	0x24007b1c
 8001798:	2400c789 	.word	0x2400c789
	tx = tx_enable;
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <DoKeyer+0x2cc>)
			pk = Saved_pk;
 800179e:	4f0a      	ldr	r7, [pc, #40]	; (80017c8 <DoKeyer+0x2d0>)
 80017a0:	4e0a      	ldr	r6, [pc, #40]	; (80017cc <DoKeyer+0x2d4>)
			semi_qsk_timeout = 0;
 80017a2:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80017a4:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 80017a6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80017d0 <DoKeyer+0x2d8>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f003 fd9e 	bl	80052f0 <TXSwitch>
						pk = Saved_pk;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 80017bc:	e7c5      	b.n	800174a <DoKeyer+0x252>
 80017be:	4e03      	ldr	r6, [pc, #12]	; (80017cc <DoKeyer+0x2d4>)
 80017c0:	4f01      	ldr	r7, [pc, #4]	; (80017c8 <DoKeyer+0x2d0>)
 80017c2:	e7f4      	b.n	80017ae <DoKeyer+0x2b6>
 80017c4:	2400c788 	.word	0x2400c788
 80017c8:	24006158 	.word	0x24006158
 80017cc:	2400afec 	.word	0x2400afec
 80017d0:	24007b1c 	.word	0x24007b1c

080017d4 <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 80017d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017d8:	497d      	ldr	r1, [pc, #500]	; (80019d0 <cw_tx_char+0x1fc>)
 80017da:	237e      	movs	r3, #126	; 0x7e
 80017dc:	2500      	movs	r5, #0
 80017de:	e004      	b.n	80017ea <cw_tx_char+0x16>
 80017e0:	b2d5      	uxtb	r5, r2
 80017e2:	5d4b      	ldrb	r3, [r1, r5]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 808b 	beq.w	8001900 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80017ea:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017ec:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80017f0:	d1f6      	bne.n	80017e0 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80017f2:	062b      	lsls	r3, r5, #24
 80017f4:	f100 80e6 	bmi.w	80019c4 <cw_tx_char+0x1f0>
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	461e      	mov	r6, r3
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	422b      	tst	r3, r5
 8001800:	d0fb      	beq.n	80017fa <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001802:	08b6      	lsrs	r6, r6, #2
 8001804:	f000 80b2 	beq.w	800196c <cw_tx_char+0x198>
 8001808:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80019e4 <cw_tx_char+0x210>
 800180c:	4f71      	ldr	r7, [pc, #452]	; (80019d4 <cw_tx_char+0x200>)
 800180e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80019ec <cw_tx_char+0x218>
					Saved_pk = pk;
 8001812:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80019e8 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b93b      	cbnz	r3, 800182a <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <cw_tx_char+0x204>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b123      	cbz	r3, 800182a <cw_tx_char+0x56>
 8001820:	f898 3000 	ldrb.w	r3, [r8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8095 	beq.w	8001954 <cw_tx_char+0x180>
	tx = tx_enable;
 800182a:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 800182c:	2300      	movs	r3, #0
			CarrierEnable(1);
 800182e:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 8001830:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 8001832:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 8001836:	f003 fdc3 	bl	80053c0 <CarrierEnable>
		TXSwitch(1);
 800183a:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 800183c:	4c67      	ldr	r4, [pc, #412]	; (80019dc <cw_tx_char+0x208>)
		TXSwitch(1);
 800183e:	f003 fd57 	bl	80052f0 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001842:	422e      	tst	r6, r5
 8001844:	f8d9 3000 	ldr.w	r3, [r9]
 8001848:	bf14      	ite	ne
 800184a:	f04f 0b03 	movne.w	fp, #3
 800184e:	f04f 0b01 	moveq.w	fp, #1
 8001852:	fb03 fb0b 	mul.w	fp, r3, fp
  uint32_t event = HAL_GetTick() + ms;
 8001856:	f005 fe97 	bl	8007588 <HAL_GetTick>
 800185a:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 800185c:	e00a      	b.n	8001874 <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 800185e:	f009 f879 	bl	800a954 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4620      	mov	r0, r4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04c      	beq.n	8001906 <cw_tx_char+0x132>
 800186c:	f009 f872 	bl	800a954 <HAL_GPIO_ReadPin>
 8001870:	2800      	cmp	r0, #0
 8001872:	d048      	beq.n	8001906 <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8001874:	f005 fe88 	bl	8007588 <HAL_GetTick>
 8001878:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800187e:	459b      	cmp	fp, r3
 8001880:	d8ed      	bhi.n	800185e <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	2800      	cmp	r0, #0
 8001886:	d151      	bne.n	800192c <cw_tx_char+0x158>
	tx = tx_enable;
 8001888:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 800188c:	f003 fd98 	bl	80053c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001890:	f005 fe7a 	bl	8007588 <HAL_GetTick>
 8001894:	f8d9 b000 	ldr.w	fp, [r9]
 8001898:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 800189c:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 800189e:	2800      	cmp	r0, #0
 80018a0:	d04c      	beq.n	800193c <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 80018a2:	f005 fe71 	bl	8007588 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018a6:	4c4d      	ldr	r4, [pc, #308]	; (80019dc <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 80018a8:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 80018aa:	e008      	b.n	80018be <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 80018ac:	f009 f852 	bl	800a954 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4620      	mov	r0, r4
 80018b6:	b3b3      	cbz	r3, 8001926 <cw_tx_char+0x152>
 80018b8:	f009 f84c 	bl	800a954 <HAL_GPIO_ReadPin>
 80018bc:	b398      	cbz	r0, 8001926 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018be:	f005 fe63 	bl	8007588 <HAL_GetTick>
 80018c2:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018c4:	2140      	movs	r1, #64	; 0x40
 80018c6:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018c8:	459b      	cmp	fp, r3
 80018ca:	d8ef      	bhi.n	80018ac <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 80018cc:	0876      	lsrs	r6, r6, #1
 80018ce:	d1a2      	bne.n	8001816 <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018d0:	f8d9 5000 	ldr.w	r5, [r9]
  uint32_t event = HAL_GetTick() + ms;
 80018d4:	f005 fe58 	bl	8007588 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018d8:	4c40      	ldr	r4, [pc, #256]	; (80019dc <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018da:	006d      	lsls	r5, r5, #1
  uint32_t event = HAL_GetTick() + ms;
 80018dc:	4405      	add	r5, r0
  while(HAL_GetTick() < event){
 80018de:	e008      	b.n	80018f2 <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 80018e0:	f009 f838 	bl	800a954 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	4620      	mov	r0, r4
 80018ea:	b1e3      	cbz	r3, 8001926 <cw_tx_char+0x152>
 80018ec:	f009 f832 	bl	800a954 <HAL_GPIO_ReadPin>
 80018f0:	b1c8      	cbz	r0, 8001926 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018f2:	f005 fe49 	bl	8007588 <HAL_GetTick>
 80018f6:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018fc:	429d      	cmp	r5, r3
 80018fe:	d8ef      	bhi.n	80018e0 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8001900:	2000      	movs	r0, #0
}
 8001902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8001906:	6838      	ldr	r0, [r7, #0]
 8001908:	2800      	cmp	r0, #0
 800190a:	d14a      	bne.n	80019a2 <cw_tx_char+0x1ce>
	tx = tx_enable;
 800190c:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001910:	f003 fd56 	bl	80053c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001914:	f005 fe38 	bl	8007588 <HAL_GetTick>
 8001918:	f8d9 3000 	ldr.w	r3, [r9]
 800191c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001920:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001922:	2800      	cmp	r0, #0
 8001924:	d050      	beq.n	80019c8 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001926:	2001      	movs	r0, #1
}
 8001928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 800192c:	2300      	movs	r3, #0
			pk = Saved_pk;
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001930:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001934:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001936:	f8da 3000 	ldr.w	r3, [sl]
 800193a:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 800193c:	2000      	movs	r0, #0
 800193e:	f003 fcd7 	bl	80052f0 <TXSwitch>
			semi_qsk_timeout = 0;
 8001942:	2300      	movs	r3, #0
						pk = Saved_pk;
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8001946:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8001948:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 800194c:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e7a6      	b.n	80018a2 <cw_tx_char+0xce>
					Saved_pk = pk;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8001956:	2001      	movs	r0, #1
					Saved_pk = pk;
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 800195e:	f003 fcc7 	bl	80052f0 <TXSwitch>
			HAL_Delay(txdelay);
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <cw_tx_char+0x204>)
 8001964:	7818      	ldrb	r0, [r3, #0]
 8001966:	f005 fe15 	bl	8007594 <HAL_Delay>
 800196a:	e75e      	b.n	800182a <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 800196e:	4c1b      	ldr	r4, [pc, #108]	; (80019dc <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001970:	681d      	ldr	r5, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8001972:	f005 fe09 	bl	8007588 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001976:	00ad      	lsls	r5, r5, #2
  uint32_t event = HAL_GetTick() + ms;
 8001978:	4405      	add	r5, r0
  while(HAL_GetTick() < event){
 800197a:	e00a      	b.n	8001992 <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 800197c:	f008 ffea 	bl	800a954 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4620      	mov	r0, r4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ba      	beq.n	8001900 <cw_tx_char+0x12c>
 800198a:	f008 ffe3 	bl	800a954 <HAL_GPIO_ReadPin>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0b6      	beq.n	8001900 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8001992:	f005 fdf9 	bl	8007588 <HAL_GetTick>
 8001996:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800199c:	429d      	cmp	r5, r3
 800199e:	d8ed      	bhi.n	800197c <cw_tx_char+0x1a8>
 80019a0:	e7ae      	b.n	8001900 <cw_tx_char+0x12c>
	tx = tx_enable;
 80019a2:	2300      	movs	r3, #0
			pk = Saved_pk;
 80019a4:	4d10      	ldr	r5, [pc, #64]	; (80019e8 <cw_tx_char+0x214>)
 80019a6:	4c0e      	ldr	r4, [pc, #56]	; (80019e0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 80019a8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 80019ac:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f003 fc9c 	bl	80052f0 <TXSwitch>
			semi_qsk_timeout = 0;
 80019b8:	2200      	movs	r2, #0
						pk = Saved_pk;
 80019ba:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80019bc:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 80019be:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	e79e      	b.n	8001902 <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80019c4:	2640      	movs	r6, #64	; 0x40
 80019c6:	e71f      	b.n	8001808 <cw_tx_char+0x34>
 80019c8:	4d07      	ldr	r5, [pc, #28]	; (80019e8 <cw_tx_char+0x214>)
 80019ca:	4c05      	ldr	r4, [pc, #20]	; (80019e0 <cw_tx_char+0x20c>)
 80019cc:	e7f1      	b.n	80019b2 <cw_tx_char+0x1de>
 80019ce:	bf00      	nop
 80019d0:	080191f8 	.word	0x080191f8
 80019d4:	2400b140 	.word	0x2400b140
 80019d8:	2400c789 	.word	0x2400c789
 80019dc:	58020000 	.word	0x58020000
 80019e0:	2400afec 	.word	0x2400afec
 80019e4:	24007b1c 	.word	0x24007b1c
 80019e8:	24006158 	.word	0x24006158
 80019ec:	2400c788 	.word	0x2400c788

080019f0 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 80019f0:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 80019f2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <SendCWMessage+0x28>)
 80019f8:	012a      	lsls	r2, r5, #4
 80019fa:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 80019fe:	5c98      	ldrb	r0, [r3, r2]
 8001a00:	b148      	cbz	r0, 8001a16 <SendCWMessage+0x26>
 8001a02:	2400      	movs	r4, #0
 8001a04:	e002      	b.n	8001a0c <SendCWMessage+0x1c>
 8001a06:	b2e4      	uxtb	r4, r4
 8001a08:	5d28      	ldrb	r0, [r5, r4]
 8001a0a:	b120      	cbz	r0, 8001a16 <SendCWMessage+0x26>
 8001a0c:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8001a0e:	f7ff fee1 	bl	80017d4 <cw_tx_char>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d0f7      	beq.n	8001a06 <SendCWMessage+0x16>
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	24000000 	.word	0x24000000

08001a1c <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <Load_Presets+0x40>)
{
 8001a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a22:	4c0f      	ldr	r4, [pc, #60]	; (8001a60 <Load_Presets+0x44>)
 8001a24:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8001a28:	4f0e      	ldr	r7, [pc, #56]	; (8001a64 <Load_Presets+0x48>)
 8001a2a:	4e0f      	ldr	r6, [pc, #60]	; (8001a68 <Load_Presets+0x4c>)
 8001a2c:	4d0f      	ldr	r5, [pc, #60]	; (8001a6c <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f011 fbbf 	bl	80131b4 <strcpy>
 8001a36:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8001a38:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8001a3c:	3410      	adds	r4, #16
 8001a3e:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8001a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8001a44:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8001a48:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8001a4c:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8001a4e:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8001a52:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8001a56:	d1ea      	bne.n	8001a2e <Load_Presets+0x12>
	}
}
 8001a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a5c:	2400aff0 	.word	0x2400aff0
 8001a60:	24000120 	.word	0x24000120
 8001a64:	08019288 	.word	0x08019288
 8001a68:	080192bf 	.word	0x080192bf
 8001a6c:	08019277 	.word	0x08019277

08001a70 <SetBW>:
//-----------------------------------------------------------------------------
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	if (newbw == CurrentBW)
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <SetBW+0x94>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4282      	cmp	r2, r0
 8001a76:	d008      	beq.n	8001a8a <SetBW+0x1a>
		return;

	CurrentBW = newbw;
	switch(CurrentMode)
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <SetBW+0x98>)
	CurrentBW = newbw;
 8001a7a:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001a7c:	7813      	ldrb	r3, [r2, #0]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d803      	bhi.n	8001a8a <SetBW+0x1a>
 8001a82:	e8df f003 	tbb	[pc, r3]
 8001a86:	190e      	.short	0x190e
 8001a88:	032c      	.short	0x032c
		break;

	default :
		break;
	}
}	
 8001a8a:	4770      	bx	lr
		bw[CW] = newbw;
 8001a8c:	491f      	ldr	r1, [pc, #124]	; (8001b0c <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <SetBW+0xa0>)
		bw[CW] = newbw;
 8001a92:	70c8      	strb	r0, [r1, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001a94:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001b14 <SetBW+0xa4>
 8001a98:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b18 <SetBW+0xa8>
		CWindex = 0; // TODO toglimi
 8001a9c:	801a      	strh	r2, [r3, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001a9e:	f001 bd1f 	b.w	80034e0 <SetMask>
		bw[AM] = newbw;
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <SetBW+0xac>)
		bw[AM] = newbw;
 8001aa8:	7008      	strb	r0, [r1, #0]
		SetMask(-3000.0f, 3000.0f);
 8001aaa:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001b20 <SetBW+0xb0>
 8001aae:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001b24 <SetBW+0xb4>
		AMindex = 0; // TODO toglimi
 8001ab2:	801a      	strh	r2, [r3, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ab4:	f001 bd14 	b.w	80034e0 <SetMask>
		bw[LSB] = newbw;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <SetBW+0x9c>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001aba:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001abe:	4917      	ldr	r1, [pc, #92]	; (8001b1c <SetBW+0xac>)
		bw[LSB] = newbw;
 8001ac0:	7050      	strb	r0, [r2, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ac2:	bf18      	it	ne
 8001ac4:	f04f 0c01 	movne.w	ip, #1
		LSBindex = 0; // TODO toglimi
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <SetBW+0xb8>)
 8001aca:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001acc:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 8001ad0:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001b2c <SetBW+0xbc>
 8001ad4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001b30 <SetBW+0xc0>
		LSBindex = 0; // TODO toglimi
 8001ad8:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001ada:	f001 bd01 	b.w	80034e0 <SetMask>
		bw[USB] = newbw;
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <SetBW+0x9c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001ae0:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <SetBW+0xac>)
		bw[USB] = newbw;
 8001ae6:	7090      	strb	r0, [r2, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001ae8:	bf18      	it	ne
 8001aea:	f04f 0c01 	movne.w	ip, #1
		USBindex = 0; // TODO toglimi
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <SetBW+0xc4>)
 8001af0:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001af2:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 8001af6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001b2c <SetBW+0xbc>
 8001afa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001b30 <SetBW+0xc0>
		USBindex = 0; // TODO toglimi
 8001afe:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001b00:	f001 bcee 	b.w	80034e0 <SetMask>
 8001b04:	24000ecf 	.word	0x24000ecf
 8001b08:	24000ed0 	.word	0x24000ed0
 8001b0c:	24007b10 	.word	0x24007b10
 8001b10:	24000ec8 	.word	0x24000ec8
 8001b14:	44480000 	.word	0x44480000
 8001b18:	43fa0000 	.word	0x43fa0000
 8001b1c:	240006b0 	.word	0x240006b0
 8001b20:	453b8000 	.word	0x453b8000
 8001b24:	c53b8000 	.word	0xc53b8000
 8001b28:	24006128 	.word	0x24006128
 8001b2c:	451c4000 	.word	0x451c4000
 8001b30:	43960000 	.word	0x43960000
 8001b34:	240061cc 	.word	0x240061cc

08001b38 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8001b3a:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <SetAGC+0x9c>)
{
 8001b3c:	b410      	push	{r4}
	switch(CurrentMode)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8001b40:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d810      	bhi.n	8001b68 <SetAGC+0x30>
 8001b46:	e8df f003 	tbb	[pc, r3]
 8001b4a:	2333      	.short	0x2333
 8001b4c:	1202      	.short	0x1202
	case LSB :      agc[LSB] = newAGC;
	Decay[LSB]  = AGC_decay[newAGC];
	Hcount[LSB] = Hangcount[newAGC]; break;

	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8001b50:	4922      	ldr	r1, [pc, #136]	; (8001bdc <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b52:	4c23      	ldr	r4, [pc, #140]	; (8001be0 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8001b54:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001b58:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b5a:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8001b5e:	681b      	ldr	r3, [r3, #0]
	case USB :      agc[USB] = newAGC;
 8001b60:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b62:	4921      	ldr	r1, [pc, #132]	; (8001be8 <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8001b64:	6093      	str	r3, [r2, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b66:	808c      	strh	r4, [r1, #4]
	Decay[CW]   = AGC_decay[newAGC];
	Hcount[CW]  = Hangcount[newAGC]; break;
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8001b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b6c:	4770      	bx	lr
	Decay[CW]   = AGC_decay[newAGC];
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b70:	4c1b      	ldr	r4, [pc, #108]	; (8001be0 <SetAGC+0xa8>)
	case CW :       agc[CW] = newAGC;
 8001b72:	491a      	ldr	r1, [pc, #104]	; (8001bdc <SetAGC+0xa4>)
	Decay[CW]   = AGC_decay[newAGC];
 8001b74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b78:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	case CW :       agc[CW] = newAGC;
 8001b7c:	70c8      	strb	r0, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8001b7e:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b80:	4919      	ldr	r1, [pc, #100]	; (8001be8 <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8001b82:	681b      	ldr	r3, [r3, #0]
}	
 8001b84:	f85d 4b04 	ldr.w	r4, [sp], #4
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b88:	f8a1 c006 	strh.w	ip, [r1, #6]
	Decay[CW]   = AGC_decay[newAGC];
 8001b8c:	60d3      	str	r3, [r2, #12]
}	
 8001b8e:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8001b92:	4912      	ldr	r1, [pc, #72]	; (8001bdc <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001b94:	4c12      	ldr	r4, [pc, #72]	; (8001be0 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001b96:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8001b9a:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001b9c:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001ba0:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001ba2:	4911      	ldr	r1, [pc, #68]	; (8001be8 <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001ba4:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001ba6:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8001ba8:	6053      	str	r3, [r2, #4]
}	
 8001baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bae:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8001bb2:	490a      	ldr	r1, [pc, #40]	; (8001bdc <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8001bb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8001bba:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bbc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001bc0:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bc2:	4909      	ldr	r1, [pc, #36]	; (8001be8 <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001bc4:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bc6:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8001bc8:	6013      	str	r3, [r2, #0]
}	
 8001bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	24000ed0 	.word	0x24000ed0
 8001bd4:	24000ece 	.word	0x24000ece
 8001bd8:	240006a8 	.word	0x240006a8
 8001bdc:	24007b00 	.word	0x24007b00
 8001be0:	24005114 	.word	0x24005114
 8001be4:	24000ed4 	.word	0x24000ed4
 8001be8:	24005118 	.word	0x24005118

08001bec <Tune_Preset>:
{
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq = psets[Idx].freq;
 8001bee:	4e45      	ldr	r6, [pc, #276]	; (8001d04 <Tune_Preset+0x118>)
 8001bf0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001bf4:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <Tune_Preset+0x11c>)
{
 8001bf6:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8001bf8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	if (CurrentMode == newmode)
 8001bfc:	4f43      	ldr	r7, [pc, #268]	; (8001d0c <Tune_Preset+0x120>)
	LOfreq = psets[Idx].freq;
 8001bfe:	0045      	lsls	r5, r0, #1
 8001c00:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8001c02:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8001c04:	6011      	str	r1, [r2, #0]
	if (CurrentMode == newmode)
 8001c06:	783a      	ldrb	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d00e      	beq.n	8001c2a <Tune_Preset+0x3e>
		return;

	CurrentMode = newmode;
 8001c0c:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d80b      	bhi.n	8001c2a <Tune_Preset+0x3e>
 8001c12:	e8df f003 	tbb	[pc, r3]
 8001c16:	483f      	.short	0x483f
 8001c18:	5102      	.short	0x5102
	case LSB :
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
		break;

	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <Tune_Preset+0x124>)
 8001c1c:	7898      	ldrb	r0, [r3, #2]
 8001c1e:	f7ff ff27 	bl	8001a70 <SetBW>
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <Tune_Preset+0x128>)
 8001c24:	7898      	ldrb	r0, [r3, #2]
 8001c26:	f7ff ff87 	bl	8001b38 <SetAGC>
	SetBW( psets[Idx].bw);
 8001c2a:	4425      	add	r5, r4
	if (newbw == CurrentBW)
 8001c2c:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <Tune_Preset+0x12c>)
	SetBW( psets[Idx].bw);
 8001c2e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	if (newbw == CurrentBW)
 8001c32:	7811      	ldrb	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 8001c34:	7d6b      	ldrb	r3, [r5, #21]
	if (newbw == CurrentBW)
 8001c36:	4299      	cmp	r1, r3
 8001c38:	d017      	beq.n	8001c6a <Tune_Preset+0x7e>
	switch(CurrentMode)
 8001c3a:	7839      	ldrb	r1, [r7, #0]
	CurrentBW = newbw;
 8001c3c:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8001c3e:	2903      	cmp	r1, #3
 8001c40:	d813      	bhi.n	8001c6a <Tune_Preset+0x7e>
 8001c42:	e8df f001 	tbb	[pc, r1]
 8001c46:	4e42      	.short	0x4e42
 8001c48:	1b02      	.short	0x1b02
		bw[USB] = newbw;
 8001c4a:	4931      	ldr	r1, [pc, #196]	; (8001d10 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <Tune_Preset+0x130>)
		bw[USB] = newbw;
 8001c4e:	708b      	strb	r3, [r1, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001c50:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8001c52:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001d20 <Tune_Preset+0x134>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001c56:	bf18      	it	ne
 8001c58:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 8001c5a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001d24 <Tune_Preset+0x138>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001c5e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8001c60:	2200      	movs	r2, #0
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <Tune_Preset+0x13c>)
 8001c64:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001c66:	f001 fc3b 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001c6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001c6e:	482f      	ldr	r0, [pc, #188]	; (8001d2c <Tune_Preset+0x140>)
 8001c70:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8001c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8001c78:	f011 ba9c 	b.w	80131b4 <strcpy>
		bw[CW] = newbw;
 8001c7c:	4924      	ldr	r1, [pc, #144]	; (8001d10 <Tune_Preset+0x124>)
		CWindex = 0; // TODO toglimi
 8001c7e:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <Tune_Preset+0x144>)
		bw[CW] = newbw;
 8001c80:	70cb      	strb	r3, [r1, #3]
		CWindex = 0; // TODO toglimi
 8001c82:	2300      	movs	r3, #0
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001c84:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001d34 <Tune_Preset+0x148>
 8001c88:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001d38 <Tune_Preset+0x14c>
		CWindex = 0; // TODO toglimi
 8001c8c:	8013      	strh	r3, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001c8e:	f001 fc27 	bl	80034e0 <SetMask>
		break;
 8001c92:	e7ea      	b.n	8001c6a <Tune_Preset+0x7e>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <Tune_Preset+0x124>)
 8001c96:	7818      	ldrb	r0, [r3, #0]
 8001c98:	f7ff feea 	bl	8001a70 <SetBW>
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <Tune_Preset+0x128>)
 8001c9e:	7818      	ldrb	r0, [r3, #0]
 8001ca0:	f7ff ff4a 	bl	8001b38 <SetAGC>
		break;
 8001ca4:	e7c1      	b.n	8001c2a <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <Tune_Preset+0x124>)
 8001ca8:	7858      	ldrb	r0, [r3, #1]
 8001caa:	f7ff fee1 	bl	8001a70 <SetBW>
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <Tune_Preset+0x128>)
 8001cb0:	7858      	ldrb	r0, [r3, #1]
 8001cb2:	f7ff ff41 	bl	8001b38 <SetAGC>
		break;
 8001cb6:	e7b8      	b.n	8001c2a <Tune_Preset+0x3e>
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <Tune_Preset+0x124>)
 8001cba:	78d8      	ldrb	r0, [r3, #3]
 8001cbc:	f7ff fed8 	bl	8001a70 <SetBW>
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <Tune_Preset+0x128>)
 8001cc2:	78d8      	ldrb	r0, [r3, #3]
 8001cc4:	f7ff ff38 	bl	8001b38 <SetAGC>
		break;
 8001cc8:	e7af      	b.n	8001c2a <Tune_Preset+0x3e>
		bw[AM] = newbw;
 8001cca:	4911      	ldr	r1, [pc, #68]	; (8001d10 <Tune_Preset+0x124>)
		AMindex = 0; // TODO toglimi
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <Tune_Preset+0x130>)
		bw[AM] = newbw;
 8001cce:	700b      	strb	r3, [r1, #0]
		AMindex = 0; // TODO toglimi
 8001cd0:	2300      	movs	r3, #0
		SetMask(-3000.0f, 3000.0f);
 8001cd2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001d3c <Tune_Preset+0x150>
 8001cd6:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001d40 <Tune_Preset+0x154>
		AMindex = 0; // TODO toglimi
 8001cda:	8013      	strh	r3, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8001cdc:	f001 fc00 	bl	80034e0 <SetMask>
		break;
 8001ce0:	e7c3      	b.n	8001c6a <Tune_Preset+0x7e>
		bw[LSB] = newbw;
 8001ce2:	490b      	ldr	r1, [pc, #44]	; (8001d10 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <Tune_Preset+0x130>)
		bw[LSB] = newbw;
 8001ce6:	704b      	strb	r3, [r1, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ce8:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8001cea:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001d20 <Tune_Preset+0x134>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001cee:	bf18      	it	ne
 8001cf0:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 8001cf2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001d24 <Tune_Preset+0x138>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001cf6:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <Tune_Preset+0x158>)
 8001cfc:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001cfe:	f001 fbef 	bl	80034e0 <SetMask>
		break;
 8001d02:	e7b2      	b.n	8001c6a <Tune_Preset+0x7e>
 8001d04:	2400aff0 	.word	0x2400aff0
 8001d08:	24006124 	.word	0x24006124
 8001d0c:	24000ed0 	.word	0x24000ed0
 8001d10:	24007b10 	.word	0x24007b10
 8001d14:	24007b00 	.word	0x24007b00
 8001d18:	24000ecf 	.word	0x24000ecf
 8001d1c:	240006b0 	.word	0x240006b0
 8001d20:	451c4000 	.word	0x451c4000
 8001d24:	43960000 	.word	0x43960000
 8001d28:	240061cc 	.word	0x240061cc
 8001d2c:	2400afc4 	.word	0x2400afc4
 8001d30:	24000ec8 	.word	0x24000ec8
 8001d34:	44480000 	.word	0x44480000
 8001d38:	43fa0000 	.word	0x43fa0000
 8001d3c:	453b8000 	.word	0x453b8000
 8001d40:	c53b8000 	.word	0xc53b8000
 8001d44:	24006128 	.word	0x24006128

08001d48 <SetMode>:
{
 8001d48:	b508      	push	{r3, lr}
	if (CurrentMode == newmode)
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <SetMode+0x6c>)
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	4282      	cmp	r2, r0
 8001d50:	d006      	beq.n	8001d60 <SetMode+0x18>
	CurrentMode = newmode;
 8001d52:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001d54:	2803      	cmp	r0, #3
 8001d56:	d803      	bhi.n	8001d60 <SetMode+0x18>
 8001d58:	e8df f000 	tbb	[pc, r0]
 8001d5c:	0321170d 	.word	0x0321170d

	default :
		break;
	}
}	
 8001d60:	bd08      	pop	{r3, pc}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <SetMode+0x70>)
 8001d64:	78d8      	ldrb	r0, [r3, #3]
 8001d66:	f7ff fe83 	bl	8001a70 <SetBW>
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <SetMode+0x74>)
 8001d6c:	78d8      	ldrb	r0, [r3, #3]
}	
 8001d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001d72:	f7ff bee1 	b.w	8001b38 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <SetMode+0x70>)
 8001d78:	7818      	ldrb	r0, [r3, #0]
 8001d7a:	f7ff fe79 	bl	8001a70 <SetBW>
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <SetMode+0x74>)
 8001d80:	7818      	ldrb	r0, [r3, #0]
}	
 8001d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001d86:	f7ff bed7 	b.w	8001b38 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <SetMode+0x70>)
 8001d8c:	7858      	ldrb	r0, [r3, #1]
 8001d8e:	f7ff fe6f 	bl	8001a70 <SetBW>
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <SetMode+0x74>)
 8001d94:	7858      	ldrb	r0, [r3, #1]
}	
 8001d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001d9a:	f7ff becd 	b.w	8001b38 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SetMode+0x70>)
 8001da0:	7898      	ldrb	r0, [r3, #2]
 8001da2:	f7ff fe65 	bl	8001a70 <SetBW>
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SetMode+0x74>)
 8001da8:	7898      	ldrb	r0, [r3, #2]
}	
 8001daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001dae:	f7ff bec3 	b.w	8001b38 <SetAGC>
 8001db2:	bf00      	nop
 8001db4:	24000ed0 	.word	0x24000ed0
 8001db8:	24007b10 	.word	0x24007b10
 8001dbc:	24007b00 	.word	0x24007b00

08001dc0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8001dc0:	2809      	cmp	r0, #9
{
 8001dc2:	b508      	push	{r3, lr}
	if (idx == 9)
 8001dc4:	d012      	beq.n	8001dec <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8001dc6:	f1c0 0005 	rsb	r0, r0, #5
 8001dca:	ee06 0a90 	vmov	s13, r0
 8001dce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001df8 <SetFstep+0x38>
 8001dd2:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 8001dd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8001dda:	f013 fa8d 	bl	80152f8 <exp>
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <SetFstep+0x40>)
 8001de0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8001de4:	ee17 3a90 	vmov	r3, s15
 8001de8:	6013      	str	r3, [r2, #0]
}	
 8001dea:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8001dec:	f242 3328 	movw	r3, #9000	; 0x2328
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <SetFstep+0x40>)
 8001df2:	6013      	str	r3, [r2, #0]
}	
 8001df4:	bd08      	pop	{r3, pc}
 8001df6:	bf00      	nop
 8001df8:	bbb55516 	.word	0xbbb55516
 8001dfc:	40026bb1 	.word	0x40026bb1
 8001e00:	2400510c 	.word	0x2400510c

08001e04 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e04:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <FplusClicked+0x100>)
 8001e06:	ee07 0a90 	vmov	s15, r0
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <FplusClicked+0x104>)
 8001e0c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001e10:	ed92 6a00 	vldr	s12, [r2]
 8001e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e20:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <FplusClicked+0x108>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e22:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = min(LOfreq, 50000000.f);
 8001e26:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8001f10 <FplusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e2a:	493a      	ldr	r1, [pc, #232]	; (8001f14 <FplusClicked+0x110>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e2c:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8001e30:	4839      	ldr	r0, [pc, #228]	; (8001f18 <FplusClicked+0x114>)
{	
 8001e32:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e34:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e38:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 8001e3a:	4c38      	ldr	r4, [pc, #224]	; (8001f1c <FplusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e3c:	750a      	strb	r2, [r1, #20]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e3e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8001e42:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001e46:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8001e4a:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 8001e4e:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e50:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8001e54:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 8001e56:	7801      	ldrb	r1, [r0, #0]
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d016      	beq.n	8001e8a <FplusClicked+0x86>
	CurrentBW = newbw;
 8001e5c:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8001e5e:	2a03      	cmp	r2, #3
 8001e60:	d813      	bhi.n	8001e8a <FplusClicked+0x86>
 8001e62:	e8df f002 	tbb	[pc, r2]
 8001e66:	3828      	.short	0x3828
 8001e68:	1802      	.short	0x1802
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001e6a:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 8001e6c:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001e6e:	492c      	ldr	r1, [pc, #176]	; (8001f20 <FplusClicked+0x11c>)
		USBindex = 0; // TODO toglimi
 8001e70:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001e74:	bf18      	it	ne
 8001e76:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <FplusClicked+0x120>)
		SetMask(300.0f, 2500.0f);
 8001e7a:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001f28 <FplusClicked+0x124>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001e7e:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8001e80:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001f2c <FplusClicked+0x128>
		USBindex = 0; // TODO toglimi
 8001e84:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8001e86:	f001 fb2b 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001e8a:	4922      	ldr	r1, [pc, #136]	; (8001f14 <FplusClicked+0x110>)
 8001e8c:	4828      	ldr	r0, [pc, #160]	; (8001f30 <FplusClicked+0x12c>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001e92:	f011 b98f 	b.w	80131b4 <strcpy>
		CWindex = 0; // TODO toglimi
 8001e96:	2100      	movs	r1, #0
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <FplusClicked+0x130>)
		bw[CW] = newbw;
 8001e9a:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001e9c:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001f38 <FplusClicked+0x134>
		CWindex = 0; // TODO toglimi
 8001ea0:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001ea2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001f3c <FplusClicked+0x138>
 8001ea6:	f001 fb1b 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001eaa:	491a      	ldr	r1, [pc, #104]	; (8001f14 <FplusClicked+0x110>)
 8001eac:	4820      	ldr	r0, [pc, #128]	; (8001f30 <FplusClicked+0x12c>)
}	
 8001eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001eb2:	f011 b97f 	b.w	80131b4 <strcpy>
		AMindex = 0; // TODO toglimi
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <FplusClicked+0x11c>)
		bw[AM] = newbw;
 8001eba:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ebc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001f40 <FplusClicked+0x13c>
		AMindex = 0; // TODO toglimi
 8001ec0:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ec2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001f44 <FplusClicked+0x140>
 8001ec6:	f001 fb0b 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001eca:	4912      	ldr	r1, [pc, #72]	; (8001f14 <FplusClicked+0x110>)
 8001ecc:	4818      	ldr	r0, [pc, #96]	; (8001f30 <FplusClicked+0x12c>)
}	
 8001ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001ed2:	f011 b96f 	b.w	80131b4 <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ed6:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 8001ed8:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001eda:	4911      	ldr	r1, [pc, #68]	; (8001f20 <FplusClicked+0x11c>)
		LSBindex = 0; // TODO toglimi
 8001edc:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ee0:	bf18      	it	ne
 8001ee2:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <FplusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 8001ee6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001f28 <FplusClicked+0x124>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001eea:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8001eec:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001f2c <FplusClicked+0x128>
		LSBindex = 0; // TODO toglimi
 8001ef0:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8001ef2:	f001 faf5 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001ef6:	4907      	ldr	r1, [pc, #28]	; (8001f14 <FplusClicked+0x110>)
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <FplusClicked+0x12c>)
}	
 8001efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001efe:	f011 b959 	b.w	80131b4 <strcpy>
 8001f02:	bf00      	nop
 8001f04:	2400510c 	.word	0x2400510c
 8001f08:	24006124 	.word	0x24006124
 8001f0c:	24000ed0 	.word	0x24000ed0
 8001f10:	4c3ebc20 	.word	0x4c3ebc20
 8001f14:	2400aff0 	.word	0x2400aff0
 8001f18:	24000ecf 	.word	0x24000ecf
 8001f1c:	24007b10 	.word	0x24007b10
 8001f20:	240006b0 	.word	0x240006b0
 8001f24:	240061cc 	.word	0x240061cc
 8001f28:	451c4000 	.word	0x451c4000
 8001f2c:	43960000 	.word	0x43960000
 8001f30:	2400afc4 	.word	0x2400afc4
 8001f34:	24000ec8 	.word	0x24000ec8
 8001f38:	44480000 	.word	0x44480000
 8001f3c:	43fa0000 	.word	0x43fa0000
 8001f40:	453b8000 	.word	0x453b8000
 8001f44:	c53b8000 	.word	0xc53b8000
 8001f48:	24006128 	.word	0x24006128

08001f4c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f4c:	4a3f      	ldr	r2, [pc, #252]	; (800204c <FminusClicked+0x100>)
 8001f4e:	ee07 0a90 	vmov	s15, r0
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <FminusClicked+0x104>)
 8001f54:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001f58:	ed92 6a00 	vldr	s12, [r2]
 8001f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f60:	ed93 7a00 	vldr	s14, [r3]
 8001f64:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <FminusClicked+0x108>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f6a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = max(LOfreq, 8000.f);
 8001f6e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002058 <FminusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f72:	493a      	ldr	r1, [pc, #232]	; (800205c <FminusClicked+0x110>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f74:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8001f78:	4839      	ldr	r0, [pc, #228]	; (8002060 <FminusClicked+0x114>)
{	
 8001f7a:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f7c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f80:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 8001f82:	4c38      	ldr	r4, [pc, #224]	; (8002064 <FminusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f84:	750a      	strb	r2, [r1, #20]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f86:	eea6 7b44 	vfms.f64	d7, d6, d4
 8001f8a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8001f8e:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8001f92:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 8001f96:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f98:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8001f9c:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 8001f9e:	7801      	ldrb	r1, [r0, #0]
 8001fa0:	4299      	cmp	r1, r3
 8001fa2:	d016      	beq.n	8001fd2 <FminusClicked+0x86>
	CurrentBW = newbw;
 8001fa4:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8001fa6:	2a03      	cmp	r2, #3
 8001fa8:	d813      	bhi.n	8001fd2 <FminusClicked+0x86>
 8001faa:	e8df f002 	tbb	[pc, r2]
 8001fae:	3828      	.short	0x3828
 8001fb0:	1802      	.short	0x1802
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001fb2:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 8001fb4:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001fb6:	492c      	ldr	r1, [pc, #176]	; (8002068 <FminusClicked+0x11c>)
		USBindex = 0; // TODO toglimi
 8001fb8:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001fbc:	bf18      	it	ne
 8001fbe:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	; (800206c <FminusClicked+0x120>)
		SetMask(300.0f, 2500.0f);
 8001fc2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002070 <FminusClicked+0x124>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001fc6:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8001fc8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002074 <FminusClicked+0x128>
		USBindex = 0; // TODO toglimi
 8001fcc:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8001fce:	f001 fa87 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <FminusClicked+0x110>)
 8001fd4:	4828      	ldr	r0, [pc, #160]	; (8002078 <FminusClicked+0x12c>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8001fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001fda:	f011 b8eb 	b.w	80131b4 <strcpy>
		CWindex = 0; // TODO toglimi
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <FminusClicked+0x130>)
		bw[CW] = newbw;
 8001fe2:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001fe4:	eddf 0a26 	vldr	s1, [pc, #152]	; 8002080 <FminusClicked+0x134>
		CWindex = 0; // TODO toglimi
 8001fe8:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001fea:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002084 <FminusClicked+0x138>
 8001fee:	f001 fa77 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001ff2:	491a      	ldr	r1, [pc, #104]	; (800205c <FminusClicked+0x110>)
 8001ff4:	4820      	ldr	r0, [pc, #128]	; (8002078 <FminusClicked+0x12c>)
}
 8001ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001ffa:	f011 b8db 	b.w	80131b4 <strcpy>
		AMindex = 0; // TODO toglimi
 8001ffe:	2100      	movs	r1, #0
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <FminusClicked+0x11c>)
		bw[AM] = newbw;
 8002002:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8002004:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002088 <FminusClicked+0x13c>
		AMindex = 0; // TODO toglimi
 8002008:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 800200a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800208c <FminusClicked+0x140>
 800200e:	f001 fa67 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8002012:	4912      	ldr	r1, [pc, #72]	; (800205c <FminusClicked+0x110>)
 8002014:	4818      	ldr	r0, [pc, #96]	; (8002078 <FminusClicked+0x12c>)
}
 8002016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800201a:	f011 b8cb 	b.w	80131b4 <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800201e:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 8002020:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002022:	4911      	ldr	r1, [pc, #68]	; (8002068 <FminusClicked+0x11c>)
		LSBindex = 0; // TODO toglimi
 8002024:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002028:	bf18      	it	ne
 800202a:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <FminusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 800202e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002070 <FminusClicked+0x124>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002032:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002034:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002074 <FminusClicked+0x128>
		LSBindex = 0; // TODO toglimi
 8002038:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 800203a:	f001 fa51 	bl	80034e0 <SetMask>
	strcpy(msg, psets[Idx].name);
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <FminusClicked+0x110>)
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <FminusClicked+0x12c>)
}
 8002042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002046:	f011 b8b5 	b.w	80131b4 <strcpy>
 800204a:	bf00      	nop
 800204c:	2400510c 	.word	0x2400510c
 8002050:	24006124 	.word	0x24006124
 8002054:	24000ed0 	.word	0x24000ed0
 8002058:	45fa0000 	.word	0x45fa0000
 800205c:	2400aff0 	.word	0x2400aff0
 8002060:	24000ecf 	.word	0x24000ecf
 8002064:	24007b10 	.word	0x24007b10
 8002068:	240006b0 	.word	0x240006b0
 800206c:	240061cc 	.word	0x240061cc
 8002070:	451c4000 	.word	0x451c4000
 8002074:	43960000 	.word	0x43960000
 8002078:	2400afc4 	.word	0x2400afc4
 800207c:	24000ec8 	.word	0x24000ec8
 8002080:	44480000 	.word	0x44480000
 8002084:	43fa0000 	.word	0x43fa0000
 8002088:	453b8000 	.word	0x453b8000
 800208c:	c53b8000 	.word	0xc53b8000
 8002090:	24006128 	.word	0x24006128

08002094 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop

08002098 <HAL_GPIO_EXTI_Callback>:
		audio_task(); //not needed anymore
//		MainLoopCounter++;  //used with debugger to check frequency of main loop
	cdc_task();
	}
#endif
	if (pin == GPIO_PIN_14) {
 8002098:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800209c:	d000      	beq.n	80020a0 <HAL_GPIO_EXTI_Callback+0x8>
 800209e:	4770      	bx	lr
{
 80020a0:	b510      	push	{r4, lr}

		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


		// copy into work buffers the data received by CIC decimator
		SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80020a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a6:	4950      	ldr	r1, [pc, #320]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x150>)
 80020a8:	4850      	ldr	r0, [pc, #320]	; (80021ec <HAL_GPIO_EXTI_Callback+0x154>)
 80020aa:	f000 fef3 	bl	8002e94 <SDR_memcpy_f32>
		SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 80020ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b2:	494f      	ldr	r1, [pc, #316]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x158>)
 80020b4:	484f      	ldr	r0, [pc, #316]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80020b6:	f000 feed 	bl	8002e94 <SDR_memcpy_f32>




		// inverse sync filtering and decimation by 4
		arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 80020ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020be:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80020c0:	494a      	ldr	r1, [pc, #296]	; (80021ec <HAL_GPIO_EXTI_Callback+0x154>)
 80020c2:	484e      	ldr	r0, [pc, #312]	; (80021fc <HAL_GPIO_EXTI_Callback+0x164>)
 80020c4:	f7ff f9a6 	bl	8001414 <arm_fir_decimate_f32>
		arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80020c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_EXTI_Callback+0x168>)
 80020ce:	4949      	ldr	r1, [pc, #292]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80020d0:	484c      	ldr	r0, [pc, #304]	; (8002204 <HAL_GPIO_EXTI_Callback+0x16c>)
 80020d2:	f7ff f99f 	bl	8001414 <arm_fir_decimate_f32>

		// filter now with fast convolution
		//---------------------------------
		// shift the FFT buffer to the left
		SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80020d6:	494c      	ldr	r1, [pc, #304]	; (8002208 <HAL_GPIO_EXTI_Callback+0x170>)
 80020d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
		 */

		// TODO: check why with the original code above LSB and USB are swapped

		//if USB, copy the USB in the lower half (LSB)
		if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80020dc:	4c4b      	ldr	r4, [pc, #300]	; (800220c <HAL_GPIO_EXTI_Callback+0x174>)
		SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80020de:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80020e2:	f000 fed7 	bl	8002e94 <SDR_memcpy_f32>
		SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80020e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ea:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_GPIO_EXTI_Callback+0x170>)
 80020ec:	4944      	ldr	r1, [pc, #272]	; (8002200 <HAL_GPIO_EXTI_Callback+0x168>)
 80020ee:	4842      	ldr	r0, [pc, #264]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80020f0:	f000 fdcc 	bl	8002c8c <SDR_2R_toC_f32>
		SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80020f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f8:	4945      	ldr	r1, [pc, #276]	; (8002210 <HAL_GPIO_EXTI_Callback+0x178>)
 80020fa:	4846      	ldr	r0, [pc, #280]	; (8002214 <HAL_GPIO_EXTI_Callback+0x17c>)
 80020fc:	f000 feca 	bl	8002e94 <SDR_memcpy_f32>
		arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8002100:	2301      	movs	r3, #1
 8002102:	2200      	movs	r2, #0
 8002104:	4943      	ldr	r1, [pc, #268]	; (8002214 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002106:	4844      	ldr	r0, [pc, #272]	; (8002218 <HAL_GPIO_EXTI_Callback+0x180>)
 8002108:	f7fe fe36 	bl	8000d78 <arm_cfft_f32>
		if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800210c:	7823      	ldrb	r3, [r4, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d064      	beq.n	80021dc <HAL_GPIO_EXTI_Callback+0x144>

#endif
		 */

		// mult. by the fast convolution mask
		arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8002112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002116:	4a41      	ldr	r2, [pc, #260]	; (800221c <HAL_GPIO_EXTI_Callback+0x184>)
 8002118:	4941      	ldr	r1, [pc, #260]	; (8002220 <HAL_GPIO_EXTI_Callback+0x188>)
 800211a:	483e      	ldr	r0, [pc, #248]	; (8002214 <HAL_GPIO_EXTI_Callback+0x17c>)
 800211c:	f7ff f95a 	bl	80013d4 <arm_cmplx_mult_cmplx_f32>

		// compute now the inverse FFT
		arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8002120:	2301      	movs	r3, #1
 8002122:	493e      	ldr	r1, [pc, #248]	; (800221c <HAL_GPIO_EXTI_Callback+0x184>)
 8002124:	461a      	mov	r2, r3
 8002126:	483c      	ldr	r0, [pc, #240]	; (8002218 <HAL_GPIO_EXTI_Callback+0x180>)
 8002128:	f7fe fe26 	bl	8000d78 <arm_cfft_f32>
		// then do the overlap-discard
		SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	493c      	ldr	r1, [pc, #240]	; (8002224 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002132:	483d      	ldr	r0, [pc, #244]	; (8002228 <HAL_GPIO_EXTI_Callback+0x190>)
 8002134:	f000 feae 	bl	8002e94 <SDR_memcpy_f32>


		// we have now the bandpass filtered I/Q, demodulate the signal
		switch(CurrentMode)
 8002138:	7823      	ldrb	r3, [r4, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d828      	bhi.n	8002190 <HAL_GPIO_EXTI_Callback+0xf8>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d147      	bne.n	80021d2 <HAL_GPIO_EXTI_Callback+0x13a>
		{
		case AM :
#ifdef RECEIVE_AM
			SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8002142:	493a      	ldr	r1, [pc, #232]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 8002144:	4838      	ldr	r0, [pc, #224]	; (8002228 <HAL_GPIO_EXTI_Callback+0x190>)
 8002146:	f000 fff5 	bl	8003134 <SDR_demodAM_AGC>
#endif

#ifdef CW_TX_SIDETONE
		// CW tone while keying
		//TODO: make it sine and with attack/decay
		if (TXCarrierEnabled)
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_GPIO_EXTI_Callback+0x198>)
 800214c:	7819      	ldrb	r1, [r3, #0]
 800214e:	b379      	cbz	r1, 80021b0 <HAL_GPIO_EXTI_Callback+0x118>
			for (int i=0; i<BSIZE; i++)
			{
				if (i % 64 > 31)
					fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
				else
					fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 8002150:	4938      	ldr	r1, [pc, #224]	; (8002234 <HAL_GPIO_EXTI_Callback+0x19c>)
			for (int i=0; i<BSIZE; i++)
 8002152:	2300      	movs	r3, #0
					fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 8002154:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002238 <HAL_GPIO_EXTI_Callback+0x1a0>
 8002158:	edd1 7a00 	vldr	s15, [r1]
 800215c:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002162:	eeb1 7a67 	vneg.f32	s14, s15
				if (i % 64 > 31)
 8002166:	f013 0f20 	tst.w	r3, #32
			for (int i=0; i<BSIZE; i++)
 800216a:	f103 0301 	add.w	r3, r3, #1
				if (i % 64 > 31)
 800216e:	d109      	bne.n	8002184 <HAL_GPIO_EXTI_Callback+0xec>
			for (int i=0; i<BSIZE; i++)
 8002170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002174:	ece2 7a01 	vstmia	r2!, {s15}
 8002178:	d022      	beq.n	80021c0 <HAL_GPIO_EXTI_Callback+0x128>
				if (i % 64 > 31)
 800217a:	f013 0f20 	tst.w	r3, #32
			for (int i=0; i<BSIZE; i++)
 800217e:	f103 0301 	add.w	r3, r3, #1
				if (i % 64 > 31)
 8002182:	d0f5      	beq.n	8002170 <HAL_GPIO_EXTI_Callback+0xd8>
			for (int i=0; i<BSIZE; i++)
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	eca2 7a01 	vstmia	r2!, {s14}
 800218c:	d1eb      	bne.n	8002166 <HAL_GPIO_EXTI_Callback+0xce>
 800218e:	e017      	b.n	80021c0 <HAL_GPIO_EXTI_Callback+0x128>
		switch(CurrentMode)
 8002190:	2b03      	cmp	r3, #3
 8002192:	d1da      	bne.n	800214a <HAL_GPIO_EXTI_Callback+0xb2>
			SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8002194:	4925      	ldr	r1, [pc, #148]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 8002196:	4824      	ldr	r0, [pc, #144]	; (8002228 <HAL_GPIO_EXTI_Callback+0x190>)
 8002198:	f001 f85c 	bl	8003254 <SDR_demodSSB_CW_AGC>
			if(bw[CW] == Narrow)
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_GPIO_EXTI_Callback+0x1a4>)
 800219e:	78db      	ldrb	r3, [r3, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1d2      	bne.n	800214a <HAL_GPIO_EXTI_Callback+0xb2>
				SDR_CWPeak(fAudio, BSIZE);
 80021a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a8:	4820      	ldr	r0, [pc, #128]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 80021aa:	f000 ff35 	bl	8003018 <SDR_CWPeak>
 80021ae:	e7cc      	b.n	800214a <HAL_GPIO_EXTI_Callback+0xb2>
			}
		else
		{
			if (TransmissionEnabled)
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b123      	cbz	r3, 80021c0 <HAL_GPIO_EXTI_Callback+0x128>
				for (int i=0; i<BSIZE; i++)
				{
					fAudio[i] = 0.;
 80021b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ba:	481c      	ldr	r0, [pc, #112]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 80021bc:	f010 ff0f 	bl	8012fde <memset>
#endif

		// send the demodulated audio to the DMA buffer just emptied

		//LED_YELLOW_ON;
		SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80021c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c6:	4819      	ldr	r0, [pc, #100]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 80021c8:	6819      	ldr	r1, [r3, #0]
		//LED_YELLOW_OFF;


		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
	}
}
 80021ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80021ce:	f000 bdfb 	b.w	8002dc8 <SDR_float_to_DAC_audio>
			SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80021d2:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_GPIO_EXTI_Callback+0x194>)
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <HAL_GPIO_EXTI_Callback+0x190>)
 80021d6:	f001 f83d 	bl	8003254 <SDR_demodSSB_CW_AGC>
 80021da:	e7b6      	b.n	800214a <HAL_GPIO_EXTI_Callback+0xb2>
		if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80021dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <HAL_GPIO_EXTI_Callback+0x17c>)
 80021e2:	f000 fe71 	bl	8002ec8 <SDR_mirror_LSB>
 80021e6:	e794      	b.n	8002112 <HAL_GPIO_EXTI_Callback+0x7a>
 80021e8:	2000f800 	.word	0x2000f800
 80021ec:	2000b800 	.word	0x2000b800
 80021f0:	2000d800 	.word	0x2000d800
 80021f4:	20009800 	.word	0x20009800
 80021f8:	20009000 	.word	0x20009000
 80021fc:	24006168 	.word	0x24006168
 8002200:	20008800 	.word	0x20008800
 8002204:	2400615c 	.word	0x2400615c
 8002208:	24009320 	.word	0x24009320
 800220c:	24000ed0 	.word	0x24000ed0
 8002210:	24008320 	.word	0x24008320
 8002214:	20004800 	.word	0x20004800
 8002218:	080191e8 	.word	0x080191e8
 800221c:	20002800 	.word	0x20002800
 8002220:	20006800 	.word	0x20006800
 8002224:	20003800 	.word	0x20003800
 8002228:	2400b758 	.word	0x2400b758
 800222c:	24007b20 	.word	0x24007b20
 8002230:	240061a8 	.word	0x240061a8
 8002234:	24006148 	.word	0x24006148
 8002238:	be4ccccd 	.word	0xbe4ccccd
 800223c:	24007b10 	.word	0x24007b10
 8002240:	240061b4 	.word	0x240061b4
 8002244:	240072d0 	.word	0x240072d0

08002248 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 800224c:	4d94      	ldr	r5, [pc, #592]	; (80024a0 <ADC_Stream0_Handler+0x258>)
{
 800224e:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 8002252:	782b      	ldrb	r3, [r5, #0]
{
 8002254:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 8002256:	b123      	cbz	r3, 8002262 <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <ADC_Stream0_Handler+0x25c>)
 800225a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800225c:	f023 0310 	bic.w	r3, r3, #16
 8002260:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002262:	4f91      	ldr	r7, [pc, #580]	; (80024a8 <ADC_Stream0_Handler+0x260>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8002264:	4b91      	ldr	r3, [pc, #580]	; (80024ac <ADC_Stream0_Handler+0x264>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002266:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 800226a:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800226c:	2800      	cmp	r0, #0
 800226e:	bf08      	it	eq
 8002270:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 8002272:	2b03      	cmp	r3, #3
 8002274:	f000 8437 	beq.w	8002ae6 <ADC_Stream0_Handler+0x89e>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8002278:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <ADC_Stream0_Handler+0x268>)
 800227a:	ed93 0a00 	vldr	s0, [r3]
 800227e:	f000 fc45 	bl	8002b0c <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8002282:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8002286:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 8002288:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80024b4 <ADC_Stream0_Handler+0x26c>
	{
		sum += pR[k-1];
 800228c:	8814      	ldrh	r4, [r2, #0]
	while(k)
 800228e:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8002290:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8002292:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 8002294:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 8002296:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 8002298:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 800229a:	ee07 4a10 	vmov	s14, r4
		sum += pR[k-3];
 800229e:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 80022a0:	ee07 3a90 	vmov	s15, r3
		sum += pR[k-4];
 80022a4:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80022a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
		sum += pR[k-3];
 80022aa:	ee07 6a10 	vmov	s14, r6
		sum += pR[k-2];
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80022b2:	4290      	cmp	r0, r2
		sum += pR[k-3];
 80022b4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		sum += pR[k-4];
 80022b8:	ee07 1a10 	vmov	s14, r1
 80022bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80022c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022cc:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80022d0:	d1dc      	bne.n	800228c <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80022d2:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80022d6:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022d8:	eddf 7a77 	vldr	s15, [pc, #476]	; 80024b8 <ADC_Stream0_Handler+0x270>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80022dc:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4c76      	ldr	r4, [pc, #472]	; (80024bc <ADC_Stream0_Handler+0x274>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022e2:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80022e6:	4976      	ldr	r1, [pc, #472]	; (80024c0 <ADC_Stream0_Handler+0x278>)
	TestSampledValue=pR[BSIZE/2];
 80022e8:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022ec:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <ADC_Stream0_Handler+0x27c>)
 80022ee:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 80022f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022f4:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 80022f8:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <ADC_Stream0_Handler+0x280>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80022fa:	4a74      	ldr	r2, [pc, #464]	; (80024cc <ADC_Stream0_Handler+0x284>)
	TestSampledValue=pR[BSIZE/2];
 80022fc:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002300:	f000 fcf0 	bl	8002ce4 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 8002304:	782b      	ldrb	r3, [r5, #0]
 8002306:	b303      	cbz	r3, 800234a <ADC_Stream0_Handler+0x102>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002308:	4971      	ldr	r1, [pc, #452]	; (80024d0 <ADC_Stream0_Handler+0x288>)
 800230a:	4d72      	ldr	r5, [pc, #456]	; (80024d4 <ADC_Stream0_Handler+0x28c>)
 800230c:	7809      	ldrb	r1, [r1, #0]
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <ADC_Stream0_Handler+0x290>)
 8002310:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002314:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002318:	1c53      	adds	r3, r2, #1
 800231a:	4282      	cmp	r2, r0
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800231c:	4861      	ldr	r0, [pc, #388]	; (80024a4 <ADC_Stream0_Handler+0x25c>)
 800231e:	4a6f      	ldr	r2, [pc, #444]	; (80024dc <ADC_Stream0_Handler+0x294>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002320:	b21b      	sxth	r3, r3
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002322:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002324:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002328:	4a6d      	ldr	r2, [pc, #436]	; (80024e0 <ADC_Stream0_Handler+0x298>)
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800232a:	bfb8      	it	lt
 800232c:	3101      	addlt	r1, #1
		}
		if (IntCounter == 8)
 800232e:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002330:	ea02 0206 	and.w	r2, r2, r6
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002334:	802b      	strh	r3, [r5, #0]
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002336:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800233a:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 800233c:	f000 83df 	beq.w	8002afe <ADC_Stream0_Handler+0x8b6>
		{
			IntCounter = 0;
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <ADC_Stream0_Handler+0x25c>)
 8002342:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c
	// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 800234a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234e:	8023      	strh	r3, [r4, #0]
	asm("nop");
 8002350:	bf00      	nop
	while(k--)
 8002352:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002356:	f102 3cff 	add.w	ip, r2, #4294967295
 800235a:	fa0f fc8c 	sxth.w	ip, ip
 800235e:	f8a4 c000 	strh.w	ip, [r4]
 8002362:	2a00      	cmp	r2, #0
 8002364:	f000 82f4 	beq.w	8002950 <ADC_Stream0_Handler+0x708>
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <ADC_Stream0_Handler+0x29c>)
 800236a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800236e:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800256c <ADC_Stream0_Handler+0x324>
 8002372:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8002376:	edd3 2a00 	vldr	s5, [r3]
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <ADC_Stream0_Handler+0x2a0>)
 800237c:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8002570 <ADC_Stream0_Handler+0x328>
 8002380:	ed93 1a00 	vldr	s2, [r3]
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <ADC_Stream0_Handler+0x2a4>)
 8002386:	eddb 1a00 	vldr	s3, [fp]
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <ADC_Stream0_Handler+0x2a8>)
 8002390:	edda 7a00 	vldr	s15, [sl]
 8002394:	eeb0 6a47 	vmov.f32	s12, s14
 8002398:	ed93 2a00 	vldr	s4, [r3]
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <ADC_Stream0_Handler+0x2ac>)
 800239e:	4e56      	ldr	r6, [pc, #344]	; (80024f8 <ADC_Stream0_Handler+0x2b0>)
 80023a0:	ed93 8a00 	vldr	s16, [r3]
 80023a4:	4b55      	ldr	r3, [pc, #340]	; (80024fc <ADC_Stream0_Handler+0x2b4>)
 80023a6:	4f56      	ldr	r7, [pc, #344]	; (8002500 <ADC_Stream0_Handler+0x2b8>)
 80023a8:	edd3 5a00 	vldr	s11, [r3]
 80023ac:	4b55      	ldr	r3, [pc, #340]	; (8002504 <ADC_Stream0_Handler+0x2bc>)
 80023ae:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8002574 <ADC_Stream0_Handler+0x32c>
 80023b2:	ed93 fa00 	vldr	s30, [r3]
 80023b6:	4b54      	ldr	r3, [pc, #336]	; (8002508 <ADC_Stream0_Handler+0x2c0>)
 80023b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002578 <ADC_Stream0_Handler+0x330>
 80023bc:	edd3 8a00 	vldr	s17, [r3]
 80023c0:	4b52      	ldr	r3, [pc, #328]	; (800250c <ADC_Stream0_Handler+0x2c4>)
 80023c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800257c <ADC_Stream0_Handler+0x334>
 80023c6:	ed93 5a00 	vldr	s10, [r3]
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <ADC_Stream0_Handler+0x2c8>)
 80023cc:	4951      	ldr	r1, [pc, #324]	; (8002514 <ADC_Stream0_Handler+0x2cc>)
 80023ce:	edd3 fa00 	vldr	s31, [r3]
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <ADC_Stream0_Handler+0x2d0>)
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <ADC_Stream0_Handler+0x2d4>)
 80023d6:	ed93 ba00 	vldr	s22, [r3]
 80023da:	4b51      	ldr	r3, [pc, #324]	; (8002520 <ADC_Stream0_Handler+0x2d8>)
 80023dc:	edd3 3a00 	vldr	s7, [r3]
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <ADC_Stream0_Handler+0x2dc>)
 80023e2:	ed93 9a00 	vldr	s18, [r3]
 80023e6:	4b50      	ldr	r3, [pc, #320]	; (8002528 <ADC_Stream0_Handler+0x2e0>)
 80023e8:	edd3 ba00 	vldr	s23, [r3]
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <ADC_Stream0_Handler+0x2e4>)
 80023ee:	ed93 3a00 	vldr	s6, [r3]
 80023f2:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <ADC_Stream0_Handler+0x2e8>)
 80023f4:	edd3 9a00 	vldr	s19, [r3]
 80023f8:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <ADC_Stream0_Handler+0x2ec>)
 80023fa:	ed93 da00 	vldr	s26, [r3]
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <ADC_Stream0_Handler+0x2f0>)
 8002400:	edd3 6a00 	vldr	s13, [r3]
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <ADC_Stream0_Handler+0x2f4>)
 8002406:	edcd 6a01 	vstr	s13, [sp, #4]
 800240a:	ed93 ca00 	vldr	s24, [r3]
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <ADC_Stream0_Handler+0x2f8>)
 8002410:	edd3 ea00 	vldr	s29, [r3]
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <ADC_Stream0_Handler+0x2fc>)
 8002416:	edd3 6a00 	vldr	s13, [r3]
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <ADC_Stream0_Handler+0x300>)
 800241c:	edcd 6a02 	vstr	s13, [sp, #8]
 8002420:	edd3 ca00 	vldr	s25, [r3]
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <ADC_Stream0_Handler+0x304>)
 8002426:	edd3 6a00 	vldr	s13, [r3]
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <ADC_Stream0_Handler+0x308>)
 800242c:	edcd 6a05 	vstr	s13, [sp, #20]
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b47      	ldr	r3, [pc, #284]	; (8002554 <ADC_Stream0_Handler+0x30c>)
 8002436:	edcd 6a08 	vstr	s13, [sp, #32]
 800243a:	edd3 6a00 	vldr	s13, [r3]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <ADC_Stream0_Handler+0x310>)
 8002440:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8002444:	edd3 6a00 	vldr	s13, [r3]
 8002448:	4b44      	ldr	r3, [pc, #272]	; (800255c <ADC_Stream0_Handler+0x314>)
 800244a:	edcd 6a00 	vstr	s13, [sp]
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <ADC_Stream0_Handler+0x318>)
 8002454:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8002458:	edd3 6a00 	vldr	s13, [r3]
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <ADC_Stream0_Handler+0x31c>)
 800245e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002462:	edd3 6a00 	vldr	s13, [r3]
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <ADC_Stream0_Handler+0x320>)
 8002468:	edcd 6a06 	vstr	s13, [sp, #24]
 800246c:	edd3 6a00 	vldr	s13, [r3]
 8002470:	4663      	mov	r3, ip
 8002472:	f9b9 0000 	ldrsh.w	r0, [r9]
 8002476:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800247a:	edd6 6a00 	vldr	s13, [r6]
 800247e:	4684      	mov	ip, r0
 8002480:	4618      	mov	r0, r3
 8002482:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8002486:	edd7 6a00 	vldr	s13, [r7]
 800248a:	edcd 6a07 	vstr	s13, [sp, #28]
 800248e:	edde 6a00 	vldr	s13, [lr]
 8002492:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8002496:	edd8 6a00 	vldr	s13, [r8]
 800249a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 800249e:	e17a      	b.n	8002796 <ADC_Stream0_Handler+0x54e>
 80024a0:	240061b5 	.word	0x240061b5
 80024a4:	58024400 	.word	0x58024400
 80024a8:	24007700 	.word	0x24007700
 80024ac:	24000ed0 	.word	0x24000ed0
 80024b0:	24006124 	.word	0x24006124
 80024b4:	00000000 	.word	0x00000000
 80024b8:	3b000000 	.word	0x3b000000
 80024bc:	240005d0 	.word	0x240005d0
 80024c0:	20001800 	.word	0x20001800
 80024c4:	2400acb8 	.word	0x2400acb8
 80024c8:	240061b0 	.word	0x240061b0
 80024cc:	20001000 	.word	0x20001000
 80024d0:	240072d6 	.word	0x240072d6
 80024d4:	2400053c 	.word	0x2400053c
 80024d8:	24005104 	.word	0x24005104
 80024dc:	240050f8 	.word	0x240050f8
 80024e0:	ffff0007 	.word	0xffff0007
 80024e4:	24000544 	.word	0x24000544
 80024e8:	24000570 	.word	0x24000570
 80024ec:	24000574 	.word	0x24000574
 80024f0:	24000540 	.word	0x24000540
 80024f4:	24000588 	.word	0x24000588
 80024f8:	2400056c 	.word	0x2400056c
 80024fc:	2400058c 	.word	0x2400058c
 8002500:	240005c0 	.word	0x240005c0
 8002504:	2400054c 	.word	0x2400054c
 8002508:	24000580 	.word	0x24000580
 800250c:	24000584 	.word	0x24000584
 8002510:	24000548 	.word	0x24000548
 8002514:	20001808 	.word	0x20001808
 8002518:	24000598 	.word	0x24000598
 800251c:	20001008 	.word	0x20001008
 8002520:	2400059c 	.word	0x2400059c
 8002524:	24000554 	.word	0x24000554
 8002528:	24000590 	.word	0x24000590
 800252c:	24000594 	.word	0x24000594
 8002530:	24000550 	.word	0x24000550
 8002534:	240005a8 	.word	0x240005a8
 8002538:	240005ac 	.word	0x240005ac
 800253c:	2400055c 	.word	0x2400055c
 8002540:	240005a0 	.word	0x240005a0
 8002544:	240005a4 	.word	0x240005a4
 8002548:	24000558 	.word	0x24000558
 800254c:	240005b8 	.word	0x240005b8
 8002550:	240005bc 	.word	0x240005bc
 8002554:	24000564 	.word	0x24000564
 8002558:	240005b0 	.word	0x240005b0
 800255c:	240005b4 	.word	0x240005b4
 8002560:	24000560 	.word	0x24000560
 8002564:	240005c8 	.word	0x240005c8
 8002568:	240005cc 	.word	0x240005cc
 800256c:	24000578 	.word	0x24000578
 8002570:	2400057c 	.word	0x2400057c
 8002574:	240005c4 	.word	0x240005c4
 8002578:	24000568 	.word	0x24000568
 800257c:	2400053e 	.word	0x2400053e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002580:	eef0 6a65 	vmov.f32	s13, s11

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002584:	0798      	lsls	r0, r3, #30
 8002586:	eeb0 6a45 	vmov.f32	s12, s10
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800258a:	ee3f fa2a 	vadd.f32	s30, s30, s21
 800258e:	eee8 6a04 	vfma.f32	s13, s16, s8
 8002592:	eea8 6a84 	vfma.f32	s12, s17, s8
 8002596:	ee7f fa8a 	vadd.f32	s31, s31, s20
 800259a:	eeef 6a24 	vfma.f32	s13, s30, s9
 800259e:	eeaf 6aa4 	vfma.f32	s12, s31, s9
 80025a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025a6:	ee36 6a07 	vadd.f32	s12, s12, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80025aa:	f100 811d 	bmi.w	80027e8 <ADC_Stream0_Handler+0x5a0>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80025ae:	eef0 5a63 	vmov.f32	s11, s7

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80025b2:	075d      	lsls	r5, r3, #29
 80025b4:	eeb0 5a43 	vmov.f32	s10, s6
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80025b8:	ee79 3a0e 	vadd.f32	s7, s18, s28
 80025bc:	eeeb 5a04 	vfma.f32	s11, s22, s8
 80025c0:	eeab 5a84 	vfma.f32	s10, s23, s8
 80025c4:	ee79 9aad 	vadd.f32	s19, s19, s27
 80025c8:	eee3 5aa4 	vfma.f32	s11, s7, s9
 80025cc:	eea9 5aa4 	vfma.f32	s10, s19, s9
 80025d0:	ee35 9aa6 	vadd.f32	s18, s11, s13
 80025d4:	ee75 9a06 	vadd.f32	s19, s10, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80025d8:	f100 8117 	bmi.w	800280a <ADC_Stream0_Handler+0x5c2>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80025dc:	ed9d 5a01 	vldr	s10, [sp, #4]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80025e0:	0718      	lsls	r0, r3, #28
 80025e2:	eddd 5a02 	vldr	s11, [sp, #8]
 80025e6:	eead 5a04 	vfma.f32	s10, s26, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80025ea:	eddd 3a04 	vldr	s7, [sp, #16]
 80025ee:	eeee 5a84 	vfma.f32	s11, s29, s8
 80025f2:	ed9d 3a03 	vldr	s6, [sp, #12]
 80025f6:	ee7c 3a23 	vadd.f32	s7, s24, s7
 80025fa:	ee73 ca2c 	vadd.f32	s25, s6, s25
 80025fe:	eea3 5aa4 	vfma.f32	s10, s7, s9
 8002602:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8002606:	ee35 ca09 	vadd.f32	s24, s10, s18
 800260a:	ee75 caa9 	vadd.f32	s25, s11, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800260e:	f100 81a4 	bmi.w	800295a <ADC_Stream0_Handler+0x712>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002612:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002616:	f013 0010 	ands.w	r0, r3, #16
 800261a:	ed9d 3a05 	vldr	s6, [sp, #20]
 800261e:	eddd 5a00 	vldr	s11, [sp]
 8002622:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 8002626:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800262a:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 800262e:	eee5 fa84 	vfma.f32	s31, s11, s8
 8002632:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8002636:	ee75 5a25 	vadd.f32	s11, s10, s11
 800263a:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 800263e:	eea5 faa4 	vfma.f32	s30, s11, s9
 8002642:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002646:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002648:	ee75 5a25 	vadd.f32	s11, s10, s11
 800264c:	eee5 faa4 	vfma.f32	s31, s11, s9
 8002650:	ee3f fa0c 	vadd.f32	s30, s30, s24
 8002654:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8002658:	ee7f faac 	vadd.f32	s31, s31, s25
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800265c:	f040 819a 	bne.w	8002994 <ADC_Stream0_Handler+0x74c>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002660:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002664:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8002668:	eddd 5a0e 	vldr	s11, [sp, #56]	; 0x38
 800266c:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8002670:	eee3 5a84 	vfma.f32	s11, s7, s8
 8002674:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002678:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
 800267c:	eea3 5a84 	vfma.f32	s10, s7, s8
 8002680:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002684:	4ddb      	ldr	r5, [pc, #876]	; (80029f4 <ADC_Stream0_Handler+0x7ac>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002686:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800268a:	ed9d fa11 	vldr	s30, [sp, #68]	; 0x44
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800268e:	4428      	add	r0, r5
 8002690:	4dd9      	ldr	r5, [pc, #868]	; (80029f8 <ADC_Stream0_Handler+0x7b0>)
 8002692:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002696:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 800269a:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800269e:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 80026a2:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80026a6:	eddf 3ad5 	vldr	s7, [pc, #852]	; 80029fc <ADC_Stream0_Handler+0x7b4>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80026aa:	ee7f 5a25 	vadd.f32	s11, s30, s11
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80026ae:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80026b2:	ee3f 5a85 	vadd.f32	s10, s31, s10
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80026b6:	ee25 5a23 	vmul.f32	s10, s10, s7
 80026ba:	ed80 5a00 	vstr	s10, [r0]
 80026be:	f10c 0001 	add.w	r0, ip, #1
 80026c2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80026c6:	edcc 5a00 	vstr	s11, [ip]
 80026ca:	fa0f fc80 	sxth.w	ip, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026ce:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80026d2:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026d6:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
		if(idx < BSIZE*4)
 80026da:	f2c0 81cd 	blt.w	8002a78 <ADC_Stream0_Handler+0x830>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 80026de:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80026e2:	eddd 5a00 	vldr	s11, [sp]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026e6:	eddd 3a06 	vldr	s7, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026ea:	eeb0 5a68 	vmov.f32	s10, s17
		EXTI->SWIER1 |= GPIO_PIN_14;
 80026ee:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026f0:	eef0 8a47 	vmov.f32	s17, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80026f4:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026f8:	eef0 5a48 	vmov.f32	s11, s16
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80026fc:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002700:	eeb0 8a67 	vmov.f32	s16, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002704:	ed8d da01 	vstr	s26, [sp, #4]
 8002708:	eef0 ea69 	vmov.f32	s29, s19
 800270c:	eeb0 da49 	vmov.f32	s26, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002710:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002714:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002718:	eef0 3a4b 	vmov.f32	s7, s22
 800271c:	eeb0 3a6b 	vmov.f32	s6, s23
		EXTI->SWIER1 |= GPIO_PIN_14;
 8002720:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002724:	eef0 ba46 	vmov.f32	s23, s12
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002728:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800272c:	eeb0 ba66 	vmov.f32	s22, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8002730:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
 8002734:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		idx = 0;
 8002738:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800273c:	edcd fa07 	vstr	s31, [sp, #28]
 8002740:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002744:	edcd ca00 	vstr	s25, [sp]
 8002748:	ed8d ca05 	vstr	s24, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 800274c:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 800274e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8002752:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002756:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 800275a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800275e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002762:	eef0 9a6d 	vmov.f32	s19, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8002766:	eddd ca03 	vldr	s25, [sp, #12]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 800276a:	eeb0 9a4e 	vmov.f32	s18, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 800276e:	ed9d ca04 	vldr	s24, [sp, #16]
		inE2Rold = inER;                           inE2Iold = inEI;
 8002772:	eef0 fa4a 	vmov.f32	s31, s20
 8002776:	eeb0 fa6a 	vmov.f32	s30, s21
	while(k--)
 800277a:	3b01      	subs	r3, #1
 800277c:	eef0 7a61 	vmov.f32	s15, s3
 8002780:	eeb0 6a41 	vmov.f32	s12, s2
 8002784:	3108      	adds	r1, #8
 8002786:	b218      	sxth	r0, r3
 8002788:	3208      	adds	r2, #8
 800278a:	1c43      	adds	r3, r0, #1
 800278c:	d05a      	beq.n	8002844 <ADC_Stream0_Handler+0x5fc>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800278e:	eeb0 1a40 	vmov.f32	s2, s0
 8002792:	eef0 1a60 	vmov.f32	s3, s1
 8002796:	eeb0 7a62 	vmov.f32	s14, s5
 800279a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800279e:	ed51 2a02 	vldr	s5, [r1, #-8]
 80027a2:	eef0 6a42 	vmov.f32	s13, s4
 80027a6:	ed12 0a01 	vldr	s0, [r2, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80027aa:	07c5      	lsls	r5, r0, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80027ac:	ee32 2a87 	vadd.f32	s4, s5, s14
 80027b0:	b283      	uxth	r3, r0
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80027b2:	eeb0 7a60 	vmov.f32	s14, s1
 80027b6:	eea1 7a84 	vfma.f32	s14, s3, s8
 80027ba:	eea2 7a24 	vfma.f32	s14, s4, s9
 80027be:	ed12 2a02 	vldr	s4, [r2, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80027c2:	ee76 6a82 	vadd.f32	s13, s13, s4
 80027c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ca:	eeb0 7a40 	vmov.f32	s14, s0
 80027ce:	eea1 7a04 	vfma.f32	s14, s2, s8
 80027d2:	eea6 7aa4 	vfma.f32	s14, s13, s9
 80027d6:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80027da:	f57f aed1 	bpl.w	8002580 <ADC_Stream0_Handler+0x338>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 80027de:	eeb0 aa47 	vmov.f32	s20, s14
 80027e2:	eef0 aa67 	vmov.f32	s21, s15
 80027e6:	e7c8      	b.n	800277a <ADC_Stream0_Handler+0x532>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80027e8:	eeb0 5a68 	vmov.f32	s10, s17
 80027ec:	eef0 5a48 	vmov.f32	s11, s16
 80027f0:	eef0 8a47 	vmov.f32	s17, s14
 80027f4:	eeb0 8a67 	vmov.f32	s16, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 80027f8:	eef0 da46 	vmov.f32	s27, s12
 80027fc:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8002800:	eef0 fa4a 	vmov.f32	s31, s20
 8002804:	eeb0 fa6a 	vmov.f32	s30, s21
 8002808:	e7b7      	b.n	800277a <ADC_Stream0_Handler+0x532>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800280a:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 800280e:	edcd 9a03 	vstr	s19, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002812:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002816:	ed8d 9a04 	vstr	s18, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800281a:	eeb0 5a68 	vmov.f32	s10, s17
 800281e:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002822:	eef0 ba46 	vmov.f32	s23, s12
 8002826:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800282a:	eef0 8a47 	vmov.f32	s17, s14
 800282e:	eeb0 8a67 	vmov.f32	s16, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002832:	eef0 9a6d 	vmov.f32	s19, s27
 8002836:	eeb0 9a4e 	vmov.f32	s18, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 800283a:	eef0 fa4a 	vmov.f32	s31, s20
 800283e:	eeb0 fa6a 	vmov.f32	s30, s21
 8002842:	e79a      	b.n	800277a <ADC_Stream0_Handler+0x532>
 8002844:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8002848:	4603      	mov	r3, r0
 800284a:	f8a9 c000 	strh.w	ip, [r9]
 800284e:	edc8 7a00 	vstr	s15, [r8]
 8002852:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8002856:	8023      	strh	r3, [r4, #0]
 8002858:	edce 7a00 	vstr	s15, [lr]
 800285c:	eddd 7a07 	vldr	s15, [sp, #28]
 8002860:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <ADC_Stream0_Handler+0x7b8>)
 8002862:	edc7 7a00 	vstr	s15, [r7]
 8002866:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800286a:	edc6 7a00 	vstr	s15, [r6]
 800286e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8002872:	edc3 7a00 	vstr	s15, [r3]
 8002876:	eddd 7a06 	vldr	s15, [sp, #24]
 800287a:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <ADC_Stream0_Handler+0x7bc>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
 8002880:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8002884:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <ADC_Stream0_Handler+0x7c0>)
 8002886:	edc3 7a00 	vstr	s15, [r3]
 800288a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <ADC_Stream0_Handler+0x7c4>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
 8002894:	eddd 7a00 	vldr	s15, [sp]
 8002898:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <ADC_Stream0_Handler+0x7c8>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
 800289e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <ADC_Stream0_Handler+0x7cc>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
 80028a8:	eddd 7a08 	vldr	s15, [sp, #32]
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <ADC_Stream0_Handler+0x7d0>)
 80028ae:	edc3 7a00 	vstr	s15, [r3]
 80028b2:	eddd 7a05 	vldr	s15, [sp, #20]
 80028b6:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <ADC_Stream0_Handler+0x7d4>)
 80028b8:	edc3 7a00 	vstr	s15, [r3]
 80028bc:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <ADC_Stream0_Handler+0x7d8>)
 80028be:	eddd 7a02 	vldr	s15, [sp, #8]
 80028c2:	edc3 ca00 	vstr	s25, [r3]
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <ADC_Stream0_Handler+0x7dc>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
 80028cc:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <ADC_Stream0_Handler+0x7e0>)
 80028ce:	eddd 7a01 	vldr	s15, [sp, #4]
 80028d2:	edc3 ea00 	vstr	s29, [r3]
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <ADC_Stream0_Handler+0x7e4>)
 80028d8:	ed83 ca00 	vstr	s24, [r3]
 80028dc:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <ADC_Stream0_Handler+0x7e8>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
 80028e2:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <ADC_Stream0_Handler+0x7ec>)
 80028e4:	edca 1a00 	vstr	s3, [sl]
 80028e8:	ed83 da00 	vstr	s26, [r3]
 80028ec:	4b52      	ldr	r3, [pc, #328]	; (8002a38 <ADC_Stream0_Handler+0x7f0>)
 80028ee:	edcb 0a00 	vstr	s1, [fp]
 80028f2:	edc3 9a00 	vstr	s19, [r3]
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <ADC_Stream0_Handler+0x7f4>)
 80028f8:	ed83 3a00 	vstr	s6, [r3]
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <ADC_Stream0_Handler+0x7f8>)
 80028fe:	edc3 ba00 	vstr	s23, [r3]
 8002902:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <ADC_Stream0_Handler+0x7fc>)
 8002904:	ed83 9a00 	vstr	s18, [r3]
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <ADC_Stream0_Handler+0x800>)
 800290a:	edc3 3a00 	vstr	s7, [r3]
 800290e:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <ADC_Stream0_Handler+0x804>)
 8002910:	ed83 ba00 	vstr	s22, [r3]
 8002914:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <ADC_Stream0_Handler+0x808>)
 8002916:	edc3 fa00 	vstr	s31, [r3]
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <ADC_Stream0_Handler+0x80c>)
 800291c:	ed83 5a00 	vstr	s10, [r3]
 8002920:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <ADC_Stream0_Handler+0x810>)
 8002922:	edc3 8a00 	vstr	s17, [r3]
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <ADC_Stream0_Handler+0x814>)
 8002928:	ed83 fa00 	vstr	s30, [r3]
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <ADC_Stream0_Handler+0x818>)
 800292e:	edc3 5a00 	vstr	s11, [r3]
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <ADC_Stream0_Handler+0x81c>)
 8002934:	ed83 8a00 	vstr	s16, [r3]
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <ADC_Stream0_Handler+0x820>)
 800293a:	ed83 2a00 	vstr	s4, [r3]
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <ADC_Stream0_Handler+0x824>)
 8002940:	ed83 1a00 	vstr	s2, [r3]
 8002944:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <ADC_Stream0_Handler+0x828>)
 8002946:	ed83 0a00 	vstr	s0, [r3]
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <ADC_Stream0_Handler+0x82c>)
 800294c:	edc3 2a00 	vstr	s5, [r3]
		}

		// LED_YELLOW_OFF;

	}
 8002950:	b015      	add	sp, #84	; 0x54
 8002952:	ecbd 8b10 	vpop	{d8-d15}
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800295a:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800295e:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002962:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002966:	ed8d da01 	vstr	s26, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800296a:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 800296e:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002972:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002976:	ed8d ca0d 	vstr	s24, [sp, #52]	; 0x34
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800297a:	eef0 ea69 	vmov.f32	s29, s19
 800297e:	eeb0 da49 	vmov.f32	s26, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002982:	eef0 ba46 	vmov.f32	s23, s12
 8002986:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800298a:	eef0 8a47 	vmov.f32	s17, s14
 800298e:	eeb0 8a67 	vmov.f32	s16, s15
 8002992:	e6e6      	b.n	8002762 <ADC_Stream0_Handler+0x51a>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002994:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002998:	eeb0 3a6b 	vmov.f32	s6, s23
 800299c:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80029a0:	edcd ea02 	vstr	s29, [sp, #8]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029a4:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029a8:	eeb0 5a68 	vmov.f32	s10, s17
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029ac:	eddd 5a05 	vldr	s11, [sp, #20]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80029b0:	eef0 ea69 	vmov.f32	s29, s19
 80029b4:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80029b8:	eef0 ba46 	vmov.f32	s23, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80029bc:	eeb0 da49 	vmov.f32	s26, s18
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029c0:	edcd 5a08 	vstr	s11, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80029c4:	eeb0 ba66 	vmov.f32	s22, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029c8:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029cc:	eef0 8a47 	vmov.f32	s17, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029d0:	ed8d ca05 	vstr	s24, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029d4:	eef0 5a48 	vmov.f32	s11, s16
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 80029d8:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029dc:	eeb0 8a67 	vmov.f32	s16, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 80029e0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80029e4:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80029e8:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80029ec:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 80029f0:	e6b3      	b.n	800275a <ADC_Stream0_Handler+0x512>
 80029f2:	bf00      	nop
 80029f4:	2000d800 	.word	0x2000d800
 80029f8:	2000f800 	.word	0x2000f800
 80029fc:	34000000 	.word	0x34000000
 8002a00:	240005cc 	.word	0x240005cc
 8002a04:	240005c8 	.word	0x240005c8
 8002a08:	24000560 	.word	0x24000560
 8002a0c:	240005b4 	.word	0x240005b4
 8002a10:	240005b0 	.word	0x240005b0
 8002a14:	24000564 	.word	0x24000564
 8002a18:	240005bc 	.word	0x240005bc
 8002a1c:	240005b8 	.word	0x240005b8
 8002a20:	24000558 	.word	0x24000558
 8002a24:	240005a4 	.word	0x240005a4
 8002a28:	240005a0 	.word	0x240005a0
 8002a2c:	2400055c 	.word	0x2400055c
 8002a30:	240005ac 	.word	0x240005ac
 8002a34:	240005a8 	.word	0x240005a8
 8002a38:	24000550 	.word	0x24000550
 8002a3c:	24000594 	.word	0x24000594
 8002a40:	24000590 	.word	0x24000590
 8002a44:	24000554 	.word	0x24000554
 8002a48:	2400059c 	.word	0x2400059c
 8002a4c:	24000598 	.word	0x24000598
 8002a50:	24000548 	.word	0x24000548
 8002a54:	24000584 	.word	0x24000584
 8002a58:	24000580 	.word	0x24000580
 8002a5c:	2400054c 	.word	0x2400054c
 8002a60:	2400058c 	.word	0x2400058c
 8002a64:	24000588 	.word	0x24000588
 8002a68:	24000540 	.word	0x24000540
 8002a6c:	24000574 	.word	0x24000574
 8002a70:	24000570 	.word	0x24000570
 8002a74:	24000544 	.word	0x24000544
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a78:	eddd 5a06 	vldr	s11, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a7c:	eeb0 3a6b 	vmov.f32	s6, s23
 8002a80:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002a84:	edcd ea02 	vstr	s29, [sp, #8]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a88:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002a8c:	eeb0 5a68 	vmov.f32	s10, s17
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a90:	eddd 5a00 	vldr	s11, [sp]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002a94:	eef0 ea69 	vmov.f32	s29, s19
 8002a98:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a9c:	eef0 ba46 	vmov.f32	s23, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002aa0:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002aa4:	eeb0 da49 	vmov.f32	s26, s18
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002aa8:	eddd 5a05 	vldr	s11, [sp, #20]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002aac:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002ab0:	eef0 8a47 	vmov.f32	s17, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ab4:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ab8:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002abc:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ac0:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ac4:	edcd ca00 	vstr	s25, [sp]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ac8:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002acc:	eeb0 8a67 	vmov.f32	s16, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ad0:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ad4:	ed8d ca05 	vstr	s24, [sp, #20]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ad8:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8002adc:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8002ae0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8002ae4:	e780      	b.n	80029e8 <ADC_Stream0_Handler+0x7a0>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <ADC_Stream0_Handler+0x8bc>)
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <ADC_Stream0_Handler+0x8c0>)
 8002aea:	ed92 0a00 	vldr	s0, [r2]
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002af6:	f000 f809 	bl	8002b0c <SDR_ComputeLO>
 8002afa:	f7ff bbc2 	b.w	8002282 <ADC_Stream0_Handler+0x3a>
			IntCounter = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	802b      	strh	r3, [r5, #0]
 8002b02:	e41d      	b.n	8002340 <ADC_Stream0_Handler+0xf8>
 8002b04:	24006124 	.word	0x24006124
 8002b08:	24007b18 	.word	0x24007b18

08002b0c <SDR_ComputeLO>:

#include <arm_const_structs.h>

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8002b0c:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <SDR_ComputeLO+0x148>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eef4 7a40 	vcmp.f32	s15, s0
{
 8002b18:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	d175      	bne.n	8002c0e <SDR_ComputeLO+0x102>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b22:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <SDR_ComputeLO+0x14c>)
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <SDR_ComputeLO+0x150>)
 8002b26:	ed92 8a00 	vldr	s16, [r2]
 8002b2a:	ed93 7a00 	vldr	s14, [r3]
 8002b2e:	4c4c      	ldr	r4, [pc, #304]	; (8002c60 <SDR_ComputeLO+0x154>)
 8002b30:	4d4c      	ldr	r5, [pc, #304]	; (8002c64 <SDR_ComputeLO+0x158>)
 8002b32:	484d      	ldr	r0, [pc, #308]	; (8002c68 <SDR_ComputeLO+0x15c>)
 8002b34:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <SDR_ComputeLO+0x160>)
 8002b36:	edd4 5a00 	vldr	s11, [r4]
 8002b3a:	edd5 7a00 	vldr	s15, [r5]
 8002b3e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8002b42:	edd0 6a00 	vldr	s13, [r0]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <SDR_ComputeLO+0x164>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b48:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8002b4c:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b4e:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8002b52:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b54:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8002b58:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b5a:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b5e:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b66:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b6a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b6e:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b72:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b76:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b7a:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b7e:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b82:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b86:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b8a:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b8e:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b92:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b96:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b9a:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b9e:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002ba6:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002baa:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bae:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bb2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bb6:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bba:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bbe:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bc2:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bc6:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bca:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bce:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8002bd2:	d1b9      	bne.n	8002b48 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002bd4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8002bd8:	edc5 7a00 	vstr	s15, [r5]
 8002bdc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002c74 <SDR_ComputeLO+0x168>
 8002be0:	eddf 4a25 	vldr	s9, [pc, #148]	; 8002c78 <SDR_ComputeLO+0x16c>
 8002be4:	eef0 7a66 	vmov.f32	s15, s13
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <SDR_ComputeLO+0x170>)
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <SDR_ComputeLO+0x174>)
 8002bec:	ed82 5a00 	vstr	s10, [r2]
 8002bf0:	eee5 7a05 	vfma.f32	s15, s10, s10
 8002bf4:	ed83 6a00 	vstr	s12, [r3]
 8002bf8:	edc4 5a00 	vstr	s11, [r4]
}	
 8002bfc:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c04:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002c08:	edc0 7a00 	vstr	s15, [r0]
}	
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002c0e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002c84 <SDR_ComputeLO+0x178>
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <SDR_ComputeLO+0x17c>)
 8002c14:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 8002c18:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002c1c:	ed92 7a00 	vldr	s14, [r2]
 8002c20:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8002c24:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002c28:	eeb0 0b49 	vmov.f64	d0, d9
 8002c2c:	f012 fac4 	bl	80151b8 <cos>
 8002c30:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <SDR_ComputeLO+0x14c>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002c36:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002c3a:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002c3e:	f012 fb07 	bl	8015250 <sin>
 8002c42:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SDR_ComputeLO+0x150>)
 8002c48:	eeb1 7a47 	vneg.f32	s14, s14
 8002c4c:	ed83 7a00 	vstr	s14, [r3]
 8002c50:	e76d      	b.n	8002b2e <SDR_ComputeLO+0x22>
 8002c52:	bf00      	nop
 8002c54:	24000204 	.word	0x24000204
 8002c58:	240005d4 	.word	0x240005d4
 8002c5c:	240005dc 	.word	0x240005dc
 8002c60:	24000208 	.word	0x24000208
 8002c64:	240005f4 	.word	0x240005f4
 8002c68:	24000200 	.word	0x24000200
 8002c6c:	24005934 	.word	0x24005934
 8002c70:	24005134 	.word	0x24005134
 8002c74:	46000200 	.word	0x46000200
 8002c78:	39000000 	.word	0x39000000
 8002c7c:	240005f8 	.word	0x240005f8
 8002c80:	240005fc 	.word	0x240005fc
 8002c84:	40c90fdb 	.word	0x40c90fdb
 8002c88:	24006154 	.word	0x24006154

08002c8c <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	d028      	beq.n	8002ce2 <SDR_2R_toC_f32+0x56>
 8002c90:	3010      	adds	r0, #16
 8002c92:	3110      	adds	r1, #16
 8002c94:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002c96:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 8002c9a:	3110      	adds	r1, #16
 8002c9c:	3010      	adds	r0, #16
 8002c9e:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002ca0:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8002ca4:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002ca8:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8002cac:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002cb0:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8002cb4:	f842 cc38 	str.w	ip, [r2, #-56]
 8002cb8:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8002cbc:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002cc0:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8002cc4:	f842 cc30 	str.w	ip, [r2, #-48]
 8002cc8:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8002ccc:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002cd0:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8002cd4:	f842 cc28 	str.w	ip, [r2, #-40]
 8002cd8:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8002cdc:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 8002ce0:	d1d9      	bne.n	8002c96 <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 8002ce2:	4770      	bx	lr

08002ce4 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 8002ce6:	3110      	adds	r1, #16
 8002ce8:	3210      	adds	r2, #16
 8002cea:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002cec:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002dc0 <SDR_downconvert_f32+0xdc>
 8002cf0:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	4c33      	ldr	r4, [pc, #204]	; (8002dc4 <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002cf8:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 8002cfc:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002cfe:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 8002d02:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d04:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d08:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 8002d0c:	3310      	adds	r3, #16
 8002d0e:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d10:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d14:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d18:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 8002d1c:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d1e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 8002d22:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d26:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d2a:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d2e:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d32:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d36:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d3a:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d42:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d46:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d52:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002d56:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d5a:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d5e:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d62:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d66:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d6a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8002d6e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8002d72:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002d76:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8002d7a:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8002d7e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002d82:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8002d86:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8002d8a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002d8e:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8002d92:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8002d96:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002d9a:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8002d9e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8002da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da6:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8002daa:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 8002db6:	d19f      	bne.n	8002cf8 <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	24005134 	.word	0x24005134
 8002dc0:	3a000000 	.word	0x3a000000
 8002dc4:	24005934 	.word	0x24005934

08002dc8 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8002dc8:	b410      	push	{r4}
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8002dca:	0894      	lsrs	r4, r2, #2
	while(blkCnt--)
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	d057      	beq.n	8002e80 <SDR_float_to_DAC_audio+0xb8>
 8002dd0:	1e63      	subs	r3, r4, #1
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dd6:	fa1f fc83 	uxth.w	ip, r3
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <SDR_float_to_DAC_audio+0xc4>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	f100 0310 	add.w	r3, r0, #16
 8002de4:	3020      	adds	r0, #32
 8002de6:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8002dea:	f101 0008 	add.w	r0, r1, #8
 8002dee:	eeb0 5a47 	vmov.f32	s10, s14
 8002df2:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002df6:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 8002dfa:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dfc:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 8002e00:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e02:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e06:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e0a:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 8002e0e:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e10:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e14:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e18:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e1c:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e20:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e24:	ee15 4a10 	vmov	r4, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e28:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e2c:	f820 4c10 	strh.w	r4, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e30:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e34:	ee15 4a90 	vmov	r4, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e38:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e3c:	f820 4c0e 	strh.w	r4, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e40:	ee16 4a10 	vmov	r4, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e44:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e48:	f820 4c0c 	strh.w	r4, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e4c:	ee16 4a90 	vmov	r4, s13
 8002e50:	f820 4c0a 	strh.w	r4, [r0, #-10]
	while(blkCnt--)
 8002e54:	d1cb      	bne.n	8002dee <SDR_float_to_DAC_audio+0x26>
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e56:	f001 031f 	and.w	r3, r1, #31
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8002e5a:	0092      	lsls	r2, r2, #2
 8002e5c:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e5e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e62:	480b      	ldr	r0, [pc, #44]	; (8002e90 <SDR_float_to_DAC_audio+0xc8>)
 8002e64:	440a      	add	r2, r1
 8002e66:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e6a:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e6c:	1a53      	subs	r3, r2, r1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	dcf9      	bgt.n	8002e66 <SDR_float_to_DAC_audio+0x9e>
 8002e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e76:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 8002e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e7e:	4770      	bx	lr
    if ( dsize > 0 ) { 
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	d1e8      	bne.n	8002e56 <SDR_float_to_DAC_audio+0x8e>
 8002e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	24006148 	.word	0x24006148
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 8002e94:	0892      	lsrs	r2, r2, #2
 8002e96:	d016      	beq.n	8002ec6 <SDR_memcpy_f32+0x32>
 8002e98:	3110      	adds	r1, #16
 8002e9a:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 8002e9c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 8002ea0:	3110      	adds	r1, #16
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 8002ea8:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 8002eac:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8002eb0:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 8002eb4:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8002eb8:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 8002ebc:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8002ec0:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 8002ec4:	d1ea      	bne.n	8002e9c <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 8002ec6:	4770      	bx	lr

08002ec8 <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002ec8:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002eca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 8002ece:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002ed0:	440b      	add	r3, r1
	while(blkCnt--)
 8002ed2:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8002eda:	d036      	beq.n	8002f4a <SDR_mirror_LSB+0x82>
 8002edc:	f1a3 0220 	sub.w	r2, r3, #32
 8002ee0:	f1a3 0c1c 	sub.w	ip, r3, #28
 8002ee4:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8002ee8:	4402      	add	r2, r0
 8002eea:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002eec:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8002ef0:	3a20      	subs	r2, #32
 8002ef2:	3820      	subs	r0, #32
 8002ef4:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002ef6:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8002efa:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002efc:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8002f00:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f04:	eef1 7a67 	vneg.f32	s15, s15
 8002f08:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f0c:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8002f10:	f843 cc38 	str.w	ip, [r3, #-56]
 8002f14:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002f18:	eef1 7a67 	vneg.f32	s15, s15
 8002f1c:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f20:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8002f24:	f843 cc30 	str.w	ip, [r3, #-48]
 8002f28:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002f2c:	eef1 7a67 	vneg.f32	s15, s15
 8002f30:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f34:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8002f38:	f843 cc28 	str.w	ip, [r3, #-40]
 8002f3c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002f40:	eef1 7a67 	vneg.f32	s15, s15
 8002f44:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002f48:	d1d0      	bne.n	8002eec <SDR_mirror_LSB+0x24>
	}
}
 8002f4a:	4770      	bx	lr

08002f4c <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 8002f4c:	4929      	ldr	r1, [pc, #164]	; (8002ff4 <SDR_compute_IIR_parms+0xa8>)
 8002f4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002ff8 <SDR_compute_IIR_parms+0xac>
 8002f52:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <SDR_compute_IIR_parms+0xb0>)
	wr = 2.f * cwpitch / rate * myPI;
 8002f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003000 <SDR_compute_IIR_parms+0xb4>
 8002f60:	edd2 6a00 	vldr	s13, [r2]
{
 8002f64:	b508      	push	{r3, lr}
 8002f66:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 8002f6a:	eec7 8aa6 	vdiv.f32	s17, s15, s13
	r = Qfactor;
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <SDR_compute_IIR_parms+0xb8>)
 8002f70:	ed93 aa00 	vldr	s20, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 8002f78:	ee6a aa0a 	vmul.f32	s21, s20, s20
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f7c:	ee7a 9a0a 	vadd.f32	s19, s20, s20
 8002f80:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002f84:	ee38 8a4a 	vsub.f32	s16, s16, s20
	wr = 2.f * cwpitch / rate * myPI;
 8002f88:	ee68 8a87 	vmul.f32	s17, s17, s14
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f8c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8002f90:	f012 f912 	bl	80151b8 <cos>
 8002f94:	ee89 7a89 	vdiv.f32	s14, s19, s18
	a1 = -2.f * r * cosw0;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <SDR_compute_IIR_parms+0xbc>)
	a2 = r2;
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	; (800300c <SDR_compute_IIR_parms+0xc0>)
 8002f9c:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002fa0:	eeb0 6b40 	vmov.f64	d6, d0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fa4:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002fa8:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002fac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002fb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002fb4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	a1 = -2.f * r * cosw0;
 8002fb8:	ee29 7ac7 	vnmul.f32	s14, s19, s14
 8002fbc:	ed83 7a00 	vstr	s14, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fc0:	f012 f8fa 	bl	80151b8 <cos>
 8002fc4:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
 8002fc8:	eddf 5a11 	vldr	s11, [pc, #68]	; 8003010 <SDR_compute_IIR_parms+0xc4>
 8002fcc:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <SDR_compute_IIR_parms+0xc8>)
 8002fd2:	eea7 6b40 	vfms.f64	d6, d7, d0
 8002fd6:	ee28 7a25 	vmul.f32	s14, s16, s11
}
 8002fda:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002fe2:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8002fe6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002fea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002fee:	ed83 7a00 	vstr	s14, [r3]
}
 8002ff2:	bd08      	pop	{r3, pc}
 8002ff4:	24007b18 	.word	0x24007b18
 8002ff8:	44000000 	.word	0x44000000
 8002ffc:	24006154 	.word	0x24006154
 8003000:	40490fdb 	.word	0x40490fdb
 8003004:	24006144 	.word	0x24006144
 8003008:	240072dc 	.word	0x240072dc
 800300c:	240072e0 	.word	0x240072e0
 8003010:	3f99999a 	.word	0x3f99999a
 8003014:	24007b0c 	.word	0x24007b0c

08003018 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8003018:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 800301a:	2900      	cmp	r1, #0
 800301c:	d07b      	beq.n	8003116 <SDR_CWPeak+0xfe>
 800301e:	1e4b      	subs	r3, r1, #1
 8003020:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8003130 <SDR_CWPeak+0x118>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003024:	493c      	ldr	r1, [pc, #240]	; (8003118 <SDR_CWPeak+0x100>)
 8003026:	3010      	adds	r0, #16
 8003028:	4a3c      	ldr	r2, [pc, #240]	; (800311c <SDR_CWPeak+0x104>)
 800302a:	ed9c 7a00 	vldr	s14, [ip]
 800302e:	edd1 6a00 	vldr	s13, [r1]
 8003032:	edd2 5a00 	vldr	s11, [r2]
{
 8003036:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003038:	4c39      	ldr	r4, [pc, #228]	; (8003120 <SDR_CWPeak+0x108>)
 800303a:	4f3a      	ldr	r7, [pc, #232]	; (8003124 <SDR_CWPeak+0x10c>)
 800303c:	edd4 4a00 	vldr	s9, [r4]
 8003040:	4d39      	ldr	r5, [pc, #228]	; (8003128 <SDR_CWPeak+0x110>)
 8003042:	4e3a      	ldr	r6, [pc, #232]	; (800312c <SDR_CWPeak+0x114>)
 8003044:	eef1 2a64 	vneg.f32	s5, s9
 8003048:	ed97 3a00 	vldr	s6, [r7]
 800304c:	ed95 6a00 	vldr	s12, [r5]
 8003050:	ed96 5a00 	vldr	s10, [r6]
 8003054:	ee66 4ac7 	vnmul.f32	s9, s13, s14
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003058:	ed50 7a03 	vldr	s15, [r0, #-12]
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800305c:	ee26 4ac5 	vnmul.f32	s8, s13, s10
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003060:	ed50 6a04 	vldr	s13, [r0, #-16]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003064:	ed10 7a02 	vldr	s14, [r0, #-8]
	while(blkCnt--)
 8003068:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800306a:	eeb0 5a64 	vmov.f32	s10, s9
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800306e:	ed50 3a05 	vldr	s7, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003072:	eea2 4a86 	vfma.f32	s8, s5, s12
	while(blkCnt--)
 8003076:	3b01      	subs	r3, #1
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003078:	eea2 5a83 	vfma.f32	s10, s5, s6
	while(blkCnt--)
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003080:	eea6 5aa5 	vfma.f32	s10, s13, s11
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003084:	eea5 4a25 	vfma.f32	s8, s10, s11
		*buf++ = y0;
 8003088:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800308c:	edd2 5a00 	vldr	s11, [r2]
 8003090:	edd1 6a00 	vldr	s13, [r1]
 8003094:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003098:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800309c:	ee25 7a87 	vmul.f32	s14, s11, s14
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030a0:	ee65 3aa3 	vmul.f32	s7, s11, s7
 80030a4:	eee6 7ac3 	vfms.f32	s15, s13, s6
 80030a8:	eea6 7ac5 	vfms.f32	s14, s13, s10
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030ac:	eef1 2a64 	vneg.f32	s5, s9
 80030b0:	eee4 7ac5 	vfms.f32	s15, s9, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030b4:	eeb0 5a63 	vmov.f32	s10, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030b8:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80030bc:	eea6 5ae7 	vfms.f32	s10, s13, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80030c4:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030c8:	eea4 5ac7 	vfms.f32	s10, s9, s14
 80030cc:	eeb0 3a45 	vmov.f32	s6, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030d0:	ee25 5a87 	vmul.f32	s10, s11, s14
 80030d4:	eea6 5ac4 	vfms.f32	s10, s13, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030d8:	eeb0 4a67 	vmov.f32	s8, s15
 80030dc:	eed6 7a86 	vfnms.f32	s15, s13, s12
 80030e0:	eea6 4ac6 	vfms.f32	s8, s13, s12
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030e4:	ee25 6a83 	vmul.f32	s12, s11, s6
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030e8:	eea4 5aa7 	vfma.f32	s10, s9, s15
 80030ec:	eea6 6ac4 	vfms.f32	s12, s13, s8
		*buf++ = y0;
 80030f0:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 80030f4:	ed00 5a06 	vstr	s10, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030f8:	eea4 6ac5 	vfms.f32	s12, s9, s10
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 80030fc:	ed00 6a05 	vstr	s12, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 8003100:	d1a8      	bne.n	8003054 <SDR_CWPeak+0x3c>
 8003102:	ed87 3a00 	vstr	s6, [r7]
 8003106:	ed86 5a00 	vstr	s10, [r6]
 800310a:	ed85 6a00 	vstr	s12, [r5]
 800310e:	ed8c 7a00 	vstr	s14, [ip]
	}
}
 8003112:	bcf0      	pop	{r4, r5, r6, r7}
 8003114:	4770      	bx	lr
 8003116:	4770      	bx	lr
 8003118:	240072e0 	.word	0x240072e0
 800311c:	24007b0c 	.word	0x24007b0c
 8003120:	240072dc 	.word	0x240072dc
 8003124:	240005e4 	.word	0x240005e4
 8003128:	240005e8 	.word	0x240005e8
 800312c:	240005f0 	.word	0x240005f0
 8003130:	240005ec 	.word	0x240005ec

08003134 <SDR_demodAM_AGC>:

#ifdef RECEIVE_AM

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 8003138:	4b3c      	ldr	r3, [pc, #240]	; (800322c <SDR_demodAM_AGC+0xf8>)
{
 800313a:	b082      	sub	sp, #8
 800313c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800324c <SDR_demodAM_AGC+0x118>
 8003140:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
			hangcnt = Hcount[AM];
 8003144:	881c      	ldrh	r4, [r3, #0]
 8003146:	ed98 7a00 	vldr	s14, [r8]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800314a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8003230 <SDR_demodAM_AGC+0xfc>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800314e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8003234 <SDR_demodAM_AGC+0x100>
 8003152:	4f39      	ldr	r7, [pc, #228]	; (8003238 <SDR_demodAM_AGC+0x104>)
 8003154:	4a39      	ldr	r2, [pc, #228]	; (800323c <SDR_demodAM_AGC+0x108>)
 8003156:	4d3a      	ldr	r5, [pc, #232]	; (8003240 <SDR_demodAM_AGC+0x10c>)
 8003158:	4e3a      	ldr	r6, [pc, #232]	; (8003244 <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 800315a:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8003250 <SDR_demodAM_AGC+0x11c>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800315e:	edd0 7a01 	vldr	s15, [r0, #4]
			hangcnt = Hcount[AM];
 8003162:	4623      	mov	r3, r4
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003164:	edd0 6a00 	vldr	s13, [r0]
 8003168:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800316c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003170:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8003174:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8003178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8003180:	bfa8      	it	ge
 8003182:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 8003186:	edd2 7a00 	vldr	s15, [r2]
      *pOut = 0.0f;
 800318a:	bfb8      	it	lt
 800318c:	eef0 5a64 	vmovlt.f32	s11, s9
 8003190:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	d52c      	bpl.n	80031f4 <SDR_demodAM_AGC+0xc0>
			hangcnt = Hcount[AM];
 800319a:	eef0 7a65 	vmov.f32	s15, s11
			pk = audiotmp;
 800319e:	edc2 5a00 	vstr	s11, [r2]
			hangcnt = Hcount[AM];
 80031a2:	602c      	str	r4, [r5, #0]
		audiotmp /= max(pk, AgcThreshold);
 80031a4:	ed96 6a00 	vldr	s12, [r6]
 80031a8:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 80031ac:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031b0:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 80031b4:	edc7 6a00 	vstr	s13, [r7]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031b8:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 80031bc:	b9e3      	cbnz	r3, 80031f8 <SDR_demodAM_AGC+0xc4>
			pk  *= Decay[AM];
 80031be:	edde 6a00 	vldr	s13, [lr]
	for(k=j=0; k<BSIZE*2; k+=2)
 80031c2:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031c4:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 80031c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031cc:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80031d0:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80031d6:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 80031da:	edc2 6a00 	vstr	s13, [r2]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031de:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80031e2:	d1bc      	bne.n	800315e <SDR_demodAM_AGC+0x2a>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <SDR_demodAM_AGC+0x114>)
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	ed88 7a00 	vstr	s14, [r8]
 80031ec:	601a      	str	r2, [r3, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80031ee:	b002      	add	sp, #8
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(hangcnt == 0)
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	e7d5      	b.n	80031a4 <SDR_demodAM_AGC+0x70>
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031f8:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80031fc:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031fe:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003202:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003204:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 8003208:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800320c:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8003210:	d1a5      	bne.n	800315e <SDR_demodAM_AGC+0x2a>
	PeakAudioValue=pk;
 8003212:	490d      	ldr	r1, [pc, #52]	; (8003248 <SDR_demodAM_AGC+0x114>)
	if(hangcnt > 0)  hangcnt--;
 8003214:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	ed88 7a00 	vstr	s14, [r8]
 800321c:	600a      	str	r2, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 800321e:	dd01      	ble.n	8003224 <SDR_demodAM_AGC+0xf0>
 8003220:	3b01      	subs	r3, #1
 8003222:	602b      	str	r3, [r5, #0]
}
 8003224:	b002      	add	sp, #8
 8003226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800322a:	bf00      	nop
 800322c:	24005118 	.word	0x24005118
 8003230:	00000000 	.word	0x00000000
 8003234:	3f75c28f 	.word	0x3f75c28f
 8003238:	24007b08 	.word	0x24007b08
 800323c:	2400afec 	.word	0x2400afec
 8003240:	2400a44c 	.word	0x2400a44c
 8003244:	240006b4 	.word	0x240006b4
 8003248:	24006140 	.word	0x24006140
 800324c:	240005e0 	.word	0x240005e0
 8003250:	24000ed4 	.word	0x24000ed4

08003254 <SDR_demodSSB_CW_AGC>:
#endif

//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <SDR_demodSSB_CW_AGC+0xe8>)
 800325a:	f241 0c04 	movw	ip, #4100	; 0x1004
		if(pk < sav)
 800325e:	4c38      	ldr	r4, [pc, #224]	; (8003340 <SDR_demodSSB_CW_AGC+0xec>)
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003260:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003264:	4484      	add	ip, r0
 8003266:	f8b3 8002 	ldrh.w	r8, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 800326a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800326e:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 8003270:	edd4 7a00 	vldr	s15, [r4]
 8003274:	4d33      	ldr	r5, [pc, #204]	; (8003344 <SDR_demodSSB_CW_AGC+0xf0>)
 8003276:	4f34      	ldr	r7, [pc, #208]	; (8003348 <SDR_demodSSB_CW_AGC+0xf4>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003278:	4e34      	ldr	r6, [pc, #208]	; (800334c <SDR_demodSSB_CW_AGC+0xf8>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800327a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8003358 <SDR_demodSSB_CW_AGC+0x104>
 800327e:	e011      	b.n	80032a4 <SDR_demodSSB_CW_AGC+0x50>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003280:	7830      	ldrb	r0, [r6, #0]
 8003282:	2803      	cmp	r0, #3
 8003284:	d050      	beq.n	8003328 <SDR_demodSSB_CW_AGC+0xd4>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003286:	2801      	cmp	r0, #1
 8003288:	ed94 7a00 	vldr	s14, [r4]
 800328c:	bf0c      	ite	eq
 800328e:	edda 7a01 	vldreq	s15, [sl, #4]
 8003292:	edda 7a02 	vldrne	s15, [sl, #8]
 8003296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329a:	edc4 7a00 	vstr	s15, [r4]
	for(k=j=0; k<BSIZE*2; k+=2)
 800329e:	3308      	adds	r3, #8
 80032a0:	459c      	cmp	ip, r3
 80032a2:	d02b      	beq.n	80032fc <SDR_demodSSB_CW_AGC+0xa8>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80032a4:	ed93 7a00 	vldr	s14, [r3]
 80032a8:	ed53 6a01 	vldr	s13, [r3, #-4]
 80032ac:	ee27 7a07 	vmul.f32	s14, s14, s14
 80032b0:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80032b4:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 80032b8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d528      	bpl.n	8003314 <SDR_demodSSB_CW_AGC+0xc0>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80032c2:	7830      	ldrb	r0, [r6, #0]
			pk = sav;
 80032c4:	ed84 6a00 	vstr	s12, [r4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80032c8:	2803      	cmp	r0, #3
 80032ca:	d025      	beq.n	8003318 <SDR_demodSSB_CW_AGC+0xc4>
 80032cc:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80032d0:	2801      	cmp	r0, #1
 80032d2:	bf0c      	ite	eq
 80032d4:	4642      	moveq	r2, r8
 80032d6:	464a      	movne	r2, r9
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80032d8:	ed53 6a01 	vldr	s13, [r3, #-4]
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80032dc:	602a      	str	r2, [r5, #0]
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80032de:	ed97 7a00 	vldr	s14, [r7]
 80032e2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d0c6      	beq.n	8003280 <SDR_demodSSB_CW_AGC+0x2c>
	for(k=j=0; k<BSIZE*2; k+=2)
 80032f2:	3308      	adds	r3, #8
			if(CurrentMode == CW) pk  *= Decay[CW];
 80032f4:	edd4 7a00 	vldr	s15, [r4]
	for(k=j=0; k<BSIZE*2; k+=2)
 80032f8:	459c      	cmp	ip, r3
 80032fa:	d1d3      	bne.n	80032a4 <SDR_demodSSB_CW_AGC+0x50>
 80032fc:	4914      	ldr	r1, [pc, #80]	; (8003350 <SDR_demodSSB_CW_AGC+0xfc>)
		}
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 80032fe:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <SDR_demodSSB_CW_AGC+0x100>)
 8003302:	ed81 6a00 	vstr	s12, [r1]
 8003306:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800330a:	dd01      	ble.n	8003310 <SDR_demodSSB_CW_AGC+0xbc>
 800330c:	3a01      	subs	r2, #1
 800330e:	602a      	str	r2, [r5, #0]
}
 8003310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(hangcnt == 0)
 8003314:	682a      	ldr	r2, [r5, #0]
 8003316:	e7e2      	b.n	80032de <SDR_demodSSB_CW_AGC+0x8a>
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8003318:	ed53 6a01 	vldr	s13, [r3, #-4]
 800331c:	eef0 7a46 	vmov.f32	s15, s12
 8003320:	4672      	mov	r2, lr
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003322:	f8c5 e000 	str.w	lr, [r5]
 8003326:	e7da      	b.n	80032de <SDR_demodSSB_CW_AGC+0x8a>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003328:	ed94 7a00 	vldr	s14, [r4]
 800332c:	edda 7a03 	vldr	s15, [sl, #12]
 8003330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003334:	edc4 7a00 	vstr	s15, [r4]
 8003338:	e7b1      	b.n	800329e <SDR_demodSSB_CW_AGC+0x4a>
 800333a:	bf00      	nop
 800333c:	24005118 	.word	0x24005118
 8003340:	2400afec 	.word	0x2400afec
 8003344:	2400a44c 	.word	0x2400a44c
 8003348:	240006b4 	.word	0x240006b4
 800334c:	24000ed0 	.word	0x24000ed0
 8003350:	240005d8 	.word	0x240005d8
 8003354:	24006140 	.word	0x24006140
 8003358:	24000ed4 	.word	0x24000ed4
 800335c:	00000000 	.word	0x00000000

08003360 <make_kaiser>:
	return sum;
}

// Compute an entire Kaiser window
// More efficient than repeatedly calling kaiser(n,M,beta)
int make_kaiser(float * const window,unsigned int const M,float const beta){
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	ed2d 8b02 	vpush	{d8}
	assert(window != NULL);
 8003366:	2800      	cmp	r0, #0
 8003368:	f000 80a1 	beq.w	80034ae <make_kaiser+0x14e>
	if(window == NULL)
		return -1;
	// Precompute unchanging partial values
	float const numc = M_PI * beta;
 800336c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	for(int k=2;k<40;k++){
 8003370:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003372:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
	float sum = 1 + t;
 8003376:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	float const numc = M_PI * beta;
 800337a:	ed9f 4b51 	vldr	d4, [pc, #324]	; 80034c0 <make_kaiser+0x160>
		if(term < 1e-12 * sum)
 800337e:	ed9f 3b52 	vldr	d3, [pc, #328]	; 80034c8 <make_kaiser+0x168>
	float const numc = M_PI * beta;
 8003382:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003386:	eef7 1bc7 	vcvt.f32.f64	s3, d7
	const float t = 0.25 * x * x;
 800338a:	eeb7 7ae1 	vcvt.f64.f32	d7, s3
 800338e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003396:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 800339a:	ee75 5a25 	vadd.f32	s11, s10, s11
	float term = t;
 800339e:	eef0 7a45 	vmov.f32	s15, s10
 80033a2:	e002      	b.n	80033aa <make_kaiser+0x4a>
	for(int k=2;k<40;k++){
 80033a4:	3301      	adds	r3, #1
 80033a6:	2b28      	cmp	r3, #40	; 0x28
 80033a8:	d016      	beq.n	80033d8 <make_kaiser+0x78>
		term *= t/(k*k);
 80033aa:	fb03 f203 	mul.w	r2, r3, r3
 80033ae:	ee07 2a10 	vmov	s14, r2
 80033b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033b6:	eec5 6a07 	vdiv.f32	s13, s10, s14
 80033ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 80033be:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 80033c2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80033c6:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 80033ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80033ce:	eeb4 4bc6 	vcmpe.f64	d4, d6
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d5e5      	bpl.n	80033a4 <make_kaiser+0x44>
	float const inv_denom = 1. / i0(numc); // Inverse of denominator
	float const pc = 2.0 / (M-1);
 80033d8:	1e4d      	subs	r5, r1, #1
 80033da:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80033de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0

	// The window is symmetrical, so compute only half of it and mirror
	// this won't compute the middle value in an odd-length sequence
	for(int n = 0; n < M/2; n++){
 80033e2:	084c      	lsrs	r4, r1, #1
	float const pc = 2.0 / (M-1);
 80033e4:	ee07 5a90 	vmov	s15, r5
 80033e8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80033ec:	ee81 0a25 	vdiv.f32	s0, s2, s11
 80033f0:	ee84 7b06 	vdiv.f64	d7, d4, d6
 80033f4:	eef7 0bc7 	vcvt.f32.f64	s1, d7
	for(int n = 0; n < M/2; n++){
 80033f8:	d04d      	beq.n	8003496 <make_kaiser+0x136>
	const float t = 0.25 * x * x;
 80033fa:	eeb5 3b00 	vmov.f64	d3, #80	; 0x3e800000  0.250
 80033fe:	4686      	mov	lr, r0
		float const p = pc * n  - 1;
 8003400:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
	for(int n = 0; n < M/2; n++){
 8003404:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80034d0 <make_kaiser+0x170>
 8003408:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800340c:	2200      	movs	r2, #0
		if(term < 1e-12 * sum)
 800340e:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 80034c8 <make_kaiser+0x168>
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003412:	ee21 7a87 	vmul.f32	s14, s3, s14
	for(int k=2;k<40;k++){
 8003416:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003418:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800341c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003420:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003424:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 8003428:	ee75 5a01 	vadd.f32	s11, s10, s2
	float term = t;
 800342c:	eef0 7a45 	vmov.f32	s15, s10
 8003430:	e002      	b.n	8003438 <make_kaiser+0xd8>
	for(int k=2;k<40;k++){
 8003432:	3301      	adds	r3, #1
 8003434:	2b28      	cmp	r3, #40	; 0x28
 8003436:	d016      	beq.n	8003466 <make_kaiser+0x106>
		term *= t/(k*k);
 8003438:	fb03 f603 	mul.w	r6, r3, r3
 800343c:	ee07 6a10 	vmov	s14, r6
 8003440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003444:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8003448:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 800344c:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 8003450:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8003454:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 8003458:	ee26 6b04 	vmul.f64	d6, d6, d4
 800345c:	eeb4 2bc6 	vcmpe.f64	d2, d6
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	d5e5      	bpl.n	8003432 <make_kaiser+0xd2>
	for(int n = 0; n < M/2; n++){
 8003466:	3201      	adds	r2, #1
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003468:	ee65 5a80 	vmul.f32	s11, s11, s0
	for(int n = 0; n < M/2; n++){
 800346c:	42a2      	cmp	r2, r4
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800346e:	ecee 5a01 	vstmia	lr!, {s11}
 8003472:	ed6c 5a01 	vstmdb	ip!, {s11}
	for(int n = 0; n < M/2; n++){
 8003476:	d00e      	beq.n	8003496 <make_kaiser+0x136>
		float const p = pc * n  - 1;
 8003478:	ee07 2a90 	vmov	s15, r2
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800347c:	eef0 6a41 	vmov.f32	s13, s2
		float const p = pc * n  - 1;
 8003480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003484:	eef0 7a48 	vmov.f32	s15, s16
 8003488:	eee0 7a87 	vfma.f32	s15, s1, s14
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800348c:	eee7 6ae7 	vfms.f32	s13, s15, s15
 8003490:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8003494:	e7bd      	b.n	8003412 <make_kaiser+0xb2>
	}
	// If sequence length is odd, middle value is unity
	if(M & 1)
 8003496:	07cb      	lsls	r3, r1, #31
 8003498:	d505      	bpl.n	80034a6 <make_kaiser+0x146>
		window[(M-1)/2] = 1; // The -1 is actually unnecessary
 800349a:	086d      	lsrs	r5, r5, #1
 800349c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034a0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80034a4:	6003      	str	r3, [r0, #0]

	return 0;
}
 80034a6:	2000      	movs	r0, #0
 80034a8:	ecbd 8b02 	vpop	{d8}
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
	assert(window != NULL);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <make_kaiser+0x174>)
 80034b0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80034b4:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <make_kaiser+0x178>)
 80034b6:	4809      	ldr	r0, [pc, #36]	; (80034dc <make_kaiser+0x17c>)
 80034b8:	f00e ff46 	bl	8012348 <__assert_func>
 80034bc:	f3af 8000 	nop.w
 80034c0:	54442d18 	.word	0x54442d18
 80034c4:	400921fb 	.word	0x400921fb
 80034c8:	812dea11 	.word	0x812dea11
 80034cc:	3d719799 	.word	0x3d719799
 80034d0:	00000000 	.word	0x00000000
 80034d4:	080192d0 	.word	0x080192d0
 80034d8:	080192f8 	.word	0x080192f8
 80034dc:	080192e0 	.word	0x080192e0

080034e0 <SetMask>:
		float f;
		if(n <= N/2)
			f = (float)n / N;
		else
			f = (float)(n-N) / N;
		if(f >= low / AudioRate && f <= high /AudioRate)
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <SetMask+0xfc>)
	for(int n=0;n<N;n++){
 80034e2:	2200      	movs	r2, #0
 80034e4:	493e      	ldr	r1, [pc, #248]	; (80035e0 <SetMask+0x100>)
			FFTmask[n * 2] = 1024;
		else
			FFTmask[n * 2] = 0;
 80034e6:	2000      	movs	r0, #0
		if(f >= low / AudioRate && f <= high /AudioRate)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
			f = (float)(n-N) / N;
 80034ec:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80035e4 <SetMask+0x104>
		if(f >= low / AudioRate && f <= high /AudioRate)
 80034f0:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80034f4:	eec0 5aa7 	vdiv.f32	s11, s1, s15
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	float kaiser_window[M];
 80034fc:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
			FFTmask[n * 2] = 1024;
 8003500:	f04f 4489 	mov.w	r4, #1149239296	; 0x44800000
	float kaiser_window[M];
 8003504:	466d      	mov	r5, sp
	for(int n=0;n<N;n++){
 8003506:	e00c      	b.n	8003522 <SetMask+0x42>
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003508:	eef4 5ae7 	vcmpe.f32	s11, s15
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	db1d      	blt.n	800354e <SetMask+0x6e>
	for(int n=0;n<N;n++){
 8003512:	3201      	adds	r2, #1
			FFTmask[n * 2] = 1024;
 8003514:	f841 4c04 	str.w	r4, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003518:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 800351c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003520:	d01d      	beq.n	800355e <SetMask+0x7e>
			f = (float)n / N;
 8003522:	ee07 2a90 	vmov	s15, r2
			f = (float)(n-N) / N;
 8003526:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
		if(n <= N/2)
 800352a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			f = (float)n / N;
 800352e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			f = (float)(n-N) / N;
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f = (float)n / N;
 800353a:	bfd4      	ite	le
 800353c:	ee67 7a06 	vmulle.f32	s15, s14, s12
			f = (float)(n-N) / N;
 8003540:	ee67 7a86 	vmulgt.f32	s15, s15, s12
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003544:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d9dc      	bls.n	8003508 <SetMask+0x28>
	for(int n=0;n<N;n++){
 800354e:	3201      	adds	r2, #1
			FFTmask[n * 2] = 0;
 8003550:	f841 0c04 	str.w	r0, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003554:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 8003558:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800355c:	d1e1      	bne.n	8003522 <SetMask+0x42>
	}


	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, INVERSEFFT, NOREVERSE);
 800355e:	2301      	movs	r3, #1
 8003560:	4c21      	ldr	r4, [pc, #132]	; (80035e8 <SetMask+0x108>)
 8003562:	4822      	ldr	r0, [pc, #136]	; (80035ec <SetMask+0x10c>)
 8003564:	461a      	mov	r2, r3
 8003566:	4621      	mov	r1, r4
 8003568:	f7fd fc06 	bl	8000d78 <arm_cfft_f32>
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 800356c:	f240 2101 	movw	r1, #513	; 0x201
 8003570:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003574:	4628      	mov	r0, r5
 8003576:	f7ff fef3 	bl	8003360 <make_kaiser>


	// Round trip through FFT/IFFT scales by N
	float const gain = 1./N;
	// Shift to beginning of buffer to make causal; apply window and gain
	for(int n = M - 1; n >= 0; n--){
 800357a:	f605 0004 	addw	r0, r5, #2052	; 0x804
 800357e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 8003582:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003586:	eddf 6a17 	vldr	s13, [pc, #92]	; 80035e4 <SetMask+0x104>
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 800358a:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800358e:	ed70 7a01 	vldmdb	r0!, {s15}
 8003592:	4615      	mov	r5, r2
	for(int n = M - 1; n >= 0; n--){
 8003594:	3a08      	subs	r2, #8
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 8003596:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 800359a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for(int n = M - 1; n >= 0; n--){
 800359e:	42a5      	cmp	r5, r4
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 80035a0:	f101 31ff 	add.w	r1, r1, #4294967295
 80035a4:	ed9c 7a00 	vldr	s14, [ip]
 80035a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ac:	ed82 7a02 	vstr	s14, [r2, #8]
	//	FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1];
		FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1] * kaiser_window[n] * gain;
 80035b0:	ed9c 7a01 	vldr	s14, [ip, #4]
 80035b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b8:	edc2 7a03 	vstr	s15, [r2, #12]
	for(int n = M - 1; n >= 0; n--){
 80035bc:	d1e5      	bne.n	800358a <SetMask+0xaa>
	}
	// Pad with zeroes on right side
	memset(FFTmask + M * 2,0,(N-M)* 2 * sizeof(*FFTmask));
 80035be:	f640 72f8 	movw	r2, #4088	; 0xff8
 80035c2:	2100      	movs	r1, #0
 80035c4:	480a      	ldr	r0, [pc, #40]	; (80035f0 <SetMask+0x110>)
 80035c6:	f00f fd0a 	bl	8012fde <memset>


	// Now back to frequency domain
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, DIRECTFFT, NOREVERSE);
 80035ca:	2301      	movs	r3, #1
 80035cc:	2200      	movs	r2, #0
 80035ce:	4906      	ldr	r1, [pc, #24]	; (80035e8 <SetMask+0x108>)
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <SetMask+0x10c>)
 80035d2:	f7fd fbd1 	bl	8000d78 <arm_cfft_f32>

			blkCnt--;
		}
	}
#endif
}
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdb0      	pop	{r4, r5, r7, pc}
 80035da:	bf00      	nop
 80035dc:	24000ec0 	.word	0x24000ec0
 80035e0:	20006804 	.word	0x20006804
 80035e4:	3a800000 	.word	0x3a800000
 80035e8:	20006800 	.word	0x20006800
 80035ec:	080191e8 	.word	0x080191e8
 80035f0:	20007808 	.word	0x20007808

080035f4 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 80035f4:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 80035f6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 80035fa:	b082      	sub	sp, #8
 80035fc:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8003604:	f7fc ff1c 	bl	8000440 <strlen>
	if( call_len > 6 ) {
 8003608:	2806      	cmp	r0, #6
 800360a:	f200 808e 	bhi.w	800372a <pack_call+0x136>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 800360e:	78a2      	ldrb	r2, [r4, #2]
 8003610:	4b58      	ldr	r3, [pc, #352]	; (8003774 <pack_call+0x180>)
 8003612:	5c9a      	ldrb	r2, [r3, r2]
 8003614:	0752      	lsls	r2, r2, #29
 8003616:	d57b      	bpl.n	8003710 <pack_call+0x11c>
		for (i=0; i<call_len; i++) {
 8003618:	b120      	cbz	r0, 8003624 <pack_call+0x30>
			call6[i]=callsign[i];
 800361a:	4602      	mov	r2, r0
 800361c:	4621      	mov	r1, r4
 800361e:	4668      	mov	r0, sp
 8003620:	f00f fdd0 	bl	80131c4 <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8003624:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 8003628:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800362c:	fa5f fe8e 	uxtb.w	lr, lr
 8003630:	f1be 0f09 	cmp.w	lr, #9
 8003634:	d908      	bls.n	8003648 <pack_call+0x54>
	if( ch == 32 ) {  //space
 8003636:	2b20      	cmp	r3, #32
 8003638:	f000 8095 	beq.w	8003766 <pack_call+0x172>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800363c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003640:	2a19      	cmp	r2, #25
 8003642:	d975      	bls.n	8003730 <pack_call+0x13c>
	return -1;
 8003644:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003648:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 800364c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8003650:	b2e4      	uxtb	r4, r4
 8003652:	2c09      	cmp	r4, #9
 8003654:	d907      	bls.n	8003666 <pack_call+0x72>
	if( ch == 32 ) {  //space
 8003656:	2b20      	cmp	r3, #32
 8003658:	f000 8083 	beq.w	8003762 <pack_call+0x16e>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800365c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003660:	2a19      	cmp	r2, #25
 8003662:	d977      	bls.n	8003754 <pack_call+0x160>
	return -1;
 8003664:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003666:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 800366a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800366e:	b2c9      	uxtb	r1, r1
 8003670:	2909      	cmp	r1, #9
 8003672:	d906      	bls.n	8003682 <pack_call+0x8e>
	if( ch == 32 ) {  //space
 8003674:	2b20      	cmp	r3, #32
 8003676:	d072      	beq.n	800375e <pack_call+0x16a>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003678:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800367c:	2a19      	cmp	r2, #25
 800367e:	d966      	bls.n	800374e <pack_call+0x15a>
	return -1;
 8003680:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003682:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003686:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	2a09      	cmp	r2, #9
 800368e:	d906      	bls.n	800369e <pack_call+0xaa>
	if( ch == 32 ) {  //space
 8003690:	2b20      	cmp	r3, #32
 8003692:	d062      	beq.n	800375a <pack_call+0x166>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003694:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003698:	2a19      	cmp	r2, #25
 800369a:	d955      	bls.n	8003748 <pack_call+0x154>
	return -1;
 800369c:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 800369e:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 80036a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	d906      	bls.n	80036ba <pack_call+0xc6>
	if( ch == 32 ) {  //space
 80036ac:	2820      	cmp	r0, #32
 80036ae:	d05d      	beq.n	800376c <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80036b4:	2b19      	cmp	r3, #25
 80036b6:	d93f      	bls.n	8003738 <pack_call+0x144>
	return -1;
 80036b8:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036ba:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 80036be:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 80036c2:	b2c0      	uxtb	r0, r0
 80036c4:	2809      	cmp	r0, #9
 80036c6:	d907      	bls.n	80036d8 <pack_call+0xe4>
	if( ch == 32 ) {  //space
 80036c8:	f1bc 0f20 	cmp.w	ip, #32
 80036cc:	d050      	beq.n	8003770 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036ce:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 80036d2:	2819      	cmp	r0, #25
 80036d4:	d933      	bls.n	800373e <pack_call+0x14a>
	return -1;
 80036d6:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 80036d8:	f04f 0c24 	mov.w	ip, #36	; 0x24
 80036dc:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 80036e0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80036e4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
	n = n*27+call6[3]-10;
 80036e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80036ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80036f0:	390a      	subs	r1, #10
 80036f2:	440a      	add	r2, r1
	n = n*27+call6[4]-10;
 80036f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80036f8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80036fc:	3a0a      	subs	r2, #10
 80036fe:	4413      	add	r3, r2
	n = n*27+call6[5]-10;
 8003700:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003704:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003708:	3b0a      	subs	r3, #10
 800370a:	4418      	add	r0, r3
	return n;
}
 800370c:	b002      	add	sp, #8
 800370e:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8003710:	7862      	ldrb	r2, [r4, #1]
 8003712:	5c9b      	ldrb	r3, [r3, r2]
 8003714:	075b      	lsls	r3, r3, #29
 8003716:	d585      	bpl.n	8003624 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 8003718:	2800      	cmp	r0, #0
 800371a:	d083      	beq.n	8003624 <pack_call+0x30>
			call6[i]=callsign[i-1];
 800371c:	4602      	mov	r2, r0
 800371e:	4621      	mov	r1, r4
 8003720:	f10d 0001 	add.w	r0, sp, #1
 8003724:	f00f fd4e 	bl	80131c4 <memcpy>
 8003728:	e77c      	b.n	8003624 <pack_call+0x30>
		return 0;
 800372a:	2000      	movs	r0, #0
}
 800372c:	b002      	add	sp, #8
 800372e:	bd10      	pop	{r4, pc}
		return ch-55;
 8003730:	3b37      	subs	r3, #55	; 0x37
 8003732:	fa5f fe83 	uxtb.w	lr, r3
 8003736:	e787      	b.n	8003648 <pack_call+0x54>
 8003738:	3837      	subs	r0, #55	; 0x37
 800373a:	b2c3      	uxtb	r3, r0
 800373c:	e7bd      	b.n	80036ba <pack_call+0xc6>
 800373e:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 8003742:	fa5f f08c 	uxtb.w	r0, ip
 8003746:	e7c7      	b.n	80036d8 <pack_call+0xe4>
 8003748:	3b37      	subs	r3, #55	; 0x37
 800374a:	b2da      	uxtb	r2, r3
 800374c:	e7a7      	b.n	800369e <pack_call+0xaa>
 800374e:	3b37      	subs	r3, #55	; 0x37
 8003750:	b2d9      	uxtb	r1, r3
 8003752:	e796      	b.n	8003682 <pack_call+0x8e>
 8003754:	3b37      	subs	r3, #55	; 0x37
 8003756:	b2dc      	uxtb	r4, r3
 8003758:	e785      	b.n	8003666 <pack_call+0x72>
		return 36;
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	e79f      	b.n	800369e <pack_call+0xaa>
 800375e:	2124      	movs	r1, #36	; 0x24
 8003760:	e78f      	b.n	8003682 <pack_call+0x8e>
 8003762:	2424      	movs	r4, #36	; 0x24
 8003764:	e77f      	b.n	8003666 <pack_call+0x72>
 8003766:	f04f 0e24 	mov.w	lr, #36	; 0x24
 800376a:	e76d      	b.n	8003648 <pack_call+0x54>
 800376c:	2324      	movs	r3, #36	; 0x24
 800376e:	e7a4      	b.n	80036ba <pack_call+0xc6>
 8003770:	2024      	movs	r0, #36	; 0x24
 8003772:	e7b1      	b.n	80036d8 <pack_call+0xe4>
 8003774:	08019914 	.word	0x08019914

08003778 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 800377c:	2300      	movs	r3, #0
{
 800377e:	b0ed      	sub	sp, #436	; 0x1b4
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003780:	4fb0      	ldr	r7, [pc, #704]	; (8003a44 <get_wspr_channel_symbols+0x2cc>)
{
 8003782:	4605      	mov	r5, r0
	memset(message,0,sizeof(char)*23);
 8003784:	930b      	str	r3, [sp, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003786:	ae0d      	add	r6, sp, #52	; 0x34
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 8003788:	7804      	ldrb	r4, [r0, #0]
{
 800378a:	9103      	str	r1, [sp, #12]
	memset(message,0,sizeof(char)*23);
 800378c:	f8cd 302f 	str.w	r3, [sp, #47]	; 0x2f
 8003790:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003794:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003798:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800379a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800379c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800379e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80037a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80037a4:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 80037a8:	b154      	cbz	r4, 80037c0 <get_wspr_channel_symbols+0x48>
 80037aa:	aa07      	add	r2, sp, #28
 80037ac:	1c6b      	adds	r3, r5, #1
 80037ae:	e000      	b.n	80037b2 <get_wspr_channel_symbols+0x3a>
 80037b0:	b134      	cbz	r4, 80037c0 <get_wspr_channel_symbols+0x48>
		message[i]=rawmessage[i];
 80037b2:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 80037b6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80037ba:	1b59      	subs	r1, r3, r5
 80037bc:	2918      	cmp	r1, #24
 80037be:	d1f7      	bne.n	80037b0 <get_wspr_channel_symbols+0x38>
		i++;
	}

	size_t i1=strcspn(message," ");
 80037c0:	49a1      	ldr	r1, [pc, #644]	; (8003a48 <get_wspr_channel_symbols+0x2d0>)
 80037c2:	a807      	add	r0, sp, #28
 80037c4:	f00f fc13 	bl	8012fee <strcspn>
	size_t i2=strcspn(message,"/");
 80037c8:	49a0      	ldr	r1, [pc, #640]	; (8003a4c <get_wspr_channel_symbols+0x2d4>)
	size_t i1=strcspn(message," ");
 80037ca:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 80037cc:	a807      	add	r0, sp, #28
 80037ce:	f00f fc0e 	bl	8012fee <strcspn>
	size_t i3=strcspn(message,"<");
 80037d2:	499f      	ldr	r1, [pc, #636]	; (8003a50 <get_wspr_channel_symbols+0x2d8>)
	size_t i2=strcspn(message,"/");
 80037d4:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 80037d6:	a807      	add	r0, sp, #28
 80037d8:	f00f fc09 	bl	8012fee <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80037dc:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 80037de:	499d      	ldr	r1, [pc, #628]	; (8003a54 <get_wspr_channel_symbols+0x2dc>)
	size_t i3=strcspn(message,"<");
 80037e0:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 80037e2:	a807      	add	r0, sp, #28
 80037e4:	f00f fc03 	bl	8012fee <strcspn>
 80037e8:	4607      	mov	r7, r0
	size_t mlen=strlen(message);
 80037ea:	a807      	add	r0, sp, #28
 80037ec:	f7fc fe28 	bl	8000440 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80037f0:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 80037f2:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80037f4:	d804      	bhi.n	8003800 <get_wspr_channel_symbols+0x88>
 80037f6:	4286      	cmp	r6, r0
 80037f8:	d102      	bne.n	8003800 <get_wspr_channel_symbols+0x88>
 80037fa:	4285      	cmp	r5, r0
 80037fc:	f000 8132 	beq.w	8003a64 <get_wspr_channel_symbols+0x2ec>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8003800:	b90d      	cbnz	r5, 8003806 <get_wspr_channel_symbols+0x8e>
 8003802:	429f      	cmp	r7, r3
 8003804:	d37e      	bcc.n	8003904 <get_wspr_channel_symbols+0x18c>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8003806:	429e      	cmp	r6, r3
 8003808:	d303      	bcc.n	8003812 <get_wspr_channel_symbols+0x9a>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 800380a:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 800380c:	b06d      	add	sp, #436	; 0x1b4
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 8003812:	498d      	ldr	r1, [pc, #564]	; (8003a48 <get_wspr_channel_symbols+0x2d0>)
 8003814:	a807      	add	r0, sp, #28
 8003816:	f00f fbfb 	bl	8013010 <strtok>
 800381a:	4605      	mov	r5, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 800381c:	2e00      	cmp	r6, #0
 800381e:	d0f4      	beq.n	800380a <get_wspr_channel_symbols+0x92>
 8003820:	f7fc fe0e 	bl	8000440 <strlen>
 8003824:	42b0      	cmp	r0, r6
 8003826:	d3f0      	bcc.n	800380a <get_wspr_channel_symbols+0x92>
		powstr = strtok (NULL," ");
 8003828:	4987      	ldr	r1, [pc, #540]	; (8003a48 <get_wspr_channel_symbols+0x2d0>)
 800382a:	2000      	movs	r0, #0
 800382c:	f00f fbf0 	bl	8013010 <strtok>
		int power = atoi (powstr);
 8003830:	f00e fda8 	bl	8012384 <atoi>
		if( power < 0 ) power=0;
 8003834:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <get_wspr_channel_symbols+0x2e0>)
 8003838:	bfa8      	it	ge
 800383a:	203c      	movge	r0, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 800383c:	4983      	ldr	r1, [pc, #524]	; (8003a4c <get_wspr_channel_symbols+0x2d4>)
 800383e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		power=power+nu[power%10];
 8003842:	fba3 2300 	umull	r2, r3, r3, r0
 8003846:	aa0d      	add	r2, sp, #52	; 0x34
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800384e:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8003852:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8003856:	4406      	add	r6, r0
	size_t i1 = strcspn(callsign,"/");
 8003858:	4628      	mov	r0, r5
 800385a:	f00f fbc8 	bl	8012fee <strcspn>
	if( callsign[i1+2] == 0 ) {
 800385e:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 8003862:	4607      	mov	r7, r0
	if( callsign[i1+2] == 0 ) {
 8003864:	f815 3008 	ldrb.w	r3, [r5, r8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 842b 	beq.w	80040c4 <get_wspr_channel_symbols+0x94c>
	} else if( callsign[i1+3]==0 ) {
 800386e:	eb05 0900 	add.w	r9, r5, r0
 8003872:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8502 	bne.w	8004280 <get_wspr_channel_symbols+0xb08>
		for (i=0; i<i1; i++) {
 800387c:	ab40      	add	r3, sp, #256	; 0x100
 800387e:	2800      	cmp	r0, #0
 8003880:	f000 857d 	beq.w	800437e <get_wspr_channel_symbols+0xc06>
 8003884:	461a      	mov	r2, r3
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	1c6b      	adds	r3, r5, #1
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	f240 854d 	bls.w	800432c <get_wspr_channel_symbols+0xbb4>
 8003892:	1e43      	subs	r3, r0, #1
 8003894:	2b05      	cmp	r3, #5
 8003896:	f240 8549 	bls.w	800432c <get_wspr_channel_symbols+0xbb4>
			call6[i]=callsign[i];
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	0782      	lsls	r2, r0, #30
 800389e:	9340      	str	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80038a0:	f020 0303 	bic.w	r3, r0, #3
 80038a4:	d017      	beq.n	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80038a6:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 80038aa:	5ce9      	ldrb	r1, [r5, r3]
 80038ac:	446a      	add	r2, sp
 80038ae:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	4290      	cmp	r0, r2
 80038b6:	d90e      	bls.n	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80038b8:	5ca9      	ldrb	r1, [r5, r2]
		for (i=0; i<i1; i++) {
 80038ba:	3302      	adds	r3, #2
			call6[i]=callsign[i];
 80038bc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
		for (i=0; i<i1; i++) {
 80038c0:	4298      	cmp	r0, r3
			call6[i]=callsign[i];
 80038c2:	446a      	add	r2, sp
 80038c4:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 80038c8:	d905      	bls.n	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80038ca:	5cea      	ldrb	r2, [r5, r3]
 80038cc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80038d0:	446b      	add	r3, sp
 80038d2:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 80038d6:	9802      	ldr	r0, [sp, #8]
 80038d8:	f7ff fe8c 	bl	80035f4 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80038dc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80038e0:	f815 2008 	ldrb.w	r2, [r5, r8]
		*n=pack_call(call6);
 80038e4:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80038e6:	3b30      	subs	r3, #48	; 0x30
 80038e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ec:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 80038f0:	f64e 234a 	movw	r3, #59978	; 0xea4a
 80038f4:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80038f6:	01db      	lsls	r3, r3, #7
		*nadd=1;
 80038f8:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 80038fa:	f106 0541 	add.w	r5, r6, #65	; 0x41
 80038fe:	4405      	add	r5, r0
 8003900:	441d      	add	r5, r3
		n=n1;
 8003902:	e110      	b.n	8003b26 <get_wspr_channel_symbols+0x3ae>
		callsign=strtok(message,"<> ");
 8003904:	4955      	ldr	r1, [pc, #340]	; (8003a5c <get_wspr_channel_symbols+0x2e4>)
 8003906:	a807      	add	r0, sp, #28
 8003908:	f00f fb82 	bl	8013010 <strtok>
		grid=strtok(NULL," ");
 800390c:	494e      	ldr	r1, [pc, #312]	; (8003a48 <get_wspr_channel_symbols+0x2d0>)
		callsign=strtok(message,"<> ");
 800390e:	4607      	mov	r7, r0
		grid=strtok(NULL," ");
 8003910:	2000      	movs	r0, #0
 8003912:	f00f fb7d 	bl	8013010 <strtok>
		powstr=strtok(NULL," ");
 8003916:	494c      	ldr	r1, [pc, #304]	; (8003a48 <get_wspr_channel_symbols+0x2d0>)
		grid=strtok(NULL," ");
 8003918:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 800391a:	2000      	movs	r0, #0
 800391c:	f00f fb78 	bl	8013010 <strtok>
		int power = atoi(powstr);
 8003920:	f00e fd30 	bl	8012384 <atoi>
		if( power < 0 ) power=0;
 8003924:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8003926:	4b4c      	ldr	r3, [pc, #304]	; (8003a58 <get_wspr_channel_symbols+0x2e0>)
 8003928:	bfa8      	it	ge
 800392a:	203c      	movge	r0, #60	; 0x3c
 800392c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003930:	fba3 2300 	umull	r2, r3, r3, r0
 8003934:	aa0d      	add	r2, sp, #52	; 0x34
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800393c:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8003940:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003944:	4405      	add	r5, r0
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8003946:	4638      	mov	r0, r7
 8003948:	f7fc fd7a 	bl	8000440 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800394c:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <get_wspr_channel_symbols+0x2e8>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 800394e:	07ba      	lsls	r2, r7, #30
		ntype=-(power+1);
 8003950:	ea6f 0505 	mvn.w	r5, r5
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003954:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8003956:	f000 8282 	beq.w	8003e5e <get_wspr_channel_symbols+0x6e6>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 800395a:	07fe      	lsls	r6, r7, #31
 800395c:	f140 8350 	bpl.w	8004000 <get_wspr_channel_symbols+0x888>
		while (length > 12)
 8003960:	280c      	cmp	r0, #12
 8003962:	f240 853a 	bls.w	80043da <get_wspr_channel_symbols+0xc62>
 8003966:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800396a:	461a      	mov	r2, r3
 800396c:	4619      	mov	r1, r3
 800396e:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 8003970:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8003974:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8003976:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 800397a:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			a += ((uint32_t)k[2])<<16;
 800397e:	f816 7c0a 	ldrb.w	r7, [r6, #-10]
			c += ((uint32_t)k[11])<<24;
 8003982:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8003986:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8003988:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			c += k[8];
 800398c:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			a += ((uint32_t)k[2])<<16;
 8003990:	ea4f 4707 	mov.w	r7, r7, lsl #16
			c += ((uint32_t)k[11])<<24;
 8003994:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8003996:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 800399a:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 800399e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 80039a2:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 80039a6:	4472      	add	r2, lr
			a += k[0];
 80039a8:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 80039ac:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 80039b0:	4477      	add	r7, lr
			b += ((uint32_t)k[5])<<8;
 80039b2:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 80039b6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 80039ba:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 80039be:	eb07 670e 	add.w	r7, r7, lr, lsl #24
 80039c2:	eba7 0702 	sub.w	r7, r7, r2
 80039c6:	4467      	add	r7, ip
			b += k[4];
 80039c8:	f816 cc08 	ldrb.w	ip, [r6, #-8]
			b += ((uint32_t)k[7])<<24;
 80039cc:	4463      	add	r3, ip
 80039ce:	f816 cc05 	ldrb.w	ip, [r6, #-5]
			mix(a,b,c);
 80039d2:	ea87 7732 	eor.w	r7, r7, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 80039d6:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 80039da:	440b      	add	r3, r1
			mix(a,b,c);
 80039dc:	441a      	add	r2, r3
 80039de:	eba3 0307 	sub.w	r3, r3, r7
 80039e2:	ea83 63b7 	eor.w	r3, r3, r7, ror #26
 80039e6:	eb07 0102 	add.w	r1, r7, r2
 80039ea:	eba2 0203 	sub.w	r2, r2, r3
 80039ee:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 80039f2:	440b      	add	r3, r1
 80039f4:	eba1 0102 	sub.w	r1, r1, r2
 80039f8:	ea81 4732 	eor.w	r7, r1, r2, ror #16
 80039fc:	441a      	add	r2, r3
 80039fe:	eba3 0307 	sub.w	r3, r3, r7
 8003a02:	eb07 0c02 	add.w	ip, r7, r2
 8003a06:	ea83 3177 	eor.w	r1, r3, r7, ror #13
 8003a0a:	4637      	mov	r7, r6
		while (length > 12)
 8003a0c:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003a10:	eba2 0201 	sub.w	r2, r2, r1
 8003a14:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003a18:	4461      	add	r1, ip
		while (length > 12)
 8003a1a:	d8a9      	bhi.n	8003970 <get_wspr_channel_symbols+0x1f8>
 8003a1c:	4663      	mov	r3, ip
		switch(length)                   /* all the case statements fall through */
 8003a1e:	3801      	subs	r0, #1
 8003a20:	280b      	cmp	r0, #11
 8003a22:	f200 829c 	bhi.w	8003f5e <get_wspr_channel_symbols+0x7e6>
 8003a26:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a2a:	027f      	.short	0x027f
 8003a2c:	0279027c 	.word	0x0279027c
 8003a30:	02740276 	.word	0x02740276
 8003a34:	026e0271 	.word	0x026e0271
 8003a38:	0269026b 	.word	0x0269026b
 8003a3c:	02630266 	.word	0x02630266
 8003a40:	0260      	.short	0x0260
 8003a42:	bf00      	nop
 8003a44:	080163a8 	.word	0x080163a8
 8003a48:	080194dc 	.word	0x080194dc
 8003a4c:	08019304 	.word	0x08019304
 8003a50:	08019308 	.word	0x08019308
 8003a54:	0801930c 	.word	0x0801930c
 8003a58:	cccccccd 	.word	0xcccccccd
 8003a5c:	08019310 	.word	0x08019310
 8003a60:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8003a64:	49cb      	ldr	r1, [pc, #812]	; (8003d94 <get_wspr_channel_symbols+0x61c>)
 8003a66:	a807      	add	r0, sp, #28
 8003a68:	f00f fad2 	bl	8013010 <strtok>
		grid = strtok(NULL," ");
 8003a6c:	49c9      	ldr	r1, [pc, #804]	; (8003d94 <get_wspr_channel_symbols+0x61c>)
		callsign = strtok(message," ");
 8003a6e:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8003a70:	2000      	movs	r0, #0
 8003a72:	f00f facd 	bl	8013010 <strtok>
		powstr = strtok(NULL," ");
 8003a76:	49c7      	ldr	r1, [pc, #796]	; (8003d94 <get_wspr_channel_symbols+0x61c>)
		grid = strtok(NULL," ");
 8003a78:	4605      	mov	r5, r0
		powstr = strtok(NULL," ");
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f00f fac8 	bl	8013010 <strtok>
		int power = atoi(powstr);
 8003a80:	f00e fc80 	bl	8012384 <atoi>
 8003a84:	4607      	mov	r7, r0
		n = pack_call(callsign);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fdb4 	bl	80035f4 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8003a8c:	782b      	ldrb	r3, [r5, #0]
		n = pack_call(callsign);
 8003a8e:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8003a90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	2a09      	cmp	r2, #9
 8003a98:	d907      	bls.n	8003aaa <get_wspr_channel_symbols+0x332>
	if( ch == 32 ) {  //space
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	f000 8439 	beq.w	8004312 <get_wspr_channel_symbols+0xb9a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003aa0:	3b41      	subs	r3, #65	; 0x41
 8003aa2:	b2da      	uxtb	r2, r3
	return -1;
 8003aa4:	2a12      	cmp	r2, #18
 8003aa6:	bf28      	it	cs
 8003aa8:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003aaa:	7869      	ldrb	r1, [r5, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8003aac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d907      	bls.n	8003ac6 <get_wspr_channel_symbols+0x34e>
	if( ch == 32 ) {  //space
 8003ab6:	2920      	cmp	r1, #32
 8003ab8:	f000 8428 	beq.w	800430c <get_wspr_channel_symbols+0xb94>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003abc:	3941      	subs	r1, #65	; 0x41
 8003abe:	b2cb      	uxtb	r3, r1
	return -1;
 8003ac0:	2b12      	cmp	r3, #18
 8003ac2:	bf28      	it	cs
 8003ac4:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003ac6:	78a9      	ldrb	r1, [r5, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8003ac8:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
 8003acc:	b2f6      	uxtb	r6, r6
 8003ace:	2e09      	cmp	r6, #9
 8003ad0:	d907      	bls.n	8003ae2 <get_wspr_channel_symbols+0x36a>
	if( ch == 32 ) {  //space
 8003ad2:	2920      	cmp	r1, #32
 8003ad4:	f000 8417 	beq.w	8004306 <get_wspr_channel_symbols+0xb8e>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003ad8:	3941      	subs	r1, #65	; 0x41
 8003ada:	b2ce      	uxtb	r6, r1
	return -1;
 8003adc:	2e12      	cmp	r6, #18
 8003ade:	bf28      	it	cs
 8003ae0:	26ff      	movcs	r6, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003ae2:	78e8      	ldrb	r0, [r5, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003ae4:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8003ae8:	b2c9      	uxtb	r1, r1
 8003aea:	2909      	cmp	r1, #9
 8003aec:	d907      	bls.n	8003afe <get_wspr_channel_symbols+0x386>
	if( ch == 32 ) {  //space
 8003aee:	2820      	cmp	r0, #32
 8003af0:	f000 8406 	beq.w	8004300 <get_wspr_channel_symbols+0xb88>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003af4:	3841      	subs	r0, #65	; 0x41
 8003af6:	b2c1      	uxtb	r1, r0
	return -1;
 8003af8:	2912      	cmp	r1, #18
 8003afa:	bf28      	it	cs
 8003afc:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003afe:	f06f 0509 	mvn.w	r5, #9
 8003b02:	b21b      	sxth	r3, r3
	m=m*128+power+64;
 8003b04:	f107 0040 	add.w	r0, r7, #64	; 0x40
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003b08:	fb05 f202 	mul.w	r2, r5, r2
 8003b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b10:	25b4      	movs	r5, #180	; 0xb4
 8003b12:	32b3      	adds	r2, #179	; 0xb3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	1b92      	subs	r2, r2, r6
 8003b18:	fb05 3302 	mla	r3, r5, r2, r3
 8003b1c:	aa40      	add	r2, sp, #256	; 0x100
 8003b1e:	440b      	add	r3, r1
	return m;
 8003b20:	9202      	str	r2, [sp, #8]
	m=m*128+power+64;
 8003b22:	eb00 15c3 	add.w	r5, r0, r3, lsl #7
	memset(data,0,sizeof(data));
 8003b26:	2600      	movs	r6, #0
	it=0xFF & (n>>20);
 8003b28:	0d21      	lsrs	r1, r4, #20
	it=0xFF & (n>>12);
 8003b2a:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003b2c:	f3c5 4083 	ubfx	r0, r5, #18, #4
	data[0]=it;
 8003b30:	4632      	mov	r2, r6
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b32:	f8dd 9008 	ldr.w	r9, [sp, #8]
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003b36:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	memset(data,0,sizeof(data));
 8003b3a:	f8cd 6017 	str.w	r6, [sp, #23]
	data[0]=it;
 8003b3e:	f361 0207 	bfi	r2, r1, #0, #8
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b42:	4631      	mov	r1, r6
			ENCODE(sym,encstate);
 8003b44:	46b2      	mov	sl, r6
	data[0]=it;
 8003b46:	f363 220f 	bfi	r2, r3, #8, #8
	it=0xFF & (n>>4);
 8003b4a:	0923      	lsrs	r3, r4, #4
	data[0]=it;
 8003b4c:	f363 4217 	bfi	r2, r3, #16, #8
	it=0xFF & (m>>10);
 8003b50:	12ab      	asrs	r3, r5, #10
 8003b52:	f88d 3014 	strb.w	r3, [sp, #20]
	it=0xFF & (m>>2);
 8003b56:	10ab      	asrs	r3, r5, #2
	data[0]=it;
 8003b58:	f360 621f 	bfi	r2, r0, #24, #8
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b5c:	4648      	mov	r0, r9
	it=0xFF & (m>>2);
 8003b5e:	f88d 3015 	strb.w	r3, [sp, #21]
	it=(m & 0x03)<<6 ;
 8003b62:	01ab      	lsls	r3, r5, #6
	data[0]=it;
 8003b64:	9204      	str	r2, [sp, #16]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b66:	22b0      	movs	r2, #176	; 0xb0
	it=(m & 0x03)<<6 ;
 8003b68:	f88d 3016 	strb.w	r3, [sp, #22]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b6c:	f00f fa37 	bl	8012fde <memset>
	while(nbytes-- != 0) {
 8003b70:	ab04      	add	r3, sp, #16
			ENCODE(sym,encstate);
 8003b72:	4989      	ldr	r1, [pc, #548]	; (8003d98 <get_wspr_channel_symbols+0x620>)
 8003b74:	4a89      	ldr	r2, [pc, #548]	; (8003d9c <get_wspr_channel_symbols+0x624>)
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <get_wspr_channel_symbols+0x628>)
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003b7a:	9801      	ldr	r0, [sp, #4]
 8003b7c:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003b80:	9001      	str	r0, [sp, #4]
 8003b82:	09f8      	lsrs	r0, r7, #7
 8003b84:	f3c7 1480 	ubfx	r4, r7, #6, #1
 8003b88:	f3c7 06c0 	ubfx	r6, r7, #3, #1
 8003b8c:	ea40 004a 	orr.w	r0, r0, sl, lsl #1
 8003b90:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
			ENCODE(sym,encstate);
 8003b94:	ea00 0501 	and.w	r5, r0, r1
 8003b98:	4010      	ands	r0, r2
 8003b9a:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003b9e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003ba2:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003ba6:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003baa:	b2ed      	uxtb	r5, r5
 8003bac:	b2c0      	uxtb	r0, r0
 8003bae:	5d5d      	ldrb	r5, [r3, r5]
 8003bb0:	f813 e000 	ldrb.w	lr, [r3, r0]
 8003bb4:	ea04 0002 	and.w	r0, r4, r2
 8003bb8:	ea4e 0e45 	orr.w	lr, lr, r5, lsl #1
 8003bbc:	ea04 0501 	and.w	r5, r4, r1
 8003bc0:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003bc4:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003bc8:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003bcc:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003bd0:	b2c0      	uxtb	r0, r0
 8003bd2:	b2ed      	uxtb	r5, r5
 8003bd4:	5c18      	ldrb	r0, [r3, r0]
			*symbols++ = sym >> 1;
 8003bd6:	ea4f 0b6e 	mov.w	fp, lr, asr #1
			ENCODE(sym,encstate);
 8003bda:	5d5d      	ldrb	r5, [r3, r5]
			*symbols++ = sym & 1;
 8003bdc:	f00e 0e01 	and.w	lr, lr, #1
			ENCODE(sym,encstate);
 8003be0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8003be4:	9000      	str	r0, [sp, #0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003be6:	f3c7 1040 	ubfx	r0, r7, #5, #1
 8003bea:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
			ENCODE(sym,encstate);
 8003bee:	ea00 0401 	and.w	r4, r0, r1
 8003bf2:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003bf6:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003bfa:	b2e4      	uxtb	r4, r4
 8003bfc:	5d1d      	ldrb	r5, [r3, r4]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003bfe:	f3c7 1400 	ubfx	r4, r7, #4, #1
 8003c02:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
			ENCODE(sym,encstate);
 8003c06:	4010      	ands	r0, r2
 8003c08:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c0c:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
			ENCODE(sym,encstate);
 8003c10:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003c14:	b2c0      	uxtb	r0, r0
 8003c16:	f813 c000 	ldrb.w	ip, [r3, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c1a:	f3c7 0080 	ubfx	r0, r7, #2, #1
			ENCODE(sym,encstate);
 8003c1e:	ea4c 0c45 	orr.w	ip, ip, r5, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c22:	f3c7 0540 	ubfx	r5, r7, #1, #1
 8003c26:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8003c2a:	f007 0701 	and.w	r7, r7, #1
 8003c2e:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8003c32:	ea47 0a45 	orr.w	sl, r7, r5, lsl #1
			ENCODE(sym,encstate);
 8003c36:	ea06 0701 	and.w	r7, r6, r1
 8003c3a:	4016      	ands	r6, r2
 8003c3c:	ea87 4717 	eor.w	r7, r7, r7, lsr #16
 8003c40:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003c44:	ea87 2717 	eor.w	r7, r7, r7, lsr #8
 8003c48:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003c4c:	b2ff      	uxtb	r7, r7
 8003c4e:	b2f6      	uxtb	r6, r6
 8003c50:	f813 8007 	ldrb.w	r8, [r3, r7]
 8003c54:	5d9f      	ldrb	r7, [r3, r6]
 8003c56:	ea05 0601 	and.w	r6, r5, r1
 8003c5a:	4015      	ands	r5, r2
 8003c5c:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003c60:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003c64:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003c68:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003c6c:	b2f6      	uxtb	r6, r6
 8003c6e:	b2ed      	uxtb	r5, r5
 8003c70:	ea47 0748 	orr.w	r7, r7, r8, lsl #1
 8003c74:	f813 8006 	ldrb.w	r8, [r3, r6]
 8003c78:	5d5e      	ldrb	r6, [r3, r5]
 8003c7a:	ea04 0501 	and.w	r5, r4, r1
 8003c7e:	4014      	ands	r4, r2
 8003c80:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003c84:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003c88:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003c8c:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003c90:	b2ed      	uxtb	r5, r5
 8003c92:	b2e4      	uxtb	r4, r4
 8003c94:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 8003c98:	f813 8005 	ldrb.w	r8, [r3, r5]
 8003c9c:	5d1d      	ldrb	r5, [r3, r4]
 8003c9e:	ea00 0401 	and.w	r4, r0, r1
 8003ca2:	4010      	ands	r0, r2
 8003ca4:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003ca8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003cac:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003cb0:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003cb4:	b2e4      	uxtb	r4, r4
 8003cb6:	b2c0      	uxtb	r0, r0
 8003cb8:	ea45 0548 	orr.w	r5, r5, r8, lsl #1
 8003cbc:	f813 8004 	ldrb.w	r8, [r3, r4]
 8003cc0:	5c1c      	ldrb	r4, [r3, r0]
 8003cc2:	ea0a 0001 	and.w	r0, sl, r1
 8003cc6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003cca:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
 8003cce:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003cd2:	b2c0      	uxtb	r0, r0
 8003cd4:	f813 8000 	ldrb.w	r8, [r3, r0]
 8003cd8:	ea0a 0002 	and.w	r0, sl, r2
 8003cdc:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003ce0:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003ce4:	b2c0      	uxtb	r0, r0
 8003ce6:	5c18      	ldrb	r0, [r3, r0]
 8003ce8:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
			*symbols++ = sym >> 1;
 8003cec:	f04f 0800 	mov.w	r8, #0
 8003cf0:	f36b 0807 	bfi	r8, fp, #0, #8
 8003cf4:	ea4f 0b6c 	mov.w	fp, ip, asr #1
			*symbols++ = sym & 1;
 8003cf8:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8003cfc:	f36e 280f 	bfi	r8, lr, #8, #8
 8003d00:	f04f 0e00 	mov.w	lr, #0
 8003d04:	f36b 0e07 	bfi	lr, fp, #0, #8
 8003d08:	ea4f 0b67 	mov.w	fp, r7, asr #1
			*symbols++ = sym & 1;
 8003d0c:	f007 0701 	and.w	r7, r7, #1
			*symbols++ = sym >> 1;
 8003d10:	f36c 2e0f 	bfi	lr, ip, #8, #8
 8003d14:	f04f 0c00 	mov.w	ip, #0
 8003d18:	f36b 0c07 	bfi	ip, fp, #0, #8
 8003d1c:	ea4f 0b66 	mov.w	fp, r6, asr #1
			*symbols++ = sym & 1;
 8003d20:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003d24:	f367 2c0f 	bfi	ip, r7, #8, #8
 8003d28:	2700      	movs	r7, #0
 8003d2a:	f36b 0707 	bfi	r7, fp, #0, #8
 8003d2e:	f366 270f 	bfi	r7, r6, #8, #8
 8003d32:	9e00      	ldr	r6, [sp, #0]
 8003d34:	1076      	asrs	r6, r6, #1
 8003d36:	f366 4817 	bfi	r8, r6, #16, #8
			*symbols++ = sym & 1;
 8003d3a:	9e00      	ldr	r6, [sp, #0]
 8003d3c:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003d40:	f366 681f 	bfi	r8, r6, #24, #8
 8003d44:	106e      	asrs	r6, r5, #1
			*symbols++ = sym & 1;
 8003d46:	f005 0501 	and.w	r5, r5, #1
			*symbols++ = sym >> 1;
 8003d4a:	f366 4e17 	bfi	lr, r6, #16, #8
 8003d4e:	f849 8b10 	str.w	r8, [r9], #16
 8003d52:	f365 6e1f 	bfi	lr, r5, #24, #8
 8003d56:	1065      	asrs	r5, r4, #1
			*symbols++ = sym & 1;
 8003d58:	f004 0401 	and.w	r4, r4, #1
			*symbols++ = sym >> 1;
 8003d5c:	f365 4c17 	bfi	ip, r5, #16, #8
 8003d60:	f849 ec0c 	str.w	lr, [r9, #-12]
 8003d64:	f364 6c1f 	bfi	ip, r4, #24, #8
 8003d68:	1044      	asrs	r4, r0, #1
			*symbols++ = sym & 1;
 8003d6a:	f000 0001 	and.w	r0, r0, #1
			*symbols++ = sym >> 1;
 8003d6e:	f364 4717 	bfi	r7, r4, #16, #8
 8003d72:	f849 cc08 	str.w	ip, [r9, #-8]
 8003d76:	f360 671f 	bfi	r7, r0, #24, #8
	while(nbytes-- != 0) {
 8003d7a:	a86c      	add	r0, sp, #432	; 0x1b0
 8003d7c:	4581      	cmp	r9, r0
			*symbols++ = sym >> 1;
 8003d7e:	f849 7c04 	str.w	r7, [r9, #-4]
	while(nbytes-- != 0) {
 8003d82:	f47f aefa 	bne.w	8003b7a <get_wspr_channel_symbols+0x402>
 8003d86:	f04f 0e00 	mov.w	lr, #0
 8003d8a:	a917      	add	r1, sp, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003d8c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003da4 <get_wspr_channel_symbols+0x62c>
	i = p = 0;
 8003d90:	46f4      	mov	ip, lr
 8003d92:	e009      	b.n	8003da8 <get_wspr_channel_symbols+0x630>
 8003d94:	080194dc 	.word	0x080194dc
 8003d98:	f2d05351 	.word	0xf2d05351
 8003d9c:	e4613c47 	.word	0xe4613c47
 8003da0:	08019324 	.word	0x08019324
 8003da4:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003da8:	fa5f f28e 	uxtb.w	r2, lr
 8003dac:	2300      	movs	r3, #0
			tmp[j] = sym[p];
 8003dae:	f50c 70d8 	add.w	r0, ip, #432	; 0x1b0
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003db2:	0295      	lsls	r5, r2, #10
			tmp[j] = sym[p];
 8003db4:	eb0d 0400 	add.w	r4, sp, r0
			p++;
 8003db8:	f10c 0001 	add.w	r0, ip, #1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003dbc:	18ad      	adds	r5, r5, r2
 8003dbe:	f143 0300 	adc.w	r3, r3, #0
 8003dc2:	052a      	lsls	r2, r5, #20
 8003dc4:	051e      	lsls	r6, r3, #20
 8003dc6:	18aa      	adds	r2, r5, r2
 8003dc8:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8003dcc:	eb43 0306 	adc.w	r3, r3, r6
 8003dd0:	1892      	adds	r2, r2, r2
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	ea02 060a 	and.w	r6, r2, sl
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	0235      	lsls	r5, r6, #8
 8003dde:	021a      	lsls	r2, r3, #8
 8003de0:	19ad      	adds	r5, r5, r6
 8003de2:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8003de6:	ea4f 4705 	mov.w	r7, r5, lsl #16
 8003dea:	eb43 0202 	adc.w	r2, r3, r2
 8003dee:	19ef      	adds	r7, r5, r7
 8003df0:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8003df4:	ea4f 2807 	mov.w	r8, r7, lsl #8
 8003df8:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8003dfc:	eb42 0209 	adc.w	r2, r2, r9
 8003e00:	eb18 0806 	adds.w	r8, r8, r6
 8003e04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e08:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
 8003e0c:	eb43 0302 	adc.w	r3, r3, r2
 8003e10:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8003e12:	2ba1      	cmp	r3, #161	; 0xa1
 8003e14:	f200 80ed 	bhi.w	8003ff2 <get_wspr_channel_symbols+0x87a>
			p++;
 8003e18:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8003e1c:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8003e20:	f10e 0e01 	add.w	lr, lr, #1
 8003e24:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8003e28:	54ca      	strb	r2, [r1, r3]
	while (p < 162) {
 8003e2a:	d1bd      	bne.n	8003da8 <get_wspr_channel_symbols+0x630>
	memcpy(sym, tmp, sizeof(tmp));
 8003e2c:	22a2      	movs	r2, #162	; 0xa2
 8003e2e:	9802      	ldr	r0, [sp, #8]
 8003e30:	f00f f9c8 	bl	80131c4 <memcpy>
	for (i=0; i < 162; i++) {
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	f10d 02ff 	add.w	r2, sp, #255	; 0xff
 8003e3a:	48ca      	ldr	r0, [pc, #808]	; (8004164 <get_wspr_channel_symbols+0x9ec>)
 8003e3c:	1e59      	subs	r1, r3, #1
 8003e3e:	f20d 15a1 	addw	r5, sp, #417	; 0x1a1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003e42:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003e46:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003e4a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8003e4e:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003e50:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8003e54:	d1f5      	bne.n	8003e42 <get_wspr_channel_symbols+0x6ca>
	return 1;
 8003e56:	2001      	movs	r0, #1
}
 8003e58:	b06d      	add	sp, #436	; 0x1b4
 8003e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8003e5e:	280c      	cmp	r0, #12
 8003e60:	f240 824b 	bls.w	80042fa <get_wspr_channel_symbols+0xb82>
 8003e64:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4619      	mov	r1, r3
			c += k[2];
 8003e6c:	f856 7c04 	ldr.w	r7, [r6, #-4]
			length -= 12;
 8003e70:	380c      	subs	r0, #12
			c += k[2];
 8003e72:	443a      	add	r2, r7
			mix(a,b,c);
 8003e74:	f856 7c0c 	ldr.w	r7, [r6, #-12]
		while (length > 12)
 8003e78:	280c      	cmp	r0, #12
			mix(a,b,c);
 8003e7a:	eba7 0702 	sub.w	r7, r7, r2
 8003e7e:	441f      	add	r7, r3
			b += k[1];
 8003e80:	f856 3c08 	ldr.w	r3, [r6, #-8]
			mix(a,b,c);
 8003e84:	ea87 7732 	eor.w	r7, r7, r2, ror #28
			b += k[1];
 8003e88:	440b      	add	r3, r1
			mix(a,b,c);
 8003e8a:	441a      	add	r2, r3
 8003e8c:	eba3 0307 	sub.w	r3, r3, r7
 8003e90:	ea83 63b7 	eor.w	r3, r3, r7, ror #26
 8003e94:	4417      	add	r7, r2
 8003e96:	eba2 0203 	sub.w	r2, r2, r3
 8003e9a:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003e9e:	443b      	add	r3, r7
 8003ea0:	eba7 0702 	sub.w	r7, r7, r2
 8003ea4:	ea87 4732 	eor.w	r7, r7, r2, ror #16
 8003ea8:	441a      	add	r2, r3
 8003eaa:	eba3 0307 	sub.w	r3, r3, r7
 8003eae:	ea83 3177 	eor.w	r1, r3, r7, ror #13
 8003eb2:	eb07 0302 	add.w	r3, r7, r2
 8003eb6:	4637      	mov	r7, r6
		while (length > 12)
 8003eb8:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003ebc:	eba2 0201 	sub.w	r2, r2, r1
 8003ec0:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003ec4:	4419      	add	r1, r3
		while (length > 12)
 8003ec6:	d8d1      	bhi.n	8003e6c <get_wspr_channel_symbols+0x6f4>
		switch(length)
 8003ec8:	3801      	subs	r0, #1
 8003eca:	280b      	cmp	r0, #11
 8003ecc:	d847      	bhi.n	8003f5e <get_wspr_channel_symbols+0x7e6>
 8003ece:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003ed2:	002b      	.short	0x002b
 8003ed4:	015f0140 	.word	0x015f0140
 8003ed8:	015a008d 	.word	0x015a008d
 8003edc:	014e0155 	.word	0x014e0155
 8003ee0:	014b008b 	.word	0x014b008b
 8003ee4:	00870146 	.word	0x00870146
 8003ee8:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 8003eea:	7af8      	ldrb	r0, [r7, #11]
 8003eec:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 8003ef0:	7ab8      	ldrb	r0, [r7, #10]
 8003ef2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 8003ef6:	7a78      	ldrb	r0, [r7, #9]
 8003ef8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 8003efc:	7a38      	ldrb	r0, [r7, #8]
 8003efe:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 8003f00:	79f8      	ldrb	r0, [r7, #7]
 8003f02:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 8003f06:	79b8      	ldrb	r0, [r7, #6]
 8003f08:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 8003f0c:	7978      	ldrb	r0, [r7, #5]
 8003f0e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 8003f12:	7938      	ldrb	r0, [r7, #4]
 8003f14:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 8003f16:	78f8      	ldrb	r0, [r7, #3]
 8003f18:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 8003f1c:	78b8      	ldrb	r0, [r7, #2]
 8003f1e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 8003f22:	7878      	ldrb	r0, [r7, #1]
 8003f24:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8003f28:	7838      	ldrb	r0, [r7, #0]
 8003f2a:	4403      	add	r3, r0
	final(a,b,c);
 8003f2c:	404a      	eors	r2, r1
 8003f2e:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8003f32:	4043      	eors	r3, r0
 8003f34:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8003f38:	4059      	eors	r1, r3
 8003f3a:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8003f3e:	ea80 0102 	eor.w	r1, r0, r2
 8003f42:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8003f46:	404b      	eors	r3, r1
 8003f48:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8003f4c:	405a      	eors	r2, r3
 8003f4e:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8003f52:	ea81 0203 	eor.w	r2, r1, r3
 8003f56:	eba2 2233 	sub.w	r2, r2, r3, ror #8
	c=(32767&c);
 8003f5a:	f3c2 020e 	ubfx	r2, r2, #0, #15
		memset(grid6,0,sizeof(char)*7);
 8003f5e:	2300      	movs	r3, #0
		m=128*ihash + ntype + 64;
 8003f60:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8003f64:	aa40      	add	r2, sp, #256	; 0x100
		j=strlen(grid);
 8003f66:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8003f68:	9340      	str	r3, [sp, #256]	; 0x100
		m=128*ihash + ntype + 64;
 8003f6a:	3540      	adds	r5, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8003f6c:	9202      	str	r2, [sp, #8]
 8003f6e:	f8cd 3103 	str.w	r3, [sp, #259]	; 0x103
		j=strlen(grid);
 8003f72:	f7fc fa65 	bl	8000440 <strlen>
		for(i=0; i<j-1; i++) {
 8003f76:	1e42      	subs	r2, r0, #1
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	dd29      	ble.n	8003fd0 <get_wspr_channel_symbols+0x858>
 8003f7c:	1ca3      	adds	r3, r4, #2
 8003f7e:	9902      	ldr	r1, [sp, #8]
 8003f80:	1acb      	subs	r3, r1, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f240 814a 	bls.w	800421c <get_wspr_channel_symbols+0xaa4>
 8003f88:	3802      	subs	r0, #2
 8003f8a:	2805      	cmp	r0, #5
 8003f8c:	f240 8146 	bls.w	800421c <get_wspr_channel_symbols+0xaa4>
			grid6[i]=grid[i+1];
 8003f90:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8003f94:	0790      	lsls	r0, r2, #30
 8003f96:	9340      	str	r3, [sp, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8003f98:	f022 0303 	bic.w	r3, r2, #3
 8003f9c:	d018      	beq.n	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8003f9e:	18e0      	adds	r0, r4, r3
		for(i=0; i<j-1; i++) {
 8003fa0:	1c59      	adds	r1, r3, #1
			grid6[i]=grid[i+1];
 8003fa2:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 8003fa6:	7847      	ldrb	r7, [r0, #1]
		for(i=0; i<j-1; i++) {
 8003fa8:	428a      	cmp	r2, r1
			grid6[i]=grid[i+1];
 8003faa:	446e      	add	r6, sp
 8003fac:	f806 7cb0 	strb.w	r7, [r6, #-176]
		for(i=0; i<j-1; i++) {
 8003fb0:	dd0e      	ble.n	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8003fb2:	f203 11b1 	addw	r1, r3, #433	; 0x1b1
		for(i=0; i<j-1; i++) {
 8003fb6:	3302      	adds	r3, #2
			grid6[i]=grid[i+1];
 8003fb8:	7886      	ldrb	r6, [r0, #2]
 8003fba:	4469      	add	r1, sp
		for(i=0; i<j-1; i++) {
 8003fbc:	429a      	cmp	r2, r3
			grid6[i]=grid[i+1];
 8003fbe:	f801 6cb0 	strb.w	r6, [r1, #-176]
		for(i=0; i<j-1; i++) {
 8003fc2:	dd05      	ble.n	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8003fc4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003fc8:	78c2      	ldrb	r2, [r0, #3]
 8003fca:	446b      	add	r3, sp
 8003fcc:	f803 2cb0 	strb.w	r2, [r3, #-176]
		grid6[5]=grid[0];
 8003fd0:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 8003fd2:	9802      	ldr	r0, [sp, #8]
		grid6[5]=grid[0];
 8003fd4:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		n = pack_call(grid6);
 8003fd8:	f7ff fb0c 	bl	80035f4 <pack_call>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	e5a2      	b.n	8003b26 <get_wspr_channel_symbols+0x3ae>
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8003fe0:	68b8      	ldr	r0, [r7, #8]
 8003fe2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003fe6:	4402      	add	r2, r0
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4401      	add	r1, r0
 8003fec:	6838      	ldr	r0, [r7, #0]
 8003fee:	4403      	add	r3, r0
 8003ff0:	e79c      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
	while (p < 162) {
 8003ff2:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
 8003ff6:	f10e 0e01 	add.w	lr, lr, #1
 8003ffa:	f47f aed5 	bne.w	8003da8 <get_wspr_channel_symbols+0x630>
 8003ffe:	e715      	b.n	8003e2c <get_wspr_channel_symbols+0x6b4>
		while (length > 12)
 8004000:	280c      	cmp	r0, #12
 8004002:	f240 81bf 	bls.w	8004384 <get_wspr_channel_symbols+0xc0c>
 8004006:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800400a:	461a      	mov	r2, r3
 800400c:	4619      	mov	r1, r3
			c += k[4] + (((uint32_t)k[5])<<16);
 800400e:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 8004012:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004014:	f836 7c04 	ldrh.w	r7, [r6, #-4]
		while (length > 12)
 8004018:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 800401a:	eb07 470c 	add.w	r7, r7, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 800401e:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 8004022:	4417      	add	r7, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 8004024:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 8004028:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 800402c:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 8004030:	eba2 0207 	sub.w	r2, r2, r7
 8004034:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 8004036:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 800403a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
			mix(a,b,c);
 800403e:	ea82 7237 	eor.w	r2, r2, r7, ror #28
			b += k[2] + (((uint32_t)k[3])<<16);
 8004042:	440b      	add	r3, r1
			mix(a,b,c);
 8004044:	441f      	add	r7, r3
 8004046:	eba3 0302 	sub.w	r3, r3, r2
 800404a:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 800404e:	443a      	add	r2, r7
 8004050:	eba7 0703 	sub.w	r7, r7, r3
 8004054:	ea87 6133 	eor.w	r1, r7, r3, ror #24
 8004058:	4413      	add	r3, r2
 800405a:	eba2 0201 	sub.w	r2, r2, r1
 800405e:	eb01 0703 	add.w	r7, r1, r3
 8004062:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 8004066:	eba3 0302 	sub.w	r3, r3, r2
 800406a:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 800406e:	eb02 0307 	add.w	r3, r2, r7
 8004072:	eba7 0701 	sub.w	r7, r7, r1
 8004076:	ea87 7231 	eor.w	r2, r7, r1, ror #28
 800407a:	4637      	mov	r7, r6
 800407c:	4419      	add	r1, r3
		while (length > 12)
 800407e:	f106 060c 	add.w	r6, r6, #12
 8004082:	d8c4      	bhi.n	800400e <get_wspr_channel_symbols+0x896>
		switch(length)
 8004084:	3801      	subs	r0, #1
 8004086:	280b      	cmp	r0, #11
 8004088:	f63f af69 	bhi.w	8003f5e <get_wspr_channel_symbols+0x7e6>
 800408c:	a601      	add	r6, pc, #4	; (adr r6, 8004094 <get_wspr_channel_symbols+0x91c>)
 800408e:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8004092:	bf00      	nop
 8004094:	08003f29 	.word	0x08003f29
 8004098:	08004153 	.word	0x08004153
 800409c:	0800414d 	.word	0x0800414d
 80040a0:	080041cf 	.word	0x080041cf
 80040a4:	080041cb 	.word	0x080041cb
 80040a8:	080041bb 	.word	0x080041bb
 80040ac:	080041b5 	.word	0x080041b5
 80040b0:	0800419f 	.word	0x0800419f
 80040b4:	0800419b 	.word	0x0800419b
 80040b8:	080041e1 	.word	0x080041e1
 80040bc:	080041db 	.word	0x080041db
 80040c0:	080041fb 	.word	0x080041fb
		for (i=0; i<i1; i++) {
 80040c4:	ab40      	add	r3, sp, #256	; 0x100
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f000 812e 	beq.w	8004328 <get_wspr_channel_symbols+0xbb0>
 80040cc:	461a      	mov	r2, r3
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	1c6b      	adds	r3, r5, #1
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f240 8158 	bls.w	800438a <get_wspr_channel_symbols+0xc12>
 80040da:	1e43      	subs	r3, r0, #1
 80040dc:	2b05      	cmp	r3, #5
 80040de:	f240 8154 	bls.w	800438a <get_wspr_channel_symbols+0xc12>
			call6[i]=callsign[i];
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	0781      	lsls	r1, r0, #30
 80040e6:	9340      	str	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80040e8:	f020 0303 	bic.w	r3, r0, #3
 80040ec:	d017      	beq.n	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80040ee:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 80040f2:	5ce9      	ldrb	r1, [r5, r3]
 80040f4:	446a      	add	r2, sp
 80040f6:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	4290      	cmp	r0, r2
 80040fe:	d90e      	bls.n	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004100:	5ca9      	ldrb	r1, [r5, r2]
		for (i=0; i<i1; i++) {
 8004102:	3302      	adds	r3, #2
			call6[i]=callsign[i];
 8004104:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
		for (i=0; i<i1; i++) {
 8004108:	4298      	cmp	r0, r3
			call6[i]=callsign[i];
 800410a:	446a      	add	r2, sp
 800410c:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 8004110:	d905      	bls.n	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004112:	5cea      	ldrb	r2, [r5, r3]
 8004114:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8004118:	446b      	add	r3, sp
 800411a:	f803 2cb0 	strb.w	r2, [r3, #-176]
		call6[i] = '\0';
 800411e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004122:	2200      	movs	r2, #0
		int nc = callsign[i1+1];
 8004124:	442f      	add	r7, r5
		*n=pack_call(call6);
 8004126:	9802      	ldr	r0, [sp, #8]
		call6[i] = '\0';
 8004128:	446b      	add	r3, sp
 800412a:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 800412e:	f7ff fa61 	bl	80035f4 <pack_call>
		int nc = callsign[i1+1];
 8004132:	787a      	ldrb	r2, [r7, #1]
		*n=pack_call(call6);
 8004134:	4604      	mov	r4, r0
		if( nc >= 48 && nc <= 57 ) {
 8004136:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800413a:	2b09      	cmp	r3, #9
 800413c:	f200 8096 	bhi.w	800426c <get_wspr_channel_symbols+0xaf4>
		*m=60000-32768+*m;
 8004140:	f646 2330 	movw	r3, #27184	; 0x6a30
 8004144:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	f7ff bbd6 	b.w	80038f8 <get_wspr_channel_symbols+0x180>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 800414c:	78b8      	ldrb	r0, [r7, #2]
 800414e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 8004152:	8838      	ldrh	r0, [r7, #0]
 8004154:	4403      	add	r3, r0
		break;
 8004156:	e6e9      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 8004158:	68b8      	ldr	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 800415a:	4402      	add	r2, r0
 800415c:	e744      	b.n	8003fe8 <get_wspr_channel_symbols+0x870>
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 800415e:	8938      	ldrh	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8004160:	4402      	add	r2, r0
 8004162:	e741      	b.n	8003fe8 <get_wspr_channel_symbols+0x870>
 8004164:	08019423 	.word	0x08019423
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 8004168:	7a38      	ldrb	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 800416a:	4402      	add	r2, r0
 800416c:	e73c      	b.n	8003fe8 <get_wspr_channel_symbols+0x870>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 800416e:	e9d7 6000 	ldrd	r6, r0, [r7]
 8004172:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004176:	4433      	add	r3, r6
 8004178:	4401      	add	r1, r0
 800417a:	e6d7      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 800417c:	88b8      	ldrh	r0, [r7, #4]
 800417e:	4401      	add	r1, r0
 8004180:	6838      	ldr	r0, [r7, #0]
 8004182:	4403      	add	r3, r0
 8004184:	e6d2      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 8004186:	7938      	ldrb	r0, [r7, #4]
 8004188:	4401      	add	r1, r0
 800418a:	6838      	ldr	r0, [r7, #0]
 800418c:	4403      	add	r3, r0
 800418e:	e6cd      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 3 : a+=k[0]&0xffffff; break;
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004196:	4403      	add	r3, r0
 8004198:	e6c8      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 9 : c+=k8[8];                      /* fall through */
 800419a:	7a38      	ldrb	r0, [r7, #8]
 800419c:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 800419e:	88be      	ldrh	r6, [r7, #4]
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041a0:	8838      	ldrh	r0, [r7, #0]
 80041a2:	440e      	add	r6, r1
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80041a4:	88f9      	ldrh	r1, [r7, #6]
 80041a6:	4418      	add	r0, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041a8:	887b      	ldrh	r3, [r7, #2]
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80041aa:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041ae:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80041b2:	e6bb      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 80041b4:	79b8      	ldrb	r0, [r7, #6]
 80041b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041ba:	8838      	ldrh	r0, [r7, #0]
 80041bc:	4418      	add	r0, r3
		case 6 : b+=k[2];
 80041be:	88bb      	ldrh	r3, [r7, #4]
 80041c0:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80041c8:	e6b0      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 5 : b+=k8[4];                      /* fall through */
 80041ca:	7938      	ldrb	r0, [r7, #4]
 80041cc:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 80041ce:	8838      	ldrh	r0, [r7, #0]
 80041d0:	4418      	add	r0, r3
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80041d8:	e6a8      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 80041da:	7ab8      	ldrb	r0, [r7, #10]
 80041dc:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041e0:	8838      	ldrh	r0, [r7, #0]
		b+=k[2]+(((uint32_t)k[3])<<16);
 80041e2:	88be      	ldrh	r6, [r7, #4]
 80041e4:	4418      	add	r0, r3
		case 10: c+=k[4];
 80041e6:	893b      	ldrh	r3, [r7, #8]
 80041e8:	440e      	add	r6, r1
		b+=k[2]+(((uint32_t)k[3])<<16);
 80041ea:	88f9      	ldrh	r1, [r7, #6]
		case 10: c+=k[4];
 80041ec:	441a      	add	r2, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041ee:	887b      	ldrh	r3, [r7, #2]
		b+=k[2]+(((uint32_t)k[3])<<16);
 80041f0:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80041f4:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80041f8:	e698      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80041fa:	f8b7 c008 	ldrh.w	ip, [r7, #8]
		b+=k[2]+(((uint32_t)k[3])<<16);
 80041fe:	88be      	ldrh	r6, [r7, #4]
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004200:	8838      	ldrh	r0, [r7, #0]
 8004202:	4494      	add	ip, r2
 8004204:	440e      	add	r6, r1
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004206:	897a      	ldrh	r2, [r7, #10]
 8004208:	4418      	add	r0, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 800420a:	88f9      	ldrh	r1, [r7, #6]
		a+=k[0]+(((uint32_t)k[1])<<16);
 800420c:	887b      	ldrh	r3, [r7, #2]
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 800420e:	eb0c 4202 	add.w	r2, ip, r2, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004212:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004216:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800421a:	e687      	b.n	8003f2c <get_wspr_channel_symbols+0x7b4>
			grid6[i]=grid[i+1];
 800421c:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 800421e:	2a01      	cmp	r2, #1
			grid6[i]=grid[i+1];
 8004220:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8004224:	f43f aed4 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004228:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 800422a:	2a02      	cmp	r2, #2
			grid6[i]=grid[i+1];
 800422c:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 8004230:	f43f aece 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004234:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 8004236:	2a03      	cmp	r2, #3
			grid6[i]=grid[i+1];
 8004238:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 800423c:	f43f aec8 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004240:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 8004242:	2a04      	cmp	r2, #4
			grid6[i]=grid[i+1];
 8004244:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 8004248:	f43f aec2 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 800424c:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 800424e:	2a05      	cmp	r2, #5
			grid6[i]=grid[i+1];
 8004250:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 8004254:	f43f aebc 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004258:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 800425a:	2a06      	cmp	r2, #6
			grid6[i]=grid[i+1];
 800425c:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 8004260:	f43f aeb6 	beq.w	8003fd0 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004264:	79e3      	ldrb	r3, [r4, #7]
 8004266:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for(i=0; i<j-1; i++) {
 800426a:	e6b1      	b.n	8003fd0 <get_wspr_channel_symbols+0x858>
		} else if ( nc >= 65 && nc <= 90 ) {
 800426c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8004270:	2b19      	cmp	r3, #25
 8004272:	d851      	bhi.n	8004318 <get_wspr_channel_symbols+0xba0>
		*m=60000-32768+*m;
 8004274:	f646 2329 	movw	r3, #27177	; 0x6a29
 8004278:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	f7ff bb3c 	b.w	80038f8 <get_wspr_channel_symbols+0x180>
		char const * pfx = strtok (callsign,"/");
 8004280:	495d      	ldr	r1, [pc, #372]	; (80043f8 <get_wspr_channel_symbols+0xc80>)
 8004282:	4628      	mov	r0, r5
 8004284:	f00e fec4 	bl	8013010 <strtok>
		char const * call = strtok(NULL," ");
 8004288:	495c      	ldr	r1, [pc, #368]	; (80043fc <get_wspr_channel_symbols+0xc84>)
		char const * pfx = strtok (callsign,"/");
 800428a:	4607      	mov	r7, r0
		char const * call = strtok(NULL," ");
 800428c:	2000      	movs	r0, #0
 800428e:	f00e febf 	bl	8013010 <strtok>
		*n = pack_call (call);
 8004292:	f7ff f9af 	bl	80035f4 <pack_call>
 8004296:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 8004298:	4638      	mov	r0, r7
 800429a:	f7fc f8d1 	bl	8000440 <strlen>
		if( plen ==1 ) {
 800429e:	2801      	cmp	r0, #1
 80042a0:	d03f      	beq.n	8004322 <get_wspr_channel_symbols+0xbaa>
		} else if( plen == 2 ) {
 80042a2:	2802      	cmp	r0, #2
 80042a4:	d03b      	beq.n	800431e <get_wspr_channel_symbols+0xba6>
		for (i=0; i<plen; i++) {
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f000 80a1 	beq.w	80043ee <get_wspr_channel_symbols+0xc76>
			*m=0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f105 3cff 	add.w	ip, r5, #4294967295
			} else if ( nc >= 65 && nc <= 90 ) {
 80042b2:	4662      	mov	r2, ip
			int nc = callsign[i];
 80042b4:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 80042b8:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 80042bc:	f1a7 0e41 	sub.w	lr, r7, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 80042c0:	2909      	cmp	r1, #9
 80042c2:	d906      	bls.n	80042d2 <get_wspr_channel_symbols+0xb5a>
			} else if ( nc >= 65 && nc <= 90 ) {
 80042c4:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 80042c8:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 80042cc:	bf98      	it	ls
 80042ce:	f1a7 0137 	subls.w	r1, r7, #55	; 0x37
		for (i=0; i<plen; i++) {
 80042d2:	3202      	adds	r2, #2
			*m=37*(*m)+nc;
 80042d4:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 80042d8:	1b52      	subs	r2, r2, r5
			*m=37*(*m)+nc;
 80042da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
		for (i=0; i<plen; i++) {
 80042de:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 80042e0:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 80042e2:	d8e6      	bhi.n	80042b2 <get_wspr_channel_symbols+0xb3a>
		if( *m > 32768 ) {
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	dd7b      	ble.n	80043e2 <get_wspr_channel_symbols+0xc6a>
			*m=*m-32768;
 80042ea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80042ee:	aa40      	add	r2, sp, #256	; 0x100
			*nadd=1;
 80042f0:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 80042f2:	01db      	lsls	r3, r3, #7
 80042f4:	9202      	str	r2, [sp, #8]
 80042f6:	f7ff bb00 	b.w	80038fa <get_wspr_channel_symbols+0x182>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80042fa:	461a      	mov	r2, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	e5e3      	b.n	8003ec8 <get_wspr_channel_symbols+0x750>
		return 36;
 8004300:	2124      	movs	r1, #36	; 0x24
 8004302:	f7ff bbfc 	b.w	8003afe <get_wspr_channel_symbols+0x386>
 8004306:	2624      	movs	r6, #36	; 0x24
 8004308:	f7ff bbeb 	b.w	8003ae2 <get_wspr_channel_symbols+0x36a>
 800430c:	2324      	movs	r3, #36	; 0x24
 800430e:	f7ff bbda 	b.w	8003ac6 <get_wspr_channel_symbols+0x34e>
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f7ff bbc9 	b.w	8003aaa <get_wspr_channel_symbols+0x332>
 8004318:	4b39      	ldr	r3, [pc, #228]	; (8004400 <get_wspr_channel_symbols+0xc88>)
		*m=60000-32768+*m;
 800431a:	f7ff baed 	b.w	80038f8 <get_wspr_channel_symbols+0x180>
			*m=36;
 800431e:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 8004320:	e7c5      	b.n	80042ae <get_wspr_channel_symbols+0xb36>
			*m=37*(*m)+36;
 8004322:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 8004326:	e7c2      	b.n	80042ae <get_wspr_channel_symbols+0xb36>
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	e6f8      	b.n	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 800432c:	782b      	ldrb	r3, [r5, #0]
		for (i=0; i<i1; i++) {
 800432e:	2f01      	cmp	r7, #1
			call6[i]=callsign[i];
 8004330:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004334:	f43f aacf 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 8004338:	786b      	ldrb	r3, [r5, #1]
		for (i=0; i<i1; i++) {
 800433a:	2f02      	cmp	r7, #2
			call6[i]=callsign[i];
 800433c:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8004340:	f43f aac9 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 8004344:	78ab      	ldrb	r3, [r5, #2]
		for (i=0; i<i1; i++) {
 8004346:	2f03      	cmp	r7, #3
			call6[i]=callsign[i];
 8004348:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for (i=0; i<i1; i++) {
 800434c:	f43f aac3 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 8004350:	78eb      	ldrb	r3, [r5, #3]
		for (i=0; i<i1; i++) {
 8004352:	2f04      	cmp	r7, #4
			call6[i]=callsign[i];
 8004354:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8004358:	f43f aabd 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 800435c:	792b      	ldrb	r3, [r5, #4]
		for (i=0; i<i1; i++) {
 800435e:	2f05      	cmp	r7, #5
			call6[i]=callsign[i];
 8004360:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8004364:	f43f aab7 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 8004368:	796b      	ldrb	r3, [r5, #5]
		for (i=0; i<i1; i++) {
 800436a:	2f06      	cmp	r7, #6
			call6[i]=callsign[i];
 800436c:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8004370:	f43f aab1 	beq.w	80038d6 <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 8004374:	79ab      	ldrb	r3, [r5, #6]
 8004376:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for (i=0; i<i1; i++) {
 800437a:	f7ff baac 	b.w	80038d6 <get_wspr_channel_symbols+0x15e>
 800437e:	9302      	str	r3, [sp, #8]
 8004380:	f7ff baa9 	b.w	80038d6 <get_wspr_channel_symbols+0x15e>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004384:	461a      	mov	r2, r3
 8004386:	4619      	mov	r1, r3
 8004388:	e67c      	b.n	8004084 <get_wspr_channel_symbols+0x90c>
			call6[i]=callsign[i];
 800438a:	782b      	ldrb	r3, [r5, #0]
		for (i=0; i<i1; i++) {
 800438c:	2f01      	cmp	r7, #1
			call6[i]=callsign[i];
 800438e:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004392:	f43f aec4 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004396:	786b      	ldrb	r3, [r5, #1]
		for (i=0; i<i1; i++) {
 8004398:	2f02      	cmp	r7, #2
			call6[i]=callsign[i];
 800439a:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for (i=0; i<i1; i++) {
 800439e:	f43f aebe 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043a2:	78ab      	ldrb	r3, [r5, #2]
		for (i=0; i<i1; i++) {
 80043a4:	2f03      	cmp	r7, #3
			call6[i]=callsign[i];
 80043a6:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80043aa:	f43f aeb8 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043ae:	78eb      	ldrb	r3, [r5, #3]
		for (i=0; i<i1; i++) {
 80043b0:	2f04      	cmp	r7, #4
			call6[i]=callsign[i];
 80043b2:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80043b6:	f43f aeb2 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043ba:	792b      	ldrb	r3, [r5, #4]
		for (i=0; i<i1; i++) {
 80043bc:	2f05      	cmp	r7, #5
			call6[i]=callsign[i];
 80043be:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80043c2:	f43f aeac 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043c6:	796b      	ldrb	r3, [r5, #5]
		for (i=0; i<i1; i++) {
 80043c8:	2f06      	cmp	r7, #6
			call6[i]=callsign[i];
 80043ca:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80043ce:	f43f aea6 	beq.w	800411e <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043d2:	79ab      	ldrb	r3, [r5, #6]
 80043d4:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for (i=0; i<i1; i++) {
 80043d8:	e6a1      	b.n	800411e <get_wspr_channel_symbols+0x9a6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80043da:	461a      	mov	r2, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	f7ff bb1e 	b.w	8003a1e <get_wspr_channel_symbols+0x2a6>
 80043e2:	aa40      	add	r2, sp, #256	; 0x100
		m=128*ng+ntype+64;
 80043e4:	01db      	lsls	r3, r3, #7
		*nadd=0;
 80043e6:	2000      	movs	r0, #0
 80043e8:	9202      	str	r2, [sp, #8]
 80043ea:	f7ff ba86 	b.w	80038fa <get_wspr_channel_symbols+0x182>
 80043ee:	aa40      	add	r2, sp, #256	; 0x100
		for (i=0; i<plen; i++) {
 80043f0:	4603      	mov	r3, r0
 80043f2:	9202      	str	r2, [sp, #8]
 80043f4:	f7ff ba81 	b.w	80038fa <get_wspr_channel_symbols+0x182>
 80043f8:	08019304 	.word	0x08019304
 80043fc:	080194dc 	.word	0x080194dc
 8004400:	00354300 	.word	0x00354300
 8004404:	00000000 	.word	0x00000000

08004408 <SendWSPR>:
{
 8004408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800440c:	496a      	ldr	r1, [pc, #424]	; (80045b8 <SendWSPR+0x1b0>)
 800440e:	486b      	ldr	r0, [pc, #428]	; (80045bc <SendWSPR+0x1b4>)
	LOfreq = (double)WSPR_FREQ;
 8004410:	4c6b      	ldr	r4, [pc, #428]	; (80045c0 <SendWSPR+0x1b8>)
 8004412:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80045f8 <SendWSPR+0x1f0>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004416:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80045fc <SendWSPR+0x1f4>
{
 800441a:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800441e:	f7ff f9ab 	bl	8003778 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8004422:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <SendWSPR+0x1bc>)
	LastTXFreq = LOfreq;
 8004424:	4a68      	ldr	r2, [pc, #416]	; (80045c8 <SendWSPR+0x1c0>)
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004426:	4969      	ldr	r1, [pc, #420]	; (80045cc <SendWSPR+0x1c4>)
 8004428:	4869      	ldr	r0, [pc, #420]	; (80045d0 <SendWSPR+0x1c8>)
	LastTXFreq = LOfreq;
 800442a:	6013      	str	r3, [r2, #0]
	LOfreq = (double)WSPR_FREQ;
 800442c:	6023      	str	r3, [r4, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 800442e:	ed9f 0b60 	vldr	d0, [pc, #384]	; 80045b0 <SendWSPR+0x1a8>
 8004432:	f000 fcc1 	bl	8004db8 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 8004436:	2314      	movs	r3, #20
 8004438:	4a66      	ldr	r2, [pc, #408]	; (80045d4 <SendWSPR+0x1cc>)
 800443a:	7013      	strb	r3, [r2, #0]
				LED_GREEN_ON;
 800443c:	4d66      	ldr	r5, [pc, #408]	; (80045d8 <SendWSPR+0x1d0>)
			if(KEYER_DASH || KEYER_DOT)
 800443e:	4c67      	ldr	r4, [pc, #412]	; (80045dc <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004440:	e012      	b.n	8004468 <SendWSPR+0x60>
 8004442:	f8db 3000 	ldr.w	r3, [fp]
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d51e      	bpl.n	8004488 <SendWSPR+0x80>
				LED_GREEN_ON;
 800444a:	2201      	movs	r2, #1
 800444c:	f006 fa88 	bl	800a960 <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	4620      	mov	r0, r4
 8004454:	f006 fa7e 	bl	800a954 <HAL_GPIO_ReadPin>
 8004458:	4603      	mov	r3, r0
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	4620      	mov	r0, r4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d036      	beq.n	80044d0 <SendWSPR+0xc8>
 8004462:	f006 fa77 	bl	800a954 <HAL_GPIO_ReadPin>
 8004466:	b398      	cbz	r0, 80044d0 <SendWSPR+0xc8>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004468:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 800446c:	2200      	movs	r2, #0
				LED_GREEN_ON;
 800446e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004472:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0e4      	beq.n	8004442 <SendWSPR+0x3a>
			if (SystemSeconds % 2 == 0)
 8004478:	07de      	lsls	r6, r3, #31
 800447a:	d5e6      	bpl.n	800444a <SendWSPR+0x42>
				LED_GREEN_OFF;
 800447c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004480:	4628      	mov	r0, r5
 8004482:	f006 fa6d 	bl	800a960 <HAL_GPIO_WritePin>
 8004486:	e7e3      	b.n	8004450 <SendWSPR+0x48>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 8004488:	f00d ff80 	bl	801238c <rand>
 800448c:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <SendWSPR+0x1cc>)
 800448e:	2165      	movs	r1, #101	; 0x65
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	4b53      	ldr	r3, [pc, #332]	; (80045e0 <SendWSPR+0x1d8>)
 8004494:	fb83 3400 	smull	r3, r4, r3, r0
 8004498:	17c3      	asrs	r3, r0, #31
 800449a:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 800449e:	4c51      	ldr	r4, [pc, #324]	; (80045e4 <SendWSPR+0x1dc>)
 80044a0:	fb01 0013 	mls	r0, r1, r3, r0
 80044a4:	4290      	cmp	r0, r2
 80044a6:	dd17      	ble.n	80044d8 <SendWSPR+0xd0>
 80044a8:	7823      	ldrb	r3, [r4, #0]
 80044aa:	b9ab      	cbnz	r3, 80044d8 <SendWSPR+0xd0>
				if(KEYER_DASH || KEYER_DOT)
 80044ac:	4c4b      	ldr	r4, [pc, #300]	; (80045dc <SendWSPR+0x1d4>)
 80044ae:	e002      	b.n	80044b6 <SendWSPR+0xae>
 80044b0:	f006 fa50 	bl	800a954 <HAL_GPIO_ReadPin>
 80044b4:	b160      	cbz	r0, 80044d0 <SendWSPR+0xc8>
			while (SystemSeconds != 1)
 80044b6:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 80044ba:	2140      	movs	r1, #64	; 0x40
 80044bc:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d0bc      	beq.n	800443c <SendWSPR+0x34>
				if(KEYER_DASH || KEYER_DOT)
 80044c2:	f006 fa47 	bl	800a954 <HAL_GPIO_ReadPin>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	4620      	mov	r0, r4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ef      	bne.n	80044b0 <SendWSPR+0xa8>
}
 80044d0:	ecbd 8b02 	vpop	{d8}
 80044d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 80044d8:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <SendWSPR+0x1e0>)
 80044da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044de:	4943      	ldr	r1, [pc, #268]	; (80045ec <SendWSPR+0x1e4>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f004 fa5d 	bl	80089a0 <HAL_ADCEx_MultiModeStart_DMA>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d15f      	bne.n	80045aa <SendWSPR+0x1a2>
			WSPRFirstTime = 0;
 80044ea:	2300      	movs	r3, #0
			TXSwitch(1);
 80044ec:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 80044ee:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 80044f0:	f000 fefe 	bl	80052f0 <TXSwitch>
			CarrierEnable(1);
 80044f4:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 80044f6:	4c39      	ldr	r4, [pc, #228]	; (80045dc <SendWSPR+0x1d4>)
			CarrierEnable(1);
 80044f8:	f000 ff62 	bl	80053c0 <CarrierEnable>
			while (SystemSeconds != 1)
 80044fc:	e00a      	b.n	8004514 <SendWSPR+0x10c>
				if(KEYER_DASH || KEYER_DOT)
 80044fe:	f006 fa29 	bl	800a954 <HAL_GPIO_ReadPin>
 8004502:	4603      	mov	r3, r0
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	4620      	mov	r0, r4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0e1      	beq.n	80044d0 <SendWSPR+0xc8>
 800450c:	f006 fa22 	bl	800a954 <HAL_GPIO_ReadPin>
 8004510:	2800      	cmp	r0, #0
 8004512:	d0dd      	beq.n	80044d0 <SendWSPR+0xc8>
			while (SystemSeconds != 1)
 8004514:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 8004518:	2140      	movs	r1, #64	; 0x40
 800451a:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 800451c:	2f01      	cmp	r7, #1
 800451e:	d1ee      	bne.n	80044fe <SendWSPR+0xf6>
			WSPRTone = syms[txIndex++];
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <SendWSPR+0x1b0>)
 8004522:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8004600 <SendWSPR+0x1f8>
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 800452a:	4d31      	ldr	r5, [pc, #196]	; (80045f0 <SendWSPR+0x1e8>)
						LED_GREEN_OFF;
 800452c:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 80045d8 <SendWSPR+0x1d0>
			WSPRTone = syms[txIndex++];
 8004530:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 8004534:	f003 f828 	bl	8007588 <HAL_GetTick>
 8004538:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <SendWSPR+0x1ec>)
 800453c:	037c      	lsls	r4, r7, #13
 800453e:	fba3 3404 	umull	r3, r4, r3, r4
 8004542:	07fb      	lsls	r3, r7, #31
 8004544:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8004548:	d522      	bpl.n	8004590 <SendWSPR+0x188>
 800454a:	e001      	b.n	8004550 <SendWSPR+0x148>
						LED_GREEN_OFF;
 800454c:	f006 fa08 	bl	800a960 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004550:	f003 f81a 	bl	8007588 <HAL_GetTick>
 8004554:	682e      	ldr	r6, [r5, #0]
 8004556:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800455e:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004562:	1b9b      	subs	r3, r3, r6
 8004564:	429c      	cmp	r4, r3
 8004566:	d8f1      	bhi.n	800454c <SendWSPR+0x144>
				WSPRTone = syms[txIndex++];
 8004568:	3701      	adds	r7, #1
 800456a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 800456e:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 8004570:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 8004574:	d1e1      	bne.n	800453a <SendWSPR+0x132>
			TXSwitch(0);
 8004576:	2000      	movs	r0, #0
 8004578:	f000 feba 	bl	80052f0 <TXSwitch>
			CarrierEnable(0);
 800457c:	2000      	movs	r0, #0
 800457e:	f000 ff1f 	bl	80053c0 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 8004582:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <SendWSPR+0x1e0>)
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f004 fa87 	bl	8008a98 <HAL_ADCEx_MultiModeStop_DMA>
 800458a:	e757      	b.n	800443c <SendWSPR+0x34>
						LED_GREEN_ON;
 800458c:	f006 f9e8 	bl	800a960 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004590:	f002 fffa 	bl	8007588 <HAL_GetTick>
 8004594:	682e      	ldr	r6, [r5, #0]
 8004596:	4603      	mov	r3, r0
						LED_GREEN_ON;
 8004598:	2201      	movs	r2, #1
 800459a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800459e:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80045a2:	1b9b      	subs	r3, r3, r6
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d3f1      	bcc.n	800458c <SendWSPR+0x184>
 80045a8:	e7de      	b.n	8004568 <SendWSPR+0x160>
				Error_Handler();
 80045aa:	f000 ff67 	bl	800547c <Error_Handler>
 80045ae:	e79c      	b.n	80044ea <SendWSPR+0xe2>
 80045b0:	c0000000 	.word	0xc0000000
 80045b4:	415adb21 	.word	0x415adb21
 80045b8:	24000604 	.word	0x24000604
 80045bc:	08019314 	.word	0x08019314
 80045c0:	24006124 	.word	0x24006124
 80045c4:	4ad6d90e 	.word	0x4ad6d90e
 80045c8:	24006134 	.word	0x24006134
 80045cc:	24005104 	.word	0x24005104
 80045d0:	240050f8 	.word	0x240050f8
 80045d4:	240072d5 	.word	0x240072d5
 80045d8:	58020400 	.word	0x58020400
 80045dc:	58020000 	.word	0x58020000
 80045e0:	288df0cb 	.word	0x288df0cb
 80045e4:	2400020c 	.word	0x2400020c
 80045e8:	24005110 	.word	0x24005110
 80045ec:	24007300 	.word	0x24007300
 80045f0:	24000600 	.word	0x24000600
 80045f4:	aaaaaaab 	.word	0xaaaaaaab
 80045f8:	240061a4 	.word	0x240061a4
 80045fc:	240061a0 	.word	0x240061a0
 8004600:	240072d6 	.word	0x240072d6

08004604 <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 8004604:	4b7b      	ldr	r3, [pc, #492]	; (80047f4 <DisplayStatus.part.0+0x1f0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	b084      	sub	sp, #16
		switch(Fstep)
 8004610:	f000 80e7 	beq.w	80047e2 <DisplayStatus.part.0+0x1de>
 8004614:	d81f      	bhi.n	8004656 <DisplayStatus.part.0+0x52>
 8004616:	2b0a      	cmp	r3, #10
 8004618:	f000 80d5 	beq.w	80047c6 <DisplayStatus.part.0+0x1c2>
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d110      	bne.n	8004642 <DisplayStatus.part.0+0x3e>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 8004620:	4b75      	ldr	r3, [pc, #468]	; (80047f8 <DisplayStatus.part.0+0x1f4>)
 8004622:	4a76      	ldr	r2, [pc, #472]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 8004624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004628:	6010      	str	r0, [r2, #0]
 800462a:	8091      	strh	r1, [r2, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 800462c:	4b74      	ldr	r3, [pc, #464]	; (8004800 <DisplayStatus.part.0+0x1fc>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b03      	cmp	r3, #3
 8004632:	f200 80dd 	bhi.w	80047f0 <DisplayStatus.part.0+0x1ec>
 8004636:	e8df f013 	tbh	[pc, r3, lsl #1]
 800463a:	00bd      	.short	0x00bd
 800463c:	009800b9 	.word	0x009800b9
 8004640:	0029      	.short	0x0029
		switch(Fstep)
 8004642:	2b01      	cmp	r3, #1
 8004644:	f040 80ba 	bne.w	80047bc <DisplayStatus.part.0+0x1b8>
		case 1:			strcpy(StringStep,"   1 "); break;
 8004648:	4b6e      	ldr	r3, [pc, #440]	; (8004804 <DisplayStatus.part.0+0x200>)
 800464a:	4a6c      	ldr	r2, [pc, #432]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 800464c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	8091      	strh	r1, [r2, #4]
 8004654:	e7ea      	b.n	800462c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 8004656:	f242 7210 	movw	r2, #10000	; 0x2710
 800465a:	4293      	cmp	r3, r2
 800465c:	f000 80ba 	beq.w	80047d4 <DisplayStatus.part.0+0x1d0>
 8004660:	4a69      	ldr	r2, [pc, #420]	; (8004808 <DisplayStatus.part.0+0x204>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d106      	bne.n	8004674 <DisplayStatus.part.0+0x70>
		case 100000: 	strcpy(StringStep," 100K"); break;
 8004666:	4b69      	ldr	r3, [pc, #420]	; (800480c <DisplayStatus.part.0+0x208>)
 8004668:	4a64      	ldr	r2, [pc, #400]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 800466a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800466e:	6010      	str	r0, [r2, #0]
 8004670:	8091      	strh	r1, [r2, #4]
 8004672:	e7db      	b.n	800462c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 8004674:	f242 3228 	movw	r2, #9000	; 0x2328
 8004678:	4293      	cmp	r3, r2
 800467a:	f040 809f 	bne.w	80047bc <DisplayStatus.part.0+0x1b8>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 800467e:	4b64      	ldr	r3, [pc, #400]	; (8004810 <DisplayStatus.part.0+0x20c>)
 8004680:	4a5e      	ldr	r2, [pc, #376]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 8004682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004686:	6010      	str	r0, [r2, #0]
 8004688:	8091      	strh	r1, [r2, #4]
 800468a:	e7cf      	b.n	800462c <DisplayStatus.part.0+0x28>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <DisplayStatus.part.0+0x210>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4e61      	ldr	r6, [pc, #388]	; (8004818 <DisplayStatus.part.0+0x214>)
 8004692:	0c19      	lsrs	r1, r3, #16
 8004694:	8033      	strh	r3, [r6, #0]
 8004696:	70b1      	strb	r1, [r6, #2]
		}
		switch (CurrentAGC)
 8004698:	4b60      	ldr	r3, [pc, #384]	; (800481c <DisplayStatus.part.0+0x218>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d06b      	beq.n	8004778 <DisplayStatus.part.0+0x174>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d104      	bne.n	80046ae <DisplayStatus.part.0+0xaa>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 80046a4:	495e      	ldr	r1, [pc, #376]	; (8004820 <DisplayStatus.part.0+0x21c>)
 80046a6:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <DisplayStatus.part.0+0x220>)
 80046a8:	c903      	ldmia	r1, {r0, r1}
 80046aa:	6018      	str	r0, [r3, #0]
 80046ac:	7119      	strb	r1, [r3, #4]
		}
		switch (CurrentBW)
 80046ae:	4b5e      	ldr	r3, [pc, #376]	; (8004828 <DisplayStatus.part.0+0x224>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d069      	beq.n	800478a <DisplayStatus.part.0+0x186>
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d17e      	bne.n	80047b8 <DisplayStatus.part.0+0x1b4>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 80046ba:	4b5c      	ldr	r3, [pc, #368]	; (800482c <DisplayStatus.part.0+0x228>)
 80046bc:	4c5c      	ldr	r4, [pc, #368]	; (8004830 <DisplayStatus.part.0+0x22c>)
 80046be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046c2:	6020      	str	r0, [r4, #0]
 80046c4:	7121      	strb	r1, [r4, #4]
		}
		switch (TxPowerOut)
 80046c6:	4b5b      	ldr	r3, [pc, #364]	; (8004834 <DisplayStatus.part.0+0x230>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ce:	d069      	beq.n	80047a4 <DisplayStatus.part.0+0x1a0>
 80046d0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80046d4:	4d58      	ldr	r5, [pc, #352]	; (8004838 <DisplayStatus.part.0+0x234>)
 80046d6:	428b      	cmp	r3, r1
 80046d8:	d072      	beq.n	80047c0 <DisplayStatus.part.0+0x1bc>
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80046de:	bf04      	itt	eq
 80046e0:	4b56      	ldreq	r3, [pc, #344]	; (800483c <DisplayStatus.part.0+0x238>)
 80046e2:	602b      	streq	r3, [r5, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
		//		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGGprovaprova %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, RXVolume);
		//sprintf((char *)UartTXString, "\e[6;1H123456789012345678901234567890123456789012345678901234567890\r");
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth);
 80046e4:	4b56      	ldr	r3, [pc, #344]	; (8004840 <DisplayStatus.part.0+0x23c>)
 80046e6:	9402      	str	r4, [sp, #8]
 80046e8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004844 <DisplayStatus.part.0+0x240>
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	4955      	ldr	r1, [pc, #340]	; (8004848 <DisplayStatus.part.0+0x244>)
 80046f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f6:	4855      	ldr	r0, [pc, #340]	; (800484c <DisplayStatus.part.0+0x248>)
 80046f8:	e9cd 2600 	strd	r2, r6, [sp]
 80046fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004700:	ec53 2b17 	vmov	r2, r3, d7
 8004704:	f00e fc08 	bl	8012f18 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8004708:	4850      	ldr	r0, [pc, #320]	; (800484c <DisplayStatus.part.0+0x248>)
 800470a:	f7fb fe99 	bl	8000440 <strlen>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 800470e:	494f      	ldr	r1, [pc, #316]	; (800484c <DisplayStatus.part.0+0x248>)
 8004710:	4602      	mov	r2, r0
 8004712:	2000      	movs	r0, #0
 8004714:	f00a ffc6 	bl	800f6a4 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 8004718:	2000      	movs	r0, #0
 800471a:	f00a ff7f 	bl	800f61c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 800471e:	2001      	movs	r0, #1
 8004720:	f002 ff38 	bl	8007594 <HAL_Delay>
		//TODO: TinyUSB seems to have a 64 byte limit in USB out buffer. For now we split the string.
		//		Best solution would be to have an auto split write function

		PrintUI(UartTXString);
		sprintf((char *)UartTXString, "\e[6;1HAGC %s ERR %d WPM %d PWR %s Volume %1.1f   \r", StringAGC, TXFreqError, keyer_speed, StringTxPower, RXVolume);
 8004724:	494a      	ldr	r1, [pc, #296]	; (8004850 <DisplayStatus.part.0+0x24c>)
 8004726:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <DisplayStatus.part.0+0x250>)
 8004728:	ed91 7a00 	vldr	s14, [r1]
 800472c:	6810      	ldr	r0, [r2, #0]
 800472e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004732:	4b49      	ldr	r3, [pc, #292]	; (8004858 <DisplayStatus.part.0+0x254>)
 8004734:	4949      	ldr	r1, [pc, #292]	; (800485c <DisplayStatus.part.0+0x258>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <DisplayStatus.part.0+0x220>)
 800473a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800473e:	e9cd 0500 	strd	r0, r5, [sp]
 8004742:	4842      	ldr	r0, [pc, #264]	; (800484c <DisplayStatus.part.0+0x248>)
 8004744:	f00e fbe8 	bl	8012f18 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8004748:	4840      	ldr	r0, [pc, #256]	; (800484c <DisplayStatus.part.0+0x248>)
 800474a:	f7fb fe79 	bl	8000440 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 800474e:	493f      	ldr	r1, [pc, #252]	; (800484c <DisplayStatus.part.0+0x248>)
 8004750:	4602      	mov	r2, r0
 8004752:	2000      	movs	r0, #0
 8004754:	f00a ffa6 	bl	800f6a4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8004758:	2000      	movs	r0, #0
 800475a:	f00a ff5f 	bl	800f61c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 800475e:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 8004760:	b004      	add	sp, #16
 8004762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8004766:	f002 bf15 	b.w	8007594 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 800476a:	4b3d      	ldr	r3, [pc, #244]	; (8004860 <DisplayStatus.part.0+0x25c>)
 800476c:	4e2a      	ldr	r6, [pc, #168]	; (8004818 <DisplayStatus.part.0+0x214>)
 800476e:	6033      	str	r3, [r6, #0]
		switch (CurrentAGC)
 8004770:	4b2a      	ldr	r3, [pc, #168]	; (800481c <DisplayStatus.part.0+0x218>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d193      	bne.n	80046a0 <DisplayStatus.part.0+0x9c>
		case Fast: strcpy(StringAGC,"Fast"); break;
 8004778:	493a      	ldr	r1, [pc, #232]	; (8004864 <DisplayStatus.part.0+0x260>)
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <DisplayStatus.part.0+0x220>)
 800477c:	c903      	ldmia	r1, {r0, r1}
 800477e:	6018      	str	r0, [r3, #0]
 8004780:	7119      	strb	r1, [r3, #4]
		switch (CurrentBW)
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <DisplayStatus.part.0+0x224>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d195      	bne.n	80046b6 <DisplayStatus.part.0+0xb2>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <DisplayStatus.part.0+0x264>)
 800478c:	4c28      	ldr	r4, [pc, #160]	; (8004830 <DisplayStatus.part.0+0x22c>)
 800478e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004792:	0c0b      	lsrs	r3, r1, #16
 8004794:	6020      	str	r0, [r4, #0]
 8004796:	80a1      	strh	r1, [r4, #4]
 8004798:	71a3      	strb	r3, [r4, #6]
		switch (TxPowerOut)
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <DisplayStatus.part.0+0x230>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d195      	bne.n	80046d0 <DisplayStatus.part.0+0xcc>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 80047a4:	4d24      	ldr	r5, [pc, #144]	; (8004838 <DisplayStatus.part.0+0x234>)
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <DisplayStatus.part.0+0x268>)
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	e79b      	b.n	80046e4 <DisplayStatus.part.0+0xe0>
		case LSB: strcpy(StringMode,"LSB"); break;
 80047ac:	4e1a      	ldr	r6, [pc, #104]	; (8004818 <DisplayStatus.part.0+0x214>)
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <DisplayStatus.part.0+0x26c>)
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	e771      	b.n	8004698 <DisplayStatus.part.0+0x94>
		case AM: strcpy(StringMode,"AM"); break;
 80047b4:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <DisplayStatus.part.0+0x270>)
 80047b6:	e76a      	b.n	800468e <DisplayStatus.part.0+0x8a>
 80047b8:	4c1d      	ldr	r4, [pc, #116]	; (8004830 <DisplayStatus.part.0+0x22c>)
 80047ba:	e784      	b.n	80046c6 <DisplayStatus.part.0+0xc2>
 80047bc:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 80047be:	e735      	b.n	800462c <DisplayStatus.part.0+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <DisplayStatus.part.0+0x274>)
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	e78e      	b.n	80046e4 <DisplayStatus.part.0+0xe0>
		case 10: 		strcpy(StringStep,"  10 "); break;
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <DisplayStatus.part.0+0x278>)
 80047c8:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 80047ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	8091      	strh	r1, [r2, #4]
 80047d2:	e72b      	b.n	800462c <DisplayStatus.part.0+0x28>
		case 10000:		strcpy(StringStep,"  10K"); break;
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <DisplayStatus.part.0+0x27c>)
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 80047d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047dc:	6010      	str	r0, [r2, #0]
 80047de:	8091      	strh	r1, [r2, #4]
 80047e0:	e724      	b.n	800462c <DisplayStatus.part.0+0x28>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 80047e2:	4b28      	ldr	r3, [pc, #160]	; (8004884 <DisplayStatus.part.0+0x280>)
 80047e4:	4a05      	ldr	r2, [pc, #20]	; (80047fc <DisplayStatus.part.0+0x1f8>)
 80047e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	8091      	strh	r1, [r2, #4]
 80047ee:	e71d      	b.n	800462c <DisplayStatus.part.0+0x28>
 80047f0:	4e09      	ldr	r6, [pc, #36]	; (8004818 <DisplayStatus.part.0+0x214>)
 80047f2:	e751      	b.n	8004698 <DisplayStatus.part.0+0x94>
 80047f4:	2400510c 	.word	0x2400510c
 80047f8:	080194d8 	.word	0x080194d8
 80047fc:	24006188 	.word	0x24006188
 8004800:	24000ed0 	.word	0x24000ed0
 8004804:	080194c8 	.word	0x080194c8
 8004808:	000186a0 	.word	0x000186a0
 800480c:	080194f8 	.word	0x080194f8
 8004810:	080194e8 	.word	0x080194e8
 8004814:	08019504 	.word	0x08019504
 8004818:	24006180 	.word	0x24006180
 800481c:	24000ece 	.word	0x24000ece
 8004820:	08019510 	.word	0x08019510
 8004824:	24006178 	.word	0x24006178
 8004828:	24000ecf 	.word	0x24000ecf
 800482c:	08019520 	.word	0x08019520
 8004830:	24006198 	.word	0x24006198
 8004834:	240061b8 	.word	0x240061b8
 8004838:	24006190 	.word	0x24006190
 800483c:	00776f4c 	.word	0x00776f4c
 8004840:	24006124 	.word	0x24006124
 8004844:	3a83126f 	.word	0x3a83126f
 8004848:	08019528 	.word	0x08019528
 800484c:	240062d0 	.word	0x240062d0
 8004850:	24006148 	.word	0x24006148
 8004854:	2400acac 	.word	0x2400acac
 8004858:	240061ac 	.word	0x240061ac
 800485c:	0801955c 	.word	0x0801955c
 8004860:	00425355 	.word	0x00425355
 8004864:	08019508 	.word	0x08019508
 8004868:	08019518 	.word	0x08019518
 800486c:	0064694d 	.word	0x0064694d
 8004870:	0042534c 	.word	0x0042534c
 8004874:	08019500 	.word	0x08019500
 8004878:	0078614d 	.word	0x0078614d
 800487c:	080194d0 	.word	0x080194d0
 8004880:	080194f0 	.word	0x080194f0
 8004884:	080194e0 	.word	0x080194e0

08004888 <tud_mount_cb>:
}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop

0800488c <tud_umount_cb>:
}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <tud_suspend_cb>:
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <tud_resume_cb>:
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <tud_audio_get_req_entity_cb>:
{
 8004898:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800489a:	794d      	ldrb	r5, [r1, #5]
{
 800489c:	b08f      	sub	sp, #60	; 0x3c
 800489e:	460c      	mov	r4, r1
 80048a0:	4606      	mov	r6, r0
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80048a2:	2d04      	cmp	r5, #4
 80048a4:	d004      	beq.n	80048b0 <tud_audio_get_req_entity_cb+0x18>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 80048a6:	2d02      	cmp	r5, #2
 80048a8:	d010      	beq.n	80048cc <tud_audio_get_req_entity_cb+0x34>
	return false;
 80048aa:	2000      	movs	r0, #0
}
 80048ac:	b00f      	add	sp, #60	; 0x3c
 80048ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 80048b0:	78cf      	ldrb	r7, [r1, #3]
 80048b2:	2f01      	cmp	r7, #1
 80048b4:	d01e      	beq.n	80048f4 <tud_audio_get_req_entity_cb+0x5c>
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 80048b6:	2f02      	cmp	r7, #2
 80048b8:	d1f7      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
 80048ba:	784b      	ldrb	r3, [r1, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d1f4      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 80048c0:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 80048c2:	f88d 3004 	strb.w	r3, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 80048c6:	f00a fdc3 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 80048ca:	e7ef      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80048cc:	78cb      	ldrb	r3, [r1, #3]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d04c      	beq.n	800496c <tud_audio_get_req_entity_cb+0xd4>
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d1e9      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 80048d6:	784a      	ldrb	r2, [r1, #1]
 80048d8:	2a02      	cmp	r2, #2
 80048da:	d05b      	beq.n	8004994 <tud_audio_get_req_entity_cb+0xfc>
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 80048dc:	2a01      	cmp	r2, #1
 80048de:	d1e4      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 80048e0:	788c      	ldrb	r4, [r1, #2]
 80048e2:	4a32      	ldr	r2, [pc, #200]	; (80049ac <tud_audio_get_req_entity_cb+0x114>)
 80048e4:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 80048e8:	aa01      	add	r2, sp, #4
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 80048ea:	f8ad 4004 	strh.w	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 80048ee:	f00a fdaf 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 80048f2:	e7db      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 80048f4:	784b      	ldrb	r3, [r1, #1]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d044      	beq.n	8004984 <tud_audio_get_req_entity_cb+0xec>
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d1d5      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80048fe:	222a      	movs	r2, #42	; 0x2a
 8004900:	2100      	movs	r1, #0
 8004902:	a803      	add	r0, sp, #12
 8004904:	f00e fb6b 	bl	8012fde <memset>
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004908:	2300      	movs	r3, #0
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 800490a:	4621      	mov	r1, r4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800490c:	f64a 4444 	movw	r4, #44100	; 0xac44
 8004910:	f645 0288 	movw	r2, #22664	; 0x5888
 8004914:	f8ad 3008 	strh.w	r3, [sp, #8]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004918:	f8ad 300c 	strh.w	r3, [sp, #12]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 800491c:	4630      	mov	r0, r6
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800491e:	f8ad 3014 	strh.w	r3, [sp, #20]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004922:	f8ad 3018 	strh.w	r3, [sp, #24]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004926:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
 800492a:	f8ad 4006 	strh.w	r4, [sp, #6]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800492e:	f8ad 400a 	strh.w	r4, [sp, #10]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004932:	f64b 3480 	movw	r4, #48000	; 0xbb80
 8004936:	f8ad 201e 	strh.w	r2, [sp, #30]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800493a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 800493e:	aa01      	add	r2, sp, #4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004940:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004944:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8004948:	2332      	movs	r3, #50	; 0x32
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 800494a:	f8ad 5004 	strh.w	r5, [sp, #4]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800494e:	f8ad 7020 	strh.w	r7, [sp, #32]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004952:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004956:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800495a:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800495e:	f8ad 4012 	strh.w	r4, [sp, #18]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004962:	f8ad 4016 	strh.w	r4, [sp, #22]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8004966:	f00a fd73 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 800496a:	e79f      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 800496c:	784b      	ldrb	r3, [r1, #1]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d19b      	bne.n	80048aa <tud_audio_get_req_entity_cb+0x12>
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8004972:	788a      	ldrb	r2, [r1, #2]
 8004974:	4c0e      	ldr	r4, [pc, #56]	; (80049b0 <tud_audio_get_req_entity_cb+0x118>)
 8004976:	5ca4      	ldrb	r4, [r4, r2]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 8004978:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 800497a:	f88d 4004 	strb.w	r4, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800497e:	f00a fd67 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 8004982:	e793      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 8004984:	4c0b      	ldr	r4, [pc, #44]	; (80049b4 <tud_audio_get_req_entity_cb+0x11c>)
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8004986:	462b      	mov	r3, r5
 8004988:	aa01      	add	r2, sp, #4
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800498a:	6824      	ldr	r4, [r4, #0]
 800498c:	9401      	str	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 800498e:	f00a fd5f 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 8004992:	e78b      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
			audio_control_range_2_n_t(1) range_vol = {
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <tud_audio_get_req_entity_cb+0x120>)
 8004996:	aa01      	add	r2, sp, #4
 8004998:	e893 0003 	ldmia.w	r3, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800499c:	2308      	movs	r3, #8
			audio_control_range_2_n_t(1) range_vol = {
 800499e:	e882 0003 	stmia.w	r2, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 80049a2:	4621      	mov	r1, r4
 80049a4:	4630      	mov	r0, r6
 80049a6:	f00a fd53 	bl	800f450 <tud_audio_buffer_and_schedule_control_xfer>
 80049aa:	e77f      	b.n	80048ac <tud_audio_get_req_entity_cb+0x14>
 80049ac:	2400c78c 	.word	0x2400c78c
 80049b0:	2400afe4 	.word	0x2400afe4
 80049b4:	24000310 	.word	0x24000310
 80049b8:	080163d0 	.word	0x080163d0

080049bc <tud_audio_set_req_entity_cb>:
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 80049bc:	794b      	ldrb	r3, [r1, #5]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d010      	beq.n	80049e4 <tud_audio_set_req_entity_cb+0x28>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d001      	beq.n	80049ca <tud_audio_set_req_entity_cb+0xe>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80049c6:	2000      	movs	r0, #0
}
 80049c8:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80049ca:	784b      	ldrb	r3, [r1, #1]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d1fa      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 80049d0:	78c8      	ldrb	r0, [r1, #3]
 80049d2:	2801      	cmp	r0, #1
 80049d4:	d1f7      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 80049d6:	88cb      	ldrh	r3, [r1, #6]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d1f4      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <tud_audio_set_req_entity_cb+0x60>)
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	601a      	str	r2, [r3, #0]
		return true;
 80049e2:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80049e4:	7848      	ldrb	r0, [r1, #1]
 80049e6:	2801      	cmp	r0, #1
 80049e8:	d1ed      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80049ea:	78cb      	ldrb	r3, [r1, #3]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d00b      	beq.n	8004a08 <tud_audio_set_req_entity_cb+0x4c>
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d1e8      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 80049f4:	88cb      	ldrh	r3, [r1, #6]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d1e5      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 80049fa:	f9b2 c000 	ldrsh.w	ip, [r2]
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <tud_audio_set_req_entity_cb+0x64>)
 8004a00:	788a      	ldrb	r2, [r1, #2]
 8004a02:	f823 c012 	strh.w	ip, [r3, r2, lsl #1]
		return true;
 8004a06:	4770      	bx	lr
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8004a08:	88c8      	ldrh	r0, [r1, #6]
 8004a0a:	2801      	cmp	r0, #1
 8004a0c:	d1db      	bne.n	80049c6 <tud_audio_set_req_entity_cb+0xa>
		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 8004a0e:	f992 c000 	ldrsb.w	ip, [r2]
 8004a12:	788b      	ldrb	r3, [r1, #2]
 8004a14:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <tud_audio_set_req_entity_cb+0x68>)
 8004a16:	f802 c003 	strb.w	ip, [r2, r3]
		return true;
 8004a1a:	4770      	bx	lr
 8004a1c:	24000310 	.word	0x24000310
 8004a20:	2400c78c 	.word	0x2400c78c
 8004a24:	2400afe4 	.word	0x2400afe4

08004a28 <tud_audio_set_itf_close_EP_cb>:
}
 8004a28:	2001      	movs	r0, #1
 8004a2a:	4770      	bx	lr

08004a2c <tud_audio_set_itf_cb>:
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8004a2c:	884b      	ldrh	r3, [r1, #2]
	spk_data_size = 0;
 8004a2e:	2000      	movs	r0, #0
 8004a30:	4a05      	ldr	r2, [pc, #20]	; (8004a48 <tud_audio_set_itf_cb+0x1c>)

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	6010      	str	r0, [r2, #0]
	if(alt != 0)
 8004a36:	b12b      	cbz	r3, 8004a44 <tud_audio_set_itf_cb+0x18>
		current_resolution = resolutions_per_format[alt-1];
 8004a38:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <tud_audio_set_itf_cb+0x20>)
 8004a3a:	4905      	ldr	r1, [pc, #20]	; (8004a50 <tud_audio_set_itf_cb+0x24>)
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004a42:	700b      	strb	r3, [r1, #0]
}
 8004a44:	2001      	movs	r0, #1
 8004a46:	4770      	bx	lr
 8004a48:	2400b754 	.word	0x2400b754
 8004a4c:	080195c8 	.word	0x080195c8
 8004a50:	24007b14 	.word	0x24007b14

08004a54 <tud_audio_rx_done_pre_read_cb>:
{
 8004a54:	460a      	mov	r2, r1
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
  return tud_audio_n_read(0, buffer, bufsize);
 8004a56:	2000      	movs	r0, #0
 8004a58:	4904      	ldr	r1, [pc, #16]	; (8004a6c <tud_audio_rx_done_pre_read_cb+0x18>)
 8004a5a:	b508      	push	{r3, lr}
 8004a5c:	f00a f99a 	bl	800ed94 <tud_audio_n_read>
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <tud_audio_rx_done_pre_read_cb+0x1c>)
 8004a62:	4602      	mov	r2, r0
}
 8004a64:	2001      	movs	r0, #1
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bd08      	pop	{r3, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2400b144 	.word	0x2400b144
 8004a70:	2400b754 	.word	0x2400b754

08004a74 <tud_audio_tx_done_pre_load_cb>:
}
 8004a74:	2001      	movs	r0, #1
 8004a76:	4770      	bx	lr

08004a78 <tud_audio_tx_done_post_load_cb>:
{
 8004a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*dst = (int16_t*)mic_buf;
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <tud_audio_tx_done_post_load_cb+0xdc>)
	for (uint16_t i = 0; i < 48; i++ )
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8004b64 <tud_audio_tx_done_post_load_cb+0xec>
		SDRAudioPtr = (USBAudioPtr * 2 * 15625 + 24000)/ 48000;
 8004a84:	f647 2e12 	movw	lr, #31250	; 0x7a12
 8004a88:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8004b68 <tud_audio_tx_done_post_load_cb+0xf0>
	int16_t* dst = (int16_t*)mic_buf;
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f89a 5000 	ldrb.w	r5, [sl]
 8004a92:	f103 0860 	add.w	r8, r3, #96	; 0x60
 8004a96:	f8db 4000 	ldr.w	r4, [fp]
		SDRAudioPtr = (USBAudioPtr * 2 * 15625 + 24000)/ 48000;
 8004a9a:	f645 5cc0 	movw	ip, #24000	; 0x5dc0
 8004a9e:	4e2e      	ldr	r6, [pc, #184]	; (8004b58 <tud_audio_tx_done_post_load_cb+0xe0>)
 8004aa0:	4f2e      	ldr	r7, [pc, #184]	; (8004b5c <tud_audio_tx_done_post_load_cb+0xe4>)
			if (ConvCompleteAudioPtr > 100)
 8004aa2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004b6c <tud_audio_tx_done_post_load_cb+0xf4>
	*dst = (int16_t*)mic_buf;
 8004aa6:	801b      	strh	r3, [r3, #0]
		SDRAudioPtr = (USBAudioPtr * 2 * 15625 + 24000)/ 48000;
 8004aa8:	fb0e c304 	mla	r3, lr, r4, ip
 8004aac:	fba7 1303 	umull	r1, r3, r7, r3
 8004ab0:	0a9b      	lsrs	r3, r3, #10
		if (SDRAudioPtr == 2 * BSIZE){
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d101      	bne.n	8004abc <tud_audio_tx_done_post_load_cb+0x44>
			SDRAudioPtr = 0;
 8004ab8:	2400      	movs	r4, #0
			USBAudioPtr = 0;
 8004aba:	4623      	mov	r3, r4
		*dst ++ =  4 * ((int16_t)AudioOut[SDRAudioPtr]); //DAC out is 12 bit, USB 16
 8004abc:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8004ac0:	0089      	lsls	r1, r1, #2
 8004ac2:	f820 1b02 	strh.w	r1, [r0], #2
		if (ConvComplete)
 8004ac6:	bb75      	cbnz	r5, 8004b26 <tud_audio_tx_done_post_load_cb+0xae>
	for (uint16_t i = 0; i < 48; i++ )
 8004ac8:	3201      	adds	r2, #1
 8004aca:	4540      	cmp	r0, r8
				USBAudioPtr++;
 8004acc:	f104 0401 	add.w	r4, r4, #1
	for (uint16_t i = 0; i < 48; i++ )
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	d01a      	beq.n	8004b0a <tud_audio_tx_done_post_load_cb+0x92>
 8004ad4:	f1c2 022f 	rsb	r2, r2, #47	; 0x2f
		SDRAudioPtr = (USBAudioPtr * 2 * 15625 + 24000)/ 48000;
 8004ad8:	f647 2c12 	movw	ip, #31250	; 0x7a12
 8004adc:	f645 57c0 	movw	r7, #24000	; 0x5dc0
 8004ae0:	4d1e      	ldr	r5, [pc, #120]	; (8004b5c <tud_audio_tx_done_post_load_cb+0xe4>)
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	3201      	adds	r2, #1
 8004ae6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004aea:	fb0c 7304 	mla	r3, ip, r4, r7
				USBAudioPtr++;
 8004aee:	3401      	adds	r4, #1
		SDRAudioPtr = (USBAudioPtr * 2 * 15625 + 24000)/ 48000;
 8004af0:	fba5 1303 	umull	r1, r3, r5, r3
 8004af4:	0a9b      	lsrs	r3, r3, #10
		if (SDRAudioPtr == 2 * BSIZE){
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afa:	d021      	beq.n	8004b40 <tud_audio_tx_done_post_load_cb+0xc8>
		*dst ++ =  4 * ((int16_t)AudioOut[SDRAudioPtr]); //DAC out is 12 bit, USB 16
 8004afc:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8004b00:	0089      	lsls	r1, r1, #2
 8004b02:	f820 1b02 	strh.w	r1, [r0], #2
	for (uint16_t i = 0; i < 48; i++ )
 8004b06:	4282      	cmp	r2, r0
 8004b08:	d1ef      	bne.n	8004aea <tud_audio_tx_done_post_load_cb+0x72>
 8004b0a:	4915      	ldr	r1, [pc, #84]	; (8004b60 <tud_audio_tx_done_post_load_cb+0xe8>)
 8004b0c:	2000      	movs	r0, #0

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
  return tud_audio_n_write(0, data, len);
 8004b0e:	2260      	movs	r2, #96	; 0x60
 8004b10:	f8cb 4000 	str.w	r4, [fp]
 8004b14:	600b      	str	r3, [r1, #0]
 8004b16:	490f      	ldr	r1, [pc, #60]	; (8004b54 <tud_audio_tx_done_post_load_cb+0xdc>)
 8004b18:	f88a 0000 	strb.w	r0, [sl]
 8004b1c:	f00a f946 	bl	800edac <tud_audio_n_write>
}
 8004b20:	2001      	movs	r0, #1
 8004b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ConvCompleteAudioPtr > 100)
 8004b26:	f8b9 1000 	ldrh.w	r1, [r9]
 8004b2a:	b209      	sxth	r1, r1
 8004b2c:	2964      	cmp	r1, #100	; 0x64
 8004b2e:	dc00      	bgt.n	8004b32 <tud_audio_tx_done_post_load_cb+0xba>
		USBAudioPtr++;
 8004b30:	3402      	adds	r4, #2
	for (uint16_t i = 0; i < 48; i++ )
 8004b32:	3201      	adds	r2, #1
 8004b34:	4540      	cmp	r0, r8
 8004b36:	f04f 0500 	mov.w	r5, #0
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	d1b4      	bne.n	8004aa8 <tud_audio_tx_done_post_load_cb+0x30>
 8004b3e:	e7e4      	b.n	8004b0a <tud_audio_tx_done_post_load_cb+0x92>
		*dst ++ =  4 * ((int16_t)AudioOut[SDRAudioPtr]); //DAC out is 12 bit, USB 16
 8004b40:	8833      	ldrh	r3, [r6, #0]
				USBAudioPtr++;
 8004b42:	2401      	movs	r4, #1
		*dst ++ =  4 * ((int16_t)AudioOut[SDRAudioPtr]); //DAC out is 12 bit, USB 16
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	f820 3b02 	strh.w	r3, [r0], #2
	for (uint16_t i = 0; i < 48; i++ )
 8004b4a:	4282      	cmp	r2, r0
 8004b4c:	d1cd      	bne.n	8004aea <tud_audio_tx_done_post_load_cb+0x72>
			SDRAudioPtr = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e7db      	b.n	8004b0a <tud_audio_tx_done_post_load_cb+0x92>
 8004b52:	bf00      	nop
 8004b54:	2400acbc 	.word	0x2400acbc
 8004b58:	240006c0 	.word	0x240006c0
 8004b5c:	057619f1 	.word	0x057619f1
 8004b60:	2400614c 	.word	0x2400614c
 8004b64:	24000eca 	.word	0x24000eca
 8004b68:	240061bc 	.word	0x240061bc
 8004b6c:	24000ecc 	.word	0x24000ecc

08004b70 <tud_cdc_line_state_cb>:
}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop

08004b74 <tud_cdc_rx_cb>:
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop

08004b78 <cdc_task>:
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop

08004b7c <audio_task>:
{
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (spk_data_size)
 8004b80:	4d3b      	ldr	r5, [pc, #236]	; (8004c70 <audio_task+0xf4>)
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d071      	beq.n	8004c6c <audio_task+0xf0>
		int16_t *limit = (int16_t*)spk_buf + spk_data_size / 2;
 8004b88:	bfb8      	it	lt
 8004b8a:	3301      	addlt	r3, #1
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <audio_task+0xf8>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	eb02 0c03 	add.w	ip, r2, r3
		while (src < limit)
 8004b96:	4594      	cmp	ip, r2
 8004b98:	d966      	bls.n	8004c68 <audio_task+0xec>
 8004b9a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8004c94 <audio_task+0x118>
				AudioInCounter = 0;
 8004b9e:	f04f 0e00 	mov.w	lr, #0
 8004ba2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004c98 <audio_task+0x11c>
		int16_t *src = (int16_t*)spk_buf;
 8004ba6:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <audio_task+0xf8>)
 8004ba8:	eddf 4a33 	vldr	s9, [pc, #204]	; 8004c78 <audio_task+0xfc>
 8004bac:	f9b9 3000 	ldrsh.w	r3, [r9]
 8004bb0:	ed98 6a00 	vldr	s12, [r8]
				USBFreqFiltered = (USBFreq + (USB_FREQ_FILTER_COEFF - 1) * USBFreqFiltered) / USB_FREQ_FILTER_COEFF;
 8004bb4:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8004c7c <audio_task+0x100>
 8004bb8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8004c80 <audio_task+0x104>
 8004bbc:	4c31      	ldr	r4, [pc, #196]	; (8004c84 <audio_task+0x108>)
 8004bbe:	4832      	ldr	r0, [pc, #200]	; (8004c88 <audio_task+0x10c>)
				USBFreq = 48000.0 / (AudioInCounter - LastAudioInCounter -  (float)AudioUSBIn / (float)(AudioUSBIn - LastAudioUSBIn));
 8004bc0:	4f32      	ldr	r7, [pc, #200]	; (8004c8c <audio_task+0x110>)
				USBFreqFiltered = (USBFreq + (USB_FREQ_FILTER_COEFF - 1) * USBFreqFiltered) / USB_FREQ_FILTER_COEFF;
 8004bc2:	4e33      	ldr	r6, [pc, #204]	; (8004c90 <audio_task+0x114>)
 8004bc4:	e034      	b.n	8004c30 <audio_task+0xb4>
				if (FSKAudioPresent < 1000)
 8004bc6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004bca:	d202      	bcs.n	8004bd2 <audio_task+0x56>
					FSKAudioPresent += 16;
 8004bcc:	6821      	ldr	r1, [r4, #0]
 8004bce:	3110      	adds	r1, #16
 8004bd0:	6021      	str	r1, [r4, #0]
				USBFreq = 48000.0 / (AudioInCounter - LastAudioInCounter -  (float)AudioUSBIn / (float)(AudioUSBIn - LastAudioUSBIn));
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eba3 010a 	sub.w	r1, r3, sl
			if ((AudioUSBIn >= 0) && (LastAudioUSBIn < 0))
 8004bda:	f1ba 0f00 	cmp.w	sl, #0
				USBFreq = 48000.0 / (AudioInCounter - LastAudioInCounter -  (float)AudioUSBIn / (float)(AudioUSBIn - LastAudioUSBIn));
 8004bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004be2:	ee07 1a90 	vmov	s15, r1
 8004be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if ((AudioUSBIn >= 0) && (LastAudioUSBIn < 0))
 8004bea:	da1b      	bge.n	8004c24 <audio_task+0xa8>
				USBFreq = 48000.0 / (AudioInCounter - LastAudioInCounter -  (float)AudioUSBIn / (float)(AudioUSBIn - LastAudioUSBIn));
 8004bec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bf0:	edd0 7a00 	vldr	s15, [r0]
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004bfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c00:	eeb1 6a66 	vneg.f32	s12, s13
 8004c04:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004c08:	ed87 7a00 	vstr	s14, [r7]
				USBFreqFiltered = (USBFreq + (USB_FREQ_FILTER_COEFF - 1) * USBFreqFiltered) / USB_FREQ_FILTER_COEFF;
 8004c0c:	ed96 7a00 	vldr	s14, [r6]
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004c18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004c1c:	edc6 7a00 	vstr	s15, [r6]
				AudioInCounter = 0;
 8004c20:	f8c0 e000 	str.w	lr, [r0]
			AudioInCounter++;
 8004c24:	6801      	ldr	r1, [r0, #0]
		while (src < limit)
 8004c26:	4594      	cmp	ip, r2
			AudioInCounter++;
 8004c28:	f101 0101 	add.w	r1, r1, #1
 8004c2c:	6001      	str	r1, [r0, #0]
		while (src < limit)
 8004c2e:	d917      	bls.n	8004c60 <audio_task+0xe4>
			int32_t left = *src++;
 8004c30:	f932 1b04 	ldrsh.w	r1, [r2], #4
			AudioUSBIn = (int16_t) ((left >> 1) + (right >> 1));
 8004c34:	469a      	mov	sl, r3
 8004c36:	1049      	asrs	r1, r1, #1
			int32_t right = *src++;
 8004c38:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
			AudioUSBIn = (int16_t) ((left >> 1) + (right >> 1));
 8004c3c:	eb01 0363 	add.w	r3, r1, r3, asr #1
				if (FSKAudioPresent < 1000)
 8004c40:	6821      	ldr	r1, [r4, #0]
			if (AudioUSBIn > USB_IN_TX_THRESHOLD)
 8004c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c46:	dcbe      	bgt.n	8004bc6 <audio_task+0x4a>
				if (FSKAudioPresent > 0)
 8004c48:	b111      	cbz	r1, 8004c50 <audio_task+0xd4>
					FSKAudioPresent--;
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	3901      	subs	r1, #1
 8004c4e:	6021      	str	r1, [r4, #0]
			if ((AudioUSBIn >= 0) && (LastAudioUSBIn < 0))
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dabe      	bge.n	8004bd2 <audio_task+0x56>
			AudioInCounter++;
 8004c54:	6801      	ldr	r1, [r0, #0]
		while (src < limit)
 8004c56:	4594      	cmp	ip, r2
			AudioInCounter++;
 8004c58:	f101 0101 	add.w	r1, r1, #1
 8004c5c:	6001      	str	r1, [r0, #0]
		while (src < limit)
 8004c5e:	d8e7      	bhi.n	8004c30 <audio_task+0xb4>
 8004c60:	f8a9 3000 	strh.w	r3, [r9]
 8004c64:	ed88 6a00 	vstr	s12, [r8]
		spk_data_size = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	602b      	str	r3, [r5, #0]
}
 8004c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c70:	2400b754 	.word	0x2400b754
 8004c74:	2400b144 	.word	0x2400b144
 8004c78:	473b8000 	.word	0x473b8000
 8004c7c:	42440000 	.word	0x42440000
 8004c80:	3ca3d70a 	.word	0x3ca3d70a
 8004c84:	240050e0 	.word	0x240050e0
 8004c88:	240006b8 	.word	0x240006b8
 8004c8c:	240061c0 	.word	0x240061c0
 8004c90:	240061c4 	.word	0x240061c4
 8004c94:	24006130 	.word	0x24006130
 8004c98:	2400612c 	.word	0x2400612c

08004c9c <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM7)
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004c9e:	6802      	ldr	r2, [r0, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d000      	beq.n	8004ca6 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8004ca4:	4770      	bx	lr
		DoKeyer();
 8004ca6:	f7fc bc27 	b.w	80014f8 <DoKeyer>
 8004caa:	bf00      	nop
 8004cac:	40001400 	.word	0x40001400

08004cb0 <HAL_ADC_ConvCpltCallback>:
{
 8004cb0:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004cb4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004cb8:	490a      	ldr	r1, [pc, #40]	; (8004ce4 <HAL_ADC_ConvCpltCallback+0x34>)
 8004cba:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004cbe:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004cc2:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d1fa      	bne.n	8004cbe <HAL_ADC_ConvCpltCallback+0xe>
 8004cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ccc:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f7fd fab9 	bl	8002248 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <HAL_ADC_ConvCpltCallback+0x38>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
}
 8004cdc:	bd08      	pop	{r3, pc}
 8004cde:	bf00      	nop
 8004ce0:	24007700 	.word	0x24007700
 8004ce4:	e000ed00 	.word	0xe000ed00
 8004ce8:	2400c78a 	.word	0x2400c78a

08004cec <HAL_ADC_ConvHalfCpltCallback>:
{
 8004cec:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf0:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004cf4:	490a      	ldr	r1, [pc, #40]	; (8004d20 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004cf6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004cfa:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004cfe:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d1fa      	bne.n	8004cfa <HAL_ADC_ConvHalfCpltCallback+0xe>
 8004d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004d08:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fd fa9b 	bl	8002248 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
}
 8004d18:	bd08      	pop	{r3, pc}
 8004d1a:	bf00      	nop
 8004d1c:	24007300 	.word	0x24007300
 8004d20:	e000ed00 	.word	0xe000ed00
 8004d24:	2400c78a 	.word	0x2400c78a

08004d28 <HAL_DAC_ConvCpltCallbackCh1>:
	ConvCompleteAudioPtr = USBAudioPtr;
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
	ConvComplete = 1;
 8004d2a:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 8004d2c:	4809      	ldr	r0, [pc, #36]	; (8004d54 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
	ConvCompleteAudioPtr = USBAudioPtr;
 8004d2e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
{
 8004d34:	b410      	push	{r4}
	ConvCompleteAudioPtr = USBAudioPtr;
 8004d36:	8019      	strh	r1, [r3, #0]
	LED_RED_ON;
 8004d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	ConvComplete = 1;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <HAL_DAC_ConvCpltCallbackCh1+0x34>)
	ValidAudioHalf = &AudioOut[BSIZE];
 8004d3e:	4c08      	ldr	r4, [pc, #32]	; (8004d60 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
	ConvComplete = 1;
 8004d40:	701a      	strb	r2, [r3, #0]
	ValidAudioHalf = &AudioOut[BSIZE];
 8004d42:	6004      	str	r4, [r0, #0]
	LED_RED_ON;
 8004d44:	4807      	ldr	r0, [pc, #28]	; (8004d64 <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
}
 8004d46:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 8004d4a:	f005 be09 	b.w	800a960 <HAL_GPIO_WritePin>
 8004d4e:	bf00      	nop
 8004d50:	240061bc 	.word	0x240061bc
 8004d54:	240072d0 	.word	0x240072d0
 8004d58:	24000ecc 	.word	0x24000ecc
 8004d5c:	24000eca 	.word	0x24000eca
 8004d60:	24000ac0 	.word	0x24000ac0
 8004d64:	58020400 	.word	0x58020400

08004d68 <HAL_DAC_ConvHalfCpltCallbackCh1>:
{
 8004d68:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 8004d6c:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8004d6e:	4c05      	ldr	r4, [pc, #20]	; (8004d84 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 8004d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d74:	4804      	ldr	r0, [pc, #16]	; (8004d88 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 8004d76:	601c      	str	r4, [r3, #0]
}
 8004d78:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8004d7c:	f005 bdf0 	b.w	800a960 <HAL_GPIO_WritePin>
 8004d80:	240072d0 	.word	0x240072d0
 8004d84:	240006c0 	.word	0x240006c0
 8004d88:	58020400 	.word	0x58020400

08004d8c <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004d8c:	4907      	ldr	r1, [pc, #28]	; (8004dac <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8004d8e:	2002      	movs	r0, #2
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004d92:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004d94:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 8004d96:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004d98:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004d9a:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da0:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004da2:	6853      	ldr	r3, [r2, #4]
 8004da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da8:	6053      	str	r3, [r2, #4]
}
 8004daa:	4770      	bx	lr
 8004dac:	2400a320 	.word	0x2400a320
 8004db0:	2400613c 	.word	0x2400613c
 8004db4:	2400a384 	.word	0x2400a384

08004db8 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fod, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 8004dbc:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8004dbe:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8004dc2:	4aad      	ldr	r2, [pc, #692]	; (8005078 <SetWSPRPLLCoeff+0x2c0>)
{
 8004dc4:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004dc8:	f20f 2b9c 	addw	fp, pc, #668	; 0x29c
 8004dcc:	e9db ab00 	ldrd	sl, fp, [fp]
{
 8004dd0:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 8004dd2:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004dd6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	9b05      	ldr	r3, [sp, #20]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	f200 80e0 	bhi.w	8004fa4 <SetWSPRPLLCoeff+0x1ec>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 8004de4:	4ba5      	ldr	r3, [pc, #660]	; (800507c <SetWSPRPLLCoeff+0x2c4>)
 8004de6:	4604      	mov	r4, r0
 8004de8:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004dea:	ed9f 8aa5 	vldr	s16, [pc, #660]	; 8005080 <SetWSPRPLLCoeff+0x2c8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 8004dee:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8005084 <SetWSPRPLLCoeff+0x2cc>
						MinDiff = fabs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 8004df2:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 8004df4:	edd3 2a00 	vldr	s5, [r3]
 8004df8:	4ea3      	ldr	r6, [pc, #652]	; (8005088 <SetWSPRPLLCoeff+0x2d0>)
							&& ((XTalFreq * n / m) < 960000000.0)) {
 8004dfa:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 800508c <SetWSPRPLLCoeff+0x2d4>
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004dfe:	ed9f 3b9c 	vldr	d3, [pc, #624]	; 8005070 <SetWSPRPLLCoeff+0x2b8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004e02:	ed9d 7a05 	vldr	s14, [sp, #20]
 8004e06:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 8004e0a:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 8004e0c:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004e10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e14:	ee27 7a08 	vmul.f32	s14, s14, s16
 8004e18:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004e1c:	ee37 7b00 	vadd.f64	d7, d7, d0
 8004e20:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 8004e24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 8004e28:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 8004e2c:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 8004e2e:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8004e32:	eec8 1a84 	vdiv.f32	s3, s17, s8
 8004e36:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 8004e3a:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8004e3c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8004e40:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8004e44:	ee64 7aa1 	vmul.f32	s15, s9, s3
 8004e48:	eef4 7a42 	vcmp.f32	s15, s4
 8004e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e50:	dd05      	ble.n	8004e5e <SetWSPRPLLCoeff+0xa6>
 8004e52:	eef4 7ac1 	vcmpe.f32	s15, s2
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	f100 80c4 	bmi.w	8004fe6 <SetWSPRPLLCoeff+0x22e>
					OutF = XTalFreq * n / m / p / od;
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	3302      	adds	r3, #2
 8004e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e68:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004e6c:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004e70:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004e74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004e78:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e7c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004e80:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004e84:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004e88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	dd03      	ble.n	8004e9a <SetWSPRPLLCoeff+0xe2>
 8004e92:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e96:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8004e9a:	2b82      	cmp	r3, #130	; 0x82
 8004e9c:	d1df      	bne.n	8004e5e <SetWSPRPLLCoeff+0xa6>
			for (n = 2; n <= 512; n++) //was 1
 8004e9e:	3201      	adds	r2, #1
 8004ea0:	4572      	cmp	r2, lr
 8004ea2:	d1c8      	bne.n	8004e36 <SetWSPRPLLCoeff+0x7e>
		for (m = 2; m <= 25; m++) //was 64
 8004ea4:	3101      	adds	r1, #1
 8004ea6:	291a      	cmp	r1, #26
 8004ea8:	d1be      	bne.n	8004e28 <SetWSPRPLLCoeff+0x70>
		if (fn < 511) {
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004eb0:	f200 80d3 	bhi.w	800505a <SetWSPRPLLCoeff+0x2a2>
			OutF = XTalFreq * fn / fm / fp / fod;
 8004eb4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004eb8:	eddd 7a00 	vldr	s15, [sp]
 8004ebc:	eddd 6a02 	vldr	s13, [sp, #8]
 8004ec0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ecc:	ee27 7a22 	vmul.f32	s14, s14, s5
 8004ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ed4:	eddd 6a03 	vldr	s13, [sp, #12]
 8004ed8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004edc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ee0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ee4:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8004ee8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	eddd 7a00 	vldr	s15, [sp]
 8004ef2:	eddd 6a02 	vldr	s13, [sp, #8]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f00:	ee07 3a10 	vmov	s14, r3
 8004f04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f0c:	eddd 6a03 	vldr	s13, [sp, #12]
 8004f10:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f14:	ee27 7a22 	vmul.f32	s14, s14, s5
 8004f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f20:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8004f24:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004f28:	ed9d 5b06 	vldr	d5, [sp, #24]
 8004f2c:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 8004f30:	ed9d 6b08 	vldr	d6, [sp, #32]
 8004f34:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8004f38:	ee35 5b44 	vsub.f64	d5, d5, d4
 8004f3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f40:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004f44:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004f48:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8004f4c:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004f50:	9b04      	ldr	r3, [sp, #16]
		FracDiv >>= 0x03;
 8004f52:	9a04      	ldr	r2, [sp, #16]
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004f54:	f003 0307 	and.w	r3, r3, #7
		FracDiv >>= 0x03;
 8004f58:	ea4f 08d2 	mov.w	r8, r2, lsr #3
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004f5c:	8033      	strh	r3, [r6, #0]
		FracDiv >>= 0x03;
 8004f5e:	f8cd 8010 	str.w	r8, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 8004f62:	9f04      	ldr	r7, [sp, #16]
 8004f64:	9a05      	ldr	r2, [sp, #20]
 8004f66:	b2bf      	uxth	r7, r7
 8004f68:	eb04 0942 	add.w	r9, r4, r2, lsl #1
 8004f6c:	f824 7012 	strh.w	r7, [r4, r2, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8004f70:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8004f72:	9905      	ldr	r1, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 8004f74:	f8b6 e000 	ldrh.w	lr, [r6]
	for (i = 0; i < 4; i++) {
 8004f78:	3101      	adds	r1, #1
		FracPWMCoeff[i] = FracDivPWM;
 8004f7a:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
 8004f7e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
	for (i = 0; i < 4; i++) {
 8004f82:	9105      	str	r1, [sp, #20]
 8004f84:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004f88:	f1bc 0f03 	cmp.w	ip, #3
 8004f8c:	f67f af39 	bls.w	8004e02 <SetWSPRPLLCoeff+0x4a>
 8004f90:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	493e      	ldr	r1, [pc, #248]	; (8005090 <SetWSPRPLLCoeff+0x2d8>)
 8004f98:	8033      	strh	r3, [r6, #0]
 8004f9a:	800b      	strh	r3, [r1, #0]
 8004f9c:	f8a9 7000 	strh.w	r7, [r9]
 8004fa0:	f8a2 e000 	strh.w	lr, [r2]
	}
	__HAL_RCC_PLL2_DISABLE();
 8004fa4:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <SetWSPRPLLCoeff+0x2dc>)
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fac:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8004fae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004fb0:	9900      	ldr	r1, [sp, #0]
 8004fb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fb6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004fba:	6293      	str	r3, [r2, #40]	; 0x28
 8004fbc:	9901      	ldr	r1, [sp, #4]
 8004fbe:	9b02      	ldr	r3, [sp, #8]
 8004fc0:	3901      	subs	r1, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fc8:	025b      	lsls	r3, r3, #9
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd2:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fda:	6013      	str	r3, [r2, #0]
}
 8004fdc:	b00f      	add	sp, #60	; 0x3c
 8004fde:	ecbd 8b02 	vpop	{d8}
 8004fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					OutF = XTalFreq * n / m / p / od;
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fee:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004ff2:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004ff6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004ffa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004ffe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005002:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8005006:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800500a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800500e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	d518      	bpl.n	800504a <SetWSPRPLLCoeff+0x292>
 8005018:	ed9d 7b06 	vldr	d7, [sp, #24]
 800501c:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005020:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005024:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	dd0d      	ble.n	800504a <SetWSPRPLLCoeff+0x292>
						MinDiff = fabs(OutF - TF);
 800502e:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8005032:	ed9d 6b06 	vldr	d6, [sp, #24]
 8005036:	ee37 7b46 	vsub.f64	d7, d7, d6
 800503a:	eeb0 7bc7 	vabs.f64	d7, d7
 800503e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 8005042:	9302      	str	r3, [sp, #8]
						fn = n;
 8005044:	9201      	str	r2, [sp, #4]
						fm = m;
 8005046:	9100      	str	r1, [sp, #0]
						fod = od;
 8005048:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 800504a:	3302      	adds	r3, #2
 800504c:	2b82      	cmp	r3, #130	; 0x82
 800504e:	d1ca      	bne.n	8004fe6 <SetWSPRPLLCoeff+0x22e>
			for (n = 2; n <= 512; n++) //was 1
 8005050:	3201      	adds	r2, #1
 8005052:	4572      	cmp	r2, lr
 8005054:	f47f aeef 	bne.w	8004e36 <SetWSPRPLLCoeff+0x7e>
 8005058:	e724      	b.n	8004ea4 <SetWSPRPLLCoeff+0xec>
			FracDiv = 8191 * 8;
 800505a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	e776      	b.n	8004f50 <SetWSPRPLLCoeff+0x198>
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	ff800000 	.word	0xff800000
 800506c:	41cdcd64 	.word	0x41cdcd64
 8005070:	00000000 	.word	0x00000000
 8005074:	40f00000 	.word	0x40f00000
 8005078:	24006134 	.word	0x24006134
 800507c:	240072d8 	.word	0x240072d8
 8005080:	3fbb7e91 	.word	0x3fbb7e91
 8005084:	4d0f0d18 	.word	0x4d0f0d18
 8005088:	24005100 	.word	0x24005100
 800508c:	4e64e1c0 	.word	0x4e64e1c0
 8005090:	24006138 	.word	0x24006138
 8005094:	58024400 	.word	0x58024400

08005098 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8005098:	4a8c      	ldr	r2, [pc, #560]	; (80052cc <SetTXPLL+0x234>)
 800509a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 800509e:	4b8c      	ldr	r3, [pc, #560]	; (80052d0 <SetTXPLL+0x238>)
	for (m = 2; m <= 25; m++) //was 64
 80050a0:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 80050a2:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 80050a6:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80050aa:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 80052d4 <SetTXPLL+0x23c>
 80050ae:	ed9f 4a8a 	vldr	s8, [pc, #552]	; 80052d8 <SetTXPLL+0x240>
{
 80050b2:	b410      	push	{r4}
					MinDiff = fabs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 80050b4:	2401      	movs	r4, #1
{
 80050b6:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 80050b8:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 80050ba:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 80050bc:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 80050c0:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 80050c2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80050c6:	eec3 4a86 	vdiv.f32	s9, s7, s12
 80050ca:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 80050ce:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 80050d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80050d8:	ee66 7aa4 	vmul.f32	s15, s13, s9
 80050dc:	eef4 7a45 	vcmp.f32	s15, s10
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	dd05      	ble.n	80050f2 <SetTXPLL+0x5a>
 80050e6:	eef4 7ac4 	vcmpe.f32	s15, s8
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	f100 80b6 	bmi.w	800525e <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	3302      	adds	r3, #2
 80050f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005104:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8005108:	eddd 7a02 	vldr	s15, [sp, #8]
 800510c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8005110:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	dd00      	ble.n	8005120 <SetTXPLL+0x88>
 800511e:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 8005120:	2b82      	cmp	r3, #130	; 0x82
 8005122:	d1e6      	bne.n	80050f2 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 8005124:	3101      	adds	r1, #1
 8005126:	4561      	cmp	r1, ip
 8005128:	d1cf      	bne.n	80050ca <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 800512a:	3001      	adds	r0, #1
 800512c:	281a      	cmp	r0, #26
 800512e:	d1c5      	bne.n	80050bc <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8005136:	f200 80c4 	bhi.w	80052c2 <SetTXPLL+0x22a>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 800513a:	ed9d 7a05 	vldr	s14, [sp, #20]
 800513e:	eddd 7a04 	vldr	s15, [sp, #16]
 8005142:	ed9d 6a06 	vldr	s12, [sp, #24]
 8005146:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddd 6a07 	vldr	s13, [sp, #28]
 8005152:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8005156:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80052dc <SetTXPLL+0x244>
		OutF = XTalFreq * fn / fm / fp / fod;
 800515a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800515e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005162:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800516a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800516e:	edcd 6a02 	vstr	s13, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8005172:	9b05      	ldr	r3, [sp, #20]
 8005174:	eddd 7a04 	vldr	s15, [sp, #16]
 8005178:	ed9d 6a06 	vldr	s12, [sp, #24]
 800517c:	3301      	adds	r3, #1
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eddd 6a07 	vldr	s13, [sp, #28]
 8005186:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800518a:	ee07 3a10 	vmov	s14, r3
 800518e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005192:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005196:	ee67 7a86 	vmul.f32	s15, s15, s12
 800519a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800519e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80051a6:	edcd 6a01 	vstr	s13, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 80051aa:	eddd 6a02 	vldr	s13, [sp, #8]
 80051ae:	ed9d 7a01 	vldr	s14, [sp, #4]
 80051b2:	eddd 7a02 	vldr	s15, [sp, #8]
 80051b6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80051ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051be:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80051c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80051c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ca:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 80051ce:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 80051d2:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <SetTXPLL+0x248>)
	TXFreqError = MinDiff;
 80051d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051da:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <SetTXPLL+0x24c>)
 80051dc:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 80051e0:	6813      	ldr	r3, [r2, #0]
 80051e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051e6:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80051e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80051ea:	9904      	ldr	r1, [sp, #16]
 80051ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051f0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80051f4:	6293      	str	r3, [r2, #40]	; 0x28
 80051f6:	9905      	ldr	r1, [sp, #20]
 80051f8:	9b06      	ldr	r3, [sp, #24]
 80051fa:	3901      	subs	r1, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005202:	025b      	lsls	r3, r3, #9
 8005204:	b29b      	uxth	r3, r3
 8005206:	430b      	orrs	r3, r1
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800520e:	6813      	ldr	r3, [r2, #0]
 8005210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005214:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8005216:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 8005218:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8005220:	9009      	str	r0, [sp, #36]	; 0x24
 8005222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005224:	2b31      	cmp	r3, #49	; 0x31
 8005226:	d80b      	bhi.n	8005240 <SetTXPLL+0x1a8>
		i++;
 8005228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522a:	3301      	adds	r3, #1
 800522c:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 800522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005230:	3b01      	subs	r3, #1
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	3301      	adds	r3, #1
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523c:	2b31      	cmp	r3, #49	; 0x31
 800523e:	d9f3      	bls.n	8005228 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005240:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <SetTXPLL+0x248>)
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <SetTXPLL+0x250>)
 8005244:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8005246:	4003      	ands	r3, r0
 8005248:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800524c:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 800524e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005250:	f043 0310 	orr.w	r3, r3, #16
 8005254:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8005256:	b00b      	add	sp, #44	; 0x2c
 8005258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800525c:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005266:	ee67 7a86 	vmul.f32	s15, s15, s12
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8005272:	eddd 7a02 	vldr	s15, [sp, #8]
 8005276:	ed9d 7a03 	vldr	s14, [sp, #12]
 800527a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800527e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	d514      	bpl.n	80052b2 <SetTXPLL+0x21a>
 8005288:	eddd 7a02 	vldr	s15, [sp, #8]
 800528c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	dd0b      	ble.n	80052b2 <SetTXPLL+0x21a>
					MinDiff = fabs(OutF - TF);
 800529a:	eddd 7a02 	vldr	s15, [sp, #8]
 800529e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80052a2:	eef0 7ae7 	vabs.f32	s15, s15
 80052a6:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 80052aa:	9306      	str	r3, [sp, #24]
					fn = n;
 80052ac:	9105      	str	r1, [sp, #20]
					fm = m;
 80052ae:	9004      	str	r0, [sp, #16]
					fod = od;
 80052b0:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 80052b2:	3302      	adds	r3, #2
 80052b4:	2b82      	cmp	r3, #130	; 0x82
 80052b6:	d1d2      	bne.n	800525e <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 80052b8:	3101      	adds	r1, #1
 80052ba:	4561      	cmp	r1, ip
 80052bc:	f47f af05 	bne.w	80050ca <SetTXPLL+0x32>
 80052c0:	e733      	b.n	800512a <SetTXPLL+0x92>
		FracDiv = 8191;
 80052c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80052c6:	9308      	str	r3, [sp, #32]
 80052c8:	e781      	b.n	80051ce <SetTXPLL+0x136>
 80052ca:	bf00      	nop
 80052cc:	240072d8 	.word	0x240072d8
 80052d0:	4e6e6b28 	.word	0x4e6e6b28
 80052d4:	4d0f0d18 	.word	0x4d0f0d18
 80052d8:	4e64e1c0 	.word	0x4e64e1c0
 80052dc:	46000000 	.word	0x46000000
 80052e0:	58024400 	.word	0x58024400
 80052e4:	240061ac 	.word	0x240061ac
 80052e8:	ffff0007 	.word	0xffff0007
 80052ec:	00000000 	.word	0x00000000

080052f0 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 80052f0:	b510      	push	{r4, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f2:	2300      	movs	r3, #0
{
 80052f4:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f6:	e9cd 3300 	strd	r3, r3, [sp]
 80052fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052fe:	9304      	str	r3, [sp, #16]

	if (Status)
 8005300:	b380      	cbz	r0, 8005364 <TXSwitch+0x74>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8005302:	4929      	ldr	r1, [pc, #164]	; (80053a8 <TXSwitch+0xb8>)
		TransmissionEnabled = 1;
 8005304:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8005306:	4c29      	ldr	r4, [pc, #164]	; (80053ac <TXSwitch+0xbc>)
 8005308:	ed91 3a00 	vldr	s6, [r1]
 800530c:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <TXSwitch+0xc0>)
		if (LastTXFreq != LOfreq)
 8005312:	eef4 7a43 	vcmp.f32	s15, s6
		TransmissionEnabled = 1;
 8005316:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8005318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531c:	d11b      	bne.n	8005356 <TXSwitch+0x66>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800531e:	f44f 7400 	mov.w	r4, #512	; 0x200
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005322:	2002      	movs	r0, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005326:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005328:	4669      	mov	r1, sp
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800532a:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532c:	e9cd 4000 	strd	r4, r0, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005330:	4820      	ldr	r0, [pc, #128]	; (80053b4 <TXSwitch+0xc4>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005332:	e9cd 3202 	strd	r3, r2, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005336:	f005 f9db 	bl	800a6f0 <HAL_GPIO_Init>

		RELAY_TX_ON;
 800533a:	2201      	movs	r2, #1
 800533c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005340:	481d      	ldr	r0, [pc, #116]	; (80053b8 <TXSwitch+0xc8>)
 8005342:	f005 fb0d 	bl	800a960 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005346:	2201      	movs	r2, #1
 8005348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800534c:	481b      	ldr	r0, [pc, #108]	; (80053bc <TXSwitch+0xcc>)
 800534e:	f005 fb07 	bl	800a960 <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 8005352:	b006      	add	sp, #24
 8005354:	bd10      	pop	{r4, pc}
			SetTXPLL(LOfreq);
 8005356:	eeb0 0a43 	vmov.f32	s0, s6
 800535a:	f7ff fe9d 	bl	8005098 <SetTXPLL>
			LastTXFreq = LOfreq;
 800535e:	ed84 3a00 	vstr	s6, [r4]
 8005362:	e7dc      	b.n	800531e <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005364:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80053a0 <TXSwitch+0xb0>
 8005368:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800536a:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800536c:	4669      	mov	r1, sp
 800536e:	4811      	ldr	r0, [pc, #68]	; (80053b4 <TXSwitch+0xc4>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005370:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005372:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005376:	f005 f9bb 	bl	800a6f0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 800537a:	4622      	mov	r2, r4
 800537c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005380:	480d      	ldr	r0, [pc, #52]	; (80053b8 <TXSwitch+0xc8>)
 8005382:	f005 faed 	bl	800a960 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005386:	4622      	mov	r2, r4
 8005388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800538c:	480b      	ldr	r0, [pc, #44]	; (80053bc <TXSwitch+0xcc>)
 800538e:	f005 fae7 	bl	800a960 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <TXSwitch+0xc0>)
 8005394:	701c      	strb	r4, [r3, #0]
}
 8005396:	b006      	add	sp, #24
 8005398:	bd10      	pop	{r4, pc}
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w
 80053a0:	00000200 	.word	0x00000200
 80053a4:	00000001 	.word	0x00000001
 80053a8:	24006124 	.word	0x24006124
 80053ac:	24006134 	.word	0x24006134
 80053b0:	240061b4 	.word	0x240061b4
 80053b4:	58020800 	.word	0x58020800
 80053b8:	58020c00 	.word	0x58020c00
 80053bc:	58020400 	.word	0x58020400

080053c0 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 80053c0:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c2:	2400      	movs	r4, #0
{
 80053c4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c6:	e9cd 4400 	strd	r4, r4, [sp]
 80053ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80053ce:	9404      	str	r4, [sp, #16]
	if (Status)
 80053d0:	b320      	cbz	r0, 800541c <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80053d2:	4622      	mov	r2, r4
 80053d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053d8:	4822      	ldr	r0, [pc, #136]	; (8005464 <CarrierEnable+0xa4>)
 80053da:	f005 fac1 	bl	800a960 <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <CarrierEnable+0xa8>)
 80053e0:	4622      	mov	r2, r4
 80053e2:	2110      	movs	r1, #16
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4821      	ldr	r0, [pc, #132]	; (800546c <CarrierEnable+0xac>)
 80053e8:	f003 fda2 	bl	8008f30 <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f0:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f2:	4669      	mov	r1, sp
 80053f4:	481e      	ldr	r0, [pc, #120]	; (8005470 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053f6:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053f8:	e9cd 2300 	strd	r2, r3, [sp]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2303      	movs	r3, #3
 8005400:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005404:	f005 f974 	bl	800a6f0 <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 8005408:	2201      	movs	r2, #1
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 800540c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005410:	4819      	ldr	r0, [pc, #100]	; (8005478 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 8005412:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005414:	f005 faa4 	bl	800a960 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 8005418:	b007      	add	sp, #28
 800541a:	bd30      	pop	{r4, r5, pc}
 800541c:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800541e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005422:	4810      	ldr	r0, [pc, #64]	; (8005464 <CarrierEnable+0xa4>)
 8005424:	2201      	movs	r2, #1
 8005426:	f005 fa9b 	bl	800a960 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800542a:	462b      	mov	r3, r5
 800542c:	462a      	mov	r2, r5
 800542e:	2110      	movs	r1, #16
 8005430:	480e      	ldr	r0, [pc, #56]	; (800546c <CarrierEnable+0xac>)
 8005432:	f003 fd7d 	bl	8008f30 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800543a:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 800543c:	480d      	ldr	r0, [pc, #52]	; (8005474 <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800543e:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8005440:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005442:	480b      	ldr	r0, [pc, #44]	; (8005470 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005444:	e9cd 2300 	strd	r2, r3, [sp]
 8005448:	2300      	movs	r3, #0
 800544a:	2202      	movs	r2, #2
 800544c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005450:	f005 f94e 	bl	800a6f0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005454:	462a      	mov	r2, r5
 8005456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <CarrierEnable+0xb8>)
 800545c:	f005 fa80 	bl	800a960 <HAL_GPIO_WritePin>
}
 8005460:	b007      	add	sp, #28
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	58020c00 	.word	0x58020c00
 8005468:	240061b8 	.word	0x240061b8
 800546c:	2400a450 	.word	0x2400a450
 8005470:	58020800 	.word	0x58020800
 8005474:	240061a8 	.word	0x240061a8
 8005478:	58020400 	.word	0x58020400

0800547c <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800547c:	4e09      	ldr	r6, [pc, #36]	; (80054a4 <Error_Handler+0x28>)
{
 800547e:	4d0a      	ldr	r5, [pc, #40]	; (80054a8 <Error_Handler+0x2c>)
 8005480:	4c0a      	ldr	r4, [pc, #40]	; (80054ac <Error_Handler+0x30>)
 8005482:	b508      	push	{r3, lr}
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	fb05 f303 	mul.w	r3, r5, r3
 800548a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800548e:	d200      	bcs.n	8005492 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005490:	e7fe      	b.n	8005490 <Error_Handler+0x14>
			LED_switch();
 8005492:	f7fc fdff 	bl	8002094 <LED_switch>
 8005496:	6833      	ldr	r3, [r6, #0]
 8005498:	fb05 f303 	mul.w	r3, r5, r3
 800549c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80054a0:	d2f7      	bcs.n	8005492 <Error_Handler+0x16>
 80054a2:	e7f5      	b.n	8005490 <Error_Handler+0x14>
 80054a4:	2400afe8 	.word	0x2400afe8
 80054a8:	c28f5c29 	.word	0xc28f5c29
 80054ac:	051eb851 	.word	0x051eb851

080054b0 <SystemClock_Config_For_OC>:
{
 80054b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	b0ce      	sub	sp, #312	; 0x138
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054b6:	224c      	movs	r2, #76	; 0x4c
 80054b8:	2100      	movs	r1, #0
 80054ba:	a80a      	add	r0, sp, #40	; 0x28
 80054bc:	f00d fd8f 	bl	8012fde <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054c0:	2220      	movs	r2, #32
 80054c2:	2100      	movs	r1, #0
 80054c4:	a802      	add	r0, sp, #8
 80054c6:	f00d fd8a 	bl	8012fde <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054ca:	22c0      	movs	r2, #192	; 0xc0
 80054cc:	2100      	movs	r1, #0
 80054ce:	a81e      	add	r0, sp, #120	; 0x78
 80054d0:	f00d fd85 	bl	8012fde <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80054d4:	2002      	movs	r0, #2
 80054d6:	f005 fb85 	bl	800abe4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80054da:	4a44      	ldr	r2, [pc, #272]	; (80055ec <SystemClock_Config_For_OC+0x13c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6991      	ldr	r1, [r2, #24]
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <SystemClock_Config_For_OC+0x140>)
 80054e4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80054e8:	6191      	str	r1, [r2, #24]
 80054ea:	6991      	ldr	r1, [r2, #24]
 80054ec:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80054f0:	9101      	str	r1, [sp, #4]
 80054f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054f4:	f041 0101 	orr.w	r1, r1, #1
 80054f8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005504:	6993      	ldr	r3, [r2, #24]
 8005506:	0498      	lsls	r0, r3, #18
 8005508:	d5fc      	bpl.n	8005504 <SystemClock_Config_For_OC+0x54>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <SystemClock_Config_For_OC+0x144>)
	RCC_OscInitStruct.PLL.PLLM = 10;
 800550c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005510:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005512:	2504      	movs	r5, #4
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005514:	6a93      	ldr	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005516:	2601      	movs	r6, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005518:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005524:	2300      	movs	r3, #0
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8005526:	4a34      	ldr	r2, [pc, #208]	; (80055f8 <SystemClock_Config_For_OC+0x148>)
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005528:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 800552a:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800552c:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800552e:	951a      	str	r5, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005530:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005532:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005536:	230a      	movs	r3, #10
 8005538:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800553c:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <SystemClock_Config_For_OC+0x14c>)
 800553e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005540:	2221      	movs	r2, #33	; 0x21
 8005542:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005546:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800554a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800554e:	f005 fbfb 	bl	800ad48 <HAL_RCC_OscConfig>
 8005552:	2800      	cmp	r0, #0
 8005554:	d147      	bne.n	80055e6 <SystemClock_Config_For_OC+0x136>
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005556:	2340      	movs	r3, #64	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005558:	f04f 0808 	mov.w	r8, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800555c:	223f      	movs	r2, #63	; 0x3f
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800555e:	f44f 6780 	mov.w	r7, #1024	; 0x400
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005562:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) //was FLASH_LATENCY_4
 8005564:	4629      	mov	r1, r5
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005566:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) //was FLASH_LATENCY_4
 8005568:	eb0d 0008 	add.w	r0, sp, r8
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800556c:	f8cd 8014 	str.w	r8, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005570:	9708      	str	r7, [sp, #32]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005572:	e9cd 3306 	strd	r3, r3, [sp, #24]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005576:	2303      	movs	r3, #3
 8005578:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) //was FLASH_LATENCY_4
 800557c:	f005 ffcc 	bl	800b518 <HAL_RCC_ClockConfig>
 8005580:	4603      	mov	r3, r0
 8005582:	bb80      	cbnz	r0, 80055e6 <SystemClock_Config_For_OC+0x136>
	PeriphClkInitStruct.PLL2.PLL2N = 38;
 8005584:	2226      	movs	r2, #38	; 0x26
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005586:	933c      	str	r3, [sp, #240]	; 0xf0
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005588:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800558c:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.PLL2.PLL2N = 38;
 800558e:	9221      	str	r2, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2P = 24;
 8005590:	2218      	movs	r2, #24
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8005592:	9520      	str	r5, [sp, #128]	; 0x80
	PeriphClkInitStruct.PLL2.PLL2P = 24;
 8005594:	9222      	str	r2, [sp, #136]	; 0x88
	PeriphClkInitStruct.PLL3.PLL3M = 5;
 8005596:	2205      	movs	r2, #5
	PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8005598:	f8cd 80ac 	str.w	r8, [sp, #172]	; 0xac
	PeriphClkInitStruct.PLL3.PLL3R = 5;
 800559c:	922c      	str	r2, [sp, #176]	; 0xb0
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800559e:	942a      	str	r4, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80055a0:	972d      	str	r7, [sp, #180]	; 0xb4
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80055a2:	9745      	str	r7, [sp, #276]	; 0x114
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80055a4:	9147      	str	r1, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80055a6:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80055aa:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.PLL3.PLL3N = 128;
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80055b4:	9325      	str	r3, [sp, #148]	; 0x94
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80055b6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80055ba:	4a11      	ldr	r2, [pc, #68]	; (8005600 <SystemClock_Config_For_OC+0x150>)
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80055bc:	9340      	str	r3, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80055be:	2300      	movs	r3, #0
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80055c0:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80055c4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055c8:	f006 fa92 	bl	800baf0 <HAL_RCCEx_PeriphCLKConfig>
 80055cc:	b958      	cbnz	r0, 80055e6 <SystemClock_Config_For_OC+0x136>
	HAL_PWREx_EnableUSBVoltageDetector();
 80055ce:	f005 fb2d 	bl	800ac2c <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80055d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80055d6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80055da:	4630      	mov	r0, r6
 80055dc:	f005 fea8 	bl	800b330 <HAL_RCC_MCOConfig>
}
 80055e0:	b04e      	add	sp, #312	; 0x138
 80055e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Error_Handler();
 80055e6:	f7ff ff49 	bl	800547c <Error_Handler>
 80055ea:	bf00      	nop
 80055ec:	58024800 	.word	0x58024800
 80055f0:	58000400 	.word	0x58000400
 80055f4:	58024400 	.word	0x58024400
 80055f8:	4bbebbd3 	.word	0x4bbebbd3
 80055fc:	240072d8 	.word	0x240072d8
 8005600:	000c0042 	.word	0x000c0042
 8005604:	00000000 	.word	0x00000000

08005608 <UserInput>:
{
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (WSPRBeaconState == SEND_WSPR)
 800560a:	4e5f      	ldr	r6, [pc, #380]	; (8005788 <UserInput+0x180>)
{
 800560c:	b08b      	sub	sp, #44	; 0x2c
	if (WSPRBeaconState == SEND_WSPR)
 800560e:	7835      	ldrb	r5, [r6, #0]
 8005610:	2d02      	cmp	r5, #2
 8005612:	f000 8158 	beq.w	80058c6 <UserInput+0x2be>
	if (USBRXLength)
 8005616:	4b5d      	ldr	r3, [pc, #372]	; (800578c <UserInput+0x184>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	2a00      	cmp	r2, #0
 800561c:	d12e      	bne.n	800567c <UserInput+0x74>
		result = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
  return tud_cdc_n_connected(0);
 8005620:	2000      	movs	r0, #0
 8005622:	f88d 300f 	strb.w	r3, [sp, #15]
 8005626:	f009 ff9b 	bl	800f560 <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 800562a:	2800      	cmp	r0, #0
 800562c:	d12f      	bne.n	800568e <UserInput+0x86>
		result = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f88d 300f 	strb.w	r3, [sp, #15]
	if (result == HAL_OK)
 8005634:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005638:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800563c:	2b00      	cmp	r3, #0
 800563e:	d03a      	beq.n	80056b6 <UserInput+0xae>
 8005640:	4c53      	ldr	r4, [pc, #332]	; (8005790 <UserInput+0x188>)
	EncVal = TIM4->CNT;
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <UserInput+0x18c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005644:	4e54      	ldr	r6, [pc, #336]	; (8005798 <UserInput+0x190>)
	EncVal = TIM4->CNT;
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005648:	8832      	ldrh	r2, [r6, #0]
	EncVal = TIM4->CNT;
 800564a:	b29b      	uxth	r3, r3
 800564c:	4f53      	ldr	r7, [pc, #332]	; (800579c <UserInput+0x194>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 800564e:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8005650:	803b      	strh	r3, [r7, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005652:	b201      	sxth	r1, r0
 8005654:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 8005656:	2900      	cmp	r1, #0
 8005658:	f2c0 812c 	blt.w	80058b4 <UserInput+0x2ac>
	if (DiffEncVal > 0)
 800565c:	f000 80a6 	beq.w	80057ac <UserInput+0x1a4>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8005660:	f7fc fc74 	bl	8001f4c <FminusClicked>
	if (!DisableDisplay)
 8005664:	7825      	ldrb	r5, [r4, #0]
 8005666:	b915      	cbnz	r5, 800566e <UserInput+0x66>
 8005668:	f7fe ffcc 	bl	8004604 <DisplayStatus.part.0>
	if (!DisableDisplay)
 800566c:	7825      	ldrb	r5, [r4, #0]
		LastEncVal = EncVal;
 800566e:	883b      	ldrh	r3, [r7, #0]
 8005670:	8033      	strh	r3, [r6, #0]
	if (!DisableDisplay)
 8005672:	2d00      	cmp	r5, #0
 8005674:	f000 809e 	beq.w	80057b4 <UserInput+0x1ac>
}
 8005678:	b00b      	add	sp, #44	; 0x2c
 800567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = HAL_OK;
 800567c:	2200      	movs	r2, #0
 800567e:	2000      	movs	r0, #0
 8005680:	f88d 200f 	strb.w	r2, [sp, #15]
		USBRXLength = 0;
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f009 ff6b 	bl	800f560 <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 800568a:	2800      	cmp	r0, #0
 800568c:	d0cf      	beq.n	800562e <UserInput+0x26>
  return tud_cdc_n_available(0);
 800568e:	2000      	movs	r0, #0
 8005690:	f009 ff7c 	bl	800f58c <tud_cdc_n_available>
		if ( tud_cdc_available() )
 8005694:	2800      	cmp	r0, #0
 8005696:	d0cd      	beq.n	8005634 <UserInput+0x2c>
  return tud_cdc_n_read(0, buffer, bufsize);
 8005698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569c:	4940      	ldr	r1, [pc, #256]	; (80057a0 <UserInput+0x198>)
 800569e:	2000      	movs	r0, #0
 80056a0:	f009 ff80 	bl	800f5a4 <tud_cdc_n_read>
			result = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f88d 300f 	strb.w	r3, [sp, #15]
	if (result == HAL_OK)
 80056aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80056ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1c4      	bne.n	8005640 <UserInput+0x38>
		switch (UartRXString[0])
 80056b6:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <UserInput+0x198>)
		UartRXDataReady = RESET;
 80056b8:	493a      	ldr	r1, [pc, #232]	; (80057a4 <UserInput+0x19c>)
		switch (UartRXString[0])
 80056ba:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 80056bc:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 80056be:	3b2b      	subs	r3, #43	; 0x2b
 80056c0:	2b4c      	cmp	r3, #76	; 0x4c
 80056c2:	d859      	bhi.n	8005778 <UserInput+0x170>
 80056c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056c8:	0058016b 	.word	0x0058016b
 80056cc:	0058017d 	.word	0x0058017d
 80056d0:	00580058 	.word	0x00580058
 80056d4:	01960192 	.word	0x01960192
 80056d8:	019e019a 	.word	0x019e019a
 80056dc:	01a601a2 	.word	0x01a601a2
 80056e0:	01ae01aa 	.word	0x01ae01aa
 80056e4:	005801b2 	.word	0x005801b2
 80056e8:	00580058 	.word	0x00580058
 80056ec:	00580058 	.word	0x00580058
 80056f0:	00580058 	.word	0x00580058
 80056f4:	01b60058 	.word	0x01b60058
 80056f8:	01be01ba 	.word	0x01be01ba
 80056fc:	00580058 	.word	0x00580058
 8005700:	00580058 	.word	0x00580058
 8005704:	01c20058 	.word	0x01c20058
 8005708:	01cc01c7 	.word	0x01cc01c7
 800570c:	00580058 	.word	0x00580058
 8005710:	00580058 	.word	0x00580058
 8005714:	00580058 	.word	0x00580058
 8005718:	00580058 	.word	0x00580058
 800571c:	00580058 	.word	0x00580058
 8005720:	005801d1 	.word	0x005801d1
 8005724:	030501d9 	.word	0x030501d9
 8005728:	00580058 	.word	0x00580058
 800572c:	00580058 	.word	0x00580058
 8005730:	00580058 	.word	0x00580058
 8005734:	02f0030d 	.word	0x02f0030d
 8005738:	005802f4 	.word	0x005802f4
 800573c:	02f80058 	.word	0x02f80058
 8005740:	004d02fc 	.word	0x004d02fc
 8005744:	00580058 	.word	0x00580058
 8005748:	01e80058 	.word	0x01e80058
 800574c:	01ec0058 	.word	0x01ec0058
 8005750:	00580058 	.word	0x00580058
 8005754:	02320058 	.word	0x02320058
 8005758:	02770273 	.word	0x02770273
 800575c:	02ce02ca 	.word	0x02ce02ca
 8005760:	0167      	.short	0x0167
			keyer_speed += 1;
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <UserInput+0x1a0>)
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8005768:	2832      	cmp	r0, #50	; 0x32
 800576a:	f340 82be 	ble.w	8005cea <UserInput+0x6e2>
				keyer_speed = 50;
 800576e:	2232      	movs	r2, #50	; 0x32
 8005770:	4610      	mov	r0, r2
 8005772:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005774:	f7fb feb2 	bl	80014dc <loadWPM>
	if (!DisableDisplay)
 8005778:	4c05      	ldr	r4, [pc, #20]	; (8005790 <UserInput+0x188>)
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f47f af60 	bne.w	8005642 <UserInput+0x3a>
 8005782:	f7fe ff3f 	bl	8004604 <DisplayStatus.part.0>
 8005786:	e75c      	b.n	8005642 <UserInput+0x3a>
 8005788:	240072d4 	.word	0x240072d4
 800578c:	240061c8 	.word	0x240061c8
 8005790:	24000ee4 	.word	0x24000ee4
 8005794:	40000800 	.word	0x40000800
 8005798:	24006132 	.word	0x24006132
 800579c:	24000ee6 	.word	0x24000ee6
 80057a0:	240061d0 	.word	0x240061d0
 80057a4:	240061ce 	.word	0x240061ce
 80057a8:	2400acac 	.word	0x2400acac
	if (!DisableDisplay)
 80057ac:	7825      	ldrb	r5, [r4, #0]
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f47f af62 	bne.w	8005678 <UserInput+0x70>
	HAL_ADC_Start(&hadc3);
 80057b4:	48c2      	ldr	r0, [pc, #776]	; (8005ac0 <UserInput+0x4b8>)
 80057b6:	f002 fdf9 	bl	80083ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 100);
 80057ba:	2164      	movs	r1, #100	; 0x64
 80057bc:	48c0      	ldr	r0, [pc, #768]	; (8005ac0 <UserInput+0x4b8>)
 80057be:	f001 ff2d 	bl	800761c <HAL_ADC_PollForConversion>
	adcTempVal = HAL_ADC_GetValue(&hadc3);
 80057c2:	48bf      	ldr	r0, [pc, #764]	; (8005ac0 <UserInput+0x4b8>)
 80057c4:	f001 ffb0 	bl	8007728 <HAL_ADC_GetValue>
	HAL_ADC_PollForConversion(&hadc3, 100);
 80057c8:	2164      	movs	r1, #100	; 0x64
	adcTempVal = HAL_ADC_GetValue(&hadc3);
 80057ca:	4604      	mov	r4, r0
	HAL_ADC_PollForConversion(&hadc3, 100);
 80057cc:	48bc      	ldr	r0, [pc, #752]	; (8005ac0 <UserInput+0x4b8>)
 80057ce:	f001 ff25 	bl	800761c <HAL_ADC_PollForConversion>
	adcVRefVal = HAL_ADC_GetValue(&hadc3);
 80057d2:	48bb      	ldr	r0, [pc, #748]	; (8005ac0 <UserInput+0x4b8>)
 80057d4:	f001 ffa8 	bl	8007728 <HAL_ADC_GetValue>
 80057d8:	4606      	mov	r6, r0
	HAL_ADC_Stop(&hadc3);
 80057da:	48b9      	ldr	r0, [pc, #740]	; (8005ac0 <UserInput+0x4b8>)
 80057dc:	f002 fe9e 	bl	800851c <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc3);
 80057e0:	48b7      	ldr	r0, [pc, #732]	; (8005ac0 <UserInput+0x4b8>)
 80057e2:	f002 fde3 	bl	80083ac <HAL_ADC_Start>
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 80057e6:	49b7      	ldr	r1, [pc, #732]	; (8005ac4 <UserInput+0x4bc>)
	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 80057e8:	f640 40e4 	movw	r0, #3300	; 0xce4
 80057ec:	f8b1 2060 	ldrh.w	r2, [r1, #96]	; 0x60
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 80057f0:	8c0b      	ldrh	r3, [r1, #32]
	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 80057f2:	fb00 f202 	mul.w	r2, r0, r2
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 80057f6:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 80057fa:	fbb2 f2f6 	udiv	r2, r2, r6
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 80057fe:	fb04 f002 	mul.w	r0, r4, r2
 8005802:	4cb1      	ldr	r4, [pc, #708]	; (8005ac8 <UserInput+0x4c0>)
 8005804:	1ac9      	subs	r1, r1, r3
 8005806:	0882      	lsrs	r2, r0, #2
 8005808:	fba4 4202 	umull	r4, r2, r4, r2
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800580c:	4caf      	ldr	r4, [pc, #700]	; (8005acc <UserInput+0x4c4>)
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 800580e:	ebc3 1052 	rsb	r0, r3, r2, lsr #5
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005812:	ed94 7a00 	vldr	s14, [r4]
 8005816:	ed9f 0ba4 	vldr	d0, [pc, #656]	; 8005aa8 <UserInput+0x4a0>
 800581a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 800581e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8005822:	0124      	lsls	r4, r4, #4
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005824:	ee27 0b00 	vmul.f64	d0, d7, d0
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8005828:	fb94 f4f1 	sdiv	r4, r4, r1
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800582c:	f00f fc90 	bl	8015150 <log10>
 8005830:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8005834:	4ba6      	ldr	r3, [pc, #664]	; (8005ad0 <UserInput+0x4c8>)
	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8005836:	341e      	adds	r4, #30
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f TEMP %d     \r", SValue, (int)Temp);
 8005838:	49a6      	ldr	r1, [pc, #664]	; (8005ad4 <UserInput+0x4cc>)
 800583a:	9400      	str	r4, [sp, #0]
 800583c:	48a6      	ldr	r0, [pc, #664]	; (8005ad8 <UserInput+0x4d0>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800583e:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 8005ab0 <UserInput+0x4a8>
 8005842:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005846:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800584a:	ed83 7a00 	vstr	s14, [r3]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f TEMP %d     \r", SValue, (int)Temp);
 800584e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005852:	ec53 2b17 	vmov	r2, r3, d7
 8005856:	f00d fb5f 	bl	8012f18 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 800585a:	489f      	ldr	r0, [pc, #636]	; (8005ad8 <UserInput+0x4d0>)
 800585c:	f7fa fdf0 	bl	8000440 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 8005860:	499d      	ldr	r1, [pc, #628]	; (8005ad8 <UserInput+0x4d0>)
 8005862:	4602      	mov	r2, r0
 8005864:	4628      	mov	r0, r5
 8005866:	f009 ff1d 	bl	800f6a4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 800586a:	4628      	mov	r0, r5
 800586c:	f009 fed6 	bl	800f61c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 8005870:	2001      	movs	r0, #1
 8005872:	f001 fe8f 	bl	8007594 <HAL_Delay>
		if (OVFDetected)
 8005876:	4a99      	ldr	r2, [pc, #612]	; (8005adc <UserInput+0x4d4>)
 8005878:	8813      	ldrh	r3, [r2, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d072      	beq.n	8005964 <UserInput+0x35c>
			OVFDetected--;
 800587e:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8005880:	4997      	ldr	r1, [pc, #604]	; (8005ae0 <UserInput+0x4d8>)
 8005882:	4c95      	ldr	r4, [pc, #596]	; (8005ad8 <UserInput+0x4d0>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005884:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800588a:	4a96      	ldr	r2, [pc, #600]	; (8005ae4 <UserInput+0x4dc>)
 800588c:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 800588e:	c907      	ldmia	r1, {r0, r1, r2}
 8005890:	c403      	stmia	r4!, {r0, r1}
 8005892:	f824 2b02 	strh.w	r2, [r4], #2
 8005896:	0c12      	lsrs	r2, r2, #16
 8005898:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800589a:	4a93      	ldr	r2, [pc, #588]	; (8005ae8 <UserInput+0x4e0>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800589c:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d166      	bne.n	8005974 <UserInput+0x36c>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 80058a6:	6873      	ldr	r3, [r6, #4]
 80058a8:	432b      	orrs	r3, r5
 80058aa:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 80058ac:	6853      	ldr	r3, [r2, #4]
 80058ae:	432b      	orrs	r3, r5
 80058b0:	6053      	str	r3, [r2, #4]
 80058b2:	e05f      	b.n	8005974 <UserInput+0x36c>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 80058b4:	1ad0      	subs	r0, r2, r3
 80058b6:	b280      	uxth	r0, r0
 80058b8:	f7fc faa4 	bl	8001e04 <FplusClicked>
	if (!DisableDisplay)
 80058bc:	7825      	ldrb	r5, [r4, #0]
 80058be:	2d00      	cmp	r5, #0
 80058c0:	f47f aed5 	bne.w	800566e <UserInput+0x66>
 80058c4:	e6d0      	b.n	8005668 <UserInput+0x60>
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 80058c6:	4887      	ldr	r0, [pc, #540]	; (8005ae4 <UserInput+0x4dc>)
 80058c8:	f003 f8e6 	bl	8008a98 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 80058cc:	f7fe fd9c 	bl	8004408 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80058d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d4:	4985      	ldr	r1, [pc, #532]	; (8005aec <UserInput+0x4e4>)
 80058d6:	4883      	ldr	r0, [pc, #524]	; (8005ae4 <UserInput+0x4dc>)
 80058d8:	f003 f862 	bl	80089a0 <HAL_ADCEx_MultiModeStart_DMA>
 80058dc:	4604      	mov	r4, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 820f 	bne.w	8005d02 <UserInput+0x6fa>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ea:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058ec:	9506      	str	r5, [sp, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ee:	e9cd 0007 	strd	r0, r0, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f2:	487f      	ldr	r0, [pc, #508]	; (8005af0 <UserInput+0x4e8>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f8:	f004 fefa 	bl	800a6f0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 80058fc:	4622      	mov	r2, r4
 80058fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005902:	487c      	ldr	r0, [pc, #496]	; (8005af4 <UserInput+0x4ec>)
 8005904:	f005 f82c 	bl	800a960 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005908:	4622      	mov	r2, r4
 800590a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800590e:	487a      	ldr	r0, [pc, #488]	; (8005af8 <UserInput+0x4f0>)
 8005910:	f005 f826 	bl	800a960 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005914:	4b79      	ldr	r3, [pc, #484]	; (8005afc <UserInput+0x4f4>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005916:	2201      	movs	r2, #1
 8005918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800591c:	4875      	ldr	r0, [pc, #468]	; (8005af4 <UserInput+0x4ec>)
		TransmissionEnabled = 0;
 800591e:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	9408      	str	r4, [sp, #32]
 8005922:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005926:	e9cd 4406 	strd	r4, r4, [sp, #24]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800592a:	f005 f819 	bl	800a960 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800592e:	4622      	mov	r2, r4
 8005930:	4623      	mov	r3, r4
 8005932:	2110      	movs	r1, #16
 8005934:	4872      	ldr	r0, [pc, #456]	; (8005b00 <UserInput+0x4f8>)
 8005936:	f003 fafb 	bl	8008f30 <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 800593a:	4b72      	ldr	r3, [pc, #456]	; (8005b04 <UserInput+0x4fc>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593c:	a904      	add	r1, sp, #16
 800593e:	486c      	ldr	r0, [pc, #432]	; (8005af0 <UserInput+0x4e8>)
		TXCarrierEnabled = 0;
 8005940:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005942:	f44f 7300 	mov.w	r3, #512	; 0x200
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005946:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005948:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 800594a:	2301      	movs	r3, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800594c:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 800594e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005950:	f004 fece 	bl	800a6f0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005954:	4622      	mov	r2, r4
 8005956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800595a:	4867      	ldr	r0, [pc, #412]	; (8005af8 <UserInput+0x4f0>)
 800595c:	f005 f800 	bl	800a960 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 8005960:	7034      	strb	r4, [r6, #0]
 8005962:	e658      	b.n	8005616 <UserInput+0xe>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 8005964:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <UserInput+0x500>)
 8005966:	4b5c      	ldr	r3, [pc, #368]	; (8005ad8 <UserInput+0x4d0>)
 8005968:	ca07      	ldmia	r2, {r0, r1, r2}
 800596a:	0c14      	lsrs	r4, r2, #16
 800596c:	c303      	stmia	r3!, {r0, r1}
 800596e:	f823 2b02 	strh.w	r2, [r3], #2
 8005972:	701c      	strb	r4, [r3, #0]
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8005974:	4858      	ldr	r0, [pc, #352]	; (8005ad8 <UserInput+0x4d0>)
 8005976:	f7fa fd63 	bl	8000440 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 800597a:	4957      	ldr	r1, [pc, #348]	; (8005ad8 <UserInput+0x4d0>)
 800597c:	4602      	mov	r2, r0
 800597e:	2000      	movs	r0, #0
 8005980:	f009 fe90 	bl	800f6a4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8005984:	2000      	movs	r0, #0
 8005986:	f009 fe49 	bl	800f61c <tud_cdc_n_write_flush>
	HAL_Delay(1);
 800598a:	2001      	movs	r0, #1
}
 800598c:	b00b      	add	sp, #44	; 0x2c
 800598e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_Delay(1);
 8005992:	f001 bdff 	b.w	8007594 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 8005996:	2001      	movs	r0, #1
 8005998:	f7fc f86a 	bl	8001a70 <SetBW>
 800599c:	e6ec      	b.n	8005778 <UserInput+0x170>
			RXVolume += 0.1;
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <UserInput+0x504>)
			if (RXVolume > 1.0)
 80059a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			RXVolume += 0.1;
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8005ab8 <UserInput+0x4b0>
 80059ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80059b0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80059b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80059b8:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 80059bc:	edc3 7a00 	vstr	s15, [r3]
 80059c0:	e6da      	b.n	8005778 <UserInput+0x170>
			RXVolume -= 0.1;
 80059c2:	4b52      	ldr	r3, [pc, #328]	; (8005b0c <UserInput+0x504>)
			if (RXVolume < 0)
 80059c4:	2200      	movs	r2, #0
			RXVolume -= 0.1;
 80059c6:	ed93 7a00 	vldr	s14, [r3]
 80059ca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8005ab8 <UserInput+0x4b0>
 80059ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80059d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059d6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (RXVolume < 0)
 80059da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80059de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			RXVolume -= 0.1;
 80059e2:	bf54      	ite	pl
 80059e4:	ed83 7a00 	vstrpl	s14, [r3]
				RXVolume = 0;
 80059e8:	601a      	strmi	r2, [r3, #0]
 80059ea:	e6c5      	b.n	8005778 <UserInput+0x170>
			FminusClicked(1); break; //change to 2 for step equal to selection
 80059ec:	2001      	movs	r0, #1
 80059ee:	f7fc faad 	bl	8001f4c <FminusClicked>
 80059f2:	e6c1      	b.n	8005778 <UserInput+0x170>
			FplusClicked(1); break;  //change to 2 for step equal to selection
 80059f4:	2001      	movs	r0, #1
 80059f6:	f7fc fa05 	bl	8001e04 <FplusClicked>
 80059fa:	e6bd      	b.n	8005778 <UserInput+0x170>
			SetFstep(5);  break;
 80059fc:	2005      	movs	r0, #5
 80059fe:	f7fc f9df 	bl	8001dc0 <SetFstep>
 8005a02:	e6b9      	b.n	8005778 <UserInput+0x170>
			SetFstep(4);  break;
 8005a04:	2004      	movs	r0, #4
 8005a06:	f7fc f9db 	bl	8001dc0 <SetFstep>
 8005a0a:	e6b5      	b.n	8005778 <UserInput+0x170>
			SetFstep(3);  break;
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f7fc f9d7 	bl	8001dc0 <SetFstep>
 8005a12:	e6b1      	b.n	8005778 <UserInput+0x170>
			SetFstep(2);  break;
 8005a14:	2002      	movs	r0, #2
 8005a16:	f7fc f9d3 	bl	8001dc0 <SetFstep>
 8005a1a:	e6ad      	b.n	8005778 <UserInput+0x170>
			SetFstep(1); break;
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	f7fc f9cf 	bl	8001dc0 <SetFstep>
 8005a22:	e6a9      	b.n	8005778 <UserInput+0x170>
			SetFstep(0); break;
 8005a24:	2000      	movs	r0, #0
 8005a26:	f7fc f9cb 	bl	8001dc0 <SetFstep>
 8005a2a:	e6a5      	b.n	8005778 <UserInput+0x170>
			SetFstep(9); break;
 8005a2c:	2009      	movs	r0, #9
 8005a2e:	f7fc f9c7 	bl	8001dc0 <SetFstep>
 8005a32:	e6a1      	b.n	8005778 <UserInput+0x170>
			DisableDisplay = 1; break;
 8005a34:	4c36      	ldr	r4, [pc, #216]	; (8005b10 <UserInput+0x508>)
 8005a36:	2301      	movs	r3, #1
 8005a38:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 8005a3a:	e602      	b.n	8005642 <UserInput+0x3a>
			SendCWMessage(0); break;
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f7fb ffd7 	bl	80019f0 <SendCWMessage>
 8005a42:	e699      	b.n	8005778 <UserInput+0x170>
			SendCWMessage(1); break;
 8005a44:	2001      	movs	r0, #1
 8005a46:	f7fb ffd3 	bl	80019f0 <SendCWMessage>
 8005a4a:	e695      	b.n	8005778 <UserInput+0x170>
			TxPowerOut = LOW_POWER_OUT;
 8005a4c:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <UserInput+0x50c>)
 8005a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a52:	601a      	str	r2, [r3, #0]
			break;
 8005a54:	e690      	b.n	8005778 <UserInput+0x170>
			TxPowerOut = MID_POWER_OUT;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <UserInput+0x50c>)
 8005a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a5c:	601a      	str	r2, [r3, #0]
			break;
 8005a5e:	e68b      	b.n	8005778 <UserInput+0x170>
			TxPowerOut = MAX_POWER_OUT;
 8005a60:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <UserInput+0x50c>)
 8005a62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005a66:	601a      	str	r2, [r3, #0]
			break;
 8005a68:	e686      	b.n	8005778 <UserInput+0x170>
			if (ShowWF)
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <UserInput+0x510>)
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	f000 813d 	beq.w	8005cee <UserInput+0x6e6>
				ShowWF=0;
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e67e      	b.n	8005778 <UserInput+0x170>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 8005a7a:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <UserInput+0x514>)
 8005a7c:	4928      	ldr	r1, [pc, #160]	; (8005b20 <UserInput+0x518>)
 8005a7e:	ed93 0a00 	vldr	s0, [r3]
 8005a82:	4828      	ldr	r0, [pc, #160]	; (8005b24 <UserInput+0x51c>)
 8005a84:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8005a88:	f7ff f996 	bl	8004db8 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 8005a8c:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <UserInput+0x520>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 8005a92:	f7fe fcb9 	bl	8004408 <SendWSPR>
			break;
 8005a96:	e66f      	b.n	8005778 <UserInput+0x170>
			SetMode((Mode)LSB); break;
 8005a98:	2001      	movs	r0, #1
 8005a9a:	f7fc f955 	bl	8001d48 <SetMode>
 8005a9e:	e66b      	b.n	8005778 <UserInput+0x170>
			SetBW((Bwidth)Narrow);  break;
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fb ffe5 	bl	8001a70 <SetBW>
 8005aa6:	e667      	b.n	8005778 <UserInput+0x170>
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	409f4000 	.word	0x409f4000
 8005ab0:	9916f6a6 	.word	0x9916f6a6
 8005ab4:	400a93fc 	.word	0x400a93fc
 8005ab8:	9999999a 	.word	0x9999999a
 8005abc:	3fb99999 	.word	0x3fb99999
 8005ac0:	2400a3e8 	.word	0x2400a3e8
 8005ac4:	1ff1e800 	.word	0x1ff1e800
 8005ac8:	09ee009f 	.word	0x09ee009f
 8005acc:	24006140 	.word	0x24006140
 8005ad0:	24006150 	.word	0x24006150
 8005ad4:	08019590 	.word	0x08019590
 8005ad8:	240062d0 	.word	0x240062d0
 8005adc:	2400613c 	.word	0x2400613c
 8005ae0:	080195b0 	.word	0x080195b0
 8005ae4:	2400a320 	.word	0x2400a320
 8005ae8:	2400a384 	.word	0x2400a384
 8005aec:	24007300 	.word	0x24007300
 8005af0:	58020800 	.word	0x58020800
 8005af4:	58020c00 	.word	0x58020c00
 8005af8:	58020400 	.word	0x58020400
 8005afc:	240061b4 	.word	0x240061b4
 8005b00:	2400a450 	.word	0x2400a450
 8005b04:	240061a8 	.word	0x240061a8
 8005b08:	080195bc 	.word	0x080195bc
 8005b0c:	24006148 	.word	0x24006148
 8005b10:	24000ee4 	.word	0x24000ee4
 8005b14:	240061b8 	.word	0x240061b8
 8005b18:	24006174 	.word	0x24006174
 8005b1c:	24006124 	.word	0x24006124
 8005b20:	24005104 	.word	0x24005104
 8005b24:	240050f8 	.word	0x240050f8
 8005b28:	240061b5 	.word	0x240061b5
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b2e:	2301      	movs	r3, #1
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b30:	2502      	movs	r5, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b32:	f44f 7200 	mov.w	r2, #512	; 0x200
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b36:	a904      	add	r1, sp, #16
 8005b38:	4873      	ldr	r0, [pc, #460]	; (8005d08 <UserInput+0x700>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b3a:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b40:	e9cd 4407 	strd	r4, r4, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b44:	f004 fdd4 	bl	800a6f0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005b48:	4622      	mov	r2, r4
 8005b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b4e:	486f      	ldr	r0, [pc, #444]	; (8005d0c <UserInput+0x704>)
 8005b50:	f004 ff06 	bl	800a960 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005b54:	4622      	mov	r2, r4
 8005b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b5a:	486d      	ldr	r0, [pc, #436]	; (8005d10 <UserInput+0x708>)
 8005b5c:	f004 ff00 	bl	800a960 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005b60:	4b6c      	ldr	r3, [pc, #432]	; (8005d14 <UserInput+0x70c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b68:	4868      	ldr	r0, [pc, #416]	; (8005d0c <UserInput+0x704>)
		TransmissionEnabled = 0;
 8005b6a:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6c:	9408      	str	r4, [sp, #32]
 8005b6e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005b72:	e9cd 4406 	strd	r4, r4, [sp, #24]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005b76:	f004 fef3 	bl	800a960 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	2110      	movs	r1, #16
 8005b80:	4865      	ldr	r0, [pc, #404]	; (8005d18 <UserInput+0x710>)
 8005b82:	f003 f9d5 	bl	8008f30 <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 8005b86:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <UserInput+0x714>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b88:	a904      	add	r1, sp, #16
 8005b8a:	485f      	ldr	r0, [pc, #380]	; (8005d08 <UserInput+0x700>)
		TXCarrierEnabled = 0;
 8005b8c:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b92:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b94:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 8005b96:	2301      	movs	r3, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b98:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 8005b9a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b9c:	f004 fda8 	bl	800a6f0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ba6:	485a      	ldr	r0, [pc, #360]	; (8005d10 <UserInput+0x708>)
 8005ba8:	f004 feda 	bl	800a960 <HAL_GPIO_WritePin>
}
 8005bac:	e5e4      	b.n	8005778 <UserInput+0x170>
			SetAGC((Agctype)Slow);  break;
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7fb ffc2 	bl	8001b38 <SetAGC>
 8005bb4:	e5e0      	b.n	8005778 <UserInput+0x170>
		if (LastTXFreq != LOfreq)
 8005bb6:	485a      	ldr	r0, [pc, #360]	; (8005d20 <UserInput+0x718>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb8:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8005bba:	4c5a      	ldr	r4, [pc, #360]	; (8005d24 <UserInput+0x71c>)
		TransmissionEnabled = 1;
 8005bbc:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 8005bbe:	ed90 3a00 	vldr	s6, [r0]
 8005bc2:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8005bc6:	4a53      	ldr	r2, [pc, #332]	; (8005d14 <UserInput+0x70c>)
		if (LastTXFreq != LOfreq)
 8005bc8:	eef4 7a43 	vcmp.f32	s15, s6
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bcc:	9304      	str	r3, [sp, #16]
		TransmissionEnabled = 1;
 8005bce:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005bd8:	e9cd 3307 	strd	r3, r3, [sp, #28]
		if (LastTXFreq != LOfreq)
 8005bdc:	f040 808a 	bne.w	8005cf4 <UserInput+0x6ec>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005be2:	f44f 7700 	mov.w	r7, #512	; 0x200
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be6:	2602      	movs	r6, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2503      	movs	r5, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bea:	a904      	add	r1, sp, #16
 8005bec:	4846      	ldr	r0, [pc, #280]	; (8005d08 <UserInput+0x700>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005bee:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	e9cd 6405 	strd	r6, r4, [sp, #20]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005bf4:	e9cd 5407 	strd	r5, r4, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf8:	f004 fd7a 	bl	800a6f0 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c02:	4842      	ldr	r0, [pc, #264]	; (8005d0c <UserInput+0x704>)
 8005c04:	f004 feac 	bl	800a960 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c0e:	4840      	ldr	r0, [pc, #256]	; (8005d10 <UserInput+0x708>)
 8005c10:	f004 fea6 	bl	800a960 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005c14:	4622      	mov	r2, r4
 8005c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c1a:	483c      	ldr	r0, [pc, #240]	; (8005d0c <UserInput+0x704>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	9408      	str	r4, [sp, #32]
 8005c1e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005c22:	e9cd 4406 	strd	r4, r4, [sp, #24]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005c26:	f004 fe9b 	bl	800a960 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8005c2a:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <UserInput+0x720>)
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	2110      	movs	r1, #16
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4839      	ldr	r0, [pc, #228]	; (8005d18 <UserInput+0x710>)
 8005c34:	f003 f97c 	bl	8008f30 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c38:	a904      	add	r1, sp, #16
 8005c3a:	4833      	ldr	r0, [pc, #204]	; (8005d08 <UserInput+0x700>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c3c:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	e9cd 6405 	strd	r6, r4, [sp, #20]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c42:	e9cd 5407 	strd	r5, r4, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c46:	f004 fd53 	bl	800a6f0 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4b33      	ldr	r3, [pc, #204]	; (8005d1c <UserInput+0x714>)
		LED_GREEN_ON;
 8005c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c52:	482f      	ldr	r0, [pc, #188]	; (8005d10 <UserInput+0x708>)
		TXCarrierEnabled = 1;
 8005c54:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005c56:	f004 fe83 	bl	800a960 <HAL_GPIO_WritePin>
}
 8005c5a:	e58d      	b.n	8005778 <UserInput+0x170>
			SetMode((Mode)USB); break;
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f7fc f873 	bl	8001d48 <SetMode>
 8005c62:	e589      	b.n	8005778 <UserInput+0x170>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8005c64:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <UserInput+0x724>)
	for (i=0; i< 50; i++)
 8005c66:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8005c68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005c6a:	f023 0310 	bic.w	r3, r3, #16
 8005c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8005c70:	9104      	str	r1, [sp, #16]
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	2b31      	cmp	r3, #49	; 0x31
 8005c76:	d80b      	bhi.n	8005c90 <UserInput+0x688>
		i++;
 8005c78:	9b04      	ldr	r3, [sp, #16]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	9304      	str	r3, [sp, #16]
		i--;
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	9304      	str	r3, [sp, #16]
	for (i=0; i< 50; i++)
 8005c84:	9b04      	ldr	r3, [sp, #16]
 8005c86:	3301      	adds	r3, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	9b04      	ldr	r3, [sp, #16]
 8005c8c:	2b31      	cmp	r3, #49	; 0x31
 8005c8e:	d9f3      	bls.n	8005c78 <UserInput+0x670>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005c90:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <UserInput+0x724>)
 8005c92:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <UserInput+0x728>)
 8005c94:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005c96:	400b      	ands	r3, r1
 8005c98:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005c9c:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8005c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005ca0:	f043 0310 	orr.w	r3, r3, #16
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005ca6:	e567      	b.n	8005778 <UserInput+0x170>
			DisableDisplay = 0; break;
 8005ca8:	4c22      	ldr	r4, [pc, #136]	; (8005d34 <UserInput+0x72c>)
 8005caa:	2300      	movs	r3, #0
 8005cac:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 8005cae:	e568      	b.n	8005782 <UserInput+0x17a>
			SetMode((Mode)CW); break;
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	f7fc f849 	bl	8001d48 <SetMode>
 8005cb6:	e55f      	b.n	8005778 <UserInput+0x170>
			SetAGC((Agctype)Fast);  break;
 8005cb8:	2000      	movs	r0, #0
 8005cba:	f7fb ff3d 	bl	8001b38 <SetAGC>
 8005cbe:	e55b      	b.n	8005778 <UserInput+0x170>
			keyer_speed -= 1;
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <UserInput+0x730>)
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8005cc6:	2802      	cmp	r0, #2
 8005cc8:	dc0f      	bgt.n	8005cea <UserInput+0x6e2>
				keyer_speed = 3;
 8005cca:	2203      	movs	r2, #3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005cd0:	e550      	b.n	8005774 <UserInput+0x16c>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4819      	ldr	r0, [pc, #100]	; (8005d3c <UserInput+0x734>)
 8005cd6:	491a      	ldr	r1, [pc, #104]	; (8005d40 <UserInput+0x738>)
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <UserInput+0x73c>)
 8005cda:	6003      	str	r3, [r0, #0]
 8005cdc:	600b      	str	r3, [r1, #0]
 8005cde:	6013      	str	r3, [r2, #0]
			break;
 8005ce0:	e54a      	b.n	8005778 <UserInput+0x170>
			SetMode((Mode)AM); break;
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7fc f830 	bl	8001d48 <SetMode>
 8005ce8:	e546      	b.n	8005778 <UserInput+0x170>
			keyer_speed += 1;
 8005cea:	6018      	str	r0, [r3, #0]
 8005cec:	e542      	b.n	8005774 <UserInput+0x16c>
				ShowWF=1;
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e541      	b.n	8005778 <UserInput+0x170>
			SetTXPLL(LOfreq);
 8005cf4:	eeb0 0a43 	vmov.f32	s0, s6
 8005cf8:	f7ff f9ce 	bl	8005098 <SetTXPLL>
			LastTXFreq = LOfreq;
 8005cfc:	ed84 3a00 	vstr	s6, [r4]
 8005d00:	e76e      	b.n	8005be0 <UserInput+0x5d8>
			Error_Handler();
 8005d02:	f7ff fbbb 	bl	800547c <Error_Handler>
 8005d06:	bf00      	nop
 8005d08:	58020800 	.word	0x58020800
 8005d0c:	58020c00 	.word	0x58020c00
 8005d10:	58020400 	.word	0x58020400
 8005d14:	240061b4 	.word	0x240061b4
 8005d18:	2400a450 	.word	0x2400a450
 8005d1c:	240061a8 	.word	0x240061a8
 8005d20:	24006124 	.word	0x24006124
 8005d24:	24006134 	.word	0x24006134
 8005d28:	240061b8 	.word	0x240061b8
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	ffff0007 	.word	0xffff0007
 8005d34:	24000ee4 	.word	0x24000ee4
 8005d38:	2400acac 	.word	0x2400acac
 8005d3c:	240061a0 	.word	0x240061a0
 8005d40:	240061a4 	.word	0x240061a4
 8005d44:	2400c7dc 	.word	0x2400c7dc

08005d48 <MX_TIM6_Init_Custom_Rate>:
{
 8005d48:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d4a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8005d4c:	4c0f      	ldr	r4, [pc, #60]	; (8005d8c <MX_TIM6_Init_Custom_Rate+0x44>)
 8005d4e:	4810      	ldr	r0, [pc, #64]	; (8005d90 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8005d50:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8005d52:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d56:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d58:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d5a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8005d5c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d60:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8005d62:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d66:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d6a:	f007 f8a7 	bl	800cebc <HAL_TIM_Base_Init>
 8005d6e:	b950      	cbnz	r0, 8005d86 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d70:	4603      	mov	r3, r0
 8005d72:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d74:	a901      	add	r1, sp, #4
 8005d76:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d78:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d7a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d7c:	f007 fe6e 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 8005d80:	b908      	cbnz	r0, 8005d86 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8005d82:	b004      	add	sp, #16
 8005d84:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005d86:	f7ff fb79 	bl	800547c <Error_Handler>
 8005d8a:	bf00      	nop
 8005d8c:	2400ab7c 	.word	0x2400ab7c
 8005d90:	40001000 	.word	0x40001000
 8005d94:	00000000 	.word	0x00000000

08005d98 <main>:
{
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	b0df      	sub	sp, #380	; 0x17c
	HAL_Init();
 8005d9e:	f001 fbb7 	bl	8007510 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005da2:	4bc8      	ldr	r3, [pc, #800]	; (80060c4 <main+0x32c>)
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8005daa:	d111      	bne.n	8005dd0 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8005dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005db0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005db4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005dbc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005dc6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005dcc:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd0:	2600      	movs	r6, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005dd2:	4cbd      	ldr	r4, [pc, #756]	; (80060c8 <main+0x330>)
	SystemClock_Config_For_OC();
 8005dd4:	f7ff fb6c 	bl	80054b0 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 8005dd8:	2014      	movs	r0, #20
 8005dda:	f001 fbdb 	bl	8007594 <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dde:	9658      	str	r6, [sp, #352]	; 0x160
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005de0:	4632      	mov	r2, r6
 8005de2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005de6:	48b9      	ldr	r0, [pc, #740]	; (80060cc <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005de8:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = SwInt1_Pin;
 8005dea:	f44f 4880 	mov.w	r8, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005dee:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005df2:	2702      	movs	r7, #2
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005df4:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df8:	e9cd 6654 	strd	r6, r6, [sp, #336]	; 0x150
 8005dfc:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005e00:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e0c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8005e18:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e20:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	9306      	str	r3, [sp, #24]
 8005e2e:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005e30:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	9307      	str	r3, [sp, #28]
 8005e46:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005e48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	9308      	str	r3, [sp, #32]
 8005e5e:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005e60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e64:	f043 0308 	orr.w	r3, r3, #8
 8005e68:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	9309      	str	r3, [sp, #36]	; 0x24
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005e78:	f004 fd72 	bl	800a960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005e82:	4893      	ldr	r0, [pc, #588]	; (80060d0 <main+0x338>)
 8005e84:	f004 fd6c 	bl	800a960 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005e8c:	a954      	add	r1, sp, #336	; 0x150
 8005e8e:	4891      	ldr	r0, [pc, #580]	; (80060d4 <main+0x33c>)
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005e90:	9354      	str	r3, [sp, #336]	; 0x150
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e92:	e9cd 6555 	strd	r6, r5, [sp, #340]	; 0x154
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005e96:	f004 fc2b 	bl	800a6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005e9a:	a954      	add	r1, sp, #336	; 0x150
 8005e9c:	488d      	ldr	r0, [pc, #564]	; (80060d4 <main+0x33c>)
	GPIO_InitStruct.Pin = SwInt1_Pin;
 8005e9e:	f8cd 8150 	str.w	r8, [sp, #336]	; 0x150
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ea2:	9556      	str	r5, [sp, #344]	; 0x158
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ea4:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005ea8:	f004 fc22 	bl	800a6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005eac:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eae:	a954      	add	r1, sp, #336	; 0x150
 8005eb0:	4889      	ldr	r0, [pc, #548]	; (80060d8 <main+0x340>)
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005eb2:	9354      	str	r3, [sp, #336]	; 0x150
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eb4:	e9cd 6555 	strd	r6, r5, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	f004 fc1a 	bl	800a6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005ebc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec0:	a954      	add	r1, sp, #336	; 0x150
 8005ec2:	4882      	ldr	r0, [pc, #520]	; (80060cc <main+0x334>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec4:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005ec6:	9354      	str	r3, [sp, #336]	; 0x150
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec8:	e9cd 5655 	strd	r5, r6, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ecc:	f004 fc10 	bl	800a6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005ed0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ed4:	a954      	add	r1, sp, #336	; 0x150
 8005ed6:	487e      	ldr	r0, [pc, #504]	; (80060d0 <main+0x338>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005ed8:	9354      	str	r3, [sp, #336]	; 0x150
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eda:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005edc:	9555      	str	r5, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ede:	9756      	str	r7, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ee0:	f004 fc06 	bl	800a6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005ee4:	a954      	add	r1, sp, #336	; 0x150
 8005ee6:	487a      	ldr	r0, [pc, #488]	; (80060d0 <main+0x338>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ee8:	9556      	str	r5, [sp, #344]	; 0x158
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005eea:	e9cd 8654 	strd	r8, r6, [sp, #336]	; 0x150
	HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005eee:	f004 fbff 	bl	800a6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef2:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005efa:	a954      	add	r1, sp, #336	; 0x150
 8005efc:	4875      	ldr	r0, [pc, #468]	; (80060d4 <main+0x33c>)
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005efe:	9354      	str	r3, [sp, #336]	; 0x150
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005f00:	9658      	str	r6, [sp, #352]	; 0x160
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f02:	f8cd 815c 	str.w	r8, [sp, #348]	; 0x15c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f06:	e9cd 7655 	strd	r7, r6, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f0a:	f004 fbf1 	bl	800a6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(TinyUSB_GPIO_Port, &GPIO_InitStruct);
 8005f0e:	4870      	ldr	r0, [pc, #448]	; (80060d0 <main+0x338>)
 8005f10:	a954      	add	r1, sp, #336	; 0x150
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f12:	9556      	str	r5, [sp, #344]	; 0x158
	GPIO_InitStruct.Pin = TinyUSB_Pin;
 8005f14:	e9cd 5954 	strd	r5, r9, [sp, #336]	; 0x150
	HAL_GPIO_Init(TinyUSB_GPIO_Port, &GPIO_InitStruct);
 8005f18:	f004 fbea 	bl	800a6f0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	4629      	mov	r1, r5
 8005f20:	2006      	movs	r0, #6
 8005f22:	f002 fecd 	bl	8008cc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005f26:	2006      	movs	r0, #6
 8005f28:	f002 ff08 	bl	8008d3c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	2104      	movs	r1, #4
 8005f30:	2028      	movs	r0, #40	; 0x28
 8005f32:	f002 fec5 	bl	8008cc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005f36:	2028      	movs	r0, #40	; 0x28
 8005f38:	f002 ff00 	bl	8008d3c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005f3c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005f40:	4632      	mov	r2, r6
 8005f42:	4631      	mov	r1, r6
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005f44:	432b      	orrs	r3, r5
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005f46:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005f48:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005f4c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	hadc1.Instance = ADC1;
 8005f50:	4c62      	ldr	r4, [pc, #392]	; (80060dc <main+0x344>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005f52:	402b      	ands	r3, r5
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005f58:	f002 feb2 	bl	8008cc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005f5c:	200b      	movs	r0, #11
 8005f5e:	f002 feed 	bl	8008d3c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8005f62:	4632      	mov	r2, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	200c      	movs	r0, #12
 8005f68:	f002 feaa 	bl	8008cc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005f6c:	200c      	movs	r0, #12
 8005f6e:	f002 fee5 	bl	8008d3c <HAL_NVIC_EnableIRQ>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005f72:	4b5b      	ldr	r3, [pc, #364]	; (80060e0 <main+0x348>)
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005f74:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f78:	f44f 7880 	mov.w	r8, #256	; 0x100
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005f7c:	962e      	str	r6, [sp, #184]	; 0xb8
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f7e:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = {0};
 8005f80:	9642      	str	r6, [sp, #264]	; 0x108
	ADC_MultiModeTypeDef multimode = {0};
 8005f82:	961b      	str	r6, [sp, #108]	; 0x6c
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005f84:	9633      	str	r6, [sp, #204]	; 0xcc
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f86:	60e6      	str	r6, [r4, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f88:	7726      	strb	r6, [r4, #28]
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005f8a:	6366      	str	r6, [r4, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8005f8c:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f90:	f8a4 8014 	strh.w	r8, [r4, #20]
	hadc1.Init.NbrOfConversion = 1;
 8005f94:	61a5      	str	r5, [r4, #24]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005f96:	e9c4 3b00 	strd	r3, fp, [r4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f9a:	2308      	movs	r3, #8
	ADC_MultiModeTypeDef multimode = {0};
 8005f9c:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005fa0:	e9cd 662f 	strd	r6, r6, [sp, #188]	; 0xbc
 8005fa4:	e9cd 6631 	strd	r6, r6, [sp, #196]	; 0xc4
	ADC_ChannelConfTypeDef sConfig = {0};
 8005fa8:	e9cd 6643 	strd	r6, r6, [sp, #268]	; 0x10c
 8005fac:	e9cd 6645 	strd	r6, r6, [sp, #276]	; 0x114
 8005fb0:	e9cd 6647 	strd	r6, r6, [sp, #284]	; 0x11c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005fb4:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005fb8:	60a3      	str	r3, [r4, #8]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fba:	2604      	movs	r6, #4
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fc0:	6126      	str	r6, [r4, #16]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005fc2:	6323      	str	r3, [r4, #48]	; 0x30
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005fc4:	f002 fb8c 	bl	80086e0 <HAL_ADC_Init>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f040 853c 	bne.w	8006a46 <main+0xcae>
	multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8005fce:	2207      	movs	r2, #7
 8005fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005fd4:	a919      	add	r1, sp, #100	; 0x64
 8005fd6:	4620      	mov	r0, r4
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8005fd8:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8005fdc:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005fe0:	f002 fdf4 	bl	8008bcc <HAL_ADCEx_MultiModeConfigChannel>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 852e 	bne.w	8006a46 <main+0xcae>
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005fea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005fee:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <main+0x34c>)
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005ff0:	4f3d      	ldr	r7, [pc, #244]	; (80060e8 <main+0x350>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005ff2:	a92e      	add	r1, sp, #184	; 0xb8
 8005ff4:	4620      	mov	r0, r4
	AnalogWDGConfig.ITMode = ENABLE;
 8005ff6:	f88d 50c4 	strb.w	r5, [sp, #196]	; 0xc4
	AnalogWDGConfig.LowThreshold = 1;
 8005ffa:	9533      	str	r5, [sp, #204]	; 0xcc
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005ffc:	9730      	str	r7, [sp, #192]	; 0xc0
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005ffe:	e9cd 322e 	strd	r3, r2, [sp, #184]	; 0xb8
	AnalogWDGConfig.HighThreshold = 4094;
 8006002:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006006:	9232      	str	r2, [sp, #200]	; 0xc8
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8006008:	f001 ff42 	bl	8007e90 <HAL_ADC_AnalogWDGConfig>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 851a 	bne.w	8006a46 <main+0xcae>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006012:	f04f 0a06 	mov.w	sl, #6
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006016:	f240 72ff 	movw	r2, #2047	; 0x7ff
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800601a:	9044      	str	r0, [sp, #272]	; 0x110
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800601c:	a942      	add	r1, sp, #264	; 0x108
	sConfig.OffsetSignedSaturation = DISABLE;
 800601e:	f88d 0121 	strb.w	r0, [sp, #289]	; 0x121
	sConfig.Channel = ADC_CHANNEL_5;
 8006022:	9742      	str	r7, [sp, #264]	; 0x108
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006024:	f8cd a10c 	str.w	sl, [sp, #268]	; 0x10c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006028:	9245      	str	r2, [sp, #276]	; 0x114
	sConfig.Offset = 0;
 800602a:	e9cd 6046 	strd	r6, r0, [sp, #280]	; 0x118
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800602e:	4620      	mov	r0, r4
 8006030:	f001 fd06 	bl	8007a40 <HAL_ADC_ConfigChannel>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 8506 	bne.w	8006a46 <main+0xcae>
	hadc2.Instance = ADC2;
 800603a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80060f0 <main+0x358>
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800603e:	2208      	movs	r2, #8
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006040:	9028      	str	r0, [sp, #160]	; 0xa0
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006042:	f8c9 2008 	str.w	r2, [r9, #8]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	ADC_ChannelConfTypeDef sConfig = {0};
 800604a:	903b      	str	r0, [sp, #236]	; 0xec
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800604c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
	hadc2.Instance = ADC2;
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <main+0x354>)
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006052:	902d      	str	r0, [sp, #180]	; 0xb4
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006054:	f889 001c 	strb.w	r0, [r9, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8006058:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800605c:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8006060:	f889 0038 	strb.w	r0, [r9, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8006064:	f8a9 8014 	strh.w	r8, [r9, #20]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8006068:	f8c9 b004 	str.w	fp, [r9, #4]
	hadc2.Init.NbrOfConversion = 1;
 800606c:	f8c9 5018 	str.w	r5, [r9, #24]
	hadc2.Instance = ADC2;
 8006070:	f8c9 2000 	str.w	r2, [r9]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006074:	e9cd 0029 	strd	r0, r0, [sp, #164]	; 0xa4
 8006078:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
	ADC_ChannelConfTypeDef sConfig = {0};
 800607c:	e9cd 003c 	strd	r0, r0, [sp, #240]	; 0xf0
 8006080:	e9cd 003e 	strd	r0, r0, [sp, #248]	; 0xf8
 8006084:	e9cd 0040 	strd	r0, r0, [sp, #256]	; 0x100
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006088:	e9c9 0603 	strd	r0, r6, [r9, #12]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800608c:	4648      	mov	r0, r9
 800608e:	f002 fb27 	bl	80086e0 <HAL_ADC_Init>
 8006092:	2800      	cmp	r0, #0
 8006094:	f040 84d7 	bne.w	8006a46 <main+0xcae>
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8006098:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800609c:	f8df b044 	ldr.w	fp, [pc, #68]	; 80060e4 <main+0x34c>
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80060a0:	a928      	add	r1, sp, #160	; 0xa0
 80060a2:	4648      	mov	r0, r9
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80060a4:	972a      	str	r7, [sp, #168]	; 0xa8
	AnalogWDGConfig.ITMode = ENABLE;
 80060a6:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
	AnalogWDGConfig.LowThreshold = 1;
 80060aa:	952d      	str	r5, [sp, #180]	; 0xb4
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80060ac:	e9cd b328 	strd	fp, r3, [sp, #160]	; 0xa0
	AnalogWDGConfig.HighThreshold = 4094;
 80060b0:	f640 73fe 	movw	r3, #4094	; 0xffe
 80060b4:	932c      	str	r3, [sp, #176]	; 0xb0
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80060b6:	f001 feeb 	bl	8007e90 <HAL_ADC_AnalogWDGConfig>
 80060ba:	4602      	mov	r2, r0
 80060bc:	2800      	cmp	r0, #0
 80060be:	f040 84c2 	bne.w	8006a46 <main+0xcae>
 80060c2:	e017      	b.n	80060f4 <main+0x35c>
 80060c4:	e000ed00 	.word	0xe000ed00
 80060c8:	58024400 	.word	0x58024400
 80060cc:	58020400 	.word	0x58020400
 80060d0:	58020c00 	.word	0x58020c00
 80060d4:	58020800 	.word	0x58020800
 80060d8:	58020000 	.word	0x58020000
 80060dc:	2400a320 	.word	0x2400a320
 80060e0:	40022000 	.word	0x40022000
 80060e4:	7dc00000 	.word	0x7dc00000
 80060e8:	14f00020 	.word	0x14f00020
 80060ec:	40022100 	.word	0x40022100
 80060f0:	2400a384 	.word	0x2400a384
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80060f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060f8:	a93b      	add	r1, sp, #236	; 0xec
 80060fa:	4648      	mov	r0, r9
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80060fc:	923d      	str	r2, [sp, #244]	; 0xf4
	sConfig.Offset = 0;
 80060fe:	9240      	str	r2, [sp, #256]	; 0x100
	sConfig.OffsetSignedSaturation = DISABLE;
 8006100:	f88d 2105 	strb.w	r2, [sp, #261]	; 0x105
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8006104:	e9cd 7a3b 	strd	r7, sl, [sp, #236]	; 0xec
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006108:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800610c:	f001 fc98 	bl	8007a40 <HAL_ADC_ConfigChannel>
 8006110:	4601      	mov	r1, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	f040 8497 	bne.w	8006a46 <main+0xcae>
	hdac1.Instance = DAC1;
 8006118:	4eb5      	ldr	r6, [pc, #724]	; (80063f0 <main+0x658>)
	DAC_ChannelConfTypeDef sConfig = {0};
 800611a:	2224      	movs	r2, #36	; 0x24
 800611c:	a854      	add	r0, sp, #336	; 0x150
 800611e:	f00c ff5e 	bl	8012fde <memset>
	hdac1.Instance = DAC1;
 8006122:	4bb4      	ldr	r3, [pc, #720]	; (80063f4 <main+0x65c>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006124:	4630      	mov	r0, r6
	hdac1.Instance = DAC1;
 8006126:	6033      	str	r3, [r6, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006128:	f002 fe2c 	bl	8008d84 <HAL_DAC_Init>
 800612c:	2800      	cmp	r0, #0
 800612e:	f040 848a 	bne.w	8006a46 <main+0xcae>
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006132:	2316      	movs	r3, #22
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006134:	4602      	mov	r2, r0
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006136:	9054      	str	r0, [sp, #336]	; 0x150
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006138:	a954      	add	r1, sp, #336	; 0x150
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800613a:	9056      	str	r0, [sp, #344]	; 0x158
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800613c:	9058      	str	r0, [sp, #352]	; 0x160
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800613e:	4630      	mov	r0, r6
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006140:	9355      	str	r3, [sp, #340]	; 0x154
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006142:	9557      	str	r5, [sp, #348]	; 0x15c
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006144:	f002 ff5e 	bl	8009004 <HAL_DAC_ConfigChannel>
 8006148:	4603      	mov	r3, r0
 800614a:	2800      	cmp	r0, #0
 800614c:	f040 847b 	bne.w	8006a46 <main+0xcae>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006150:	2210      	movs	r2, #16
 8006152:	a954      	add	r1, sp, #336	; 0x150
 8006154:	4630      	mov	r0, r6
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006156:	9355      	str	r3, [sp, #340]	; 0x154
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006158:	f002 ff54 	bl	8009004 <HAL_DAC_ConfigChannel>
 800615c:	2800      	cmp	r0, #0
 800615e:	f040 8472 	bne.w	8006a46 <main+0xcae>
	hlptim2.Instance = LPTIM2;
 8006162:	48a5      	ldr	r0, [pc, #660]	; (80063f8 <main+0x660>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8006164:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 8006166:	4aa5      	ldr	r2, [pc, #660]	; (80063fc <main+0x664>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8006168:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800616c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8006170:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8006174:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8006178:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800617c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	hlptim2.Instance = LPTIM2;
 8006180:	6002      	str	r2, [r0, #0]
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8006182:	6146      	str	r6, [r0, #20]
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8006184:	6283      	str	r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8006186:	f004 fc0d 	bl	800a9a4 <HAL_LPTIM_Init>
 800618a:	2800      	cmp	r0, #0
 800618c:	f040 845b 	bne.w	8006a46 <main+0xcae>
	htim6.Instance = TIM6;
 8006190:	4d9b      	ldr	r5, [pc, #620]	; (8006400 <main+0x668>)
	htim6.Init.Period = 8191;
 8006192:	f641 73ff 	movw	r3, #8191	; 0x1fff
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006196:	9018      	str	r0, [sp, #96]	; 0x60
	htim6.Init.Period = 8191;
 8006198:	60eb      	str	r3, [r5, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800619a:	2380      	movs	r3, #128	; 0x80
	htim6.Init.Prescaler = 0;
 800619c:	6068      	str	r0, [r5, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800619e:	61ab      	str	r3, [r5, #24]
	htim6.Instance = TIM6;
 80061a0:	4b98      	ldr	r3, [pc, #608]	; (8006404 <main+0x66c>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061a2:	60a8      	str	r0, [r5, #8]
	htim6.Instance = TIM6;
 80061a4:	602b      	str	r3, [r5, #0]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061a6:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80061aa:	4628      	mov	r0, r5
 80061ac:	f006 fe86 	bl	800cebc <HAL_TIM_Base_Init>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f040 8448 	bne.w	8006a46 <main+0xcae>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80061b6:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061b8:	9018      	str	r0, [sp, #96]	; 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80061ba:	a916      	add	r1, sp, #88	; 0x58
 80061bc:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80061be:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80061c0:	f007 fc4c 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f040 843d 	bne.w	8006a46 <main+0xcae>
	huart3.Instance = USART3;
 80061cc:	4d8e      	ldr	r5, [pc, #568]	; (8006408 <main+0x670>)
 80061ce:	4a8f      	ldr	r2, [pc, #572]	; (800640c <main+0x674>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80061d0:	60a8      	str	r0, [r5, #8]
	huart3.Instance = USART3;
 80061d2:	602a      	str	r2, [r5, #0]
	huart3.Init.BaudRate = 115200;
 80061d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061d8:	61a8      	str	r0, [r5, #24]
	huart3.Init.BaudRate = 115200;
 80061da:	606a      	str	r2, [r5, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80061dc:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 80061de:	e9c5 0003 	strd	r0, r0, [r5, #12]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061e2:	e9c5 0007 	strd	r0, r0, [r5, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80061e6:	4628      	mov	r0, r5
	huart3.Init.Mode = UART_MODE_TX_RX;
 80061e8:	616a      	str	r2, [r5, #20]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061ea:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80061ee:	f008 fa85 	bl	800e6fc <HAL_UART_Init>
 80061f2:	4601      	mov	r1, r0
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 8426 	bne.w	8006a46 <main+0xcae>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80061fa:	4628      	mov	r0, r5
 80061fc:	f008 fad6 	bl	800e7ac <HAL_UARTEx_SetTxFifoThreshold>
 8006200:	4601      	mov	r1, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	f040 841f 	bne.w	8006a46 <main+0xcae>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006208:	4628      	mov	r0, r5
 800620a:	f008 fb11 	bl	800e830 <HAL_UARTEx_SetRxFifoThreshold>
 800620e:	2800      	cmp	r0, #0
 8006210:	f040 8419 	bne.w	8006a46 <main+0xcae>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006214:	4628      	mov	r0, r5
 8006216:	f008 faab 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 800621a:	2800      	cmp	r0, #0
 800621c:	f040 8413 	bne.w	8006a46 <main+0xcae>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006220:	2301      	movs	r3, #1
	htim4.Instance = TIM4;
 8006222:	4d7b      	ldr	r5, [pc, #492]	; (8006410 <main+0x678>)
	TIM_Encoder_InitTypeDef sConfig = {0};
 8006224:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006226:	a94a      	add	r1, sp, #296	; 0x128
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006228:	934a      	str	r3, [sp, #296]	; 0x128
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800622a:	934c      	str	r3, [sp, #304]	; 0x130
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800622c:	9350      	str	r3, [sp, #320]	; 0x140
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800622e:	2302      	movs	r3, #2
	TIM_Encoder_InitTypeDef sConfig = {0};
 8006230:	9051      	str	r0, [sp, #324]	; 0x144
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006232:	934b      	str	r3, [sp, #300]	; 0x12c
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006234:	934f      	str	r3, [sp, #316]	; 0x13c
	sConfig.IC1Filter = 8;
 8006236:	2308      	movs	r3, #8
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006238:	9015      	str	r0, [sp, #84]	; 0x54
	sConfig.IC1Filter = 8;
 800623a:	934e      	str	r3, [sp, #312]	; 0x138
	sConfig.IC2Filter = 8;
 800623c:	9352      	str	r3, [sp, #328]	; 0x148
	htim4.Instance = TIM4;
 800623e:	4b75      	ldr	r3, [pc, #468]	; (8006414 <main+0x67c>)
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006240:	6128      	str	r0, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006242:	61a8      	str	r0, [r5, #24]
	htim4.Instance = TIM4;
 8006244:	602b      	str	r3, [r5, #0]
	htim4.Init.Period = 65535;
 8006246:	60ee      	str	r6, [r5, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006248:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800624c:	e9c5 0001 	strd	r0, r0, [r5, #4]
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006250:	4628      	mov	r0, r5
 8006252:	f007 f855 	bl	800d300 <HAL_TIM_Encoder_Init>
 8006256:	4603      	mov	r3, r0
 8006258:	2800      	cmp	r0, #0
 800625a:	f040 83f4 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800625e:	a913      	add	r1, sp, #76	; 0x4c
 8006260:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006262:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006264:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006266:	f007 fbf9 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 800626a:	2800      	cmp	r0, #0
 800626c:	f040 83eb 	bne.w	8006a46 <main+0xcae>
	htim7.Instance = TIM7;
 8006270:	4d69      	ldr	r5, [pc, #420]	; (8006418 <main+0x680>)
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <main+0x684>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006274:	9012      	str	r0, [sp, #72]	; 0x48
	htim7.Instance = TIM7;
 8006276:	602b      	str	r3, [r5, #0]
	htim7.Init.Period = 8192;
 8006278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800627c:	61a8      	str	r0, [r5, #24]
	htim7.Init.Period = 8192;
 800627e:	60eb      	str	r3, [r5, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006280:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006284:	e9c5 0001 	strd	r0, r0, [r5, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006288:	4628      	mov	r0, r5
 800628a:	f006 fe17 	bl	800cebc <HAL_TIM_Base_Init>
 800628e:	2800      	cmp	r0, #0
 8006290:	f040 83d9 	bne.w	8006a46 <main+0xcae>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006294:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006296:	a910      	add	r1, sp, #64	; 0x40
 8006298:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800629a:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800629c:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800629e:	f007 fbdd 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f040 83cf 	bne.w	8006a46 <main+0xcae>
	htim7.Instance = TIM7;
 80062a8:	4b5c      	ldr	r3, [pc, #368]	; (800641c <main+0x684>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062aa:	61a8      	str	r0, [r5, #24]
	htim7.Instance = TIM7;
 80062ac:	602b      	str	r3, [r5, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80062ae:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062b2:	e9c5 0001 	strd	r0, r0, [r5, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80062b6:	4628      	mov	r0, r5
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80062b8:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80062ba:	f006 fdff 	bl	800cebc <HAL_TIM_Base_Init>
 80062be:	4603      	mov	r3, r0
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f040 83c0 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80062c6:	a910      	add	r1, sp, #64	; 0x40
 80062c8:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062ca:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062cc:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80062ce:	f007 fbc5 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	f040 83b7 	bne.w	8006a46 <main+0xcae>
	htim2.Instance = TIM2;
 80062d8:	4d51      	ldr	r5, [pc, #324]	; (8006420 <main+0x688>)
 80062da:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 80062de:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062e2:	9024      	str	r0, [sp, #144]	; 0x90
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062e4:	900f      	str	r0, [sp, #60]	; 0x3c
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062e6:	60a8      	str	r0, [r5, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062e8:	6128      	str	r0, [r5, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ea:	61a8      	str	r0, [r5, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ec:	9027      	str	r0, [sp, #156]	; 0x9c
	htim2.Init.Period = 10000;
 80062ee:	60eb      	str	r3, [r5, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	htim2.Init.Prescaler = 0;
 80062f4:	e9c5 6000 	strd	r6, r0, [r5]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062f8:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80062fc:	4628      	mov	r0, r5
 80062fe:	f006 fddd 	bl	800cebc <HAL_TIM_Base_Init>
 8006302:	2800      	cmp	r0, #0
 8006304:	f040 839f 	bne.w	8006a46 <main+0xcae>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006308:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800630c:	a924      	add	r1, sp, #144	; 0x90
 800630e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006310:	9724      	str	r7, [sp, #144]	; 0x90
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006312:	f007 fa17 	bl	800d744 <HAL_TIM_ConfigClockSource>
 8006316:	2800      	cmp	r0, #0
 8006318:	f040 8395 	bne.w	8006a46 <main+0xcae>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800631c:	900d      	str	r0, [sp, #52]	; 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800631e:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006320:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006322:	4628      	mov	r0, r5
 8006324:	f007 fb9a 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 8006328:	2800      	cmp	r0, #0
 800632a:	f040 838c 	bne.w	8006a46 <main+0xcae>
	htim2.Init.Period = 15000;
 800632e:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006332:	60a8      	str	r0, [r5, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006334:	6128      	str	r0, [r5, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006336:	61a8      	str	r0, [r5, #24]
	htim2.Init.Period = 15000;
 8006338:	60eb      	str	r3, [r5, #12]
	htim2.Init.Prescaler = 0;
 800633a:	e9c5 6000 	strd	r6, r0, [r5]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800633e:	4628      	mov	r0, r5
 8006340:	f006 fdbc 	bl	800cebc <HAL_TIM_Base_Init>
 8006344:	2800      	cmp	r0, #0
 8006346:	f040 837e 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800634a:	a924      	add	r1, sp, #144	; 0x90
 800634c:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800634e:	9724      	str	r7, [sp, #144]	; 0x90
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006350:	f007 f9f8 	bl	800d744 <HAL_TIM_ConfigClockSource>
 8006354:	4603      	mov	r3, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	f040 8375 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800635c:	a90d      	add	r1, sp, #52	; 0x34
 800635e:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006360:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006362:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006364:	f007 fb7a 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 8006368:	4603      	mov	r3, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	f040 836b 	bne.w	8006a46 <main+0xcae>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006370:	901e      	str	r0, [sp, #120]	; 0x78
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006372:	900c      	str	r0, [sp, #48]	; 0x30
	TIM_IC_InitTypeDef sConfigIC = {0};
 8006374:	9023      	str	r0, [sp, #140]	; 0x8c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006376:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 800637a:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800637e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
	TIM_IC_InitTypeDef sConfigIC = {0};
 8006382:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
	htim3.Instance = TIM3;
 8006386:	4827      	ldr	r0, [pc, #156]	; (8006424 <main+0x68c>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006388:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800638c:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800638e:	6183      	str	r3, [r0, #24]
	htim3.Instance = TIM3;
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <main+0x690>)
 8006392:	6003      	str	r3, [r0, #0]
	htim3.Init.Period = 65535;
 8006394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006398:	60c3      	str	r3, [r0, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800639a:	f006 fd8f 	bl	800cebc <HAL_TIM_Base_Init>
 800639e:	2800      	cmp	r0, #0
 80063a0:	f040 8351 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80063a4:	a91c      	add	r1, sp, #112	; 0x70
 80063a6:	481f      	ldr	r0, [pc, #124]	; (8006424 <main+0x68c>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063a8:	463e      	mov	r6, r7
 80063aa:	971c      	str	r7, [sp, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80063ac:	f007 f9ca 	bl	800d744 <HAL_TIM_ConfigClockSource>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f040 8348 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80063b6:	481b      	ldr	r0, [pc, #108]	; (8006424 <main+0x68c>)
 80063b8:	f006 feec 	bl	800d194 <HAL_TIM_IC_Init>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f040 8342 	bne.w	8006a46 <main+0xcae>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c2:	900a      	str	r0, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80063c4:	a90a      	add	r1, sp, #40	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c6:	900c      	str	r0, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80063c8:	4816      	ldr	r0, [pc, #88]	; (8006424 <main+0x68c>)
 80063ca:	f007 fb47 	bl	800da5c <HAL_TIMEx_MasterConfigSynchronization>
 80063ce:	4602      	mov	r2, r0
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f040 8338 	bne.w	8006a46 <main+0xcae>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80063d6:	2701      	movs	r7, #1
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80063d8:	9020      	str	r0, [sp, #128]	; 0x80
	sConfigIC.ICFilter = 0;
 80063da:	9023      	str	r0, [sp, #140]	; 0x8c
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80063dc:	a920      	add	r1, sp, #128	; 0x80
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80063de:	e9cd 7021 	strd	r7, r0, [sp, #132]	; 0x84
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80063e2:	4810      	ldr	r0, [pc, #64]	; (8006424 <main+0x68c>)
 80063e4:	f007 f8d0 	bl	800d588 <HAL_TIM_IC_ConfigChannel>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	f040 832c 	bne.w	8006a46 <main+0xcae>
 80063ee:	e01d      	b.n	800642c <main+0x694>
 80063f0:	2400a450 	.word	0x2400a450
 80063f4:	40007400 	.word	0x40007400
 80063f8:	2400a554 	.word	0x2400a554
 80063fc:	58002400 	.word	0x58002400
 8006400:	2400ab7c 	.word	0x2400ab7c
 8006404:	40001000 	.word	0x40001000
 8006408:	2400ac14 	.word	0x2400ac14
 800640c:	40004800 	.word	0x40004800
 8006410:	2400ab30 	.word	0x2400ab30
 8006414:	40000800 	.word	0x40000800
 8006418:	2400abc8 	.word	0x2400abc8
 800641c:	40001400 	.word	0x40001400
 8006420:	2400aa98 	.word	0x2400aa98
 8006424:	2400aae4 	.word	0x2400aae4
 8006428:	40000400 	.word	0x40000400
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800642c:	4ba6      	ldr	r3, [pc, #664]	; (80066c8 <main+0x930>)
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800642e:	f04f 0802 	mov.w	r8, #2
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006432:	f8df e358 	ldr.w	lr, [pc, #856]	; 800678c <main+0x9f4>
 8006436:	2209      	movs	r2, #9
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006438:	60d8      	str	r0, [r3, #12]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800643a:	f8c3 8010 	str.w	r8, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800643e:	f8c3 8018 	str.w	r8, [r3, #24]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006442:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006446:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800644a:	e9c3 000b 	strd	r0, r0, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800644e:	4618      	mov	r0, r3
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006450:	e9c3 e200 	strd	lr, r2, [r3]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006454:	f004 fb18 	bl	800aa88 <HAL_PCD_Init>
 8006458:	4603      	mov	r3, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	f040 82f3 	bne.w	8006a46 <main+0xcae>
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64; //TODO: the MX code generator does not generate this line for ADC3?
 8006460:	4d9a      	ldr	r5, [pc, #616]	; (80066cc <main+0x934>)
	hadc3.Instance = ADC3;
 8006462:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
	ADC_ChannelConfTypeDef sConfig = {0};
 8006466:	903a      	str	r0, [sp, #232]	; 0xe8
	hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8006468:	60ab      	str	r3, [r5, #8]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 800646a:	82ab      	strh	r3, [r5, #20]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800646c:	772b      	strb	r3, [r5, #28]
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800646e:	636b      	str	r3, [r5, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8006470:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006474:	60ef      	str	r7, [r5, #12]
	hadc3.Init.NbrOfConversion = 2;
 8006476:	f8c5 8018 	str.w	r8, [r5, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800647a:	e9c5 360b 	strd	r3, r6, [r5, #44]	; 0x2c
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800647e:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006482:	2604      	movs	r6, #4
	hadc3.Instance = ADC3;
 8006484:	4b92      	ldr	r3, [pc, #584]	; (80066d0 <main+0x938>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8006486:	e9cd 0034 	strd	r0, r0, [sp, #208]	; 0xd0
 800648a:	e9cd 0036 	strd	r0, r0, [sp, #216]	; 0xd8
 800648e:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006492:	4628      	mov	r0, r5
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006494:	612e      	str	r6, [r5, #16]
	hadc3.Instance = ADC3;
 8006496:	e9c5 3200 	strd	r3, r2, [r5]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800649a:	f002 f921 	bl	80086e0 <HAL_ADC_Init>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f040 82d1 	bne.w	8006a46 <main+0xcae>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80064a4:	4b8b      	ldr	r3, [pc, #556]	; (80066d4 <main+0x93c>)
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064a6:	f04f 0c05 	mov.w	ip, #5
	sConfig.Offset = 0;
 80064aa:	9039      	str	r0, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064ac:	a934      	add	r1, sp, #208	; 0xd0
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80064ae:	9334      	str	r3, [sp, #208]	; 0xd0
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
	sConfig.OffsetSignedSaturation = DISABLE;
 80064b4:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064b8:	4628      	mov	r0, r5
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80064ba:	9638      	str	r6, [sp, #224]	; 0xe0
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80064bc:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064c0:	e9cd c336 	strd	ip, r3, [sp, #216]	; 0xd8
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064c4:	f001 fabc 	bl	8007a40 <HAL_ADC_ConfigChannel>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f040 82bc 	bne.w	8006a46 <main+0xcae>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80064ce:	4a82      	ldr	r2, [pc, #520]	; (80066d8 <main+0x940>)
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80064d0:	230c      	movs	r3, #12
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064d2:	a934      	add	r1, sp, #208	; 0xd0
 80064d4:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80064d6:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80064da:	f001 fab1 	bl	8007a40 <HAL_ADC_ConfigChannel>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 82b1 	bne.w	8006a46 <main+0xcae>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80064e4:	4b7d      	ldr	r3, [pc, #500]	; (80066dc <main+0x944>)
 80064e6:	695a      	ldr	r2, [r3, #20]
 80064e8:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 80064ec:	d124      	bne.n	8006538 <main+0x7a0>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80064ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80064f2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80064f6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80064fa:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80064fe:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006502:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8006506:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006508:	ea02 0605 	and.w	r6, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800650c:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800650e:	ea46 7780 	orr.w	r7, r6, r0, lsl #30
      } while (ways-- != 0U);
 8006512:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006514:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8006518:	1c47      	adds	r7, r0, #1
 800651a:	d1f8      	bne.n	800650e <main+0x776>
    } while(sets-- != 0U);
 800651c:	3a20      	subs	r2, #32
 800651e:	f112 0f20 	cmn.w	r2, #32
 8006522:	d1f1      	bne.n	8006508 <main+0x770>
 8006524:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800652e:	615a      	str	r2, [r3, #20]
 8006530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006534:	f3bf 8f6f 	isb	sy
	TU_ASSERT(tusb_init());
 8006538:	f00b fe6c 	bl	8012214 <tusb_init>
 800653c:	b950      	cbnz	r0, 8006554 <main+0x7bc>
 800653e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006542:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8006546:	07db      	lsls	r3, r3, #31
 8006548:	d500      	bpl.n	800654c <main+0x7b4>
 800654a:	be00      	bkpt	0x0000
}
 800654c:	2000      	movs	r0, #0
 800654e:	b05f      	add	sp, #380	; 0x17c
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	MX_TIM6_Init_Custom_Rate();
 8006554:	f7ff fbf8 	bl	8005d48 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8006558:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800655c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006560:	485f      	ldr	r0, [pc, #380]	; (80066e0 <main+0x948>)
 8006562:	f002 f9cb 	bl	80088fc <HAL_ADCEx_Calibration_Start>
 8006566:	2800      	cmp	r0, #0
 8006568:	f040 826d 	bne.w	8006a46 <main+0xcae>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800656c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006574:	485b      	ldr	r0, [pc, #364]	; (80066e4 <main+0x94c>)
 8006576:	f002 f9c1 	bl	80088fc <HAL_ADCEx_Calibration_Start>
 800657a:	2800      	cmp	r0, #0
 800657c:	f040 8263 	bne.w	8006a46 <main+0xcae>
	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8006580:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006588:	4850      	ldr	r0, [pc, #320]	; (80066cc <main+0x934>)
 800658a:	f002 f9b7 	bl	80088fc <HAL_ADCEx_Calibration_Start>
 800658e:	4605      	mov	r5, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	f040 8258 	bne.w	8006a46 <main+0xcae>
	HAL_Delay(1);
 8006596:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006598:	4f53      	ldr	r7, [pc, #332]	; (80066e8 <main+0x950>)
	AMindex  = LSBindex = 1;
 800659a:	4606      	mov	r6, r0
	HAL_Delay(1);
 800659c:	f000 fffa 	bl	8007594 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80065a0:	4629      	mov	r1, r5
 80065a2:	4852      	ldr	r0, [pc, #328]	; (80066ec <main+0x954>)
 80065a4:	f006 ff90 	bl	800d4c8 <HAL_TIM_Encoder_Start>
	RXVolume= 0.1;
 80065a8:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <main+0x958>)
 80065aa:	4a52      	ldr	r2, [pc, #328]	; (80066f4 <main+0x95c>)
	SetFstep(2);
 80065ac:	2002      	movs	r0, #2
	RXVolume= 0.1;
 80065ae:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 80065b0:	f7fb fc06 	bl	8001dc0 <SetFstep>
	cwpitch = CWPITCH;
 80065b4:	4b50      	ldr	r3, [pc, #320]	; (80066f8 <main+0x960>)
	meanavg = 0.f;
 80065b6:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 80065b8:	4a50      	ldr	r2, [pc, #320]	; (80066fc <main+0x964>)
	CarrierEnable(0);
 80065ba:	4628      	mov	r0, r5
	cwpitch = CWPITCH;
 80065bc:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 80065be:	4a50      	ldr	r2, [pc, #320]	; (8006700 <main+0x968>)
	os_time = 0;
 80065c0:	4b50      	ldr	r3, [pc, #320]	; (8006704 <main+0x96c>)
	meanavg = 0.f;
 80065c2:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 80065c4:	4a50      	ldr	r2, [pc, #320]	; (8006708 <main+0x970>)
 80065c6:	4951      	ldr	r1, [pc, #324]	; (800670c <main+0x974>)
	os_time = 0;
 80065c8:	601d      	str	r5, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 80065ca:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 80065cc:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 80065d0:	4a4f      	ldr	r2, [pc, #316]	; (8006710 <main+0x978>)
	AGC_decay[Fast] = 0.9995f;
 80065d2:	4b50      	ldr	r3, [pc, #320]	; (8006714 <main+0x97c>)
	Muted   = false;
 80065d4:	7015      	strb	r5, [r2, #0]
	AMindex  = LSBindex = 1;
 80065d6:	4a50      	ldr	r2, [pc, #320]	; (8006718 <main+0x980>)
 80065d8:	8016      	strh	r6, [r2, #0]
 80065da:	4a50      	ldr	r2, [pc, #320]	; (800671c <main+0x984>)
 80065dc:	8016      	strh	r6, [r2, #0]
	USBindex = CWindex  = 1;
 80065de:	4a50      	ldr	r2, [pc, #320]	; (8006720 <main+0x988>)
 80065e0:	8016      	strh	r6, [r2, #0]
 80065e2:	4a50      	ldr	r2, [pc, #320]	; (8006724 <main+0x98c>)
 80065e4:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 80065e6:	4a50      	ldr	r2, [pc, #320]	; (8006728 <main+0x990>)
 80065e8:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 80065ea:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 80065ee:	4a4f      	ldr	r2, [pc, #316]	; (800672c <main+0x994>)
 80065f0:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 80065f2:	4a4f      	ldr	r2, [pc, #316]	; (8006730 <main+0x998>)
 80065f4:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80065f6:	4a4f      	ldr	r2, [pc, #316]	; (8006734 <main+0x99c>)
 80065f8:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 80065fa:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <main+0x9a0>)
 80065fc:	4a4f      	ldr	r2, [pc, #316]	; (800673c <main+0x9a4>)
 80065fe:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8006600:	4b4f      	ldr	r3, [pc, #316]	; (8006740 <main+0x9a8>)
 8006602:	4a50      	ldr	r2, [pc, #320]	; (8006744 <main+0x9ac>)
 8006604:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8006606:	4b50      	ldr	r3, [pc, #320]	; (8006748 <main+0x9b0>)
 8006608:	4a50      	ldr	r2, [pc, #320]	; (800674c <main+0x9b4>)
 800660a:	601a      	str	r2, [r3, #0]
	SDRAudioPtr = 256;
 800660c:	f44f 7280 	mov.w	r2, #256	; 0x100
	HAdc1 = &hadc1;
 8006610:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <main+0x9b8>)
 8006612:	601c      	str	r4, [r3, #0]
	SDRAudioPtr = 256;
 8006614:	4b4f      	ldr	r3, [pc, #316]	; (8006754 <main+0x9bc>)
 8006616:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006618:	4b4f      	ldr	r3, [pc, #316]	; (8006758 <main+0x9c0>)
 800661a:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 800661c:	f7fe fed0 	bl	80053c0 <CarrierEnable>
	TXSwitch(0);
 8006620:	4628      	mov	r0, r5
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006622:	f44f 6500 	mov.w	r5, #2048	; 0x800
	TXSwitch(0);
 8006626:	f7fe fe63 	bl	80052f0 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 800662a:	4b4c      	ldr	r3, [pc, #304]	; (800675c <main+0x9c4>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 800662c:	221a      	movs	r2, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800662e:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006632:	494b      	ldr	r1, [pc, #300]	; (8006760 <main+0x9c8>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006634:	9203      	str	r2, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006636:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 800663a:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800663c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006764 <main+0x9cc>
	__HAL_RCC_PLL2_DISABLE();
 8006640:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8006644:	4848      	ldr	r0, [pc, #288]	; (8006768 <main+0x9d0>)
	__HAL_RCC_PLL2_DISABLE();
 8006646:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800664e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006652:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80066c0 <main+0x928>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
 8006658:	9a03      	ldr	r2, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800665a:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800665e:	3a01      	subs	r2, #1
 8006660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006664:	4311      	orrs	r1, r2
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006666:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800666a:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800666c:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800666e:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8006672:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006676:	601a      	str	r2, [r3, #0]
	CWThreshold = 0.01;
 8006678:	4a3c      	ldr	r2, [pc, #240]	; (800676c <main+0x9d4>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <main+0x9d8>)
	CWThreshold = 0.01;
 800667c:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800667e:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006682:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8006686:	f7fc fc61 	bl	8002f4c <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800668a:	493a      	ldr	r1, [pc, #232]	; (8006774 <main+0x9dc>)
 800668c:	2204      	movs	r2, #4
 800668e:	4f3a      	ldr	r7, [pc, #232]	; (8006778 <main+0x9e0>)
 8006690:	4b3a      	ldr	r3, [pc, #232]	; (800677c <main+0x9e4>)
 8006692:	483b      	ldr	r0, [pc, #236]	; (8006780 <main+0x9e8>)
 8006694:	e9cd 1500 	strd	r1, r5, [sp]
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	f7fa ff05 	bl	80014a8 <arm_fir_decimate_init_f32>
 800669e:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80066a0:	b100      	cbz	r0, 80066a4 <main+0x90c>
 80066a2:	e7fe      	b.n	80066a2 <main+0x90a>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80066a4:	4a37      	ldr	r2, [pc, #220]	; (8006784 <main+0x9ec>)
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	4b34      	ldr	r3, [pc, #208]	; (800677c <main+0x9e4>)
 80066aa:	4837      	ldr	r0, [pc, #220]	; (8006788 <main+0x9f0>)
 80066ac:	e9cd 2500 	strd	r2, r5, [sp]
 80066b0:	2204      	movs	r2, #4
 80066b2:	f7fa fef9 	bl	80014a8 <arm_fir_decimate_init_f32>
 80066b6:	4604      	mov	r4, r0
 80066b8:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d068      	beq.n	8006790 <main+0x9f8>
 80066be:	e7fe      	b.n	80066be <main+0x926>
 80066c0:	8f04fefd 	.word	0x8f04fefd
 80066c4:	3feffff9 	.word	0x3feffff9
 80066c8:	2400a58c 	.word	0x2400a58c
 80066cc:	2400a3e8 	.word	0x2400a3e8
 80066d0:	58026000 	.word	0x58026000
 80066d4:	cb840000 	.word	0xcb840000
 80066d8:	cfb80000 	.word	0xcfb80000
 80066dc:	e000ed00 	.word	0xe000ed00
 80066e0:	2400a320 	.word	0x2400a320
 80066e4:	2400a384 	.word	0x2400a384
 80066e8:	24006154 	.word	0x24006154
 80066ec:	2400ab30 	.word	0x2400ab30
 80066f0:	24006148 	.word	0x24006148
 80066f4:	3dcccccd 	.word	0x3dcccccd
 80066f8:	24007b18 	.word	0x24007b18
 80066fc:	44228000 	.word	0x44228000
 8006700:	2400acb8 	.word	0x2400acb8
 8006704:	2400afe8 	.word	0x2400afe8
 8006708:	24006144 	.word	0x24006144
 800670c:	3f7cac08 	.word	0x3f7cac08
 8006710:	2400613a 	.word	0x2400613a
 8006714:	240006a8 	.word	0x240006a8
 8006718:	24006128 	.word	0x24006128
 800671c:	240006b0 	.word	0x240006b0
 8006720:	24000ec8 	.word	0x24000ec8
 8006724:	240061cc 	.word	0x240061cc
 8006728:	24007b10 	.word	0x24007b10
 800672c:	24007b00 	.word	0x24007b00
 8006730:	3f7fdf3b 	.word	0x3f7fdf3b
 8006734:	3f7ffcb9 	.word	0x3f7ffcb9
 8006738:	24005114 	.word	0x24005114
 800673c:	001e0002 	.word	0x001e0002
 8006740:	240006b4 	.word	0x240006b4
 8006744:	3949539c 	.word	0x3949539c
 8006748:	2400afec 	.word	0x2400afec
 800674c:	3ca3d70a 	.word	0x3ca3d70a
 8006750:	24005110 	.word	0x24005110
 8006754:	2400614c 	.word	0x2400614c
 8006758:	4af42400 	.word	0x4af42400
 800675c:	58024400 	.word	0x58024400
 8006760:	01012e00 	.word	0x01012e00
 8006764:	3b800000 	.word	0x3b800000
 8006768:	24000ec4 	.word	0x24000ec4
 800676c:	3c23d70a 	.word	0x3c23d70a
 8006770:	24000ec0 	.word	0x24000ec0
 8006774:	24002fe4 	.word	0x24002fe4
 8006778:	24007b04 	.word	0x24007b04
 800677c:	24000210 	.word	0x24000210
 8006780:	24006168 	.word	0x24006168
 8006784:	24000ee8 	.word	0x24000ee8
 8006788:	2400615c 	.word	0x2400615c
 800678c:	40080000 	.word	0x40080000
	Load_Presets();
 8006790:	f7fb f944 	bl	8001a1c <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8006794:	4630      	mov	r0, r6
 8006796:	f7fb fa29 	bl	8001bec <Tune_Preset>
	keyerState = IDLE;
 800679a:	4ab1      	ldr	r2, [pc, #708]	; (8006a60 <main+0xcc8>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 800679c:	4bb1      	ldr	r3, [pc, #708]	; (8006a64 <main+0xccc>)
	keyer_speed = 15;
 800679e:	200f      	movs	r0, #15
	keyerState = IDLE;
 80067a0:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80067a2:	2210      	movs	r2, #16
 80067a4:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 80067a6:	4bb0      	ldr	r3, [pc, #704]	; (8006a68 <main+0xcd0>)
 80067a8:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 80067aa:	f7fa fe97 	bl	80014dc <loadWPM>
	keyer_mode = 1; //->  iambic
 80067ae:	4aaf      	ldr	r2, [pc, #700]	; (8006a6c <main+0xcd4>)
	txdelay = 10;
 80067b0:	200a      	movs	r0, #10
	if (!DisableDisplay)
 80067b2:	4baf      	ldr	r3, [pc, #700]	; (8006a70 <main+0xcd8>)
	keyer_mode = 1; //->  iambic
 80067b4:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80067b6:	4aaf      	ldr	r2, [pc, #700]	; (8006a74 <main+0xcdc>)
	txdelay = 10;
 80067b8:	49af      	ldr	r1, [pc, #700]	; (8006a78 <main+0xce0>)
	keyer_swap = 0; //->  DI/DAH
 80067ba:	7014      	strb	r4, [r2, #0]
	if (!DisableDisplay)
 80067bc:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 80067be:	4aaf      	ldr	r2, [pc, #700]	; (8006a7c <main+0xce4>)
	txdelay = 10;
 80067c0:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 80067c2:	6015      	str	r5, [r2, #0]
	if (!DisableDisplay)
 80067c4:	b90b      	cbnz	r3, 80067ca <main+0xa32>
 80067c6:	f7fd ff1d 	bl	8004604 <DisplayStatus.part.0>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80067ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ce:	49ac      	ldr	r1, [pc, #688]	; (8006a80 <main+0xce8>)
 80067d0:	48ac      	ldr	r0, [pc, #688]	; (8006a84 <main+0xcec>)
 80067d2:	f002 f8e5 	bl	80089a0 <HAL_ADCEx_MultiModeStart_DMA>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f040 8135 	bne.w	8006a46 <main+0xcae>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80067dc:	48aa      	ldr	r0, [pc, #680]	; (8006a88 <main+0xcf0>)
 80067de:	f006 fc7b 	bl	800d0d8 <HAL_TIM_Base_Start_IT>
 80067e2:	4604      	mov	r4, r0
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f040 812e 	bne.w	8006a46 <main+0xcae>
	HAL_TIM_Base_Start(&htim6);
 80067ea:	48a8      	ldr	r0, [pc, #672]	; (8006a8c <main+0xcf4>)
		for (n = 2; n <= 512; n++) //was 1
 80067ec:	f240 2701 	movw	r7, #513	; 0x201
	HAL_TIM_Base_Start(&htim6);
 80067f0:	f006 fc1a 	bl	800d028 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 80067f4:	48a6      	ldr	r0, [pc, #664]	; (8006a90 <main+0xcf8>)
 80067f6:	f006 fc17 	bl	800d028 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80067fa:	4621      	mov	r1, r4
 80067fc:	48a5      	ldr	r0, [pc, #660]	; (8006a94 <main+0xcfc>)
					fod = od;
 80067fe:	2601      	movs	r6, #1
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006800:	f002 fad6 	bl	8008db0 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8006804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006808:	4aa3      	ldr	r2, [pc, #652]	; (8006a98 <main+0xd00>)
 800680a:	4621      	mov	r1, r4
 800680c:	9400      	str	r4, [sp, #0]
 800680e:	48a1      	ldr	r0, [pc, #644]	; (8006a94 <main+0xcfc>)
 8006810:	f002 fb02 	bl	8008e18 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fed5 	bl	80075c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800681a:	2110      	movs	r1, #16
 800681c:	489d      	ldr	r0, [pc, #628]	; (8006a94 <main+0xcfc>)
 800681e:	f002 fac7 	bl	8008db0 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8006822:	4623      	mov	r3, r4
 8006824:	4622      	mov	r2, r4
 8006826:	2110      	movs	r1, #16
 8006828:	489a      	ldr	r0, [pc, #616]	; (8006a94 <main+0xcfc>)
 800682a:	f002 fb81 	bl	8008f30 <HAL_DAC_SetValue>
				FT8_OutF = XTalFreq * n / m / p / od;
 800682e:	4a9b      	ldr	r2, [pc, #620]	; (8006a9c <main+0xd04>)
 8006830:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	LastTXFreq = (float)TXFreq;
 8006834:	4b9a      	ldr	r3, [pc, #616]	; (8006aa0 <main+0xd08>)
				FT8_OutF = XTalFreq * n / m / p / od;
 8006836:	edd2 3a00 	vldr	s7, [r2]
						&& ((XTalFreq * n / m) > 150000000.0)
 800683a:	ed9f 3a9a 	vldr	s6, [pc, #616]	; 8006aa4 <main+0xd0c>
 800683e:	4a9a      	ldr	r2, [pc, #616]	; (8006aa8 <main+0xd10>)
						&& ((XTalFreq * n / m) < 960000000.0)) {
 8006840:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8006aac <main+0xd14>
 8006844:	f8df e268 	ldr.w	lr, [pc, #616]	; 8006ab0 <main+0xd18>
		__HAL_RCC_PLL2_DISABLE();
 8006848:	f8df c268 	ldr.w	ip, [pc, #616]	; 8006ab4 <main+0xd1c>
	volatile double TF, TXFreq, MinDiff = 999999999;
 800684c:	a580      	add	r5, pc, #512	; (adr r5, 8006a50 <main+0xcb8>)
 800684e:	e9d5 4500 	ldrd	r4, r5, [r5]
	TXFreq = FT8_FREQ;
 8006852:	a181      	add	r1, pc, #516	; (adr r1, 8006a58 <main+0xcc0>)
 8006854:	e9d1 0100 	ldrd	r0, r1, [r1]
	volatile double TF, TXFreq, MinDiff = 999999999;
 8006858:	e9cd 4554 	strd	r4, r5, [sp, #336]	; 0x150
	TXFreq = FT8_FREQ;
 800685c:	e9cd 014a 	strd	r0, r1, [sp, #296]	; 0x128
	TF = TXFreq; //TODO: check for beginning and end of subband
 8006860:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
	for (m = 2; m <= 25; m++) //was 64
 8006864:	2502      	movs	r5, #2
	TF = TXFreq; //TODO: check for beginning and end of subband
 8006866:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
	LastTXFreq = (float)TXFreq;
 800686a:	ed9d 7b4a 	vldr	d7, [sp, #296]	; 0x128
 800686e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8006872:	ed83 7a00 	vstr	s14, [r3]
				FT8_OutF = XTalFreq * n / m / p / od;
 8006876:	ee07 5a90 	vmov	s15, r5
		for (n = 2; n <= 512; n++) //was 1
 800687a:	2402      	movs	r4, #2
				FT8_OutF = XTalFreq * n / m / p / od;
 800687c:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8006880:	eec1 2a84 	vdiv.f32	s5, s3, s8
 8006884:	ee07 4a90 	vmov	s15, r4
			for (p = 2; p <= 128; p += 2) {
 8006888:	2302      	movs	r3, #2
				FT8_OutF = XTalFreq * n / m / p / od;
 800688a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800688e:	ee64 4aa3 	vmul.f32	s9, s9, s7
						&& ((XTalFreq * n / m) > 150000000.0)
 8006892:	ee64 7aa2 	vmul.f32	s15, s9, s5
 8006896:	eef4 7a43 	vcmp.f32	s15, s6
 800689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689e:	dd05      	ble.n	80068ac <main+0xb14>
 80068a0:	eef4 7ac2 	vcmpe.f32	s15, s4
 80068a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a8:	f100 8093 	bmi.w	80069d2 <main+0xc3a>
				FT8_OutF = XTalFreq * n / m / p / od;
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80068b8:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 80068bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80068c0:	ed82 7b00 	vstr	d7, [r2]
				if (((TF - FT8_OutF) < MinDiff) && ((TF - FT8_OutF) > 0)
 80068c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80068c8:	ed92 5b00 	vldr	d5, [r2]
 80068cc:	ed9d 6b54 	vldr	d6, [sp, #336]	; 0x150
 80068d0:	ee37 7b45 	vsub.f64	d7, d7, d5
 80068d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	dd03      	ble.n	80068e6 <main+0xb4e>
 80068de:	e9dd 0142 	ldrd	r0, r1, [sp, #264]	; 0x108
 80068e2:	e9d2 0100 	ldrd	r0, r1, [r2]
			for (p = 2; p <= 128; p += 2) {
 80068e6:	3302      	adds	r3, #2
 80068e8:	2b82      	cmp	r3, #130	; 0x82
 80068ea:	d1df      	bne.n	80068ac <main+0xb14>
		for (n = 2; n <= 512; n++) //was 1
 80068ec:	3401      	adds	r4, #1
 80068ee:	42bc      	cmp	r4, r7
 80068f0:	d1c8      	bne.n	8006884 <main+0xaec>
		FT8_OutF = XTalFreq * fn / fm / fp / fod;
 80068f2:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
	for (m = 2; m <= 25; m++) //was 64
 80068f6:	3501      	adds	r5, #1
		FT8_OutF = XTalFreq * fn / fm / fp / fod;
 80068f8:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
 80068fc:	ed9d 6a34 	vldr	s12, [sp, #208]	; 0xd0
 8006900:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eddd 6a3b 	vldr	s13, [sp, #236]	; 0xec
 800690c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	for (m = 2; m <= 25; m++) //was 64
 8006910:	2d1a      	cmp	r5, #26
		FT8_OutF = XTalFreq * fn / fm / fp / fod;
 8006912:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006916:	ee27 7a23 	vmul.f32	s14, s14, s7
 800691a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800691e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006922:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006926:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 800692a:	ed82 7b00 	vstr	d7, [r2]
		FT8_OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 800692e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8006930:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
 8006934:	ed9d 6a34 	vldr	s12, [sp, #208]	; 0xd0
 8006938:	f103 0301 	add.w	r3, r3, #1
 800693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006940:	eddd 6a3b 	vldr	s13, [sp, #236]	; 0xec
 8006944:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8006948:	ee07 3a10 	vmov	s14, r3
 800694c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006950:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006954:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006958:	ee27 7a23 	vmul.f32	s14, s14, s7
 800695c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006960:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006964:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8006968:	ed8e 7b00 	vstr	d7, [lr]
		__HAL_RCC_PLL2_DISABLE();
 800696c:	f8dc 3000 	ldr.w	r3, [ip]
 8006970:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006974:	f8cc 3000 	str.w	r3, [ip]
		__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the whole 3 KHz FT8 subband
 8006978:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800697c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800697e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006982:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8006986:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
 800698a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800698c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800698e:	f101 31ff 	add.w	r1, r1, #4294967295
 8006992:	f103 33ff 	add.w	r3, r3, #4294967295
 8006996:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800699a:	ea4f 2343 	mov.w	r3, r3, lsl #9
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea43 0301 	orr.w	r3, r3, r1
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
		__HAL_RCC_PLL2_ENABLE();
 80069ac:	f8dc 3000 	ldr.w	r3, [ip]
 80069b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b4:	f8cc 3000 	str.w	r3, [ip]
	for (m = 2; m <= 25; m++) //was 64
 80069b8:	f47f af5d 	bne.w	8006876 <main+0xade>
		UserInput();
 80069bc:	f7fe fe24 	bl	8005608 <UserInput>
		HAL_Delay(50);
 80069c0:	2032      	movs	r0, #50	; 0x32
 80069c2:	f000 fde7 	bl	8007594 <HAL_Delay>
		UserInput();
 80069c6:	f7fe fe1f 	bl	8005608 <UserInput>
		HAL_Delay(50);
 80069ca:	2032      	movs	r0, #50	; 0x32
 80069cc:	f000 fde2 	bl	8007594 <HAL_Delay>
	while (1)
 80069d0:	e7f4      	b.n	80069bc <main+0xc24>
				FT8_OutF = XTalFreq * n / m / p / od;
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069da:	ee67 7a84 	vmul.f32	s15, s15, s8
 80069de:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 80069e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80069e6:	ed82 7b00 	vstr	d7, [r2]
				if (((TF - FT8_OutF) < MinDiff) && ((TF - FT8_OutF) > 0)
 80069ea:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80069ee:	ed92 5b00 	vldr	d5, [r2]
 80069f2:	ed9d 6b54 	vldr	d6, [sp, #336]	; 0x150
 80069f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80069fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80069fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a02:	d518      	bpl.n	8006a36 <main+0xc9e>
 8006a04:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006a08:	ed92 6b00 	vldr	d6, [r2]
 8006a0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006a10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a18:	dd0d      	ble.n	8006a36 <main+0xc9e>
					MinDiff = fabs(FT8_OutF - TF);
 8006a1a:	ed92 7b00 	vldr	d7, [r2]
 8006a1e:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8006a22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006a26:	eeb0 7bc7 	vabs.f64	d7, d7
 8006a2a:	ed8d 7b54 	vstr	d7, [sp, #336]	; 0x150
					fp = p;
 8006a2e:	9334      	str	r3, [sp, #208]	; 0xd0
					fn = n;
 8006a30:	942e      	str	r4, [sp, #184]	; 0xb8
					fm = m;
 8006a32:	9528      	str	r5, [sp, #160]	; 0xa0
					fod = od;
 8006a34:	963b      	str	r6, [sp, #236]	; 0xec
			for (p = 2; p <= 128; p += 2) {
 8006a36:	3302      	adds	r3, #2
 8006a38:	2b82      	cmp	r3, #130	; 0x82
 8006a3a:	d1ca      	bne.n	80069d2 <main+0xc3a>
		for (n = 2; n <= 512; n++) //was 1
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	42bc      	cmp	r4, r7
 8006a40:	f47f af20 	bne.w	8006884 <main+0xaec>
 8006a44:	e755      	b.n	80068f2 <main+0xb5a>
		Error_Handler();
 8006a46:	f7fe fd19 	bl	800547c <Error_Handler>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	ff800000 	.word	0xff800000
 8006a54:	41cdcd64 	.word	0x41cdcd64
 8006a58:	00000000 	.word	0x00000000
 8006a5c:	415afc34 	.word	0x415afc34
 8006a60:	2400aca9 	.word	0x2400aca9
 8006a64:	2400aca8 	.word	0x2400aca8
 8006a68:	2400acac 	.word	0x2400acac
 8006a6c:	2400acaa 	.word	0x2400acaa
 8006a70:	24000ee4 	.word	0x24000ee4
 8006a74:	2400acb0 	.word	0x2400acb0
 8006a78:	2400c789 	.word	0x2400c789
 8006a7c:	240061b8 	.word	0x240061b8
 8006a80:	24007300 	.word	0x24007300
 8006a84:	2400a320 	.word	0x2400a320
 8006a88:	2400abc8 	.word	0x2400abc8
 8006a8c:	2400ab7c 	.word	0x2400ab7c
 8006a90:	2400aa98 	.word	0x2400aa98
 8006a94:	2400a450 	.word	0x2400a450
 8006a98:	240006c0 	.word	0x240006c0
 8006a9c:	240072d8 	.word	0x240072d8
 8006aa0:	24006134 	.word	0x24006134
 8006aa4:	4d0f0d18 	.word	0x4d0f0d18
 8006aa8:	240050e8 	.word	0x240050e8
 8006aac:	4e64e1c0 	.word	0x4e64e1c0
 8006ab0:	240050f0 	.word	0x240050f0
 8006ab4:	58024400 	.word	0x58024400

08006ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ab8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aba:	4c18      	ldr	r4, [pc, #96]	; (8006b1c <HAL_MspInit+0x64>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006abc:	2102      	movs	r1, #2
{
 8006abe:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006ac0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006ac6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aca:	430b      	orrs	r3, r1
 8006acc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006ad0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006ad4:	400b      	ands	r3, r1
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006ada:	f002 f8f1 	bl	8008cc0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	207d      	movs	r0, #125	; 0x7d
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	f002 f8ec 	bl	8008cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8006ae8:	207d      	movs	r0, #125	; 0x7d
 8006aea:	f002 f927 	bl	8008d3c <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8006aee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006af2:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8006af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006afc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006b08:	f000 fd5c 	bl	80075c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8006b0c:	f000 fd6e 	bl	80075ec <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006b10:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b12:	b002      	add	sp, #8
 8006b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006b18:	f000 bd5e 	b.w	80075d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8006b1c:	58024400 	.word	0x58024400

08006b20 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8006b20:	4956      	ldr	r1, [pc, #344]	; (8006c7c <HAL_ADC_MspInit+0x15c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b22:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8006b24:	6802      	ldr	r2, [r0, #0]
{
 8006b26:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8006b28:	428a      	cmp	r2, r1
{
 8006b2a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b2c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8006b36:	d02d      	beq.n	8006b94 <HAL_ADC_MspInit+0x74>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <HAL_ADC_MspInit+0x160>)
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d005      	beq.n	8006b4a <HAL_ADC_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8006b3e:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <HAL_ADC_MspInit+0x164>)
 8006b40:	429a      	cmp	r2, r3
 8006b42:	f000 8088 	beq.w	8006c56 <HAL_ADC_MspInit+0x136>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006b46:	b00c      	add	sp, #48	; 0x30
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006b4a:	4a4f      	ldr	r2, [pc, #316]	; (8006c88 <HAL_ADC_MspInit+0x168>)
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006b50:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006b52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006b54:	d071      	beq.n	8006c3a <HAL_ADC_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b56:	4b4d      	ldr	r3, [pc, #308]	; (8006c8c <HAL_ADC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b58:	2402      	movs	r4, #2
 8006b5a:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b5c:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b62:	484b      	ldr	r0, [pc, #300]	; (8006c90 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b64:	f042 0202 	orr.w	r2, r2, #2
 8006b68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b78:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b7c:	f003 fdb8 	bl	800a6f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006b80:	2200      	movs	r2, #0
 8006b82:	2012      	movs	r0, #18
 8006b84:	4611      	mov	r1, r2
 8006b86:	f002 f89b 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006b8a:	2012      	movs	r0, #18
 8006b8c:	f002 f8d6 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006b90:	b00c      	add	sp, #48	; 0x30
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006b94:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <HAL_ADC_MspInit+0x168>)
 8006b96:	4604      	mov	r4, r0
 8006b98:	6813      	ldr	r3, [r2, #0]
 8006b9a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006b9c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006b9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006ba0:	d03d      	beq.n	8006c1e <HAL_ADC_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba2:	4b3a      	ldr	r3, [pc, #232]	; (8006c8c <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba4:	a906      	add	r1, sp, #24
 8006ba6:	483a      	ldr	r0, [pc, #232]	; (8006c90 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8006bac:	4d39      	ldr	r5, [pc, #228]	; (8006c94 <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bae:	f042 0202 	orr.w	r2, r2, #2
 8006bb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006bb6:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006bc2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bc4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006bc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bca:	f003 fd91 	bl	800a6f0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8006bce:	4932      	ldr	r1, [pc, #200]	; (8006c98 <HAL_ADC_MspInit+0x178>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006bd0:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bd4:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bd6:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006bd8:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006be4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006be8:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bf4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8006bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bfc:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bfe:	f002 fbb1 	bl	8009364 <HAL_DMA_Init>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d137      	bne.n	8006c76 <HAL_ADC_MspInit+0x156>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006c0a:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006c0c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006c0e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006c10:	f002 f856 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006c14:	2012      	movs	r0, #18
 8006c16:	f002 f891 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006c1a:	b00c      	add	sp, #48	; 0x30
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_ADC_MspInit+0x16c>)
 8006c20:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006c24:	f042 0220 	orr.w	r2, r2, #32
 8006c28:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	e7b3      	b.n	8006ba2 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <HAL_ADC_MspInit+0x16c>)
 8006c3c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006c40:	f042 0220 	orr.w	r2, r2, #32
 8006c44:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	e77f      	b.n	8006b56 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006c56:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
 8006c5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006c5e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006c62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	9b05      	ldr	r3, [sp, #20]
}
 8006c72:	b00c      	add	sp, #48	; 0x30
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006c76:	f7fe fc01 	bl	800547c <Error_Handler>
 8006c7a:	e7c4      	b.n	8006c06 <HAL_ADC_MspInit+0xe6>
 8006c7c:	40022000 	.word	0x40022000
 8006c80:	40022100 	.word	0x40022100
 8006c84:	58026000 	.word	0x58026000
 8006c88:	2400c794 	.word	0x2400c794
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	58020400 	.word	0x58020400
 8006c94:	2400a464 	.word	0x2400a464
 8006c98:	40020010 	.word	0x40020010

08006c9c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8006c9c:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <HAL_DAC_MspInit+0xb4>)
 8006c9e:	6802      	ldr	r2, [r0, #0]
{
 8006ca0:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8006ca2:	429a      	cmp	r2, r3
{
 8006ca4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca6:	f04f 0400 	mov.w	r4, #0
 8006caa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006cae:	9404      	str	r4, [sp, #16]
 8006cb0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8006cb4:	d001      	beq.n	8006cba <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006cb6:	b008      	add	sp, #32
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006cba:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <HAL_DAC_MspInit+0xb8>)
 8006cbc:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cbe:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006cc0:	4e25      	ldr	r6, [pc, #148]	; (8006d58 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006cc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006cc6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006cca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006cce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006cd2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006cd6:	9200      	str	r2, [sp, #0]
 8006cd8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ce6:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cf2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf4:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf6:	4819      	ldr	r0, [pc, #100]	; (8006d5c <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfc:	f003 fcf8 	bl	800a6f0 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006d02:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006d04:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006d06:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d08:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006d0a:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d10:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d16:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d1c:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006d1e:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d20:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d22:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d2a:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006d2c:	f002 fb1a 	bl	8009364 <HAL_DMA_Init>
 8006d30:	b958      	cbnz	r0, 8006d4a <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006d32:	2200      	movs	r2, #0
 8006d34:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006d36:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006d38:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006d3a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006d3c:	f001 ffc0 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d40:	2036      	movs	r0, #54	; 0x36
 8006d42:	f001 fffb 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006d46:	b008      	add	sp, #32
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006d4a:	f7fe fb97 	bl	800547c <Error_Handler>
 8006d4e:	e7f0      	b.n	8006d32 <HAL_DAC_MspInit+0x96>
 8006d50:	40007400 	.word	0x40007400
 8006d54:	58024400 	.word	0x58024400
 8006d58:	2400a4dc 	.word	0x2400a4dc
 8006d5c:	58020000 	.word	0x58020000
 8006d60:	40020028 	.word	0x40020028
 8006d64:	00000000 	.word	0x00000000

08006d68 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8006d68:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d6a:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8006d6c:	6801      	ldr	r1, [r0, #0]
{
 8006d6e:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8006d70:	4291      	cmp	r1, r2
{
 8006d72:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d74:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006d7c:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8006d7e:	d001      	beq.n	8006d84 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8006d80:	b008      	add	sp, #32
 8006d82:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8006d84:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8006d86:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d88:	a902      	add	r1, sp, #8
 8006d8a:	4815      	ldr	r0, [pc, #84]	; (8006de0 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8006d8c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d94:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006d98:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006d9c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006da0:	9200      	str	r2, [sp, #0]
 8006da2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006da8:	f042 0202 	orr.w	r2, r2, #2
 8006dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8006db4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006dba:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8006dd0 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006dc2:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc6:	f003 fc93 	bl	800a6f0 <HAL_GPIO_Init>
}
 8006dca:	b008      	add	sp, #32
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	00000400 	.word	0x00000400
 8006dd4:	00000002 	.word	0x00000002
 8006dd8:	58002400 	.word	0x58002400
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	58020400 	.word	0x58020400
 8006de4:	00000000 	.word	0x00000000

08006de8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8006de8:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dea:	2200      	movs	r2, #0
{
 8006dec:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8006df2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df4:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8006df8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8006dfc:	920a      	str	r2, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM2)
 8006dfe:	d01f      	beq.n	8006e40 <HAL_TIM_Base_MspInit+0x58>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006e00:	4939      	ldr	r1, [pc, #228]	; (8006ee8 <HAL_TIM_Base_MspInit+0x100>)
 8006e02:	428b      	cmp	r3, r1
 8006e04:	d032      	beq.n	8006e6c <HAL_TIM_Base_MspInit+0x84>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006e06:	4939      	ldr	r1, [pc, #228]	; (8006eec <HAL_TIM_Base_MspInit+0x104>)
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	d050      	beq.n	8006eae <HAL_TIM_Base_MspInit+0xc6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006e0c:	4938      	ldr	r1, [pc, #224]	; (8006ef0 <HAL_TIM_Base_MspInit+0x108>)
 8006e0e:	428b      	cmp	r3, r1
 8006e10:	d001      	beq.n	8006e16 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006e12:	b00c      	add	sp, #48	; 0x30
 8006e14:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006e16:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8006e18:	2037      	movs	r0, #55	; 0x37
 8006e1a:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006e1c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006e20:	f044 0420 	orr.w	r4, r4, #32
 8006e24:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	9305      	str	r3, [sp, #20]
 8006e32:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8006e34:	f001 ff44 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006e38:	2037      	movs	r0, #55	; 0x37
 8006e3a:	f001 ff7f 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006e3e:	e7e8      	b.n	8006e12 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e40:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006e42:	2104      	movs	r1, #4
 8006e44:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e46:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006e4a:	f044 0401 	orr.w	r4, r4, #1
 8006e4e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006e5e:	f001 ff2f 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e62:	201c      	movs	r0, #28
 8006e64:	f001 ff6a 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006e68:	b00c      	add	sp, #48	; 0x30
 8006e6a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e6c:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <HAL_TIM_Base_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e6e:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e70:	a906      	add	r1, sp, #24
 8006e72:	4821      	ldr	r0, [pc, #132]	; (8006ef8 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e74:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006e78:	4322      	orrs	r2, r4
 8006e7a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006e7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006e82:	4022      	ands	r2, r4
 8006e84:	9202      	str	r2, [sp, #8]
 8006e86:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006e8c:	4322      	orrs	r2, r4
 8006e8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e96:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e98:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006e9a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006ee0 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006ea2:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ea6:	f003 fc23 	bl	800a6f0 <HAL_GPIO_Init>
}
 8006eaa:	b00c      	add	sp, #48	; 0x30
 8006eac:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <HAL_TIM_Base_MspInit+0x10c>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006eb4:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006eb8:	f044 0410 	orr.w	r4, r4, #16
 8006ebc:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006ecc:	f001 fef8 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006ed0:	2036      	movs	r0, #54	; 0x36
 8006ed2:	f001 ff33 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8006ed6:	b00c      	add	sp, #48	; 0x30
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	00000010 	.word	0x00000010
 8006ee4:	00000002 	.word	0x00000002
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40001000 	.word	0x40001000
 8006ef0:	40001400 	.word	0x40001400
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	58020400 	.word	0x58020400
 8006efc:	00000000 	.word	0x00000000

08006f00 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8006f00:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f02:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8006f04:	6801      	ldr	r1, [r0, #0]
{
 8006f06:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8006f08:	4291      	cmp	r1, r2
{
 8006f0a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006f14:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8006f16:	d002      	beq.n	8006f1e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006f18:	b009      	add	sp, #36	; 0x24
 8006f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f1e:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f20:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f22:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f24:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006f28:	f042 0204 	orr.w	r2, r2, #4
 8006f2c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006f30:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006f34:	f002 0204 	and.w	r2, r2, #4
 8006f38:	9200      	str	r2, [sp, #0]
 8006f3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006f40:	f042 0208 	orr.w	r2, r2, #8
 8006f44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f48:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f4e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f50:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f54:	480a      	ldr	r0, [pc, #40]	; (8006f80 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f56:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006f5c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8006f70 <HAL_TIM_Encoder_MspInit+0x70>
 8006f60:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f64:	f003 fbc4 	bl	800a6f0 <HAL_GPIO_Init>
}
 8006f68:	b009      	add	sp, #36	; 0x24
 8006f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f6e:	bf00      	nop
 8006f70:	00003000 	.word	0x00003000
 8006f74:	00000002 	.word	0x00000002
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	58020c00 	.word	0x58020c00

08006f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f84:	b5d0      	push	{r4, r6, r7, lr}
 8006f86:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f88:	2100      	movs	r1, #0
{
 8006f8a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f8c:	22c0      	movs	r2, #192	; 0xc0
 8006f8e:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	9108      	str	r1, [sp, #32]
 8006f92:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006f96:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f9a:	f00c f820 	bl	8012fde <memset>
  if(huart->Instance==USART3)
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <HAL_UART_MspInit+0xd4>)
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d001      	beq.n	8006faa <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006fa6:	b03a      	add	sp, #232	; 0xe8
 8006fa8:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006faa:	2202      	movs	r2, #2
 8006fac:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fae:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006fb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fb4:	f004 fd9c 	bl	800baf0 <HAL_RCCEx_PeriphCLKConfig>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d149      	bne.n	8007050 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006fbc:	4b27      	ldr	r3, [pc, #156]	; (800705c <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006fbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006fc2:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006fc4:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8006fc6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006fca:	2600      	movs	r6, #0
 8006fcc:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006fce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006fd2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006fd6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006fda:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fe6:	f042 0202 	orr.w	r2, r2, #2
 8006fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006fee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006ff2:	f002 0202 	and.w	r2, r2, #2
 8006ff6:	9202      	str	r2, [sp, #8]
 8006ff8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006ffe:	f042 0208 	orr.w	r2, r2, #8
 8007002:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800700a:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800700c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007010:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007014:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007016:	a904      	add	r1, sp, #16
 8007018:	4811      	ldr	r0, [pc, #68]	; (8007060 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800701a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800701c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007020:	f003 fb66 	bl	800a6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007024:	2302      	movs	r3, #2
 8007026:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800702a:	a904      	add	r1, sp, #16
 800702c:	480d      	ldr	r0, [pc, #52]	; (8007064 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800702e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007030:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007034:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007038:	f003 fb5a 	bl	800a6f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800703c:	2200      	movs	r2, #0
 800703e:	2101      	movs	r1, #1
 8007040:	2027      	movs	r0, #39	; 0x27
 8007042:	f001 fe3d 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007046:	2027      	movs	r0, #39	; 0x27
 8007048:	f001 fe78 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 800704c:	b03a      	add	sp, #232	; 0xe8
 800704e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8007050:	f7fe fa14 	bl	800547c <Error_Handler>
 8007054:	e7b2      	b.n	8006fbc <HAL_UART_MspInit+0x38>
 8007056:	bf00      	nop
 8007058:	40004800 	.word	0x40004800
 800705c:	58024400 	.word	0x58024400
 8007060:	58020400 	.word	0x58020400
 8007064:	58020c00 	.word	0x58020c00

08007068 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007068:	b510      	push	{r4, lr}
 800706a:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800706c:	2100      	movs	r1, #0
{
 800706e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007070:	22c0      	movs	r2, #192	; 0xc0
 8007072:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007074:	9106      	str	r1, [sp, #24]
 8007076:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800707a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800707e:	f00b ffae 	bl	8012fde <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8007082:	4b27      	ldr	r3, [pc, #156]	; (8007120 <HAL_PCD_MspInit+0xb8>)
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d001      	beq.n	800708e <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800708a:	b038      	add	sp, #224	; 0xe0
 800708c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800708e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007110 <HAL_PCD_MspInit+0xa8>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007092:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007096:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007098:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800709c:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800709e:	f004 fd27 	bl	800baf0 <HAL_RCCEx_PeriphCLKConfig>
 80070a2:	bb90      	cbnz	r0, 800710a <HAL_PCD_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070a4:	4c1f      	ldr	r4, [pc, #124]	; (8007124 <HAL_PCD_MspInit+0xbc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 80070a6:	f003 fdc1 	bl	800ac2c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80070aa:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070b2:	481d      	ldr	r0, [pc, #116]	; (8007128 <HAL_PCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80070bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80070c0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070c2:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007118 <HAL_PCD_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070d0:	2300      	movs	r3, #0
 80070d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070da:	f003 fb09 	bl	800a6f0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070de:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070ea:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070ec:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80070f0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070fc:	f001 fde0 	bl	8008cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007100:	2065      	movs	r0, #101	; 0x65
 8007102:	f001 fe1b 	bl	8008d3c <HAL_NVIC_EnableIRQ>
}
 8007106:	b038      	add	sp, #224	; 0xe0
 8007108:	bd10      	pop	{r4, pc}
      Error_Handler();
 800710a:	f7fe f9b7 	bl	800547c <Error_Handler>
 800710e:	e7c9      	b.n	80070a4 <HAL_PCD_MspInit+0x3c>
 8007110:	00040000 	.word	0x00040000
 8007114:	00000000 	.word	0x00000000
 8007118:	00001800 	.word	0x00001800
 800711c:	00000002 	.word	0x00000002
 8007120:	40080000 	.word	0x40080000
 8007124:	58024400 	.word	0x58024400
 8007128:	58020000 	.word	0x58020000

0800712c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007130:	e7fe      	b.n	8007130 <HardFault_Handler>
 8007132:	bf00      	nop

08007134 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007134:	e7fe      	b.n	8007134 <MemManage_Handler>
 8007136:	bf00      	nop

08007138 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007138:	e7fe      	b.n	8007138 <BusFault_Handler>
 800713a:	bf00      	nop

0800713c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800713c:	e7fe      	b.n	800713c <UsageFault_Handler>
 800713e:	bf00      	nop

08007140 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8007140:	f000 b9be 	b.w	80074c0 <ADC3_IRQHandler>

08007144 <DebugMon_Handler>:
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop

08007148 <PendSV_Handler>:
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop

0800714c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800714c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800714e:	f000 fa0f 	bl	8007570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <SysTick_Handler+0x3c>)
 8007154:	490d      	ldr	r1, [pc, #52]	; (800718c <SysTick_Handler+0x40>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a0d      	ldr	r2, [pc, #52]	; (8007190 <SysTick_Handler+0x44>)
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8007162:	d310      	bcc.n	8007186 <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 8007164:	490b      	ldr	r1, [pc, #44]	; (8007194 <SysTick_Handler+0x48>)
 8007166:	4a0c      	ldr	r2, [pc, #48]	; (8007198 <SysTick_Handler+0x4c>)
 8007168:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800716a:	480c      	ldr	r0, [pc, #48]	; (800719c <SysTick_Handler+0x50>)
		SystemSeconds++;
 800716c:	3301      	adds	r3, #1
 800716e:	fb03 f202 	mul.w	r2, r3, r2
 8007172:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8007174:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 8007178:	d305      	bcc.n	8007186 <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 800717a:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 800717c:	2000      	movs	r0, #0
			SystemMinutes++;
 800717e:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 8007180:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 8007182:	3301      	adds	r3, #1
 8007184:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8007186:	bd08      	pop	{r3, pc}
 8007188:	2400c7dc 	.word	0x2400c7dc
 800718c:	26e978d5 	.word	0x26e978d5
 8007190:	00418937 	.word	0x00418937
 8007194:	240061a4 	.word	0x240061a4
 8007198:	eeeeeeef 	.word	0xeeeeeeef
 800719c:	04444444 	.word	0x04444444
 80071a0:	240061a0 	.word	0x240061a0

080071a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80071a4:	b508      	push	{r3, lr}

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80071a6:	2100      	movs	r1, #0
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	f009 f8e2 	bl	8010374 <tud_task_ext>
  /* USER CODE BEGIN EXTI0_IRQn 0 */

		tud_task();
		audio_task();
 80071b0:	f7fd fce4 	bl	8004b7c <audio_task>
		//		MainLoopCounter++;  //used with debugger to check frequency of main loop
		cdc_task();
 80071b4:	f7fd fce0 	bl	8004b78 <cdc_task>
//		__HAL_GPIO_EXTI_CLEAR_IT(TinyUSB_Pin);
//		return;

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TinyUSB_Pin);
 80071b8:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80071ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(TinyUSB_Pin);
 80071be:	f003 bbd3 	b.w	800a968 <HAL_GPIO_EXTI_IRQHandler>
 80071c2:	bf00      	nop

080071c4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <DMA1_Stream0_IRQHandler+0x8>)
 80071c6:	f002 bf45 	b.w	800a054 <HAL_DMA_IRQHandler>
 80071ca:	bf00      	nop
 80071cc:	2400a464 	.word	0x2400a464

080071d0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <DMA1_Stream1_IRQHandler+0x8>)
 80071d2:	f002 bf3f 	b.w	800a054 <HAL_DMA_IRQHandler>
 80071d6:	bf00      	nop
 80071d8:	2400a4dc 	.word	0x2400a4dc

080071dc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80071dc:	4804      	ldr	r0, [pc, #16]	; (80071f0 <ADC_IRQHandler+0x14>)
{
 80071de:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 80071e0:	f000 faae 	bl	8007740 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80071e4:	4803      	ldr	r0, [pc, #12]	; (80071f4 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80071e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80071ea:	f000 baa9 	b.w	8007740 <HAL_ADC_IRQHandler>
 80071ee:	bf00      	nop
 80071f0:	2400a320 	.word	0x2400a320
 80071f4:	2400a384 	.word	0x2400a384

080071f8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <TIM2_IRQHandler+0x8>)
 80071fa:	f006 bb77 	b.w	800d8ec <HAL_TIM_IRQHandler>
 80071fe:	bf00      	nop
 8007200:	2400aa98 	.word	0x2400aa98

08007204 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <USART3_IRQHandler+0x8>)
 8007206:	f006 bc99 	b.w	800db3c <HAL_UART_IRQHandler>
 800720a:	bf00      	nop
 800720c:	2400ac14 	.word	0x2400ac14

08007210 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8007210:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007214:	f003 bba8 	b.w	800a968 <HAL_GPIO_EXTI_IRQHandler>

08007218 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8007218:	4804      	ldr	r0, [pc, #16]	; (800722c <TIM6_DAC_IRQHandler+0x14>)
{
 800721a:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 800721c:	f001 febe 	bl	8008f9c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8007220:	4803      	ldr	r0, [pc, #12]	; (8007230 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8007226:	f006 bb61 	b.w	800d8ec <HAL_TIM_IRQHandler>
 800722a:	bf00      	nop
 800722c:	2400a450 	.word	0x2400a450
 8007230:	2400ab7c 	.word	0x2400ab7c

08007234 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <TIM7_IRQHandler+0x8>)
 8007236:	f006 bb59 	b.w	800d8ec <HAL_TIM_IRQHandler>
 800723a:	bf00      	nop
 800723c:	2400abc8 	.word	0x2400abc8

08007240 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8007242:	2000      	movs	r0, #0
 8007244:	f00a fc48 	bl	8011ad8 <dcd_int_handler>
	__HAL_GPIO_EXTI_GENERATE_SWIT(GPIO_PIN_0);  // Triggers a lower priority ISR
 8007248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800724c:	6893      	ldr	r3, [r2, #8]
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6093      	str	r3, [r2, #8]
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007254:	bd08      	pop	{r3, pc}
 8007256:	bf00      	nop

08007258 <HSEM1_IRQHandler>:
void HSEM1_IRQHandler(void)
{
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007258:	f003 bb96 	b.w	800a988 <HAL_HSEM_IRQHandler>

0800725c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800725c:	2001      	movs	r0, #1
 800725e:	4770      	bx	lr

08007260 <_kill>:

int _kill(int pid, int sig)
{
 8007260:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007262:	f00b ff7b 	bl	801315c <__errno>
 8007266:	2216      	movs	r2, #22
 8007268:	4603      	mov	r3, r0
	return -1;
}
 800726a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800726e:	601a      	str	r2, [r3, #0]
}
 8007270:	bd08      	pop	{r3, pc}
 8007272:	bf00      	nop

08007274 <_exit>:

void _exit (int status)
{
 8007274:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007276:	f00b ff71 	bl	801315c <__errno>
 800727a:	2316      	movs	r3, #22
 800727c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800727e:	e7fe      	b.n	800727e <_exit+0xa>

08007280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007280:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007282:	1e16      	subs	r6, r2, #0
 8007284:	dd07      	ble.n	8007296 <_read+0x16>
 8007286:	460c      	mov	r4, r1
 8007288:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800728a:	f3af 8000 	nop.w
 800728e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007292:	42a5      	cmp	r5, r4
 8007294:	d1f9      	bne.n	800728a <_read+0xa>
	}

return len;
}
 8007296:	4630      	mov	r0, r6
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	bf00      	nop

0800729c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800729c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800729e:	1e16      	subs	r6, r2, #0
 80072a0:	dd07      	ble.n	80072b2 <_write+0x16>
 80072a2:	460c      	mov	r4, r1
 80072a4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80072a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80072aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ae:	42ac      	cmp	r4, r5
 80072b0:	d1f9      	bne.n	80072a6 <_write+0xa>
	}
	return len;
}
 80072b2:	4630      	mov	r0, r6
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
 80072b6:	bf00      	nop

080072b8 <_close>:

int _close(int file)
{
	return -1;
}
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop

080072c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80072c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80072c4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80072c6:	604b      	str	r3, [r1, #4]
}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop

080072cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80072cc:	2001      	movs	r0, #1
 80072ce:	4770      	bx	lr

080072d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80072d0:	2000      	movs	r0, #0
 80072d2:	4770      	bx	lr

080072d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072d4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072d6:	4c0d      	ldr	r4, [pc, #52]	; (800730c <_sbrk+0x38>)
{
 80072d8:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072da:	490d      	ldr	r1, [pc, #52]	; (8007310 <_sbrk+0x3c>)
 80072dc:	4d0d      	ldr	r5, [pc, #52]	; (8007314 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80072de:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072e0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80072e2:	b12a      	cbz	r2, 80072f0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072e4:	4413      	add	r3, r2
 80072e6:	428b      	cmp	r3, r1
 80072e8:	d808      	bhi.n	80072fc <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80072ea:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80072ec:	6023      	str	r3, [r4, #0]
}
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <_sbrk+0x44>)
 80072f2:	4602      	mov	r2, r0
 80072f4:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80072f6:	4413      	add	r3, r2
 80072f8:	428b      	cmp	r3, r1
 80072fa:	d9f6      	bls.n	80072ea <_sbrk+0x16>
    errno = ENOMEM;
 80072fc:	f00b ff2e 	bl	801315c <__errno>
 8007300:	230c      	movs	r3, #12
    return (void *)-1;
 8007302:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8007306:	6003      	str	r3, [r0, #0]
}
 8007308:	4610      	mov	r0, r2
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	2400c798 	.word	0x2400c798
 8007310:	24080000 	.word	0x24080000
 8007314:	00000620 	.word	0x00000620
 8007318:	2400d678 	.word	0x2400d678

0800731c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800731c:	4929      	ldr	r1, [pc, #164]	; (80073c4 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800731e:	4a2a      	ldr	r2, [pc, #168]	; (80073c8 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007320:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8007328:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	2b06      	cmp	r3, #6
 8007336:	d805      	bhi.n	8007344 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007338:	6813      	ldr	r3, [r2, #0]
 800733a:	f023 030f 	bic.w	r3, r3, #15
 800733e:	f043 0307 	orr.w	r3, r3, #7
 8007342:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007344:	4b21      	ldr	r3, [pc, #132]	; (80073cc <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007346:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 800734a:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800734c:	481e      	ldr	r0, [pc, #120]	; (80073c8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800734e:	f041 0101 	orr.w	r1, r1, #1
 8007352:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007354:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8007356:	6819      	ldr	r1, [r3, #0]
 8007358:	400a      	ands	r2, r1
 800735a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800735c:	6803      	ldr	r3, [r0, #0]
 800735e:	071b      	lsls	r3, r3, #28
 8007360:	d505      	bpl.n	800736e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007362:	6803      	ldr	r3, [r0, #0]
 8007364:	f023 030f 	bic.w	r3, r3, #15
 8007368:	f043 0307 	orr.w	r3, r3, #7
 800736c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <SystemInit+0xb0>)
 8007370:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007372:	4918      	ldr	r1, [pc, #96]	; (80073d4 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8007374:	4c18      	ldr	r4, [pc, #96]	; (80073d8 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8007376:	4819      	ldr	r0, [pc, #100]	; (80073dc <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8007378:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800737a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800737c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800737e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8007380:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8007382:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007386:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800738a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800738c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800738e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007390:	4c13      	ldr	r4, [pc, #76]	; (80073e0 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8007392:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007396:	4913      	ldr	r1, [pc, #76]	; (80073e4 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8007398:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800739a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	4019      	ands	r1, r3
 80073a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80073a4:	d203      	bcs.n	80073ae <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <SystemInit+0xcc>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80073ae:	490f      	ldr	r1, [pc, #60]	; (80073ec <SystemInit+0xd0>)
 80073b0:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <SystemInit+0xa8>)
 80073b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80073ba:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80073bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073c0:	609a      	str	r2, [r3, #8]
}
 80073c2:	4770      	bx	lr
 80073c4:	e000ed00 	.word	0xe000ed00
 80073c8:	52002000 	.word	0x52002000
 80073cc:	58024400 	.word	0x58024400
 80073d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80073d4:	01010280 	.word	0x01010280
 80073d8:	02020200 	.word	0x02020200
 80073dc:	01ff0000 	.word	0x01ff0000
 80073e0:	5c001000 	.word	0x5c001000
 80073e4:	ffff0000 	.word	0xffff0000
 80073e8:	51008000 	.word	0x51008000
 80073ec:	52004000 	.word	0x52004000

080073f0 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
	return (uint8_t const *)&desc_device;
}
 80073f0:	4800      	ldr	r0, [pc, #0]	; (80073f4 <tud_descriptor_device_cb+0x4>)
 80073f2:	4770      	bx	lr
 80073f4:	080197b8 	.word	0x080197b8

080073f8 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
	(void)index; // for multiple configurations
	return desc_configuration;
}
 80073f8:	4800      	ldr	r0, [pc, #0]	; (80073fc <tud_descriptor_configuration_cb+0x4>)
 80073fa:	4770      	bx	lr
 80073fc:	08019634 	.word	0x08019634

08007400 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8007400:	b538      	push	{r3, r4, r5, lr}
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8007402:	b948      	cbnz	r0, 8007418 <tud_descriptor_string_cb+0x18>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8007404:	4a18      	ldr	r2, [pc, #96]	; (8007468 <tud_descriptor_string_cb+0x68>)
 8007406:	f44f 7341 	mov.w	r3, #772	; 0x304
 800740a:	4d18      	ldr	r5, [pc, #96]	; (800746c <tud_descriptor_string_cb+0x6c>)
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	8812      	ldrh	r2, [r2, #0]
 8007410:	806a      	strh	r2, [r5, #2]
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));

	return _desc_str;
 8007412:	4816      	ldr	r0, [pc, #88]	; (800746c <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007414:	802b      	strh	r3, [r5, #0]
}
 8007416:	bd38      	pop	{r3, r4, r5, pc}
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8007418:	2806      	cmp	r0, #6
 800741a:	d81f      	bhi.n	800745c <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 800741c:	4b12      	ldr	r3, [pc, #72]	; (8007468 <tud_descriptor_string_cb+0x68>)
 800741e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 8007422:	4620      	mov	r0, r4
 8007424:	f7f9 f80c 	bl	8000440 <strlen>
 8007428:	b2c0      	uxtb	r0, r0
		if (chr_count > 31) chr_count = 31;
 800742a:	281f      	cmp	r0, #31
 800742c:	4602      	mov	r2, r0
 800742e:	bf28      	it	cs
 8007430:	221f      	movcs	r2, #31
		for (uint8_t i = 0; i < chr_count; i++)
 8007432:	b1a8      	cbz	r0, 8007460 <tud_descriptor_string_cb+0x60>
 8007434:	4d0d      	ldr	r5, [pc, #52]	; (800746c <tud_descriptor_string_cb+0x6c>)
 8007436:	1e60      	subs	r0, r4, #1
 8007438:	2300      	movs	r3, #0
 800743a:	4629      	mov	r1, r5
			_desc_str[1 + i] = str[i];
 800743c:	3301      	adds	r3, #1
 800743e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f821 4f02 	strh.w	r4, [r1, #2]!
		for (uint8_t i = 0; i < chr_count; i++)
 8007448:	429a      	cmp	r2, r3
 800744a:	d8f7      	bhi.n	800743c <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 800744c:	1c53      	adds	r3, r2, #1
	return _desc_str;
 800744e:	4807      	ldr	r0, [pc, #28]	; (800746c <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007450:	b2db      	uxtb	r3, r3
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007458:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 800745a:	e7dc      	b.n	8007416 <tud_descriptor_string_cb+0x16>
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 800745c:	2000      	movs	r0, #0
}
 800745e:	bd38      	pop	{r3, r4, r5, pc}
		for (uint8_t i = 0; i < chr_count; i++)
 8007460:	f240 3302 	movw	r3, #770	; 0x302
 8007464:	4d01      	ldr	r5, [pc, #4]	; (800746c <tud_descriptor_string_cb+0x6c>)
 8007466:	e7d4      	b.n	8007412 <tud_descriptor_string_cb+0x12>
 8007468:	2400031c 	.word	0x2400031c
 800746c:	2400c79c 	.word	0x2400c79c

08007470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007474:	f7ff ff52 	bl	800731c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007478:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800747a:	e003      	b.n	8007484 <LoopCopyDataInit>

0800747c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800747c:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800747e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007480:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007482:	3104      	adds	r1, #4

08007484 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007484:	480a      	ldr	r0, [pc, #40]	; (80074b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8007488:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800748a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800748c:	d3f6      	bcc.n	800747c <CopyDataInit>
  ldr  r2, =_sbss
 800748e:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8007490:	e002      	b.n	8007498 <LoopFillZerobss>

08007492 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007492:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007494:	f842 3b04 	str.w	r3, [r2], #4

08007498 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007498:	4b08      	ldr	r3, [pc, #32]	; (80074bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800749a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800749c:	d3f9      	bcc.n	8007492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800749e:	f00b fe63 	bl	8013168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074a2:	f7fe fc79 	bl	8005d98 <main>
  bx  lr    
 80074a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80074a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80074ac:	0801af78 	.word	0x0801af78
  ldr  r0, =_sdata
 80074b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80074b4:	2400051c 	.word	0x2400051c
  ldr  r2, =_sbss
 80074b8:	24000520 	.word	0x24000520
  ldr  r3, = _ebss
 80074bc:	2400d674 	.word	0x2400d674

080074c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074c0:	e7fe      	b.n	80074c0 <ADC3_IRQHandler>
	...

080074c4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <HAL_InitTick+0x40>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	b90b      	cbnz	r3, 80074ce <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80074ca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80074cc:	4770      	bx	lr
{
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80074d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074d6:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <HAL_InitTick+0x44>)
 80074d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80074dc:	6810      	ldr	r0, [r2, #0]
 80074de:	fbb0 f0f3 	udiv	r0, r0, r3
 80074e2:	f001 fc39 	bl	8008d58 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074e6:	2c0f      	cmp	r4, #15
 80074e8:	d800      	bhi.n	80074ec <HAL_InitTick+0x28>
 80074ea:	b108      	cbz	r0, 80074f0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80074ec:	2001      	movs	r0, #1
}
 80074ee:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074f0:	2200      	movs	r2, #0
 80074f2:	4621      	mov	r1, r4
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	f001 fbe2 	bl	8008cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074fc:	4b03      	ldr	r3, [pc, #12]	; (800750c <HAL_InitTick+0x48>)
 80074fe:	2000      	movs	r0, #0
 8007500:	601c      	str	r4, [r3, #0]
}
 8007502:	bd10      	pop	{r4, pc}
 8007504:	24000338 	.word	0x24000338
 8007508:	24000314 	.word	0x24000314
 800750c:	2400033c 	.word	0x2400033c

08007510 <HAL_Init>:
{
 8007510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007512:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007514:	4c12      	ldr	r4, [pc, #72]	; (8007560 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007516:	f001 fbc1 	bl	8008c9c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800751a:	f003 ff5b 	bl	800b3d4 <HAL_RCC_GetSysClockFreq>
 800751e:	4b11      	ldr	r3, [pc, #68]	; (8007564 <HAL_Init+0x54>)
 8007520:	4911      	ldr	r1, [pc, #68]	; (8007568 <HAL_Init+0x58>)
 8007522:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007524:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007526:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800752a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800752e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007530:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007532:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8007536:	490d      	ldr	r1, [pc, #52]	; (800756c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007538:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800753c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800753e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8007542:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007544:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007546:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007548:	f7ff ffbc 	bl	80074c4 <HAL_InitTick>
 800754c:	b110      	cbz	r0, 8007554 <HAL_Init+0x44>
    return HAL_ERROR;
 800754e:	2401      	movs	r4, #1
}
 8007550:	4620      	mov	r0, r4
 8007552:	bd10      	pop	{r4, pc}
 8007554:	4604      	mov	r4, r0
  HAL_MspInit();
 8007556:	f7ff faaf 	bl	8006ab8 <HAL_MspInit>
}
 800755a:	4620      	mov	r0, r4
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	24000318 	.word	0x24000318
 8007564:	58024400 	.word	0x58024400
 8007568:	080195cc 	.word	0x080195cc
 800756c:	24000314 	.word	0x24000314

08007570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007570:	4a03      	ldr	r2, [pc, #12]	; (8007580 <HAL_IncTick+0x10>)
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <HAL_IncTick+0x14>)
 8007574:	6811      	ldr	r1, [r2, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	440b      	add	r3, r1
 800757a:	6013      	str	r3, [r2, #0]
}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	2400c7dc 	.word	0x2400c7dc
 8007584:	24000338 	.word	0x24000338

08007588 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007588:	4b01      	ldr	r3, [pc, #4]	; (8007590 <HAL_GetTick+0x8>)
 800758a:	6818      	ldr	r0, [r3, #0]
}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2400c7dc 	.word	0x2400c7dc

08007594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007598:	f7ff fff6 	bl	8007588 <HAL_GetTick>
 800759c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800759e:	1c63      	adds	r3, r4, #1
 80075a0:	d002      	beq.n	80075a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <HAL_Delay+0x20>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075a8:	f7ff ffee 	bl	8007588 <HAL_GetTick>
 80075ac:	1b43      	subs	r3, r0, r5
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	d3fa      	bcc.n	80075a8 <HAL_Delay+0x14>
  {
  }
}
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	24000338 	.word	0x24000338

080075b8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80075b8:	4b01      	ldr	r3, [pc, #4]	; (80075c0 <HAL_GetREVID+0x8>)
 80075ba:	6818      	ldr	r0, [r3, #0]
}
 80075bc:	0c00      	lsrs	r0, r0, #16
 80075be:	4770      	bx	lr
 80075c0:	5c001000 	.word	0x5c001000

080075c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80075c4:	4a03      	ldr	r2, [pc, #12]	; (80075d4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075cc:	4318      	orrs	r0, r3
 80075ce:	6010      	str	r0, [r2, #0]
}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58003c00 	.word	0x58003c00

080075d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80075d8:	4a03      	ldr	r2, [pc, #12]	; (80075e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	f023 0302 	bic.w	r3, r3, #2
 80075e0:	4318      	orrs	r0, r3
 80075e2:	6010      	str	r0, [r2, #0]
}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	58003c00 	.word	0x58003c00

080075ec <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80075ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80075ee:	4c0a      	ldr	r4, [pc, #40]	; (8007618 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075f8:	f7ff ffc6 	bl	8007588 <HAL_GetTick>
 80075fc:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80075fe:	e004      	b.n	800760a <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8007600:	f7ff ffc2 	bl	8007588 <HAL_GetTick>
 8007604:	1b40      	subs	r0, r0, r5
 8007606:	280a      	cmp	r0, #10
 8007608:	d804      	bhi.n	8007614 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	071b      	lsls	r3, r3, #28
 800760e:	d5f7      	bpl.n	8007600 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007610:	2000      	movs	r0, #0
}
 8007612:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007614:	2003      	movs	r0, #3
}
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	58003c00 	.word	0x58003c00

0800761c <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800761c:	4b3e      	ldr	r3, [pc, #248]	; (8007718 <HAL_ADC_PollForConversion+0xfc>)
 800761e:	6802      	ldr	r2, [r0, #0]
 8007620:	429a      	cmp	r2, r3
{
 8007622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	4605      	mov	r5, r0
 8007628:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800762a:	d059      	beq.n	80076e0 <HAL_ADC_PollForConversion+0xc4>
 800762c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007630:	429a      	cmp	r2, r3
 8007632:	d055      	beq.n	80076e0 <HAL_ADC_PollForConversion+0xc4>
 8007634:	4939      	ldr	r1, [pc, #228]	; (800771c <HAL_ADC_PollForConversion+0x100>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007636:	692c      	ldr	r4, [r5, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007638:	688f      	ldr	r7, [r1, #8]
 800763a:	2c08      	cmp	r4, #8
 800763c:	f007 071f 	and.w	r7, r7, #31
 8007640:	d009      	beq.n	8007656 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007642:	f240 2321 	movw	r3, #545	; 0x221
 8007646:	40fb      	lsrs	r3, r7
 8007648:	07d8      	lsls	r0, r3, #31
 800764a:	d458      	bmi.n	80076fe <HAL_ADC_PollForConversion+0xe2>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800764c:	688b      	ldr	r3, [r1, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800764e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8007652:	d157      	bne.n	8007704 <HAL_ADC_PollForConversion+0xe8>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8007654:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8007656:	f7ff ff97 	bl	8007588 <HAL_GetTick>
 800765a:	682a      	ldr	r2, [r5, #0]
 800765c:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800765e:	1c73      	adds	r3, r6, #1
 8007660:	d127      	bne.n	80076b2 <HAL_ADC_PollForConversion+0x96>
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	4223      	tst	r3, r4
 8007666:	d0fc      	beq.n	8007662 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007668:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800766a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800766e:	656b      	str	r3, [r5, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007670:	68d3      	ldr	r3, [r2, #12]
 8007672:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007676:	d10f      	bne.n	8007698 <HAL_ADC_PollForConversion+0x7c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8007678:	7d6b      	ldrb	r3, [r5, #21]
 800767a:	b96b      	cbnz	r3, 8007698 <HAL_ADC_PollForConversion+0x7c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	0718      	lsls	r0, r3, #28
 8007680:	d50a      	bpl.n	8007698 <HAL_ADC_PollForConversion+0x7c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007682:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	656b      	str	r3, [r5, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800768a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800768c:	04d9      	lsls	r1, r3, #19
 800768e:	d403      	bmi.n	8007698 <HAL_ADC_PollForConversion+0x7c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007690:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007692:	f043 0301 	orr.w	r3, r3, #1
 8007696:	656b      	str	r3, [r5, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007698:	4b21      	ldr	r3, [pc, #132]	; (8007720 <HAL_ADC_PollForConversion+0x104>)
 800769a:	429a      	cmp	r2, r3
 800769c:	d022      	beq.n	80076e4 <HAL_ADC_PollForConversion+0xc8>
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800769e:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80076a0:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80076a2:	d028      	beq.n	80076f6 <HAL_ADC_PollForConversion+0xda>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80076a4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80076a8:	d133      	bne.n	8007712 <HAL_ADC_PollForConversion+0xf6>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80076aa:	230c      	movs	r3, #12
 80076ac:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80076ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	4223      	tst	r3, r4
 80076b6:	d1d7      	bne.n	8007668 <HAL_ADC_PollForConversion+0x4c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80076b8:	f7ff ff66 	bl	8007588 <HAL_GetTick>
 80076bc:	eba0 0008 	sub.w	r0, r0, r8
 80076c0:	682a      	ldr	r2, [r5, #0]
 80076c2:	42b0      	cmp	r0, r6
 80076c4:	d801      	bhi.n	80076ca <HAL_ADC_PollForConversion+0xae>
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	d1c9      	bne.n	800765e <HAL_ADC_PollForConversion+0x42>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	4023      	ands	r3, r4
 80076ce:	d1c6      	bne.n	800765e <HAL_ADC_PollForConversion+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80076d0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
 80076d2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80076d4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80076d8:	f042 0204 	orr.w	r2, r2, #4
 80076dc:	656a      	str	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
 80076de:	e7e6      	b.n	80076ae <HAL_ADC_PollForConversion+0x92>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076e0:	4910      	ldr	r1, [pc, #64]	; (8007724 <HAL_ADC_PollForConversion+0x108>)
 80076e2:	e7a8      	b.n	8007636 <HAL_ADC_PollForConversion+0x1a>
 80076e4:	f240 2321 	movw	r3, #545	; 0x221
 80076e8:	40fb      	lsrs	r3, r7
 80076ea:	07db      	lsls	r3, r3, #31
 80076ec:	d4d7      	bmi.n	800769e <HAL_ADC_PollForConversion+0x82>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_ADC_PollForConversion+0xfc>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80076f0:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80076f2:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80076f4:	d1d6      	bne.n	80076a4 <HAL_ADC_PollForConversion+0x88>
  return HAL_OK;
 80076f6:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80076f8:	6014      	str	r4, [r2, #0]
}
 80076fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80076fe:	68d3      	ldr	r3, [r2, #12]
 8007700:	07da      	lsls	r2, r3, #31
 8007702:	d5a7      	bpl.n	8007654 <HAL_ADC_PollForConversion+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007704:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 8007706:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007708:	f043 0320 	orr.w	r3, r3, #32
 800770c:	656b      	str	r3, [r5, #84]	; 0x54
}
 800770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8007712:	2000      	movs	r0, #0
}
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	40022000 	.word	0x40022000
 800771c:	58026300 	.word	0x58026300
 8007720:	40022100 	.word	0x40022100
 8007724:	40022300 	.word	0x40022300

08007728 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007728:	6803      	ldr	r3, [r0, #0]
 800772a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop

08007730 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007730:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007732:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007734:	f7fd fada 	bl	8004cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007738:	bd08      	pop	{r3, pc}
 800773a:	bf00      	nop

0800773c <HAL_ADC_ErrorCallback>:
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop

08007740 <HAL_ADC_IRQHandler>:
{
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007742:	4a8e      	ldr	r2, [pc, #568]	; (800797c <HAL_ADC_IRQHandler+0x23c>)
{
 8007744:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007746:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007748:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800774a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800774c:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800774e:	f000 8095 	beq.w	800787c <HAL_ADC_IRQHandler+0x13c>
 8007752:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007756:	4293      	cmp	r3, r2
 8007758:	f000 8090 	beq.w	800787c <HAL_ADC_IRQHandler+0x13c>
 800775c:	4a88      	ldr	r2, [pc, #544]	; (8007980 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800775e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007760:	07a9      	lsls	r1, r5, #30
 8007762:	f007 071f 	and.w	r7, r7, #31
 8007766:	d502      	bpl.n	800776e <HAL_ADC_IRQHandler+0x2e>
 8007768:	07b2      	lsls	r2, r6, #30
 800776a:	f100 80aa 	bmi.w	80078c2 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800776e:	0769      	lsls	r1, r5, #29
 8007770:	d579      	bpl.n	8007866 <HAL_ADC_IRQHandler+0x126>
 8007772:	0772      	lsls	r2, r6, #29
 8007774:	d577      	bpl.n	8007866 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007776:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007778:	06d2      	lsls	r2, r2, #27
 800777a:	d403      	bmi.n	8007784 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800777c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800778a:	d11c      	bne.n	80077c6 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800778c:	4a7d      	ldr	r2, [pc, #500]	; (8007984 <HAL_ADC_IRQHandler+0x244>)
 800778e:	4293      	cmp	r3, r2
 8007790:	f000 80e7 	beq.w	8007962 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007794:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007796:	0490      	lsls	r0, r2, #18
 8007798:	d415      	bmi.n	80077c6 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	0711      	lsls	r1, r2, #28
 800779e:	d512      	bpl.n	80077c6 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	0752      	lsls	r2, r2, #29
 80077a4:	f100 80f2 	bmi.w	800798c <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	f022 020c 	bic.w	r2, r2, #12
 80077ae:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b6:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077ba:	04db      	lsls	r3, r3, #19
 80077bc:	d403      	bmi.n	80077c6 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80077c6:	4620      	mov	r0, r4
 80077c8:	f7fd fa72 	bl	8004cb0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	220c      	movs	r2, #12
 80077d0:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80077d2:	06a8      	lsls	r0, r5, #26
 80077d4:	d54d      	bpl.n	8007872 <HAL_ADC_IRQHandler+0x132>
 80077d6:	06b1      	lsls	r1, r6, #26
 80077d8:	d54b      	bpl.n	8007872 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80077da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80077dc:	06d1      	lsls	r1, r2, #27
 80077de:	d403      	bmi.n	80077e8 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80077e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80077e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077e6:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80077e8:	4966      	ldr	r1, [pc, #408]	; (8007984 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80077ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ec:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80077ee:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80077f0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80077f4:	d073      	beq.n	80078de <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80077f6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80077f8:	b9d2      	cbnz	r2, 8007830 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80077fa:	018a      	lsls	r2, r1, #6
 80077fc:	f100 80a9 	bmi.w	8007952 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	0650      	lsls	r0, r2, #25
 8007804:	d514      	bpl.n	8007830 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007806:	0289      	lsls	r1, r1, #10
 8007808:	d412      	bmi.n	8007830 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	0712      	lsls	r2, r2, #28
 800780e:	f100 80c8 	bmi.w	80079a2 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007818:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800781a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800781c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007820:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007822:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007824:	05d8      	lsls	r0, r3, #23
 8007826:	d403      	bmi.n	8007830 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007828:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007830:	4620      	mov	r0, r4
 8007832:	f001 f9c1 	bl	8008bb8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	2260      	movs	r2, #96	; 0x60
 800783a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800783c:	0629      	lsls	r1, r5, #24
 800783e:	d501      	bpl.n	8007844 <HAL_ADC_IRQHandler+0x104>
 8007840:	0632      	lsls	r2, r6, #24
 8007842:	d45f      	bmi.n	8007904 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007844:	05e8      	lsls	r0, r5, #23
 8007846:	d501      	bpl.n	800784c <HAL_ADC_IRQHandler+0x10c>
 8007848:	05f1      	lsls	r1, r6, #23
 800784a:	d466      	bmi.n	800791a <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800784c:	05aa      	lsls	r2, r5, #22
 800784e:	d501      	bpl.n	8007854 <HAL_ADC_IRQHandler+0x114>
 8007850:	05b0      	lsls	r0, r6, #22
 8007852:	d44b      	bmi.n	80078ec <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007854:	06e9      	lsls	r1, r5, #27
 8007856:	d501      	bpl.n	800785c <HAL_ADC_IRQHandler+0x11c>
 8007858:	06f2      	lsls	r2, r6, #27
 800785a:	d411      	bmi.n	8007880 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800785c:	056d      	lsls	r5, r5, #21
 800785e:	d501      	bpl.n	8007864 <HAL_ADC_IRQHandler+0x124>
 8007860:	0570      	lsls	r0, r6, #21
 8007862:	d466      	bmi.n	8007932 <HAL_ADC_IRQHandler+0x1f2>
}
 8007864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007866:	0728      	lsls	r0, r5, #28
 8007868:	d5b3      	bpl.n	80077d2 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800786a:	0731      	lsls	r1, r6, #28
 800786c:	d483      	bmi.n	8007776 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800786e:	06a8      	lsls	r0, r5, #26
 8007870:	d4b1      	bmi.n	80077d6 <HAL_ADC_IRQHandler+0x96>
 8007872:	066a      	lsls	r2, r5, #25
 8007874:	d5e2      	bpl.n	800783c <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007876:	0670      	lsls	r0, r6, #25
 8007878:	d5e0      	bpl.n	800783c <HAL_ADC_IRQHandler+0xfc>
 800787a:	e7ae      	b.n	80077da <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800787c:	4a42      	ldr	r2, [pc, #264]	; (8007988 <HAL_ADC_IRQHandler+0x248>)
 800787e:	e76e      	b.n	800775e <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007880:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007882:	b17a      	cbz	r2, 80078a4 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007884:	2f00      	cmp	r7, #0
 8007886:	d075      	beq.n	8007974 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007888:	4a3c      	ldr	r2, [pc, #240]	; (800797c <HAL_ADC_IRQHandler+0x23c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	f000 8087 	beq.w	800799e <HAL_ADC_IRQHandler+0x25e>
 8007890:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007894:	4293      	cmp	r3, r2
 8007896:	f000 8082 	beq.w	800799e <HAL_ADC_IRQHandler+0x25e>
 800789a:	4a39      	ldr	r2, [pc, #228]	; (8007980 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800789c:	6892      	ldr	r2, [r2, #8]
 800789e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80078a2:	d00b      	beq.n	80078bc <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80078a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 80078a6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80078a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078ac:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80078ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80078b6:	f7ff ff41 	bl	800773c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	2210      	movs	r2, #16
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e7cc      	b.n	800785c <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078c4:	06d8      	lsls	r0, r3, #27
 80078c6:	d403      	bmi.n	80078d0 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80078c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078ce:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80078d0:	4620      	mov	r0, r4
 80078d2:	f001 f979 	bl	8008bc8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	2202      	movs	r2, #2
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e747      	b.n	800776e <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80078de:	21c1      	movs	r1, #193	; 0xc1
 80078e0:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80078e2:	07c9      	lsls	r1, r1, #31
 80078e4:	d487      	bmi.n	80077f6 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80078e6:	4925      	ldr	r1, [pc, #148]	; (800797c <HAL_ADC_IRQHandler+0x23c>)
 80078e8:	68c9      	ldr	r1, [r1, #12]
 80078ea:	e785      	b.n	80077f8 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80078ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80078ee:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80078f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078f4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80078f6:	f001 f965 	bl	8008bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e7a7      	b.n	8007854 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007904:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007906:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800790c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800790e:	f7fd fa3d 	bl	8004d8c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	2280      	movs	r2, #128	; 0x80
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e794      	b.n	8007844 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800791a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800791c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800791e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007922:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007924:	f001 f94c 	bl	8008bc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e78c      	b.n	800784c <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007932:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007934:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007938:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800793a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800793e:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007940:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007942:	f042 0208 	orr.w	r2, r2, #8
 8007946:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007948:	6019      	str	r1, [r3, #0]
}
 800794a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800794e:	f001 b935 	b.w	8008bbc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007952:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007956:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800795a:	4302      	orrs	r2, r0
 800795c:	f47f af68 	bne.w	8007830 <HAL_ADC_IRQHandler+0xf0>
 8007960:	e74e      	b.n	8007800 <HAL_ADC_IRQHandler+0xc0>
 8007962:	f240 2221 	movw	r2, #545	; 0x221
 8007966:	40fa      	lsrs	r2, r7
 8007968:	07d2      	lsls	r2, r2, #31
 800796a:	f53f af13 	bmi.w	8007794 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800796e:	4a03      	ldr	r2, [pc, #12]	; (800797c <HAL_ADC_IRQHandler+0x23c>)
 8007970:	68d2      	ldr	r2, [r2, #12]
 8007972:	e710      	b.n	8007796 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	0797      	lsls	r7, r2, #30
 8007978:	d0a0      	beq.n	80078bc <HAL_ADC_IRQHandler+0x17c>
 800797a:	e793      	b.n	80078a4 <HAL_ADC_IRQHandler+0x164>
 800797c:	40022000 	.word	0x40022000
 8007980:	58026300 	.word	0x58026300
 8007984:	40022100 	.word	0x40022100
 8007988:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800798c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800798e:	f043 0310 	orr.w	r3, r3, #16
 8007992:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007994:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	65a3      	str	r3, [r4, #88]	; 0x58
 800799c:	e713      	b.n	80077c6 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800799e:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <HAL_ADC_IRQHandler+0x274>)
 80079a0:	e77c      	b.n	800789c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079a4:	f043 0310 	orr.w	r3, r3, #16
 80079a8:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80079b2:	e73d      	b.n	8007830 <HAL_ADC_IRQHandler+0xf0>
 80079b4:	40022300 	.word	0x40022300

080079b8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80079ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079bc:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80079c2:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80079c4:	d11d      	bne.n	8007a02 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80079c6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079cc:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80079ce:	680a      	ldr	r2, [r1, #0]
 80079d0:	f012 0f08 	tst.w	r2, #8
 80079d4:	68ca      	ldr	r2, [r1, #12]
 80079d6:	d01b      	beq.n	8007a10 <ADC_DMAConvCplt+0x58>
 80079d8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80079dc:	d10d      	bne.n	80079fa <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80079de:	68ca      	ldr	r2, [r1, #12]
 80079e0:	0494      	lsls	r4, r2, #18
 80079e2:	d40a      	bmi.n	80079fa <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80079ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ee:	04d1      	lsls	r1, r2, #19
 80079f0:	d403      	bmi.n	80079fa <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079f4:	f042 0201 	orr.w	r2, r2, #1
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd f958 	bl	8004cb0 <HAL_ADC_ConvCpltCallback>
}
 8007a00:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a02:	06d2      	lsls	r2, r2, #27
 8007a04:	d40a      	bmi.n	8007a1c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007a10:	0790      	lsls	r0, r2, #30
 8007a12:	d0e7      	beq.n	80079e4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd f94b 	bl	8004cb0 <HAL_ADC_ConvCpltCallback>
 8007a1a:	e7f1      	b.n	8007a00 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fe8d 	bl	800773c <HAL_ADC_ErrorCallback>
}
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a24:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007a26:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007a28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007a30:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a32:	f043 0304 	orr.w	r3, r3, #4
 8007a36:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a38:	f7ff fe80 	bl	800773c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a3c:	bd08      	pop	{r3, pc}
 8007a3e:	bf00      	nop

08007a40 <HAL_ADC_ConfigChannel>:
{
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8007a42:	2200      	movs	r2, #0
{
 8007a44:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007a46:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007a48:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8007a4c:	2a01      	cmp	r2, #1
 8007a4e:	f000 8136 	beq.w	8007cbe <HAL_ADC_ConfigChannel+0x27e>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a56:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8007a58:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a5c:	6894      	ldr	r4, [r2, #8]
 8007a5e:	0766      	lsls	r6, r4, #29
 8007a60:	f100 809a 	bmi.w	8007b98 <HAL_ADC_ConfigChannel+0x158>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007a64:	680c      	ldr	r4, [r1, #0]
 8007a66:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	f040 809d 	bne.w	8007baa <HAL_ADC_ConfigChannel+0x16a>
 8007a70:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007a74:	40a0      	lsls	r0, r4
 8007a76:	69d6      	ldr	r6, [r2, #28]
  MODIFY_REG(*preg,
 8007a78:	f04f 0e1f 	mov.w	lr, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007a7c:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007a7e:	4330      	orrs	r0, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007a80:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8007a84:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8007a86:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007a8a:	f00c 050c 	and.w	r5, ip, #12
 8007a8e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8007a92:	4084      	lsls	r4, r0
 8007a94:	fa0e fe00 	lsl.w	lr, lr, r0
 8007a98:	f85c 0005 	ldr.w	r0, [ip, r5]
 8007a9c:	ea20 000e 	bic.w	r0, r0, lr
 8007aa0:	4320      	orrs	r0, r4
 8007aa2:	f84c 0005 	str.w	r0, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007aa6:	6890      	ldr	r0, [r2, #8]
 8007aa8:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007aac:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007aae:	d159      	bne.n	8007b64 <HAL_ADC_ConfigChannel+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ab0:	0705      	lsls	r5, r0, #28
 8007ab2:	d457      	bmi.n	8007b64 <HAL_ADC_ConfigChannel+0x124>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007ab4:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ab6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8007aba:	f04f 0c07 	mov.w	ip, #7
 8007abe:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ac0:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8007ac2:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ac6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8007aca:	fa0c fc04 	lsl.w	ip, ip, r4
 8007ace:	fa07 f404 	lsl.w	r4, r7, r4
 8007ad2:	5970      	ldr	r0, [r6, r5]
 8007ad4:	ea20 000c 	bic.w	r0, r0, ip
 8007ad8:	4320      	orrs	r0, r4
 8007ada:	5170      	str	r0, [r6, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007adc:	48bd      	ldr	r0, [pc, #756]	; (8007dd4 <HAL_ADC_ConfigChannel+0x394>)
 8007ade:	6800      	ldr	r0, [r0, #0]
 8007ae0:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007ae4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007ae8:	68d0      	ldr	r0, [r2, #12]
 8007aea:	f000 80e2 	beq.w	8007cb2 <HAL_ADC_ConfigChannel+0x272>
 8007aee:	f010 0f10 	tst.w	r0, #16
 8007af2:	694d      	ldr	r5, [r1, #20]
 8007af4:	68d0      	ldr	r0, [r2, #12]
 8007af6:	f040 8102 	bne.w	8007cfe <HAL_ADC_ConfigChannel+0x2be>
 8007afa:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007afe:	0040      	lsls	r0, r0, #1
 8007b00:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007b02:	690e      	ldr	r6, [r1, #16]
 8007b04:	2e04      	cmp	r6, #4
 8007b06:	f000 80dd 	beq.w	8007cc4 <HAL_ADC_ConfigChannel+0x284>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b0a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8007b0e:	6808      	ldr	r0, [r1, #0]
 8007b10:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
 8007b14:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007b18:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
 8007b1c:	ea40 000c 	orr.w	r0, r0, ip
 8007b20:	4328      	orrs	r0, r5
 8007b22:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007b26:	7e4d      	ldrb	r5, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b28:	690e      	ldr	r6, [r1, #16]
 8007b2a:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007b2e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8007b32:	fab5 f585 	clz	r5, r5
 8007b36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007b3a:	096d      	lsrs	r5, r5, #5
 8007b3c:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 8007b40:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007b44:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007b46:	690d      	ldr	r5, [r1, #16]
 8007b48:	f1a0 0001 	sub.w	r0, r0, #1
 8007b4c:	6914      	ldr	r4, [r2, #16]
 8007b4e:	f005 051f 	and.w	r5, r5, #31
 8007b52:	fab0 f080 	clz	r0, r0
 8007b56:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8007b5a:	0940      	lsrs	r0, r0, #5
 8007b5c:	02c0      	lsls	r0, r0, #11
 8007b5e:	40a8      	lsls	r0, r5
 8007b60:	4320      	orrs	r0, r4
 8007b62:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b64:	6890      	ldr	r0, [r2, #8]
 8007b66:	07c4      	lsls	r4, r0, #31
 8007b68:	d414      	bmi.n	8007b94 <HAL_ADC_ConfigChannel+0x154>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b6a:	68ce      	ldr	r6, [r1, #12]
 8007b6c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8007b6e:	f006 0718 	and.w	r7, r6, #24
 8007b72:	4899      	ldr	r0, [pc, #612]	; (8007dd8 <HAL_ADC_ConfigChannel+0x398>)
 8007b74:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8007b78:	40f8      	lsrs	r0, r7
 8007b7a:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8007b7e:	4020      	ands	r0, r4
 8007b80:	ea25 0507 	bic.w	r5, r5, r7
 8007b84:	4328      	orrs	r0, r5
 8007b86:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b8a:	4894      	ldr	r0, [pc, #592]	; (8007ddc <HAL_ADC_ConfigChannel+0x39c>)
 8007b8c:	4286      	cmp	r6, r0
 8007b8e:	d043      	beq.n	8007c18 <HAL_ADC_ConfigChannel+0x1d8>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	db13      	blt.n	8007bbc <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b94:	2000      	movs	r0, #0
 8007b96:	e003      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b9a:	f042 0220 	orr.w	r2, r2, #32
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007ba6:	b003      	add	sp, #12
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007baa:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007bae:	b115      	cbz	r5, 8007bb6 <HAL_ADC_ConfigChannel+0x176>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8007bb0:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007bb4:	40a8      	lsls	r0, r5
 8007bb6:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007bba:	e75c      	b.n	8007a76 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007bbc:	4988      	ldr	r1, [pc, #544]	; (8007de0 <HAL_ADC_ConfigChannel+0x3a0>)
 8007bbe:	428a      	cmp	r2, r1
 8007bc0:	f000 80c1 	beq.w	8007d46 <HAL_ADC_ConfigChannel+0x306>
 8007bc4:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007bc8:	428a      	cmp	r2, r1
 8007bca:	f000 80bc 	beq.w	8007d46 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007bce:	4d85      	ldr	r5, [pc, #532]	; (8007de4 <HAL_ADC_ConfigChannel+0x3a4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bd0:	4885      	ldr	r0, [pc, #532]	; (8007de8 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007bd2:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bd4:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007bd6:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bda:	43c0      	mvns	r0, r0
 8007bdc:	f000 0001 	and.w	r0, r0, #1
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f000 80bf 	beq.w	8007d64 <HAL_ADC_ConfigChannel+0x324>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007be6:	4881      	ldr	r0, [pc, #516]	; (8007dec <HAL_ADC_ConfigChannel+0x3ac>)
 8007be8:	4284      	cmp	r4, r0
 8007bea:	f000 8107 	beq.w	8007dfc <HAL_ADC_ConfigChannel+0x3bc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007bee:	4880      	ldr	r0, [pc, #512]	; (8007df0 <HAL_ADC_ConfigChannel+0x3b0>)
 8007bf0:	4284      	cmp	r4, r0
 8007bf2:	f000 8126 	beq.w	8007e42 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007bf6:	487f      	ldr	r0, [pc, #508]	; (8007df4 <HAL_ADC_ConfigChannel+0x3b4>)
 8007bf8:	4284      	cmp	r4, r0
 8007bfa:	d1cb      	bne.n	8007b94 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
 8007bfc:	0249      	lsls	r1, r1, #9
 8007bfe:	d4c9      	bmi.n	8007b94 <HAL_ADC_ConfigChannel+0x154>
 8007c00:	4979      	ldr	r1, [pc, #484]	; (8007de8 <HAL_ADC_ConfigChannel+0x3a8>)
 8007c02:	428a      	cmp	r2, r1
 8007c04:	d1c6      	bne.n	8007b94 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c06:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007c0e:	4332      	orrs	r2, r6
 8007c10:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007c14:	60aa      	str	r2, [r5, #8]
}
 8007c16:	e7c3      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	d075      	beq.n	8007d08 <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c1c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f000 80b3 	beq.w	8007d8c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8007c26:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	f000 001f 	and.w	r0, r0, #31
 8007c30:	2809      	cmp	r0, #9
 8007c32:	f240 80ab 	bls.w	8007d8c <HAL_ADC_ConfigChannel+0x34c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c36:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	f000 8115 	beq.w	8007e6a <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
 8007c40:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c44:	3501      	adds	r5, #1
 8007c46:	06ad      	lsls	r5, r5, #26
 8007c48:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c4c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f000 8108 	beq.w	8007e66 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8007c56:	fab0 f080 	clz	r0, r0
 8007c5a:	2601      	movs	r6, #1
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f000 001f 	and.w	r0, r0, #31
 8007c62:	fa06 f000 	lsl.w	r0, r6, r0
 8007c66:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c68:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007c6c:	2c00      	cmp	r4, #0
 8007c6e:	f000 80f8 	beq.w	8007e62 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 8007c72:	fab4 f484 	clz	r4, r4
 8007c76:	2003      	movs	r0, #3
 8007c78:	f06f 061d 	mvn.w	r6, #29
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	f004 041f 	and.w	r4, r4, #31
 8007c82:	fb10 6004 	smlabb	r0, r0, r4, r6
 8007c86:	0500      	lsls	r0, r0, #20
 8007c88:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c8c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007c8e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8007c92:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007c94:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8007c96:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007c9a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8007c9e:	4087      	lsls	r7, r0
 8007ca0:	5974      	ldr	r4, [r6, r5]
 8007ca2:	ea24 0407 	bic.w	r4, r4, r7
 8007ca6:	688f      	ldr	r7, [r1, #8]
 8007ca8:	4087      	lsls	r7, r0
 8007caa:	433c      	orrs	r4, r7
 8007cac:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007cae:	680c      	ldr	r4, [r1, #0]
}
 8007cb0:	e76e      	b.n	8007b90 <HAL_ADC_ConfigChannel+0x150>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007cb2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007cb6:	694d      	ldr	r5, [r1, #20]
 8007cb8:	0040      	lsls	r0, r0, #1
 8007cba:	4085      	lsls	r5, r0
 8007cbc:	e721      	b.n	8007b02 <HAL_ADC_ConfigChannel+0xc2>
  __HAL_LOCK(hadc);
 8007cbe:	2002      	movs	r0, #2
}
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007cc4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007cc6:	680c      	ldr	r4, [r1, #0]
 8007cc8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007ccc:	06a5      	lsls	r5, r4, #26
 8007cce:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8007cd2:	d02e      	beq.n	8007d32 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007cd4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007cd6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007cda:	4285      	cmp	r5, r0
 8007cdc:	d024      	beq.n	8007d28 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007cde:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007ce0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007ce4:	4285      	cmp	r5, r0
 8007ce6:	d029      	beq.n	8007d3c <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ce8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007cea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007cee:	4285      	cmp	r5, r0
 8007cf0:	f47f af38 	bne.w	8007b64 <HAL_ADC_ConfigChannel+0x124>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007cf4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007cf6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007cfa:	66d0      	str	r0, [r2, #108]	; 0x6c
 8007cfc:	e732      	b.n	8007b64 <HAL_ADC_ConfigChannel+0x124>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007cfe:	0840      	lsrs	r0, r0, #1
 8007d00:	f000 0008 	and.w	r0, r0, #8
 8007d04:	4085      	lsls	r5, r0
 8007d06:	e6fc      	b.n	8007b02 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d08:	0ea0      	lsrs	r0, r4, #26
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f000 041f 	and.w	r4, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d10:	2c09      	cmp	r4, #9
 8007d12:	d82d      	bhi.n	8007d70 <HAL_ADC_ConfigChannel+0x330>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d14:	0685      	lsls	r5, r0, #26
 8007d16:	2001      	movs	r0, #1
 8007d18:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8007d1c:	40a0      	lsls	r0, r4
 8007d1e:	4305      	orrs	r5, r0
 8007d20:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007d24:	0500      	lsls	r0, r0, #20
 8007d26:	e7b1      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x24c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007d28:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007d2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d2e:	6650      	str	r0, [r2, #100]	; 0x64
 8007d30:	e7d5      	b.n	8007cde <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007d32:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007d34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d38:	6610      	str	r0, [r2, #96]	; 0x60
 8007d3a:	e7cb      	b.n	8007cd4 <HAL_ADC_ConfigChannel+0x294>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007d3c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007d3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d42:	6690      	str	r0, [r2, #104]	; 0x68
 8007d44:	e7d0      	b.n	8007ce8 <HAL_ADC_ConfigChannel+0x2a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d46:	4826      	ldr	r0, [pc, #152]	; (8007de0 <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007d48:	4d2b      	ldr	r5, [pc, #172]	; (8007df8 <HAL_ADC_ConfigChannel+0x3b8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d4a:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007d4e:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d50:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8007d54:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d56:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007d58:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8007d5c:	43c0      	mvns	r0, r0
 8007d5e:	f000 0001 	and.w	r0, r0, #1
 8007d62:	e73d      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x1a0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007d66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d68:	f042 0220 	orr.w	r2, r2, #32
 8007d6c:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007d6e:	e717      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d70:	0685      	lsls	r5, r0, #26
 8007d72:	2601      	movs	r6, #1
 8007d74:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007d78:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8007d7c:	fa06 f404 	lsl.w	r4, r6, r4
 8007d80:	381e      	subs	r0, #30
 8007d82:	4325      	orrs	r5, r4
 8007d84:	0500      	lsls	r0, r0, #20
 8007d86:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8007d8a:	e77f      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d8c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	d072      	beq.n	8007e7a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007d94:	fab5 f585 	clz	r5, r5
 8007d98:	3501      	adds	r5, #1
 8007d9a:	06ad      	lsls	r5, r5, #26
 8007d9c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007da0:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d066      	beq.n	8007e76 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8007da8:	fab0 f080 	clz	r0, r0
 8007dac:	2601      	movs	r6, #1
 8007dae:	3001      	adds	r0, #1
 8007db0:	f000 001f 	and.w	r0, r0, #31
 8007db4:	fa06 f000 	lsl.w	r0, r6, r0
 8007db8:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dba:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d056      	beq.n	8007e70 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
 8007dc2:	fab4 f084 	clz	r0, r4
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f000 001f 	and.w	r0, r0, #31
 8007dcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007dd0:	0500      	lsls	r0, r0, #20
 8007dd2:	e75b      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x24c>
 8007dd4:	5c001000 	.word	0x5c001000
 8007dd8:	000fffff 	.word	0x000fffff
 8007ddc:	47ff0000 	.word	0x47ff0000
 8007de0:	40022000 	.word	0x40022000
 8007de4:	58026300 	.word	0x58026300
 8007de8:	58026000 	.word	0x58026000
 8007dec:	cb840000 	.word	0xcb840000
 8007df0:	c7520000 	.word	0xc7520000
 8007df4:	cfb80000 	.word	0xcfb80000
 8007df8:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007dfc:	0208      	lsls	r0, r1, #8
 8007dfe:	f53f aec9 	bmi.w	8007b94 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e02:	491f      	ldr	r1, [pc, #124]	; (8007e80 <HAL_ADC_ConfigChannel+0x440>)
 8007e04:	428a      	cmp	r2, r1
 8007e06:	f47f aec5 	bne.w	8007b94 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <HAL_ADC_ConfigChannel+0x444>)
 8007e0c:	481e      	ldr	r0, [pc, #120]	; (8007e88 <HAL_ADC_ConfigChannel+0x448>)
 8007e0e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e10:	68a9      	ldr	r1, [r5, #8]
 8007e12:	0992      	lsrs	r2, r2, #6
 8007e14:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8007e18:	fba0 0202 	umull	r0, r2, r0, r2
 8007e1c:	4331      	orrs	r1, r6
 8007e1e:	0992      	lsrs	r2, r2, #6
 8007e20:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007e24:	3201      	adds	r2, #1
 8007e26:	60a9      	str	r1, [r5, #8]
 8007e28:	0052      	lsls	r2, r2, #1
 8007e2a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007e2c:	9a01      	ldr	r2, [sp, #4]
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	f43f aeb0 	beq.w	8007b94 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
 8007e34:	9a01      	ldr	r2, [sp, #4]
 8007e36:	3a01      	subs	r2, #1
 8007e38:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007e3a:	9a01      	ldr	r2, [sp, #4]
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1f9      	bne.n	8007e34 <HAL_ADC_ConfigChannel+0x3f4>
 8007e40:	e6a8      	b.n	8007b94 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e42:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8007e46:	f47f aea5 	bne.w	8007b94 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e4a:	490d      	ldr	r1, [pc, #52]	; (8007e80 <HAL_ADC_ConfigChannel+0x440>)
 8007e4c:	428a      	cmp	r2, r1
 8007e4e:	f47f aea1 	bne.w	8007b94 <HAL_ADC_ConfigChannel+0x154>
 8007e52:	68aa      	ldr	r2, [r5, #8]
 8007e54:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007e58:	4332      	orrs	r2, r6
 8007e5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e5e:	60aa      	str	r2, [r5, #8]
}
 8007e60:	e69e      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0x160>
 8007e62:	480a      	ldr	r0, [pc, #40]	; (8007e8c <HAL_ADC_ConfigChannel+0x44c>)
 8007e64:	e712      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x24c>
 8007e66:	2002      	movs	r0, #2
 8007e68:	e6fd      	b.n	8007c66 <HAL_ADC_ConfigChannel+0x226>
 8007e6a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8007e6e:	e6ed      	b.n	8007c4c <HAL_ADC_ConfigChannel+0x20c>
 8007e70:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007e74:	e70a      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x24c>
 8007e76:	2002      	movs	r0, #2
 8007e78:	e79e      	b.n	8007db8 <HAL_ADC_ConfigChannel+0x378>
 8007e7a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8007e7e:	e78f      	b.n	8007da0 <HAL_ADC_ConfigChannel+0x360>
 8007e80:	58026000 	.word	0x58026000
 8007e84:	24000314 	.word	0x24000314
 8007e88:	053e2d63 	.word	0x053e2d63
 8007e8c:	fe500000 	.word	0xfe500000

08007e90 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007e90:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007e94:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007e96:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8007e98:	2a01      	cmp	r2, #1
 8007e9a:	f000 80ea 	beq.w	8008072 <HAL_ADC_AnalogWDGConfig+0x1e2>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e9e:	681a      	ldr	r2, [r3, #0]
{
 8007ea0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8007ea2:	2401      	movs	r4, #1
 8007ea4:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ea8:	6894      	ldr	r4, [r2, #8]
 8007eaa:	0765      	lsls	r5, r4, #29
 8007eac:	d428      	bmi.n	8007f00 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007eae:	6894      	ldr	r4, [r2, #8]
 8007eb0:	0724      	lsls	r4, r4, #28
 8007eb2:	d426      	bmi.n	8007f02 <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007eb4:	680c      	ldr	r4, [r1, #0]
 8007eb6:	4db8      	ldr	r5, [pc, #736]	; (8008198 <HAL_ADC_AnalogWDGConfig+0x308>)
 8007eb8:	42ac      	cmp	r4, r5
 8007eba:	f000 8097 	beq.w	8007fec <HAL_ADC_AnalogWDGConfig+0x15c>
      switch (AnalogWDGConfig->WatchdogMode)
 8007ebe:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007ec2:	d02e      	beq.n	8007f22 <HAL_ADC_AnalogWDGConfig+0x92>
 8007ec4:	d827      	bhi.n	8007f16 <HAL_ADC_AnalogWDGConfig+0x86>
 8007ec6:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007eca:	d02a      	beq.n	8007f22 <HAL_ADC_AnalogWDGConfig+0x92>
 8007ecc:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007ed0:	d027      	beq.n	8007f22 <HAL_ADC_AnalogWDGConfig+0x92>
 8007ed2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007ed6:	d024      	beq.n	8007f22 <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007ed8:	f004 0001 	and.w	r0, r4, #1
 8007edc:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8007ee0:	4eae      	ldr	r6, [pc, #696]	; (800819c <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007ee2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8007ee6:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007ee8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8007eec:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8007ef0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8007ef4:	ea24 0406 	bic.w	r4, r4, r6
 8007ef8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007efc:	680c      	ldr	r4, [r1, #0]
}
 8007efe:	e023      	b.n	8007f48 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007f00:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007f04:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f06:	f042 0220 	orr.w	r2, r2, #32
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007f12:	bc70      	pop	{r4, r5, r6}
 8007f14:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8007f16:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8007f1a:	d002      	beq.n	8007f22 <HAL_ADC_AnalogWDGConfig+0x92>
 8007f1c:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8007f20:	d1da      	bne.n	8007ed8 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007f22:	489f      	ldr	r0, [pc, #636]	; (80081a0 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007f24:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007f26:	6888      	ldr	r0, [r1, #8]
 8007f28:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007f2c:	f000 80cf 	beq.w	80080ce <HAL_ADC_AnalogWDGConfig+0x23e>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	f040 80e3 	bne.w	80080fc <HAL_ADC_AnalogWDGConfig+0x26c>
 8007f36:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8007f3a:	2501      	movs	r5, #1
 8007f3c:	4085      	lsls	r5, r0
 8007f3e:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8007f42:	4328      	orrs	r0, r5
 8007f44:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007f48:	4896      	ldr	r0, [pc, #600]	; (80081a4 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007f50:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007f54:	f000 808f 	beq.w	8008076 <HAL_ADC_AnalogWDGConfig+0x1e6>
 8007f58:	68d0      	ldr	r0, [r2, #12]
 8007f5a:	68d5      	ldr	r5, [r2, #12]
 8007f5c:	06c0      	lsls	r0, r0, #27
 8007f5e:	f100 80b0 	bmi.w	80080c2 <HAL_ADC_AnalogWDGConfig+0x232>
 8007f62:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8007f66:	6908      	ldr	r0, [r1, #16]
 8007f68:	006d      	lsls	r5, r5, #1
 8007f6a:	40a8      	lsls	r0, r5
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007f6c:	4d8d      	ldr	r5, [pc, #564]	; (80081a4 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007f6e:	682d      	ldr	r5, [r5, #0]
 8007f70:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8007f74:	68d5      	ldr	r5, [r2, #12]
 8007f76:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8007f7a:	d030      	beq.n	8007fde <HAL_ADC_AnalogWDGConfig+0x14e>
 8007f7c:	f015 0f10 	tst.w	r5, #16
 8007f80:	68d5      	ldr	r5, [r2, #12]
 8007f82:	d02c      	beq.n	8007fde <HAL_ADC_AnalogWDGConfig+0x14e>
 8007f84:	086d      	lsrs	r5, r5, #1
 8007f86:	694e      	ldr	r6, [r1, #20]
 8007f88:	f005 0508 	and.w	r5, r5, #8
 8007f8c:	fa06 fc05 	lsl.w	ip, r6, r5
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007f90:	4d83      	ldr	r5, [pc, #524]	; (80081a0 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007f92:	42ac      	cmp	r4, r5
 8007f94:	d076      	beq.n	8008084 <HAL_ADC_AnalogWDGConfig+0x1f4>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007f96:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8007f9a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007f9e:	ea44 040c 	orr.w	r4, r4, ip
 8007fa2:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007fa6:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8007faa:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007fae:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8007fb0:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007fb4:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007fb8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007fba:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007fbe:	6558      	str	r0, [r3, #84]	; 0x54
 8007fc0:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007fc2:	7b09      	ldrb	r1, [r1, #12]
 8007fc4:	2901      	cmp	r1, #1
 8007fc6:	f000 8093 	beq.w	80080f0 <HAL_ADC_AnalogWDGConfig+0x260>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007fca:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007fd2:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007fda:	bc70      	pop	{r4, r5, r6}
 8007fdc:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007fde:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8007fe2:	694e      	ldr	r6, [r1, #20]
 8007fe4:	006d      	lsls	r5, r5, #1
 8007fe6:	fa06 fc05 	lsl.w	ip, r6, r5
 8007fea:	e7d1      	b.n	8007f90 <HAL_ADC_AnalogWDGConfig+0x100>
      switch (AnalogWDGConfig->WatchdogMode)
 8007fec:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007ff0:	f000 80fb 	beq.w	80081ea <HAL_ADC_AnalogWDGConfig+0x35a>
 8007ff4:	d82a      	bhi.n	800804c <HAL_ADC_AnalogWDGConfig+0x1bc>
 8007ff6:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007ffa:	f000 80eb 	beq.w	80081d4 <HAL_ADC_AnalogWDGConfig+0x344>
 8007ffe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008002:	d118      	bne.n	8008036 <HAL_ADC_AnalogWDGConfig+0x1a6>
  MODIFY_REG(*preg,
 8008004:	68d4      	ldr	r4, [r2, #12]
 8008006:	4868      	ldr	r0, [pc, #416]	; (80081a8 <HAL_ADC_AnalogWDGConfig+0x318>)
 8008008:	4020      	ands	r0, r4
 800800a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800800e:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008010:	4864      	ldr	r0, [pc, #400]	; (80081a4 <HAL_ADC_AnalogWDGConfig+0x314>)
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008018:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800801c:	68d0      	ldr	r0, [r2, #12]
 800801e:	d076      	beq.n	800810e <HAL_ADC_AnalogWDGConfig+0x27e>
 8008020:	f010 0f10 	tst.w	r0, #16
 8008024:	690c      	ldr	r4, [r1, #16]
 8008026:	68d0      	ldr	r0, [r2, #12]
 8008028:	f040 80a5 	bne.w	8008176 <HAL_ADC_AnalogWDGConfig+0x2e6>
 800802c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8008030:	0040      	lsls	r0, r0, #1
 8008032:	4084      	lsls	r4, r0
 8008034:	e070      	b.n	8008118 <HAL_ADC_AnalogWDGConfig+0x288>
      switch (AnalogWDGConfig->WatchdogMode)
 8008036:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800803a:	f040 80bf 	bne.w	80081bc <HAL_ADC_AnalogWDGConfig+0x32c>
 800803e:	68d4      	ldr	r4, [r2, #12]
 8008040:	4859      	ldr	r0, [pc, #356]	; (80081a8 <HAL_ADC_AnalogWDGConfig+0x318>)
 8008042:	4020      	ands	r0, r4
 8008044:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008048:	60d0      	str	r0, [r2, #12]
}
 800804a:	e7e1      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
 800804c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8008050:	f000 80b9 	beq.w	80081c6 <HAL_ADC_AnalogWDGConfig+0x336>
 8008054:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8008058:	f040 80b0 	bne.w	80081bc <HAL_ADC_AnalogWDGConfig+0x32c>
  MODIFY_REG(*preg,
 800805c:	68d5      	ldr	r5, [r2, #12]
 800805e:	6888      	ldr	r0, [r1, #8]
 8008060:	4c51      	ldr	r4, [pc, #324]	; (80081a8 <HAL_ADC_AnalogWDGConfig+0x318>)
 8008062:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8008066:	402c      	ands	r4, r5
 8008068:	4320      	orrs	r0, r4
 800806a:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 800806e:	60d0      	str	r0, [r2, #12]
}
 8008070:	e7ce      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
  __HAL_LOCK(hadc);
 8008072:	2002      	movs	r0, #2
}
 8008074:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008076:	68d5      	ldr	r5, [r2, #12]
 8008078:	6908      	ldr	r0, [r1, #16]
 800807a:	f3c5 0582 	ubfx	r5, r5, #2, #3
 800807e:	006d      	lsls	r5, r5, #1
 8008080:	40a8      	lsls	r0, r5
 8008082:	e773      	b.n	8007f6c <HAL_ADC_AnalogWDGConfig+0xdc>
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8008084:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8008088:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800808c:	ea44 040c 	orr.w	r4, r4, ip
 8008090:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8008094:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8008098:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800809c:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800809e:	f44f 7480 	mov.w	r4, #256	; 0x100
 80080a2:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80080a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80080a8:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 80080ac:	6558      	str	r0, [r3, #84]	; 0x54
 80080ae:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 80080b0:	7b09      	ldrb	r1, [r1, #12]
 80080b2:	2901      	cmp	r1, #1
 80080b4:	d07c      	beq.n	80081b0 <HAL_ADC_AnalogWDGConfig+0x320>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80080b6:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b8:	2000      	movs	r0, #0
 80080ba:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80080be:	6051      	str	r1, [r2, #4]
}
 80080c0:	e724      	b.n	8007f0c <HAL_ADC_AnalogWDGConfig+0x7c>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80080c2:	086d      	lsrs	r5, r5, #1
 80080c4:	6908      	ldr	r0, [r1, #16]
 80080c6:	f005 0508 	and.w	r5, r5, #8
 80080ca:	40a8      	lsls	r0, r5
 80080cc:	e74e      	b.n	8007f6c <HAL_ADC_AnalogWDGConfig+0xdc>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	d05c      	beq.n	800818c <HAL_ADC_AnalogWDGConfig+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d2:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f000 8092 	beq.w	8008200 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80080dc:	fab0 f080 	clz	r0, r0
 80080e0:	2501      	movs	r5, #1
 80080e2:	4085      	lsls	r5, r0
 80080e4:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 80080e8:	4328      	orrs	r0, r5
 80080ea:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 80080ee:	e72b      	b.n	8007f48 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80080f0:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080f2:	2000      	movs	r0, #0
 80080f4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80080f8:	6051      	str	r1, [r2, #4]
}
 80080fa:	e707      	b.n	8007f0c <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8008100:	2800      	cmp	r0, #0
 8008102:	d053      	beq.n	80081ac <HAL_ADC_AnalogWDGConfig+0x31c>
  return __builtin_clz(value);
 8008104:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008108:	2501      	movs	r5, #1
 800810a:	4085      	lsls	r5, r0
 800810c:	e717      	b.n	8007f3e <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800810e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8008112:	690c      	ldr	r4, [r1, #16]
 8008114:	0040      	lsls	r0, r0, #1
 8008116:	4084      	lsls	r4, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008118:	4822      	ldr	r0, [pc, #136]	; (80081a4 <HAL_ADC_AnalogWDGConfig+0x314>)
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008120:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8008124:	68d0      	ldr	r0, [r2, #12]
 8008126:	d003      	beq.n	8008130 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8008128:	f010 0f10 	tst.w	r0, #16
 800812c:	68d0      	ldr	r0, [r2, #12]
 800812e:	d127      	bne.n	8008180 <HAL_ADC_AnalogWDGConfig+0x2f0>
 8008130:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8008134:	694d      	ldr	r5, [r1, #20]
 8008136:	0040      	lsls	r0, r0, #1
 8008138:	4085      	lsls	r5, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800813a:	6a10      	ldr	r0, [r2, #32]
 800813c:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8008140:	4328      	orrs	r0, r5
 8008142:	6210      	str	r0, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8008144:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008146:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 800814a:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800814c:	2480      	movs	r4, #128	; 0x80
 800814e:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008150:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008152:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008156:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008158:	2000      	movs	r0, #0
 800815a:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 800815c:	7b09      	ldrb	r1, [r1, #12]
 800815e:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8008160:	6851      	ldr	r1, [r2, #4]
 8008162:	bf0c      	ite	eq
 8008164:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8008166:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 800816a:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8008172:	bc70      	pop	{r4, r5, r6}
 8008174:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008176:	0840      	lsrs	r0, r0, #1
 8008178:	f000 0008 	and.w	r0, r0, #8
 800817c:	4084      	lsls	r4, r0
 800817e:	e7cb      	b.n	8008118 <HAL_ADC_AnalogWDGConfig+0x288>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008180:	0840      	lsrs	r0, r0, #1
 8008182:	694d      	ldr	r5, [r1, #20]
 8008184:	f000 0008 	and.w	r0, r0, #8
 8008188:	4085      	lsls	r5, r0
 800818a:	e7d6      	b.n	800813a <HAL_ADC_AnalogWDGConfig+0x2aa>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800818c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8008190:	2501      	movs	r5, #1
 8008192:	4085      	lsls	r5, r0
 8008194:	e7a6      	b.n	80080e4 <HAL_ADC_AnalogWDGConfig+0x254>
 8008196:	bf00      	nop
 8008198:	7dc00000 	.word	0x7dc00000
 800819c:	7dcfffff 	.word	0x7dcfffff
 80081a0:	001fffff 	.word	0x001fffff
 80081a4:	5c001000 	.word	0x5c001000
 80081a8:	823fffff 	.word	0x823fffff
 80081ac:	2501      	movs	r5, #1
 80081ae:	e6c6      	b.n	8007f3e <HAL_ADC_AnalogWDGConfig+0xae>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80081b0:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081b2:	2000      	movs	r0, #0
 80081b4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80081b8:	6051      	str	r1, [r2, #4]
}
 80081ba:	e6a7      	b.n	8007f0c <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 80081bc:	68d4      	ldr	r4, [r2, #12]
 80081be:	4811      	ldr	r0, [pc, #68]	; (8008204 <HAL_ADC_AnalogWDGConfig+0x374>)
 80081c0:	4020      	ands	r0, r4
 80081c2:	60d0      	str	r0, [r2, #12]
}
 80081c4:	e724      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 80081c6:	68d4      	ldr	r4, [r2, #12]
 80081c8:	480e      	ldr	r0, [pc, #56]	; (8008204 <HAL_ADC_AnalogWDGConfig+0x374>)
 80081ca:	4020      	ands	r0, r4
 80081cc:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 80081d0:	60d0      	str	r0, [r2, #12]
}
 80081d2:	e71d      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 80081d4:	68d5      	ldr	r5, [r2, #12]
 80081d6:	6888      	ldr	r0, [r1, #8]
 80081d8:	4c0a      	ldr	r4, [pc, #40]	; (8008204 <HAL_ADC_AnalogWDGConfig+0x374>)
 80081da:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80081de:	402c      	ands	r4, r5
 80081e0:	4320      	orrs	r0, r4
 80081e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80081e6:	60d0      	str	r0, [r2, #12]
}
 80081e8:	e712      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 80081ea:	68d5      	ldr	r5, [r2, #12]
 80081ec:	6888      	ldr	r0, [r1, #8]
 80081ee:	4c05      	ldr	r4, [pc, #20]	; (8008204 <HAL_ADC_AnalogWDGConfig+0x374>)
 80081f0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80081f4:	402c      	ands	r4, r5
 80081f6:	4320      	orrs	r0, r4
 80081f8:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 80081fc:	60d0      	str	r0, [r2, #12]
}
 80081fe:	e707      	b.n	8008010 <HAL_ADC_AnalogWDGConfig+0x180>
 8008200:	2501      	movs	r5, #1
 8008202:	e76f      	b.n	80080e4 <HAL_ADC_AnalogWDGConfig+0x254>
 8008204:	823fffff 	.word	0x823fffff

08008208 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008208:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008210:	689a      	ldr	r2, [r3, #8]
{
 8008212:	b570      	push	{r4, r5, r6, lr}
 8008214:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008216:	d103      	bne.n	8008220 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008218:	0712      	lsls	r2, r2, #28
 800821a:	d401      	bmi.n	8008220 <ADC_ConversionStop+0x18>
  return HAL_OK;
 800821c:	2000      	movs	r0, #0
}
 800821e:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	0196      	lsls	r6, r2, #6
 8008224:	d504      	bpl.n	8008230 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008226:	8aa0      	ldrh	r0, [r4, #20]
 8008228:	f240 1201 	movw	r2, #257	; 0x101
 800822c:	4290      	cmp	r0, r2
 800822e:	d01a      	beq.n	8008266 <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008230:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	d040      	beq.n	80082b8 <ADC_ConversionStop+0xb0>
 8008236:	0750      	lsls	r0, r2, #29
 8008238:	d508      	bpl.n	800824c <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	0792      	lsls	r2, r2, #30
 800823e:	d405      	bmi.n	800824c <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 8008240:	6898      	ldr	r0, [r3, #8]
 8008242:	4a2d      	ldr	r2, [pc, #180]	; (80082f8 <ADC_ConversionStop+0xf0>)
 8008244:	4002      	ands	r2, r0
 8008246:	f042 0210 	orr.w	r2, r2, #16
 800824a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800824c:	2901      	cmp	r1, #1
 800824e:	d019      	beq.n	8008284 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	0716      	lsls	r6, r2, #28
 8008254:	d502      	bpl.n	800825c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	0790      	lsls	r0, r2, #30
 800825a:	d534      	bpl.n	80082c6 <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800825c:	2903      	cmp	r1, #3
 800825e:	bf14      	ite	ne
 8008260:	2504      	movne	r5, #4
 8008262:	250c      	moveq	r5, #12
 8008264:	e00f      	b.n	8008286 <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	0650      	lsls	r0, r2, #25
 800826a:	d406      	bmi.n	800827a <ADC_ConversionStop+0x72>
 800826c:	4a23      	ldr	r2, [pc, #140]	; (80082fc <ADC_ConversionStop+0xf4>)
 800826e:	e001      	b.n	8008274 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008270:	3a01      	subs	r2, #1
 8008272:	d018      	beq.n	80082a6 <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	0649      	lsls	r1, r1, #25
 8008278:	d5fa      	bpl.n	8008270 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800827a:	2240      	movs	r2, #64	; 0x40
 800827c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	0756      	lsls	r6, r2, #29
 8008282:	d427      	bmi.n	80082d4 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008284:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8008286:	f7ff f97f 	bl	8007588 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800828a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800828c:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	421d      	tst	r5, r3
 8008292:	d0c3      	beq.n	800821c <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008294:	f7ff f978 	bl	8007588 <HAL_GetTick>
 8008298:	1b83      	subs	r3, r0, r6
 800829a:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800829c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800829e:	d9f6      	bls.n	800828e <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	422a      	tst	r2, r5
 80082a4:	d0f3      	beq.n	800828e <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80082a8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082aa:	f043 0310 	orr.w	r3, r3, #16
 80082ae:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b2:	4303      	orrs	r3, r0
 80082b4:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80082b8:	0715      	lsls	r5, r2, #28
 80082ba:	d502      	bpl.n	80082c2 <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	0792      	lsls	r2, r2, #30
 80082c0:	d513      	bpl.n	80082ea <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80082c2:	2508      	movs	r5, #8
 80082c4:	e7df      	b.n	8008286 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 80082c6:	6898      	ldr	r0, [r3, #8]
 80082c8:	4a0b      	ldr	r2, [pc, #44]	; (80082f8 <ADC_ConversionStop+0xf0>)
 80082ca:	4002      	ands	r2, r0
 80082cc:	f042 0220 	orr.w	r2, r2, #32
 80082d0:	609a      	str	r2, [r3, #8]
}
 80082d2:	e7c3      	b.n	800825c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	0791      	lsls	r1, r2, #30
 80082d8:	d4d4      	bmi.n	8008284 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 80082da:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80082dc:	2504      	movs	r5, #4
 80082de:	4a06      	ldr	r2, [pc, #24]	; (80082f8 <ADC_ConversionStop+0xf0>)
 80082e0:	400a      	ands	r2, r1
 80082e2:	f042 0210 	orr.w	r2, r2, #16
 80082e6:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80082e8:	e7cd      	b.n	8008286 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 80082ea:	6899      	ldr	r1, [r3, #8]
 80082ec:	4a02      	ldr	r2, [pc, #8]	; (80082f8 <ADC_ConversionStop+0xf0>)
 80082ee:	400a      	ands	r2, r1
 80082f0:	f042 0220 	orr.w	r2, r2, #32
 80082f4:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80082f6:	e7e4      	b.n	80082c2 <ADC_ConversionStop+0xba>
 80082f8:	7fffffc0 	.word	0x7fffffc0
 80082fc:	000cdc00 	.word	0x000cdc00

08008300 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008300:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	07d1      	lsls	r1, r2, #31
 8008306:	d501      	bpl.n	800830c <ADC_Enable+0xc>
  return HAL_OK;
 8008308:	2000      	movs	r0, #0
}
 800830a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	4a21      	ldr	r2, [pc, #132]	; (8008394 <ADC_Enable+0x94>)
 8008310:	4211      	tst	r1, r2
{
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008316:	d12c      	bne.n	8008372 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8008318:	6899      	ldr	r1, [r3, #8]
 800831a:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <ADC_Enable+0x98>)
 800831c:	400a      	ands	r2, r1
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008324:	f7ff f930 	bl	8007588 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	4a1c      	ldr	r2, [pc, #112]	; (800839c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800832c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800832e:	4293      	cmp	r3, r2
 8008330:	d028      	beq.n	8008384 <ADC_Enable+0x84>
 8008332:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008336:	4293      	cmp	r3, r2
 8008338:	d024      	beq.n	8008384 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800833a:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <ADC_Enable+0xa0>)
 800833c:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	07d6      	lsls	r6, r2, #31
 8008342:	d414      	bmi.n	800836e <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8008344:	4e14      	ldr	r6, [pc, #80]	; (8008398 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	4032      	ands	r2, r6
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008356:	f7ff f917 	bl	8007588 <HAL_GetTick>
 800835a:	1b43      	subs	r3, r0, r5
 800835c:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800835e:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008360:	d902      	bls.n	8008368 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	07d1      	lsls	r1, r2, #31
 8008366:	d504      	bpl.n	8008372 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	07d2      	lsls	r2, r2, #31
 800836c:	d5eb      	bpl.n	8008346 <ADC_Enable+0x46>
  return HAL_OK;
 800836e:	2000      	movs	r0, #0
}
 8008370:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008372:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8008374:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008376:	f043 0310 	orr.w	r3, r3, #16
 800837a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800837c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800837e:	4303      	orrs	r3, r0
 8008380:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8008382:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008384:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <ADC_Enable+0xa4>)
 8008386:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008388:	06d2      	lsls	r2, r2, #27
 800838a:	d0d8      	beq.n	800833e <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800838c:	4a06      	ldr	r2, [pc, #24]	; (80083a8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800838e:	4293      	cmp	r3, r2
 8008390:	d1d5      	bne.n	800833e <ADC_Enable+0x3e>
 8008392:	e7ec      	b.n	800836e <ADC_Enable+0x6e>
 8008394:	8000003f 	.word	0x8000003f
 8008398:	7fffffc0 	.word	0x7fffffc0
 800839c:	40022000 	.word	0x40022000
 80083a0:	58026300 	.word	0x58026300
 80083a4:	40022300 	.word	0x40022300
 80083a8:	40022100 	.word	0x40022100

080083ac <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083ac:	4a38      	ldr	r2, [pc, #224]	; (8008490 <HAL_ADC_Start+0xe4>)
 80083ae:	6803      	ldr	r3, [r0, #0]
 80083b0:	4293      	cmp	r3, r2
{
 80083b2:	b570      	push	{r4, r5, r6, lr}
 80083b4:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083b6:	d049      	beq.n	800844c <HAL_ADC_Start+0xa0>
 80083b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80083bc:	4293      	cmp	r3, r2
 80083be:	d045      	beq.n	800844c <HAL_ADC_Start+0xa0>
 80083c0:	4a34      	ldr	r2, [pc, #208]	; (8008494 <HAL_ADC_Start+0xe8>)
 80083c2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80083c4:	689d      	ldr	r5, [r3, #8]
 80083c6:	f015 0504 	ands.w	r5, r5, #4
 80083ca:	d145      	bne.n	8008458 <HAL_ADC_Start+0xac>
    __HAL_LOCK(hadc);
 80083cc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d041      	beq.n	8008458 <HAL_ADC_Start+0xac>
 80083d4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80083d6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80083d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80083dc:	f7ff ff90 	bl	8008300 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d13b      	bne.n	800845c <HAL_ADC_Start+0xb0>
      ADC_STATE_CLR_SET(hadc->State,
 80083e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80083e6:	f006 061f 	and.w	r6, r6, #31
 80083ea:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <HAL_ADC_Start+0xec>)
 80083ec:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083ee:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80083f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083f4:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083f6:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_ADC_Start+0xf0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d032      	beq.n	8008462 <HAL_ADC_Start+0xb6>
 80083fc:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008400:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008404:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008406:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800840c:	d03d      	beq.n	800848a <HAL_ADC_Start+0xde>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800840e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008410:	f022 0206 	bic.w	r2, r2, #6
 8008414:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008416:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008418:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800841a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008424:	d021      	beq.n	800846a <HAL_ADC_Start+0xbe>
 8008426:	f240 2221 	movw	r2, #545	; 0x221
 800842a:	40f2      	lsrs	r2, r6
 800842c:	07d5      	lsls	r5, r2, #31
 800842e:	d41c      	bmi.n	800846a <HAL_ADC_Start+0xbe>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008430:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008436:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008438:	68cb      	ldr	r3, [r1, #12]
 800843a:	019b      	lsls	r3, r3, #6
 800843c:	d505      	bpl.n	800844a <HAL_ADC_Start+0x9e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800843e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008448:	6563      	str	r3, [r4, #84]	; 0x54
}
 800844a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800844c:	4a14      	ldr	r2, [pc, #80]	; (80084a0 <HAL_ADC_Start+0xf4>)
 800844e:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008450:	689d      	ldr	r5, [r3, #8]
 8008452:	f015 0504 	ands.w	r5, r5, #4
 8008456:	d0b9      	beq.n	80083cc <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8008458:	2002      	movs	r0, #2
}
 800845a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800845c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8008460:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008462:	490b      	ldr	r1, [pc, #44]	; (8008490 <HAL_ADC_Start+0xe4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008464:	2e00      	cmp	r6, #0
 8008466:	d0ca      	beq.n	80083fe <HAL_ADC_Start+0x52>
 8008468:	e7cd      	b.n	8008406 <HAL_ADC_Start+0x5a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	0192      	lsls	r2, r2, #6
 800846e:	d505      	bpl.n	800847c <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008470:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008472:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800847a:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 800847c:	6899      	ldr	r1, [r3, #8]
 800847e:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <HAL_ADC_Start+0xf8>)
 8008480:	400a      	ands	r2, r1
 8008482:	f042 0204 	orr.w	r2, r2, #4
 8008486:	609a      	str	r2, [r3, #8]
}
 8008488:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800848a:	65a2      	str	r2, [r4, #88]	; 0x58
 800848c:	e7c3      	b.n	8008416 <HAL_ADC_Start+0x6a>
 800848e:	bf00      	nop
 8008490:	40022000 	.word	0x40022000
 8008494:	58026300 	.word	0x58026300
 8008498:	fffff0fe 	.word	0xfffff0fe
 800849c:	40022100 	.word	0x40022100
 80084a0:	40022300 	.word	0x40022300
 80084a4:	7fffffc0 	.word	0x7fffffc0

080084a8 <ADC_Disable>:
{
 80084a8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80084aa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	0795      	lsls	r5, r2, #30
 80084b0:	d502      	bpl.n	80084b8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80084b2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80084b4:	2000      	movs	r0, #0
}
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	07d4      	lsls	r4, r2, #31
 80084bc:	d529      	bpl.n	8008512 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	4604      	mov	r4, r0
 80084c2:	f002 020d 	and.w	r2, r2, #13
 80084c6:	2a01      	cmp	r2, #1
 80084c8:	d008      	beq.n	80084dc <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80084cc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084ce:	f043 0310 	orr.w	r3, r3, #16
 80084d2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084d6:	4303      	orrs	r3, r0
 80084d8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80084da:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80084dc:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80084de:	2103      	movs	r1, #3
 80084e0:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <ADC_Disable+0x70>)
 80084e2:	4002      	ands	r2, r0
 80084e4:	f042 0202 	orr.w	r2, r2, #2
 80084e8:	609a      	str	r2, [r3, #8]
 80084ea:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80084ec:	f7ff f84c 	bl	8007588 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084f0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80084f2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	d50b      	bpl.n	8008512 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084fa:	f7ff f845 	bl	8007588 <HAL_GetTick>
 80084fe:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008500:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008502:	2802      	cmp	r0, #2
 8008504:	d902      	bls.n	800850c <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	07d2      	lsls	r2, r2, #31
 800850a:	d4de      	bmi.n	80084ca <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	07db      	lsls	r3, r3, #31
 8008510:	d4f3      	bmi.n	80084fa <ADC_Disable+0x52>
  return HAL_OK;
 8008512:	2000      	movs	r0, #0
}
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	bf00      	nop
 8008518:	7fffffc0 	.word	0x7fffffc0

0800851c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800851c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008520:	2b01      	cmp	r3, #1
 8008522:	d01b      	beq.n	800855c <HAL_ADC_Stop+0x40>
 8008524:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008526:	2103      	movs	r1, #3
{
 8008528:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800852a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800852e:	4604      	mov	r4, r0
 8008530:	f7ff fe6a 	bl	8008208 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008534:	b118      	cbz	r0, 800853e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8008536:	2300      	movs	r3, #0
 8008538:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800853c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff ffb2 	bl	80084a8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8008544:	2800      	cmp	r0, #0
 8008546:	d1f6      	bne.n	8008536 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8008548:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <HAL_ADC_Stop+0x44>)
 800854c:	4013      	ands	r3, r2
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008554:	2300      	movs	r3, #0
 8008556:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800855a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800855c:	2002      	movs	r0, #2
}
 800855e:	4770      	bx	lr
 8008560:	ffffeefe 	.word	0xffffeefe

08008564 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008564:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008566:	4a57      	ldr	r2, [pc, #348]	; (80086c4 <ADC_ConfigureBoostMode+0x160>)
{
 8008568:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800856a:	6803      	ldr	r3, [r0, #0]
 800856c:	4293      	cmp	r3, r2
 800856e:	d026      	beq.n	80085be <ADC_ConfigureBoostMode+0x5a>
 8008570:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008574:	4293      	cmp	r3, r2
 8008576:	d022      	beq.n	80085be <ADC_ConfigureBoostMode+0x5a>
 8008578:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <ADC_ConfigureBoostMode+0x164>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8008580:	d022      	beq.n	80085c8 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008582:	f003 f8f1 	bl	800b768 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8008586:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8008588:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800858a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800858e:	f000 8088 	beq.w	80086a2 <ADC_ConfigureBoostMode+0x13e>
 8008592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008596:	d06c      	beq.n	8008672 <ADC_ConfigureBoostMode+0x10e>
 8008598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859c:	f000 8081 	beq.w	80086a2 <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80085a0:	f7ff f80a 	bl	80075b8 <HAL_GetREVID>
 80085a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80085a8:	4298      	cmp	r0, r3
 80085aa:	d84b      	bhi.n	8008644 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 80085ac:	4b47      	ldr	r3, [pc, #284]	; (80086cc <ADC_ConfigureBoostMode+0x168>)
 80085ae:	429d      	cmp	r5, r3
 80085b0:	d92a      	bls.n	8008608 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	6893      	ldr	r3, [r2, #8]
 80085b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ba:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80085be:	4b44      	ldr	r3, [pc, #272]	; (80086d0 <ADC_ConfigureBoostMode+0x16c>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80085c6:	d1dc      	bne.n	8008582 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80085c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80085cc:	2100      	movs	r1, #0
 80085ce:	f004 faad 	bl	800cb2c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80085d2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80085d4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80085d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80085da:	d06c      	beq.n	80086b6 <ADC_ConfigureBoostMode+0x152>
 80085dc:	d808      	bhi.n	80085f0 <ADC_ConfigureBoostMode+0x8c>
 80085de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80085e2:	d050      	beq.n	8008686 <ADC_ConfigureBoostMode+0x122>
 80085e4:	d916      	bls.n	8008614 <ADC_ConfigureBoostMode+0xb0>
 80085e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ea:	d1d9      	bne.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 80085ec:	0945      	lsrs	r5, r0, #5
        break;
 80085ee:	e7d7      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 80085f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80085f4:	d045      	beq.n	8008682 <ADC_ConfigureBoostMode+0x11e>
 80085f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80085fa:	d1d1      	bne.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80085fc:	f7fe ffdc 	bl	80075b8 <HAL_GetREVID>
 8008600:	f241 0303 	movw	r3, #4099	; 0x1003
 8008604:	4298      	cmp	r0, r3
 8008606:	d840      	bhi.n	800868a <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	6893      	ldr	r3, [r2, #8]
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	6093      	str	r3, [r2, #8]
}
 8008612:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8008614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008618:	d006      	beq.n	8008628 <ADC_ConfigureBoostMode+0xc4>
 800861a:	d90a      	bls.n	8008632 <ADC_ConfigureBoostMode+0xce>
 800861c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008620:	d002      	beq.n	8008628 <ADC_ConfigureBoostMode+0xc4>
 8008622:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008626:	d1bb      	bne.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008628:	0c9b      	lsrs	r3, r3, #18
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8008630:	e7b6      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8008632:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008636:	d0f7      	beq.n	8008628 <ADC_ConfigureBoostMode+0xc4>
 8008638:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800863c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008640:	d0f2      	beq.n	8008628 <ADC_ConfigureBoostMode+0xc4>
 8008642:	e7ad      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8008644:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <ADC_ConfigureBoostMode+0x170>)
 8008646:	429d      	cmp	r5, r3
 8008648:	d805      	bhi.n	8008656 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	6893      	ldr	r3, [r2, #8]
 800864e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008652:	6093      	str	r3, [r2, #8]
}
 8008654:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8008656:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <ADC_ConfigureBoostMode+0x174>)
 8008658:	429d      	cmp	r5, r3
 800865a:	d91a      	bls.n	8008692 <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 800865c:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800865e:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8008660:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008662:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8008664:	d829      	bhi.n	80086ba <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800866e:	6093      	str	r3, [r2, #8]
}
 8008670:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8008672:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008674:	f7fe ffa0 	bl	80075b8 <HAL_GetREVID>
 8008678:	f241 0303 	movw	r3, #4099	; 0x1003
 800867c:	4298      	cmp	r0, r3
 800867e:	d8e1      	bhi.n	8008644 <ADC_ConfigureBoostMode+0xe0>
 8008680:	e794      	b.n	80085ac <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 8008682:	09c5      	lsrs	r5, r0, #7
        break;
 8008684:	e78c      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8008686:	0905      	lsrs	r5, r0, #4
        break;
 8008688:	e78a      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 800868a:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <ADC_ConfigureBoostMode+0x170>)
 800868c:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8008690:	d2db      	bcs.n	800864a <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	6893      	ldr	r3, [r2, #8]
 8008696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800869e:	6093      	str	r3, [r2, #8]
}
 80086a0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80086a2:	0c1b      	lsrs	r3, r3, #16
 80086a4:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80086a8:	f7fe ff86 	bl	80075b8 <HAL_GetREVID>
 80086ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80086b0:	4298      	cmp	r0, r3
 80086b2:	d8c7      	bhi.n	8008644 <ADC_ConfigureBoostMode+0xe0>
 80086b4:	e77a      	b.n	80085ac <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 80086b6:	0985      	lsrs	r5, r0, #6
        break;
 80086b8:	e772      	b.n	80085a0 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80086ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086be:	6093      	str	r3, [r2, #8]
}
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	40022000 	.word	0x40022000
 80086c8:	58026300 	.word	0x58026300
 80086cc:	01312d00 	.word	0x01312d00
 80086d0:	40022300 	.word	0x40022300
 80086d4:	00bebc21 	.word	0x00bebc21
 80086d8:	017d7841 	.word	0x017d7841
 80086dc:	02faf081 	.word	0x02faf081

080086e0 <HAL_ADC_Init>:
{
 80086e0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80086e2:	2300      	movs	r3, #0
{
 80086e4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80086e6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f000 80d1 	beq.w	8008890 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80086ee:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80086f0:	4604      	mov	r4, r0
 80086f2:	2d00      	cmp	r5, #0
 80086f4:	f000 80bb 	beq.w	800886e <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80086f8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80086fa:	6893      	ldr	r3, [r2, #8]
 80086fc:	009d      	lsls	r5, r3, #2
 80086fe:	d503      	bpl.n	8008708 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008700:	6891      	ldr	r1, [r2, #8]
 8008702:	4b72      	ldr	r3, [pc, #456]	; (80088cc <HAL_ADC_Init+0x1ec>)
 8008704:	400b      	ands	r3, r1
 8008706:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008708:	6893      	ldr	r3, [r2, #8]
 800870a:	00d8      	lsls	r0, r3, #3
 800870c:	d416      	bmi.n	800873c <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800870e:	4b70      	ldr	r3, [pc, #448]	; (80088d0 <HAL_ADC_Init+0x1f0>)
 8008710:	4970      	ldr	r1, [pc, #448]	; (80088d4 <HAL_ADC_Init+0x1f4>)
 8008712:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8008714:	6890      	ldr	r0, [r2, #8]
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	fba1 1303 	umull	r1, r3, r1, r3
 800871c:	496e      	ldr	r1, [pc, #440]	; (80088d8 <HAL_ADC_Init+0x1f8>)
 800871e:	099b      	lsrs	r3, r3, #6
 8008720:	4001      	ands	r1, r0
 8008722:	3301      	adds	r3, #1
 8008724:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8008728:	6091      	str	r1, [r2, #8]
 800872a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	b12b      	cbz	r3, 800873c <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	3b01      	subs	r3, #1
 8008734:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f9      	bne.n	8008730 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800873c:	6893      	ldr	r3, [r2, #8]
 800873e:	00d9      	lsls	r1, r3, #3
 8008740:	d424      	bmi.n	800878c <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008742:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008744:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008746:	f043 0310 	orr.w	r3, r3, #16
 800874a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800874c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800874e:	432b      	orrs	r3, r5
 8008750:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008752:	6893      	ldr	r3, [r2, #8]
 8008754:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008758:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800875a:	d11d      	bne.n	8008798 <HAL_ADC_Init+0xb8>
 800875c:	06db      	lsls	r3, r3, #27
 800875e:	d41b      	bmi.n	8008798 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8008760:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008762:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008766:	f043 0302 	orr.w	r3, r3, #2
 800876a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800876c:	6893      	ldr	r3, [r2, #8]
 800876e:	07de      	lsls	r6, r3, #31
 8008770:	d428      	bmi.n	80087c4 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008772:	4b5a      	ldr	r3, [pc, #360]	; (80088dc <HAL_ADC_Init+0x1fc>)
 8008774:	429a      	cmp	r2, r3
 8008776:	d017      	beq.n	80087a8 <HAL_ADC_Init+0xc8>
 8008778:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800877c:	429a      	cmp	r2, r3
 800877e:	d013      	beq.n	80087a8 <HAL_ADC_Init+0xc8>
 8008780:	4b57      	ldr	r3, [pc, #348]	; (80088e0 <HAL_ADC_Init+0x200>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	d41d      	bmi.n	80087c4 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008788:	4a56      	ldr	r2, [pc, #344]	; (80088e4 <HAL_ADC_Init+0x204>)
 800878a:	e015      	b.n	80087b8 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800878c:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800878e:	2500      	movs	r5, #0
 8008790:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008796:	d0e1      	beq.n	800875c <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008798:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800879a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800879c:	f043 0310 	orr.w	r3, r3, #16
}
 80087a0:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087a2:	6563      	str	r3, [r4, #84]	; 0x54
}
 80087a4:	b002      	add	sp, #8
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087a8:	4a4c      	ldr	r2, [pc, #304]	; (80088dc <HAL_ADC_Init+0x1fc>)
 80087aa:	4b4f      	ldr	r3, [pc, #316]	; (80088e8 <HAL_ADC_Init+0x208>)
 80087ac:	6892      	ldr	r2, [r2, #8]
 80087ae:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	07d8      	lsls	r0, r3, #31
 80087b4:	d406      	bmi.n	80087c4 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80087b6:	4a4d      	ldr	r2, [pc, #308]	; (80088ec <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80087b8:	6893      	ldr	r3, [r2, #8]
 80087ba:	6861      	ldr	r1, [r4, #4]
 80087bc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80087c4:	f7fe fef8 	bl	80075b8 <HAL_GetREVID>
 80087c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80087cc:	68a1      	ldr	r1, [r4, #8]
 80087ce:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80087d0:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80087d2:	d852      	bhi.n	800887a <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80087d4:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80087d8:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80087da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80087dc:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80087e0:	4302      	orrs	r2, r0
 80087e2:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d103      	bne.n	80087f0 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80087e8:	6a23      	ldr	r3, [r4, #32]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80087f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f2:	b123      	cbz	r3, 80087fe <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087f4:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80087f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087fa:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087fc:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	493b      	ldr	r1, [pc, #236]	; (80088f0 <HAL_ADC_Init+0x210>)
 8008802:	68d8      	ldr	r0, [r3, #12]
 8008804:	4001      	ands	r1, r0
 8008806:	4311      	orrs	r1, r2
 8008808:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008810:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008812:	d11c      	bne.n	800884e <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008814:	0712      	lsls	r2, r2, #28
 8008816:	d41a      	bmi.n	800884e <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008818:	68d8      	ldr	r0, [r3, #12]
 800881a:	4a36      	ldr	r2, [pc, #216]	; (80088f4 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800881c:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800881e:	4002      	ands	r2, r0
 8008820:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8008824:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008826:	430a      	orrs	r2, r1
 8008828:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800882a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800882e:	2a01      	cmp	r2, #1
 8008830:	d03a      	beq.n	80088a8 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800883a:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800883c:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800883e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008840:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008844:	430a      	orrs	r2, r1
 8008846:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8008848:	f7ff fe8c 	bl	8008564 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800884c:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800884e:	68e2      	ldr	r2, [r4, #12]
 8008850:	2a01      	cmp	r2, #1
 8008852:	d021      	beq.n	8008898 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008856:	f022 020f 	bic.w	r2, r2, #15
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800885c:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 800885e:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008860:	f023 0303 	bic.w	r3, r3, #3
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	6563      	str	r3, [r4, #84]	; 0x54
}
 800886a:	b002      	add	sp, #8
 800886c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800886e:	f7fe f957 	bl	8006b20 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008872:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8008874:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008878:	e73e      	b.n	80086f8 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800887a:	2910      	cmp	r1, #16
 800887c:	d1aa      	bne.n	80087d4 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800887e:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008880:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008882:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8008886:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008888:	430a      	orrs	r2, r1
 800888a:	f042 021c 	orr.w	r2, r2, #28
 800888e:	e7a9      	b.n	80087e4 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8008890:	2501      	movs	r5, #1
}
 8008892:	4628      	mov	r0, r5
 8008894:	b002      	add	sp, #8
 8008896:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008898:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800889a:	69a2      	ldr	r2, [r4, #24]
 800889c:	f021 010f 	bic.w	r1, r1, #15
 80088a0:	3a01      	subs	r2, #1
 80088a2:	430a      	orrs	r2, r1
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30
 80088a6:	e7d9      	b.n	800885c <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80088a8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80088ac:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80088ae:	3901      	subs	r1, #1
 80088b0:	6918      	ldr	r0, [r3, #16]
 80088b2:	4332      	orrs	r2, r6
 80088b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80088b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80088ba:	430a      	orrs	r2, r1
 80088bc:	490e      	ldr	r1, [pc, #56]	; (80088f8 <HAL_ADC_Init+0x218>)
 80088be:	4001      	ands	r1, r0
 80088c0:	430a      	orrs	r2, r1
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	611a      	str	r2, [r3, #16]
 80088c8:	e7b7      	b.n	800883a <HAL_ADC_Init+0x15a>
 80088ca:	bf00      	nop
 80088cc:	5fffffc0 	.word	0x5fffffc0
 80088d0:	24000314 	.word	0x24000314
 80088d4:	053e2d63 	.word	0x053e2d63
 80088d8:	6fffffc0 	.word	0x6fffffc0
 80088dc:	40022000 	.word	0x40022000
 80088e0:	58026000 	.word	0x58026000
 80088e4:	58026300 	.word	0x58026300
 80088e8:	40022100 	.word	0x40022100
 80088ec:	40022300 	.word	0x40022300
 80088f0:	fff0c003 	.word	0xfff0c003
 80088f4:	ffffbffc 	.word	0xffffbffc
 80088f8:	fc00f81e 	.word	0xfc00f81e

080088fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80088fe:	2300      	movs	r3, #0
{
 8008900:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8008902:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008904:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008908:	2b01      	cmp	r3, #1
 800890a:	d040      	beq.n	800898e <HAL_ADCEx_Calibration_Start+0x92>
 800890c:	2301      	movs	r3, #1
 800890e:	4604      	mov	r4, r0
 8008910:	460e      	mov	r6, r1
 8008912:	4615      	mov	r5, r2
 8008914:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008918:	f7ff fdc6 	bl	80084a8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800891c:	b9e8      	cbnz	r0, 800895a <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800891e:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8008920:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8008924:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <HAL_ADCEx_Calibration_Start+0x98>)
 8008926:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800892a:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800892c:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800892e:	4f1a      	ldr	r7, [pc, #104]	; (8008998 <HAL_ADCEx_Calibration_Start+0x9c>)
    ADC_STATE_CLR_SET(hadc->State,
 8008930:	f043 0302 	orr.w	r3, r3, #2
 8008934:	6563      	str	r3, [r4, #84]	; 0x54
 8008936:	4b19      	ldr	r3, [pc, #100]	; (800899c <HAL_ADCEx_Calibration_Start+0xa0>)
 8008938:	68ae      	ldr	r6, [r5, #8]
 800893a:	4033      	ands	r3, r6
 800893c:	4313      	orrs	r3, r2
 800893e:	4319      	orrs	r1, r3
 8008940:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008944:	60a9      	str	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008946:	68ab      	ldr	r3, [r5, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	db0f      	blt.n	800896c <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800894c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	f043 0301 	orr.w	r3, r3, #1
 8008956:	6563      	str	r3, [r4, #84]	; 0x54
 8008958:	e003      	b.n	8008962 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800895a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800895c:	f043 0310 	orr.w	r3, r3, #16
 8008960:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008962:	2300      	movs	r3, #0
 8008964:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8008968:	b003      	add	sp, #12
 800896a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	3301      	adds	r3, #1
 8008970:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	42bb      	cmp	r3, r7
 8008976:	d3e6      	bcc.n	8008946 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8008978:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800897a:	2200      	movs	r2, #0
        return HAL_ERROR;
 800897c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800897e:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8008982:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8008986:	f043 0310 	orr.w	r3, r3, #16
 800898a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800898c:	e7ec      	b.n	8008968 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800898e:	2002      	movs	r0, #2
}
 8008990:	b003      	add	sp, #12
 8008992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008994:	ffffeefd 	.word	0xffffeefd
 8008998:	25c3f800 	.word	0x25c3f800
 800899c:	3ffeffc0 	.word	0x3ffeffc0

080089a0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80089a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80089a4:	f8d0 8000 	ldr.w	r8, [r0]
{
 80089a8:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089aa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80089ae:	f015 0504 	ands.w	r5, r5, #4
 80089b2:	d117      	bne.n	80089e4 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80089b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80089b8:	4604      	mov	r4, r0
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d012      	beq.n	80089e4 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80089be:	4b2d      	ldr	r3, [pc, #180]	; (8008a74 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 80089c0:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80089c4:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80089c6:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80089c8:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80089ca:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80089ce:	d00d      	beq.n	80089ec <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089d0:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80089d2:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80089d4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80089de:	b01a      	add	sp, #104	; 0x68
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80089e4:	2002      	movs	r0, #2
}
 80089e6:	b01a      	add	sp, #104	; 0x68
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	4d22      	ldr	r5, [pc, #136]	; (8008a78 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 80089ee:	460e      	mov	r6, r1
 80089f0:	4617      	mov	r7, r2
 80089f2:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80089f4:	f7ff fc84 	bl	8008300 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80089f8:	b128      	cbz	r0, 8008a06 <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 80089fa:	2300      	movs	r3, #0
 80089fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008a00:	b01a      	add	sp, #104	; 0x68
 8008a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8008a06:	a801      	add	r0, sp, #4
 8008a08:	f7ff fc7a 	bl	8008300 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d1f4      	bne.n	80089fa <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8008a10:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a12:	4a1a      	ldr	r2, [pc, #104]	; (8008a7c <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008a14:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8008a16:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a18:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8008a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a20:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8008a22:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8008a24:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008a26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008a28:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008a2a:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8008a2c:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8008a30:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a32:	d01d      	beq.n	8008a70 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8008a34:	45ac      	cmp	ip, r5
 8008a36:	d01b      	beq.n	8008a70 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8008a38:	4914      	ldr	r1, [pc, #80]	; (8008a8c <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008a3a:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	4632      	mov	r2, r6
 8008a40:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008a42:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8008a46:	2500      	movs	r5, #0
 8008a48:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008a4c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008a50:	f045 0510 	orr.w	r5, r5, #16
 8008a54:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8008a58:	f000 ff22 	bl	80098a0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008a5c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8008a60:	6891      	ldr	r1, [r2, #8]
 8008a62:	400b      	ands	r3, r1
 8008a64:	f043 0304 	orr.w	r3, r3, #4
 8008a68:	6093      	str	r3, [r2, #8]
}
 8008a6a:	b01a      	add	sp, #104	; 0x68
 8008a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a70:	4908      	ldr	r1, [pc, #32]	; (8008a94 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8008a72:	e7e2      	b.n	8008a3a <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8008a74:	40022000 	.word	0x40022000
 8008a78:	40022100 	.word	0x40022100
 8008a7c:	fffff0fe 	.word	0xfffff0fe
 8008a80:	080079b9 	.word	0x080079b9
 8008a84:	08007731 	.word	0x08007731
 8008a88:	08007a25 	.word	0x08007a25
 8008a8c:	58026300 	.word	0x58026300
 8008a90:	7fffffc0 	.word	0x7fffffc0
 8008a94:	40022300 	.word	0x40022300

08008a98 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8008a98:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a9a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8008a9e:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d05a      	beq.n	8008b5a <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8008aa4:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008aa6:	2103      	movs	r1, #3
 8008aa8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008aaa:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008aae:	f7ff fbab 	bl	8008208 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	bb40      	cbnz	r0, 8008b08 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008ab6:	4b3d      	ldr	r3, [pc, #244]	; (8008bac <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8008ab8:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008aba:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008abc:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008abe:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008ac0:	d028      	beq.n	8008b14 <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ac2:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8008ac4:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 8008ac6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008aca:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8008ace:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ad0:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008ad2:	b01a      	add	sp, #104	; 0x68
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008ad6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008ad8:	f001 f87a 	bl	8009bd0 <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 8008adc:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008ade:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 8008ae0:	d053      	beq.n	8008b8a <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	6853      	ldr	r3, [r2, #4]
 8008ae6:	f023 0310 	bic.w	r3, r3, #16
 8008aea:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d155      	bne.n	8008b9c <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8008af0:	a801      	add	r0, sp, #4
 8008af2:	f7ff fcd9 	bl	80084a8 <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fcd6 	bl	80084a8 <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 8008afc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008afe:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8008b0c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008b10:	b01a      	add	sp, #104	; 0x68
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 8008b16:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8008b18:	f7fe fd36 	bl	8007588 <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008b1c:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8008b1e:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	075b      	lsls	r3, r3, #29
 8008b24:	d41d      	bmi.n	8008b62 <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	075a      	lsls	r2, r3, #29
 8008b2c:	d5d3      	bpl.n	8008ad6 <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b2e:	f7fe fd2b 	bl	8007588 <HAL_GetTick>
 8008b32:	1b43      	subs	r3, r0, r5
 8008b34:	2b05      	cmp	r3, #5
 8008b36:	d91b      	bls.n	8008b70 <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	0750      	lsls	r0, r2, #29
 8008b3e:	d51f      	bpl.n	8008b80 <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8008b46:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8008b48:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b4a:	f043 0310 	orr.w	r3, r3, #16
}
 8008b4e:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 8008b50:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b54:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008b56:	b01a      	add	sp, #104	; 0x68
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8008b5a:	2502      	movs	r5, #2
}
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	b01a      	add	sp, #104	; 0x68
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b66:	f7fe fd0f 	bl	8007588 <HAL_GetTick>
 8008b6a:	1b43      	subs	r3, r0, r5
 8008b6c:	2b05      	cmp	r3, #5
 8008b6e:	d8e3      	bhi.n	8008b38 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b70:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f013 0f04 	tst.w	r3, #4
 8008b7a:	6893      	ldr	r3, [r2, #8]
 8008b7c:	d1d7      	bne.n	8008b2e <HAL_ADCEx_MultiModeStop_DMA+0x96>
 8008b7e:	e7d4      	b.n	8008b2a <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	6891      	ldr	r1, [r2, #8]
 8008b84:	0749      	lsls	r1, r1, #29
 8008b86:	d5f5      	bpl.n	8008b74 <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 8008b88:	e7dc      	b.n	8008b44 <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008b8c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b92:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008b94:	6853      	ldr	r3, [r2, #4]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff fc83 	bl	80084a8 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8008ba2:	a801      	add	r0, sp, #4
 8008ba4:	f7ff fc80 	bl	80084a8 <ADC_Disable>
 8008ba8:	e7a8      	b.n	8008afc <HAL_ADCEx_MultiModeStop_DMA+0x64>
 8008baa:	bf00      	nop
 8008bac:	40022000 	.word	0x40022000
 8008bb0:	ffffeefe 	.word	0xffffeefe
 8008bb4:	40022100 	.word	0x40022100

08008bb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop

08008bbc <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop

08008bc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop

08008bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop

08008bc8 <HAL_ADCEx_EndOfSamplingCallback>:
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop

08008bcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008bcc:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008bce:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8008bd2:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008bd4:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8008bd6:	2a01      	cmp	r2, #1
 8008bd8:	d04d      	beq.n	8008c76 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8008bda:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008bdc:	4c2b      	ldr	r4, [pc, #172]	; (8008c8c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008bde:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8008be0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008be2:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008be4:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008be6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8008be8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008bec:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008bee:	d008      	beq.n	8008c02 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bf0:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bf6:	f041 0120 	orr.w	r1, r1, #32
 8008bfa:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8008bfc:	b01a      	add	sp, #104	; 0x68
 8008bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8008c00:	4770      	bx	lr
 8008c02:	4c23      	ldr	r4, [pc, #140]	; (8008c90 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8008c04:	68a2      	ldr	r2, [r4, #8]
 8008c06:	0752      	lsls	r2, r2, #29
 8008c08:	d50b      	bpl.n	8008c22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8008c0a:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008c0e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c10:	f042 0220 	orr.w	r2, r2, #32
 8008c14:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8008c1c:	b01a      	add	sp, #104	; 0x68
 8008c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8008c20:	4770      	bx	lr
 8008c22:	68a8      	ldr	r0, [r5, #8]
 8008c24:	f010 0004 	ands.w	r0, r0, #4
 8008c28:	d1f0      	bne.n	8008c0c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008c2a:	b1c6      	cbz	r6, 8008c5e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008c2c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008c98 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8008c30:	684f      	ldr	r7, [r1, #4]
 8008c32:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008c36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c3a:	433a      	orrs	r2, r7
 8008c3c:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c40:	68ad      	ldr	r5, [r5, #8]
 8008c42:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c44:	432a      	orrs	r2, r5
 8008c46:	07d4      	lsls	r4, r2, #31
 8008c48:	d413      	bmi.n	8008c72 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8008c4a:	688a      	ldr	r2, [r1, #8]
 8008c4c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8008c50:	4910      	ldr	r1, [pc, #64]	; (8008c94 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008c52:	4332      	orrs	r2, r6
 8008c54:	4021      	ands	r1, r4
 8008c56:	430a      	orrs	r2, r1
 8008c58:	f8cc 2008 	str.w	r2, [ip, #8]
 8008c5c:	e7db      	b.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008c5e:	490e      	ldr	r1, [pc, #56]	; (8008c98 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8008c60:	688a      	ldr	r2, [r1, #8]
 8008c62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c66:	608a      	str	r2, [r1, #8]
 8008c68:	68a8      	ldr	r0, [r5, #8]
 8008c6a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c6c:	4302      	orrs	r2, r0
 8008c6e:	07d0      	lsls	r0, r2, #31
 8008c70:	d505      	bpl.n	8008c7e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c72:	2000      	movs	r0, #0
 8008c74:	e7cf      	b.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8008c76:	2002      	movs	r0, #2
}
 8008c78:	b01a      	add	sp, #104	; 0x68
 8008c7a:	bcf0      	pop	{r4, r5, r6, r7}
 8008c7c:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c7e:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c80:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c82:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008c84:	4022      	ands	r2, r4
 8008c86:	608a      	str	r2, [r1, #8]
 8008c88:	e7c5      	b.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008c8a:	bf00      	nop
 8008c8c:	40022000 	.word	0x40022000
 8008c90:	40022100 	.word	0x40022100
 8008c94:	fffff0e0 	.word	0xfffff0e0
 8008c98:	40022300 	.word	0x40022300

08008c9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c9c:	4906      	ldr	r1, [pc, #24]	; (8008cb8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c9e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ca2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ca6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ca8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cac:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cb0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008cb2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008cb4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008cb6:	4770      	bx	lr
 8008cb8:	e000ed00 	.word	0xe000ed00
 8008cbc:	05fa0000 	.word	0x05fa0000

08008cc0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <HAL_NVIC_SetPriority+0x70>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cc8:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cca:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cd2:	f1be 0f04 	cmp.w	lr, #4
 8008cd6:	bf28      	it	cs
 8008cd8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cdc:	f1bc 0f06 	cmp.w	ip, #6
 8008ce0:	d91a      	bls.n	8008d18 <HAL_NVIC_SetPriority+0x58>
 8008ce2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ce4:	f04f 3cff 	mov.w	ip, #4294967295
 8008ce8:	fa0c fc03 	lsl.w	ip, ip, r3
 8008cec:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf0:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008cf4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008cfa:	ea21 010c 	bic.w	r1, r1, ip
 8008cfe:	fa01 f103 	lsl.w	r1, r1, r3
 8008d02:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008d06:	db0a      	blt.n	8008d1e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d08:	0109      	lsls	r1, r1, #4
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <HAL_NVIC_SetPriority+0x74>)
 8008d0c:	b2c9      	uxtb	r1, r1
 8008d0e:	4403      	add	r3, r0
 8008d10:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d18:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	e7e8      	b.n	8008cf0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d1e:	f000 000f 	and.w	r0, r0, #15
 8008d22:	0109      	lsls	r1, r1, #4
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <HAL_NVIC_SetPriority+0x78>)
 8008d26:	b2c9      	uxtb	r1, r1
 8008d28:	4403      	add	r3, r0
 8008d2a:	7619      	strb	r1, [r3, #24]
 8008d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d30:	e000ed00 	.word	0xe000ed00
 8008d34:	e000e100 	.word	0xe000e100
 8008d38:	e000ecfc 	.word	0xe000ecfc

08008d3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	db07      	blt.n	8008d50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d40:	2301      	movs	r3, #1
 8008d42:	f000 011f 	and.w	r1, r0, #31
 8008d46:	4a03      	ldr	r2, [pc, #12]	; (8008d54 <HAL_NVIC_EnableIRQ+0x18>)
 8008d48:	0940      	lsrs	r0, r0, #5
 8008d4a:	408b      	lsls	r3, r1
 8008d4c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	e000e100 	.word	0xe000e100

08008d58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d58:	1e43      	subs	r3, r0, #1
 8008d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d5e:	d20c      	bcs.n	8008d7a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d60:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d64:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d66:	4906      	ldr	r1, [pc, #24]	; (8008d80 <HAL_SYSTICK_Config+0x28>)
 8008d68:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d6c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d6e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d70:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d74:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d76:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008d7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008d84:	b188      	cbz	r0, 8008daa <HAL_DAC_Init+0x26>
{
 8008d86:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008d88:	7903      	ldrb	r3, [r0, #4]
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008d90:	b13b      	cbz	r3, 8008da2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d92:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d94:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008d96:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d98:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008d9a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008d9c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008d9e:	7122      	strb	r2, [r4, #4]
}
 8008da0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8008da2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008da4:	f7fd ff7a 	bl	8006c9c <HAL_DAC_MspInit>
 8008da8:	e7f3      	b.n	8008d92 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8008daa:	2001      	movs	r0, #1
}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop

08008db0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008db0:	7942      	ldrb	r2, [r0, #5]
 8008db2:	2a01      	cmp	r2, #1
 8008db4:	d02e      	beq.n	8008e14 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008db6:	4603      	mov	r3, r0
 8008db8:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	2201      	movs	r2, #1
{
 8008dc0:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8008dc2:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008dc6:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008dca:	6804      	ldr	r4, [r0, #0]
 8008dcc:	fa02 f20e 	lsl.w	r2, r2, lr
 8008dd0:	4322      	orrs	r2, r4
 8008dd2:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008dd4:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8008dd6:	b969      	cbnz	r1, 8008df4 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008dd8:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8008ddc:	4562      	cmp	r2, ip
 8008dde:	d103      	bne.n	8008de8 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008de0:	6842      	ldr	r2, [r0, #4]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008de8:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008dea:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8008dec:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8008dee:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008df0:	715a      	strb	r2, [r3, #5]
}
 8008df2:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008df4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008df8:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8008dfc:	4562      	cmp	r2, ip
 8008dfe:	d1f3      	bne.n	8008de8 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008e00:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8008e02:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008e04:	f042 0202 	orr.w	r2, r2, #2
 8008e08:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8008e0a:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008e0c:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8008e0e:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8008e10:	715a      	strb	r2, [r3, #5]
}
 8008e12:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8008e14:	2002      	movs	r0, #2
}
 8008e16:	4770      	bx	lr

08008e18 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008e1c:	7940      	ldrb	r0, [r0, #5]
{
 8008e1e:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8008e20:	2801      	cmp	r0, #1
 8008e22:	d053      	beq.n	8008ecc <HAL_DAC_Start_DMA+0xb4>
 8008e24:	460d      	mov	r5, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008e2a:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8008e2c:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e2e:	2202      	movs	r2, #2
 8008e30:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008e32:	bb3d      	cbnz	r5, 8008e84 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e34:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008e36:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e38:	4a37      	ldr	r2, [pc, #220]	; (8008f18 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008e3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f20 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e3e:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008e40:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008e42:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008e46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008e4a:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008f24 <HAL_DAC_Start_DMA+0x10c>
 8008e4e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008e52:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008e54:	d042      	beq.n	8008edc <HAL_DAC_Start_DMA+0xc4>
 8008e56:	2f08      	cmp	r7, #8
 8008e58:	d03d      	beq.n	8008ed6 <HAL_DAC_Start_DMA+0xbe>
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d038      	beq.n	8008ed0 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008e5e:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e60:	6837      	ldr	r7, [r6, #0]
 8008e62:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8008e66:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008e68:	f000 fd1a 	bl	80098a0 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008e70:	bb38      	cbnz	r0, 8008ec2 <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	f005 0510 	and.w	r5, r5, #16
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6811      	ldr	r1, [r2, #0]
 8008e7c:	40ab      	lsls	r3, r5
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e84:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008e86:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e88:	4a24      	ldr	r2, [pc, #144]	; (8008f1c <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008e8a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008f28 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008e8e:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e90:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008e92:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008e96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008e9a:	f8df c090 	ldr.w	ip, [pc, #144]	; 8008f2c <HAL_DAC_Start_DMA+0x114>
 8008e9e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008ea2:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008ea4:	d02f      	beq.n	8008f06 <HAL_DAC_Start_DMA+0xee>
 8008ea6:	2f08      	cmp	r7, #8
 8008ea8:	d024      	beq.n	8008ef4 <HAL_DAC_Start_DMA+0xdc>
 8008eaa:	b1d7      	cbz	r7, 8008ee2 <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008eac:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008eae:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008eb0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008eb4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008eb6:	f000 fcf3 	bl	80098a0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008eba:	2300      	movs	r3, #0
 8008ebc:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d0d7      	beq.n	8008e72 <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	f043 0304 	orr.w	r3, r3, #4
 8008ec8:	6123      	str	r3, [r4, #16]
}
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8008ecc:	2002      	movs	r0, #2
}
 8008ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008ed0:	f106 0208 	add.w	r2, r6, #8
        break;
 8008ed4:	e7c4      	b.n	8008e60 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008ed6:	f106 0210 	add.w	r2, r6, #16
        break;
 8008eda:	e7c1      	b.n	8008e60 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008edc:	f106 020c 	add.w	r2, r6, #12
        break;
 8008ee0:	e7be      	b.n	8008e60 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ee2:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008ee4:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ee8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008eec:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008eee:	f000 fcd7 	bl	80098a0 <HAL_DMA_Start_IT>
 8008ef2:	e7e2      	b.n	8008eba <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ef4:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008ef6:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008efa:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008efe:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008f00:	f000 fcce 	bl	80098a0 <HAL_DMA_Start_IT>
 8008f04:	e7d9      	b.n	8008eba <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008f06:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008f08:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008f0c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008f10:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008f12:	f000 fcc5 	bl	80098a0 <HAL_DMA_Start_IT>
 8008f16:	e7d0      	b.n	8008eba <HAL_DAC_Start_DMA+0xa2>
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08009161 	.word	0x08009161
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	08008f81 	.word	0x08008f81
 8008f28:	08009175 	.word	0x08009175
 8008f2c:	08009185 	.word	0x08009185

08008f30 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008f30:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008f32:	6800      	ldr	r0, [r0, #0]
{
 8008f34:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008f36:	2400      	movs	r4, #0
 8008f38:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008f3a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008f3c:	b951      	cbnz	r1, 8008f54 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008f3e:	9901      	ldr	r1, [sp, #4]
 8008f40:	3108      	adds	r1, #8
 8008f42:	440a      	add	r2, r1
 8008f44:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008f46:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8008f48:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008f4a:	6013      	str	r3, [r2, #0]
}
 8008f4c:	b003      	add	sp, #12
 8008f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f52:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008f54:	9901      	ldr	r1, [sp, #4]
 8008f56:	3114      	adds	r1, #20
 8008f58:	440a      	add	r2, r1
 8008f5a:	9201      	str	r2, [sp, #4]
 8008f5c:	e7f3      	b.n	8008f46 <HAL_DAC_SetValue+0x16>
 8008f5e:	bf00      	nop

08008f60 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008f60:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f62:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008f64:	4620      	mov	r0, r4
 8008f66:	f7fb fedf 	bl	8004d28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	7123      	strb	r3, [r4, #4]
}
 8008f6e:	bd10      	pop	{r4, pc}

08008f70 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008f70:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008f72:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008f74:	f7fb fef8 	bl	8004d68 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008f78:	bd08      	pop	{r3, pc}
 8008f7a:	bf00      	nop

08008f7c <HAL_DAC_ErrorCallbackCh1>:
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop

08008f80 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008f80:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f82:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f84:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f86:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008f88:	f043 0304 	orr.w	r3, r3, #4
 8008f8c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008f8e:	f7ff fff5 	bl	8008f7c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008f92:	2301      	movs	r3, #1
 8008f94:	7123      	strb	r3, [r4, #4]
}
 8008f96:	bd10      	pop	{r4, pc}

08008f98 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop

08008f9c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008f9c:	6803      	ldr	r3, [r0, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	0491      	lsls	r1, r2, #18
{
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008fa6:	d502      	bpl.n	8008fae <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008faa:	0492      	lsls	r2, r2, #18
 8008fac:	d418      	bmi.n	8008fe0 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	0091      	lsls	r1, r2, #2
 8008fb2:	d502      	bpl.n	8008fba <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb6:	0092      	lsls	r2, r2, #2
 8008fb8:	d400      	bmi.n	8008fbc <HAL_DAC_IRQHandler+0x20>
}
 8008fba:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008fbc:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008fbe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008fc2:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008fc4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008fc6:	6922      	ldr	r2, [r4, #16]
 8008fc8:	f042 0202 	orr.w	r2, r2, #2
 8008fcc:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008fce:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008fda:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008fdc:	f000 b8de 	b.w	800919c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008fe0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008fe6:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008fe8:	6902      	ldr	r2, [r0, #16]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008ff0:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ff8:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008ffa:	f7ff ffcd 	bl	8008f98 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	e7d5      	b.n	8008fae <HAL_DAC_IRQHandler+0x12>
 8009002:	bf00      	nop

08009004 <HAL_DAC_ConfigChannel>:
{
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8009008:	7943      	ldrb	r3, [r0, #5]
{
 800900a:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800900c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800900e:	2b01      	cmp	r3, #1
 8009010:	f000 8097 	beq.w	8009142 <HAL_DAC_ConfigChannel+0x13e>
 8009014:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009016:	2904      	cmp	r1, #4
 8009018:	4605      	mov	r5, r0
 800901a:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 800901c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800901e:	f04f 0302 	mov.w	r3, #2
 8009022:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009024:	d044      	beq.n	80090b0 <HAL_DAC_ConfigChannel+0xac>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009026:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800902a:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800902c:	6933      	ldr	r3, [r6, #16]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d108      	bne.n	8009044 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009032:	231f      	movs	r3, #31
    tmpreg1 = hdac->Instance->CCR;
 8009034:	6b84      	ldr	r4, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009036:	4093      	lsls	r3, r2
 8009038:	ea24 0403 	bic.w	r4, r4, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800903c:	6973      	ldr	r3, [r6, #20]
 800903e:	4093      	lsls	r3, r2
 8009040:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 8009042:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009044:	2307      	movs	r3, #7
  tmpreg1 = hdac->Instance->MCR;
 8009046:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009048:	4093      	lsls	r3, r2
 800904a:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800904e:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009052:	2b01      	cmp	r3, #1
 8009054:	d028      	beq.n	80090a8 <HAL_DAC_ConfigChannel+0xa4>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009056:	2b02      	cmp	r3, #2
 8009058:	d028      	beq.n	80090ac <HAL_DAC_ConfigChannel+0xa8>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800905a:	fab7 f387 	clz	r3, r7
 800905e:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009060:	433b      	orrs	r3, r7
 8009062:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009064:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009066:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009068:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800906a:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800906c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 8009070:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009072:	4094      	lsls	r4, r2
 8009074:	6803      	ldr	r3, [r0, #0]
 8009076:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800907a:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800907e:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009080:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 8009082:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009084:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 8009088:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800908a:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800908c:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 800908e:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009090:	fa01 f202 	lsl.w	r2, r1, r2
 8009094:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(hdac);
 8009096:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009098:	ea23 0302 	bic.w	r3, r3, r2
 800909c:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 800909e:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80090a0:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 80090a2:	7169      	strb	r1, [r5, #5]
}
 80090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e7d9      	b.n	8009060 <HAL_DAC_ConfigChannel+0x5c>
    connectOnChip = DAC_MCR_MODE1_0;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7d7      	b.n	8009060 <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 80090b0:	f7fe fa6a 	bl	8007588 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090b4:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80090b6:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80090ba:	bb1c      	cbnz	r4, 8009104 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090bc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009158 <HAL_DAC_ConfigChannel+0x154>
 80090c0:	ea13 0f08 	tst.w	r3, r8
 80090c4:	d00d      	beq.n	80090e2 <HAL_DAC_ConfigChannel+0xde>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090c6:	f7fe fa5f 	bl	8007588 <HAL_GetTick>
 80090ca:	1bc3      	subs	r3, r0, r7
 80090cc:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090ce:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090d0:	d903      	bls.n	80090da <HAL_DAC_ConfigChannel+0xd6>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d4:	ea12 0f08 	tst.w	r2, r8
 80090d8:	d136      	bne.n	8009148 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	ea13 0f08 	tst.w	r3, r8
 80090e0:	d1f1      	bne.n	80090c6 <HAL_DAC_ConfigChannel+0xc2>
      HAL_Delay(1);
 80090e2:	2001      	movs	r0, #1
 80090e4:	f7fe fa56 	bl	8007594 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80090e8:	6828      	ldr	r0, [r5, #0]
 80090ea:	69b3      	ldr	r3, [r6, #24]
 80090ec:	6403      	str	r3, [r0, #64]	; 0x40
 80090ee:	e011      	b.n	8009114 <HAL_DAC_ConfigChannel+0x110>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090f0:	f7fe fa4a 	bl	8007588 <HAL_GetTick>
 80090f4:	1bc3      	subs	r3, r0, r7
 80090f6:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80090f8:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80090fa:	d902      	bls.n	8009102 <HAL_DAC_ConfigChannel+0xfe>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80090fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fe:	2a00      	cmp	r2, #0
 8009100:	db22      	blt.n	8009148 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009104:	2b00      	cmp	r3, #0
 8009106:	dbf3      	blt.n	80090f0 <HAL_DAC_ConfigChannel+0xec>
      HAL_Delay(1U);
 8009108:	2001      	movs	r0, #1
 800910a:	f7fe fa43 	bl	8007594 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800910e:	6828      	ldr	r0, [r5, #0]
 8009110:	69b3      	ldr	r3, [r6, #24]
 8009112:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009114:	f004 0210 	and.w	r2, r4, #16
 8009118:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800911c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800911e:	4091      	lsls	r1, r2
 8009120:	ea23 0301 	bic.w	r3, r3, r1
 8009124:	69f1      	ldr	r1, [r6, #28]
 8009126:	4091      	lsls	r1, r2
 8009128:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800912a:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800912c:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800912e:	4091      	lsls	r1, r2
 8009130:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009132:	ea23 0301 	bic.w	r3, r3, r1
 8009136:	6a31      	ldr	r1, [r6, #32]
 8009138:	4091      	lsls	r1, r2
 800913a:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800913c:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800913e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009140:	e774      	b.n	800902c <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8009142:	2002      	movs	r0, #2
}
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009148:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800914a:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800914c:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 8009150:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009152:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009154:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8009156:	e7a5      	b.n	80090a4 <HAL_DAC_ConfigChannel+0xa0>
 8009158:	20008000 	.word	0x20008000

0800915c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop

08009160 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009160:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009162:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff fff9 	bl	800915c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800916a:	2301      	movs	r3, #1
 800916c:	7123      	strb	r3, [r4, #4]
}
 800916e:	bd10      	pop	{r4, pc}

08009170 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop

08009174 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009174:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009176:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009178:	f7ff fffa 	bl	8009170 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800917c:	bd08      	pop	{r3, pc}
 800917e:	bf00      	nop

08009180 <HAL_DACEx_ErrorCallbackCh2>:
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop

08009184 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009184:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009186:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009188:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800918a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800918c:	f043 0304 	orr.w	r3, r3, #4
 8009190:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009192:	f7ff fff5 	bl	8009180 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009196:	2301      	movs	r3, #1
 8009198:	7123      	strb	r3, [r4, #4]
}
 800919a:	bd10      	pop	{r4, pc}

0800919c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop

080091a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091a0:	6802      	ldr	r2, [r0, #0]
{
 80091a2:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091a4:	4b32      	ldr	r3, [pc, #200]	; (8009270 <DMA_CalcBaseAndBitshift+0xd0>)
 80091a6:	4833      	ldr	r0, [pc, #204]	; (8009274 <DMA_CalcBaseAndBitshift+0xd4>)
{
 80091a8:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091aa:	4e33      	ldr	r6, [pc, #204]	; (8009278 <DMA_CalcBaseAndBitshift+0xd8>)
 80091ac:	4d33      	ldr	r5, [pc, #204]	; (800927c <DMA_CalcBaseAndBitshift+0xdc>)
 80091ae:	42b2      	cmp	r2, r6
 80091b0:	bf18      	it	ne
 80091b2:	429a      	cmpne	r2, r3
 80091b4:	4c32      	ldr	r4, [pc, #200]	; (8009280 <DMA_CalcBaseAndBitshift+0xe0>)
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	42aa      	cmp	r2, r5
 80091be:	bf08      	it	eq
 80091c0:	f043 0301 	orreq.w	r3, r3, #1
 80091c4:	42a2      	cmp	r2, r4
 80091c6:	bf08      	it	eq
 80091c8:	f043 0301 	orreq.w	r3, r3, #1
 80091cc:	3430      	adds	r4, #48	; 0x30
 80091ce:	4282      	cmp	r2, r0
 80091d0:	bf08      	it	eq
 80091d2:	f043 0301 	orreq.w	r3, r3, #1
 80091d6:	3030      	adds	r0, #48	; 0x30
 80091d8:	42a2      	cmp	r2, r4
 80091da:	bf08      	it	eq
 80091dc:	f043 0301 	orreq.w	r3, r3, #1
 80091e0:	3430      	adds	r4, #48	; 0x30
 80091e2:	4282      	cmp	r2, r0
 80091e4:	bf08      	it	eq
 80091e6:	f043 0301 	orreq.w	r3, r3, #1
 80091ea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80091ee:	42a2      	cmp	r2, r4
 80091f0:	bf08      	it	eq
 80091f2:	f043 0301 	orreq.w	r3, r3, #1
 80091f6:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80091fa:	4282      	cmp	r2, r0
 80091fc:	bf08      	it	eq
 80091fe:	f043 0301 	orreq.w	r3, r3, #1
 8009202:	3030      	adds	r0, #48	; 0x30
 8009204:	42a2      	cmp	r2, r4
 8009206:	bf08      	it	eq
 8009208:	f043 0301 	orreq.w	r3, r3, #1
 800920c:	3430      	adds	r4, #48	; 0x30
 800920e:	4282      	cmp	r2, r0
 8009210:	bf08      	it	eq
 8009212:	f043 0301 	orreq.w	r3, r3, #1
 8009216:	3030      	adds	r0, #48	; 0x30
 8009218:	42a2      	cmp	r2, r4
 800921a:	bf08      	it	eq
 800921c:	f043 0301 	orreq.w	r3, r3, #1
 8009220:	3430      	adds	r4, #48	; 0x30
 8009222:	4282      	cmp	r2, r0
 8009224:	bf08      	it	eq
 8009226:	f043 0301 	orreq.w	r3, r3, #1
 800922a:	3030      	adds	r0, #48	; 0x30
 800922c:	42a2      	cmp	r2, r4
 800922e:	bf08      	it	eq
 8009230:	f043 0301 	orreq.w	r3, r3, #1
 8009234:	4282      	cmp	r2, r0
 8009236:	bf08      	it	eq
 8009238:	f043 0301 	orreq.w	r3, r3, #1
 800923c:	b913      	cbnz	r3, 8009244 <DMA_CalcBaseAndBitshift+0xa4>
 800923e:	4b11      	ldr	r3, [pc, #68]	; (8009284 <DMA_CalcBaseAndBitshift+0xe4>)
 8009240:	429a      	cmp	r2, r3
 8009242:	d112      	bne.n	800926a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009244:	b2d3      	uxtb	r3, r2
 8009246:	4810      	ldr	r0, [pc, #64]	; (8009288 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009248:	4c10      	ldr	r4, [pc, #64]	; (800928c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800924a:	3b10      	subs	r3, #16
 800924c:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8009250:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009252:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009256:	5c20      	ldrb	r0, [r4, r0]
 8009258:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800925a:	480d      	ldr	r0, [pc, #52]	; (8009290 <DMA_CalcBaseAndBitshift+0xf0>)
 800925c:	ea00 0002 	and.w	r0, r0, r2
 8009260:	bf88      	it	hi
 8009262:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009264:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8009266:	bc70      	pop	{r4, r5, r6}
 8009268:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800926a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800926e:	e7f9      	b.n	8009264 <DMA_CalcBaseAndBitshift+0xc4>
 8009270:	40020010 	.word	0x40020010
 8009274:	40020070 	.word	0x40020070
 8009278:	40020028 	.word	0x40020028
 800927c:	40020040 	.word	0x40020040
 8009280:	40020058 	.word	0x40020058
 8009284:	400204b8 	.word	0x400204b8
 8009288:	aaaaaaab 	.word	0xaaaaaaab
 800928c:	080197cc 	.word	0x080197cc
 8009290:	fffffc00 	.word	0xfffffc00

08009294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009294:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009296:	4a27      	ldr	r2, [pc, #156]	; (8009334 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8009298:	4927      	ldr	r1, [pc, #156]	; (8009338 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800929a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800929c:	4d27      	ldr	r5, [pc, #156]	; (800933c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800929e:	4c28      	ldr	r4, [pc, #160]	; (8009340 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80092a0:	42ab      	cmp	r3, r5
 80092a2:	bf18      	it	ne
 80092a4:	4293      	cmpne	r3, r2
 80092a6:	bf0c      	ite	eq
 80092a8:	2201      	moveq	r2, #1
 80092aa:	2200      	movne	r2, #0
 80092ac:	428b      	cmp	r3, r1
 80092ae:	bf08      	it	eq
 80092b0:	f042 0201 	orreq.w	r2, r2, #1
 80092b4:	3128      	adds	r1, #40	; 0x28
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	bf08      	it	eq
 80092ba:	f042 0201 	orreq.w	r2, r2, #1
 80092be:	3428      	adds	r4, #40	; 0x28
 80092c0:	428b      	cmp	r3, r1
 80092c2:	bf08      	it	eq
 80092c4:	f042 0201 	orreq.w	r2, r2, #1
 80092c8:	3128      	adds	r1, #40	; 0x28
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	bf08      	it	eq
 80092ce:	f042 0201 	orreq.w	r2, r2, #1
 80092d2:	428b      	cmp	r3, r1
 80092d4:	bf08      	it	eq
 80092d6:	f042 0201 	orreq.w	r2, r2, #1
 80092da:	b912      	cbnz	r2, 80092e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d113      	bne.n	800930a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4918      	ldr	r1, [pc, #96]	; (8009348 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092e6:	4a19      	ldr	r2, [pc, #100]	; (800934c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092e8:	3b08      	subs	r3, #8
 80092ea:	4c19      	ldr	r4, [pc, #100]	; (8009350 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 80092ec:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092f0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092f2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092f6:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092fa:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009302:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009306:	bc30      	pop	{r4, r5}
 8009308:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800930a:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800930e:	4c12      	ldr	r4, [pc, #72]	; (8009358 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8009310:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009312:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009314:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009318:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800931a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800931e:	d800      	bhi.n	8009322 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8009320:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009322:	4a0e      	ldr	r2, [pc, #56]	; (800935c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009324:	f001 041f 	and.w	r4, r1, #31
 8009328:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800932a:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800932c:	40a3      	lsls	r3, r4
 800932e:	4c0c      	ldr	r4, [pc, #48]	; (8009360 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009330:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009332:	e7e5      	b.n	8009300 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8009334:	58025408 	.word	0x58025408
 8009338:	58025430 	.word	0x58025430
 800933c:	5802541c 	.word	0x5802541c
 8009340:	58025444 	.word	0x58025444
 8009344:	58025494 	.word	0x58025494
 8009348:	cccccccd 	.word	0xcccccccd
 800934c:	16009600 	.word	0x16009600
 8009350:	58025880 	.word	0x58025880
 8009354:	bffdfbf0 	.word	0xbffdfbf0
 8009358:	aaaaaaab 	.word	0xaaaaaaab
 800935c:	10008200 	.word	0x10008200
 8009360:	40020880 	.word	0x40020880

08009364 <HAL_DMA_Init>:
{
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4605      	mov	r5, r0
 800936a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800936c:	f7fe f90c 	bl	8007588 <HAL_GetTick>
  if(hdma == NULL)
 8009370:	2d00      	cmp	r5, #0
 8009372:	f000 8199 	beq.w	80096a8 <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009376:	682c      	ldr	r4, [r5, #0]
 8009378:	4606      	mov	r6, r0
 800937a:	4ba0      	ldr	r3, [pc, #640]	; (80095fc <HAL_DMA_Init+0x298>)
 800937c:	429c      	cmp	r4, r3
 800937e:	d048      	beq.n	8009412 <HAL_DMA_Init+0xae>
 8009380:	3318      	adds	r3, #24
 8009382:	429c      	cmp	r4, r3
 8009384:	d045      	beq.n	8009412 <HAL_DMA_Init+0xae>
 8009386:	3330      	adds	r3, #48	; 0x30
 8009388:	4a9d      	ldr	r2, [pc, #628]	; (8009600 <HAL_DMA_Init+0x29c>)
 800938a:	4294      	cmp	r4, r2
 800938c:	bf18      	it	ne
 800938e:	429c      	cmpne	r4, r3
 8009390:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8009394:	bf0c      	ite	eq
 8009396:	2301      	moveq	r3, #1
 8009398:	2300      	movne	r3, #0
 800939a:	4294      	cmp	r4, r2
 800939c:	bf08      	it	eq
 800939e:	f043 0301 	orreq.w	r3, r3, #1
 80093a2:	3218      	adds	r2, #24
 80093a4:	4294      	cmp	r4, r2
 80093a6:	bf08      	it	eq
 80093a8:	f043 0301 	orreq.w	r3, r3, #1
 80093ac:	3218      	adds	r2, #24
 80093ae:	4294      	cmp	r4, r2
 80093b0:	bf08      	it	eq
 80093b2:	f043 0301 	orreq.w	r3, r3, #1
 80093b6:	3218      	adds	r2, #24
 80093b8:	4294      	cmp	r4, r2
 80093ba:	bf08      	it	eq
 80093bc:	f043 0301 	orreq.w	r3, r3, #1
 80093c0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80093c4:	4294      	cmp	r4, r2
 80093c6:	bf08      	it	eq
 80093c8:	f043 0301 	orreq.w	r3, r3, #1
 80093cc:	3218      	adds	r2, #24
 80093ce:	4294      	cmp	r4, r2
 80093d0:	bf08      	it	eq
 80093d2:	f043 0301 	orreq.w	r3, r3, #1
 80093d6:	3218      	adds	r2, #24
 80093d8:	4294      	cmp	r4, r2
 80093da:	bf08      	it	eq
 80093dc:	f043 0301 	orreq.w	r3, r3, #1
 80093e0:	3218      	adds	r2, #24
 80093e2:	4294      	cmp	r4, r2
 80093e4:	bf08      	it	eq
 80093e6:	f043 0301 	orreq.w	r3, r3, #1
 80093ea:	3218      	adds	r2, #24
 80093ec:	4294      	cmp	r4, r2
 80093ee:	bf08      	it	eq
 80093f0:	f043 0301 	orreq.w	r3, r3, #1
 80093f4:	3218      	adds	r2, #24
 80093f6:	4294      	cmp	r4, r2
 80093f8:	bf08      	it	eq
 80093fa:	f043 0301 	orreq.w	r3, r3, #1
 80093fe:	3218      	adds	r2, #24
 8009400:	4294      	cmp	r4, r2
 8009402:	bf08      	it	eq
 8009404:	f043 0301 	orreq.w	r3, r3, #1
 8009408:	b91b      	cbnz	r3, 8009412 <HAL_DMA_Init+0xae>
 800940a:	4b7e      	ldr	r3, [pc, #504]	; (8009604 <HAL_DMA_Init+0x2a0>)
 800940c:	429c      	cmp	r4, r3
 800940e:	f040 81a4 	bne.w	800975a <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009412:	2302      	movs	r3, #2
 8009414:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009418:	2300      	movs	r3, #0
 800941a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f023 0301 	bic.w	r3, r3, #1
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	e006      	b.n	8009436 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009428:	f7fe f8ae 	bl	8007588 <HAL_GetTick>
 800942c:	1b80      	subs	r0, r0, r6
 800942e:	2805      	cmp	r0, #5
 8009430:	f200 8120 	bhi.w	8009674 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009434:	682c      	ldr	r4, [r5, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	07df      	lsls	r7, r3, #31
 800943a:	d4f5      	bmi.n	8009428 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 800943c:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009440:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8009442:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009444:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009446:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009448:	430b      	orrs	r3, r1
 800944a:	6969      	ldr	r1, [r5, #20]
 800944c:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800944e:	69e9      	ldr	r1, [r5, #28]
 8009450:	4313      	orrs	r3, r2
 8009452:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009454:	496c      	ldr	r1, [pc, #432]	; (8009608 <HAL_DMA_Init+0x2a4>)
 8009456:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8009458:	6a28      	ldr	r0, [r5, #32]
 800945a:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800945c:	486b      	ldr	r0, [pc, #428]	; (800960c <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 800945e:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009460:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009462:	2904      	cmp	r1, #4
 8009464:	f000 8124 	beq.w	80096b0 <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009468:	6806      	ldr	r6, [r0, #0]
 800946a:	4869      	ldr	r0, [pc, #420]	; (8009610 <HAL_DMA_Init+0x2ac>)
 800946c:	4030      	ands	r0, r6
 800946e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8009472:	f080 80dd 	bcs.w	8009630 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009476:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009478:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800947a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800947e:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009480:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fe8c 	bl	80091a0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009488:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800948a:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800948c:	495b      	ldr	r1, [pc, #364]	; (80095fc <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800948e:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009492:	4e60      	ldr	r6, [pc, #384]	; (8009614 <HAL_DMA_Init+0x2b0>)
 8009494:	4f60      	ldr	r7, [pc, #384]	; (8009618 <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009496:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009498:	4a60      	ldr	r2, [pc, #384]	; (800961c <HAL_DMA_Init+0x2b8>)
 800949a:	1ba6      	subs	r6, r4, r6
 800949c:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800949e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094a0:	eba4 0b02 	sub.w	fp, r4, r2
 80094a4:	4b5e      	ldr	r3, [pc, #376]	; (8009620 <HAL_DMA_Init+0x2bc>)
 80094a6:	fab6 f686 	clz	r6, r6
 80094aa:	fabb fb8b 	clz	fp, fp
 80094ae:	fab7 f787 	clz	r7, r7
 80094b2:	eba4 0a03 	sub.w	sl, r4, r3
 80094b6:	4b5b      	ldr	r3, [pc, #364]	; (8009624 <HAL_DMA_Init+0x2c0>)
 80094b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80094bc:	485a      	ldr	r0, [pc, #360]	; (8009628 <HAL_DMA_Init+0x2c4>)
 80094be:	429c      	cmp	r4, r3
 80094c0:	bf18      	it	ne
 80094c2:	428c      	cmpne	r4, r1
 80094c4:	f103 0318 	add.w	r3, r3, #24
 80094c8:	faba fa8a 	clz	sl, sl
 80094cc:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80094d0:	bf0c      	ite	eq
 80094d2:	2101      	moveq	r1, #1
 80094d4:	2100      	movne	r1, #0
 80094d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80094da:	1a22      	subs	r2, r4, r0
 80094dc:	429c      	cmp	r4, r3
 80094de:	bf08      	it	eq
 80094e0:	f041 0101 	orreq.w	r1, r1, #1
 80094e4:	3318      	adds	r3, #24
 80094e6:	097f      	lsrs	r7, r7, #5
 80094e8:	fab2 f282 	clz	r2, r2
 80094ec:	429c      	cmp	r4, r3
 80094ee:	bf08      	it	eq
 80094f0:	f041 0101 	orreq.w	r1, r1, #1
 80094f4:	3318      	adds	r3, #24
 80094f6:	0952      	lsrs	r2, r2, #5
 80094f8:	429c      	cmp	r4, r3
 80094fa:	bf08      	it	eq
 80094fc:	f041 0101 	orreq.w	r1, r1, #1
 8009500:	3318      	adds	r3, #24
 8009502:	9201      	str	r2, [sp, #4]
 8009504:	429c      	cmp	r4, r3
 8009506:	bf08      	it	eq
 8009508:	f041 0101 	orreq.w	r1, r1, #1
 800950c:	3318      	adds	r3, #24
 800950e:	429c      	cmp	r4, r3
 8009510:	bf08      	it	eq
 8009512:	f041 0101 	orreq.w	r1, r1, #1
 8009516:	3318      	adds	r3, #24
 8009518:	429c      	cmp	r4, r3
 800951a:	bf08      	it	eq
 800951c:	f041 0101 	orreq.w	r1, r1, #1
 8009520:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009524:	429c      	cmp	r4, r3
 8009526:	bf08      	it	eq
 8009528:	f041 0101 	orreq.w	r1, r1, #1
 800952c:	3318      	adds	r3, #24
 800952e:	429c      	cmp	r4, r3
 8009530:	bf08      	it	eq
 8009532:	f041 0101 	orreq.w	r1, r1, #1
 8009536:	3318      	adds	r3, #24
 8009538:	429c      	cmp	r4, r3
 800953a:	bf08      	it	eq
 800953c:	f041 0101 	orreq.w	r1, r1, #1
 8009540:	3318      	adds	r3, #24
 8009542:	429c      	cmp	r4, r3
 8009544:	bf08      	it	eq
 8009546:	f041 0101 	orreq.w	r1, r1, #1
 800954a:	3318      	adds	r3, #24
 800954c:	429c      	cmp	r4, r3
 800954e:	bf08      	it	eq
 8009550:	f041 0101 	orreq.w	r1, r1, #1
 8009554:	3318      	adds	r3, #24
 8009556:	429c      	cmp	r4, r3
 8009558:	bf08      	it	eq
 800955a:	f041 0101 	orreq.w	r1, r1, #1
 800955e:	3318      	adds	r3, #24
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	f041 0101 	orreq.w	r1, r1, #1
 8009568:	3318      	adds	r3, #24
 800956a:	429c      	cmp	r4, r3
 800956c:	bf08      	it	eq
 800956e:	f041 0101 	orreq.w	r1, r1, #1
 8009572:	4b2e      	ldr	r3, [pc, #184]	; (800962c <HAL_DMA_Init+0x2c8>)
 8009574:	ea4b 0101 	orr.w	r1, fp, r1
 8009578:	eba4 0803 	sub.w	r8, r4, r3
 800957c:	3314      	adds	r3, #20
 800957e:	ea4a 0101 	orr.w	r1, sl, r1
 8009582:	fab8 f888 	clz	r8, r8
 8009586:	eba4 0903 	sub.w	r9, r4, r3
 800958a:	3314      	adds	r3, #20
 800958c:	4331      	orrs	r1, r6
 800958e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009592:	fab9 f989 	clz	r9, r9
 8009596:	1ae3      	subs	r3, r4, r3
 8009598:	4339      	orrs	r1, r7
 800959a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800959e:	fab3 f383 	clz	r3, r3
 80095a2:	ea48 0101 	orr.w	r1, r8, r1
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	ea49 0101 	orr.w	r1, r9, r1
 80095ac:	4319      	orrs	r1, r3
 80095ae:	d100      	bne.n	80095b2 <HAL_DMA_Init+0x24e>
 80095b0:	b1da      	cbz	r2, 80095ea <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80095b2:	4628      	mov	r0, r5
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	f7ff fe6d 	bl	8009294 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80095ba:	68a9      	ldr	r1, [r5, #8]
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2980      	cmp	r1, #128	; 0x80
 80095c0:	d066      	beq.n	8009690 <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80095c2:	6868      	ldr	r0, [r5, #4]
 80095c4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80095c6:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80095c8:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095ca:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80095ce:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80095d0:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095d2:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80095d6:	d862      	bhi.n	800969e <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80095d8:	1e61      	subs	r1, r4, #1
 80095da:	2907      	cmp	r1, #7
 80095dc:	d979      	bls.n	80096d2 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095de:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80095e0:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80095e4:	2100      	movs	r1, #0
 80095e6:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095e8:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095ea:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80095ec:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095ee:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80095f0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80095f4:	b003      	add	sp, #12
 80095f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fa:	bf00      	nop
 80095fc:	40020010 	.word	0x40020010
 8009600:	40020040 	.word	0x40020040
 8009604:	400204b8 	.word	0x400204b8
 8009608:	fe10803f 	.word	0xfe10803f
 800960c:	5c001000 	.word	0x5c001000
 8009610:	ffff0000 	.word	0xffff0000
 8009614:	58025430 	.word	0x58025430
 8009618:	58025444 	.word	0x58025444
 800961c:	58025408 	.word	0x58025408
 8009620:	5802541c 	.word	0x5802541c
 8009624:	40020028 	.word	0x40020028
 8009628:	58025494 	.word	0x58025494
 800962c:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009630:	6868      	ldr	r0, [r5, #4]
 8009632:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8009636:	2e1f      	cmp	r6, #31
 8009638:	d925      	bls.n	8009686 <HAL_DMA_Init+0x322>
 800963a:	384f      	subs	r0, #79	; 0x4f
 800963c:	2803      	cmp	r0, #3
 800963e:	d801      	bhi.n	8009644 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8009640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009644:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009646:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009648:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800964a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800964e:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009652:	f47f af15 	bne.w	8009480 <HAL_DMA_Init+0x11c>
 8009656:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8009658:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800965a:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800965c:	2800      	cmp	r0, #0
 800965e:	f43f af0f 	beq.w	8009480 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009662:	2a00      	cmp	r2, #0
 8009664:	d153      	bne.n	800970e <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8009666:	2901      	cmp	r1, #1
 8009668:	d072      	beq.n	8009750 <HAL_DMA_Init+0x3ec>
 800966a:	f031 0202 	bics.w	r2, r1, #2
 800966e:	f47f af07 	bne.w	8009480 <HAL_DMA_Init+0x11c>
 8009672:	e054      	b.n	800971e <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009674:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009676:	2303      	movs	r3, #3
        return HAL_ERROR;
 8009678:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800967a:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800967c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8009680:	b003      	add	sp, #12
 8009682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009686:	4878      	ldr	r0, [pc, #480]	; (8009868 <HAL_DMA_Init+0x504>)
 8009688:	40f0      	lsrs	r0, r6
 800968a:	07c0      	lsls	r0, r0, #31
 800968c:	d5da      	bpl.n	8009644 <HAL_DMA_Init+0x2e0>
 800968e:	e7d7      	b.n	8009640 <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009690:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009692:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8009694:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009698:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800969a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800969c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800969e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80096a0:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80096a4:	676b      	str	r3, [r5, #116]	; 0x74
 80096a6:	e7a0      	b.n	80095ea <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 80096a8:	2001      	movs	r0, #1
}
 80096aa:	b003      	add	sp, #12
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096b0:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80096b2:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 80096b6:	4306      	orrs	r6, r0
 80096b8:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096ba:	4e6c      	ldr	r6, [pc, #432]	; (800986c <HAL_DMA_Init+0x508>)
 80096bc:	403e      	ands	r6, r7
 80096be:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80096c2:	d2b5      	bcs.n	8009630 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80096c4:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80096c6:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80096c8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80096cc:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096d0:	e7c2      	b.n	8009658 <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	431a      	orrs	r2, r3
 80096d6:	ea49 0902 	orr.w	r9, r9, r2
 80096da:	ea48 0809 	orr.w	r8, r8, r9
 80096de:	ea47 0708 	orr.w	r7, r7, r8
 80096e2:	433e      	orrs	r6, r7
 80096e4:	ea5a 0606 	orrs.w	r6, sl, r6
 80096e8:	d107      	bne.n	80096fa <HAL_DMA_Init+0x396>
 80096ea:	f1bb 0f00 	cmp.w	fp, #0
 80096ee:	d104      	bne.n	80096fa <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80096f0:	4b5f      	ldr	r3, [pc, #380]	; (8009870 <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096f2:	4860      	ldr	r0, [pc, #384]	; (8009874 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80096f4:	4423      	add	r3, r4
 80096f6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096f8:	e003      	b.n	8009702 <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80096fa:	4b5f      	ldr	r3, [pc, #380]	; (8009878 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80096fc:	485f      	ldr	r0, [pc, #380]	; (800987c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80096fe:	4423      	add	r3, r4
 8009700:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009702:	2201      	movs	r2, #1
 8009704:	408a      	lsls	r2, r1
 8009706:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 800970a:	676a      	str	r2, [r5, #116]	; 0x74
 800970c:	e76a      	b.n	80095e4 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800970e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009712:	d00e      	beq.n	8009732 <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 8009714:	2902      	cmp	r1, #2
 8009716:	d905      	bls.n	8009724 <HAL_DMA_Init+0x3c0>
 8009718:	2903      	cmp	r1, #3
 800971a:	f47f aeb1 	bne.w	8009480 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800971e:	01c2      	lsls	r2, r0, #7
 8009720:	f57f aeae 	bpl.w	8009480 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8009724:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009726:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8009728:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800972a:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800972c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8009730:	e7a6      	b.n	8009680 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8009732:	2903      	cmp	r1, #3
 8009734:	f63f aea4 	bhi.w	8009480 <HAL_DMA_Init+0x11c>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <HAL_DMA_Init+0x3dc>)
 800973a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009725 	.word	0x08009725
 8009744:	0800971f 	.word	0x0800971f
 8009748:	08009725 	.word	0x08009725
 800974c:	08009751 	.word	0x08009751
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009750:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8009754:	f47f ae94 	bne.w	8009480 <HAL_DMA_Init+0x11c>
 8009758:	e7e4      	b.n	8009724 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800975a:	4a49      	ldr	r2, [pc, #292]	; (8009880 <HAL_DMA_Init+0x51c>)
 800975c:	4b49      	ldr	r3, [pc, #292]	; (8009884 <HAL_DMA_Init+0x520>)
 800975e:	eba4 0b02 	sub.w	fp, r4, r2
 8009762:	4e49      	ldr	r6, [pc, #292]	; (8009888 <HAL_DMA_Init+0x524>)
 8009764:	eba4 0a03 	sub.w	sl, r4, r3
 8009768:	4f48      	ldr	r7, [pc, #288]	; (800988c <HAL_DMA_Init+0x528>)
 800976a:	fabb fb8b 	clz	fp, fp
 800976e:	1ba6      	subs	r6, r4, r6
 8009770:	faba fa8a 	clz	sl, sl
 8009774:	333c      	adds	r3, #60	; 0x3c
 8009776:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800977a:	fab6 f686 	clz	r6, r6
 800977e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8009782:	1be7      	subs	r7, r4, r7
 8009784:	eba4 0803 	sub.w	r8, r4, r3
 8009788:	0976      	lsrs	r6, r6, #5
 800978a:	3314      	adds	r3, #20
 800978c:	fab7 f787 	clz	r7, r7
 8009790:	ea4b 010a 	orr.w	r1, fp, sl
 8009794:	fab8 f888 	clz	r8, r8
 8009798:	eba4 0903 	sub.w	r9, r4, r3
 800979c:	097f      	lsrs	r7, r7, #5
 800979e:	4331      	orrs	r1, r6
 80097a0:	3314      	adds	r3, #20
 80097a2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80097a6:	fab9 f989 	clz	r9, r9
 80097aa:	4339      	orrs	r1, r7
 80097ac:	1ae3      	subs	r3, r4, r3
 80097ae:	4838      	ldr	r0, [pc, #224]	; (8009890 <HAL_DMA_Init+0x52c>)
 80097b0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80097b4:	ea48 0101 	orr.w	r1, r8, r1
 80097b8:	fab3 f383 	clz	r3, r3
 80097bc:	1a22      	subs	r2, r4, r0
 80097be:	ea49 0101 	orr.w	r1, r9, r1
 80097c2:	095b      	lsrs	r3, r3, #5
 80097c4:	fab2 f282 	clz	r2, r2
 80097c8:	4319      	orrs	r1, r3
 80097ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80097ce:	9201      	str	r2, [sp, #4]
 80097d0:	d101      	bne.n	80097d6 <HAL_DMA_Init+0x472>
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d041      	beq.n	800985a <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 80097d6:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80097d8:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800989c <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 80097dc:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80097e0:	2100      	movs	r1, #0
 80097e2:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80097e6:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80097e8:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80097ec:	68a9      	ldr	r1, [r5, #8]
 80097ee:	2940      	cmp	r1, #64	; 0x40
 80097f0:	d030      	beq.n	8009854 <HAL_DMA_Init+0x4f0>
 80097f2:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 80097f6:	fab1 f181 	clz	r1, r1
 80097fa:	0949      	lsrs	r1, r1, #5
 80097fc:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009800:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009802:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009804:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009806:	4a23      	ldr	r2, [pc, #140]	; (8009894 <HAL_DMA_Init+0x530>)
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800980e:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009810:	4422      	add	r2, r4
 8009812:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009816:	69a9      	ldr	r1, [r5, #24]
 8009818:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800981c:	69e9      	ldr	r1, [r5, #28]
 800981e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009822:	6a29      	ldr	r1, [r5, #32]
 8009824:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8009828:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800982c:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009830:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009832:	4919      	ldr	r1, [pc, #100]	; (8009898 <HAL_DMA_Init+0x534>)
 8009834:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009838:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800983a:	0909      	lsrs	r1, r1, #4
 800983c:	0089      	lsls	r1, r1, #2
 800983e:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009840:	f7ff fcae 	bl	80091a0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009844:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8009846:	9b00      	ldr	r3, [sp, #0]
 8009848:	f001 041f 	and.w	r4, r1, #31
 800984c:	2101      	movs	r1, #1
 800984e:	40a1      	lsls	r1, r4
 8009850:	6041      	str	r1, [r0, #4]
 8009852:	e6ae      	b.n	80095b2 <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009854:	f04f 0e10 	mov.w	lr, #16
 8009858:	e7d2      	b.n	8009800 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800985a:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800985c:	2303      	movs	r3, #3
    return HAL_ERROR;
 800985e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009860:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009862:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8009866:	e70b      	b.n	8009680 <HAL_DMA_Init+0x31c>
 8009868:	c3c0003f 	.word	0xc3c0003f
 800986c:	ffff0000 	.word	0xffff0000
 8009870:	1000823f 	.word	0x1000823f
 8009874:	40020940 	.word	0x40020940
 8009878:	1600963f 	.word	0x1600963f
 800987c:	58025940 	.word	0x58025940
 8009880:	58025408 	.word	0x58025408
 8009884:	5802541c 	.word	0x5802541c
 8009888:	58025430 	.word	0x58025430
 800988c:	58025444 	.word	0x58025444
 8009890:	58025494 	.word	0x58025494
 8009894:	a7fdabf8 	.word	0xa7fdabf8
 8009898:	cccccccd 	.word	0xcccccccd
 800989c:	fffe000f 	.word	0xfffe000f

080098a0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f000 8177 	beq.w	8009b94 <HAL_DMA_Start_IT+0x2f4>
 80098a6:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 80098a8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80098ac:	2801      	cmp	r0, #1
 80098ae:	f000 8173 	beq.w	8009b98 <HAL_DMA_Start_IT+0x2f8>
 80098b2:	2001      	movs	r0, #1
{
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 80098b8:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 80098bc:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80098c0:	4284      	cmp	r4, r0
 80098c2:	d008      	beq.n	80098d6 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80098c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80098c8:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80098ca:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80098ce:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80098d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80098d6:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80098d8:	f8dc 4000 	ldr.w	r4, [ip]
 80098dc:	4d53      	ldr	r5, [pc, #332]	; (8009a2c <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80098de:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098e2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80098e4:	4e52      	ldr	r6, [pc, #328]	; (8009a30 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098e6:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80098ea:	4852      	ldr	r0, [pc, #328]	; (8009a34 <HAL_DMA_Start_IT+0x194>)
 80098ec:	42ac      	cmp	r4, r5
 80098ee:	bf18      	it	ne
 80098f0:	4284      	cmpne	r4, r0
 80098f2:	f105 0518 	add.w	r5, r5, #24
 80098f6:	bf0c      	ite	eq
 80098f8:	2001      	moveq	r0, #1
 80098fa:	2000      	movne	r0, #0
 80098fc:	42ac      	cmp	r4, r5
 80098fe:	bf08      	it	eq
 8009900:	f040 0001 	orreq.w	r0, r0, #1
 8009904:	3518      	adds	r5, #24
 8009906:	42ac      	cmp	r4, r5
 8009908:	bf08      	it	eq
 800990a:	f040 0001 	orreq.w	r0, r0, #1
 800990e:	3518      	adds	r5, #24
 8009910:	42ac      	cmp	r4, r5
 8009912:	bf08      	it	eq
 8009914:	f040 0001 	orreq.w	r0, r0, #1
 8009918:	3518      	adds	r5, #24
 800991a:	42ac      	cmp	r4, r5
 800991c:	bf08      	it	eq
 800991e:	f040 0001 	orreq.w	r0, r0, #1
 8009922:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8009926:	42ac      	cmp	r4, r5
 8009928:	bf08      	it	eq
 800992a:	f040 0001 	orreq.w	r0, r0, #1
 800992e:	3518      	adds	r5, #24
 8009930:	42ac      	cmp	r4, r5
 8009932:	bf08      	it	eq
 8009934:	f040 0001 	orreq.w	r0, r0, #1
 8009938:	3518      	adds	r5, #24
 800993a:	42ac      	cmp	r4, r5
 800993c:	bf08      	it	eq
 800993e:	f040 0001 	orreq.w	r0, r0, #1
 8009942:	3518      	adds	r5, #24
 8009944:	42ac      	cmp	r4, r5
 8009946:	bf08      	it	eq
 8009948:	f040 0001 	orreq.w	r0, r0, #1
 800994c:	3518      	adds	r5, #24
 800994e:	42ac      	cmp	r4, r5
 8009950:	bf08      	it	eq
 8009952:	f040 0001 	orreq.w	r0, r0, #1
 8009956:	3518      	adds	r5, #24
 8009958:	42ac      	cmp	r4, r5
 800995a:	bf08      	it	eq
 800995c:	f040 0001 	orreq.w	r0, r0, #1
 8009960:	3518      	adds	r5, #24
 8009962:	42ac      	cmp	r4, r5
 8009964:	bf08      	it	eq
 8009966:	f040 0001 	orreq.w	r0, r0, #1
 800996a:	3518      	adds	r5, #24
 800996c:	42ac      	cmp	r4, r5
 800996e:	bf14      	ite	ne
 8009970:	4681      	movne	r9, r0
 8009972:	f040 0901 	orreq.w	r9, r0, #1
 8009976:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 800997a:	42b4      	cmp	r4, r6
 800997c:	bf18      	it	ne
 800997e:	42ac      	cmpne	r4, r5
 8009980:	bf0c      	ite	eq
 8009982:	2501      	moveq	r5, #1
 8009984:	2500      	movne	r5, #0
 8009986:	d002      	beq.n	800998e <HAL_DMA_Start_IT+0xee>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	d054      	beq.n	8009a38 <HAL_DMA_Start_IT+0x198>
 800998e:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009990:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8009994:	f026 0601 	bic.w	r6, r6, #1
 8009998:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800999a:	2d00      	cmp	r5, #0
 800999c:	d078      	beq.n	8009a90 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800999e:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 80099a2:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80099a4:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80099a8:	b117      	cbz	r7, 80099b0 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099aa:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 80099ae:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80099b0:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 80099b4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80099b8:	f006 081f 	and.w	r8, r6, #31
 80099bc:	fa0e fe08 	lsl.w	lr, lr, r8
 80099c0:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80099c4:	6826      	ldr	r6, [r4, #0]
 80099c6:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80099ca:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80099cc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099ce:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	f000 80e2 	beq.w	8009b9c <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80099d8:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80099da:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099dc:	b91d      	cbnz	r5, 80099e6 <HAL_DMA_Start_IT+0x146>
 80099de:	f1b9 0f00 	cmp.w	r9, #0
 80099e2:	f000 80e1 	beq.w	8009ba8 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	f023 031e 	bic.w	r3, r3, #30
 80099ec:	f043 0316 	orr.w	r3, r3, #22
 80099f0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80099f2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80099f6:	b11b      	cbz	r3, 8009a00 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	f043 0308 	orr.w	r3, r3, #8
 80099fe:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009a00:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	03d2      	lsls	r2, r2, #15
 8009a08:	d503      	bpl.n	8009a12 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a10:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8009a12:	b11f      	cbz	r7, 8009a1c <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1a:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8009a1c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	6023      	str	r3, [r4, #0]
}
 8009a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2a:	bf00      	nop
 8009a2c:	40020058 	.word	0x40020058
 8009a30:	40020028 	.word	0x40020028
 8009a34:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a38:	4f61      	ldr	r7, [pc, #388]	; (8009bc0 <HAL_DMA_Start_IT+0x320>)
 8009a3a:	4e62      	ldr	r6, [pc, #392]	; (8009bc4 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a3c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a40:	42b4      	cmp	r4, r6
 8009a42:	bf18      	it	ne
 8009a44:	42bc      	cmpne	r4, r7
 8009a46:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8009a4a:	bf0c      	ite	eq
 8009a4c:	2701      	moveq	r7, #1
 8009a4e:	2700      	movne	r7, #0
 8009a50:	42b4      	cmp	r4, r6
 8009a52:	bf08      	it	eq
 8009a54:	f047 0701 	orreq.w	r7, r7, #1
 8009a58:	3614      	adds	r6, #20
 8009a5a:	42b4      	cmp	r4, r6
 8009a5c:	bf08      	it	eq
 8009a5e:	f047 0701 	orreq.w	r7, r7, #1
 8009a62:	3614      	adds	r6, #20
 8009a64:	42b4      	cmp	r4, r6
 8009a66:	bf08      	it	eq
 8009a68:	f047 0701 	orreq.w	r7, r7, #1
 8009a6c:	3614      	adds	r6, #20
 8009a6e:	42b4      	cmp	r4, r6
 8009a70:	bf08      	it	eq
 8009a72:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8009a76:	6826      	ldr	r6, [r4, #0]
 8009a78:	f026 0601 	bic.w	r6, r6, #1
 8009a7c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a7e:	4e52      	ldr	r6, [pc, #328]	; (8009bc8 <HAL_DMA_Start_IT+0x328>)
 8009a80:	42b4      	cmp	r4, r6
 8009a82:	bf08      	it	eq
 8009a84:	f047 0701 	orreq.w	r7, r7, #1
 8009a88:	b917      	cbnz	r7, 8009a90 <HAL_DMA_Start_IT+0x1f0>
 8009a8a:	4f50      	ldr	r7, [pc, #320]	; (8009bcc <HAL_DMA_Start_IT+0x32c>)
 8009a8c:	42bc      	cmp	r4, r7
 8009a8e:	d10b      	bne.n	8009aa8 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a90:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8009a94:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009a96:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8009a9a:	b117      	cbz	r7, 8009aa2 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a9c:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8009aa0:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009aa2:	f1b9 0f00 	cmp.w	r9, #0
 8009aa6:	d183      	bne.n	80099b0 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009aa8:	4f46      	ldr	r7, [pc, #280]	; (8009bc4 <HAL_DMA_Start_IT+0x324>)
 8009aaa:	f8df e114 	ldr.w	lr, [pc, #276]	; 8009bc0 <HAL_DMA_Start_IT+0x320>
 8009aae:	4574      	cmp	r4, lr
 8009ab0:	bf18      	it	ne
 8009ab2:	42bc      	cmpne	r4, r7
 8009ab4:	f10e 0e14 	add.w	lr, lr, #20
 8009ab8:	bf0c      	ite	eq
 8009aba:	2701      	moveq	r7, #1
 8009abc:	2700      	movne	r7, #0
 8009abe:	4574      	cmp	r4, lr
 8009ac0:	bf08      	it	eq
 8009ac2:	f047 0701 	orreq.w	r7, r7, #1
 8009ac6:	f10e 0e14 	add.w	lr, lr, #20
 8009aca:	4574      	cmp	r4, lr
 8009acc:	bf08      	it	eq
 8009ace:	f047 0701 	orreq.w	r7, r7, #1
 8009ad2:	f10e 0e14 	add.w	lr, lr, #20
 8009ad6:	4574      	cmp	r4, lr
 8009ad8:	bf08      	it	eq
 8009ada:	f047 0701 	orreq.w	r7, r7, #1
 8009ade:	f10e 0e14 	add.w	lr, lr, #20
 8009ae2:	4574      	cmp	r4, lr
 8009ae4:	bf08      	it	eq
 8009ae6:	f047 0701 	orreq.w	r7, r7, #1
 8009aea:	f10e 0e14 	add.w	lr, lr, #20
 8009aee:	4574      	cmp	r4, lr
 8009af0:	bf08      	it	eq
 8009af2:	f047 0701 	orreq.w	r7, r7, #1
 8009af6:	b917      	cbnz	r7, 8009afe <HAL_DMA_Start_IT+0x25e>
 8009af8:	4f34      	ldr	r7, [pc, #208]	; (8009bcc <HAL_DMA_Start_IT+0x32c>)
 8009afa:	42bc      	cmp	r4, r7
 8009afc:	d154      	bne.n	8009ba8 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009afe:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009b02:	2701      	movs	r7, #1
 8009b04:	f000 0e1f 	and.w	lr, r0, #31
 8009b08:	fa07 f70e 	lsl.w	r7, r7, lr
 8009b0c:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009b10:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b12:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009b16:	2b40      	cmp	r3, #64	; 0x40
 8009b18:	d043      	beq.n	8009ba2 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009b1a:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009b1c:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f023 030e 	bic.w	r3, r3, #14
 8009b24:	f043 030a 	orr.w	r3, r3, #10
 8009b28:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009b2a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d02d      	beq.n	8009b8e <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f043 0304 	orr.w	r3, r3, #4
 8009b38:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b3a:	4b21      	ldr	r3, [pc, #132]	; (8009bc0 <HAL_DMA_Start_IT+0x320>)
 8009b3c:	4a21      	ldr	r2, [pc, #132]	; (8009bc4 <HAL_DMA_Start_IT+0x324>)
 8009b3e:	4294      	cmp	r4, r2
 8009b40:	bf18      	it	ne
 8009b42:	429c      	cmpne	r4, r3
 8009b44:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8009b48:	bf0c      	ite	eq
 8009b4a:	2301      	moveq	r3, #1
 8009b4c:	2300      	movne	r3, #0
 8009b4e:	4294      	cmp	r4, r2
 8009b50:	bf08      	it	eq
 8009b52:	f043 0301 	orreq.w	r3, r3, #1
 8009b56:	3214      	adds	r2, #20
 8009b58:	4294      	cmp	r4, r2
 8009b5a:	bf08      	it	eq
 8009b5c:	f043 0301 	orreq.w	r3, r3, #1
 8009b60:	3214      	adds	r2, #20
 8009b62:	4294      	cmp	r4, r2
 8009b64:	bf08      	it	eq
 8009b66:	f043 0301 	orreq.w	r3, r3, #1
 8009b6a:	3214      	adds	r2, #20
 8009b6c:	4294      	cmp	r4, r2
 8009b6e:	bf08      	it	eq
 8009b70:	f043 0301 	orreq.w	r3, r3, #1
 8009b74:	3214      	adds	r2, #20
 8009b76:	4294      	cmp	r4, r2
 8009b78:	bf08      	it	eq
 8009b7a:	f043 0301 	orreq.w	r3, r3, #1
 8009b7e:	3214      	adds	r2, #20
 8009b80:	4294      	cmp	r4, r2
 8009b82:	bf08      	it	eq
 8009b84:	f043 0301 	orreq.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f43f af47 	beq.w	8009a1c <HAL_DMA_Start_IT+0x17c>
 8009b8e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8009b92:	e735      	b.n	8009a00 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8009b94:	2001      	movs	r0, #1
 8009b96:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8009b98:	2002      	movs	r0, #2
}
 8009b9a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009b9c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009b9e:	60e1      	str	r1, [r4, #12]
 8009ba0:	e71c      	b.n	80099dc <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009ba2:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009ba4:	60e1      	str	r1, [r4, #12]
 8009ba6:	e7ba      	b.n	8009b1e <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	f023 030e 	bic.w	r3, r3, #14
 8009bae:	f043 030a 	orr.w	r3, r3, #10
 8009bb2:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009bb4:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1ba      	bne.n	8009b32 <HAL_DMA_Start_IT+0x292>
 8009bbc:	e7bd      	b.n	8009b3a <HAL_DMA_Start_IT+0x29a>
 8009bbe:	bf00      	nop
 8009bc0:	5802541c 	.word	0x5802541c
 8009bc4:	58025408 	.word	0x58025408
 8009bc8:	58025480 	.word	0x58025480
 8009bcc:	58025494 	.word	0x58025494

08009bd0 <HAL_DMA_Abort>:
{
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8009bd4:	f7fd fcd8 	bl	8007588 <HAL_GetTick>
  if(hdma == NULL)
 8009bd8:	2d00      	cmp	r5, #0
 8009bda:	f000 8124 	beq.w	8009e26 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bde:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	f040 80dd 	bne.w	8009da2 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009be8:	682c      	ldr	r4, [r5, #0]
 8009bea:	4606      	mov	r6, r0
 8009bec:	4b8f      	ldr	r3, [pc, #572]	; (8009e2c <HAL_DMA_Abort+0x25c>)
 8009bee:	4890      	ldr	r0, [pc, #576]	; (8009e30 <HAL_DMA_Abort+0x260>)
 8009bf0:	4a90      	ldr	r2, [pc, #576]	; (8009e34 <HAL_DMA_Abort+0x264>)
 8009bf2:	4284      	cmp	r4, r0
 8009bf4:	bf18      	it	ne
 8009bf6:	429c      	cmpne	r4, r3
 8009bf8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009bfc:	498e      	ldr	r1, [pc, #568]	; (8009e38 <HAL_DMA_Abort+0x268>)
 8009bfe:	bf0c      	ite	eq
 8009c00:	2301      	moveq	r3, #1
 8009c02:	2300      	movne	r3, #0
 8009c04:	4284      	cmp	r4, r0
 8009c06:	bf08      	it	eq
 8009c08:	f043 0301 	orreq.w	r3, r3, #1
 8009c0c:	3018      	adds	r0, #24
 8009c0e:	4284      	cmp	r4, r0
 8009c10:	bf08      	it	eq
 8009c12:	f043 0301 	orreq.w	r3, r3, #1
 8009c16:	3018      	adds	r0, #24
 8009c18:	4284      	cmp	r4, r0
 8009c1a:	bf08      	it	eq
 8009c1c:	f043 0301 	orreq.w	r3, r3, #1
 8009c20:	3018      	adds	r0, #24
 8009c22:	4284      	cmp	r4, r0
 8009c24:	bf08      	it	eq
 8009c26:	f043 0301 	orreq.w	r3, r3, #1
 8009c2a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009c2e:	4284      	cmp	r4, r0
 8009c30:	bf08      	it	eq
 8009c32:	f043 0301 	orreq.w	r3, r3, #1
 8009c36:	3018      	adds	r0, #24
 8009c38:	4284      	cmp	r4, r0
 8009c3a:	bf08      	it	eq
 8009c3c:	f043 0301 	orreq.w	r3, r3, #1
 8009c40:	3018      	adds	r0, #24
 8009c42:	4284      	cmp	r4, r0
 8009c44:	bf08      	it	eq
 8009c46:	f043 0301 	orreq.w	r3, r3, #1
 8009c4a:	3018      	adds	r0, #24
 8009c4c:	4284      	cmp	r4, r0
 8009c4e:	bf08      	it	eq
 8009c50:	f043 0301 	orreq.w	r3, r3, #1
 8009c54:	3018      	adds	r0, #24
 8009c56:	4284      	cmp	r4, r0
 8009c58:	bf08      	it	eq
 8009c5a:	f043 0301 	orreq.w	r3, r3, #1
 8009c5e:	3018      	adds	r0, #24
 8009c60:	4284      	cmp	r4, r0
 8009c62:	bf08      	it	eq
 8009c64:	f043 0301 	orreq.w	r3, r3, #1
 8009c68:	3018      	adds	r0, #24
 8009c6a:	4284      	cmp	r4, r0
 8009c6c:	bf08      	it	eq
 8009c6e:	f043 0301 	orreq.w	r3, r3, #1
 8009c72:	3018      	adds	r0, #24
 8009c74:	4284      	cmp	r4, r0
 8009c76:	bf08      	it	eq
 8009c78:	f043 0301 	orreq.w	r3, r3, #1
 8009c7c:	428c      	cmp	r4, r1
 8009c7e:	bf18      	it	ne
 8009c80:	4294      	cmpne	r4, r2
 8009c82:	bf0c      	ite	eq
 8009c84:	2201      	moveq	r2, #1
 8009c86:	2200      	movne	r2, #0
 8009c88:	d002      	beq.n	8009c90 <HAL_DMA_Abort+0xc0>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8090 	beq.w	8009db0 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009c90:	6821      	ldr	r1, [r4, #0]
 8009c92:	f021 011e 	bic.w	r1, r1, #30
 8009c96:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c9e:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	f000 80b0 	beq.w	8009e06 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ca6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009ca8:	6813      	ldr	r3, [r2, #0]
 8009caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	f023 0301 	bic.w	r3, r3, #1
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	e005      	b.n	8009cc6 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009cba:	f7fd fc65 	bl	8007588 <HAL_GetTick>
 8009cbe:	1b83      	subs	r3, r0, r6
 8009cc0:	2b05      	cmp	r3, #5
 8009cc2:	f200 80a6 	bhi.w	8009e12 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	07db      	lsls	r3, r3, #31
 8009cca:	d4f6      	bmi.n	8009cba <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ccc:	682a      	ldr	r2, [r5, #0]
 8009cce:	4b57      	ldr	r3, [pc, #348]	; (8009e2c <HAL_DMA_Abort+0x25c>)
 8009cd0:	4857      	ldr	r0, [pc, #348]	; (8009e30 <HAL_DMA_Abort+0x260>)
 8009cd2:	495a      	ldr	r1, [pc, #360]	; (8009e3c <HAL_DMA_Abort+0x26c>)
 8009cd4:	4282      	cmp	r2, r0
 8009cd6:	bf18      	it	ne
 8009cd8:	429a      	cmpne	r2, r3
 8009cda:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	428a      	cmp	r2, r1
 8009ce6:	bf08      	it	eq
 8009ce8:	f043 0301 	orreq.w	r3, r3, #1
 8009cec:	3130      	adds	r1, #48	; 0x30
 8009cee:	4282      	cmp	r2, r0
 8009cf0:	bf08      	it	eq
 8009cf2:	f043 0301 	orreq.w	r3, r3, #1
 8009cf6:	3030      	adds	r0, #48	; 0x30
 8009cf8:	428a      	cmp	r2, r1
 8009cfa:	bf08      	it	eq
 8009cfc:	f043 0301 	orreq.w	r3, r3, #1
 8009d00:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009d04:	4282      	cmp	r2, r0
 8009d06:	bf08      	it	eq
 8009d08:	f043 0301 	orreq.w	r3, r3, #1
 8009d0c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009d10:	428a      	cmp	r2, r1
 8009d12:	bf08      	it	eq
 8009d14:	f043 0301 	orreq.w	r3, r3, #1
 8009d18:	3130      	adds	r1, #48	; 0x30
 8009d1a:	4282      	cmp	r2, r0
 8009d1c:	bf08      	it	eq
 8009d1e:	f043 0301 	orreq.w	r3, r3, #1
 8009d22:	3030      	adds	r0, #48	; 0x30
 8009d24:	428a      	cmp	r2, r1
 8009d26:	bf08      	it	eq
 8009d28:	f043 0301 	orreq.w	r3, r3, #1
 8009d2c:	3130      	adds	r1, #48	; 0x30
 8009d2e:	4282      	cmp	r2, r0
 8009d30:	bf08      	it	eq
 8009d32:	f043 0301 	orreq.w	r3, r3, #1
 8009d36:	3030      	adds	r0, #48	; 0x30
 8009d38:	428a      	cmp	r2, r1
 8009d3a:	bf08      	it	eq
 8009d3c:	f043 0301 	orreq.w	r3, r3, #1
 8009d40:	3130      	adds	r1, #48	; 0x30
 8009d42:	4282      	cmp	r2, r0
 8009d44:	bf08      	it	eq
 8009d46:	f043 0301 	orreq.w	r3, r3, #1
 8009d4a:	428a      	cmp	r2, r1
 8009d4c:	bf08      	it	eq
 8009d4e:	f043 0301 	orreq.w	r3, r3, #1
 8009d52:	3118      	adds	r1, #24
 8009d54:	428a      	cmp	r2, r1
 8009d56:	bf08      	it	eq
 8009d58:	f043 0301 	orreq.w	r3, r3, #1
 8009d5c:	b933      	cbnz	r3, 8009d6c <HAL_DMA_Abort+0x19c>
 8009d5e:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8009d62:	4b35      	ldr	r3, [pc, #212]	; (8009e38 <HAL_DMA_Abort+0x268>)
 8009d64:	429a      	cmp	r2, r3
 8009d66:	bf18      	it	ne
 8009d68:	428a      	cmpne	r2, r1
 8009d6a:	d16f      	bne.n	8009e4c <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d6c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8009d6e:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d70:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d72:	f002 021f 	and.w	r2, r2, #31
 8009d76:	4093      	lsls	r3, r2
 8009d78:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8009d7a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d7c:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8009d80:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8009d82:	b133      	cbz	r3, 8009d92 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d84:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d86:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d8e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d90:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8009d92:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8009d94:	2201      	movs	r2, #1
  return HAL_OK;
 8009d96:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8009d98:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009d9c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009da2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8009da4:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009da6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009da8:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009daa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009db0:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009db2:	4923      	ldr	r1, [pc, #140]	; (8009e40 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009db4:	f022 020e 	bic.w	r2, r2, #14
 8009db8:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dba:	4a22      	ldr	r2, [pc, #136]	; (8009e44 <HAL_DMA_Abort+0x274>)
 8009dbc:	428c      	cmp	r4, r1
 8009dbe:	bf18      	it	ne
 8009dc0:	4294      	cmpne	r4, r2
 8009dc2:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8009dc6:	bf0c      	ite	eq
 8009dc8:	2201      	moveq	r2, #1
 8009dca:	2200      	movne	r2, #0
 8009dcc:	428c      	cmp	r4, r1
 8009dce:	bf08      	it	eq
 8009dd0:	f042 0201 	orreq.w	r2, r2, #1
 8009dd4:	3114      	adds	r1, #20
 8009dd6:	428c      	cmp	r4, r1
 8009dd8:	bf08      	it	eq
 8009dda:	f042 0201 	orreq.w	r2, r2, #1
 8009dde:	3114      	adds	r1, #20
 8009de0:	428c      	cmp	r4, r1
 8009de2:	bf08      	it	eq
 8009de4:	f042 0201 	orreq.w	r2, r2, #1
 8009de8:	3114      	adds	r1, #20
 8009dea:	428c      	cmp	r4, r1
 8009dec:	bf08      	it	eq
 8009dee:	f042 0201 	orreq.w	r2, r2, #1
 8009df2:	3114      	adds	r1, #20
 8009df4:	428c      	cmp	r4, r1
 8009df6:	bf08      	it	eq
 8009df8:	f042 0201 	orreq.w	r2, r2, #1
 8009dfc:	b91a      	cbnz	r2, 8009e06 <HAL_DMA_Abort+0x236>
 8009dfe:	4a12      	ldr	r2, [pc, #72]	; (8009e48 <HAL_DMA_Abort+0x278>)
 8009e00:	4294      	cmp	r4, r2
 8009e02:	f47f af55 	bne.w	8009cb0 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e06:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009e08:	680a      	ldr	r2, [r1, #0]
 8009e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e0e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009e10:	e74e      	b.n	8009cb0 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e12:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009e14:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8009e16:	2300      	movs	r3, #0
        return HAL_ERROR;
 8009e18:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e1a:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8009e1c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8009e20:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009e26:	2001      	movs	r0, #1
}
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40020058 	.word	0x40020058
 8009e30:	40020040 	.word	0x40020040
 8009e34:	40020010 	.word	0x40020010
 8009e38:	40020028 	.word	0x40020028
 8009e3c:	40020070 	.word	0x40020070
 8009e40:	58025408 	.word	0x58025408
 8009e44:	5802541c 	.word	0x5802541c
 8009e48:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009e4c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8009e4e:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e50:	4b16      	ldr	r3, [pc, #88]	; (8009eac <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009e52:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e56:	4c16      	ldr	r4, [pc, #88]	; (8009eb0 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009e58:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e5a:	42a2      	cmp	r2, r4
 8009e5c:	bf18      	it	ne
 8009e5e:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e62:	bf0c      	ite	eq
 8009e64:	2301      	moveq	r3, #1
 8009e66:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009e68:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e6a:	4812      	ldr	r0, [pc, #72]	; (8009eb4 <HAL_DMA_Abort+0x2e4>)
 8009e6c:	4912      	ldr	r1, [pc, #72]	; (8009eb8 <HAL_DMA_Abort+0x2e8>)
 8009e6e:	4282      	cmp	r2, r0
 8009e70:	bf08      	it	eq
 8009e72:	f043 0301 	orreq.w	r3, r3, #1
 8009e76:	3028      	adds	r0, #40	; 0x28
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	bf08      	it	eq
 8009e7c:	f043 0301 	orreq.w	r3, r3, #1
 8009e80:	3128      	adds	r1, #40	; 0x28
 8009e82:	4282      	cmp	r2, r0
 8009e84:	bf08      	it	eq
 8009e86:	f043 0301 	orreq.w	r3, r3, #1
 8009e8a:	428a      	cmp	r2, r1
 8009e8c:	bf08      	it	eq
 8009e8e:	f043 0301 	orreq.w	r3, r3, #1
 8009e92:	3114      	adds	r1, #20
 8009e94:	428a      	cmp	r2, r1
 8009e96:	bf08      	it	eq
 8009e98:	f043 0301 	orreq.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f47f af6c 	bne.w	8009d7a <HAL_DMA_Abort+0x1aa>
 8009ea2:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <HAL_DMA_Abort+0x2ec>)
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	f43f af68 	beq.w	8009d7a <HAL_DMA_Abort+0x1aa>
 8009eaa:	e772      	b.n	8009d92 <HAL_DMA_Abort+0x1c2>
 8009eac:	5802541c 	.word	0x5802541c
 8009eb0:	58025408 	.word	0x58025408
 8009eb4:	58025430 	.word	0x58025430
 8009eb8:	58025444 	.word	0x58025444
 8009ebc:	58025494 	.word	0x58025494

08009ec0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d05f      	beq.n	8009f84 <HAL_DMA_Abort_IT+0xc4>
{
 8009ec4:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ec6:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2a02      	cmp	r2, #2
 8009ece:	d155      	bne.n	8009f7c <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ed0:	6801      	ldr	r1, [r0, #0]
 8009ed2:	4a57      	ldr	r2, [pc, #348]	; (800a030 <HAL_DMA_Abort_IT+0x170>)
 8009ed4:	4291      	cmp	r1, r2
 8009ed6:	d048      	beq.n	8009f6a <HAL_DMA_Abort_IT+0xaa>
 8009ed8:	3218      	adds	r2, #24
 8009eda:	4291      	cmp	r1, r2
 8009edc:	d045      	beq.n	8009f6a <HAL_DMA_Abort_IT+0xaa>
 8009ede:	3230      	adds	r2, #48	; 0x30
 8009ee0:	4c54      	ldr	r4, [pc, #336]	; (800a034 <HAL_DMA_Abort_IT+0x174>)
 8009ee2:	4855      	ldr	r0, [pc, #340]	; (800a038 <HAL_DMA_Abort_IT+0x178>)
 8009ee4:	42a1      	cmp	r1, r4
 8009ee6:	bf18      	it	ne
 8009ee8:	4291      	cmpne	r1, r2
 8009eea:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8009eee:	bf0c      	ite	eq
 8009ef0:	2201      	moveq	r2, #1
 8009ef2:	2200      	movne	r2, #0
 8009ef4:	4281      	cmp	r1, r0
 8009ef6:	bf08      	it	eq
 8009ef8:	f042 0201 	orreq.w	r2, r2, #1
 8009efc:	3030      	adds	r0, #48	; 0x30
 8009efe:	42a1      	cmp	r1, r4
 8009f00:	bf08      	it	eq
 8009f02:	f042 0201 	orreq.w	r2, r2, #1
 8009f06:	3430      	adds	r4, #48	; 0x30
 8009f08:	4281      	cmp	r1, r0
 8009f0a:	bf08      	it	eq
 8009f0c:	f042 0201 	orreq.w	r2, r2, #1
 8009f10:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009f14:	42a1      	cmp	r1, r4
 8009f16:	bf08      	it	eq
 8009f18:	f042 0201 	orreq.w	r2, r2, #1
 8009f1c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009f20:	4281      	cmp	r1, r0
 8009f22:	bf08      	it	eq
 8009f24:	f042 0201 	orreq.w	r2, r2, #1
 8009f28:	3030      	adds	r0, #48	; 0x30
 8009f2a:	42a1      	cmp	r1, r4
 8009f2c:	bf08      	it	eq
 8009f2e:	f042 0201 	orreq.w	r2, r2, #1
 8009f32:	3430      	adds	r4, #48	; 0x30
 8009f34:	4281      	cmp	r1, r0
 8009f36:	bf08      	it	eq
 8009f38:	f042 0201 	orreq.w	r2, r2, #1
 8009f3c:	3030      	adds	r0, #48	; 0x30
 8009f3e:	42a1      	cmp	r1, r4
 8009f40:	bf08      	it	eq
 8009f42:	f042 0201 	orreq.w	r2, r2, #1
 8009f46:	3430      	adds	r4, #48	; 0x30
 8009f48:	4281      	cmp	r1, r0
 8009f4a:	bf08      	it	eq
 8009f4c:	f042 0201 	orreq.w	r2, r2, #1
 8009f50:	3030      	adds	r0, #48	; 0x30
 8009f52:	42a1      	cmp	r1, r4
 8009f54:	bf08      	it	eq
 8009f56:	f042 0201 	orreq.w	r2, r2, #1
 8009f5a:	4281      	cmp	r1, r0
 8009f5c:	bf08      	it	eq
 8009f5e:	f042 0201 	orreq.w	r2, r2, #1
 8009f62:	b912      	cbnz	r2, 8009f6a <HAL_DMA_Abort_IT+0xaa>
 8009f64:	4a35      	ldr	r2, [pc, #212]	; (800a03c <HAL_DMA_Abort_IT+0x17c>)
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d10e      	bne.n	8009f88 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f6a:	2204      	movs	r2, #4
  return HAL_OK;
 8009f6c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009f72:	680b      	ldr	r3, [r1, #0]
 8009f74:	f023 0301 	bic.w	r3, r3, #1
 8009f78:	600b      	str	r3, [r1, #0]
}
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f7c:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009f7e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f80:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009f84:	2001      	movs	r0, #1
}
 8009f86:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f88:	4a2d      	ldr	r2, [pc, #180]	; (800a040 <HAL_DMA_Abort_IT+0x180>)
 8009f8a:	4d2e      	ldr	r5, [pc, #184]	; (800a044 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009f8c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f8e:	42a9      	cmp	r1, r5
 8009f90:	bf18      	it	ne
 8009f92:	4291      	cmpne	r1, r2
 8009f94:	4c2c      	ldr	r4, [pc, #176]	; (800a048 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009f96:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f9a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8009f9e:	bf0c      	ite	eq
 8009fa0:	2201      	moveq	r2, #1
 8009fa2:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009fa4:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fa6:	42a1      	cmp	r1, r4
 8009fa8:	bf08      	it	eq
 8009faa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009fae:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fb0:	3428      	adds	r4, #40	; 0x28
 8009fb2:	42a9      	cmp	r1, r5
 8009fb4:	bf08      	it	eq
 8009fb6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009fba:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fbe:	42a1      	cmp	r1, r4
 8009fc0:	bf08      	it	eq
 8009fc2:	f042 0201 	orreq.w	r2, r2, #1
 8009fc6:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8009fc8:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fca:	42a1      	cmp	r1, r4
 8009fcc:	bf08      	it	eq
 8009fce:	f042 0201 	orreq.w	r2, r2, #1
 8009fd2:	481e      	ldr	r0, [pc, #120]	; (800a04c <HAL_DMA_Abort_IT+0x18c>)
 8009fd4:	4281      	cmp	r1, r0
 8009fd6:	bf08      	it	eq
 8009fd8:	f042 0201 	orreq.w	r2, r2, #1
 8009fdc:	b912      	cbnz	r2, 8009fe4 <HAL_DMA_Abort_IT+0x124>
 8009fde:	4a1c      	ldr	r2, [pc, #112]	; (800a050 <HAL_DMA_Abort_IT+0x190>)
 8009fe0:	4291      	cmp	r1, r2
 8009fe2:	d117      	bne.n	800a014 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009fe4:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fe6:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009fe8:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009fec:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009fee:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ff2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009ff6:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ff8:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009ffa:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009ffc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ffe:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800a002:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800a004:	b132      	cbz	r2, 800a014 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a006:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a008:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a00c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a010:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a012:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800a014:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800a016:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 800a018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800a01a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a01e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800a022:	b11a      	cbz	r2, 800a02c <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800a024:	4618      	mov	r0, r3
 800a026:	4790      	blx	r2
  return HAL_OK;
 800a028:	4620      	mov	r0, r4
}
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800a02c:	4610      	mov	r0, r2
}
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	40020010 	.word	0x40020010
 800a034:	40020040 	.word	0x40020040
 800a038:	40020070 	.word	0x40020070
 800a03c:	400204b8 	.word	0x400204b8
 800a040:	5802541c 	.word	0x5802541c
 800a044:	58025408 	.word	0x58025408
 800a048:	58025430 	.word	0x58025430
 800a04c:	58025480 	.word	0x58025480
 800a050:	58025494 	.word	0x58025494

0800a054 <HAL_DMA_IRQHandler>:
{
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800a058:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a05a:	4b9e      	ldr	r3, [pc, #632]	; (800a2d4 <HAL_DMA_IRQHandler+0x280>)
{
 800a05c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a05e:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 800a060:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a062:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 800a064:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a066:	6803      	ldr	r3, [r0, #0]
 800a068:	4a9b      	ldr	r2, [pc, #620]	; (800a2d8 <HAL_DMA_IRQHandler+0x284>)
 800a06a:	489c      	ldr	r0, [pc, #624]	; (800a2dc <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 800a06c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a06e:	4293      	cmp	r3, r2
 800a070:	bf18      	it	ne
 800a072:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 800a074:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a076:	bf0c      	ite	eq
 800a078:	2001      	moveq	r0, #1
 800a07a:	2000      	movne	r0, #0
 800a07c:	d04f      	beq.n	800a11e <HAL_DMA_IRQHandler+0xca>
 800a07e:	3218      	adds	r2, #24
 800a080:	f8df c260 	ldr.w	ip, [pc, #608]	; 800a2e4 <HAL_DMA_IRQHandler+0x290>
 800a084:	4563      	cmp	r3, ip
 800a086:	bf18      	it	ne
 800a088:	4293      	cmpne	r3, r2
 800a08a:	f10c 0c18 	add.w	ip, ip, #24
 800a08e:	bf0c      	ite	eq
 800a090:	2201      	moveq	r2, #1
 800a092:	2200      	movne	r2, #0
 800a094:	4563      	cmp	r3, ip
 800a096:	bf08      	it	eq
 800a098:	f042 0201 	orreq.w	r2, r2, #1
 800a09c:	f10c 0c18 	add.w	ip, ip, #24
 800a0a0:	4563      	cmp	r3, ip
 800a0a2:	bf08      	it	eq
 800a0a4:	f042 0201 	orreq.w	r2, r2, #1
 800a0a8:	f10c 0c18 	add.w	ip, ip, #24
 800a0ac:	4563      	cmp	r3, ip
 800a0ae:	bf08      	it	eq
 800a0b0:	f042 0201 	orreq.w	r2, r2, #1
 800a0b4:	f10c 0c18 	add.w	ip, ip, #24
 800a0b8:	4563      	cmp	r3, ip
 800a0ba:	bf08      	it	eq
 800a0bc:	f042 0201 	orreq.w	r2, r2, #1
 800a0c0:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 800a0c4:	4563      	cmp	r3, ip
 800a0c6:	bf08      	it	eq
 800a0c8:	f042 0201 	orreq.w	r2, r2, #1
 800a0cc:	f10c 0c18 	add.w	ip, ip, #24
 800a0d0:	4563      	cmp	r3, ip
 800a0d2:	bf08      	it	eq
 800a0d4:	f042 0201 	orreq.w	r2, r2, #1
 800a0d8:	f10c 0c18 	add.w	ip, ip, #24
 800a0dc:	4563      	cmp	r3, ip
 800a0de:	bf08      	it	eq
 800a0e0:	f042 0201 	orreq.w	r2, r2, #1
 800a0e4:	f10c 0c18 	add.w	ip, ip, #24
 800a0e8:	4563      	cmp	r3, ip
 800a0ea:	bf08      	it	eq
 800a0ec:	f042 0201 	orreq.w	r2, r2, #1
 800a0f0:	f10c 0c18 	add.w	ip, ip, #24
 800a0f4:	4563      	cmp	r3, ip
 800a0f6:	bf08      	it	eq
 800a0f8:	f042 0201 	orreq.w	r2, r2, #1
 800a0fc:	f10c 0c18 	add.w	ip, ip, #24
 800a100:	4563      	cmp	r3, ip
 800a102:	bf08      	it	eq
 800a104:	f042 0201 	orreq.w	r2, r2, #1
 800a108:	f10c 0c18 	add.w	ip, ip, #24
 800a10c:	4563      	cmp	r3, ip
 800a10e:	bf08      	it	eq
 800a110:	f042 0201 	orreq.w	r2, r2, #1
 800a114:	b91a      	cbnz	r2, 800a11e <HAL_DMA_IRQHandler+0xca>
 800a116:	4a72      	ldr	r2, [pc, #456]	; (800a2e0 <HAL_DMA_IRQHandler+0x28c>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	f040 824b 	bne.w	800a5b4 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a11e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 800a120:	2208      	movs	r2, #8
 800a122:	f001 0c1f 	and.w	ip, r1, #31
 800a126:	fa02 f20c 	lsl.w	r2, r2, ip
 800a12a:	4217      	tst	r7, r2
 800a12c:	f040 817d 	bne.w	800a42a <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a130:	fa27 f20c 	lsr.w	r2, r7, ip
 800a134:	07d2      	lsls	r2, r2, #31
 800a136:	d50a      	bpl.n	800a14e <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a138:	695a      	ldr	r2, [r3, #20]
 800a13a:	0612      	lsls	r2, r2, #24
 800a13c:	d507      	bpl.n	800a14e <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a13e:	2201      	movs	r2, #1
 800a140:	fa02 f20c 	lsl.w	r2, r2, ip
 800a144:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a146:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a148:	f042 0202 	orr.w	r2, r2, #2
 800a14c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a14e:	f04f 0e04 	mov.w	lr, #4
 800a152:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a156:	ea1e 0f07 	tst.w	lr, r7
 800a15a:	d05a      	beq.n	800a212 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d14f      	bne.n	800a200 <HAL_DMA_IRQHandler+0x1ac>
 800a160:	4a60      	ldr	r2, [pc, #384]	; (800a2e4 <HAL_DMA_IRQHandler+0x290>)
 800a162:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800a2e8 <HAL_DMA_IRQHandler+0x294>
 800a166:	4543      	cmp	r3, r8
 800a168:	bf18      	it	ne
 800a16a:	4293      	cmpne	r3, r2
 800a16c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a170:	bf0c      	ite	eq
 800a172:	2201      	moveq	r2, #1
 800a174:	2200      	movne	r2, #0
 800a176:	4543      	cmp	r3, r8
 800a178:	bf08      	it	eq
 800a17a:	f042 0201 	orreq.w	r2, r2, #1
 800a17e:	f108 0818 	add.w	r8, r8, #24
 800a182:	4543      	cmp	r3, r8
 800a184:	bf08      	it	eq
 800a186:	f042 0201 	orreq.w	r2, r2, #1
 800a18a:	f108 0818 	add.w	r8, r8, #24
 800a18e:	4543      	cmp	r3, r8
 800a190:	bf08      	it	eq
 800a192:	f042 0201 	orreq.w	r2, r2, #1
 800a196:	f108 0818 	add.w	r8, r8, #24
 800a19a:	4543      	cmp	r3, r8
 800a19c:	bf08      	it	eq
 800a19e:	f042 0201 	orreq.w	r2, r2, #1
 800a1a2:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800a1a6:	4543      	cmp	r3, r8
 800a1a8:	bf08      	it	eq
 800a1aa:	f042 0201 	orreq.w	r2, r2, #1
 800a1ae:	f108 0818 	add.w	r8, r8, #24
 800a1b2:	4543      	cmp	r3, r8
 800a1b4:	bf08      	it	eq
 800a1b6:	f042 0201 	orreq.w	r2, r2, #1
 800a1ba:	f108 0818 	add.w	r8, r8, #24
 800a1be:	4543      	cmp	r3, r8
 800a1c0:	bf08      	it	eq
 800a1c2:	f042 0201 	orreq.w	r2, r2, #1
 800a1c6:	f108 0818 	add.w	r8, r8, #24
 800a1ca:	4543      	cmp	r3, r8
 800a1cc:	bf08      	it	eq
 800a1ce:	f042 0201 	orreq.w	r2, r2, #1
 800a1d2:	f108 0818 	add.w	r8, r8, #24
 800a1d6:	4543      	cmp	r3, r8
 800a1d8:	bf08      	it	eq
 800a1da:	f042 0201 	orreq.w	r2, r2, #1
 800a1de:	f108 0818 	add.w	r8, r8, #24
 800a1e2:	4543      	cmp	r3, r8
 800a1e4:	bf08      	it	eq
 800a1e6:	f042 0201 	orreq.w	r2, r2, #1
 800a1ea:	f108 0818 	add.w	r8, r8, #24
 800a1ee:	4543      	cmp	r3, r8
 800a1f0:	bf08      	it	eq
 800a1f2:	f042 0201 	orreq.w	r2, r2, #1
 800a1f6:	b91a      	cbnz	r2, 800a200 <HAL_DMA_IRQHandler+0x1ac>
 800a1f8:	4a39      	ldr	r2, [pc, #228]	; (800a2e0 <HAL_DMA_IRQHandler+0x28c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	f040 8214 	bne.w	800a628 <HAL_DMA_IRQHandler+0x5d4>
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	0792      	lsls	r2, r2, #30
 800a204:	d505      	bpl.n	800a212 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a206:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a20a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a20c:	f042 0204 	orr.w	r2, r2, #4
 800a210:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a212:	2210      	movs	r2, #16
 800a214:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a218:	ea1c 0f07 	tst.w	ip, r7
 800a21c:	d069      	beq.n	800a2f2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a21e:	2800      	cmp	r0, #0
 800a220:	d145      	bne.n	800a2ae <HAL_DMA_IRQHandler+0x25a>
 800a222:	4a30      	ldr	r2, [pc, #192]	; (800a2e4 <HAL_DMA_IRQHandler+0x290>)
 800a224:	4830      	ldr	r0, [pc, #192]	; (800a2e8 <HAL_DMA_IRQHandler+0x294>)
 800a226:	4283      	cmp	r3, r0
 800a228:	bf18      	it	ne
 800a22a:	4293      	cmpne	r3, r2
 800a22c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a230:	bf0c      	ite	eq
 800a232:	2201      	moveq	r2, #1
 800a234:	2200      	movne	r2, #0
 800a236:	4283      	cmp	r3, r0
 800a238:	bf08      	it	eq
 800a23a:	f042 0201 	orreq.w	r2, r2, #1
 800a23e:	3018      	adds	r0, #24
 800a240:	4283      	cmp	r3, r0
 800a242:	bf08      	it	eq
 800a244:	f042 0201 	orreq.w	r2, r2, #1
 800a248:	3018      	adds	r0, #24
 800a24a:	4283      	cmp	r3, r0
 800a24c:	bf08      	it	eq
 800a24e:	f042 0201 	orreq.w	r2, r2, #1
 800a252:	3018      	adds	r0, #24
 800a254:	4283      	cmp	r3, r0
 800a256:	bf08      	it	eq
 800a258:	f042 0201 	orreq.w	r2, r2, #1
 800a25c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a260:	4283      	cmp	r3, r0
 800a262:	bf08      	it	eq
 800a264:	f042 0201 	orreq.w	r2, r2, #1
 800a268:	3018      	adds	r0, #24
 800a26a:	4283      	cmp	r3, r0
 800a26c:	bf08      	it	eq
 800a26e:	f042 0201 	orreq.w	r2, r2, #1
 800a272:	3018      	adds	r0, #24
 800a274:	4283      	cmp	r3, r0
 800a276:	bf08      	it	eq
 800a278:	f042 0201 	orreq.w	r2, r2, #1
 800a27c:	3018      	adds	r0, #24
 800a27e:	4283      	cmp	r3, r0
 800a280:	bf08      	it	eq
 800a282:	f042 0201 	orreq.w	r2, r2, #1
 800a286:	3018      	adds	r0, #24
 800a288:	4283      	cmp	r3, r0
 800a28a:	bf08      	it	eq
 800a28c:	f042 0201 	orreq.w	r2, r2, #1
 800a290:	3018      	adds	r0, #24
 800a292:	4283      	cmp	r3, r0
 800a294:	bf08      	it	eq
 800a296:	f042 0201 	orreq.w	r2, r2, #1
 800a29a:	3018      	adds	r0, #24
 800a29c:	4283      	cmp	r3, r0
 800a29e:	bf08      	it	eq
 800a2a0:	f042 0201 	orreq.w	r2, r2, #1
 800a2a4:	b91a      	cbnz	r2, 800a2ae <HAL_DMA_IRQHandler+0x25a>
 800a2a6:	4a0e      	ldr	r2, [pc, #56]	; (800a2e0 <HAL_DMA_IRQHandler+0x28c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	f040 81c5 	bne.w	800a638 <HAL_DMA_IRQHandler+0x5e4>
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	0712      	lsls	r2, r2, #28
 800a2b2:	d51e      	bpl.n	800a2f2 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2b4:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	0352      	lsls	r2, r2, #13
 800a2bc:	f100 814e 	bmi.w	800a55c <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	05d2      	lsls	r2, r2, #23
 800a2c4:	d403      	bmi.n	800a2ce <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	f022 0208 	bic.w	r2, r2, #8
 800a2cc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800a2ce:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a2d0:	b17b      	cbz	r3, 800a2f2 <HAL_DMA_IRQHandler+0x29e>
 800a2d2:	e00b      	b.n	800a2ec <HAL_DMA_IRQHandler+0x298>
 800a2d4:	24000314 	.word	0x24000314
 800a2d8:	40020028 	.word	0x40020028
 800a2dc:	40020010 	.word	0x40020010
 800a2e0:	400204b8 	.word	0x400204b8
 800a2e4:	40020058 	.word	0x40020058
 800a2e8:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4798      	blx	r3
 800a2f0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2f2:	f001 011f 	and.w	r1, r1, #31
 800a2f6:	2020      	movs	r0, #32
 800a2f8:	4088      	lsls	r0, r1
 800a2fa:	4238      	tst	r0, r7
 800a2fc:	d066      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a2fe:	6832      	ldr	r2, [r6, #0]
 800a300:	4ba4      	ldr	r3, [pc, #656]	; (800a594 <HAL_DMA_IRQHandler+0x540>)
 800a302:	4fa5      	ldr	r7, [pc, #660]	; (800a598 <HAL_DMA_IRQHandler+0x544>)
 800a304:	42ba      	cmp	r2, r7
 800a306:	bf18      	it	ne
 800a308:	429a      	cmpne	r2, r3
 800a30a:	f107 0718 	add.w	r7, r7, #24
 800a30e:	bf0c      	ite	eq
 800a310:	2301      	moveq	r3, #1
 800a312:	2300      	movne	r3, #0
 800a314:	42ba      	cmp	r2, r7
 800a316:	bf08      	it	eq
 800a318:	f043 0301 	orreq.w	r3, r3, #1
 800a31c:	3718      	adds	r7, #24
 800a31e:	42ba      	cmp	r2, r7
 800a320:	bf08      	it	eq
 800a322:	f043 0301 	orreq.w	r3, r3, #1
 800a326:	3718      	adds	r7, #24
 800a328:	42ba      	cmp	r2, r7
 800a32a:	bf08      	it	eq
 800a32c:	f043 0301 	orreq.w	r3, r3, #1
 800a330:	3718      	adds	r7, #24
 800a332:	42ba      	cmp	r2, r7
 800a334:	bf08      	it	eq
 800a336:	f043 0301 	orreq.w	r3, r3, #1
 800a33a:	3718      	adds	r7, #24
 800a33c:	42ba      	cmp	r2, r7
 800a33e:	bf08      	it	eq
 800a340:	f043 0301 	orreq.w	r3, r3, #1
 800a344:	3718      	adds	r7, #24
 800a346:	42ba      	cmp	r2, r7
 800a348:	bf08      	it	eq
 800a34a:	f043 0301 	orreq.w	r3, r3, #1
 800a34e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800a352:	42ba      	cmp	r2, r7
 800a354:	bf08      	it	eq
 800a356:	f043 0301 	orreq.w	r3, r3, #1
 800a35a:	3718      	adds	r7, #24
 800a35c:	42ba      	cmp	r2, r7
 800a35e:	bf08      	it	eq
 800a360:	f043 0301 	orreq.w	r3, r3, #1
 800a364:	3718      	adds	r7, #24
 800a366:	42ba      	cmp	r2, r7
 800a368:	bf08      	it	eq
 800a36a:	f043 0301 	orreq.w	r3, r3, #1
 800a36e:	3718      	adds	r7, #24
 800a370:	42ba      	cmp	r2, r7
 800a372:	bf08      	it	eq
 800a374:	f043 0301 	orreq.w	r3, r3, #1
 800a378:	3718      	adds	r7, #24
 800a37a:	42ba      	cmp	r2, r7
 800a37c:	bf08      	it	eq
 800a37e:	f043 0301 	orreq.w	r3, r3, #1
 800a382:	3718      	adds	r7, #24
 800a384:	42ba      	cmp	r2, r7
 800a386:	bf08      	it	eq
 800a388:	f043 0301 	orreq.w	r3, r3, #1
 800a38c:	3718      	adds	r7, #24
 800a38e:	42ba      	cmp	r2, r7
 800a390:	bf08      	it	eq
 800a392:	f043 0301 	orreq.w	r3, r3, #1
 800a396:	b91b      	cbnz	r3, 800a3a0 <HAL_DMA_IRQHandler+0x34c>
 800a398:	4b80      	ldr	r3, [pc, #512]	; (800a59c <HAL_DMA_IRQHandler+0x548>)
 800a39a:	429a      	cmp	r2, r3
 800a39c:	f040 8161 	bne.w	800a662 <HAL_DMA_IRQHandler+0x60e>
 800a3a0:	6813      	ldr	r3, [r2, #0]
 800a3a2:	06df      	lsls	r7, r3, #27
 800a3a4:	d512      	bpl.n	800a3cc <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a3a6:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a3a8:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800a3ac:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a3ae:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a3b0:	f000 80b6 	beq.w	800a520 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a3b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a3b8:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a3ba:	f000 80d8 	beq.w	800a56e <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a3be:	031f      	lsls	r7, r3, #12
 800a3c0:	f140 80e3 	bpl.w	800a58a <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 800a3c4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800a3c6:	b10b      	cbz	r3, 800a3cc <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3cc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80c1 	beq.w	800a556 <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a3d4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a3d6:	07dc      	lsls	r4, r3, #31
 800a3d8:	d51e      	bpl.n	800a418 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 800a3da:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a3dc:	2104      	movs	r1, #4
 800a3de:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3e2:	496f      	ldr	r1, [pc, #444]	; (800a5a0 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 800a3e4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3e6:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 800a3ea:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3ee:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	e002      	b.n	800a3fa <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a3f4:	6813      	ldr	r3, [r2, #0]
 800a3f6:	07d8      	lsls	r0, r3, #31
 800a3f8:	d504      	bpl.n	800a404 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	428b      	cmp	r3, r1
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	d9f7      	bls.n	800a3f4 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a404:	6813      	ldr	r3, [r2, #0]
 800a406:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a408:	bf4c      	ite	mi
 800a40a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a40c:	2301      	movpl	r3, #1
 800a40e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a412:	2300      	movs	r3, #0
 800a414:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800a418:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 809b 	beq.w	800a556 <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 800a420:	4630      	mov	r0, r6
}
 800a422:	b002      	add	sp, #8
 800a424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800a428:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a42a:	f8d3 e000 	ldr.w	lr, [r3]
 800a42e:	f01e 0f04 	tst.w	lr, #4
 800a432:	d00a      	beq.n	800a44a <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a434:	f8d3 e000 	ldr.w	lr, [r3]
 800a438:	f02e 0e04 	bic.w	lr, lr, #4
 800a43c:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a440:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a442:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a444:	f042 0201 	orr.w	r2, r2, #1
 800a448:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a44a:	fa27 f20c 	lsr.w	r2, r7, ip
 800a44e:	07d2      	lsls	r2, r2, #31
 800a450:	f57f ae7d 	bpl.w	800a14e <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a454:	4a53      	ldr	r2, [pc, #332]	; (800a5a4 <HAL_DMA_IRQHandler+0x550>)
 800a456:	f8df e150 	ldr.w	lr, [pc, #336]	; 800a5a8 <HAL_DMA_IRQHandler+0x554>
 800a45a:	4573      	cmp	r3, lr
 800a45c:	bf18      	it	ne
 800a45e:	4293      	cmpne	r3, r2
 800a460:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800a464:	bf0c      	ite	eq
 800a466:	2201      	moveq	r2, #1
 800a468:	2200      	movne	r2, #0
 800a46a:	4573      	cmp	r3, lr
 800a46c:	bf08      	it	eq
 800a46e:	f042 0201 	orreq.w	r2, r2, #1
 800a472:	f10e 0e18 	add.w	lr, lr, #24
 800a476:	4573      	cmp	r3, lr
 800a478:	bf08      	it	eq
 800a47a:	f042 0201 	orreq.w	r2, r2, #1
 800a47e:	f10e 0e18 	add.w	lr, lr, #24
 800a482:	4573      	cmp	r3, lr
 800a484:	bf08      	it	eq
 800a486:	f042 0201 	orreq.w	r2, r2, #1
 800a48a:	f10e 0e18 	add.w	lr, lr, #24
 800a48e:	4573      	cmp	r3, lr
 800a490:	bf08      	it	eq
 800a492:	f042 0201 	orreq.w	r2, r2, #1
 800a496:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 800a49a:	4573      	cmp	r3, lr
 800a49c:	bf08      	it	eq
 800a49e:	f042 0201 	orreq.w	r2, r2, #1
 800a4a2:	f10e 0e18 	add.w	lr, lr, #24
 800a4a6:	4573      	cmp	r3, lr
 800a4a8:	bf08      	it	eq
 800a4aa:	f042 0201 	orreq.w	r2, r2, #1
 800a4ae:	f10e 0e18 	add.w	lr, lr, #24
 800a4b2:	4573      	cmp	r3, lr
 800a4b4:	bf08      	it	eq
 800a4b6:	f042 0201 	orreq.w	r2, r2, #1
 800a4ba:	f10e 0e18 	add.w	lr, lr, #24
 800a4be:	4573      	cmp	r3, lr
 800a4c0:	bf08      	it	eq
 800a4c2:	f042 0201 	orreq.w	r2, r2, #1
 800a4c6:	f10e 0e18 	add.w	lr, lr, #24
 800a4ca:	4573      	cmp	r3, lr
 800a4cc:	bf08      	it	eq
 800a4ce:	f042 0201 	orreq.w	r2, r2, #1
 800a4d2:	f10e 0e18 	add.w	lr, lr, #24
 800a4d6:	4573      	cmp	r3, lr
 800a4d8:	bf08      	it	eq
 800a4da:	f042 0201 	orreq.w	r2, r2, #1
 800a4de:	f10e 0e18 	add.w	lr, lr, #24
 800a4e2:	4573      	cmp	r3, lr
 800a4e4:	bf08      	it	eq
 800a4e6:	f042 0201 	orreq.w	r2, r2, #1
 800a4ea:	f10e 0e18 	add.w	lr, lr, #24
 800a4ee:	4573      	cmp	r3, lr
 800a4f0:	bf08      	it	eq
 800a4f2:	f042 0201 	orreq.w	r2, r2, #1
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	f47f ae1e 	bne.w	800a138 <HAL_DMA_IRQHandler+0xe4>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f47f ae1b 	bne.w	800a138 <HAL_DMA_IRQHandler+0xe4>
 800a502:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a504:	2204      	movs	r2, #4
 800a506:	fa02 f20c 	lsl.w	r2, r2, ip
 800a50a:	423a      	tst	r2, r7
 800a50c:	f040 808c 	bne.w	800a628 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a510:	2210      	movs	r2, #16
 800a512:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a516:	ea17 0f0c 	tst.w	r7, ip
 800a51a:	f43f aeea 	beq.w	800a2f2 <HAL_DMA_IRQHandler+0x29e>
 800a51e:	e680      	b.n	800a222 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a520:	f023 0316 	bic.w	r3, r3, #22
 800a524:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a526:	6953      	ldr	r3, [r2, #20]
 800a528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a52c:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a52e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	d03b      	beq.n	800a5ac <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a534:	6813      	ldr	r3, [r2, #0]
 800a536:	f023 0308 	bic.w	r3, r3, #8
 800a53a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a53c:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a53e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 800a540:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a542:	408b      	lsls	r3, r1
 800a544:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800a546:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800a548:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a54c:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800a550:	2b00      	cmp	r3, #0
 800a552:	f47f af65 	bne.w	800a420 <HAL_DMA_IRQHandler+0x3cc>
}
 800a556:	b002      	add	sp, #8
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	0318      	lsls	r0, r3, #12
 800a560:	f57f aeb5 	bpl.w	800a2ce <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a564:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a566:	2b00      	cmp	r3, #0
 800a568:	f47f aec0 	bne.w	800a2ec <HAL_DMA_IRQHandler+0x298>
 800a56c:	e6c1      	b.n	800a2f2 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a56e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800a572:	f47f af27 	bne.w	800a3c4 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a576:	6811      	ldr	r1, [r2, #0]
 800a578:	f021 0110 	bic.w	r1, r1, #16
 800a57c:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a57e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800a580:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a584:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800a588:	e71c      	b.n	800a3c4 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800a58a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f47f af1b 	bne.w	800a3c8 <HAL_DMA_IRQHandler+0x374>
 800a592:	e71b      	b.n	800a3cc <HAL_DMA_IRQHandler+0x378>
 800a594:	40020010 	.word	0x40020010
 800a598:	40020028 	.word	0x40020028
 800a59c:	400204b8 	.word	0x400204b8
 800a5a0:	1b4e81b5 	.word	0x1b4e81b5
 800a5a4:	40020058 	.word	0x40020058
 800a5a8:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5ac:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1c0      	bne.n	800a534 <HAL_DMA_IRQHandler+0x4e0>
 800a5b2:	e7c3      	b.n	800a53c <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a5b4:	4a4b      	ldr	r2, [pc, #300]	; (800a6e4 <HAL_DMA_IRQHandler+0x690>)
 800a5b6:	484c      	ldr	r0, [pc, #304]	; (800a6e8 <HAL_DMA_IRQHandler+0x694>)
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	bf18      	it	ne
 800a5bc:	4293      	cmpne	r3, r2
 800a5be:	f100 0014 	add.w	r0, r0, #20
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2201      	moveq	r2, #1
 800a5c6:	2200      	movne	r2, #0
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	bf08      	it	eq
 800a5cc:	f042 0201 	orreq.w	r2, r2, #1
 800a5d0:	3014      	adds	r0, #20
 800a5d2:	4283      	cmp	r3, r0
 800a5d4:	bf08      	it	eq
 800a5d6:	f042 0201 	orreq.w	r2, r2, #1
 800a5da:	3014      	adds	r0, #20
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	bf08      	it	eq
 800a5e0:	f042 0201 	orreq.w	r2, r2, #1
 800a5e4:	3014      	adds	r0, #20
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	bf08      	it	eq
 800a5ea:	f042 0201 	orreq.w	r2, r2, #1
 800a5ee:	3014      	adds	r0, #20
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	bf08      	it	eq
 800a5f4:	f042 0201 	orreq.w	r2, r2, #1
 800a5f8:	b912      	cbnz	r2, 800a600 <HAL_DMA_IRQHandler+0x5ac>
 800a5fa:	4a3c      	ldr	r2, [pc, #240]	; (800a6ec <HAL_DMA_IRQHandler+0x698>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d1aa      	bne.n	800a556 <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a600:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800a602:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a604:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a606:	f000 001f 	and.w	r0, r0, #31
 800a60a:	4085      	lsls	r5, r0
 800a60c:	420d      	tst	r5, r1
 800a60e:	d018      	beq.n	800a642 <HAL_DMA_IRQHandler+0x5ee>
 800a610:	0757      	lsls	r7, r2, #29
 800a612:	d516      	bpl.n	800a642 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a614:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a616:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a618:	d547      	bpl.n	800a6aa <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a61a:	03d1      	lsls	r1, r2, #15
 800a61c:	d44b      	bmi.n	800a6b6 <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a61e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a620:	2b00      	cmp	r3, #0
 800a622:	f47f aefd 	bne.w	800a420 <HAL_DMA_IRQHandler+0x3cc>
 800a626:	e796      	b.n	800a556 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a628:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a62a:	2210      	movs	r2, #16
 800a62c:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a630:	ea17 0f0c 	tst.w	r7, ip
 800a634:	f43f ae5d 	beq.w	800a2f2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	0750      	lsls	r0, r2, #29
 800a63c:	f57f ae59 	bpl.w	800a2f2 <HAL_DMA_IRQHandler+0x29e>
 800a640:	e638      	b.n	800a2b4 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a642:	2502      	movs	r5, #2
 800a644:	4085      	lsls	r5, r0
 800a646:	420d      	tst	r5, r1
 800a648:	d010      	beq.n	800a66c <HAL_DMA_IRQHandler+0x618>
 800a64a:	0797      	lsls	r7, r2, #30
 800a64c:	d50e      	bpl.n	800a66c <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a64e:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a650:	0414      	lsls	r4, r2, #16
 800a652:	d535      	bpl.n	800a6c0 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a654:	03d0      	lsls	r0, r2, #15
 800a656:	d43f      	bmi.n	800a6d8 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 800a658:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f47f aee0 	bne.w	800a420 <HAL_DMA_IRQHandler+0x3cc>
 800a660:	e779      	b.n	800a556 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	079b      	lsls	r3, r3, #30
 800a666:	f57f aeb1 	bpl.w	800a3cc <HAL_DMA_IRQHandler+0x378>
 800a66a:	e69c      	b.n	800a3a6 <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a66c:	2508      	movs	r5, #8
 800a66e:	4085      	lsls	r5, r0
 800a670:	420d      	tst	r5, r1
 800a672:	f43f af70 	beq.w	800a556 <HAL_DMA_IRQHandler+0x502>
 800a676:	0711      	lsls	r1, r2, #28
 800a678:	f57f af6d 	bpl.w	800a556 <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a67c:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a67e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a680:	f022 020e 	bic.w	r2, r2, #14
 800a684:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a686:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800a688:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a68a:	fa03 f000 	lsl.w	r0, r3, r0
 800a68e:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a690:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800a692:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a696:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	f43f af5b 	beq.w	800a556 <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 800a6a0:	4630      	mov	r0, r6
}
 800a6a2:	b002      	add	sp, #8
 800a6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800a6a8:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a6aa:	0692      	lsls	r2, r2, #26
 800a6ac:	d403      	bmi.n	800a6b6 <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	f022 0204 	bic.w	r2, r2, #4
 800a6b4:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a6b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f47f aeb1 	bne.w	800a420 <HAL_DMA_IRQHandler+0x3cc>
 800a6be:	e74a      	b.n	800a556 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a6c0:	f012 0220 	ands.w	r2, r2, #32
 800a6c4:	d108      	bne.n	800a6d8 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a6c6:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a6c8:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a6ca:	f021 010a 	bic.w	r1, r1, #10
 800a6ce:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a6d0:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a6d4:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800a6d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f47f aea0 	bne.w	800a420 <HAL_DMA_IRQHandler+0x3cc>
 800a6e0:	e739      	b.n	800a556 <HAL_DMA_IRQHandler+0x502>
 800a6e2:	bf00      	nop
 800a6e4:	58025408 	.word	0x58025408
 800a6e8:	5802541c 	.word	0x5802541c
 800a6ec:	58025494 	.word	0x58025494

0800a6f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6f4:	680c      	ldr	r4, [r1, #0]
{
 800a6f6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	f000 80a7 	beq.w	800a84c <HAL_GPIO_Init+0x15c>
 800a6fe:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a702:	4f8a      	ldr	r7, [pc, #552]	; (800a92c <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 800a704:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a706:	2201      	movs	r2, #1
 800a708:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800a70a:	ea12 0e04 	ands.w	lr, r2, r4
 800a70e:	f000 8096 	beq.w	800a83e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a712:	684d      	ldr	r5, [r1, #4]
 800a714:	f005 0903 	and.w	r9, r5, #3
 800a718:	f109 36ff 	add.w	r6, r9, #4294967295
 800a71c:	2e01      	cmp	r6, #1
 800a71e:	f240 8098 	bls.w	800a852 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a722:	f1b9 0f03 	cmp.w	r9, #3
 800a726:	f040 80d2 	bne.w	800a8ce <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a72a:	fa09 f20c 	lsl.w	r2, r9, ip
 800a72e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800a732:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a734:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a738:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a73c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800a740:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a742:	d07c      	beq.n	800a83e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a744:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800a748:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a74c:	f003 0903 	and.w	r9, r3, #3
 800a750:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a752:	f042 0202 	orr.w	r2, r2, #2
 800a756:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a75a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a75e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a762:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800a766:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a76a:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a76e:	f002 0202 	and.w	r2, r2, #2
 800a772:	9201      	str	r2, [sp, #4]
 800a774:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a776:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a77a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a77e:	4e6c      	ldr	r6, [pc, #432]	; (800a930 <HAL_GPIO_Init+0x240>)
 800a780:	42b0      	cmp	r0, r6
 800a782:	d028      	beq.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a784:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a788:	42b0      	cmp	r0, r6
 800a78a:	f000 80ac 	beq.w	800a8e6 <HAL_GPIO_Init+0x1f6>
 800a78e:	4e69      	ldr	r6, [pc, #420]	; (800a934 <HAL_GPIO_Init+0x244>)
 800a790:	42b0      	cmp	r0, r6
 800a792:	f000 80ad 	beq.w	800a8f0 <HAL_GPIO_Init+0x200>
 800a796:	4e68      	ldr	r6, [pc, #416]	; (800a938 <HAL_GPIO_Init+0x248>)
 800a798:	42b0      	cmp	r0, r6
 800a79a:	f000 809f 	beq.w	800a8dc <HAL_GPIO_Init+0x1ec>
 800a79e:	4e67      	ldr	r6, [pc, #412]	; (800a93c <HAL_GPIO_Init+0x24c>)
 800a7a0:	42b0      	cmp	r0, r6
 800a7a2:	f000 80af 	beq.w	800a904 <HAL_GPIO_Init+0x214>
 800a7a6:	4e66      	ldr	r6, [pc, #408]	; (800a940 <HAL_GPIO_Init+0x250>)
 800a7a8:	42b0      	cmp	r0, r6
 800a7aa:	f000 80b0 	beq.w	800a90e <HAL_GPIO_Init+0x21e>
 800a7ae:	4e65      	ldr	r6, [pc, #404]	; (800a944 <HAL_GPIO_Init+0x254>)
 800a7b0:	42b0      	cmp	r0, r6
 800a7b2:	f000 80a2 	beq.w	800a8fa <HAL_GPIO_Init+0x20a>
 800a7b6:	4e64      	ldr	r6, [pc, #400]	; (800a948 <HAL_GPIO_Init+0x258>)
 800a7b8:	42b0      	cmp	r0, r6
 800a7ba:	f000 80ad 	beq.w	800a918 <HAL_GPIO_Init+0x228>
 800a7be:	4e63      	ldr	r6, [pc, #396]	; (800a94c <HAL_GPIO_Init+0x25c>)
 800a7c0:	42b0      	cmp	r0, r6
 800a7c2:	f000 80ae 	beq.w	800a922 <HAL_GPIO_Init+0x232>
 800a7c6:	4e62      	ldr	r6, [pc, #392]	; (800a950 <HAL_GPIO_Init+0x260>)
 800a7c8:	42b0      	cmp	r0, r6
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2609      	moveq	r6, #9
 800a7ce:	260a      	movne	r6, #10
 800a7d0:	fa06 f609 	lsl.w	r6, r6, r9
 800a7d4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7d6:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a7da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a7de:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800a7e2:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 800a7e6:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800a7e8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a7ec:	bf0c      	ite	eq
 800a7ee:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800a7f0:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7f4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800a7f8:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 800a7fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800a800:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a804:	bf0c      	ite	eq
 800a806:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800a808:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a80c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800a810:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800a814:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a818:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a81c:	bf0c      	ite	eq
 800a81e:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800a820:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a824:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a826:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800a82a:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800a82e:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800a832:	bf54      	ite	pl
 800a834:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800a836:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800a83a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 800a83e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a840:	f10c 0c02 	add.w	ip, ip, #2
 800a844:	fa34 f203 	lsrs.w	r2, r4, r3
 800a848:	f47f af5d 	bne.w	800a706 <HAL_GPIO_Init+0x16>
  }
}
 800a84c:	b003      	add	sp, #12
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a852:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800a856:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a858:	fa08 f80c 	lsl.w	r8, r8, ip
 800a85c:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a860:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a862:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a866:	fa06 f60c 	lsl.w	r6, r6, ip
 800a86a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800a86e:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a870:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800a874:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a878:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a87a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a87e:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800a880:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800a882:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a884:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a888:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a88a:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a88e:	fa06 f60c 	lsl.w	r6, r6, ip
 800a892:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800a896:	fa09 f20c 	lsl.w	r2, r9, ip
 800a89a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a89c:	f47f af49 	bne.w	800a732 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800a8a0:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8a4:	f003 0b07 	and.w	fp, r3, #7
 800a8a8:	260f      	movs	r6, #15
 800a8aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a8ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800a8b2:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8b6:	fa06 f60b 	lsl.w	r6, r6, fp
 800a8ba:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8be:	690e      	ldr	r6, [r1, #16]
 800a8c0:	fa06 f60b 	lsl.w	r6, r6, fp
 800a8c4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a8c8:	f8c9 6020 	str.w	r6, [r9, #32]
 800a8cc:	e731      	b.n	800a732 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8ce:	f04f 0803 	mov.w	r8, #3
 800a8d2:	fa08 f80c 	lsl.w	r8, r8, ip
 800a8d6:	ea6f 0808 	mvn.w	r8, r8
 800a8da:	e7d2      	b.n	800a882 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a8dc:	2603      	movs	r6, #3
 800a8de:	fa06 f609 	lsl.w	r6, r6, r9
 800a8e2:	4332      	orrs	r2, r6
 800a8e4:	e777      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a8e6:	2601      	movs	r6, #1
 800a8e8:	fa06 f609 	lsl.w	r6, r6, r9
 800a8ec:	4332      	orrs	r2, r6
 800a8ee:	e772      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a8f0:	2602      	movs	r6, #2
 800a8f2:	fa06 f609 	lsl.w	r6, r6, r9
 800a8f6:	4332      	orrs	r2, r6
 800a8f8:	e76d      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a8fa:	2606      	movs	r6, #6
 800a8fc:	fa06 f609 	lsl.w	r6, r6, r9
 800a900:	4332      	orrs	r2, r6
 800a902:	e768      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a904:	2604      	movs	r6, #4
 800a906:	fa06 f609 	lsl.w	r6, r6, r9
 800a90a:	4332      	orrs	r2, r6
 800a90c:	e763      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a90e:	2605      	movs	r6, #5
 800a910:	fa06 f609 	lsl.w	r6, r6, r9
 800a914:	4332      	orrs	r2, r6
 800a916:	e75e      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a918:	2607      	movs	r6, #7
 800a91a:	fa06 f609 	lsl.w	r6, r6, r9
 800a91e:	4332      	orrs	r2, r6
 800a920:	e759      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a922:	2608      	movs	r6, #8
 800a924:	fa06 f609 	lsl.w	r6, r6, r9
 800a928:	4332      	orrs	r2, r6
 800a92a:	e754      	b.n	800a7d6 <HAL_GPIO_Init+0xe6>
 800a92c:	58024400 	.word	0x58024400
 800a930:	58020000 	.word	0x58020000
 800a934:	58020800 	.word	0x58020800
 800a938:	58020c00 	.word	0x58020c00
 800a93c:	58021000 	.word	0x58021000
 800a940:	58021400 	.word	0x58021400
 800a944:	58021800 	.word	0x58021800
 800a948:	58021c00 	.word	0x58021c00
 800a94c:	58022000 	.word	0x58022000
 800a950:	58022400 	.word	0x58022400

0800a954 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a954:	6903      	ldr	r3, [r0, #16]
 800a956:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a958:	bf14      	ite	ne
 800a95a:	2001      	movne	r0, #1
 800a95c:	2000      	moveq	r0, #0
 800a95e:	4770      	bx	lr

0800a960 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a960:	b902      	cbnz	r2, 800a964 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a962:	0409      	lsls	r1, r1, #16
 800a964:	6181      	str	r1, [r0, #24]
  }
}
 800a966:	4770      	bx	lr

0800a968 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a96c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800a970:	4201      	tst	r1, r0
 800a972:	d100      	bne.n	800a976 <HAL_GPIO_EXTI_IRQHandler+0xe>
 800a974:	4770      	bx	lr
{
 800a976:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a978:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a97c:	f7f7 fb8c 	bl	8002098 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a980:	bd08      	pop	{r3, pc}
 800a982:	bf00      	nop

0800a984 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop

0800a988 <HAL_HSEM_IRQHandler>:
{
 800a988:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <HAL_HSEM_IRQHandler+0x18>)
 800a98c:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	ea22 0200 	bic.w	r2, r2, r0
 800a994:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a996:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 800a998:	f7ff fff4 	bl	800a984 <HAL_HSEM_FreeCallback>
}
 800a99c:	bd08      	pop	{r3, pc}
 800a99e:	bf00      	nop
 800a9a0:	58026500 	.word	0x58026500

0800a9a4 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d05e      	beq.n	800aa66 <HAL_LPTIM_Init+0xc2>
{
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800a9aa:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d051      	beq.n	800aa5c <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a9b8:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a9ba:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a9bc:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a9c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a9c4:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 800a9c6:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a9c8:	d03c      	beq.n	800aa44 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a9ca:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800a9ce:	d039      	beq.n	800aa44 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a9d0:	6962      	ldr	r2, [r4, #20]
 800a9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d003      	beq.n	800a9e2 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a9da:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800a9de:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a9e2:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 800a9e4:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a9e6:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 800a9e8:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800a9ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9ec:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a9ee:	4e22      	ldr	r6, [pc, #136]	; (800aa78 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 800a9f0:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a9f2:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a9f4:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800a9f6:	b1ed      	cbz	r5, 800aa34 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a9f8:	2d01      	cmp	r5, #1
 800a9fa:	d11f      	bne.n	800aa3c <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800a9fc:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800aa00:	4328      	orrs	r0, r5
 800aa02:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800aa04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aa08:	4282      	cmp	r2, r0
 800aa0a:	d004      	beq.n	800aa16 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800aa0c:	69a0      	ldr	r0, [r4, #24]
 800aa0e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 800aa10:	69e0      	ldr	r0, [r4, #28]
 800aa12:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800aa14:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800aa16:	4a19      	ldr	r2, [pc, #100]	; (800aa7c <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 800aa18:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800aa1a:	4291      	cmp	r1, r2
 800aa1c:	d015      	beq.n	800aa4a <HAL_LPTIM_Init+0xa6>
 800aa1e:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <HAL_LPTIM_Init+0xdc>)
 800aa20:	4299      	cmp	r1, r3
 800aa22:	d012      	beq.n	800aa4a <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <HAL_LPTIM_Init+0xe0>)
 800aa26:	4299      	cmp	r1, r3
 800aa28:	d01f      	beq.n	800aa6a <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aa2a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800aa2c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aa2e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800aa34:	69e0      	ldr	r0, [r4, #28]
 800aa36:	6925      	ldr	r5, [r4, #16]
 800aa38:	4328      	orrs	r0, r5
 800aa3a:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800aa3c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800aa40:	d1e0      	bne.n	800aa04 <HAL_LPTIM_Init+0x60>
 800aa42:	e7db      	b.n	800a9fc <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800aa44:	f020 001e 	bic.w	r0, r0, #30
 800aa48:	e7c2      	b.n	800a9d0 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800aa4a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800aa4e:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800aa50:	4313      	orrs	r3, r2
 800aa52:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aa54:	2301      	movs	r3, #1
 800aa56:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800aa5c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 800aa60:	f7fc f982 	bl	8006d68 <HAL_LPTIM_MspInit>
 800aa64:	e7a8      	b.n	800a9b8 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 800aa66:	2001      	movs	r0, #1
}
 800aa68:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800aa6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800aa6c:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800aa6e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	ff19f1fe 	.word	0xff19f1fe
 800aa7c:	40002400 	.word	0x40002400
 800aa80:	58002400 	.word	0x58002400
 800aa84:	58002800 	.word	0x58002800

0800aa88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa8a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f000 8088 	beq.w	800aba2 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aa92:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800aa96:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800aa98:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aa9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d079      	beq.n	800ab96 <HAL_PCD_Init+0x10e>
 800aaa2:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800aaa4:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aaa6:	462e      	mov	r6, r5
 800aaa8:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800aaaa:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aaae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aab0:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aab2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800aab6:	bf08      	it	eq
 800aab8:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 800aaba:	f003 ff9d 	bl	800e9f8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aabe:	f856 eb10 	ldr.w	lr, [r6], #16
 800aac2:	46b4      	mov	ip, r6
 800aac4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800aad4:	e884 0003 	stmia.w	r4, {r0, r1}
 800aad8:	4670      	mov	r0, lr
 800aada:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aade:	f003 fee9 	bl	800e8b4 <USB_CoreInit>
 800aae2:	4604      	mov	r4, r0
 800aae4:	b130      	cbz	r0, 800aaf4 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800aae6:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aae8:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800aaea:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aaec:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 800aaf0:	b00b      	add	sp, #44	; 0x2c
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	6828      	ldr	r0, [r5, #0]
 800aaf8:	f003 ff86 	bl	800ea08 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aafc:	6868      	ldr	r0, [r5, #4]
 800aafe:	b358      	cbz	r0, 800ab58 <HAL_PCD_Init+0xd0>
 800ab00:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ab02:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ab06:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ab08:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab0c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800ab10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ab18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab1c:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800ab20:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab24:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ab26:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 800ab2a:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ab2c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab30:	d3ea      	bcc.n	800ab08 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800ab32:	2200      	movs	r2, #0
 800ab34:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab38:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800ab3a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800ab3e:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab42:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800ab44:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab48:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ab4a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab4e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ab52:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab56:	d3ed      	bcc.n	800ab34 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab58:	466c      	mov	r4, sp
 800ab5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab62:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab66:	e884 0003 	stmia.w	r4, {r0, r1}
 800ab6a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ab6e:	6828      	ldr	r0, [r5, #0]
 800ab70:	f003 ff80 	bl	800ea74 <USB_DevInit>
 800ab74:	4604      	mov	r4, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d1b5      	bne.n	800aae6 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800ab7a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800ab7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800ab7e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800ab82:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800ab84:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 800ab88:	d00f      	beq.n	800abaa <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800ab8a:	6828      	ldr	r0, [r5, #0]
 800ab8c:	f004 f894 	bl	800ecb8 <USB_DevDisconnect>
}
 800ab90:	4620      	mov	r0, r4
 800ab92:	b00b      	add	sp, #44	; 0x2c
 800ab94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800ab96:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 800ab9a:	f7fc fa65 	bl	8007068 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800ab9e:	6828      	ldr	r0, [r5, #0]
 800aba0:	e780      	b.n	800aaa4 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800aba2:	2401      	movs	r4, #1
}
 800aba4:	4620      	mov	r0, r4
 800aba6:	b00b      	add	sp, #44	; 0x2c
 800aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 f802 	bl	800abb4 <HAL_PCDEx_ActivateLPM>
 800abb0:	e7eb      	b.n	800ab8a <HAL_PCD_Init+0x102>
 800abb2:	bf00      	nop

0800abb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800abb4:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800abb6:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800abba:	4909      	ldr	r1, [pc, #36]	; (800abe0 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abbc:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800abbe:	4660      	mov	r0, ip
{
 800abc0:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800abc2:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800abc4:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 800abc8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800abcc:	6993      	ldr	r3, [r2, #24]
}
 800abce:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800abd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abd6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800abd8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800abda:	4319      	orrs	r1, r3
 800abdc:	6551      	str	r1, [r2, #84]	; 0x54
}
 800abde:	4770      	bx	lr
 800abe0:	10000003 	.word	0x10000003

0800abe4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800abe4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800abe6:	4c10      	ldr	r4, [pc, #64]	; (800ac28 <HAL_PWREx_ConfigSupply+0x44>)
 800abe8:	68e3      	ldr	r3, [r4, #12]
 800abea:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800abee:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800abf0:	d105      	bne.n	800abfe <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800abf2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800abf6:	1a18      	subs	r0, r3, r0
 800abf8:	bf18      	it	ne
 800abfa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800abfc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800abfe:	f023 0307 	bic.w	r3, r3, #7
 800ac02:	4303      	orrs	r3, r0
 800ac04:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800ac06:	f7fc fcbf 	bl	8007588 <HAL_GetTick>
 800ac0a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac0c:	e005      	b.n	800ac1a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ac0e:	f7fc fcbb 	bl	8007588 <HAL_GetTick>
 800ac12:	1b40      	subs	r0, r0, r5
 800ac14:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ac18:	d804      	bhi.n	800ac24 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	049b      	lsls	r3, r3, #18
 800ac1e:	d5f6      	bpl.n	800ac0e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800ac20:	2000      	movs	r0, #0
}
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800ac24:	2001      	movs	r0, #1
}
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	58024800 	.word	0x58024800

0800ac2c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ac2c:	4a02      	ldr	r2, [pc, #8]	; (800ac38 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800ac2e:	68d3      	ldr	r3, [r2, #12]
 800ac30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac34:	60d3      	str	r3, [r2, #12]
}
 800ac36:	4770      	bx	lr
 800ac38:	58024800 	.word	0x58024800

0800ac3c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac3c:	4b3c      	ldr	r3, [pc, #240]	; (800ad30 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800ac3e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac42:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac44:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800ac46:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac4c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800ac50:	d038      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac52:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac56:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac5a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac5e:	fb05 f101 	mul.w	r1, r5, r1
 800ac62:	2a01      	cmp	r2, #1
 800ac64:	ee07 1a90 	vmov	s15, r1
 800ac68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800ac6c:	d002      	beq.n	800ac74 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800ac6e:	2a02      	cmp	r2, #2
 800ac70:	d050      	beq.n	800ad14 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 800ac72:	b34a      	cbz	r2, 800acc8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac74:	ee07 0a90 	vmov	s15, r0
 800ac78:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 800ad34 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800ac7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac82:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800ac86:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800ad38 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ac96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac9a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ac9e:	eee7 7a06 	vfma.f32	s15, s14, s12
 800aca2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aca6:	4b22      	ldr	r3, [pc, #136]	; (800ad30 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 800aca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acaa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800acae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800acc4:	bc30      	pop	{r4, r5}
 800acc6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	0692      	lsls	r2, r2, #26
 800accc:	d529      	bpl.n	800ad22 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acce:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acd0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd4:	4a19      	ldr	r2, [pc, #100]	; (800ad3c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acdc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ace4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800ad38 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800ace8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acec:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acee:	ee06 3a10 	vmov	s12, r3
 800acf2:	ee05 2a90 	vmov	s11, r2
 800acf6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800acfa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800acfe:	ee36 6a26 	vadd.f32	s12, s12, s13
 800ad02:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800ad06:	eef0 7a46 	vmov.f32	s15, s12
 800ad0a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800ad0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad12:	e7c8      	b.n	800aca6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad14:	ee07 0a90 	vmov	s15, r0
 800ad18:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800ad40 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800ad1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad20:	e7ae      	b.n	800ac80 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad22:	ee07 0a90 	vmov	s15, r0
 800ad26:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800ad44 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800ad2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad2e:	e7a7      	b.n	800ac80 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800ad30:	58024400 	.word	0x58024400
 800ad34:	4a742400 	.word	0x4a742400
 800ad38:	39000000 	.word	0x39000000
 800ad3c:	03d09000 	.word	0x03d09000
 800ad40:	4bbebc20 	.word	0x4bbebc20
 800ad44:	4c742400 	.word	0x4c742400

0800ad48 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f000 81e8 	beq.w	800b11e <HAL_RCC_OscConfig+0x3d6>
{
 800ad4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad50:	6803      	ldr	r3, [r0, #0]
 800ad52:	4604      	mov	r4, r0
 800ad54:	07d9      	lsls	r1, r3, #31
 800ad56:	d52e      	bpl.n	800adb6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad58:	49a4      	ldr	r1, [pc, #656]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800ad5a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad5c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad5e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ad62:	2a10      	cmp	r2, #16
 800ad64:	f000 8107 	beq.w	800af76 <HAL_RCC_OscConfig+0x22e>
 800ad68:	2a18      	cmp	r2, #24
 800ad6a:	f000 80ff 	beq.w	800af6c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad74:	f000 812a 	beq.w	800afcc <HAL_RCC_OscConfig+0x284>
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8168 	beq.w	800b04e <HAL_RCC_OscConfig+0x306>
 800ad7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad82:	4b9a      	ldr	r3, [pc, #616]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	f000 8289 	beq.w	800b29c <HAL_RCC_OscConfig+0x554>
 800ad8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ad98:	f7fc fbf6 	bl	8007588 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad9c:	4e93      	ldr	r6, [pc, #588]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800ad9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ada0:	e005      	b.n	800adae <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ada2:	f7fc fbf1 	bl	8007588 <HAL_GetTick>
 800ada6:	1b40      	subs	r0, r0, r5
 800ada8:	2864      	cmp	r0, #100	; 0x64
 800adaa:	f200 814e 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800adae:	6833      	ldr	r3, [r6, #0]
 800adb0:	039b      	lsls	r3, r3, #14
 800adb2:	d5f6      	bpl.n	800ada2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	079d      	lsls	r5, r3, #30
 800adb8:	f100 808a 	bmi.w	800aed0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800adbc:	06d9      	lsls	r1, r3, #27
 800adbe:	d533      	bpl.n	800ae28 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adc0:	4a8a      	ldr	r2, [pc, #552]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800adc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800adca:	2b08      	cmp	r3, #8
 800adcc:	f000 80e3 	beq.w	800af96 <HAL_RCC_OscConfig+0x24e>
 800add0:	2b18      	cmp	r3, #24
 800add2:	f000 80db 	beq.w	800af8c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800add6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800add8:	4d84      	ldr	r5, [pc, #528]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 816f 	beq.w	800b0be <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ade8:	f7fc fbce 	bl	8007588 <HAL_GetTick>
 800adec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adee:	e005      	b.n	800adfc <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800adf0:	f7fc fbca 	bl	8007588 <HAL_GetTick>
 800adf4:	1b80      	subs	r0, r0, r6
 800adf6:	2802      	cmp	r0, #2
 800adf8:	f200 8127 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	05db      	lsls	r3, r3, #23
 800ae00:	d5f6      	bpl.n	800adf0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae02:	f7fc fbd9 	bl	80075b8 <HAL_GetREVID>
 800ae06:	f241 0303 	movw	r3, #4099	; 0x1003
 800ae0a:	4298      	cmp	r0, r3
 800ae0c:	f200 826d 	bhi.w	800b2ea <HAL_RCC_OscConfig+0x5a2>
 800ae10:	6a22      	ldr	r2, [r4, #32]
 800ae12:	686b      	ldr	r3, [r5, #4]
 800ae14:	2a20      	cmp	r2, #32
 800ae16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ae1a:	bf0c      	ite	eq
 800ae1c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800ae20:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800ae24:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	071d      	lsls	r5, r3, #28
 800ae2a:	d516      	bpl.n	800ae5a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae2c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800ae2e:	4d6f      	ldr	r5, [pc, #444]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8122 	beq.w	800b07a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800ae36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ae38:	f043 0301 	orr.w	r3, r3, #1
 800ae3c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ae3e:	f7fc fba3 	bl	8007588 <HAL_GetTick>
 800ae42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae44:	e005      	b.n	800ae52 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae46:	f7fc fb9f 	bl	8007588 <HAL_GetTick>
 800ae4a:	1b80      	subs	r0, r0, r6
 800ae4c:	2802      	cmp	r0, #2
 800ae4e:	f200 80fc 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ae54:	0798      	lsls	r0, r3, #30
 800ae56:	d5f6      	bpl.n	800ae46 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	069a      	lsls	r2, r3, #26
 800ae5c:	d516      	bpl.n	800ae8c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae5e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800ae60:	4d62      	ldr	r5, [pc, #392]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 811a 	beq.w	800b09c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ae70:	f7fc fb8a 	bl	8007588 <HAL_GetTick>
 800ae74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae76:	e005      	b.n	800ae84 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae78:	f7fc fb86 	bl	8007588 <HAL_GetTick>
 800ae7c:	1b80      	subs	r0, r0, r6
 800ae7e:	2802      	cmp	r0, #2
 800ae80:	f200 80e3 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	049f      	lsls	r7, r3, #18
 800ae88:	d5f6      	bpl.n	800ae78 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	0759      	lsls	r1, r3, #29
 800ae8e:	f100 80a3 	bmi.w	800afd8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae94:	b1d0      	cbz	r0, 800aecc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae96:	4d55      	ldr	r5, [pc, #340]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800ae98:	692b      	ldr	r3, [r5, #16]
 800ae9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae9e:	2b18      	cmp	r3, #24
 800aea0:	f000 81ae 	beq.w	800b200 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800aea4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aea6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800aea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeac:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeae:	f000 8142 	beq.w	800b136 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800aeb2:	f7fc fb69 	bl	8007588 <HAL_GetTick>
 800aeb6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aeb8:	e005      	b.n	800aec6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeba:	f7fc fb65 	bl	8007588 <HAL_GetTick>
 800aebe:	1b00      	subs	r0, r0, r4
 800aec0:	2802      	cmp	r0, #2
 800aec2:	f200 80c2 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	019b      	lsls	r3, r3, #6
 800aeca:	d4f6      	bmi.n	800aeba <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800aecc:	2000      	movs	r0, #0
}
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aed0:	4a46      	ldr	r2, [pc, #280]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800aed2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aed4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aed6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800aeda:	d12d      	bne.n	800af38 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aedc:	4b43      	ldr	r3, [pc, #268]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800aede:	68e2      	ldr	r2, [r4, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	0759      	lsls	r1, r3, #29
 800aee4:	d501      	bpl.n	800aeea <HAL_RCC_OscConfig+0x1a2>
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	d04e      	beq.n	800af88 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aeea:	4d40      	ldr	r5, [pc, #256]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	f023 0319 	bic.w	r3, r3, #25
 800aef2:	4313      	orrs	r3, r2
 800aef4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aef6:	f7fc fb47 	bl	8007588 <HAL_GetTick>
 800aefa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aefc:	e005      	b.n	800af0a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aefe:	f7fc fb43 	bl	8007588 <HAL_GetTick>
 800af02:	1b80      	subs	r0, r0, r6
 800af04:	2802      	cmp	r0, #2
 800af06:	f200 80a0 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	075b      	lsls	r3, r3, #29
 800af0e:	d5f6      	bpl.n	800aefe <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af10:	f7fc fb52 	bl	80075b8 <HAL_GetREVID>
 800af14:	f241 0303 	movw	r3, #4099	; 0x1003
 800af18:	4298      	cmp	r0, r3
 800af1a:	f200 80f7 	bhi.w	800b10c <HAL_RCC_OscConfig+0x3c4>
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	686b      	ldr	r3, [r5, #4]
 800af22:	2a40      	cmp	r2, #64	; 0x40
 800af24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800af28:	bf0c      	ite	eq
 800af2a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800af2e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800af32:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	e741      	b.n	800adbc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800af38:	2b18      	cmp	r3, #24
 800af3a:	f000 80e3 	beq.w	800b104 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af3e:	4d2b      	ldr	r5, [pc, #172]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800af40:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af42:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800af44:	2a00      	cmp	r2, #0
 800af46:	f000 80cc 	beq.w	800b0e2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af4a:	f023 0319 	bic.w	r3, r3, #25
 800af4e:	4313      	orrs	r3, r2
 800af50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800af52:	f7fc fb19 	bl	8007588 <HAL_GetTick>
 800af56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af58:	e004      	b.n	800af64 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af5a:	f7fc fb15 	bl	8007588 <HAL_GetTick>
 800af5e:	1b80      	subs	r0, r0, r6
 800af60:	2802      	cmp	r0, #2
 800af62:	d872      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	075f      	lsls	r7, r3, #29
 800af68:	d5f7      	bpl.n	800af5a <HAL_RCC_OscConfig+0x212>
 800af6a:	e7d1      	b.n	800af10 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af6c:	f001 0103 	and.w	r1, r1, #3
 800af70:	2902      	cmp	r1, #2
 800af72:	f47f aefc 	bne.w	800ad6e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af76:	4a1d      	ldr	r2, [pc, #116]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800af78:	6812      	ldr	r2, [r2, #0]
 800af7a:	0392      	lsls	r2, r2, #14
 800af7c:	f57f af1b 	bpl.w	800adb6 <HAL_RCC_OscConfig+0x6e>
 800af80:	6862      	ldr	r2, [r4, #4]
 800af82:	2a00      	cmp	r2, #0
 800af84:	f47f af17 	bne.w	800adb6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800af88:	2001      	movs	r0, #1
}
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800af8c:	f002 0203 	and.w	r2, r2, #3
 800af90:	2a01      	cmp	r2, #1
 800af92:	f47f af20 	bne.w	800add6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800af96:	4b15      	ldr	r3, [pc, #84]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	05da      	lsls	r2, r3, #23
 800af9c:	d502      	bpl.n	800afa4 <HAL_RCC_OscConfig+0x25c>
 800af9e:	69e3      	ldr	r3, [r4, #28]
 800afa0:	2b80      	cmp	r3, #128	; 0x80
 800afa2:	d1f1      	bne.n	800af88 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800afa4:	f7fc fb08 	bl	80075b8 <HAL_GetREVID>
 800afa8:	f241 0303 	movw	r3, #4099	; 0x1003
 800afac:	4298      	cmp	r0, r3
 800afae:	f200 80b8 	bhi.w	800b122 <HAL_RCC_OscConfig+0x3da>
 800afb2:	6a22      	ldr	r2, [r4, #32]
 800afb4:	2a20      	cmp	r2, #32
 800afb6:	f000 81a7 	beq.w	800b308 <HAL_RCC_OscConfig+0x5c0>
 800afba:	490c      	ldr	r1, [pc, #48]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800afbc:	684b      	ldr	r3, [r1, #4]
 800afbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800afc2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800afc6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	e72d      	b.n	800ae28 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afcc:	4a07      	ldr	r2, [pc, #28]	; (800afec <HAL_RCC_OscConfig+0x2a4>)
 800afce:	6813      	ldr	r3, [r2, #0]
 800afd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afd4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afd6:	e6df      	b.n	800ad98 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800afd8:	4d05      	ldr	r5, [pc, #20]	; (800aff0 <HAL_RCC_OscConfig+0x2a8>)
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afe0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800afe2:	f7fc fad1 	bl	8007588 <HAL_GetTick>
 800afe6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afe8:	e009      	b.n	800affe <HAL_RCC_OscConfig+0x2b6>
 800afea:	bf00      	nop
 800afec:	58024400 	.word	0x58024400
 800aff0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aff4:	f7fc fac8 	bl	8007588 <HAL_GetTick>
 800aff8:	1b80      	subs	r0, r0, r6
 800affa:	2864      	cmp	r0, #100	; 0x64
 800affc:	d825      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	05da      	lsls	r2, r3, #23
 800b002:	d5f7      	bpl.n	800aff4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	2b01      	cmp	r3, #1
 800b008:	f000 8178 	beq.w	800b2fc <HAL_RCC_OscConfig+0x5b4>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8153 	beq.w	800b2b8 <HAL_RCC_OscConfig+0x570>
 800b012:	2b05      	cmp	r3, #5
 800b014:	4ba5      	ldr	r3, [pc, #660]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
 800b016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b018:	f000 817f 	beq.w	800b31a <HAL_RCC_OscConfig+0x5d2>
 800b01c:	f022 0201 	bic.w	r2, r2, #1
 800b020:	671a      	str	r2, [r3, #112]	; 0x70
 800b022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b024:	f022 0204 	bic.w	r2, r2, #4
 800b028:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b02a:	f7fc faad 	bl	8007588 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b02e:	4e9f      	ldr	r6, [pc, #636]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b030:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b034:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b036:	e004      	b.n	800b042 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b038:	f7fc faa6 	bl	8007588 <HAL_GetTick>
 800b03c:	1b40      	subs	r0, r0, r5
 800b03e:	42b8      	cmp	r0, r7
 800b040:	d803      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b042:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b044:	079b      	lsls	r3, r3, #30
 800b046:	d5f7      	bpl.n	800b038 <HAL_RCC_OscConfig+0x2f0>
 800b048:	e723      	b.n	800ae92 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800b04a:	2003      	movs	r0, #3
}
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b04e:	4d97      	ldr	r5, [pc, #604]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b05e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b060:	f7fc fa92 	bl	8007588 <HAL_GetTick>
 800b064:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b066:	e004      	b.n	800b072 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b068:	f7fc fa8e 	bl	8007588 <HAL_GetTick>
 800b06c:	1b80      	subs	r0, r0, r6
 800b06e:	2864      	cmp	r0, #100	; 0x64
 800b070:	d8eb      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	039f      	lsls	r7, r3, #14
 800b076:	d4f7      	bmi.n	800b068 <HAL_RCC_OscConfig+0x320>
 800b078:	e69c      	b.n	800adb4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800b07a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b07c:	f023 0301 	bic.w	r3, r3, #1
 800b080:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b082:	f7fc fa81 	bl	8007588 <HAL_GetTick>
 800b086:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b088:	e004      	b.n	800b094 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b08a:	f7fc fa7d 	bl	8007588 <HAL_GetTick>
 800b08e:	1b80      	subs	r0, r0, r6
 800b090:	2802      	cmp	r0, #2
 800b092:	d8da      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b094:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b096:	0799      	lsls	r1, r3, #30
 800b098:	d4f7      	bmi.n	800b08a <HAL_RCC_OscConfig+0x342>
 800b09a:	e6dd      	b.n	800ae58 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b0a4:	f7fc fa70 	bl	8007588 <HAL_GetTick>
 800b0a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b0aa:	e004      	b.n	800b0b6 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b0ac:	f7fc fa6c 	bl	8007588 <HAL_GetTick>
 800b0b0:	1b80      	subs	r0, r0, r6
 800b0b2:	2802      	cmp	r0, #2
 800b0b4:	d8c9      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	0498      	lsls	r0, r3, #18
 800b0ba:	d4f7      	bmi.n	800b0ac <HAL_RCC_OscConfig+0x364>
 800b0bc:	e6e5      	b.n	800ae8a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b0c6:	f7fc fa5f 	bl	8007588 <HAL_GetTick>
 800b0ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b0cc:	e004      	b.n	800b0d8 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b0ce:	f7fc fa5b 	bl	8007588 <HAL_GetTick>
 800b0d2:	1b80      	subs	r0, r0, r6
 800b0d4:	2802      	cmp	r0, #2
 800b0d6:	d8b8      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	05df      	lsls	r7, r3, #23
 800b0dc:	d4f7      	bmi.n	800b0ce <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	e6a2      	b.n	800ae28 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b0e8:	f7fc fa4e 	bl	8007588 <HAL_GetTick>
 800b0ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b0ee:	e004      	b.n	800b0fa <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0f0:	f7fc fa4a 	bl	8007588 <HAL_GetTick>
 800b0f4:	1b80      	subs	r0, r0, r6
 800b0f6:	2802      	cmp	r0, #2
 800b0f8:	d8a7      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	0758      	lsls	r0, r3, #29
 800b0fe:	d4f7      	bmi.n	800b0f0 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	e65b      	b.n	800adbc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b104:	0790      	lsls	r0, r2, #30
 800b106:	f47f af1a 	bne.w	800af3e <HAL_RCC_OscConfig+0x1f6>
 800b10a:	e6e7      	b.n	800aedc <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b10c:	686b      	ldr	r3, [r5, #4]
 800b10e:	6922      	ldr	r2, [r4, #16]
 800b110:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b118:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	e64e      	b.n	800adbc <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800b11e:	2001      	movs	r0, #1
}
 800b120:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b122:	4a62      	ldr	r2, [pc, #392]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
 800b124:	6a21      	ldr	r1, [r4, #32]
 800b126:	68d3      	ldr	r3, [r2, #12]
 800b128:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b12c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b130:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	e678      	b.n	800ae28 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800b136:	f7fc fa27 	bl	8007588 <HAL_GetTick>
 800b13a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b13c:	e004      	b.n	800b148 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b13e:	f7fc fa23 	bl	8007588 <HAL_GetTick>
 800b142:	1b80      	subs	r0, r0, r6
 800b144:	2802      	cmp	r0, #2
 800b146:	d880      	bhi.n	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	0199      	lsls	r1, r3, #6
 800b14c:	d4f7      	bmi.n	800b13e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b14e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b150:	4b57      	ldr	r3, [pc, #348]	; (800b2b0 <HAL_RCC_OscConfig+0x568>)
 800b152:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b154:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b156:	4957      	ldr	r1, [pc, #348]	; (800b2b4 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b158:	4e54      	ldr	r6, [pc, #336]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b15a:	4313      	orrs	r3, r2
 800b15c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b15e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b162:	62ab      	str	r3, [r5, #40]	; 0x28
 800b164:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800b168:	3b01      	subs	r3, #1
 800b16a:	3a01      	subs	r2, #1
 800b16c:	025b      	lsls	r3, r3, #9
 800b16e:	0412      	lsls	r2, r2, #16
 800b170:	b29b      	uxth	r3, r3
 800b172:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b176:	4313      	orrs	r3, r2
 800b178:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b17a:	3a01      	subs	r2, #1
 800b17c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b180:	4313      	orrs	r3, r2
 800b182:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b184:	3a01      	subs	r2, #1
 800b186:	0612      	lsls	r2, r2, #24
 800b188:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b18c:	4313      	orrs	r3, r2
 800b18e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b190:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b198:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b19a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b19c:	4011      	ands	r1, r2
 800b19e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800b1a2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b1a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b1a8:	f023 030c 	bic.w	r3, r3, #12
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b1b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b1b4:	f023 0302 	bic.w	r3, r3, #2
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b1bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b1cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b1d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1e4:	f7fc f9d0 	bl	8007588 <HAL_GetTick>
 800b1e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1ea:	e005      	b.n	800b1f8 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1ec:	f7fc f9cc 	bl	8007588 <HAL_GetTick>
 800b1f0:	1b00      	subs	r0, r0, r4
 800b1f2:	2802      	cmp	r0, #2
 800b1f4:	f63f af29 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1f8:	6833      	ldr	r3, [r6, #0]
 800b1fa:	019a      	lsls	r2, r3, #6
 800b1fc:	d5f6      	bpl.n	800b1ec <HAL_RCC_OscConfig+0x4a4>
 800b1fe:	e665      	b.n	800aecc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b200:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b202:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b204:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b206:	f43f ae62 	beq.w	800aece <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b20a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b20e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b210:	428b      	cmp	r3, r1
 800b212:	f47f aeb9 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b216:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b21a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b21c:	429a      	cmp	r2, r3
 800b21e:	f47f aeb3 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b224:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800b228:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b22a:	429a      	cmp	r2, r3
 800b22c:	f47f aeac 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b232:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800b236:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b238:	429a      	cmp	r2, r3
 800b23a:	f47f aea5 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b23e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b240:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800b244:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b246:	429a      	cmp	r2, r3
 800b248:	f47f ae9e 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b24c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b24e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800b252:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b254:	429e      	cmp	r6, r3
 800b256:	f47f ae97 	bne.w	800af88 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b25a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b25c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b25e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b262:	429a      	cmp	r2, r3
 800b264:	f43f ae32 	beq.w	800aecc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b268:	4a10      	ldr	r2, [pc, #64]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
 800b26a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800b272:	f7fc f989 	bl	8007588 <HAL_GetTick>
 800b276:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b278:	f7fc f986 	bl	8007588 <HAL_GetTick>
 800b27c:	42a8      	cmp	r0, r5
 800b27e:	d0fb      	beq.n	800b278 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b280:	4a0a      	ldr	r2, [pc, #40]	; (800b2ac <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800b282:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b284:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b286:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <HAL_RCC_OscConfig+0x56c>)
 800b288:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b28a:	4023      	ands	r3, r4
 800b28c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b290:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b292:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b294:	f043 0301 	orr.w	r3, r3, #1
 800b298:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b29c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	e575      	b.n	800ad98 <HAL_RCC_OscConfig+0x50>
 800b2ac:	58024400 	.word	0x58024400
 800b2b0:	fffffc0c 	.word	0xfffffc0c
 800b2b4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2b8:	4d1c      	ldr	r5, [pc, #112]	; (800b32c <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2ba:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b2c0:	f023 0301 	bic.w	r3, r3, #1
 800b2c4:	672b      	str	r3, [r5, #112]	; 0x70
 800b2c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b2c8:	f023 0304 	bic.w	r3, r3, #4
 800b2cc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b2ce:	f7fc f95b 	bl	8007588 <HAL_GetTick>
 800b2d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b2d4:	e005      	b.n	800b2e2 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2d6:	f7fc f957 	bl	8007588 <HAL_GetTick>
 800b2da:	1b80      	subs	r0, r0, r6
 800b2dc:	42b8      	cmp	r0, r7
 800b2de:	f63f aeb4 	bhi.w	800b04a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b2e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b2e4:	0798      	lsls	r0, r3, #30
 800b2e6:	d4f6      	bmi.n	800b2d6 <HAL_RCC_OscConfig+0x58e>
 800b2e8:	e5d3      	b.n	800ae92 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b2ea:	68eb      	ldr	r3, [r5, #12]
 800b2ec:	6a22      	ldr	r2, [r4, #32]
 800b2ee:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b2f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b2f6:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	e595      	b.n	800ae28 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2fc:	4a0b      	ldr	r2, [pc, #44]	; (800b32c <HAL_RCC_OscConfig+0x5e4>)
 800b2fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b300:	f043 0301 	orr.w	r3, r3, #1
 800b304:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b306:	e690      	b.n	800b02a <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b308:	4a08      	ldr	r2, [pc, #32]	; (800b32c <HAL_RCC_OscConfig+0x5e4>)
 800b30a:	6853      	ldr	r3, [r2, #4]
 800b30c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b314:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	e586      	b.n	800ae28 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b31a:	f042 0204 	orr.w	r2, r2, #4
 800b31e:	671a      	str	r2, [r3, #112]	; 0x70
 800b320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b322:	f042 0201 	orr.w	r2, r2, #1
 800b326:	671a      	str	r2, [r3, #112]	; 0x70
 800b328:	e67f      	b.n	800b02a <HAL_RCC_OscConfig+0x2e2>
 800b32a:	bf00      	nop
 800b32c:	58024400 	.word	0x58024400

0800b330 <HAL_RCC_MCOConfig>:
{
 800b330:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800b332:	4e25      	ldr	r6, [pc, #148]	; (800b3c8 <HAL_RCC_MCOConfig+0x98>)
{
 800b334:	b088      	sub	sp, #32
 800b336:	460d      	mov	r5, r1
 800b338:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800b33a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b33e:	b9f8      	cbnz	r0, 800b380 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b340:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b344:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b348:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800b34a:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b34e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b352:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800b354:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b358:	481c      	ldr	r0, [pc, #112]	; (800b3cc <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b35e:	2302      	movs	r3, #2
 800b360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b364:	2200      	movs	r2, #0
 800b366:	2303      	movs	r3, #3
 800b368:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b36c:	f7ff f9c0 	bl	800a6f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b370:	6933      	ldr	r3, [r6, #16]
 800b372:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800b376:	432b      	orrs	r3, r5
 800b378:	4323      	orrs	r3, r4
 800b37a:	6133      	str	r3, [r6, #16]
}
 800b37c:	b008      	add	sp, #32
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b380:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b384:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b388:	4811      	ldr	r0, [pc, #68]	; (800b3d0 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800b38a:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b38e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b398:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800b39a:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b39c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b39e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b3ae:	f7ff f99f 	bl	800a6f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b3b2:	6933      	ldr	r3, [r6, #16]
 800b3b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b3b8:	ea43 0105 	orr.w	r1, r3, r5
 800b3bc:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800b3c0:	6131      	str	r1, [r6, #16]
}
 800b3c2:	b008      	add	sp, #32
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400
 800b3cc:	58020000 	.word	0x58020000
 800b3d0:	58020800 	.word	0x58020800

0800b3d4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3d4:	4a48      	ldr	r2, [pc, #288]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x124>)
 800b3d6:	6913      	ldr	r3, [r2, #16]
 800b3d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3dc:	2b10      	cmp	r3, #16
 800b3de:	d004      	beq.n	800b3ea <HAL_RCC_GetSysClockFreq+0x16>
 800b3e0:	2b18      	cmp	r3, #24
 800b3e2:	d00d      	beq.n	800b400 <HAL_RCC_GetSysClockFreq+0x2c>
 800b3e4:	b11b      	cbz	r3, 800b3ee <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800b3e6:	4845      	ldr	r0, [pc, #276]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x128>)
 800b3e8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3ea:	4845      	ldr	r0, [pc, #276]	; (800b500 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b3ec:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ee:	6813      	ldr	r3, [r2, #0]
 800b3f0:	0699      	lsls	r1, r3, #26
 800b3f2:	d54a      	bpl.n	800b48a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3f4:	6813      	ldr	r3, [r2, #0]
 800b3f6:	4843      	ldr	r0, [pc, #268]	; (800b504 <HAL_RCC_GetSysClockFreq+0x130>)
 800b3f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b3fc:	40d8      	lsrs	r0, r3
 800b3fe:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b400:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800b402:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b404:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b406:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800b408:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b40c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b40e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b412:	d038      	beq.n	800b486 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b414:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b418:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b41c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b420:	fb05 f101 	mul.w	r1, r5, r1
 800b424:	2b01      	cmp	r3, #1
 800b426:	ee07 1a90 	vmov	s15, r1
 800b42a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800b42e:	d002      	beq.n	800b436 <HAL_RCC_GetSysClockFreq+0x62>
 800b430:	2b02      	cmp	r3, #2
 800b432:	d02c      	beq.n	800b48e <HAL_RCC_GetSysClockFreq+0xba>
 800b434:	b393      	cbz	r3, 800b49c <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b436:	ee07 0a90 	vmov	s15, r0
 800b43a:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800b508 <HAL_RCC_GetSysClockFreq+0x134>
 800b43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b442:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b444:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800b448:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800b50c <HAL_RCC_GetSysClockFreq+0x138>
 800b44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b45c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b460:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b464:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b468:	4b23      	ldr	r3, [pc, #140]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x124>)
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b470:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b482:	ee17 0a90 	vmov	r0, s15
}
 800b486:	bc30      	pop	{r4, r5}
 800b488:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b48a:	481e      	ldr	r0, [pc, #120]	; (800b504 <HAL_RCC_GetSysClockFreq+0x130>)
}
 800b48c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b48e:	ee07 0a90 	vmov	s15, r0
 800b492:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800b510 <HAL_RCC_GetSysClockFreq+0x13c>
 800b496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b49a:	e7d2      	b.n	800b442 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b49c:	6813      	ldr	r3, [r2, #0]
 800b49e:	069b      	lsls	r3, r3, #26
 800b4a0:	d522      	bpl.n	800b4e8 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4a2:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4a4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4a8:	4916      	ldr	r1, [pc, #88]	; (800b504 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4b0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4b8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b50c <HAL_RCC_GetSysClockFreq+0x138>
 800b4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4c0:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4c2:	ee06 3a10 	vmov	s12, r3
 800b4c6:	ee05 1a90 	vmov	s11, r1
 800b4ca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800b4ce:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b4d2:	ee36 6a26 	vadd.f32	s12, s12, s13
 800b4d6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800b4da:	eef0 7a46 	vmov.f32	s15, s12
 800b4de:	eee7 7a05 	vfma.f32	s15, s14, s10
 800b4e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b4e6:	e7bf      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4e8:	ee07 0a90 	vmov	s15, r0
 800b4ec:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800b514 <HAL_RCC_GetSysClockFreq+0x140>
 800b4f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f4:	e7a5      	b.n	800b442 <HAL_RCC_GetSysClockFreq+0x6e>
 800b4f6:	bf00      	nop
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	003d0900 	.word	0x003d0900
 800b500:	017d7840 	.word	0x017d7840
 800b504:	03d09000 	.word	0x03d09000
 800b508:	4a742400 	.word	0x4a742400
 800b50c:	39000000 	.word	0x39000000
 800b510:	4bbebc20 	.word	0x4bbebc20
 800b514:	4c742400 	.word	0x4c742400

0800b518 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b518:	2800      	cmp	r0, #0
 800b51a:	f000 810c 	beq.w	800b736 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b51e:	4a8c      	ldr	r2, [pc, #560]	; (800b750 <HAL_RCC_ClockConfig+0x238>)
 800b520:	6813      	ldr	r3, [r2, #0]
 800b522:	f003 030f 	and.w	r3, r3, #15
 800b526:	428b      	cmp	r3, r1
{
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	4604      	mov	r4, r0
 800b52e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b530:	d20c      	bcs.n	800b54c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b532:	6813      	ldr	r3, [r2, #0]
 800b534:	f023 030f 	bic.w	r3, r3, #15
 800b538:	430b      	orrs	r3, r1
 800b53a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53c:	6813      	ldr	r3, [r2, #0]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	428b      	cmp	r3, r1
 800b544:	d002      	beq.n	800b54c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b546:	2001      	movs	r0, #1
}
 800b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	075f      	lsls	r7, r3, #29
 800b550:	d50b      	bpl.n	800b56a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b552:	4980      	ldr	r1, [pc, #512]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b554:	6920      	ldr	r0, [r4, #16]
 800b556:	698a      	ldr	r2, [r1, #24]
 800b558:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b55c:	4290      	cmp	r0, r2
 800b55e:	d904      	bls.n	800b56a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b560:	698a      	ldr	r2, [r1, #24]
 800b562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b566:	4302      	orrs	r2, r0
 800b568:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b56a:	071e      	lsls	r6, r3, #28
 800b56c:	d50b      	bpl.n	800b586 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b56e:	4979      	ldr	r1, [pc, #484]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b570:	6960      	ldr	r0, [r4, #20]
 800b572:	69ca      	ldr	r2, [r1, #28]
 800b574:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b578:	4290      	cmp	r0, r2
 800b57a:	d904      	bls.n	800b586 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b57c:	69ca      	ldr	r2, [r1, #28]
 800b57e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b582:	4302      	orrs	r2, r0
 800b584:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b586:	06d8      	lsls	r0, r3, #27
 800b588:	d50b      	bpl.n	800b5a2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b58a:	4972      	ldr	r1, [pc, #456]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b58c:	69a0      	ldr	r0, [r4, #24]
 800b58e:	69ca      	ldr	r2, [r1, #28]
 800b590:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b594:	4290      	cmp	r0, r2
 800b596:	d904      	bls.n	800b5a2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b598:	69ca      	ldr	r2, [r1, #28]
 800b59a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b59e:	4302      	orrs	r2, r0
 800b5a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5a2:	0699      	lsls	r1, r3, #26
 800b5a4:	d50b      	bpl.n	800b5be <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b5a6:	496b      	ldr	r1, [pc, #428]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b5a8:	69e0      	ldr	r0, [r4, #28]
 800b5aa:	6a0a      	ldr	r2, [r1, #32]
 800b5ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5b0:	4290      	cmp	r0, r2
 800b5b2:	d904      	bls.n	800b5be <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b5b4:	6a0a      	ldr	r2, [r1, #32]
 800b5b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b5ba:	4302      	orrs	r2, r0
 800b5bc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5be:	079a      	lsls	r2, r3, #30
 800b5c0:	f140 80ab 	bpl.w	800b71a <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b5c4:	4863      	ldr	r0, [pc, #396]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b5c6:	68e1      	ldr	r1, [r4, #12]
 800b5c8:	6982      	ldr	r2, [r0, #24]
 800b5ca:	f002 020f 	and.w	r2, r2, #15
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d904      	bls.n	800b5dc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5d2:	6982      	ldr	r2, [r0, #24]
 800b5d4:	f022 020f 	bic.w	r2, r2, #15
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b5dc:	07d8      	lsls	r0, r3, #31
 800b5de:	d530      	bpl.n	800b642 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b5e0:	4a5c      	ldr	r2, [pc, #368]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b5e2:	68a1      	ldr	r1, [r4, #8]
 800b5e4:	6993      	ldr	r3, [r2, #24]
 800b5e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5ee:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5f0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5f2:	2902      	cmp	r1, #2
 800b5f4:	f000 80a1 	beq.w	800b73a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5f8:	2903      	cmp	r1, #3
 800b5fa:	f000 8098 	beq.w	800b72e <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b5fe:	2901      	cmp	r1, #1
 800b600:	f000 80a1 	beq.w	800b746 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d59e      	bpl.n	800b546 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b608:	4e52      	ldr	r6, [pc, #328]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b60a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b60e:	6933      	ldr	r3, [r6, #16]
 800b610:	f023 0307 	bic.w	r3, r3, #7
 800b614:	430b      	orrs	r3, r1
 800b616:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b618:	f7fb ffb6 	bl	8007588 <HAL_GetTick>
 800b61c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b61e:	e005      	b.n	800b62c <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b620:	f7fb ffb2 	bl	8007588 <HAL_GetTick>
 800b624:	1bc0      	subs	r0, r0, r7
 800b626:	4540      	cmp	r0, r8
 800b628:	f200 808b 	bhi.w	800b742 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b62c:	6933      	ldr	r3, [r6, #16]
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b634:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b638:	d1f2      	bne.n	800b620 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	0799      	lsls	r1, r3, #30
 800b63e:	d506      	bpl.n	800b64e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b640:	68e1      	ldr	r1, [r4, #12]
 800b642:	4844      	ldr	r0, [pc, #272]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b644:	6982      	ldr	r2, [r0, #24]
 800b646:	f002 020f 	and.w	r2, r2, #15
 800b64a:	428a      	cmp	r2, r1
 800b64c:	d869      	bhi.n	800b722 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b64e:	4940      	ldr	r1, [pc, #256]	; (800b750 <HAL_RCC_ClockConfig+0x238>)
 800b650:	680a      	ldr	r2, [r1, #0]
 800b652:	f002 020f 	and.w	r2, r2, #15
 800b656:	42aa      	cmp	r2, r5
 800b658:	d90a      	bls.n	800b670 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b65a:	680a      	ldr	r2, [r1, #0]
 800b65c:	f022 020f 	bic.w	r2, r2, #15
 800b660:	432a      	orrs	r2, r5
 800b662:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b664:	680a      	ldr	r2, [r1, #0]
 800b666:	f002 020f 	and.w	r2, r2, #15
 800b66a:	42aa      	cmp	r2, r5
 800b66c:	f47f af6b 	bne.w	800b546 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b670:	075a      	lsls	r2, r3, #29
 800b672:	d50b      	bpl.n	800b68c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b674:	4937      	ldr	r1, [pc, #220]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b676:	6920      	ldr	r0, [r4, #16]
 800b678:	698a      	ldr	r2, [r1, #24]
 800b67a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b67e:	4290      	cmp	r0, r2
 800b680:	d204      	bcs.n	800b68c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b682:	698a      	ldr	r2, [r1, #24]
 800b684:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b688:	4302      	orrs	r2, r0
 800b68a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b68c:	071f      	lsls	r7, r3, #28
 800b68e:	d50b      	bpl.n	800b6a8 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b690:	4930      	ldr	r1, [pc, #192]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b692:	6960      	ldr	r0, [r4, #20]
 800b694:	69ca      	ldr	r2, [r1, #28]
 800b696:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b69a:	4290      	cmp	r0, r2
 800b69c:	d204      	bcs.n	800b6a8 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b69e:	69ca      	ldr	r2, [r1, #28]
 800b6a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b6a4:	4302      	orrs	r2, r0
 800b6a6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6a8:	06de      	lsls	r6, r3, #27
 800b6aa:	d50b      	bpl.n	800b6c4 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b6ac:	4929      	ldr	r1, [pc, #164]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b6ae:	69a0      	ldr	r0, [r4, #24]
 800b6b0:	69ca      	ldr	r2, [r1, #28]
 800b6b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b6b6:	4290      	cmp	r0, r2
 800b6b8:	d204      	bcs.n	800b6c4 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b6ba:	69ca      	ldr	r2, [r1, #28]
 800b6bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b6c0:	4302      	orrs	r2, r0
 800b6c2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b6c4:	069d      	lsls	r5, r3, #26
 800b6c6:	d50b      	bpl.n	800b6e0 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b6c8:	4a22      	ldr	r2, [pc, #136]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b6ca:	69e1      	ldr	r1, [r4, #28]
 800b6cc:	6a13      	ldr	r3, [r2, #32]
 800b6ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	d204      	bcs.n	800b6e0 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b6d6:	6a13      	ldr	r3, [r2, #32]
 800b6d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6e0:	f7ff fe78 	bl	800b3d4 <HAL_RCC_GetSysClockFreq>
 800b6e4:	4a1b      	ldr	r2, [pc, #108]	; (800b754 <HAL_RCC_ClockConfig+0x23c>)
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	481b      	ldr	r0, [pc, #108]	; (800b758 <HAL_RCC_ClockConfig+0x240>)
 800b6ea:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6ec:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6ee:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b6f2:	4d1a      	ldr	r5, [pc, #104]	; (800b75c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6f4:	f002 020f 	and.w	r2, r2, #15
 800b6f8:	4c19      	ldr	r4, [pc, #100]	; (800b760 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6fa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6fc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6fe:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b702:	4818      	ldr	r0, [pc, #96]	; (800b764 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b704:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b708:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b70a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b70c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b70e:	40d3      	lsrs	r3, r2
 800b710:	6023      	str	r3, [r4, #0]
}
 800b712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b716:	f7fb bed5 	b.w	80074c4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b71a:	07da      	lsls	r2, r3, #31
 800b71c:	f53f af60 	bmi.w	800b5e0 <HAL_RCC_ClockConfig+0xc8>
 800b720:	e795      	b.n	800b64e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b722:	6982      	ldr	r2, [r0, #24]
 800b724:	f022 020f 	bic.w	r2, r2, #15
 800b728:	430a      	orrs	r2, r1
 800b72a:	6182      	str	r2, [r0, #24]
 800b72c:	e78f      	b.n	800b64e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b72e:	019f      	lsls	r7, r3, #6
 800b730:	f53f af6a 	bmi.w	800b608 <HAL_RCC_ClockConfig+0xf0>
 800b734:	e707      	b.n	800b546 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b736:	2001      	movs	r0, #1
}
 800b738:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b73a:	039b      	lsls	r3, r3, #14
 800b73c:	f53f af64 	bmi.w	800b608 <HAL_RCC_ClockConfig+0xf0>
 800b740:	e701      	b.n	800b546 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b742:	2003      	movs	r0, #3
 800b744:	e700      	b.n	800b548 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b746:	05de      	lsls	r6, r3, #23
 800b748:	f53f af5e 	bmi.w	800b608 <HAL_RCC_ClockConfig+0xf0>
 800b74c:	e6fb      	b.n	800b546 <HAL_RCC_ClockConfig+0x2e>
 800b74e:	bf00      	nop
 800b750:	52002000 	.word	0x52002000
 800b754:	58024400 	.word	0x58024400
 800b758:	080195cc 	.word	0x080195cc
 800b75c:	24000314 	.word	0x24000314
 800b760:	24000318 	.word	0x24000318
 800b764:	2400033c 	.word	0x2400033c

0800b768 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b768:	4a18      	ldr	r2, [pc, #96]	; (800b7cc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b76a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b76c:	6913      	ldr	r3, [r2, #16]
 800b76e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b772:	2b10      	cmp	r3, #16
 800b774:	d01a      	beq.n	800b7ac <HAL_RCC_GetHCLKFreq+0x44>
 800b776:	2b18      	cmp	r3, #24
 800b778:	d023      	beq.n	800b7c2 <HAL_RCC_GetHCLKFreq+0x5a>
 800b77a:	b1cb      	cbz	r3, 800b7b0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b77c:	4814      	ldr	r0, [pc, #80]	; (800b7d0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b77e:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <HAL_RCC_GetHCLKFreq+0x64>)
 800b780:	4914      	ldr	r1, [pc, #80]	; (800b7d4 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b782:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b784:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b786:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b78a:	4c13      	ldr	r4, [pc, #76]	; (800b7d8 <HAL_RCC_GetHCLKFreq+0x70>)
 800b78c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b790:	4d12      	ldr	r5, [pc, #72]	; (800b7dc <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b792:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b794:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b796:	f002 021f 	and.w	r2, r2, #31
 800b79a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b79e:	f003 001f 	and.w	r0, r3, #31
 800b7a2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800b7a6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7a8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7ac:	480c      	ldr	r0, [pc, #48]	; (800b7e0 <HAL_RCC_GetHCLKFreq+0x78>)
 800b7ae:	e7e6      	b.n	800b77e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b0:	6813      	ldr	r3, [r2, #0]
 800b7b2:	069b      	lsls	r3, r3, #26
 800b7b4:	d508      	bpl.n	800b7c8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	480a      	ldr	r0, [pc, #40]	; (800b7e4 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b7ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b7be:	40d8      	lsrs	r0, r3
 800b7c0:	e7dd      	b.n	800b77e <HAL_RCC_GetHCLKFreq+0x16>
 800b7c2:	f7ff fa3b 	bl	800ac3c <HAL_RCC_GetSysClockFreq.part.0>
 800b7c6:	e7da      	b.n	800b77e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7c8:	4806      	ldr	r0, [pc, #24]	; (800b7e4 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b7ca:	e7d8      	b.n	800b77e <HAL_RCC_GetHCLKFreq+0x16>
 800b7cc:	58024400 	.word	0x58024400
 800b7d0:	003d0900 	.word	0x003d0900
 800b7d4:	080195cc 	.word	0x080195cc
 800b7d8:	24000318 	.word	0x24000318
 800b7dc:	24000314 	.word	0x24000314
 800b7e0:	017d7840 	.word	0x017d7840
 800b7e4:	03d09000 	.word	0x03d09000

0800b7e8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	; (800b85c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7ea:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7ec:	6913      	ldr	r3, [r2, #16]
 800b7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7f2:	2b10      	cmp	r3, #16
 800b7f4:	d021      	beq.n	800b83a <HAL_RCC_GetPCLK1Freq+0x52>
 800b7f6:	2b18      	cmp	r3, #24
 800b7f8:	d02a      	beq.n	800b850 <HAL_RCC_GetPCLK1Freq+0x68>
 800b7fa:	b303      	cbz	r3, 800b83e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b7fc:	4818      	ldr	r0, [pc, #96]	; (800b860 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7fe:	4a17      	ldr	r2, [pc, #92]	; (800b85c <HAL_RCC_GetPCLK1Freq+0x74>)
 800b800:	4918      	ldr	r1, [pc, #96]	; (800b864 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800b802:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b804:	4c18      	ldr	r4, [pc, #96]	; (800b868 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b806:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800b80a:	4d18      	ldr	r5, [pc, #96]	; (800b86c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b80c:	5ccb      	ldrb	r3, [r1, r3]
 800b80e:	f003 031f 	and.w	r3, r3, #31
 800b812:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b814:	6993      	ldr	r3, [r2, #24]
 800b816:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800b81a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b81c:	5ccb      	ldrb	r3, [r1, r3]
 800b81e:	f003 031f 	and.w	r3, r3, #31
 800b822:	fa20 f303 	lsr.w	r3, r0, r3
 800b826:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b828:	69d2      	ldr	r2, [r2, #28]
 800b82a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b82e:	5c88      	ldrb	r0, [r1, r2]
 800b830:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b834:	fa23 f000 	lsr.w	r0, r3, r0
 800b838:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b83a:	480d      	ldr	r0, [pc, #52]	; (800b870 <HAL_RCC_GetPCLK1Freq+0x88>)
 800b83c:	e7df      	b.n	800b7fe <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	069b      	lsls	r3, r3, #26
 800b842:	d508      	bpl.n	800b856 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b844:	6813      	ldr	r3, [r2, #0]
 800b846:	480b      	ldr	r0, [pc, #44]	; (800b874 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b848:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b84c:	40d8      	lsrs	r0, r3
 800b84e:	e7d6      	b.n	800b7fe <HAL_RCC_GetPCLK1Freq+0x16>
 800b850:	f7ff f9f4 	bl	800ac3c <HAL_RCC_GetSysClockFreq.part.0>
 800b854:	e7d3      	b.n	800b7fe <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b856:	4807      	ldr	r0, [pc, #28]	; (800b874 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b858:	e7d1      	b.n	800b7fe <HAL_RCC_GetPCLK1Freq+0x16>
 800b85a:	bf00      	nop
 800b85c:	58024400 	.word	0x58024400
 800b860:	003d0900 	.word	0x003d0900
 800b864:	080195cc 	.word	0x080195cc
 800b868:	24000318 	.word	0x24000318
 800b86c:	24000314 	.word	0x24000314
 800b870:	017d7840 	.word	0x017d7840
 800b874:	03d09000 	.word	0x03d09000

0800b878 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b878:	4a1c      	ldr	r2, [pc, #112]	; (800b8ec <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b87a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b87c:	6913      	ldr	r3, [r2, #16]
 800b87e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b882:	2b10      	cmp	r3, #16
 800b884:	d021      	beq.n	800b8ca <HAL_RCC_GetPCLK2Freq+0x52>
 800b886:	2b18      	cmp	r3, #24
 800b888:	d02a      	beq.n	800b8e0 <HAL_RCC_GetPCLK2Freq+0x68>
 800b88a:	b303      	cbz	r3, 800b8ce <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b88c:	4818      	ldr	r0, [pc, #96]	; (800b8f0 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b88e:	4a17      	ldr	r2, [pc, #92]	; (800b8ec <HAL_RCC_GetPCLK2Freq+0x74>)
 800b890:	4918      	ldr	r1, [pc, #96]	; (800b8f4 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800b892:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b894:	4c18      	ldr	r4, [pc, #96]	; (800b8f8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b896:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800b89a:	4d18      	ldr	r5, [pc, #96]	; (800b8fc <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b89c:	5ccb      	ldrb	r3, [r1, r3]
 800b89e:	f003 031f 	and.w	r3, r3, #31
 800b8a2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8a4:	6993      	ldr	r3, [r2, #24]
 800b8a6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800b8aa:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8ac:	5ccb      	ldrb	r3, [r1, r3]
 800b8ae:	f003 031f 	and.w	r3, r3, #31
 800b8b2:	fa20 f303 	lsr.w	r3, r0, r3
 800b8b6:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b8b8:	69d2      	ldr	r2, [r2, #28]
 800b8ba:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800b8be:	5c88      	ldrb	r0, [r1, r2]
 800b8c0:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b8c4:	fa23 f000 	lsr.w	r0, r3, r0
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b8ca:	480d      	ldr	r0, [pc, #52]	; (800b900 <HAL_RCC_GetPCLK2Freq+0x88>)
 800b8cc:	e7df      	b.n	800b88e <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	069b      	lsls	r3, r3, #26
 800b8d2:	d508      	bpl.n	800b8e6 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8d4:	6813      	ldr	r3, [r2, #0]
 800b8d6:	480b      	ldr	r0, [pc, #44]	; (800b904 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b8d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b8dc:	40d8      	lsrs	r0, r3
 800b8de:	e7d6      	b.n	800b88e <HAL_RCC_GetPCLK2Freq+0x16>
 800b8e0:	f7ff f9ac 	bl	800ac3c <HAL_RCC_GetSysClockFreq.part.0>
 800b8e4:	e7d3      	b.n	800b88e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b8e6:	4807      	ldr	r0, [pc, #28]	; (800b904 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b8e8:	e7d1      	b.n	800b88e <HAL_RCC_GetPCLK2Freq+0x16>
 800b8ea:	bf00      	nop
 800b8ec:	58024400 	.word	0x58024400
 800b8f0:	003d0900 	.word	0x003d0900
 800b8f4:	080195cc 	.word	0x080195cc
 800b8f8:	24000318 	.word	0x24000318
 800b8fc:	24000314 	.word	0x24000314
 800b900:	017d7840 	.word	0x017d7840
 800b904:	03d09000 	.word	0x03d09000

0800b908 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b90a:	4c3a      	ldr	r4, [pc, #232]	; (800b9f4 <RCCEx_PLL2_Config+0xec>)
 800b90c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b03      	cmp	r3, #3
 800b914:	d067      	beq.n	800b9e6 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	4606      	mov	r6, r0
 800b91a:	460f      	mov	r7, r1
 800b91c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b920:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b922:	f7fb fe31 	bl	8007588 <HAL_GetTick>
 800b926:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b928:	e004      	b.n	800b934 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b92a:	f7fb fe2d 	bl	8007588 <HAL_GetTick>
 800b92e:	1b43      	subs	r3, r0, r5
 800b930:	2b02      	cmp	r3, #2
 800b932:	d856      	bhi.n	800b9e2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	011a      	lsls	r2, r3, #4
 800b938:	d4f7      	bmi.n	800b92a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b93a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b93c:	6832      	ldr	r2, [r6, #0]
 800b93e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b942:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b946:	62a3      	str	r3, [r4, #40]	; 0x28
 800b948:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	3a01      	subs	r2, #1
 800b950:	025b      	lsls	r3, r3, #9
 800b952:	0412      	lsls	r2, r2, #16
 800b954:	b29b      	uxth	r3, r3
 800b956:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b95a:	4313      	orrs	r3, r2
 800b95c:	6872      	ldr	r2, [r6, #4]
 800b95e:	3a01      	subs	r2, #1
 800b960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b964:	4313      	orrs	r3, r2
 800b966:	6932      	ldr	r2, [r6, #16]
 800b968:	3a01      	subs	r2, #1
 800b96a:	0612      	lsls	r2, r2, #24
 800b96c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b970:	4313      	orrs	r3, r2
 800b972:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b976:	6972      	ldr	r2, [r6, #20]
 800b978:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b97c:	4313      	orrs	r3, r2
 800b97e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b980:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b982:	69b3      	ldr	r3, [r6, #24]
 800b984:	f022 0220 	bic.w	r2, r2, #32
 800b988:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b98a:	4b1b      	ldr	r3, [pc, #108]	; (800b9f8 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b98c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b98e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b990:	f022 0210 	bic.w	r2, r2, #16
 800b994:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b996:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b998:	69f2      	ldr	r2, [r6, #28]
 800b99a:	400b      	ands	r3, r1
 800b99c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b9a0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b9a4:	f043 0310 	orr.w	r3, r3, #16
 800b9a8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b9ac:	b1ef      	cbz	r7, 800b9ea <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9ae:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9b0:	bf0c      	ite	eq
 800b9b2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9b6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800b9ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9bc:	4c0d      	ldr	r4, [pc, #52]	; (800b9f4 <RCCEx_PLL2_Config+0xec>)
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9c6:	f7fb fddf 	bl	8007588 <HAL_GetTick>
 800b9ca:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9cc:	e004      	b.n	800b9d8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9ce:	f7fb fddb 	bl	8007588 <HAL_GetTick>
 800b9d2:	1b40      	subs	r0, r0, r5
 800b9d4:	2802      	cmp	r0, #2
 800b9d6:	d804      	bhi.n	800b9e2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	d5f7      	bpl.n	800b9ce <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800b9de:	2000      	movs	r0, #0
}
 800b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b9e2:	2003      	movs	r0, #3
}
 800b9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b9e6:	2001      	movs	r0, #1
}
 800b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9f0:	e7e4      	b.n	800b9bc <RCCEx_PLL2_Config+0xb4>
 800b9f2:	bf00      	nop
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	ffff0007 	.word	0xffff0007

0800b9fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9fe:	4c3a      	ldr	r4, [pc, #232]	; (800bae8 <RCCEx_PLL3_Config+0xec>)
 800ba00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d067      	beq.n	800bada <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba16:	f7fb fdb7 	bl	8007588 <HAL_GetTick>
 800ba1a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba1c:	e004      	b.n	800ba28 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba1e:	f7fb fdb3 	bl	8007588 <HAL_GetTick>
 800ba22:	1b43      	subs	r3, r0, r5
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d856      	bhi.n	800bad6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	009a      	lsls	r2, r3, #2
 800ba2c:	d4f7      	bmi.n	800ba1e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba30:	6832      	ldr	r2, [r6, #0]
 800ba32:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800ba36:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ba3a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba3c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	3a01      	subs	r2, #1
 800ba44:	025b      	lsls	r3, r3, #9
 800ba46:	0412      	lsls	r2, r2, #16
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	6872      	ldr	r2, [r6, #4]
 800ba52:	3a01      	subs	r2, #1
 800ba54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	6932      	ldr	r2, [r6, #16]
 800ba5c:	3a01      	subs	r2, #1
 800ba5e:	0612      	lsls	r2, r2, #24
 800ba60:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ba64:	4313      	orrs	r3, r2
 800ba66:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba6a:	6972      	ldr	r2, [r6, #20]
 800ba6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba70:	4313      	orrs	r3, r2
 800ba72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ba76:	69b3      	ldr	r3, [r6, #24]
 800ba78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba7c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba7e:	4b1b      	ldr	r3, [pc, #108]	; (800baec <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba80:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ba84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba8c:	69f2      	ldr	r2, [r6, #28]
 800ba8e:	400b      	ands	r3, r1
 800ba90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ba94:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba9c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800baa0:	b1ef      	cbz	r7, 800bade <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800baa2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800baa4:	bf0c      	ite	eq
 800baa6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800baaa:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800baae:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bab0:	4c0d      	ldr	r4, [pc, #52]	; (800bae8 <RCCEx_PLL3_Config+0xec>)
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baba:	f7fb fd65 	bl	8007588 <HAL_GetTick>
 800babe:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bac0:	e004      	b.n	800bacc <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bac2:	f7fb fd61 	bl	8007588 <HAL_GetTick>
 800bac6:	1b40      	subs	r0, r0, r5
 800bac8:	2802      	cmp	r0, #2
 800baca:	d804      	bhi.n	800bad6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	d5f7      	bpl.n	800bac2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800bad2:	2000      	movs	r0, #0
}
 800bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800bad6:	2003      	movs	r0, #3
}
 800bad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bada:	2001      	movs	r0, #1
}
 800badc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bae2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bae4:	e7e4      	b.n	800bab0 <RCCEx_PLL3_Config+0xb4>
 800bae6:	bf00      	nop
 800bae8:	58024400 	.word	0x58024400
 800baec:	ffff0007 	.word	0xffff0007

0800baf0 <HAL_RCCEx_PeriphCLKConfig>:
{
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800baf4:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800baf8:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bafa:	011d      	lsls	r5, r3, #4
 800bafc:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800bb00:	d523      	bpl.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb02:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800bb04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bb08:	f000 8553 	beq.w	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 800bb0c:	d812      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	f000 85a9 	beq.w	800c666 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 800bb14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bb18:	f040 85a2 	bne.w	800c660 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb1c:	2102      	movs	r1, #2
 800bb1e:	3008      	adds	r0, #8
 800bb20:	f7ff fef2 	bl	800b908 <RCCEx_PLL2_Config>
 800bb24:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	f040 8522 	bne.w	800c570 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb2c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb2e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bb32:	e003      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb34:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bb38:	f040 8592 	bne.w	800c660 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb3c:	4dae      	ldr	r5, [pc, #696]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bb3e:	2600      	movs	r6, #0
 800bb40:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800bb42:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800bb46:	4301      	orrs	r1, r0
 800bb48:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb4a:	05d8      	lsls	r0, r3, #23
 800bb4c:	d50a      	bpl.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bb4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb50:	2904      	cmp	r1, #4
 800bb52:	d806      	bhi.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800bb54:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bb58:	053d0536 	.word	0x053d0536
 800bb5c:	0323051a 	.word	0x0323051a
 800bb60:	0323      	.short	0x0323
 800bb62:	2601      	movs	r6, #1
 800bb64:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb66:	0599      	lsls	r1, r3, #22
 800bb68:	d51d      	bpl.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb6c:	2980      	cmp	r1, #128	; 0x80
 800bb6e:	f000 8516 	beq.w	800c59e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800bb72:	f200 80f9 	bhi.w	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800bb76:	2900      	cmp	r1, #0
 800bb78:	f000 8433 	beq.w	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800bb7c:	2940      	cmp	r1, #64	; 0x40
 800bb7e:	f040 80fa 	bne.w	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb82:	2100      	movs	r1, #0
 800bb84:	f104 0008 	add.w	r0, r4, #8
 800bb88:	f7ff febe 	bl	800b908 <RCCEx_PLL2_Config>
 800bb8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bb92:	2d00      	cmp	r5, #0
 800bb94:	f040 83fe 	bne.w	800c394 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb98:	4f97      	ldr	r7, [pc, #604]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bb9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800bb9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb9e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800bba2:	4301      	orrs	r1, r0
 800bba4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bba6:	055f      	lsls	r7, r3, #21
 800bba8:	d521      	bpl.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bbaa:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800bbae:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800bbb2:	f000 8521 	beq.w	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 800bbb6:	f200 80e1 	bhi.w	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	f000 8418 	beq.w	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800bbc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bbc4:	f040 80e2 	bne.w	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc8:	2100      	movs	r1, #0
 800bbca:	f104 0008 	add.w	r0, r4, #8
 800bbce:	f7ff fe9b 	bl	800b908 <RCCEx_PLL2_Config>
 800bbd2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbd4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	f040 83e2 	bne.w	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbde:	4f86      	ldr	r7, [pc, #536]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bbe0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800bbe4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbe6:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800bbea:	4301      	orrs	r1, r0
 800bbec:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbee:	0518      	lsls	r0, r3, #20
 800bbf0:	d521      	bpl.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bbf2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800bbf6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800bbfa:	f000 84bd 	beq.w	800c578 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800bbfe:	f200 80c8 	bhi.w	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800bc02:	2900      	cmp	r1, #0
 800bc04:	f000 83e7 	beq.w	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800bc08:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800bc0c:	f040 80c9 	bne.w	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc10:	2100      	movs	r1, #0
 800bc12:	f104 0008 	add.w	r0, r4, #8
 800bc16:	f7ff fe77 	bl	800b908 <RCCEx_PLL2_Config>
 800bc1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bc20:	2d00      	cmp	r5, #0
 800bc22:	f040 83b5 	bne.w	800c390 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc26:	4f74      	ldr	r7, [pc, #464]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bc28:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800bc2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc2e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800bc32:	4301      	orrs	r1, r0
 800bc34:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc36:	0199      	lsls	r1, r3, #6
 800bc38:	d518      	bpl.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800bc3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bc3c:	2920      	cmp	r1, #32
 800bc3e:	f000 841f 	beq.w	800c480 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800bc42:	f200 80b1 	bhi.w	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bc46:	b139      	cbz	r1, 800bc58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bc48:	2910      	cmp	r1, #16
 800bc4a:	f040 80b0 	bne.w	800bdae <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4e:	486a      	ldr	r0, [pc, #424]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bc50:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bc52:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bc56:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	f040 83d8 	bne.w	800c40e <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bc5e:	4f66      	ldr	r7, [pc, #408]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bc60:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bc62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bc64:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800bc68:	4301      	orrs	r1, r0
 800bc6a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc6c:	04df      	lsls	r7, r3, #19
 800bc6e:	d51f      	bpl.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bc70:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bc72:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bc76:	f000 84b5 	beq.w	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 800bc7a:	f200 809b 	bhi.w	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800bc7e:	2900      	cmp	r1, #0
 800bc80:	f000 83a3 	beq.w	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800bc84:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bc88:	f040 809c 	bne.w	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	f104 0008 	add.w	r0, r4, #8
 800bc92:	f7ff fe39 	bl	800b908 <RCCEx_PLL2_Config>
 800bc96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc98:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	f040 837b 	bne.w	800c398 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bca2:	4f55      	ldr	r7, [pc, #340]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bca4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bca8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bcac:	4301      	orrs	r1, r0
 800bcae:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bcb0:	0498      	lsls	r0, r3, #18
 800bcb2:	d51d      	bpl.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bcb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bcb6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bcba:	f000 8410 	beq.w	800c4de <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800bcbe:	f200 8084 	bhi.w	800bdca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bcc2:	b159      	cbz	r1, 800bcdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bcc4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bcc8:	f040 8087 	bne.w	800bdda <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bccc:	2101      	movs	r1, #1
 800bcce:	f104 0008 	add.w	r0, r4, #8
 800bcd2:	f7ff fe19 	bl	800b908 <RCCEx_PLL2_Config>
 800bcd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bcdc:	2d00      	cmp	r5, #0
 800bcde:	f040 839a 	bne.w	800c416 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bce2:	4f45      	ldr	r7, [pc, #276]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bce4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bce8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800bcec:	4301      	orrs	r1, r0
 800bcee:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcf0:	0459      	lsls	r1, r3, #17
 800bcf2:	d51d      	bpl.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bcf4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800bcf8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bcfc:	f000 83fb 	beq.w	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800bd00:	d86e      	bhi.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800bd02:	b151      	cbz	r1, 800bd1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bd04:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bd08:	d172      	bne.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	f104 0008 	add.w	r0, r4, #8
 800bd10:	f7ff fdfa 	bl	800b908 <RCCEx_PLL2_Config>
 800bd14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	f040 837f 	bne.w	800c41e <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd20:	4f35      	ldr	r7, [pc, #212]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bd22:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800bd26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd28:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800bd2c:	4301      	orrs	r1, r0
 800bd2e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd30:	041f      	lsls	r7, r3, #16
 800bd32:	d50d      	bpl.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800bd34:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bd36:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bd3a:	f000 83c8 	beq.w	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bd3e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bd42:	f000 823b 	beq.w	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bd46:	2900      	cmp	r1, #0
 800bd48:	f000 8240 	beq.w	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bd4c:	2601      	movs	r6, #1
 800bd4e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd50:	01d8      	lsls	r0, r3, #7
 800bd52:	d562      	bpl.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
 800bd54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd56:	2903      	cmp	r1, #3
 800bd58:	f200 84bf 	bhi.w	800c6da <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800bd5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bd60:	004e0053 	.word	0x004e0053
 800bd64:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
 800bd68:	29c0      	cmp	r1, #192	; 0xc0
 800bd6a:	f43f af12 	beq.w	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bd6e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bd72:	f43f af0e 	beq.w	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bd76:	2601      	movs	r6, #1
 800bd78:	4635      	mov	r5, r6
 800bd7a:	e714      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd7c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800bd80:	f43f af2a 	beq.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bd84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bd88:	f43f af26 	beq.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bd8c:	2601      	movs	r6, #1
 800bd8e:	4635      	mov	r5, r6
 800bd90:	e72d      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bd92:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800bd96:	f43f af43 	beq.w	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bd9a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800bd9e:	f43f af3f 	beq.w	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bda2:	2601      	movs	r6, #1
 800bda4:	4635      	mov	r5, r6
 800bda6:	e746      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800bda8:	2930      	cmp	r1, #48	; 0x30
 800bdaa:	f43f af55 	beq.w	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bdae:	2601      	movs	r6, #1
 800bdb0:	4635      	mov	r5, r6
 800bdb2:	e75b      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bdb4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800bdb8:	f43f af70 	beq.w	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bdbc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bdc0:	f43f af6c 	beq.w	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bdc4:	2601      	movs	r6, #1
 800bdc6:	4635      	mov	r5, r6
 800bdc8:	e772      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bdca:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800bdce:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800bdd2:	d083      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bdd4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800bdd8:	d080      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bdda:	2601      	movs	r6, #1
 800bddc:	4635      	mov	r5, r6
 800bdde:	e787      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bde0:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800bde4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bde8:	d097      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bdea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800bdee:	d094      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bdf0:	2601      	movs	r6, #1
 800bdf2:	4635      	mov	r5, r6
 800bdf4:	e79c      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bdf6:	bf00      	nop
 800bdf8:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdfc:	4839      	ldr	r0, [pc, #228]	; (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bdfe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800be00:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800be04:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800be06:	2d00      	cmp	r5, #0
 800be08:	f040 8303 	bne.w	800c412 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be0c:	4f35      	ldr	r7, [pc, #212]	; (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800be0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800be10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be12:	f021 0103 	bic.w	r1, r1, #3
 800be16:	4301      	orrs	r1, r0
 800be18:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be1a:	0259      	lsls	r1, r3, #9
 800be1c:	f100 826a 	bmi.w	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be20:	07d8      	lsls	r0, r3, #31
 800be22:	d52f      	bpl.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
 800be24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800be26:	2928      	cmp	r1, #40	; 0x28
 800be28:	d82a      	bhi.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800be2a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be2e:	020a      	.short	0x020a
 800be30:	00290029 	.word	0x00290029
 800be34:	00290029 	.word	0x00290029
 800be38:	00290029 	.word	0x00290029
 800be3c:	02020029 	.word	0x02020029
 800be40:	00290029 	.word	0x00290029
 800be44:	00290029 	.word	0x00290029
 800be48:	00290029 	.word	0x00290029
 800be4c:	04070029 	.word	0x04070029
 800be50:	00290029 	.word	0x00290029
 800be54:	00290029 	.word	0x00290029
 800be58:	00290029 	.word	0x00290029
 800be5c:	020a0029 	.word	0x020a0029
 800be60:	00290029 	.word	0x00290029
 800be64:	00290029 	.word	0x00290029
 800be68:	00290029 	.word	0x00290029
 800be6c:	020a0029 	.word	0x020a0029
 800be70:	00290029 	.word	0x00290029
 800be74:	00290029 	.word	0x00290029
 800be78:	00290029 	.word	0x00290029
 800be7c:	020a0029 	.word	0x020a0029
 800be80:	2601      	movs	r6, #1
 800be82:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be84:	0799      	lsls	r1, r3, #30
 800be86:	d51d      	bpl.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be88:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800be8a:	2905      	cmp	r1, #5
 800be8c:	f200 8421 	bhi.w	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800be90:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be94:	0006000e 	.word	0x0006000e
 800be98:	000e03c8 	.word	0x000e03c8
 800be9c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bea0:	2101      	movs	r1, #1
 800bea2:	f104 0008 	add.w	r0, r4, #8
 800bea6:	f7ff fd2f 	bl	800b908 <RCCEx_PLL2_Config>
 800beaa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800beac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	f040 82b8 	bne.w	800c426 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800beb6:	4f0b      	ldr	r7, [pc, #44]	; (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800beb8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800beba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bebc:	f021 0107 	bic.w	r1, r1, #7
 800bec0:	4301      	orrs	r1, r0
 800bec2:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bec4:	075f      	lsls	r7, r3, #29
 800bec6:	d522      	bpl.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bec8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800becc:	2905      	cmp	r1, #5
 800bece:	f200 8408 	bhi.w	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800bed2:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bed6:	0011      	.short	0x0011
 800bed8:	039b0009 	.word	0x039b0009
 800bedc:	00110011 	.word	0x00110011
 800bee0:	0011      	.short	0x0011
 800bee2:	bf00      	nop
 800bee4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bee8:	2101      	movs	r1, #1
 800beea:	f104 0008 	add.w	r0, r4, #8
 800beee:	f7ff fd0b 	bl	800b908 <RCCEx_PLL2_Config>
 800bef2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bef4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bef8:	2d00      	cmp	r5, #0
 800befa:	f040 8286 	bne.w	800c40a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800befe:	4fae      	ldr	r7, [pc, #696]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bf00:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800bf04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf06:	f021 0107 	bic.w	r1, r1, #7
 800bf0a:	4301      	orrs	r1, r0
 800bf0c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf0e:	0698      	lsls	r0, r3, #26
 800bf10:	d51f      	bpl.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bf12:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800bf16:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bf1a:	f000 82f7 	beq.w	800c50c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800bf1e:	f200 810b 	bhi.w	800c138 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800bf22:	b159      	cbz	r1, 800bf3c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800bf24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bf28:	f040 8110 	bne.w	800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f104 0008 	add.w	r0, r4, #8
 800bf32:	f7ff fce9 	bl	800b908 <RCCEx_PLL2_Config>
 800bf36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	f040 8260 	bne.w	800c402 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf42:	4f9d      	ldr	r7, [pc, #628]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bf44:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800bf48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf4a:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800bf4e:	4301      	orrs	r1, r0
 800bf50:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf52:	0659      	lsls	r1, r3, #25
 800bf54:	d51f      	bpl.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf56:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800bf5a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bf5e:	f000 829b 	beq.w	800c498 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800bf62:	f200 80f6 	bhi.w	800c152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf66:	b159      	cbz	r1, 800bf80 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800bf68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bf6c:	f040 80fb 	bne.w	800c166 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf70:	2100      	movs	r1, #0
 800bf72:	f104 0008 	add.w	r0, r4, #8
 800bf76:	f7ff fcc7 	bl	800b908 <RCCEx_PLL2_Config>
 800bf7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	f040 824e 	bne.w	800c422 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf86:	4f8c      	ldr	r7, [pc, #560]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bf88:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800bf8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf8e:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800bf92:	4301      	orrs	r1, r0
 800bf94:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf96:	061f      	lsls	r7, r3, #24
 800bf98:	d51f      	bpl.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf9a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800bf9e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bfa2:	f000 8289 	beq.w	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800bfa6:	f200 80e1 	bhi.w	800c16c <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800bfaa:	b159      	cbz	r1, 800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800bfac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bfb0:	f040 80e6 	bne.w	800c180 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	f104 0008 	add.w	r0, r4, #8
 800bfba:	f7ff fca5 	bl	800b908 <RCCEx_PLL2_Config>
 800bfbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bfc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bfc4:	2d00      	cmp	r5, #0
 800bfc6:	f040 8228 	bne.w	800c41a <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bfca:	4f7b      	ldr	r7, [pc, #492]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfcc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800bfd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfd2:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800bfd6:	4301      	orrs	r1, r0
 800bfd8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bfda:	0718      	lsls	r0, r3, #28
 800bfdc:	d50b      	bpl.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bfde:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800bfe2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bfe6:	f000 82a9 	beq.w	800c53c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bfea:	4f73      	ldr	r7, [pc, #460]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bfec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bff2:	4301      	orrs	r1, r0
 800bff4:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bff6:	06d9      	lsls	r1, r3, #27
 800bff8:	d50b      	bpl.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bffa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800bffe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c002:	f000 82a8 	beq.w	800c556 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c006:	4f6c      	ldr	r7, [pc, #432]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c00a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800c00e:	4301      	orrs	r1, r0
 800c010:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c012:	031f      	lsls	r7, r3, #12
 800c014:	d50e      	bpl.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
 800c016:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c01a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c01e:	f000 80f4 	beq.w	800c20a <HAL_RCCEx_PeriphCLKConfig+0x71a>
 800c022:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c026:	f000 80f8 	beq.w	800c21a <HAL_RCCEx_PeriphCLKConfig+0x72a>
 800c02a:	2900      	cmp	r1, #0
 800c02c:	f000 821c 	beq.w	800c468 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800c030:	2601      	movs	r6, #1
 800c032:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c034:	0358      	lsls	r0, r3, #13
 800c036:	d50f      	bpl.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
 800c038:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c03c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c040:	f000 80cf 	beq.w	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c044:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c048:	f000 80d3 	beq.w	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800c04c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c050:	f000 8202 	beq.w	800c458 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800c054:	2601      	movs	r6, #1
 800c056:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c058:	03d9      	lsls	r1, r3, #15
 800c05a:	d509      	bpl.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c05c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c05e:	2900      	cmp	r1, #0
 800c060:	f000 81f1 	beq.w	800c446 <HAL_RCCEx_PeriphCLKConfig+0x956>
 800c064:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c068:	f000 819d 	beq.w	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 800c06c:	2601      	movs	r6, #1
 800c06e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c070:	009f      	lsls	r7, r3, #2
 800c072:	f100 80f1 	bmi.w	800c258 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c076:	0398      	lsls	r0, r3, #14
 800c078:	d50c      	bpl.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
 800c07a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c07e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c082:	f000 81d8 	beq.w	800c436 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800c086:	d97e      	bls.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x696>
 800c088:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800c08c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c090:	d07b      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800c092:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c094:	02d9      	lsls	r1, r3, #11
 800c096:	d506      	bpl.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c098:	4847      	ldr	r0, [pc, #284]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c09a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c09c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c09e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c0a2:	4329      	orrs	r1, r5
 800c0a4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0a6:	00df      	lsls	r7, r3, #3
 800c0a8:	d507      	bpl.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0aa:	4843      	ldr	r0, [pc, #268]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0ac:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800c0b0:	6901      	ldr	r1, [r0, #16]
 800c0b2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800c0b6:	4329      	orrs	r1, r5
 800c0b8:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0ba:	029d      	lsls	r5, r3, #10
 800c0bc:	d506      	bpl.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c0be:	483e      	ldr	r0, [pc, #248]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0c0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c0c2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c0c4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800c0c8:	4329      	orrs	r1, r5
 800c0ca:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0cc:	0058      	lsls	r0, r3, #1
 800c0ce:	d509      	bpl.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0d0:	4939      	ldr	r1, [pc, #228]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0d2:	6908      	ldr	r0, [r1, #16]
 800c0d4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800c0d8:	6108      	str	r0, [r1, #16]
 800c0da:	6908      	ldr	r0, [r1, #16]
 800c0dc:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800c0e0:	4328      	orrs	r0, r5
 800c0e2:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	da06      	bge.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c0e8:	4833      	ldr	r0, [pc, #204]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0ea:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c0ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c0ee:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c0f2:	4329      	orrs	r1, r5
 800c0f4:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c0f6:	0219      	lsls	r1, r3, #8
 800c0f8:	d507      	bpl.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c0fa:	492f      	ldr	r1, [pc, #188]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0fc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c100:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c102:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c106:	4303      	orrs	r3, r0
 800c108:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c10a:	07d3      	lsls	r3, r2, #31
 800c10c:	f100 80b0 	bmi.w	800c270 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c110:	0797      	lsls	r7, r2, #30
 800c112:	f100 80ba 	bmi.w	800c28a <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c116:	0755      	lsls	r5, r2, #29
 800c118:	f100 80c4 	bmi.w	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c11c:	0710      	lsls	r0, r2, #28
 800c11e:	f100 80ce 	bmi.w	800c2be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c122:	06d1      	lsls	r1, r2, #27
 800c124:	f100 80d8 	bmi.w	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c128:	0692      	lsls	r2, r2, #26
 800c12a:	f100 8125 	bmi.w	800c378 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
 800c12e:	1e30      	subs	r0, r6, #0
 800c130:	bf18      	it	ne
 800c132:	2001      	movne	r0, #1
}
 800c134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c138:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c13c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c140:	f43f aefc 	beq.w	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800c144:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c148:	f43f aef8 	beq.w	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800c14c:	2601      	movs	r6, #1
 800c14e:	4635      	mov	r5, r6
 800c150:	e6ff      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c152:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c156:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c15a:	f43f af11 	beq.w	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800c15e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c162:	f43f af0d 	beq.w	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800c166:	2601      	movs	r6, #1
 800c168:	4635      	mov	r5, r6
 800c16a:	e714      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c16c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c170:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c174:	f43f af26 	beq.w	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800c178:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c17c:	f43f af22 	beq.w	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800c180:	2601      	movs	r6, #1
 800c182:	4635      	mov	r5, r6
 800c184:	e729      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
 800c186:	2900      	cmp	r1, #0
 800c188:	d183      	bne.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
 800c18a:	2d00      	cmp	r5, #0
 800c18c:	f040 8151 	bne.w	800c432 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c190:	4d09      	ldr	r5, [pc, #36]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c192:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800c194:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800c198:	4301      	orrs	r1, r0
 800c19a:	6569      	str	r1, [r5, #84]	; 0x54
 800c19c:	e77a      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c19e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c1a0:	2d00      	cmp	r5, #0
 800c1a2:	f040 80fb 	bne.w	800c39c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c1a6:	4f04      	ldr	r7, [pc, #16]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1ac:	f021 0107 	bic.w	r1, r1, #7
 800c1b0:	4301      	orrs	r1, r0
 800c1b2:	6539      	str	r1, [r7, #80]	; 0x50
 800c1b4:	e4d7      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c1b6:	bf00      	nop
 800c1b8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1bc:	2101      	movs	r1, #1
 800c1be:	f104 0008 	add.w	r0, r4, #8
 800c1c2:	f7ff fba1 	bl	800b908 <RCCEx_PLL2_Config>
 800c1c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c1c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	f040 811a 	bne.w	800c406 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c1d2:	4fb7      	ldr	r7, [pc, #732]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c1d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c1d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1d8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c1dc:	4301      	orrs	r1, r0
 800c1de:	6539      	str	r1, [r7, #80]	; 0x50
 800c1e0:	e5b6      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c1e8:	f7ff fc08 	bl	800b9fc <RCCEx_PLL3_Config>
 800c1ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c1ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c1f2:	2d00      	cmp	r5, #0
 800c1f4:	f040 811b 	bne.w	800c42e <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1f8:	4fad      	ldr	r7, [pc, #692]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c1fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c1fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c200:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c204:	4301      	orrs	r1, r0
 800c206:	6579      	str	r1, [r7, #84]	; 0x54
 800c208:	e726      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c20a:	2102      	movs	r1, #2
 800c20c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c210:	f7ff fbf4 	bl	800b9fc <RCCEx_PLL3_Config>
 800c214:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c216:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	f040 8105 	bne.w	800c42a <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c220:	4fa3      	ldr	r7, [pc, #652]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c222:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800c226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c228:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800c22c:	4301      	orrs	r1, r0
 800c22e:	65b9      	str	r1, [r7, #88]	; 0x58
 800c230:	e700      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c232:	2101      	movs	r1, #1
 800c234:	f104 0008 	add.w	r0, r4, #8
 800c238:	f7ff fb66 	bl	800b908 <RCCEx_PLL2_Config>
 800c23c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c23e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c242:	2d00      	cmp	r5, #0
 800c244:	f040 80db 	bne.w	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c248:	4f99      	ldr	r7, [pc, #612]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c24a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c24c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c24e:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800c252:	4301      	orrs	r1, r0
 800c254:	6579      	str	r1, [r7, #84]	; 0x54
 800c256:	e615      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c258:	2102      	movs	r1, #2
 800c25a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c25e:	f7ff fbcd 	bl	800b9fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c262:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c266:	2800      	cmp	r0, #0
 800c268:	f43f af05 	beq.w	800c076 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
 800c26c:	2601      	movs	r6, #1
 800c26e:	e702      	b.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c270:	2100      	movs	r1, #0
 800c272:	f104 0008 	add.w	r0, r4, #8
 800c276:	f7ff fb47 	bl	800b908 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c27a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f43f af47 	beq.w	800c110 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c282:	0797      	lsls	r7, r2, #30
 800c284:	4606      	mov	r6, r0
 800c286:	f57f af46 	bpl.w	800c116 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c28a:	2101      	movs	r1, #1
 800c28c:	f104 0008 	add.w	r0, r4, #8
 800c290:	f7ff fb3a 	bl	800b908 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c294:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c296:	2800      	cmp	r0, #0
 800c298:	f43f af3d 	beq.w	800c116 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c29c:	0755      	lsls	r5, r2, #29
 800c29e:	4606      	mov	r6, r0
 800c2a0:	f57f af3c 	bpl.w	800c11c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2a4:	2102      	movs	r1, #2
 800c2a6:	f104 0008 	add.w	r0, r4, #8
 800c2aa:	f7ff fb2d 	bl	800b908 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	f43f af33 	beq.w	800c11c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	0710      	lsls	r0, r2, #28
 800c2ba:	f57f af32 	bpl.w	800c122 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2be:	2100      	movs	r1, #0
 800c2c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c2c4:	f7ff fb9a 	bl	800b9fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f43f af29 	beq.w	800c122 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2d0:	06d1      	lsls	r1, r2, #27
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	f57f af28 	bpl.w	800c128 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c2dc:	2101      	movs	r1, #1
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f7ff fb8c 	bl	800b9fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f000 80c9 	beq.w	800c47c <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2ea:	6863      	ldr	r3, [r4, #4]
 800c2ec:	069b      	lsls	r3, r3, #26
 800c2ee:	d54c      	bpl.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	e043      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2f4:	4f6f      	ldr	r7, [pc, #444]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c2fe:	f7fb f943 	bl	8007588 <HAL_GetTick>
 800c302:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c304:	e006      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c306:	f7fb f93f 	bl	8007588 <HAL_GetTick>
 800c30a:	eba0 0008 	sub.w	r0, r0, r8
 800c30e:	2864      	cmp	r0, #100	; 0x64
 800c310:	f200 81a0 	bhi.w	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	05da      	lsls	r2, r3, #23
 800c318:	d5f5      	bpl.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	f040 81d4 	bne.w	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c320:	4a63      	ldr	r2, [pc, #396]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c322:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c326:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c328:	4059      	eors	r1, r3
 800c32a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800c32e:	d00b      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c330:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c332:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c334:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c338:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c33c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c33e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c340:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800c344:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c346:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34c:	f000 819e 	beq.w	800c68c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c350:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c354:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c358:	f000 81ac 	beq.w	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 800c35c:	4954      	ldr	r1, [pc, #336]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c35e:	690a      	ldr	r2, [r1, #16]
 800c360:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c364:	610a      	str	r2, [r1, #16]
 800c366:	4852      	ldr	r0, [pc, #328]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c368:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800c36c:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800c36e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c370:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c374:	6701      	str	r1, [r0, #112]	; 0x70
 800c376:	e553      	b.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c378:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c37c:	2102      	movs	r1, #2
 800c37e:	4628      	mov	r0, r5
 800c380:	f7ff fb3c 	bl	800b9fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c384:	2800      	cmp	r0, #0
 800c386:	f43f aed2 	beq.w	800c12e <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
 800c38a:	2001      	movs	r0, #1
}
 800c38c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c390:	462e      	mov	r6, r5
 800c392:	e450      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800c394:	462e      	mov	r6, r5
 800c396:	e406      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800c398:	462e      	mov	r6, r5
 800c39a:	e489      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c39c:	462e      	mov	r6, r5
 800c39e:	f7ff bbe2 	b.w	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	e423      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	f104 0008 	add.w	r0, r4, #8
 800c3ac:	f7ff faac 	bl	800b908 <RCCEx_PLL2_Config>
 800c3b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c3b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d14c      	bne.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c3ba:	4f3d      	ldr	r7, [pc, #244]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c3be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c3c0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c3c4:	4301      	orrs	r1, r0
 800c3c6:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c3c8:	e652      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ca:	4839      	ldr	r0, [pc, #228]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c3ce:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c3d2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c3d4:	e462      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d6:	4836      	ldr	r0, [pc, #216]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c3da:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c3de:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c3e0:	e41e      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3e2:	4833      	ldr	r0, [pc, #204]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c3e6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c3ea:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c3ec:	f7ff bbd1 	b.w	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3f0:	482f      	ldr	r0, [pc, #188]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c3f4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c3f8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c3fa:	f7ff bbed 	b.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c3fe:	462e      	mov	r6, r5
 800c400:	e540      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800c402:	462e      	mov	r6, r5
 800c404:	e5a5      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800c406:	462e      	mov	r6, r5
 800c408:	e4a2      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800c40a:	462e      	mov	r6, r5
 800c40c:	e57f      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c40e:	462e      	mov	r6, r5
 800c410:	e42c      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800c412:	462e      	mov	r6, r5
 800c414:	e501      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800c416:	462e      	mov	r6, r5
 800c418:	e46a      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c41a:	462e      	mov	r6, r5
 800c41c:	e5dd      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800c41e:	462e      	mov	r6, r5
 800c420:	e486      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c422:	462e      	mov	r6, r5
 800c424:	e5b7      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c426:	462e      	mov	r6, r5
 800c428:	e54c      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800c42a:	462e      	mov	r6, r5
 800c42c:	e602      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800c42e:	462e      	mov	r6, r5
 800c430:	e612      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800c432:	462e      	mov	r6, r5
 800c434:	e62e      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c436:	4f1e      	ldr	r7, [pc, #120]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c43a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c43e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800c440:	2d00      	cmp	r5, #0
 800c442:	d1f6      	bne.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800c444:	e6a4      	b.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c446:	481a      	ldr	r0, [pc, #104]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c448:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c44a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c44e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c450:	2d00      	cmp	r5, #0
 800c452:	d0b2      	beq.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800c454:	462e      	mov	r6, r5
 800c456:	e60b      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c458:	4815      	ldr	r0, [pc, #84]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c45a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c45c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c460:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c462:	2d00      	cmp	r5, #0
 800c464:	d1e3      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800c466:	e6c7      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c468:	f104 0008 	add.w	r0, r4, #8
 800c46c:	f7ff fa4c 	bl	800b908 <RCCEx_PLL2_Config>
 800c470:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c472:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c476:	2d00      	cmp	r5, #0
 800c478:	d1d7      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800c47a:	e6d1      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c47c:	6862      	ldr	r2, [r4, #4]
 800c47e:	e653      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c480:	2102      	movs	r1, #2
 800c482:	f104 0008 	add.w	r0, r4, #8
 800c486:	f7ff fa3f 	bl	800b908 <RCCEx_PLL2_Config>
 800c48a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c48c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c490:	2d00      	cmp	r5, #0
 800c492:	d1bc      	bne.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x91e>
 800c494:	f7ff bbe3 	b.w	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c498:	2102      	movs	r1, #2
 800c49a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c49e:	f7ff faad 	bl	800b9fc <RCCEx_PLL3_Config>
 800c4a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c4a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	d1ba      	bne.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800c4ac:	e56b      	b.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c4ae:	bf00      	nop
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4b8:	2102      	movs	r1, #2
 800c4ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4be:	f7ff fa9d 	bl	800b9fc <RCCEx_PLL3_Config>
 800c4c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c4c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	d1a6      	bne.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800c4cc:	e57d      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ce:	4886      	ldr	r0, [pc, #536]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c4d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c4d2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c4d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	d194      	bne.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800c4dc:	e679      	b.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4de:	2101      	movs	r1, #1
 800c4e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4e4:	f7ff fa8a 	bl	800b9fc <RCCEx_PLL3_Config>
 800c4e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c4ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	d191      	bne.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800c4f2:	f7ff bbf6 	b.w	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4fc:	f7ff fa7e 	bl	800b9fc <RCCEx_PLL3_Config>
 800c500:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c502:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c506:	2d00      	cmp	r5, #0
 800c508:	d189      	bne.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c50a:	e409      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c50c:	2102      	movs	r1, #2
 800c50e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c512:	f7ff fa73 	bl	800b9fc <RCCEx_PLL3_Config>
 800c516:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c518:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c51c:	2d00      	cmp	r5, #0
 800c51e:	f47f af70 	bne.w	800c402 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800c522:	e50e      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c524:	2102      	movs	r1, #2
 800c526:	f104 0008 	add.w	r0, r4, #8
 800c52a:	f7ff f9ed 	bl	800b908 <RCCEx_PLL2_Config>
 800c52e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c530:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c534:	2d00      	cmp	r5, #0
 800c536:	f47f af6c 	bne.w	800c412 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800c53a:	e467      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c53c:	2102      	movs	r1, #2
 800c53e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c542:	f7ff fa5b 	bl	800b9fc <RCCEx_PLL3_Config>
 800c546:	2800      	cmp	r0, #0
 800c548:	f040 8094 	bne.w	800c674 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c54c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c550:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c554:	e549      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c556:	2102      	movs	r1, #2
 800c558:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c55c:	f7ff fa4e 	bl	800b9fc <RCCEx_PLL3_Config>
 800c560:	2800      	cmp	r0, #0
 800c562:	f040 808d 	bne.w	800c680 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c566:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c56a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c56e:	e54a      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c570:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c574:	f7ff bae9 	b.w	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c578:	2100      	movs	r1, #0
 800c57a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c57e:	f7ff fa3d 	bl	800b9fc <RCCEx_PLL3_Config>
 800c582:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c584:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c588:	f7ff bb4a 	b.w	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c58c:	2100      	movs	r1, #0
 800c58e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c592:	f7ff fa33 	bl	800b9fc <RCCEx_PLL3_Config>
 800c596:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c598:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c59c:	e600      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c59e:	2100      	movs	r1, #0
 800c5a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c5a4:	f7ff fa2a 	bl	800b9fc <RCCEx_PLL3_Config>
 800c5a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c5aa:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c5ae:	f7ff baf0 	b.w	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5b2:	2102      	movs	r1, #2
 800c5b4:	3028      	adds	r0, #40	; 0x28
 800c5b6:	f7ff fa21 	bl	800b9fc <RCCEx_PLL3_Config>
 800c5ba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c5bc:	2e00      	cmp	r6, #0
 800c5be:	f43f aab5 	beq.w	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c5c2:	e7d5      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c4:	4848      	ldr	r0, [pc, #288]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
 800c5c6:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c5ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c5ce:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c5d0:	e5e6      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	f104 0008 	add.w	r0, r4, #8
 800c5d8:	f7ff f996 	bl	800b908 <RCCEx_PLL2_Config>
 800c5dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c5de:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c5e2:	e5dd      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c5ea:	f7ff fa07 	bl	800b9fc <RCCEx_PLL3_Config>
 800c5ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5f0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c5f4:	f7ff bb52 	b.w	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c5fe:	f7ff f9fd 	bl	800b9fc <RCCEx_PLL3_Config>
 800c602:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c604:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c608:	f7ff bae6 	b.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c60c:	2101      	movs	r1, #1
 800c60e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c612:	f7ff f9f3 	bl	800b9fc <RCCEx_PLL3_Config>
 800c616:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c618:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c61c:	2d00      	cmp	r5, #0
 800c61e:	f47f aef4 	bne.w	800c40a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800c622:	e46c      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c624:	2101      	movs	r1, #1
 800c626:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c62a:	f7ff f9e7 	bl	800b9fc <RCCEx_PLL3_Config>
 800c62e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c630:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c634:	2d00      	cmp	r5, #0
 800c636:	f47f aef6 	bne.w	800c426 <HAL_RCCEx_PeriphCLKConfig+0x936>
 800c63a:	e43c      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c63c:	2101      	movs	r1, #1
 800c63e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c642:	f7ff f9db 	bl	800b9fc <RCCEx_PLL3_Config>
 800c646:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c648:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	f47f aed6 	bne.w	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x90e>
 800c652:	e5f9      	b.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
 800c654:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c656:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c65a:	4635      	mov	r5, r6
 800c65c:	f7ff bbe0 	b.w	800be20 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c660:	2601      	movs	r6, #1
 800c662:	f7ff ba72 	b.w	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c666:	4d20      	ldr	r5, [pc, #128]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c668:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c66a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c66e:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800c670:	f7ff ba64 	b.w	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c674:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800c678:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c67a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c67e:	e4b4      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c680:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800c684:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c686:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c68a:	e4bc      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
 800c68c:	f7fa ff7c 	bl	8007588 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c690:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
 800c694:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c696:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c69a:	e004      	b.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c69c:	f7fa ff74 	bl	8007588 <HAL_GetTick>
 800c6a0:	1bc0      	subs	r0, r0, r7
 800c6a2:	4548      	cmp	r0, r9
 800c6a4:	d8d6      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6a6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c6aa:	079b      	lsls	r3, r3, #30
 800c6ac:	d5f6      	bpl.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c6ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c6b2:	e64d      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800c6b4:	480c      	ldr	r0, [pc, #48]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c6b6:	4a0d      	ldr	r2, [pc, #52]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800c6b8:	6901      	ldr	r1, [r0, #16]
 800c6ba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c6be:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	6102      	str	r2, [r0, #16]
 800c6c6:	e64e      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c6c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c6cc:	462e      	mov	r6, r5
 800c6ce:	f7ff bba7 	b.w	800be20 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c6d2:	2601      	movs	r6, #1
 800c6d4:	4635      	mov	r5, r6
 800c6d6:	f7ff bbf5 	b.w	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 800c6da:	2601      	movs	r6, #1
 800c6dc:	4635      	mov	r5, r6
 800c6de:	f7ff bb9c 	b.w	800be1a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c6e2:	2601      	movs	r6, #1
 800c6e4:	4635      	mov	r5, r6
 800c6e6:	e412      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c6e8:	58024400 	.word	0x58024400
 800c6ec:	00ffffcf 	.word	0x00ffffcf

0800c6f0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c6f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c6f2:	f7ff f839 	bl	800b768 <HAL_RCC_GetHCLKFreq>
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c6f8:	4a05      	ldr	r2, [pc, #20]	; (800c710 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c700:	5cd3      	ldrb	r3, [r2, r3]
 800c702:	f003 031f 	and.w	r3, r3, #31
}
 800c706:	40d8      	lsrs	r0, r3
 800c708:	bd08      	pop	{r3, pc}
 800c70a:	bf00      	nop
 800c70c:	58024400 	.word	0x58024400
 800c710:	080195cc 	.word	0x080195cc

0800c714 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c714:	4a50      	ldr	r2, [pc, #320]	; (800c858 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800c716:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c718:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c71a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c71c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800c71e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c722:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c726:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800c728:	d05d      	beq.n	800c7e6 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c72a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c72e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c732:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c736:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c73a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c73c:	ee07 4a90 	vmov	s15, r4
 800c740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c744:	d003      	beq.n	800c74e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c746:	2902      	cmp	r1, #2
 800c748:	d078      	beq.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 800c74a:	2900      	cmp	r1, #0
 800c74c:	d050      	beq.n	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800c85c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c75a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c75c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800c760:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c768:	ee07 3a90 	vmov	s15, r3
 800c76c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c774:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c778:	eee7 7a06 	vfma.f32	s15, s14, s12
 800c77c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c780:	4a35      	ldr	r2, [pc, #212]	; (800c858 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800c782:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c786:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c788:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c78c:	ee07 3a90 	vmov	s15, r3
 800c790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800c794:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c796:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c79e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c7a2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c7a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c7a8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c7ac:	ee07 3a90 	vmov	s15, r3
 800c7b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c7b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7bc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c7c0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c7c6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c7ca:	ee07 3a10 	vmov	s14, r3
 800c7ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c7d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c7d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7de:	ee17 3a90 	vmov	r3, s15
 800c7e2:	6083      	str	r3, [r0, #8]
}
 800c7e4:	4770      	bx	lr
 800c7e6:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7e8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7ec:	6083      	str	r3, [r0, #8]
}
 800c7ee:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7f0:	6811      	ldr	r1, [r2, #0]
 800c7f2:	0689      	lsls	r1, r1, #26
 800c7f4:	d529      	bpl.n	800c84a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7f6:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7f8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7fc:	4919      	ldr	r1, [pc, #100]	; (800c864 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c802:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c804:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c80c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c810:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c814:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c816:	ee06 3a10 	vmov	s12, r3
 800c81a:	ee05 1a90 	vmov	s11, r1
 800c81e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c822:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c826:	ee36 6a26 	vadd.f32	s12, s12, s13
 800c82a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800c82e:	eef0 7a46 	vmov.f32	s15, s12
 800c832:	eee7 7a05 	vfma.f32	s15, s14, s10
 800c836:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c83a:	e7a1      	b.n	800c780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c83c:	ee07 3a90 	vmov	s15, r3
 800c840:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800c844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c848:	e787      	b.n	800c75a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800c86c <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800c852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c856:	e780      	b.n	800c75a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c858:	58024400 	.word	0x58024400
 800c85c:	4a742400 	.word	0x4a742400
 800c860:	39000000 	.word	0x39000000
 800c864:	03d09000 	.word	0x03d09000
 800c868:	4bbebc20 	.word	0x4bbebc20
 800c86c:	4c742400 	.word	0x4c742400

0800c870 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c870:	4a50      	ldr	r2, [pc, #320]	; (800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800c872:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c874:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c876:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c878:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800c87a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c87e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c882:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800c884:	d05d      	beq.n	800c942 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c886:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c88a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c88e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c892:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c896:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c898:	ee07 4a90 	vmov	s15, r4
 800c89c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c8a0:	d003      	beq.n	800c8aa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800c8a2:	2902      	cmp	r1, #2
 800c8a4:	d078      	beq.n	800c998 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 800c8a6:	2900      	cmp	r1, #0
 800c8a8:	d050      	beq.n	800c94c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c8b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8b8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800c8bc:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800c8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c4:	ee07 3a90 	vmov	s15, r3
 800c8c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c8d4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800c8d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8dc:	4a35      	ldr	r2, [pc, #212]	; (800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800c8de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c8e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c8e8:	ee07 3a90 	vmov	s15, r3
 800c8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800c8f0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8fa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c8fe:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c902:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c904:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c908:	ee07 3a90 	vmov	s15, r3
 800c90c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c910:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c918:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c91c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c920:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c922:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c926:	ee07 3a10 	vmov	s14, r3
 800c92a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c92e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c93a:	ee17 3a90 	vmov	r3, s15
 800c93e:	6083      	str	r3, [r0, #8]
}
 800c940:	4770      	bx	lr
 800c942:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c944:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c948:	6083      	str	r3, [r0, #8]
}
 800c94a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c94c:	6811      	ldr	r1, [r2, #0]
 800c94e:	0689      	lsls	r1, r1, #26
 800c950:	d529      	bpl.n	800c9a6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c952:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c954:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c958:	4919      	ldr	r1, [pc, #100]	; (800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c95e:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c960:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c968:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800c96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c970:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c972:	ee06 3a10 	vmov	s12, r3
 800c976:	ee05 1a90 	vmov	s11, r1
 800c97a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c97e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c982:	ee36 6a26 	vadd.f32	s12, s12, s13
 800c986:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800c98a:	eef0 7a46 	vmov.f32	s15, s12
 800c98e:	eee7 7a05 	vfma.f32	s15, s14, s10
 800c992:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c996:	e7a1      	b.n	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c998:	ee07 3a90 	vmov	s15, r3
 800c99c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800c9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a4:	e787      	b.n	800c8b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800c9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800c9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9b2:	e780      	b.n	800c8b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c9b4:	58024400 	.word	0x58024400
 800c9b8:	4a742400 	.word	0x4a742400
 800c9bc:	39000000 	.word	0x39000000
 800c9c0:	03d09000 	.word	0x03d09000
 800c9c4:	4bbebc20 	.word	0x4bbebc20
 800c9c8:	4c742400 	.word	0x4c742400

0800c9cc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9cc:	4a51      	ldr	r2, [pc, #324]	; (800cb14 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 800c9ce:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9d2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9d4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 800c9d6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9da:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9de:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800c9e0:	d05e      	beq.n	800caa0 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9e2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9e6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9ea:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9ee:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c9f2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9f4:	ee07 4a90 	vmov	s15, r4
 800c9f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c9fc:	f000 8082 	beq.w	800cb04 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 800ca00:	2902      	cmp	r1, #2
 800ca02:	d078      	beq.n	800caf6 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 800ca04:	2900      	cmp	r1, #0
 800ca06:	d050      	beq.n	800caaa <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca08:	ee07 3a90 	vmov	s15, r3
 800ca0c:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800cb18 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800ca10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca16:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800ca1a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800cb1c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	ee07 3a90 	vmov	s15, r3
 800ca26:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ca2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca2e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ca32:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ca36:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca3a:	4a36      	ldr	r2, [pc, #216]	; (800cb14 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 800ca3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca42:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800ca4e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca50:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ca5c:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ca60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca62:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca76:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ca7a:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca80:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ca84:	ee07 3a10 	vmov	s14, r3
 800ca88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ca90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca98:	ee17 3a90 	vmov	r3, s15
 800ca9c:	6083      	str	r3, [r0, #8]
}
 800ca9e:	4770      	bx	lr
 800caa0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800caa2:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800caa6:	6083      	str	r3, [r0, #8]
}
 800caa8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800caaa:	6811      	ldr	r1, [r2, #0]
 800caac:	0689      	lsls	r1, r1, #26
 800caae:	d5ab      	bpl.n	800ca08 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cab0:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cab2:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cab6:	491a      	ldr	r1, [pc, #104]	; (800cb20 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cabc:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cabe:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac6:	ed9f 5a15 	vldr	s10, [pc, #84]	; 800cb1c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800caca:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cace:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cad0:	ee06 3a10 	vmov	s12, r3
 800cad4:	ee05 1a90 	vmov	s11, r1
 800cad8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800cadc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cae0:	ee36 6a26 	vadd.f32	s12, s12, s13
 800cae4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800cae8:	eef0 7a46 	vmov.f32	s15, s12
 800caec:	eee7 7a05 	vfma.f32	s15, s14, s10
 800caf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800caf4:	e7a1      	b.n	800ca3a <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 800cb24 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800cafe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb02:	e787      	b.n	800ca14 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb04:	ee07 3a90 	vmov	s15, r3
 800cb08:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800cb28 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 800cb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb10:	e780      	b.n	800ca14 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800cb12:	bf00      	nop
 800cb14:	58024400 	.word	0x58024400
 800cb18:	4c742400 	.word	0x4c742400
 800cb1c:	39000000 	.word	0x39000000
 800cb20:	03d09000 	.word	0x03d09000
 800cb24:	4bbebc20 	.word	0x4bbebc20
 800cb28:	4a742400 	.word	0x4a742400

0800cb2c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb2c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cb30:	430b      	orrs	r3, r1
{
 800cb32:	b500      	push	{lr}
 800cb34:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb36:	f000 8083 	beq.w	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800cb3a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800cb3e:	430b      	orrs	r3, r1
 800cb40:	d038      	beq.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb42:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800cb46:	430b      	orrs	r3, r1
 800cb48:	f000 80e6 	beq.w	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cb4c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800cb50:	430b      	orrs	r3, r1
 800cb52:	f000 8089 	beq.w	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb56:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800cb5a:	430b      	orrs	r3, r1
 800cb5c:	d060      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb5e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800cb62:	430b      	orrs	r3, r1
 800cb64:	f000 8112 	beq.w	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb68:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	f000 80a3 	beq.w	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb72:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800cb76:	430b      	orrs	r3, r1
 800cb78:	f000 80fa 	beq.w	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb7c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800cb80:	430b      	orrs	r3, r1
 800cb82:	f000 8143 	beq.w	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb86:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800cb8a:	4308      	orrs	r0, r1
 800cb8c:	d137      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb8e:	4a9a      	ldr	r2, [pc, #616]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb90:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800cb96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb9a:	f000 8084 	beq.w	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba2:	f000 8157 	beq.w	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cba6:	bb53      	cbnz	r3, 800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cba8:	6810      	ldr	r0, [r2, #0]
 800cbaa:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cbae:	d044      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800cbb0:	4892      	ldr	r0, [pc, #584]	; (800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800cbb2:	e042      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800cbb4:	4a90      	ldr	r2, [pc, #576]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbb6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cbb8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800cbbc:	2b80      	cmp	r3, #128	; 0x80
 800cbbe:	f000 80a6 	beq.w	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cbc2:	d920      	bls.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800cbc4:	2bc0      	cmp	r3, #192	; 0xc0
 800cbc6:	d037      	beq.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800cbc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbcc:	d117      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbd0:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbd6:	0749      	lsls	r1, r1, #29
 800cbd8:	d502      	bpl.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 80c2 	beq.w	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbe0:	4a85      	ldr	r2, [pc, #532]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	05d0      	lsls	r0, r2, #23
 800cbe6:	d503      	bpl.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800cbe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbec:	f000 8102 	beq.w	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbf0:	4a81      	ldr	r2, [pc, #516]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbf2:	6812      	ldr	r2, [r2, #0]
 800cbf4:	0391      	lsls	r1, r2, #14
 800cbf6:	d502      	bpl.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cbf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbfc:	d0d8      	beq.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800cbfe:	2000      	movs	r0, #0
}
 800cc00:	b005      	add	sp, #20
 800cc02:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d04d      	beq.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cc0a:	2b40      	cmp	r3, #64	; 0x40
 800cc0c:	d1f7      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc0e:	6810      	ldr	r0, [r2, #0]
 800cc10:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cc14:	d011      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc16:	a801      	add	r0, sp, #4
 800cc18:	f7ff fd7c 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc1c:	9801      	ldr	r0, [sp, #4]
 800cc1e:	e00c      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cc20:	4a75      	ldr	r2, [pc, #468]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc22:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800cc28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc2c:	d06f      	beq.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cc2e:	d938      	bls.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800cc30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc34:	f040 8088 	bne.w	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc38:	4871      	ldr	r0, [pc, #452]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800cc3a:	b005      	add	sp, #20
 800cc3c:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc40:	4b6d      	ldr	r3, [pc, #436]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc44:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d8d8      	bhi.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800ccf7 	.word	0x0800ccf7
 800cc58:	0800ccd3 	.word	0x0800ccd3
 800cc5c:	0800cce3 	.word	0x0800cce3
 800cc60:	0800cc39 	.word	0x0800cc39
 800cc64:	0800ccdf 	.word	0x0800ccdf
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc68:	4a63      	ldr	r2, [pc, #396]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc6c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800cc70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc74:	d04b      	beq.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cc76:	d944      	bls.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800cc78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc7c:	d0dc      	beq.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800cc7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc82:	d1bc      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc86:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc8c:	0752      	lsls	r2, r2, #29
 800cc8e:	d5a7      	bpl.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1a5      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc94:	4b58      	ldr	r3, [pc, #352]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc96:	485b      	ldr	r0, [pc, #364]	; (800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cc9e:	40d8      	lsrs	r0, r3
 800cca0:	e7cb      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d154      	bne.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cca6:	6810      	ldr	r0, [r2, #0]
 800cca8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ccac:	d0c5      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccae:	a801      	add	r0, sp, #4
 800ccb0:	f7ff fe8c 	bl	800c9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccb4:	9802      	ldr	r0, [sp, #8]
 800ccb6:	e7c0      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ccb8:	4a4f      	ldr	r2, [pc, #316]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ccbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800ccc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc4:	f000 80d0 	beq.w	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800ccc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cccc:	d0da      	beq.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d195      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccd2:	4b49      	ldr	r3, [pc, #292]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccd4:	6818      	ldr	r0, [r3, #0]
 800ccd6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ccda:	d0ae      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ccdc:	e79b      	b.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccde:	4a46      	ldr	r2, [pc, #280]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cce0:	e775      	b.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cce2:	4b45      	ldr	r3, [pc, #276]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ccea:	d0a6      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccec:	a801      	add	r0, sp, #4
 800ccee:	f7ff fdbf 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccf2:	9801      	ldr	r0, [sp, #4]
 800ccf4:	e7a1      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccf6:	4b40      	ldr	r3, [pc, #256]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ccfe:	d09c      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cd00:	e7d5      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0cf      	beq.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cd06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cd0a:	d080      	beq.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800cd0c:	e777      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd0e:	6810      	ldr	r0, [r2, #0]
 800cd10:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cd14:	d091      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cd16:	e7e9      	b.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cd18:	4a37      	ldr	r2, [pc, #220]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cd1c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800cd20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd24:	d0f3      	beq.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cd26:	d806      	bhi.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d0bc      	beq.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cd2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd30:	f43f af6d 	beq.w	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800cd34:	e763      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cd36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd3a:	f43f af7d 	beq.w	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800cd3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd42:	f43f af44 	beq.w	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800cd46:	e75a      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 800cd48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd4c:	d09a      	beq.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cd4e:	e756      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd54:	f43f af5b 	beq.w	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800cd58:	e751      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd5a:	6810      	ldr	r0, [r2, #0]
 800cd5c:	f010 0004 	ands.w	r0, r0, #4
 800cd60:	f43f af6b 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd64:	6813      	ldr	r3, [r2, #0]
 800cd66:	4827      	ldr	r0, [pc, #156]	; (800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cd68:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cd6c:	40d8      	lsrs	r0, r3
 800cd6e:	e764      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd70:	4b21      	ldr	r3, [pc, #132]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800cd74:	03d2      	lsls	r2, r2, #15
 800cd76:	d5bf      	bpl.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd78:	6818      	ldr	r0, [r3, #0]
 800cd7a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cd7e:	f43f af5c 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd82:	a801      	add	r0, sp, #4
 800cd84:	f7ff fcc6 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd88:	9803      	ldr	r0, [sp, #12]
 800cd8a:	e756      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cd8c:	4a1a      	ldr	r2, [pc, #104]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd8e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cd90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800cd94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd98:	d0df      	beq.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800cd9a:	d810      	bhi.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800cd9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda0:	d058      	beq.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cda2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cda6:	d118      	bne.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cda8:	4b13      	ldr	r3, [pc, #76]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdaa:	6818      	ldr	r0, [r3, #0]
 800cdac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cdb0:	f43f af43 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdb4:	a801      	add	r0, sp, #4
 800cdb6:	f7ff fd5b 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdba:	9802      	ldr	r0, [sp, #8]
 800cdbc:	e73d      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800cdbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cdc2:	d012      	beq.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800cdc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cdc8:	f47f af19 	bne.w	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdce:	6818      	ldr	r0, [r3, #0]
 800cdd0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cdd4:	f43f af31 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cdd8:	e6ea      	b.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f47f af0f 	bne.w	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 800cde0:	b005      	add	sp, #20
 800cde2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800cde6:	f7fe bcff 	b.w	800b7e8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdea:	6810      	ldr	r0, [r2, #0]
 800cdec:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800cdf0:	f43f af23 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800cdf4:	4804      	ldr	r0, [pc, #16]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800cdf6:	e720      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cdf8:	58024400 	.word	0x58024400
 800cdfc:	017d7840 	.word	0x017d7840
 800ce00:	00bb8000 	.word	0x00bb8000
 800ce04:	03d09000 	.word	0x03d09000
 800ce08:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce0c:	4b28      	ldr	r3, [pc, #160]	; (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800ce14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce18:	d037      	beq.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800ce1a:	d814      	bhi.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800ce1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce20:	d03f      	beq.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800ce22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce26:	d0bf      	beq.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f aee8 	bne.w	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce2e:	f7fe fc9b 	bl	800b768 <HAL_RCC_GetHCLKFreq>
 800ce32:	4b1f      	ldr	r3, [pc, #124]	; (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce34:	4a1f      	ldr	r2, [pc, #124]	; (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ce3c:	5cd3      	ldrb	r3, [r2, r3]
 800ce3e:	f003 031f 	and.w	r3, r3, #31
 800ce42:	40d8      	lsrs	r0, r3
        break;
 800ce44:	e6f9      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800ce46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce4a:	d017      	beq.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800ce4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce50:	d0bc      	beq.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800ce52:	e6d4      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce54:	6810      	ldr	r0, [r2, #0]
 800ce56:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ce5a:	f43f aeee 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5e:	a801      	add	r0, sp, #4
 800ce60:	f7ff fc58 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce64:	9802      	ldr	r0, [sp, #8]
 800ce66:	e6e8      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce68:	6810      	ldr	r0, [r2, #0]
 800ce6a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ce6e:	f43f aee4 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce72:	a801      	add	r0, sp, #4
 800ce74:	f7ff fcfc 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce78:	9803      	ldr	r0, [sp, #12]
 800ce7a:	e6de      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce7c:	4b0c      	ldr	r3, [pc, #48]	; (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800ce84:	f43f aed9 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ce88:	e7b4      	b.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce8a:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f010 0004 	ands.w	r0, r0, #4
 800ce92:	f43f aed2 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4807      	ldr	r0, [pc, #28]	; (800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800ce9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ce9e:	40d8      	lsrs	r0, r3
 800cea0:	e6cb      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cea2:	4b03      	ldr	r3, [pc, #12]	; (800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ceaa:	f43f aec6 	beq.w	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ceae:	e7d6      	b.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	080195cc 	.word	0x080195cc
 800ceb8:	03d09000 	.word	0x03d09000

0800cebc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cebc:	2800      	cmp	r0, #0
 800cebe:	f000 80a5 	beq.w	800d00c <HAL_TIM_Base_Init+0x150>
{
 800cec2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cec4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cec8:	4604      	mov	r4, r0
 800ceca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d076      	beq.n	800cfc0 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ced2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ced4:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ced6:	494e      	ldr	r1, [pc, #312]	; (800d010 <HAL_TIM_Base_Init+0x154>)
 800ced8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800cedc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cee0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800cee4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cee6:	fab1 f181 	clz	r1, r1
 800ceea:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800ceee:	d027      	beq.n	800cf40 <HAL_TIM_Base_Init+0x84>
 800cef0:	bb31      	cbnz	r1, 800cf40 <HAL_TIM_Base_Init+0x84>
 800cef2:	4848      	ldr	r0, [pc, #288]	; (800d014 <HAL_TIM_Base_Init+0x158>)
 800cef4:	4d48      	ldr	r5, [pc, #288]	; (800d018 <HAL_TIM_Base_Init+0x15c>)
 800cef6:	4282      	cmp	r2, r0
 800cef8:	d067      	beq.n	800cfca <HAL_TIM_Base_Init+0x10e>
 800cefa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800cefe:	4282      	cmp	r2, r0
 800cf00:	d063      	beq.n	800cfca <HAL_TIM_Base_Init+0x10e>
 800cf02:	1b55      	subs	r5, r2, r5
 800cf04:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800cf08:	fab5 f585 	clz	r5, r5
 800cf0c:	4282      	cmp	r2, r0
 800cf0e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800cf12:	d063      	beq.n	800cfdc <HAL_TIM_Base_Init+0x120>
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	d161      	bne.n	800cfdc <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf18:	4840      	ldr	r0, [pc, #256]	; (800d01c <HAL_TIM_Base_Init+0x160>)
 800cf1a:	4941      	ldr	r1, [pc, #260]	; (800d020 <HAL_TIM_Base_Init+0x164>)
 800cf1c:	428a      	cmp	r2, r1
 800cf1e:	bf18      	it	ne
 800cf20:	4282      	cmpne	r2, r0
 800cf22:	d065      	beq.n	800cff0 <HAL_TIM_Base_Init+0x134>
 800cf24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf28:	428a      	cmp	r2, r1
 800cf2a:	d061      	beq.n	800cff0 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf2c:	69a0      	ldr	r0, [r4, #24]
 800cf2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf32:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf34:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800cf36:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf38:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf3a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf3e:	e023      	b.n	800cf88 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf40:	4d35      	ldr	r5, [pc, #212]	; (800d018 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cf46:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf48:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800cf4a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf4c:	fab5 f585 	clz	r5, r5
 800cf50:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf52:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf5a:	69a0      	ldr	r0, [r4, #24]
 800cf5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf60:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800cf62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf64:	68e3      	ldr	r3, [r4, #12]
 800cf66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf6c:	b951      	cbnz	r1, 800cf84 <HAL_TIM_Base_Init+0xc8>
 800cf6e:	b94d      	cbnz	r5, 800cf84 <HAL_TIM_Base_Init+0xc8>
 800cf70:	492a      	ldr	r1, [pc, #168]	; (800d01c <HAL_TIM_Base_Init+0x160>)
 800cf72:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <HAL_TIM_Base_Init+0x164>)
 800cf74:	429a      	cmp	r2, r3
 800cf76:	bf18      	it	ne
 800cf78:	428a      	cmpne	r2, r1
 800cf7a:	d003      	beq.n	800cf84 <HAL_TIM_Base_Init+0xc8>
 800cf7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d101      	bne.n	800cf88 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf84:	6963      	ldr	r3, [r4, #20]
 800cf86:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf88:	2301      	movs	r3, #1
  return HAL_OK;
 800cf8a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800cf8c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf8e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800cf96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800cf9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cf9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800cfa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cfae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfb2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800cfb6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cfba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cfc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cfc4:	f7f9 ff10 	bl	8006de8 <HAL_TIM_Base_MspInit>
 800cfc8:	e783      	b.n	800ced2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfca:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cfd0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfd2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800cfd6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfd8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfda:	e7ba      	b.n	800cf52 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800cfdc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cfe2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe4:	480f      	ldr	r0, [pc, #60]	; (800d024 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfe6:	4282      	cmp	r2, r0
 800cfe8:	d0b3      	beq.n	800cf52 <HAL_TIM_Base_Init+0x96>
 800cfea:	2d00      	cmp	r5, #0
 800cfec:	d1b1      	bne.n	800cf52 <HAL_TIM_Base_Init+0x96>
 800cfee:	e793      	b.n	800cf18 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cff0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cff6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cff8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cffa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d000:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d002:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d004:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d006:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d008:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d00a:	e7b1      	b.n	800cf70 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800d00c:	2001      	movs	r0, #1
}
 800d00e:	4770      	bx	lr
 800d010:	40010000 	.word	0x40010000
 800d014:	40000400 	.word	0x40000400
 800d018:	40010400 	.word	0x40010400
 800d01c:	40014000 	.word	0x40014000
 800d020:	40014400 	.word	0x40014400
 800d024:	40000c00 	.word	0x40000c00

0800d028 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d028:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d13d      	bne.n	800d0ac <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d030:	6802      	ldr	r2, [r0, #0]
 800d032:	4b23      	ldr	r3, [pc, #140]	; (800d0c0 <HAL_TIM_Base_Start+0x98>)
 800d034:	4923      	ldr	r1, [pc, #140]	; (800d0c4 <HAL_TIM_Base_Start+0x9c>)
 800d036:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d03a:	bf18      	it	ne
 800d03c:	429a      	cmpne	r2, r3
{
 800d03e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d040:	bf0c      	ite	eq
 800d042:	2301      	moveq	r3, #1
 800d044:	2300      	movne	r3, #0
 800d046:	4d20      	ldr	r5, [pc, #128]	; (800d0c8 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d048:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04a:	42aa      	cmp	r2, r5
 800d04c:	bf08      	it	eq
 800d04e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d052:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d056:	4c1d      	ldr	r4, [pc, #116]	; (800d0cc <HAL_TIM_Base_Start+0xa4>)
 800d058:	428a      	cmp	r2, r1
 800d05a:	bf08      	it	eq
 800d05c:	f043 0301 	orreq.w	r3, r3, #1
 800d060:	481b      	ldr	r0, [pc, #108]	; (800d0d0 <HAL_TIM_Base_Start+0xa8>)
 800d062:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d066:	42a2      	cmp	r2, r4
 800d068:	bf08      	it	eq
 800d06a:	f043 0301 	orreq.w	r3, r3, #1
 800d06e:	4282      	cmp	r2, r0
 800d070:	bf08      	it	eq
 800d072:	f043 0301 	orreq.w	r3, r3, #1
 800d076:	428a      	cmp	r2, r1
 800d078:	bf08      	it	eq
 800d07a:	f043 0301 	orreq.w	r3, r3, #1
 800d07e:	b933      	cbnz	r3, 800d08e <HAL_TIM_Base_Start+0x66>
 800d080:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d084:	1a10      	subs	r0, r2, r0
 800d086:	fab0 f080 	clz	r0, r0
 800d08a:	0940      	lsrs	r0, r0, #5
 800d08c:	b198      	cbz	r0, 800d0b6 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d08e:	6891      	ldr	r1, [r2, #8]
 800d090:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <HAL_TIM_Base_Start+0xac>)
 800d092:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d094:	2b06      	cmp	r3, #6
 800d096:	d00b      	beq.n	800d0b0 <HAL_TIM_Base_Start+0x88>
 800d098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d09c:	d008      	beq.n	800d0b0 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800d09e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d0a0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d0a2:	f043 0301 	orr.w	r3, r3, #1
 800d0a6:	6013      	str	r3, [r2, #0]
}
 800d0a8:	bc30      	pop	{r4, r5}
 800d0aa:	4770      	bx	lr
    return HAL_ERROR;
 800d0ac:	2001      	movs	r0, #1
}
 800d0ae:	4770      	bx	lr
  return HAL_OK;
 800d0b0:	2000      	movs	r0, #0
}
 800d0b2:	bc30      	pop	{r4, r5}
 800d0b4:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d0b6:	6813      	ldr	r3, [r2, #0]
 800d0b8:	f043 0301 	orr.w	r3, r3, #1
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	e7f3      	b.n	800d0a8 <HAL_TIM_Base_Start+0x80>
 800d0c0:	40010000 	.word	0x40010000
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40000400 	.word	0x40000400
 800d0cc:	40000c00 	.word	0x40000c00
 800d0d0:	40010400 	.word	0x40010400
 800d0d4:	00010007 	.word	0x00010007

0800d0d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d0d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d141      	bne.n	800d164 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0e0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0e4:	4b24      	ldr	r3, [pc, #144]	; (800d178 <HAL_TIM_Base_Start_IT+0xa0>)
 800d0e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d0ea:	bf18      	it	ne
 800d0ec:	429a      	cmpne	r2, r3
{
 800d0ee:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0f0:	bf0c      	ite	eq
 800d0f2:	2301      	moveq	r3, #1
 800d0f4:	2300      	movne	r3, #0
 800d0f6:	4d21      	ldr	r5, [pc, #132]	; (800d17c <HAL_TIM_Base_Start_IT+0xa4>)
 800d0f8:	4c21      	ldr	r4, [pc, #132]	; (800d180 <HAL_TIM_Base_Start_IT+0xa8>)
 800d0fa:	42aa      	cmp	r2, r5
 800d0fc:	bf08      	it	eq
 800d0fe:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d102:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d106:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d108:	42a2      	cmp	r2, r4
 800d10a:	bf08      	it	eq
 800d10c:	f043 0301 	orreq.w	r3, r3, #1
 800d110:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d114:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d118:	481a      	ldr	r0, [pc, #104]	; (800d184 <HAL_TIM_Base_Start_IT+0xac>)
 800d11a:	42a2      	cmp	r2, r4
 800d11c:	bf08      	it	eq
 800d11e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d122:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d124:	4282      	cmp	r2, r0
 800d126:	bf08      	it	eq
 800d128:	f043 0301 	orreq.w	r3, r3, #1
 800d12c:	4916      	ldr	r1, [pc, #88]	; (800d188 <HAL_TIM_Base_Start_IT+0xb0>)
 800d12e:	428a      	cmp	r2, r1
 800d130:	bf08      	it	eq
 800d132:	f043 0301 	orreq.w	r3, r3, #1
 800d136:	b933      	cbnz	r3, 800d146 <HAL_TIM_Base_Start_IT+0x6e>
 800d138:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d13c:	1a10      	subs	r0, r2, r0
 800d13e:	fab0 f080 	clz	r0, r0
 800d142:	0940      	lsrs	r0, r0, #5
 800d144:	b198      	cbz	r0, 800d16e <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d146:	6891      	ldr	r1, [r2, #8]
 800d148:	4b10      	ldr	r3, [pc, #64]	; (800d18c <HAL_TIM_Base_Start_IT+0xb4>)
 800d14a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d14c:	2b06      	cmp	r3, #6
 800d14e:	d00b      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x90>
 800d150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d154:	d008      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800d156:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d158:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d15a:	f043 0301 	orr.w	r3, r3, #1
 800d15e:	6013      	str	r3, [r2, #0]
}
 800d160:	bc30      	pop	{r4, r5}
 800d162:	4770      	bx	lr
    return HAL_ERROR;
 800d164:	2001      	movs	r0, #1
}
 800d166:	4770      	bx	lr
  return HAL_OK;
 800d168:	2000      	movs	r0, #0
}
 800d16a:	bc30      	pop	{r4, r5}
 800d16c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d16e:	6813      	ldr	r3, [r2, #0]
 800d170:	f043 0301 	orr.w	r3, r3, #1
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	e7f3      	b.n	800d160 <HAL_TIM_Base_Start_IT+0x88>
 800d178:	40010000 	.word	0x40010000
 800d17c:	40000400 	.word	0x40000400
 800d180:	40000800 	.word	0x40000800
 800d184:	40010400 	.word	0x40010400
 800d188:	40001800 	.word	0x40001800
 800d18c:	00010007 	.word	0x00010007

0800d190 <HAL_TIM_IC_MspInit>:
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800d194:	2800      	cmp	r0, #0
 800d196:	f000 80a5 	beq.w	800d2e4 <HAL_TIM_IC_Init+0x150>
{
 800d19a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d19c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d076      	beq.n	800d298 <HAL_TIM_IC_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1aa:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ac:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1ae:	494e      	ldr	r1, [pc, #312]	; (800d2e8 <HAL_TIM_IC_Init+0x154>)
 800d1b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800d1b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1b8:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800d1bc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1be:	fab1 f181 	clz	r1, r1
 800d1c2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d1c6:	d027      	beq.n	800d218 <HAL_TIM_IC_Init+0x84>
 800d1c8:	bb31      	cbnz	r1, 800d218 <HAL_TIM_IC_Init+0x84>
 800d1ca:	4848      	ldr	r0, [pc, #288]	; (800d2ec <HAL_TIM_IC_Init+0x158>)
 800d1cc:	4d48      	ldr	r5, [pc, #288]	; (800d2f0 <HAL_TIM_IC_Init+0x15c>)
 800d1ce:	4282      	cmp	r2, r0
 800d1d0:	d067      	beq.n	800d2a2 <HAL_TIM_IC_Init+0x10e>
 800d1d2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d1d6:	4282      	cmp	r2, r0
 800d1d8:	d063      	beq.n	800d2a2 <HAL_TIM_IC_Init+0x10e>
 800d1da:	1b55      	subs	r5, r2, r5
 800d1dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d1e0:	fab5 f585 	clz	r5, r5
 800d1e4:	4282      	cmp	r2, r0
 800d1e6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d1ea:	d063      	beq.n	800d2b4 <HAL_TIM_IC_Init+0x120>
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	d161      	bne.n	800d2b4 <HAL_TIM_IC_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d1f0:	4840      	ldr	r0, [pc, #256]	; (800d2f4 <HAL_TIM_IC_Init+0x160>)
 800d1f2:	4941      	ldr	r1, [pc, #260]	; (800d2f8 <HAL_TIM_IC_Init+0x164>)
 800d1f4:	428a      	cmp	r2, r1
 800d1f6:	bf18      	it	ne
 800d1f8:	4282      	cmpne	r2, r0
 800d1fa:	d065      	beq.n	800d2c8 <HAL_TIM_IC_Init+0x134>
 800d1fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d200:	428a      	cmp	r2, r1
 800d202:	d061      	beq.n	800d2c8 <HAL_TIM_IC_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d204:	69a0      	ldr	r0, [r4, #24]
 800d206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d20a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d20c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d20e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800d210:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d212:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d214:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d216:	e023      	b.n	800d260 <HAL_TIM_IC_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d218:	4d35      	ldr	r5, [pc, #212]	; (800d2f0 <HAL_TIM_IC_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d21e:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d220:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800d222:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d224:	fab5 f585 	clz	r5, r5
 800d228:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d22a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d22c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d230:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d232:	69a0      	ldr	r0, [r4, #24]
 800d234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d238:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d23a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d23c:	68e3      	ldr	r3, [r4, #12]
 800d23e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d244:	b951      	cbnz	r1, 800d25c <HAL_TIM_IC_Init+0xc8>
 800d246:	b94d      	cbnz	r5, 800d25c <HAL_TIM_IC_Init+0xc8>
 800d248:	492a      	ldr	r1, [pc, #168]	; (800d2f4 <HAL_TIM_IC_Init+0x160>)
 800d24a:	4b2b      	ldr	r3, [pc, #172]	; (800d2f8 <HAL_TIM_IC_Init+0x164>)
 800d24c:	429a      	cmp	r2, r3
 800d24e:	bf18      	it	ne
 800d250:	428a      	cmpne	r2, r1
 800d252:	d003      	beq.n	800d25c <HAL_TIM_IC_Init+0xc8>
 800d254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d258:	429a      	cmp	r2, r3
 800d25a:	d101      	bne.n	800d260 <HAL_TIM_IC_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800d25c:	6963      	ldr	r3, [r4, #20]
 800d25e:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800d260:	2301      	movs	r3, #1
  return HAL_OK;
 800d262:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800d264:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d266:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d26a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d26e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d272:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d276:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d27a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d27e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d282:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d28a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d28e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d292:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d296:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800d298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800d29c:	f7ff ff78 	bl	800d190 <HAL_TIM_IC_MspInit>
 800d2a0:	e783      	b.n	800d1aa <HAL_TIM_IC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2a2:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d2a8:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2aa:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800d2ae:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2b0:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2b2:	e7ba      	b.n	800d22a <HAL_TIM_IC_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800d2b4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d2ba:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2bc:	480f      	ldr	r0, [pc, #60]	; (800d2fc <HAL_TIM_IC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2be:	4282      	cmp	r2, r0
 800d2c0:	d0b3      	beq.n	800d22a <HAL_TIM_IC_Init+0x96>
 800d2c2:	2d00      	cmp	r5, #0
 800d2c4:	d1b1      	bne.n	800d22a <HAL_TIM_IC_Init+0x96>
 800d2c6:	e793      	b.n	800d1f0 <HAL_TIM_IC_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2c8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2d0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2d2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2d8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d2da:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d2dc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2de:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d2e0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2e2:	e7b1      	b.n	800d248 <HAL_TIM_IC_Init+0xb4>
    return HAL_ERROR;
 800d2e4:	2001      	movs	r0, #1
}
 800d2e6:	4770      	bx	lr
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40010400 	.word	0x40010400
 800d2f4:	40014000 	.word	0x40014000
 800d2f8:	40014400 	.word	0x40014400
 800d2fc:	40000c00 	.word	0x40000c00

0800d300 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800d300:	2800      	cmp	r0, #0
 800d302:	f000 80cc 	beq.w	800d49e <HAL_TIM_Encoder_Init+0x19e>
{
 800d306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d308:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d30c:	4604      	mov	r4, r0
 800d30e:	460d      	mov	r5, r1
 800d310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 809b 	beq.w	800d450 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d31a:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d31c:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d31e:	4a61      	ldr	r2, [pc, #388]	; (800d4a4 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d320:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d328:	6899      	ldr	r1, [r3, #8]
 800d32a:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d32e:	495e      	ldr	r1, [pc, #376]	; (800d4a8 <HAL_TIM_Encoder_Init+0x1a8>)
 800d330:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d334:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800d336:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d338:	fab1 f181 	clz	r1, r1
 800d33c:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d340:	d02b      	beq.n	800d39a <HAL_TIM_Encoder_Init+0x9a>
 800d342:	bb51      	cbnz	r1, 800d39a <HAL_TIM_Encoder_Init+0x9a>
 800d344:	4859      	ldr	r0, [pc, #356]	; (800d4ac <HAL_TIM_Encoder_Init+0x1ac>)
 800d346:	4283      	cmp	r3, r0
 800d348:	f000 8087 	beq.w	800d45a <HAL_TIM_Encoder_Init+0x15a>
 800d34c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d350:	4283      	cmp	r3, r0
 800d352:	f000 8082 	beq.w	800d45a <HAL_TIM_Encoder_Init+0x15a>
 800d356:	4e56      	ldr	r6, [pc, #344]	; (800d4b0 <HAL_TIM_Encoder_Init+0x1b0>)
 800d358:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d35c:	1b9e      	subs	r6, r3, r6
 800d35e:	4283      	cmp	r3, r0
 800d360:	fab6 f686 	clz	r6, r6
 800d364:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800d368:	f000 8081 	beq.w	800d46e <HAL_TIM_Encoder_Init+0x16e>
 800d36c:	2e00      	cmp	r6, #0
 800d36e:	d17e      	bne.n	800d46e <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d370:	4850      	ldr	r0, [pc, #320]	; (800d4b4 <HAL_TIM_Encoder_Init+0x1b4>)
 800d372:	4951      	ldr	r1, [pc, #324]	; (800d4b8 <HAL_TIM_Encoder_Init+0x1b8>)
 800d374:	428b      	cmp	r3, r1
 800d376:	bf18      	it	ne
 800d378:	4283      	cmpne	r3, r0
 800d37a:	f000 8082 	beq.w	800d482 <HAL_TIM_Encoder_Init+0x182>
 800d37e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d382:	428b      	cmp	r3, r1
 800d384:	d07d      	beq.n	800d482 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d386:	69a1      	ldr	r1, [r4, #24]
 800d388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d38c:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d38e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d390:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d392:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d394:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d396:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d398:	e023      	b.n	800d3e2 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d39a:	4e45      	ldr	r6, [pc, #276]	; (800d4b0 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d39c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d3a0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3a2:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d3a4:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3a6:	fab6 f686 	clz	r6, r6
 800d3aa:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3ac:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3b2:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3b4:	69a0      	ldr	r0, [r4, #24]
 800d3b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3ba:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800d3bc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3be:	68e2      	ldr	r2, [r4, #12]
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3c6:	b951      	cbnz	r1, 800d3de <HAL_TIM_Encoder_Init+0xde>
 800d3c8:	b94e      	cbnz	r6, 800d3de <HAL_TIM_Encoder_Init+0xde>
 800d3ca:	493a      	ldr	r1, [pc, #232]	; (800d4b4 <HAL_TIM_Encoder_Init+0x1b4>)
 800d3cc:	4a3a      	ldr	r2, [pc, #232]	; (800d4b8 <HAL_TIM_Encoder_Init+0x1b8>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	bf18      	it	ne
 800d3d2:	428b      	cmpne	r3, r1
 800d3d4:	d003      	beq.n	800d3de <HAL_TIM_Encoder_Init+0xde>
 800d3d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d101      	bne.n	800d3e2 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800d3de:	6962      	ldr	r2, [r4, #20]
 800d3e0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3e2:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800d3e4:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3e6:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3e8:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3ec:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800d3ee:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3f0:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d3f4:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800d3f6:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3f8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800d3fc:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d3fe:	492f      	ldr	r1, [pc, #188]	; (800d4bc <HAL_TIM_Encoder_Init+0x1bc>)
 800d400:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d402:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d404:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d408:	68e9      	ldr	r1, [r5, #12]
 800d40a:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800d40c:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d40e:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d412:	6a29      	ldr	r1, [r5, #32]
 800d414:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d418:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800d41a:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d41c:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800d420:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d422:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800d426:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d428:	4825      	ldr	r0, [pc, #148]	; (800d4c0 <HAL_TIM_Encoder_Init+0x1c0>)
 800d42a:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d42e:	4302      	orrs	r2, r0
  return HAL_OK;
 800d430:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800d432:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800d434:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d436:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d43a:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d43e:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d442:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d446:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800d44a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800d44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800d450:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800d454:	f7f9 fd54 	bl	8006f00 <HAL_TIM_Encoder_MspInit>
 800d458:	e75f      	b.n	800d31a <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d45a:	4e15      	ldr	r6, [pc, #84]	; (800d4b0 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d45c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d460:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d462:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d464:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d466:	fab6 f686 	clz	r6, r6
 800d46a:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d46c:	e79e      	b.n	800d3ac <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800d46e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d474:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d476:	4813      	ldr	r0, [pc, #76]	; (800d4c4 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d478:	4283      	cmp	r3, r0
 800d47a:	d097      	beq.n	800d3ac <HAL_TIM_Encoder_Init+0xac>
 800d47c:	2e00      	cmp	r6, #0
 800d47e:	d195      	bne.n	800d3ac <HAL_TIM_Encoder_Init+0xac>
 800d480:	e776      	b.n	800d370 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d482:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d484:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d488:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d48a:	69a1      	ldr	r1, [r4, #24]
 800d48c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d490:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d492:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d494:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d496:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d498:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d49a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d49c:	e795      	b.n	800d3ca <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800d49e:	2001      	movs	r0, #1
}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	fffebff8 	.word	0xfffebff8
 800d4a8:	40010000 	.word	0x40010000
 800d4ac:	40000400 	.word	0x40000400
 800d4b0:	40010400 	.word	0x40010400
 800d4b4:	40014000 	.word	0x40014000
 800d4b8:	40014400 	.word	0x40014400
 800d4bc:	fffffcfc 	.word	0xfffffcfc
 800d4c0:	ffff0303 	.word	0xffff0303
 800d4c4:	40000c00 	.word	0x40000c00

0800d4c8 <HAL_TIM_Encoder_Start>:
{
 800d4c8:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d4ca:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d4ce:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d4d2:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d4d6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d4d8:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d4dc:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800d4de:	b9c1      	cbnz	r1, 800d512 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d123      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
 800d4e4:	2a01      	cmp	r2, #1
 800d4e6:	d121      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d4e8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d4f4:	6a13      	ldr	r3, [r2, #32]
 800d4f6:	f023 0301 	bic.w	r3, r3, #1
 800d4fa:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4fc:	6a13      	ldr	r3, [r2, #32]
 800d4fe:	f043 0301 	orr.w	r3, r3, #1
 800d502:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800d504:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d506:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800d508:	f043 0301 	orr.w	r3, r3, #1
 800d50c:	6013      	str	r3, [r2, #0]
}
 800d50e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800d512:	2904      	cmp	r1, #4
 800d514:	fa5f fc8c 	uxtb.w	ip, ip
 800d518:	fa5f fe8e 	uxtb.w	lr, lr
 800d51c:	d027      	beq.n	800d56e <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d104      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
 800d522:	f1bc 0f01 	cmp.w	ip, #1
 800d526:	d101      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d528:	2a01      	cmp	r2, #1
 800d52a:	d002      	beq.n	800d532 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800d52c:	2001      	movs	r0, #1
}
 800d52e:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d532:	f1be 0f01 	cmp.w	lr, #1
 800d536:	d1f9      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d538:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d53a:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d53c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d540:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d544:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d548:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d54c:	6a13      	ldr	r3, [r2, #32]
 800d54e:	f023 0301 	bic.w	r3, r3, #1
 800d552:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d554:	6a13      	ldr	r3, [r2, #32]
 800d556:	f043 0301 	orr.w	r3, r3, #1
 800d55a:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800d55c:	6a13      	ldr	r3, [r2, #32]
 800d55e:	f023 0310 	bic.w	r3, r3, #16
 800d562:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d564:	6a13      	ldr	r3, [r2, #32]
 800d566:	f043 0310 	orr.w	r3, r3, #16
 800d56a:	6213      	str	r3, [r2, #32]
}
 800d56c:	e7ca      	b.n	800d504 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d56e:	f1bc 0f01 	cmp.w	ip, #1
 800d572:	d1db      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
 800d574:	f1be 0f01 	cmp.w	lr, #1
 800d578:	d1d8      	bne.n	800d52c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d57a:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d57c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d57e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d582:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d586:	e7e9      	b.n	800d55c <HAL_TIM_Encoder_Start+0x94>

0800d588 <HAL_TIM_IC_ConfigChannel>:
{
 800d588:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800d58a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800d58e:	2801      	cmp	r0, #1
 800d590:	f000 80d4 	beq.w	800d73c <HAL_TIM_IC_ConfigChannel+0x1b4>
 800d594:	2001      	movs	r0, #1
{
 800d596:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800d598:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800d59c:	b15a      	cbz	r2, 800d5b6 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 800d59e:	2a04      	cmp	r2, #4
 800d5a0:	d054      	beq.n	800d64c <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 800d5a2:	2a08      	cmp	r2, #8
 800d5a4:	f000 80a2 	beq.w	800d6ec <HAL_TIM_IC_ConfigChannel+0x164>
  else if (Channel == TIM_CHANNEL_4)
 800d5a8:	2a0c      	cmp	r2, #12
 800d5aa:	d079      	beq.n	800d6a0 <HAL_TIM_IC_ConfigChannel+0x118>
  __HAL_UNLOCK(htim);
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d5b2:	bcf0      	pop	{r4, r5, r6, r7}
 800d5b4:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800d5b6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d5b8:	f8df c184 	ldr.w	ip, [pc, #388]	; 800d740 <HAL_TIM_IC_ConfigChannel+0x1b8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5bc:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d5be:	4562      	cmp	r2, ip
                      sConfig->ICFilter);
 800d5c0:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5c2:	f026 0601 	bic.w	r6, r6, #1
                      sConfig->ICSelection,
 800d5c6:	e9d1 4500 	ldrd	r4, r5, [r1]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ca:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5cc:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 800d5ce:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d5d0:	d01d      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5d2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d5d6:	d01a      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5d8:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 800d5dc:	4562      	cmp	r2, ip
 800d5de:	d016      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5e0:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d5e4:	4562      	cmp	r2, ip
 800d5e6:	d012      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5e8:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d5ec:	4562      	cmp	r2, ip
 800d5ee:	d00e      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5f0:	f50c 4c78 	add.w	ip, ip, #63488	; 0xf800
 800d5f4:	4562      	cmp	r2, ip
 800d5f6:	d00a      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d5f8:	f5ac 4c6c 	sub.w	ip, ip, #60416	; 0xec00
 800d5fc:	4562      	cmp	r2, ip
 800d5fe:	d006      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
 800d600:	f50c 3c94 	add.w	ip, ip, #75776	; 0x12800
 800d604:	4562      	cmp	r2, ip
 800d606:	d002      	beq.n	800d60e <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d608:	f047 0c01 	orr.w	ip, r7, #1
 800d60c:	e003      	b.n	800d616 <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d60e:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800d612:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d616:	0100      	lsls	r0, r0, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d618:	f026 050a 	bic.w	r5, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d61c:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d620:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d624:	b2c0      	uxtb	r0, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d626:	432c      	orrs	r4, r5
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d628:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d62a:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 800d62e:	6190      	str	r0, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800d630:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800d632:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d634:	6994      	ldr	r4, [r2, #24]
 800d636:	f024 040c 	bic.w	r4, r4, #12
 800d63a:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d63c:	6991      	ldr	r1, [r2, #24]
 800d63e:	4329      	orrs	r1, r5
 800d640:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d642:	2200      	movs	r2, #0
 800d644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d648:	bcf0      	pop	{r4, r5, r6, r7}
 800d64a:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 800d64c:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800d64e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d650:	6a14      	ldr	r4, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d652:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d654:	f024 0410 	bic.w	r4, r4, #16
                      sConfig->ICSelection,
 800d658:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d65c:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d65e:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d660:	b281      	uxth	r1, r0
  tmpccmr1 = TIMx->CCMR1;
 800d662:	6990      	ldr	r0, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d664:	012d      	lsls	r5, r5, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d666:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d66a:	f005 05a0 	and.w	r5, r5, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d66e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d672:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d676:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d678:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800d67a:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d67c:	f020 01a0 	bic.w	r1, r0, #160	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 800d680:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d682:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer;
 800d684:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d686:	6991      	ldr	r1, [r2, #24]
 800d688:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800d68c:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d68e:	6991      	ldr	r1, [r2, #24]
 800d690:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800d694:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d696:	2200      	movs	r2, #0
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d69c:	bcf0      	pop	{r4, r5, r6, r7}
 800d69e:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 800d6a0:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800d6a2:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6a4:	6a14      	ldr	r4, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d6a6:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6a8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
                      sConfig->ICSelection,
 800d6ac:	e9d1 5600 	ldrd	r5, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6b0:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d6b2:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d6b4:	b281      	uxth	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d6b6:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d6b8:	032d      	lsls	r5, r5, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d6ba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d6be:	f405 4520 	and.w	r5, r5, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d6c2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d6c6:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d6ca:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d6cc:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 800d6ce:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d6d0:	f420 4120 	bic.w	r1, r0, #40960	; 0xa000
  HAL_StatusTypeDef status = HAL_OK;
 800d6d4:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d6d6:	4329      	orrs	r1, r5
  TIMx->CCER = tmpccer ;
 800d6d8:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d6da:	69d1      	ldr	r1, [r2, #28]
 800d6dc:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800d6e0:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d6e2:	69d1      	ldr	r1, [r2, #28]
 800d6e4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800d6e8:	61d1      	str	r1, [r2, #28]
 800d6ea:	e75f      	b.n	800d5ac <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800d6ec:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800d6ee:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d6f0:	6a15      	ldr	r5, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d6f2:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d6f4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
                      sConfig->ICSelection,
 800d6f8:	e9d1 6400 	ldrd	r6, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d6fc:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d6fe:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d700:	b2c1      	uxtb	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d702:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d704:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d706:	f020 0003 	bic.w	r0, r0, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d70a:	f406 6620 	and.w	r6, r6, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 800d70e:	4320      	orrs	r0, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d710:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d714:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d716:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 800d718:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d71a:	f420 6120 	bic.w	r1, r0, #2560	; 0xa00
  HAL_StatusTypeDef status = HAL_OK;
 800d71e:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d720:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 800d722:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d724:	69d1      	ldr	r1, [r2, #28]
 800d726:	f021 010c 	bic.w	r1, r1, #12
 800d72a:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d72c:	69d1      	ldr	r1, [r2, #28]
 800d72e:	4329      	orrs	r1, r5
 800d730:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800d732:	2200      	movs	r2, #0
 800d734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d738:	bcf0      	pop	{r4, r5, r6, r7}
 800d73a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d73c:	2002      	movs	r0, #2
}
 800d73e:	4770      	bx	lr
 800d740:	40010000 	.word	0x40010000

0800d744 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d744:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d748:	2b01      	cmp	r3, #1
 800d74a:	f000 8081 	beq.w	800d850 <HAL_TIM_ConfigClockSource+0x10c>
 800d74e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d750:	2302      	movs	r3, #2
{
 800d752:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800d754:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800d756:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d758:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800d75c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d760:	4b5a      	ldr	r3, [pc, #360]	; (800d8cc <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800d762:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d764:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800d766:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d768:	680b      	ldr	r3, [r1, #0]
 800d76a:	2b70      	cmp	r3, #112	; 0x70
 800d76c:	f000 809c 	beq.w	800d8a8 <HAL_TIM_ConfigClockSource+0x164>
 800d770:	d825      	bhi.n	800d7be <HAL_TIM_ConfigClockSource+0x7a>
 800d772:	2b50      	cmp	r3, #80	; 0x50
 800d774:	d06e      	beq.n	800d854 <HAL_TIM_ConfigClockSource+0x110>
 800d776:	d939      	bls.n	800d7ec <HAL_TIM_ConfigClockSource+0xa8>
 800d778:	2b60      	cmp	r3, #96	; 0x60
 800d77a:	d118      	bne.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d77c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d77e:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d780:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 800d784:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d786:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d788:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d78a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d78e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800d792:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d794:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800d798:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d79a:	4b4d      	ldr	r3, [pc, #308]	; (800d8d0 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800d79c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 800d7a0:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800d7a2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d7a4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7a6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7a8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d7ac:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d7ae:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d7b0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d7b2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d7b6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d7ba:	bc30      	pop	{r4, r5}
 800d7bc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7c2:	d060      	beq.n	800d886 <HAL_TIM_ConfigClockSource+0x142>
 800d7c4:	d933      	bls.n	800d82e <HAL_TIM_ConfigClockSource+0xea>
 800d7c6:	4943      	ldr	r1, [pc, #268]	; (800d8d4 <HAL_TIM_ConfigClockSource+0x190>)
 800d7c8:	428b      	cmp	r3, r1
 800d7ca:	d006      	beq.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
 800d7cc:	d929      	bls.n	800d822 <HAL_TIM_ConfigClockSource+0xde>
 800d7ce:	4942      	ldr	r1, [pc, #264]	; (800d8d8 <HAL_TIM_ConfigClockSource+0x194>)
 800d7d0:	428b      	cmp	r3, r1
 800d7d2:	d002      	beq.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
 800d7d4:	3110      	adds	r1, #16
 800d7d6:	428b      	cmp	r3, r1
 800d7d8:	d1e9      	bne.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800d7da:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7dc:	493c      	ldr	r1, [pc, #240]	; (800d8d0 <HAL_TIM_ConfigClockSource+0x18c>)
 800d7de:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d7e0:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7e2:	4319      	orrs	r1, r3
 800d7e4:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800d7e8:	60a1      	str	r1, [r4, #8]
}
 800d7ea:	e7e0      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d7ec:	2b40      	cmp	r3, #64	; 0x40
 800d7ee:	d123      	bne.n	800d838 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800d7f0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d7f2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d7f4:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7f6:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7fa:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 800d7fc:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7fe:	4b34      	ldr	r3, [pc, #208]	; (800d8d0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d800:	f021 0101 	bic.w	r1, r1, #1
 800d804:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d806:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d808:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d80c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d810:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d812:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d814:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d816:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d818:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d81a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d81e:	60a3      	str	r3, [r4, #8]
}
 800d820:	e7c5      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d822:	f023 0110 	bic.w	r1, r3, #16
 800d826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d82a:	d1c0      	bne.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
 800d82c:	e7d5      	b.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800d82e:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800d832:	bf18      	it	ne
 800d834:	2001      	movne	r0, #1
 800d836:	e7ba      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d838:	d8b9      	bhi.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
 800d83a:	2b20      	cmp	r3, #32
 800d83c:	d0cd      	beq.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
 800d83e:	d903      	bls.n	800d848 <HAL_TIM_ConfigClockSource+0x104>
 800d840:	2b30      	cmp	r3, #48	; 0x30
 800d842:	d0ca      	beq.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
 800d844:	2001      	movs	r0, #1
 800d846:	e7b2      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
 800d848:	f033 0110 	bics.w	r1, r3, #16
 800d84c:	d1af      	bne.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
 800d84e:	e7c4      	b.n	800d7da <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800d850:	2002      	movs	r0, #2
}
 800d852:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d854:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d856:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d858:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d85a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d85e:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 800d860:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d862:	4b1b      	ldr	r3, [pc, #108]	; (800d8d0 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d864:	f021 0101 	bic.w	r1, r1, #1
 800d868:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d86a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d86c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d870:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d874:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d876:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d878:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d87a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d87c:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d87e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d882:	60a3      	str	r3, [r4, #8]
}
 800d884:	e793      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d886:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d88a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d88c:	432b      	orrs	r3, r5
 800d88e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d890:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d894:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d896:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d89a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d89c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d89e:	68a3      	ldr	r3, [r4, #8]
 800d8a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8a4:	60a3      	str	r3, [r4, #8]
      break;
 800d8a6:	e782      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8a8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d8ac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8ae:	432b      	orrs	r3, r5
 800d8b0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8b2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d8b6:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d8bc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d8be:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d8c0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d8c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d8c6:	60a3      	str	r3, [r4, #8]
      break;
 800d8c8:	e771      	b.n	800d7ae <HAL_TIM_ConfigClockSource+0x6a>
 800d8ca:	bf00      	nop
 800d8cc:	ffce0088 	.word	0xffce0088
 800d8d0:	ffcfff8f 	.word	0xffcfff8f
 800d8d4:	00100020 	.word	0x00100020
 800d8d8:	00100030 	.word	0x00100030

0800d8dc <HAL_TIM_OC_DelayElapsedCallback>:
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop

0800d8e0 <HAL_TIM_IC_CaptureCallback>:
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop

0800d8e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop

0800d8e8 <HAL_TIM_TriggerCallback>:
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop

0800d8ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8ec:	6803      	ldr	r3, [r0, #0]
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	0791      	lsls	r1, r2, #30
{
 800d8f2:	b510      	push	{r4, lr}
 800d8f4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8f6:	d502      	bpl.n	800d8fe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	0792      	lsls	r2, r2, #30
 800d8fc:	d468      	bmi.n	800d9d0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8fe:	691a      	ldr	r2, [r3, #16]
 800d900:	0752      	lsls	r2, r2, #29
 800d902:	d502      	bpl.n	800d90a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	0750      	lsls	r0, r2, #29
 800d908:	d44f      	bmi.n	800d9aa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d90a:	691a      	ldr	r2, [r3, #16]
 800d90c:	0711      	lsls	r1, r2, #28
 800d90e:	d502      	bpl.n	800d916 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d910:	68da      	ldr	r2, [r3, #12]
 800d912:	0712      	lsls	r2, r2, #28
 800d914:	d437      	bmi.n	800d986 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	06d0      	lsls	r0, r2, #27
 800d91a:	d502      	bpl.n	800d922 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	06d1      	lsls	r1, r2, #27
 800d920:	d41e      	bmi.n	800d960 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d922:	691a      	ldr	r2, [r3, #16]
 800d924:	07d2      	lsls	r2, r2, #31
 800d926:	d502      	bpl.n	800d92e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	07d0      	lsls	r0, r2, #31
 800d92c:	d469      	bmi.n	800da02 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d92e:	691a      	ldr	r2, [r3, #16]
 800d930:	0611      	lsls	r1, r2, #24
 800d932:	d502      	bpl.n	800d93a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d934:	68da      	ldr	r2, [r3, #12]
 800d936:	0612      	lsls	r2, r2, #24
 800d938:	d46b      	bmi.n	800da12 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d93a:	691a      	ldr	r2, [r3, #16]
 800d93c:	05d0      	lsls	r0, r2, #23
 800d93e:	d502      	bpl.n	800d946 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d940:	68da      	ldr	r2, [r3, #12]
 800d942:	0611      	lsls	r1, r2, #24
 800d944:	d46d      	bmi.n	800da22 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d946:	691a      	ldr	r2, [r3, #16]
 800d948:	0652      	lsls	r2, r2, #25
 800d94a:	d502      	bpl.n	800d952 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d94c:	68da      	ldr	r2, [r3, #12]
 800d94e:	0650      	lsls	r0, r2, #25
 800d950:	d46f      	bmi.n	800da32 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d952:	691a      	ldr	r2, [r3, #16]
 800d954:	0691      	lsls	r1, r2, #26
 800d956:	d502      	bpl.n	800d95e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	0692      	lsls	r2, r2, #26
 800d95c:	d449      	bmi.n	800d9f2 <HAL_TIM_IRQHandler+0x106>
}
 800d95e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d960:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d964:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d968:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d96a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d96c:	69db      	ldr	r3, [r3, #28]
 800d96e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d972:	d16f      	bne.n	800da54 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d974:	f7ff ffb2 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d978:	4620      	mov	r0, r4
 800d97a:	f7ff ffb3 	bl	800d8e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d97e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d980:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d982:	7722      	strb	r2, [r4, #28]
 800d984:	e7cd      	b.n	800d922 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d986:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d98a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d98c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d98e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d990:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	079b      	lsls	r3, r3, #30
 800d996:	d15a      	bne.n	800da4e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d998:	f7ff ffa0 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d99c:	4620      	mov	r0, r4
 800d99e:	f7ff ffa1 	bl	800d8e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9a4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9a6:	7722      	strb	r2, [r4, #28]
 800d9a8:	e7b5      	b.n	800d916 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9aa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9ae:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d9b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9b2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d9bc:	d144      	bne.n	800da48 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9be:	f7ff ff8d 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f7ff ff8e 	bl	800d8e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9ca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9cc:	7722      	strb	r2, [r4, #28]
 800d9ce:	e79c      	b.n	800d90a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9d0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9d4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9d6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9d8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	0799      	lsls	r1, r3, #30
 800d9de:	d130      	bne.n	800da42 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9e0:	f7ff ff7c 	bl	800d8dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7ff ff7d 	bl	800d8e4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9ec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ee:	7722      	strb	r2, [r4, #28]
 800d9f0:	e785      	b.n	800d8fe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d9f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d9f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d9f8:	611a      	str	r2, [r3, #16]
}
 800d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d9fe:	f000 b887 	b.w	800db10 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da02:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800da06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800da0a:	f7f7 f947 	bl	8004c9c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	e78d      	b.n	800d92e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da12:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800da16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800da1a:	f000 f87b 	bl	800db14 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	e78b      	b.n	800d93a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da22:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800da26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800da2a:	f000 f875 	bl	800db18 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	e789      	b.n	800d946 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da32:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800da36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800da3a:	f7ff ff55 	bl	800d8e8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	e787      	b.n	800d952 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800da42:	f7ff ff4d 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800da46:	e7d0      	b.n	800d9ea <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800da48:	f7ff ff4a 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800da4c:	e7bc      	b.n	800d9c8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800da4e:	f7ff ff47 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800da52:	e7a6      	b.n	800d9a2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800da54:	f7ff ff44 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800da58:	e791      	b.n	800d97e <HAL_TIM_IRQHandler+0x92>
 800da5a:	bf00      	nop

0800da5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d04b      	beq.n	800dafc <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da64:	6803      	ldr	r3, [r0, #0]
 800da66:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800da68:	2002      	movs	r0, #2
{
 800da6a:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da6c:	4d24      	ldr	r5, [pc, #144]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800da6e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da72:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800da74:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800da76:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da78:	d029      	beq.n	800dace <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800da7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800da7e:	42ab      	cmp	r3, r5
 800da80:	d025      	beq.n	800dace <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da82:	4d20      	ldr	r5, [pc, #128]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800da84:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da88:	42ab      	cmp	r3, r5
 800da8a:	bf18      	it	ne
 800da8c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800da90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800da94:	bf0c      	ite	eq
 800da96:	f04f 0c01 	moveq.w	ip, #1
 800da9a:	f04f 0c00 	movne.w	ip, #0
 800da9e:	42ab      	cmp	r3, r5
 800daa0:	bf08      	it	eq
 800daa2:	f04c 0c01 	orreq.w	ip, ip, #1
 800daa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800daaa:	42ab      	cmp	r3, r5
 800daac:	bf08      	it	eq
 800daae:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dab2:	680d      	ldr	r5, [r1, #0]
 800dab4:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dab6:	4d14      	ldr	r5, [pc, #80]	; (800db08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800dab8:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daba:	42ab      	cmp	r3, r5
 800dabc:	bf14      	ite	ne
 800dabe:	4660      	movne	r0, ip
 800dac0:	f04c 0001 	orreq.w	r0, ip, #1
 800dac4:	b960      	cbnz	r0, 800dae0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800dac6:	4811      	ldr	r0, [pc, #68]	; (800db0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800dac8:	4283      	cmp	r3, r0
 800daca:	d009      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800dacc:	e00d      	b.n	800daea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dace:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dad0:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dad4:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dad6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800dad8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dadc:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800dade:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dae0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dae2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dae6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dae8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800daea:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800daec:	2101      	movs	r1, #1

  return HAL_OK;
 800daee:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800daf0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800daf4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800daf8:	bc30      	pop	{r4, r5}
 800dafa:	4770      	bx	lr
  __HAL_LOCK(htim);
 800dafc:	2002      	movs	r0, #2
}
 800dafe:	4770      	bx	lr
 800db00:	40010000 	.word	0x40010000
 800db04:	40000400 	.word	0x40000400
 800db08:	40001800 	.word	0x40001800
 800db0c:	40014000 	.word	0x40014000

0800db10 <HAL_TIMEx_CommutCallback>:
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop

0800db14 <HAL_TIMEx_BreakCallback>:
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <HAL_TIMEx_Break2Callback>:
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop

0800db1c <HAL_UART_TxCpltCallback>:
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop

0800db20 <HAL_UART_ErrorCallback>:
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop

0800db24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db24:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db26:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db2e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db32:	f7ff fff5 	bl	800db20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db36:	bd08      	pop	{r3, pc}

0800db38 <HAL_UARTEx_RxEventCallback>:
}
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop

0800db3c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db3c:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800db3e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db42:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db44:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 800db46:	ea12 0f0c 	tst.w	r2, ip
{
 800db4a:	b570      	push	{r4, r5, r6, lr}
 800db4c:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db4e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800db50:	f000 8122 	beq.w	800dd98 <HAL_UART_IRQHandler+0x25c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800db54:	48b1      	ldr	r0, [pc, #708]	; (800de1c <HAL_UART_IRQHandler+0x2e0>)
 800db56:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800db5a:	48b1      	ldr	r0, [pc, #708]	; (800de20 <HAL_UART_IRQHandler+0x2e4>)
 800db5c:	4008      	ands	r0, r1
 800db5e:	ea50 000c 	orrs.w	r0, r0, ip
 800db62:	f040 8089 	bne.w	800dc78 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db66:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800db68:	2801      	cmp	r0, #1
 800db6a:	d022      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db6c:	02d6      	lsls	r6, r2, #11
 800db6e:	d502      	bpl.n	800db76 <HAL_UART_IRQHandler+0x3a>
 800db70:	0268      	lsls	r0, r5, #9
 800db72:	f100 813a 	bmi.w	800ddea <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db76:	0616      	lsls	r6, r2, #24
 800db78:	d506      	bpl.n	800db88 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db7a:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db7e:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db82:	4328      	orrs	r0, r5
 800db84:	f040 8129 	bne.w	800ddda <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800db88:	0650      	lsls	r0, r2, #25
 800db8a:	d567      	bpl.n	800dc5c <HAL_UART_IRQHandler+0x120>
 800db8c:	064e      	lsls	r6, r1, #25
 800db8e:	d565      	bpl.n	800dc5c <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db90:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	e843 2100 	strex	r1, r2, [r3]
 800db9c:	2900      	cmp	r1, #0
 800db9e:	d1f7      	bne.n	800db90 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dba0:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dba2:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dba4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800dba6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800dbaa:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800dbac:	f7ff ffb6 	bl	800db1c <HAL_UART_TxCpltCallback>
}
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbb2:	06d6      	lsls	r6, r2, #27
 800dbb4:	d5da      	bpl.n	800db6c <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dbb6:	06c8      	lsls	r0, r1, #27
 800dbb8:	d5d8      	bpl.n	800db6c <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbba:	2210      	movs	r2, #16
 800dbbc:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbbe:	689a      	ldr	r2, [r3, #8]
 800dbc0:	0652      	lsls	r2, r2, #25
 800dbc2:	f140 813c 	bpl.w	800de3e <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dbc6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dbca:	6801      	ldr	r1, [r0, #0]
 800dbcc:	684a      	ldr	r2, [r1, #4]
 800dbce:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	d0ed      	beq.n	800dbb0 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dbd4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800dbd8:	4291      	cmp	r1, r2
 800dbda:	d9e9      	bls.n	800dbb0 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800dbdc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbe0:	69c2      	ldr	r2, [r0, #28]
 800dbe2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800dbe6:	d02f      	beq.n	800dc48 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf0:	e843 2100 	strex	r1, r2, [r3]
 800dbf4:	2900      	cmp	r1, #0
 800dbf6:	d1f7      	bne.n	800dbe8 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	f103 0208 	add.w	r2, r3, #8
 800dbfc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc00:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc04:	f103 0508 	add.w	r5, r3, #8
 800dc08:	e845 2100 	strex	r1, r2, [r5]
 800dc0c:	2900      	cmp	r1, #0
 800dc0e:	d1f3      	bne.n	800dbf8 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc10:	f103 0208 	add.w	r2, r3, #8
 800dc14:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1c:	f103 0508 	add.w	r5, r3, #8
 800dc20:	e845 2100 	strex	r1, r2, [r5]
 800dc24:	2900      	cmp	r1, #0
 800dc26:	d1f3      	bne.n	800dc10 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc2e:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc30:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc34:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc38:	e843 2100 	strex	r1, r2, [r3]
 800dc3c:	2900      	cmp	r1, #0
 800dc3e:	d1f7      	bne.n	800dc30 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc40:	f7fb ffc6 	bl	8009bd0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc44:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc48:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc4a:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc4c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc4e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800dc52:	1ac9      	subs	r1, r1, r3
 800dc54:	b289      	uxth	r1, r1
 800dc56:	f7ff ff6f 	bl	800db38 <HAL_UARTEx_RxEventCallback>
}
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc5c:	0215      	lsls	r5, r2, #8
 800dc5e:	d502      	bpl.n	800dc66 <HAL_UART_IRQHandler+0x12a>
 800dc60:	0048      	lsls	r0, r1, #1
 800dc62:	f100 80e7 	bmi.w	800de34 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc66:	01d3      	lsls	r3, r2, #7
 800dc68:	d5a2      	bpl.n	800dbb0 <HAL_UART_IRQHandler+0x74>
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	daa0      	bge.n	800dbb0 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc6e:	4620      	mov	r0, r4
}
 800dc70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc74:	f000 bd78 	b.w	800e768 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc78:	07d0      	lsls	r0, r2, #31
 800dc7a:	d509      	bpl.n	800dc90 <HAL_UART_IRQHandler+0x154>
 800dc7c:	05ce      	lsls	r6, r1, #23
 800dc7e:	d507      	bpl.n	800dc90 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc80:	2001      	movs	r0, #1
 800dc82:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc84:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc88:	f040 0001 	orr.w	r0, r0, #1
 800dc8c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc90:	0790      	lsls	r0, r2, #30
 800dc92:	f140 8093 	bpl.w	800ddbc <HAL_UART_IRQHandler+0x280>
 800dc96:	07ee      	lsls	r6, r5, #31
 800dc98:	d50a      	bpl.n	800dcb0 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc9a:	2002      	movs	r0, #2
 800dc9c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc9e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dca2:	f040 0004 	orr.w	r0, r0, #4
 800dca6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcaa:	0750      	lsls	r0, r2, #29
 800dcac:	f100 808c 	bmi.w	800ddc8 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dcb0:	0716      	lsls	r6, r2, #28
 800dcb2:	d50c      	bpl.n	800dcce <HAL_UART_IRQHandler+0x192>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcb4:	f001 0020 	and.w	r0, r1, #32
 800dcb8:	ea50 000c 	orrs.w	r0, r0, ip
 800dcbc:	d007      	beq.n	800dcce <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcbe:	2008      	movs	r0, #8
 800dcc0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dcc2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dcc6:	f040 0008 	orr.w	r0, r0, #8
 800dcca:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcce:	0510      	lsls	r0, r2, #20
 800dcd0:	d50a      	bpl.n	800dce8 <HAL_UART_IRQHandler+0x1ac>
 800dcd2:	014e      	lsls	r6, r1, #5
 800dcd4:	d508      	bpl.n	800dce8 <HAL_UART_IRQHandler+0x1ac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dcda:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dcdc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dce0:	f040 0020 	orr.w	r0, r0, #32
 800dce4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dce8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dcec:	2800      	cmp	r0, #0
 800dcee:	f43f af5f 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dcf2:	0690      	lsls	r0, r2, #26
 800dcf4:	d50a      	bpl.n	800dd0c <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dcf6:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dcfa:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800dcfe:	4329      	orrs	r1, r5
 800dd00:	d004      	beq.n	800dd0c <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800dd02:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800dd04:	b112      	cbz	r2, 800dd0c <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800dd06:	4620      	mov	r0, r4
 800dd08:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd0a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800dd0c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd10:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd12:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd16:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800dd1a:	ea52 0501 	orrs.w	r5, r2, r1
 800dd1e:	f000 80c4 	beq.w	800deaa <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd22:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	e843 2100 	strex	r1, r2, [r3]
 800dd2e:	2900      	cmp	r1, #0
 800dd30:	d1f7      	bne.n	800dd22 <HAL_UART_IRQHandler+0x1e6>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd32:	483c      	ldr	r0, [pc, #240]	; (800de24 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd34:	f103 0208 	add.w	r2, r3, #8
 800dd38:	e852 2f00 	ldrex	r2, [r2]
 800dd3c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3e:	f103 0508 	add.w	r5, r3, #8
 800dd42:	e845 2100 	strex	r1, r2, [r5]
 800dd46:	2900      	cmp	r1, #0
 800dd48:	d1f4      	bne.n	800dd34 <HAL_UART_IRQHandler+0x1f8>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd4a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dd4c:	2a01      	cmp	r2, #1
 800dd4e:	d054      	beq.n	800ddfa <HAL_UART_IRQHandler+0x2be>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd50:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800dd52:	2120      	movs	r1, #32
 800dd54:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd58:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd5a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800dd5c:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd5e:	064a      	lsls	r2, r1, #25
 800dd60:	d564      	bpl.n	800de2c <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd62:	f103 0208 	add.w	r2, r3, #8
 800dd66:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6e:	f103 0008 	add.w	r0, r3, #8
 800dd72:	e840 2100 	strex	r1, r2, [r0]
 800dd76:	2900      	cmp	r1, #0
 800dd78:	d1f3      	bne.n	800dd62 <HAL_UART_IRQHandler+0x226>
          if (huart->hdmarx != NULL)
 800dd7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d054      	beq.n	800de2c <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd82:	4b29      	ldr	r3, [pc, #164]	; (800de28 <HAL_UART_IRQHandler+0x2ec>)
 800dd84:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd86:	f7fc f89b 	bl	8009ec0 <HAL_DMA_Abort_IT>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	f43f af10 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd90:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dd94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dd96:	e00e      	b.n	800ddb6 <HAL_UART_IRQHandler+0x27a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd98:	0696      	lsls	r6, r2, #26
 800dd9a:	f57f aee4 	bpl.w	800db66 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd9e:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dda2:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 800dda6:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800ddaa:	f43f aedc 	beq.w	800db66 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800ddae:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f43f aefd 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
}
 800ddb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddba:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddbc:	0756      	lsls	r6, r2, #29
 800ddbe:	f57f af77 	bpl.w	800dcb0 <HAL_UART_IRQHandler+0x174>
 800ddc2:	07e8      	lsls	r0, r5, #31
 800ddc4:	f57f af74 	bpl.w	800dcb0 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddc8:	2004      	movs	r0, #4
 800ddca:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddcc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800ddd0:	f040 0002 	orr.w	r0, r0, #2
 800ddd4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 800ddd8:	e76a      	b.n	800dcb0 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800ddda:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f43f aee7 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800dde2:	4620      	mov	r0, r4
}
 800dde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dde8:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ddee:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddf0:	621a      	str	r2, [r3, #32]
}
 800ddf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800ddf6:	f000 bcb5 	b.w	800e764 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddfe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de02:	e843 2100 	strex	r1, r2, [r3]
 800de06:	2900      	cmp	r1, #0
 800de08:	d0a2      	beq.n	800dd50 <HAL_UART_IRQHandler+0x214>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0a:	e853 2f00 	ldrex	r2, [r3]
 800de0e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de12:	e843 2100 	strex	r1, r2, [r3]
 800de16:	2900      	cmp	r1, #0
 800de18:	d1ef      	bne.n	800ddfa <HAL_UART_IRQHandler+0x2be>
 800de1a:	e799      	b.n	800dd50 <HAL_UART_IRQHandler+0x214>
 800de1c:	10000001 	.word	0x10000001
 800de20:	04000120 	.word	0x04000120
 800de24:	effffffe 	.word	0xeffffffe
 800de28:	0800db25 	.word	0x0800db25
            HAL_UART_ErrorCallback(huart);
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff fe77 	bl	800db20 <HAL_UART_ErrorCallback>
}
 800de32:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de34:	4620      	mov	r0, r4
}
 800de36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de3a:	f000 bc97 	b.w	800e76c <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de3e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800de42:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800de46:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de4a:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800de4c:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de4e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800de50:	2a00      	cmp	r2, #0
 800de52:	f43f aead 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
 800de56:	2900      	cmp	r1, #0
 800de58:	f43f aeaa 	beq.w	800dbb0 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	e843 2000 	strex	r0, r2, [r3]
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1f7      	bne.n	800de5c <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de6c:	4d12      	ldr	r5, [pc, #72]	; (800deb8 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6e:	f103 0208 	add.w	r2, r3, #8
 800de72:	e852 2f00 	ldrex	r2, [r2]
 800de76:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	f103 0c08 	add.w	ip, r3, #8
 800de7c:	e84c 2000 	strex	r0, r2, [ip]
 800de80:	2800      	cmp	r0, #0
 800de82:	d1f4      	bne.n	800de6e <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800de84:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800de86:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800de88:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de92:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de96:	e843 2000 	strex	r0, r2, [r3]
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d1f7      	bne.n	800de8e <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de9e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dea0:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dea2:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dea4:	f7ff fe48 	bl	800db38 <HAL_UARTEx_RxEventCallback>
}
 800dea8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800deaa:	4620      	mov	r0, r4
 800deac:	f7ff fe38 	bl	800db20 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deb0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800deb4:	bd70      	pop	{r4, r5, r6, pc}
 800deb6:	bf00      	nop
 800deb8:	effffffe 	.word	0xeffffffe

0800debc <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800debc:	6901      	ldr	r1, [r0, #16]
 800debe:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800dec0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dec2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dec4:	49c0      	ldr	r1, [pc, #768]	; (800e1c8 <UART_SetConfig+0x30c>)
{
 800dec6:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dec8:	6945      	ldr	r5, [r0, #20]
{
 800deca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800decc:	69c0      	ldr	r0, [r0, #28]
{
 800dece:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ded0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ded2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ded4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ded6:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ded8:	4dbc      	ldr	r5, [pc, #752]	; (800e1cc <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800deda:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dedc:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dede:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dee0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dee8:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800deec:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800deee:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800def0:	f000 80e0 	beq.w	800e0b4 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800def4:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800def6:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800def8:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800defa:	4ab5      	ldr	r2, [pc, #724]	; (800e1d0 <UART_SetConfig+0x314>)
 800defc:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800defe:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df00:	4311      	orrs	r1, r2
 800df02:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	f022 020f 	bic.w	r2, r2, #15
 800df0a:	432a      	orrs	r2, r5
 800df0c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df0e:	4ab1      	ldr	r2, [pc, #708]	; (800e1d4 <UART_SetConfig+0x318>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d023      	beq.n	800df5c <UART_SetConfig+0xa0>
 800df14:	4ab0      	ldr	r2, [pc, #704]	; (800e1d8 <UART_SetConfig+0x31c>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d076      	beq.n	800e008 <UART_SetConfig+0x14c>
 800df1a:	4ab0      	ldr	r2, [pc, #704]	; (800e1dc <UART_SetConfig+0x320>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	f000 818f 	beq.w	800e240 <UART_SetConfig+0x384>
 800df22:	4aaf      	ldr	r2, [pc, #700]	; (800e1e0 <UART_SetConfig+0x324>)
 800df24:	4293      	cmp	r3, r2
 800df26:	f000 81e1 	beq.w	800e2ec <UART_SetConfig+0x430>
 800df2a:	4aae      	ldr	r2, [pc, #696]	; (800e1e4 <UART_SetConfig+0x328>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	f000 8121 	beq.w	800e174 <UART_SetConfig+0x2b8>
 800df32:	4aad      	ldr	r2, [pc, #692]	; (800e1e8 <UART_SetConfig+0x32c>)
 800df34:	4293      	cmp	r3, r2
 800df36:	f000 81e3 	beq.w	800e300 <UART_SetConfig+0x444>
 800df3a:	4aac      	ldr	r2, [pc, #688]	; (800e1ec <UART_SetConfig+0x330>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	f000 8234 	beq.w	800e3aa <UART_SetConfig+0x4ee>
 800df42:	4aab      	ldr	r2, [pc, #684]	; (800e1f0 <UART_SetConfig+0x334>)
 800df44:	4293      	cmp	r3, r2
 800df46:	f000 81e7 	beq.w	800e318 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800df4a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800df4c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800df4e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800df52:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800df54:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800df56:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800df58:	b007      	add	sp, #28
 800df5a:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df5c:	4ba5      	ldr	r3, [pc, #660]	; (800e1f4 <UART_SetConfig+0x338>)
 800df5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df64:	2b28      	cmp	r3, #40	; 0x28
 800df66:	d8f0      	bhi.n	800df4a <UART_SetConfig+0x8e>
 800df68:	4aa3      	ldr	r2, [pc, #652]	; (800e1f8 <UART_SetConfig+0x33c>)
 800df6a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df6c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df70:	d055      	beq.n	800e01e <UART_SetConfig+0x162>
    switch (clocksource)
 800df72:	2b20      	cmp	r3, #32
 800df74:	f200 814a 	bhi.w	800e20c <UART_SetConfig+0x350>
 800df78:	2b20      	cmp	r3, #32
 800df7a:	d8e6      	bhi.n	800df4a <UART_SetConfig+0x8e>
 800df7c:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <UART_SetConfig+0xc8>)
 800df7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df82:	bf00      	nop
 800df84:	0800e1c3 	.word	0x0800e1c3
 800df88:	0800e1bd 	.word	0x0800e1bd
 800df8c:	0800df4b 	.word	0x0800df4b
 800df90:	0800df4b 	.word	0x0800df4b
 800df94:	0800e1ad 	.word	0x0800e1ad
 800df98:	0800df4b 	.word	0x0800df4b
 800df9c:	0800df4b 	.word	0x0800df4b
 800dfa0:	0800df4b 	.word	0x0800df4b
 800dfa4:	0800e19f 	.word	0x0800e19f
 800dfa8:	0800df4b 	.word	0x0800df4b
 800dfac:	0800df4b 	.word	0x0800df4b
 800dfb0:	0800df4b 	.word	0x0800df4b
 800dfb4:	0800df4b 	.word	0x0800df4b
 800dfb8:	0800df4b 	.word	0x0800df4b
 800dfbc:	0800df4b 	.word	0x0800df4b
 800dfc0:	0800df4b 	.word	0x0800df4b
 800dfc4:	0800e189 	.word	0x0800e189
 800dfc8:	0800df4b 	.word	0x0800df4b
 800dfcc:	0800df4b 	.word	0x0800df4b
 800dfd0:	0800df4b 	.word	0x0800df4b
 800dfd4:	0800df4b 	.word	0x0800df4b
 800dfd8:	0800df4b 	.word	0x0800df4b
 800dfdc:	0800df4b 	.word	0x0800df4b
 800dfe0:	0800df4b 	.word	0x0800df4b
 800dfe4:	0800df4b 	.word	0x0800df4b
 800dfe8:	0800df4b 	.word	0x0800df4b
 800dfec:	0800df4b 	.word	0x0800df4b
 800dff0:	0800df4b 	.word	0x0800df4b
 800dff4:	0800df4b 	.word	0x0800df4b
 800dff8:	0800df4b 	.word	0x0800df4b
 800dffc:	0800df4b 	.word	0x0800df4b
 800e000:	0800df4b 	.word	0x0800df4b
 800e004:	0800e32d 	.word	0x0800e32d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e008:	4b7a      	ldr	r3, [pc, #488]	; (800e1f4 <UART_SetConfig+0x338>)
 800e00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e00c:	f003 0307 	and.w	r3, r3, #7
 800e010:	2b05      	cmp	r3, #5
 800e012:	d89a      	bhi.n	800df4a <UART_SetConfig+0x8e>
 800e014:	4a79      	ldr	r2, [pc, #484]	; (800e1fc <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e016:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e01a:	5cd3      	ldrb	r3, [r2, r3]
 800e01c:	d1a9      	bne.n	800df72 <UART_SetConfig+0xb6>
    switch (clocksource)
 800e01e:	2b20      	cmp	r3, #32
 800e020:	f200 8145 	bhi.w	800e2ae <UART_SetConfig+0x3f2>
 800e024:	2b20      	cmp	r3, #32
 800e026:	d890      	bhi.n	800df4a <UART_SetConfig+0x8e>
 800e028:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <UART_SetConfig+0x174>)
 800e02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02e:	bf00      	nop
 800e030:	0800e397 	.word	0x0800e397
 800e034:	0800e391 	.word	0x0800e391
 800e038:	0800df4b 	.word	0x0800df4b
 800e03c:	0800df4b 	.word	0x0800df4b
 800e040:	0800e39d 	.word	0x0800e39d
 800e044:	0800df4b 	.word	0x0800df4b
 800e048:	0800df4b 	.word	0x0800df4b
 800e04c:	0800df4b 	.word	0x0800df4b
 800e050:	0800e37f 	.word	0x0800e37f
 800e054:	0800df4b 	.word	0x0800df4b
 800e058:	0800df4b 	.word	0x0800df4b
 800e05c:	0800df4b 	.word	0x0800df4b
 800e060:	0800df4b 	.word	0x0800df4b
 800e064:	0800df4b 	.word	0x0800df4b
 800e068:	0800df4b 	.word	0x0800df4b
 800e06c:	0800df4b 	.word	0x0800df4b
 800e070:	0800e36b 	.word	0x0800e36b
 800e074:	0800df4b 	.word	0x0800df4b
 800e078:	0800df4b 	.word	0x0800df4b
 800e07c:	0800df4b 	.word	0x0800df4b
 800e080:	0800df4b 	.word	0x0800df4b
 800e084:	0800df4b 	.word	0x0800df4b
 800e088:	0800df4b 	.word	0x0800df4b
 800e08c:	0800df4b 	.word	0x0800df4b
 800e090:	0800df4b 	.word	0x0800df4b
 800e094:	0800df4b 	.word	0x0800df4b
 800e098:	0800df4b 	.word	0x0800df4b
 800e09c:	0800df4b 	.word	0x0800df4b
 800e0a0:	0800df4b 	.word	0x0800df4b
 800e0a4:	0800df4b 	.word	0x0800df4b
 800e0a8:	0800df4b 	.word	0x0800df4b
 800e0ac:	0800df4b 	.word	0x0800df4b
 800e0b0:	0800e3a7 	.word	0x0800e3a7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0b4:	6898      	ldr	r0, [r3, #8]
 800e0b6:	4a46      	ldr	r2, [pc, #280]	; (800e1d0 <UART_SetConfig+0x314>)
 800e0b8:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0ba:	484e      	ldr	r0, [pc, #312]	; (800e1f4 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e0c4:	f022 020f 	bic.w	r2, r2, #15
 800e0c8:	430a      	orrs	r2, r1
 800e0ca:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0cc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e0ce:	f003 0307 	and.w	r3, r3, #7
 800e0d2:	2b05      	cmp	r3, #5
 800e0d4:	f63f af39 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e0d8:	4a49      	ldr	r2, [pc, #292]	; (800e200 <UART_SetConfig+0x344>)
 800e0da:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800e0dc:	2b20      	cmp	r3, #32
 800e0de:	f200 80b9 	bhi.w	800e254 <UART_SetConfig+0x398>
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	f67f af31 	bls.w	800df4a <UART_SetConfig+0x8e>
 800e0e8:	3b02      	subs	r3, #2
 800e0ea:	2b1e      	cmp	r3, #30
 800e0ec:	f63f af2d 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e0f0:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <UART_SetConfig+0x23c>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e361 	.word	0x0800e361
 800e0fc:	0800df4b 	.word	0x0800df4b
 800e100:	0800e357 	.word	0x0800e357
 800e104:	0800df4b 	.word	0x0800df4b
 800e108:	0800df4b 	.word	0x0800df4b
 800e10c:	0800df4b 	.word	0x0800df4b
 800e110:	0800e345 	.word	0x0800e345
 800e114:	0800df4b 	.word	0x0800df4b
 800e118:	0800df4b 	.word	0x0800df4b
 800e11c:	0800df4b 	.word	0x0800df4b
 800e120:	0800df4b 	.word	0x0800df4b
 800e124:	0800df4b 	.word	0x0800df4b
 800e128:	0800df4b 	.word	0x0800df4b
 800e12c:	0800df4b 	.word	0x0800df4b
 800e130:	0800e331 	.word	0x0800e331
 800e134:	0800df4b 	.word	0x0800df4b
 800e138:	0800df4b 	.word	0x0800df4b
 800e13c:	0800df4b 	.word	0x0800df4b
 800e140:	0800df4b 	.word	0x0800df4b
 800e144:	0800df4b 	.word	0x0800df4b
 800e148:	0800df4b 	.word	0x0800df4b
 800e14c:	0800df4b 	.word	0x0800df4b
 800e150:	0800df4b 	.word	0x0800df4b
 800e154:	0800df4b 	.word	0x0800df4b
 800e158:	0800df4b 	.word	0x0800df4b
 800e15c:	0800df4b 	.word	0x0800df4b
 800e160:	0800df4b 	.word	0x0800df4b
 800e164:	0800df4b 	.word	0x0800df4b
 800e168:	0800df4b 	.word	0x0800df4b
 800e16c:	0800df4b 	.word	0x0800df4b
 800e170:	0800e367 	.word	0x0800e367
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e174:	4b1f      	ldr	r3, [pc, #124]	; (800e1f4 <UART_SetConfig+0x338>)
 800e176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e178:	f003 0307 	and.w	r3, r3, #7
 800e17c:	2b05      	cmp	r3, #5
 800e17e:	f63f aee4 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e182:	4a20      	ldr	r2, [pc, #128]	; (800e204 <UART_SetConfig+0x348>)
 800e184:	5cd3      	ldrb	r3, [r2, r3]
 800e186:	e6f1      	b.n	800df6c <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e188:	4b1a      	ldr	r3, [pc, #104]	; (800e1f4 <UART_SetConfig+0x338>)
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	0692      	lsls	r2, r2, #26
 800e18e:	f140 80c1 	bpl.w	800e314 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	481c      	ldr	r0, [pc, #112]	; (800e208 <UART_SetConfig+0x34c>)
 800e196:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e19a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e19c:	e03b      	b.n	800e216 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e19e:	a803      	add	r0, sp, #12
 800e1a0:	f7fe fb66 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1a4:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e1a6:	b938      	cbnz	r0, 800e1b8 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	e6cf      	b.n	800df4c <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ac:	4668      	mov	r0, sp
 800e1ae:	f7fe fab1 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1b2:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d0f7      	beq.n	800e1a8 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e1ba:	e02c      	b.n	800e216 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1bc:	f7fd fb5c 	bl	800b878 <HAL_RCC_GetPCLK2Freq>
        break;
 800e1c0:	e7f1      	b.n	800e1a6 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1c2:	f7fd fb11 	bl	800b7e8 <HAL_RCC_GetPCLK1Freq>
        break;
 800e1c6:	e7ee      	b.n	800e1a6 <UART_SetConfig+0x2ea>
 800e1c8:	cfff69f3 	.word	0xcfff69f3
 800e1cc:	58000c00 	.word	0x58000c00
 800e1d0:	11fff4ff 	.word	0x11fff4ff
 800e1d4:	40011000 	.word	0x40011000
 800e1d8:	40004400 	.word	0x40004400
 800e1dc:	40004800 	.word	0x40004800
 800e1e0:	40004c00 	.word	0x40004c00
 800e1e4:	40005000 	.word	0x40005000
 800e1e8:	40011400 	.word	0x40011400
 800e1ec:	40007800 	.word	0x40007800
 800e1f0:	40007c00 	.word	0x40007c00
 800e1f4:	58024400 	.word	0x58024400
 800e1f8:	080197d4 	.word	0x080197d4
 800e1fc:	08019800 	.word	0x08019800
 800e200:	08019808 	.word	0x08019808
 800e204:	08019800 	.word	0x08019800
 800e208:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800e20c:	2b40      	cmp	r3, #64	; 0x40
 800e20e:	f47f ae9c 	bne.w	800df4a <UART_SetConfig+0x8e>
 800e212:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e216:	4b6c      	ldr	r3, [pc, #432]	; (800e3c8 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e218:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e21c:	6862      	ldr	r2, [r4, #4]
 800e21e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e222:	fbb0 f3f3 	udiv	r3, r0, r3
 800e226:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e22a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e22e:	f1a3 0210 	sub.w	r2, r3, #16
 800e232:	428a      	cmp	r2, r1
 800e234:	f63f ae89 	bhi.w	800df4a <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e238:	6822      	ldr	r2, [r4, #0]
 800e23a:	2000      	movs	r0, #0
 800e23c:	60d3      	str	r3, [r2, #12]
 800e23e:	e685      	b.n	800df4c <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e240:	4b62      	ldr	r3, [pc, #392]	; (800e3cc <UART_SetConfig+0x510>)
 800e242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e244:	f003 0307 	and.w	r3, r3, #7
 800e248:	2b05      	cmp	r3, #5
 800e24a:	f63f ae7e 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e24e:	4a60      	ldr	r2, [pc, #384]	; (800e3d0 <UART_SetConfig+0x514>)
 800e250:	5cd3      	ldrb	r3, [r2, r3]
 800e252:	e68b      	b.n	800df6c <UART_SetConfig+0xb0>
    switch (clocksource)
 800e254:	2b40      	cmp	r3, #64	; 0x40
 800e256:	f47f ae78 	bne.w	800df4a <UART_SetConfig+0x8e>
 800e25a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e25e:	4b5a      	ldr	r3, [pc, #360]	; (800e3c8 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e260:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e262:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e266:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e26a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e26e:	4299      	cmp	r1, r3
 800e270:	f63f ae6b 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e274:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e278:	f63f ae67 	bhi.w	800df4a <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e27c:	2300      	movs	r3, #0
 800e27e:	4619      	mov	r1, r3
 800e280:	f7f2 f8e6 	bl	8000450 <__aeabi_uldivmod>
 800e284:	462a      	mov	r2, r5
 800e286:	0209      	lsls	r1, r1, #8
 800e288:	0203      	lsls	r3, r0, #8
 800e28a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e28e:	0868      	lsrs	r0, r5, #1
 800e290:	1818      	adds	r0, r3, r0
 800e292:	f04f 0300 	mov.w	r3, #0
 800e296:	f141 0100 	adc.w	r1, r1, #0
 800e29a:	f7f2 f8d9 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e29e:	4a4d      	ldr	r2, [pc, #308]	; (800e3d4 <UART_SetConfig+0x518>)
 800e2a0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2a4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2a6:	4291      	cmp	r1, r2
 800e2a8:	f63f ae4f 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e2ac:	e7c4      	b.n	800e238 <UART_SetConfig+0x37c>
    switch (clocksource)
 800e2ae:	2b40      	cmp	r3, #64	; 0x40
 800e2b0:	f47f ae4b 	bne.w	800df4a <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2b4:	4b44      	ldr	r3, [pc, #272]	; (800e3c8 <UART_SetConfig+0x50c>)
 800e2b6:	6862      	ldr	r2, [r4, #4]
 800e2b8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800e2bc:	0853      	lsrs	r3, r2, #1
 800e2be:	fbb0 f0f1 	udiv	r0, r0, r1
 800e2c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2c6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2ca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2ce:	f1a3 0210 	sub.w	r2, r3, #16
 800e2d2:	428a      	cmp	r2, r1
 800e2d4:	f63f ae39 	bhi.w	800df4a <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2d8:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e2e0:	6821      	ldr	r1, [r4, #0]
 800e2e2:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2e4:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	60cb      	str	r3, [r1, #12]
 800e2ea:	e62f      	b.n	800df4c <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2ec:	4b37      	ldr	r3, [pc, #220]	; (800e3cc <UART_SetConfig+0x510>)
 800e2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f0:	f003 0307 	and.w	r3, r3, #7
 800e2f4:	2b05      	cmp	r3, #5
 800e2f6:	f63f ae28 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e2fa:	4a37      	ldr	r2, [pc, #220]	; (800e3d8 <UART_SetConfig+0x51c>)
 800e2fc:	5cd3      	ldrb	r3, [r2, r3]
 800e2fe:	e635      	b.n	800df6c <UART_SetConfig+0xb0>
 800e300:	4b32      	ldr	r3, [pc, #200]	; (800e3cc <UART_SetConfig+0x510>)
 800e302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e308:	2b28      	cmp	r3, #40	; 0x28
 800e30a:	f63f ae1e 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e30e:	4a33      	ldr	r2, [pc, #204]	; (800e3dc <UART_SetConfig+0x520>)
 800e310:	5cd3      	ldrb	r3, [r2, r3]
 800e312:	e62b      	b.n	800df6c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e314:	4832      	ldr	r0, [pc, #200]	; (800e3e0 <UART_SetConfig+0x524>)
 800e316:	e77e      	b.n	800e216 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e318:	4b2c      	ldr	r3, [pc, #176]	; (800e3cc <UART_SetConfig+0x510>)
 800e31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31c:	f003 0307 	and.w	r3, r3, #7
 800e320:	2b05      	cmp	r3, #5
 800e322:	f63f ae12 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e326:	4a2f      	ldr	r2, [pc, #188]	; (800e3e4 <UART_SetConfig+0x528>)
 800e328:	5cd3      	ldrb	r3, [r2, r3]
 800e32a:	e61f      	b.n	800df6c <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800e32c:	482e      	ldr	r0, [pc, #184]	; (800e3e8 <UART_SetConfig+0x52c>)
 800e32e:	e772      	b.n	800e216 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e330:	4b26      	ldr	r3, [pc, #152]	; (800e3cc <UART_SetConfig+0x510>)
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	0690      	lsls	r0, r2, #26
 800e336:	d542      	bpl.n	800e3be <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4829      	ldr	r0, [pc, #164]	; (800e3e0 <UART_SetConfig+0x524>)
 800e33c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e340:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e342:	e78c      	b.n	800e25e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e344:	a803      	add	r0, sp, #12
 800e346:	f7fe fa93 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e34a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f43f af2b 	beq.w	800e1a8 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e352:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e354:	e783      	b.n	800e25e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e356:	4668      	mov	r0, sp
 800e358:	f7fe f9dc 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e35c:	9801      	ldr	r0, [sp, #4]
        break;
 800e35e:	e7f5      	b.n	800e34c <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e360:	f7fe f9c6 	bl	800c6f0 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800e364:	e7f2      	b.n	800e34c <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800e366:	4820      	ldr	r0, [pc, #128]	; (800e3e8 <UART_SetConfig+0x52c>)
 800e368:	e779      	b.n	800e25e <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e36a:	4b18      	ldr	r3, [pc, #96]	; (800e3cc <UART_SetConfig+0x510>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	0691      	lsls	r1, r2, #26
 800e370:	d527      	bpl.n	800e3c2 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	481a      	ldr	r0, [pc, #104]	; (800e3e0 <UART_SetConfig+0x524>)
 800e376:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e37a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e37c:	e79a      	b.n	800e2b4 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e37e:	a803      	add	r0, sp, #12
 800e380:	f7fe fa76 	bl	800c870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e384:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f af0e 	beq.w	800e1a8 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e38c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e38e:	e791      	b.n	800e2b4 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e390:	f7fd fa72 	bl	800b878 <HAL_RCC_GetPCLK2Freq>
        break;
 800e394:	e7f7      	b.n	800e386 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e396:	f7fd fa27 	bl	800b7e8 <HAL_RCC_GetPCLK1Freq>
        break;
 800e39a:	e7f4      	b.n	800e386 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e39c:	4668      	mov	r0, sp
 800e39e:	f7fe f9b9 	bl	800c714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3a2:	9801      	ldr	r0, [sp, #4]
        break;
 800e3a4:	e7ef      	b.n	800e386 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800e3a6:	4810      	ldr	r0, [pc, #64]	; (800e3e8 <UART_SetConfig+0x52c>)
 800e3a8:	e784      	b.n	800e2b4 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3aa:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <UART_SetConfig+0x510>)
 800e3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	2b05      	cmp	r3, #5
 800e3b4:	f63f adc9 	bhi.w	800df4a <UART_SetConfig+0x8e>
 800e3b8:	4a0c      	ldr	r2, [pc, #48]	; (800e3ec <UART_SetConfig+0x530>)
 800e3ba:	5cd3      	ldrb	r3, [r2, r3]
 800e3bc:	e5d6      	b.n	800df6c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e3be:	4808      	ldr	r0, [pc, #32]	; (800e3e0 <UART_SetConfig+0x524>)
 800e3c0:	e74d      	b.n	800e25e <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800e3c2:	4807      	ldr	r0, [pc, #28]	; (800e3e0 <UART_SetConfig+0x524>)
 800e3c4:	e776      	b.n	800e2b4 <UART_SetConfig+0x3f8>
 800e3c6:	bf00      	nop
 800e3c8:	08019810 	.word	0x08019810
 800e3cc:	58024400 	.word	0x58024400
 800e3d0:	08019800 	.word	0x08019800
 800e3d4:	000ffcff 	.word	0x000ffcff
 800e3d8:	08019800 	.word	0x08019800
 800e3dc:	080197d4 	.word	0x080197d4
 800e3e0:	03d09000 	.word	0x03d09000
 800e3e4:	08019800 	.word	0x08019800
 800e3e8:	003d0900 	.word	0x003d0900
 800e3ec:	08019800 	.word	0x08019800

0800e3f0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e3f2:	07da      	lsls	r2, r3, #31
{
 800e3f4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3f6:	d506      	bpl.n	800e406 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3f8:	6801      	ldr	r1, [r0, #0]
 800e3fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e3fc:	684a      	ldr	r2, [r1, #4]
 800e3fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e402:	4322      	orrs	r2, r4
 800e404:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e406:	079c      	lsls	r4, r3, #30
 800e408:	d506      	bpl.n	800e418 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e40a:	6801      	ldr	r1, [r0, #0]
 800e40c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e40e:	684a      	ldr	r2, [r1, #4]
 800e410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e414:	4322      	orrs	r2, r4
 800e416:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e418:	0759      	lsls	r1, r3, #29
 800e41a:	d506      	bpl.n	800e42a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e41c:	6801      	ldr	r1, [r0, #0]
 800e41e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e420:	684a      	ldr	r2, [r1, #4]
 800e422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e426:	4322      	orrs	r2, r4
 800e428:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e42a:	071a      	lsls	r2, r3, #28
 800e42c:	d506      	bpl.n	800e43c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e42e:	6801      	ldr	r1, [r0, #0]
 800e430:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e432:	684a      	ldr	r2, [r1, #4]
 800e434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e438:	4322      	orrs	r2, r4
 800e43a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e43c:	06dc      	lsls	r4, r3, #27
 800e43e:	d506      	bpl.n	800e44e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e440:	6801      	ldr	r1, [r0, #0]
 800e442:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e444:	688a      	ldr	r2, [r1, #8]
 800e446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e44a:	4322      	orrs	r2, r4
 800e44c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e44e:	0699      	lsls	r1, r3, #26
 800e450:	d506      	bpl.n	800e460 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e452:	6801      	ldr	r1, [r0, #0]
 800e454:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e456:	688a      	ldr	r2, [r1, #8]
 800e458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e45c:	4322      	orrs	r2, r4
 800e45e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e460:	065a      	lsls	r2, r3, #25
 800e462:	d50a      	bpl.n	800e47a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e464:	6801      	ldr	r1, [r0, #0]
 800e466:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e468:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e46a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e46e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e472:	ea42 0204 	orr.w	r2, r2, r4
 800e476:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e478:	d00b      	beq.n	800e492 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e47a:	061b      	lsls	r3, r3, #24
 800e47c:	d506      	bpl.n	800e48c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e47e:	6802      	ldr	r2, [r0, #0]
 800e480:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e482:	6853      	ldr	r3, [r2, #4]
 800e484:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e488:	430b      	orrs	r3, r1
 800e48a:	6053      	str	r3, [r2, #4]
}
 800e48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e490:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e492:	684a      	ldr	r2, [r1, #4]
 800e494:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e496:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e49a:	4322      	orrs	r2, r4
 800e49c:	604a      	str	r2, [r1, #4]
 800e49e:	e7ec      	b.n	800e47a <UART_AdvFeatureConfig+0x8a>

0800e4a0 <UART_CheckIdleState>:
{
 800e4a0:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a2:	2300      	movs	r3, #0
{
 800e4a4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800e4aa:	f7f9 f86d 	bl	8007588 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4ae:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e4b0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4b2:	6813      	ldr	r3, [r2, #0]
 800e4b4:	071b      	lsls	r3, r3, #28
 800e4b6:	d40f      	bmi.n	800e4d8 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4b8:	6813      	ldr	r3, [r2, #0]
 800e4ba:	0759      	lsls	r1, r3, #29
 800e4bc:	d431      	bmi.n	800e522 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4be:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e4c0:	2220      	movs	r2, #32
  return HAL_OK;
 800e4c2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e4c4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e4c8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4cc:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4ce:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800e4d6:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4d8:	69d3      	ldr	r3, [r2, #28]
 800e4da:	0298      	lsls	r0, r3, #10
 800e4dc:	d4ec      	bmi.n	800e4b8 <UART_CheckIdleState+0x18>
 800e4de:	e00c      	b.n	800e4fa <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	0749      	lsls	r1, r1, #29
 800e4e6:	d505      	bpl.n	800e4f4 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e4e8:	69d9      	ldr	r1, [r3, #28]
 800e4ea:	0708      	lsls	r0, r1, #28
 800e4ec:	d44b      	bmi.n	800e586 <UART_CheckIdleState+0xe6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4ee:	69d9      	ldr	r1, [r3, #28]
 800e4f0:	0509      	lsls	r1, r1, #20
 800e4f2:	d476      	bmi.n	800e5e2 <UART_CheckIdleState+0x142>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4f4:	69db      	ldr	r3, [r3, #28]
 800e4f6:	0298      	lsls	r0, r3, #10
 800e4f8:	d4de      	bmi.n	800e4b8 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4fa:	f7f9 f845 	bl	8007588 <HAL_GetTick>
 800e4fe:	1b43      	subs	r3, r0, r5
 800e500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	d3eb      	bcc.n	800e4e0 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e508:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e50c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	e843 2100 	strex	r1, r2, [r3]
 800e514:	2900      	cmp	r1, #0
 800e516:	d1f7      	bne.n	800e508 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800e518:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e51a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800e51c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800e520:	e7d6      	b.n	800e4d0 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e522:	69d3      	ldr	r3, [r2, #28]
 800e524:	025b      	lsls	r3, r3, #9
 800e526:	d4ca      	bmi.n	800e4be <UART_CheckIdleState+0x1e>
 800e528:	e00d      	b.n	800e546 <UART_CheckIdleState+0xa6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	0750      	lsls	r0, r2, #29
 800e52e:	d507      	bpl.n	800e540 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e530:	69da      	ldr	r2, [r3, #28]
 800e532:	0711      	lsls	r1, r2, #28
 800e534:	f100 8083 	bmi.w	800e63e <UART_CheckIdleState+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e538:	69da      	ldr	r2, [r3, #28]
 800e53a:	0512      	lsls	r2, r2, #20
 800e53c:	f100 80ad 	bmi.w	800e69a <UART_CheckIdleState+0x1fa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e540:	69db      	ldr	r3, [r3, #28]
 800e542:	025b      	lsls	r3, r3, #9
 800e544:	d4bb      	bmi.n	800e4be <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e546:	f7f9 f81f 	bl	8007588 <HAL_GetTick>
 800e54a:	1b43      	subs	r3, r0, r5
 800e54c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	d3ea      	bcc.n	800e52a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e554:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	e843 2100 	strex	r1, r2, [r3]
 800e560:	2900      	cmp	r1, #0
 800e562:	d1f7      	bne.n	800e554 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	f103 0208 	add.w	r2, r3, #8
 800e568:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e56c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e570:	f103 0008 	add.w	r0, r3, #8
 800e574:	e840 2100 	strex	r1, r2, [r0]
 800e578:	2900      	cmp	r1, #0
 800e57a:	d1f3      	bne.n	800e564 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 800e57c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e57e:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800e580:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800e584:	e7a4      	b.n	800e4d0 <UART_CheckIdleState+0x30>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e586:	2208      	movs	r2, #8
 800e588:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e58e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e592:	e843 2100 	strex	r1, r2, [r3]
 800e596:	2900      	cmp	r1, #0
 800e598:	d1f7      	bne.n	800e58a <UART_CheckIdleState+0xea>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e59a:	4857      	ldr	r0, [pc, #348]	; (800e6f8 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	f103 0208 	add.w	r2, r3, #8
 800e5a0:	e852 2f00 	ldrex	r2, [r2]
 800e5a4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a6:	f103 0508 	add.w	r5, r3, #8
 800e5aa:	e845 2100 	strex	r1, r2, [r5]
 800e5ae:	2900      	cmp	r1, #0
 800e5b0:	d1f4      	bne.n	800e59c <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e5b4:	2a01      	cmp	r2, #1
 800e5b6:	d00b      	beq.n	800e5d0 <UART_CheckIdleState+0x130>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5b8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e5ba:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5bc:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e5be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e5c2:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5c4:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e5c6:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5ca:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e5ce:	e79b      	b.n	800e508 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5d4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	e843 2100 	strex	r1, r2, [r3]
 800e5dc:	2900      	cmp	r1, #0
 800e5de:	d1f7      	bne.n	800e5d0 <UART_CheckIdleState+0x130>
 800e5e0:	e7ea      	b.n	800e5b8 <UART_CheckIdleState+0x118>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5e6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f0:	e843 2100 	strex	r1, r2, [r3]
 800e5f4:	2900      	cmp	r1, #0
 800e5f6:	d1f7      	bne.n	800e5e8 <UART_CheckIdleState+0x148>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5f8:	483f      	ldr	r0, [pc, #252]	; (800e6f8 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	f103 0208 	add.w	r2, r3, #8
 800e5fe:	e852 2f00 	ldrex	r2, [r2]
 800e602:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e604:	f103 0508 	add.w	r5, r3, #8
 800e608:	e845 2100 	strex	r1, r2, [r5]
 800e60c:	2900      	cmp	r1, #0
 800e60e:	d1f4      	bne.n	800e5fa <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e610:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e612:	2a01      	cmp	r2, #1
 800e614:	d00a      	beq.n	800e62c <UART_CheckIdleState+0x18c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e616:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e618:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e61a:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e61c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e620:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e624:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e626:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e62a:	e76d      	b.n	800e508 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e630:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e634:	e843 2100 	strex	r1, r2, [r3]
 800e638:	2900      	cmp	r1, #0
 800e63a:	d1f7      	bne.n	800e62c <UART_CheckIdleState+0x18c>
 800e63c:	e7eb      	b.n	800e616 <UART_CheckIdleState+0x176>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e63e:	2208      	movs	r2, #8
 800e640:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e642:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64a:	e843 2100 	strex	r1, r2, [r3]
 800e64e:	2900      	cmp	r1, #0
 800e650:	d1f7      	bne.n	800e642 <UART_CheckIdleState+0x1a2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e652:	4829      	ldr	r0, [pc, #164]	; (800e6f8 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e654:	f103 0208 	add.w	r2, r3, #8
 800e658:	e852 2f00 	ldrex	r2, [r2]
 800e65c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65e:	f103 0508 	add.w	r5, r3, #8
 800e662:	e845 2100 	strex	r1, r2, [r5]
 800e666:	2900      	cmp	r1, #0
 800e668:	d1f4      	bne.n	800e654 <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e66a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e66c:	2a01      	cmp	r2, #1
 800e66e:	d00b      	beq.n	800e688 <UART_CheckIdleState+0x1e8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e670:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e672:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e674:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e676:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e67a:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e67c:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e67e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e682:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e686:	e765      	b.n	800e554 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e690:	e843 2100 	strex	r1, r2, [r3]
 800e694:	2900      	cmp	r1, #0
 800e696:	d1f7      	bne.n	800e688 <UART_CheckIdleState+0x1e8>
 800e698:	e7ea      	b.n	800e670 <UART_CheckIdleState+0x1d0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e69a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e69e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a8:	e843 2100 	strex	r1, r2, [r3]
 800e6ac:	2900      	cmp	r1, #0
 800e6ae:	d1f7      	bne.n	800e6a0 <UART_CheckIdleState+0x200>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6b0:	4811      	ldr	r0, [pc, #68]	; (800e6f8 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b2:	f103 0208 	add.w	r2, r3, #8
 800e6b6:	e852 2f00 	ldrex	r2, [r2]
 800e6ba:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6bc:	f103 0508 	add.w	r5, r3, #8
 800e6c0:	e845 2100 	strex	r1, r2, [r5]
 800e6c4:	2900      	cmp	r1, #0
 800e6c6:	d1f4      	bne.n	800e6b2 <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e6ca:	2a01      	cmp	r2, #1
 800e6cc:	d00a      	beq.n	800e6e4 <UART_CheckIdleState+0x244>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ce:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e6d0:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e6d2:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e6d4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e6d8:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6dc:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6de:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e6e2:	e737      	b.n	800e554 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ec:	e843 2100 	strex	r1, r2, [r3]
 800e6f0:	2900      	cmp	r1, #0
 800e6f2:	d1f7      	bne.n	800e6e4 <UART_CheckIdleState+0x244>
 800e6f4:	e7eb      	b.n	800e6ce <UART_CheckIdleState+0x22e>
 800e6f6:	bf00      	nop
 800e6f8:	effffffe 	.word	0xeffffffe

0800e6fc <HAL_UART_Init>:
  if (huart == NULL)
 800e6fc:	b380      	cbz	r0, 800e760 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e6fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800e702:	b510      	push	{r4, lr}
 800e704:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e706:	b333      	cbz	r3, 800e756 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800e708:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e70a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e70c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e70e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800e712:	6813      	ldr	r3, [r2, #0]
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e71a:	f7ff fbcf 	bl	800debc <UART_SetConfig>
 800e71e:	2801      	cmp	r0, #1
 800e720:	d017      	beq.n	800e752 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e724:	b98b      	cbnz	r3, 800e74a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e726:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e728:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e730:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e732:	689a      	ldr	r2, [r3, #8]
 800e734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e738:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	f042 0201 	orr.w	r2, r2, #1
}
 800e740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e744:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e746:	f7ff beab 	b.w	800e4a0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800e74a:	4620      	mov	r0, r4
 800e74c:	f7ff fe50 	bl	800e3f0 <UART_AdvFeatureConfig>
 800e750:	e7e9      	b.n	800e726 <HAL_UART_Init+0x2a>
}
 800e752:	2001      	movs	r0, #1
 800e754:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e756:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800e75a:	f7f8 fc13 	bl	8006f84 <HAL_UART_MspInit>
 800e75e:	e7d3      	b.n	800e708 <HAL_UART_Init+0xc>
}
 800e760:	2001      	movs	r0, #1
 800e762:	4770      	bx	lr

0800e764 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop

0800e768 <HAL_UARTEx_RxFifoFullCallback>:
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop

0800e76c <HAL_UARTEx_TxFifoEmptyCallback>:
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop

0800e770 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e770:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e774:	2a01      	cmp	r2, #1
 800e776:	d017      	beq.n	800e7a8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e778:	6802      	ldr	r2, [r0, #0]
 800e77a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e77c:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e77e:	2100      	movs	r1, #0
{
 800e780:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800e782:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800e786:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e788:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e78a:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e78c:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800e790:	f024 0401 	bic.w	r4, r4, #1
 800e794:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e796:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e798:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800e79a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e79c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e7a0:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e7a4:	bc30      	pop	{r4, r5}
 800e7a6:	4770      	bx	lr
  __HAL_LOCK(huart);
 800e7a8:	2002      	movs	r0, #2
}
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7ac:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e7b0:	2a01      	cmp	r2, #1
 800e7b2:	d037      	beq.n	800e824 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7b4:	6802      	ldr	r2, [r0, #0]
 800e7b6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e7b8:	2024      	movs	r0, #36	; 0x24
{
 800e7ba:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e7bc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7c0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7c2:	6810      	ldr	r0, [r2, #0]
 800e7c4:	f020 0001 	bic.w	r0, r0, #1
 800e7c8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7ca:	6890      	ldr	r0, [r2, #8]
 800e7cc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800e7d0:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e7d2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e7d6:	b310      	cbz	r0, 800e81e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e7d8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e7da:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7dc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7e0:	4911      	ldr	r1, [pc, #68]	; (800e828 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e7e2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7e6:	4d11      	ldr	r5, [pc, #68]	; (800e82c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7e8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7ec:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7f0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7f4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7f6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7fa:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7fc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e800:	fbb1 f1f5 	udiv	r1, r1, r5
 800e804:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e808:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e80a:	2100      	movs	r1, #0
 800e80c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e810:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e812:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e814:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e818:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e81c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e81e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e820:	4608      	mov	r0, r1
 800e822:	e7ef      	b.n	800e804 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e824:	2002      	movs	r0, #2
}
 800e826:	4770      	bx	lr
 800e828:	08019830 	.word	0x08019830
 800e82c:	08019828 	.word	0x08019828

0800e830 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800e830:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e834:	2a01      	cmp	r2, #1
 800e836:	d037      	beq.n	800e8a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e838:	6802      	ldr	r2, [r0, #0]
 800e83a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e83c:	2024      	movs	r0, #36	; 0x24
{
 800e83e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e840:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e844:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e846:	6810      	ldr	r0, [r2, #0]
 800e848:	f020 0001 	bic.w	r0, r0, #1
 800e84c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e84e:	6890      	ldr	r0, [r2, #8]
 800e850:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800e854:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e856:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e858:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e85a:	b310      	cbz	r0, 800e8a2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e85c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e85e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e860:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e864:	4911      	ldr	r1, [pc, #68]	; (800e8ac <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e866:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e86a:	4d11      	ldr	r5, [pc, #68]	; (800e8b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e86c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e870:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e874:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e878:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e87a:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e87e:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e880:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e884:	fbb1 f1f5 	udiv	r1, r1, r5
 800e888:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e88c:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e88e:	2100      	movs	r1, #0
 800e890:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e894:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e896:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e898:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e89c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e8a0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e8a2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	e7ef      	b.n	800e888 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e8a8:	2002      	movs	r0, #2
}
 800e8aa:	4770      	bx	lr
 800e8ac:	08019830 	.word	0x08019830
 800e8b0:	08019828 	.word	0x08019828

0800e8b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8b4:	b084      	sub	sp, #16
 800e8b6:	4684      	mov	ip, r0
 800e8b8:	b500      	push	{lr}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	f10d 0e14 	add.w	lr, sp, #20
 800e8c0:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d13e      	bne.n	800e948 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8ca:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8cc:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e8d0:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800e8d6:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8d8:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8da:	68c2      	ldr	r2, [r0, #12]
 800e8dc:	ea03 0302 	and.w	r3, r3, r2
 800e8e0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e8e2:	68c3      	ldr	r3, [r0, #12]
 800e8e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e8e8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e8ea:	d07c      	beq.n	800e9e6 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800e8ec:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800e8ee:	4a40      	ldr	r2, [pc, #256]	; (800e9f0 <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	e003      	b.n	800e8fc <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8f4:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	db41      	blt.n	800e980 <USB_CoreInit+0xcc>
    count++;
 800e8fc:	9b00      	ldr	r3, [sp, #0]
 800e8fe:	3301      	adds	r3, #1
 800e900:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e902:	9b00      	ldr	r3, [sp, #0]
 800e904:	4293      	cmp	r3, r2
 800e906:	d9f5      	bls.n	800e8f4 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800e908:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800e90a:	9b07      	ldr	r3, [sp, #28]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d116      	bne.n	800e93e <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e910:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e914:	4b37      	ldr	r3, [pc, #220]	; (800e9f4 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e916:	b292      	uxth	r2, r2
 800e918:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e91c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e920:	4313      	orrs	r3, r2
 800e922:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e926:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e92a:	f043 0306 	orr.w	r3, r3, #6
 800e92e:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e932:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e936:	f043 0320 	orr.w	r3, r3, #32
 800e93a:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800e93e:	b003      	add	sp, #12
 800e940:	f85d eb04 	ldr.w	lr, [sp], #4
 800e944:	b004      	add	sp, #16
 800e946:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e948:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e94a:	2100      	movs	r1, #0
    if (count > 200000U)
 800e94c:	4a28      	ldr	r2, [pc, #160]	; (800e9f0 <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e952:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e954:	9101      	str	r1, [sp, #4]
 800e956:	e003      	b.n	800e960 <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e958:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	db2c      	blt.n	800e9ba <USB_CoreInit+0x106>
    count++;
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	3301      	adds	r3, #1
 800e964:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e966:	9b01      	ldr	r3, [sp, #4]
 800e968:	4293      	cmp	r3, r2
 800e96a:	d9f5      	bls.n	800e958 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800e96c:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800e96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e970:	b9e3      	cbnz	r3, 800e9ac <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e972:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e97a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e97e:	e7c4      	b.n	800e90a <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800e980:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <USB_CoreInit+0x13c>)
  count = 0U;
 800e984:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e986:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e98a:	f043 0301 	orr.w	r3, r3, #1
 800e98e:	f8cc 3010 	str.w	r3, [ip, #16]
 800e992:	e004      	b.n	800e99e <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e994:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e998:	f010 0001 	ands.w	r0, r0, #1
 800e99c:	d0b5      	beq.n	800e90a <USB_CoreInit+0x56>
    count++;
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e9a4:	9b00      	ldr	r3, [sp, #0]
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d9f4      	bls.n	800e994 <USB_CoreInit+0xe0>
 800e9aa:	e7ad      	b.n	800e908 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e9ac:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e9b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9b4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e9b8:	e7a7      	b.n	800e90a <USB_CoreInit+0x56>
  count = 0U;
 800e9ba:	2300      	movs	r3, #0
    if (count > 200000U)
 800e9bc:	4a0c      	ldr	r2, [pc, #48]	; (800e9f0 <USB_CoreInit+0x13c>)
  count = 0U;
 800e9be:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e9c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e9c4:	f043 0301 	orr.w	r3, r3, #1
 800e9c8:	f8cc 3010 	str.w	r3, [ip, #16]
 800e9cc:	e004      	b.n	800e9d8 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e9ce:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e9d2:	f010 0001 	ands.w	r0, r0, #1
 800e9d6:	d0ca      	beq.n	800e96e <USB_CoreInit+0xba>
    count++;
 800e9d8:	9b01      	ldr	r3, [sp, #4]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d9f4      	bls.n	800e9ce <USB_CoreInit+0x11a>
 800e9e4:	e7c2      	b.n	800e96c <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e9e6:	68c3      	ldr	r3, [r0, #12]
 800e9e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9ec:	60c3      	str	r3, [r0, #12]
 800e9ee:	e77d      	b.n	800e8ec <USB_CoreInit+0x38>
 800e9f0:	00030d40 	.word	0x00030d40
 800e9f4:	03ee0000 	.word	0x03ee0000

0800e9f8 <USB_DisableGlobalInt>:
{
 800e9f8:	4603      	mov	r3, r0
}
 800e9fa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9fc:	689a      	ldr	r2, [r3, #8]
 800e9fe:	f022 0201 	bic.w	r2, r2, #1
 800ea02:	609a      	str	r2, [r3, #8]
}
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop

0800ea08 <USB_SetCurrentMode>:
{
 800ea08:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea0a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ea0c:	2901      	cmp	r1, #1
{
 800ea0e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ea14:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ea16:	d017      	beq.n	800ea48 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800ea18:	b9a1      	cbnz	r1, 800ea44 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea1a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800ea1c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea22:	60c3      	str	r3, [r0, #12]
 800ea24:	e001      	b.n	800ea2a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ea26:	2c32      	cmp	r4, #50	; 0x32
 800ea28:	d00c      	beq.n	800ea44 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ea2a:	2001      	movs	r0, #1
      ms++;
 800ea2c:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ea2e:	f7f8 fdb1 	bl	8007594 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ea32:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ea34:	07db      	lsls	r3, r3, #31
 800ea36:	d4f6      	bmi.n	800ea26 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800ea38:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800ea3c:	fab0 f080 	clz	r0, r0
 800ea40:	0940      	lsrs	r0, r0, #5
}
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ea44:	2001      	movs	r0, #1
}
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea48:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800ea4a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea50:	60c3      	str	r3, [r0, #12]
 800ea52:	e001      	b.n	800ea58 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ea54:	2c32      	cmp	r4, #50	; 0x32
 800ea56:	d0f5      	beq.n	800ea44 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ea58:	2001      	movs	r0, #1
      ms++;
 800ea5a:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ea5c:	f7f8 fd9a 	bl	8007594 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ea60:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ea62:	07da      	lsls	r2, r3, #31
 800ea64:	d5f6      	bpl.n	800ea54 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800ea66:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800ea6a:	fab0 f080 	clz	r0, r0
 800ea6e:	0940      	lsrs	r0, r0, #5
 800ea70:	e7e7      	b.n	800ea42 <USB_SetCurrentMode+0x3a>
 800ea72:	bf00      	nop

0800ea74 <USB_DevInit>:
{
 800ea74:	b084      	sub	sp, #16
 800ea76:	4684      	mov	ip, r0
 800ea78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	ac0b      	add	r4, sp, #44	; 0x2c
 800ea80:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800ea84:	2300      	movs	r3, #0
 800ea86:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ea88:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800ea8c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800ea90:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800ea94:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800ea98:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800ea9c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800eaa0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800eaa4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800eaa8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800eaac:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800eab0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800eab4:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800eab8:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800eabc:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800eac0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800eac4:	2c00      	cmp	r4, #0
 800eac6:	f040 80b3 	bne.w	800ec30 <USB_DevInit+0x1bc>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eaca:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800eace:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 800ead2:	f043 0302 	orr.w	r3, r3, #2
 800ead6:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800eada:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eadc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eae0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eae2:	6803      	ldr	r3, [r0, #0]
 800eae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eae8:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eaea:	6803      	ldr	r3, [r0, #0]
 800eaec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaf0:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eaf8:	f8de 3000 	ldr.w	r3, [lr]
 800eafc:	f8ce 3000 	str.w	r3, [lr]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	f000 80c3 	beq.w	800ec8e <USB_DevInit+0x21a>
  USBx_DEVICE->DCFG |= speed;
 800eb08:	f8de 3000 	ldr.w	r3, [lr]
 800eb0c:	f043 0303 	orr.w	r3, r3, #3
 800eb10:	f8ce 3000 	str.w	r3, [lr]
  __IO uint32_t count = 0U;
 800eb14:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb16:	4a65      	ldr	r2, [pc, #404]	; (800ecac <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	e004      	b.n	800eb26 <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb1c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f2c0 809f 	blt.w	800ec64 <USB_DevInit+0x1f0>
    count++;
 800eb26:	9b00      	ldr	r3, [sp, #0]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800eb2c:	9b00      	ldr	r3, [sp, #0]
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d9f4      	bls.n	800eb1c <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800eb32:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800eb34:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb36:	4a5d      	ldr	r2, [pc, #372]	; (800ecac <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	e003      	b.n	800eb44 <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb3c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	db7c      	blt.n	800ec3e <USB_DevInit+0x1ca>
    count++;
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	3301      	adds	r3, #1
 800eb48:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eb4a:	9b01      	ldr	r3, [sp, #4]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d9f5      	bls.n	800eb3c <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 800eb50:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800eb52:	2200      	movs	r2, #0
 800eb54:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb58:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb5c:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb60:	b1d1      	cbz	r1, 800eb98 <USB_DevInit+0x124>
 800eb62:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb66:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb6a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb6e:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb70:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800eb74:	e006      	b.n	800eb84 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb76:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb78:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb7a:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb7c:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb7e:	3320      	adds	r3, #32
 800eb80:	4291      	cmp	r1, r2
 800eb82:	d039      	beq.n	800ebf8 <USB_DevInit+0x184>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb84:	681d      	ldr	r5, [r3, #0]
 800eb86:	2d00      	cmp	r5, #0
 800eb88:	daf5      	bge.n	800eb76 <USB_DevInit+0x102>
      if (i == 0U)
 800eb8a:	b112      	cbz	r2, 800eb92 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb8c:	f8c3 8000 	str.w	r8, [r3]
 800eb90:	e7f2      	b.n	800eb78 <USB_DevInit+0x104>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb92:	f8c3 9000 	str.w	r9, [r3]
 800eb96:	e7ef      	b.n	800eb78 <USB_DevInit+0x104>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb98:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 800eb9c:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eba2:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eba6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800ebaa:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ebae:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 800ebb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebb4:	b92b      	cbnz	r3, 800ebc2 <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ebb6:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ebba:	f043 0310 	orr.w	r3, r3, #16
 800ebbe:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ebc2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800ebc6:	4b3a      	ldr	r3, [pc, #232]	; (800ecb0 <USB_DevInit+0x23c>)
 800ebc8:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800ebca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ebcc:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 800ebd0:	b12a      	cbz	r2, 800ebde <USB_DevInit+0x16a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ebd2:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ebd6:	f043 0308 	orr.w	r3, r3, #8
 800ebda:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ebde:	2c01      	cmp	r4, #1
 800ebe0:	d105      	bne.n	800ebee <USB_DevInit+0x17a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ebe2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800ebe6:	4b33      	ldr	r3, [pc, #204]	; (800ecb4 <USB_DevInit+0x240>)
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	f8cc 3018 	str.w	r3, [ip, #24]
}
 800ebee:	b003      	add	sp, #12
 800ebf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebf4:	b004      	add	sp, #16
 800ebf6:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ebfe:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec02:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec06:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec08:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800ec0c:	e006      	b.n	800ec1c <USB_DevInit+0x1a8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec0e:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec10:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec12:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec14:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec16:	3320      	adds	r3, #32
 800ec18:	4291      	cmp	r1, r2
 800ec1a:	d0bd      	beq.n	800eb98 <USB_DevInit+0x124>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec1c:	681d      	ldr	r5, [r3, #0]
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	daf5      	bge.n	800ec0e <USB_DevInit+0x19a>
      if (i == 0U)
 800ec22:	b112      	cbz	r2, 800ec2a <USB_DevInit+0x1b6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec24:	f8c3 8000 	str.w	r8, [r3]
 800ec28:	e7f2      	b.n	800ec10 <USB_DevInit+0x19c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec2a:	f8c3 9000 	str.w	r9, [r3]
 800ec2e:	e7ef      	b.n	800ec10 <USB_DevInit+0x19c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec30:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec32:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec3a:	6383      	str	r3, [r0, #56]	; 0x38
 800ec3c:	e759      	b.n	800eaf2 <USB_DevInit+0x7e>
  count = 0U;
 800ec3e:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec40:	4a1a      	ldr	r2, [pc, #104]	; (800ecac <USB_DevInit+0x238>)
  count = 0U;
 800ec42:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec44:	2310      	movs	r3, #16
 800ec46:	f8cc 3010 	str.w	r3, [ip, #16]
 800ec4a:	e004      	b.n	800ec56 <USB_DevInit+0x1e2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec4c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ec50:	06db      	lsls	r3, r3, #27
 800ec52:	f57f af7e 	bpl.w	800eb52 <USB_DevInit+0xde>
    count++;
 800ec56:	9b01      	ldr	r3, [sp, #4]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ec5c:	9b01      	ldr	r3, [sp, #4]
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d9f4      	bls.n	800ec4c <USB_DevInit+0x1d8>
 800ec62:	e775      	b.n	800eb50 <USB_DevInit+0xdc>
  count = 0U;
 800ec64:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec66:	4a11      	ldr	r2, [pc, #68]	; (800ecac <USB_DevInit+0x238>)
  count = 0U;
 800ec68:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec6a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ec6e:	f8cc 3010 	str.w	r3, [ip, #16]
 800ec72:	e005      	b.n	800ec80 <USB_DevInit+0x20c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec74:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ec78:	f010 0020 	ands.w	r0, r0, #32
 800ec7c:	f43f af5a 	beq.w	800eb34 <USB_DevInit+0xc0>
    count++;
 800ec80:	9b00      	ldr	r3, [sp, #0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800ec86:	9b00      	ldr	r3, [sp, #0]
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d9f3      	bls.n	800ec74 <USB_DevInit+0x200>
 800ec8c:	e751      	b.n	800eb32 <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 800ec8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec90:	b923      	cbnz	r3, 800ec9c <USB_DevInit+0x228>
  USBx_DEVICE->DCFG |= speed;
 800ec92:	f8de 3000 	ldr.w	r3, [lr]
 800ec96:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800ec9a:	e73b      	b.n	800eb14 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800ec9c:	f8de 3000 	ldr.w	r3, [lr]
 800eca0:	f043 0301 	orr.w	r3, r3, #1
 800eca4:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800eca8:	e734      	b.n	800eb14 <USB_DevInit+0xa0>
 800ecaa:	bf00      	nop
 800ecac:	00030d40 	.word	0x00030d40
 800ecb0:	803c3800 	.word	0x803c3800
 800ecb4:	40000004 	.word	0x40000004

0800ecb8 <USB_DevDisconnect>:
{
 800ecb8:	4603      	mov	r3, r0
}
 800ecba:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ecbc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ecc0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ecc4:	f022 0203 	bic.w	r2, r2, #3
 800ecc8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eccc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ecd0:	f043 0302 	orr.w	r3, r3, #2
 800ecd4:	604b      	str	r3, [r1, #4]
}
 800ecd6:	4770      	bx	lr

0800ecd8 <audiod_tx_done_cb.constprop.0>:
// This function is called once a transmit of an audio packet was successfully completed. Here, we encode samples and place it in IN EP's buffer for next transmission.
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800ecd8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800ecda:	4c2a      	ldr	r4, [pc, #168]	; (800ed84 <audiod_tx_done_cb.constprop.0+0xac>)
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800ecdc:	b083      	sub	sp, #12
// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
  if (audio->p_desc)
 800ecde:	6863      	ldr	r3, [r4, #4]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800ece0:	f894 e00c 	ldrb.w	lr, [r4, #12]
  if (audio->p_desc)
 800ece4:	b303      	cbz	r3, 800ed28 <audiod_tx_done_cb.constprop.0+0x50>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ece6:	f8b4 c012 	ldrh.w	ip, [r4, #18]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ecea:	781a      	ldrb	r2, [r3, #0]
 800ecec:	f1ac 0c08 	sub.w	ip, ip, #8
 800ecf0:	449c      	add	ip, r3
 800ecf2:	4413      	add	r3, r2

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ecf4:	88da      	ldrh	r2, [r3, #6]
 800ecf6:	4413      	add	r3, r2

    uint8_t tmp = 0;
    while (p_desc < p_desc_end)
 800ecf8:	459c      	cmp	ip, r3
 800ecfa:	d915      	bls.n	800ed28 <audiod_tx_done_cb.constprop.0+0x50>
 800ecfc:	4605      	mov	r5, r0
    uint8_t tmp = 0;
 800ecfe:	2600      	movs	r6, #0
 800ed00:	e003      	b.n	800ed0a <audiod_tx_done_cb.constprop.0+0x32>
 800ed02:	781a      	ldrb	r2, [r3, #0]
 800ed04:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ed06:	459c      	cmp	ip, r3
 800ed08:	d90e      	bls.n	800ed28 <audiod_tx_done_cb.constprop.0+0x50>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ed0a:	785a      	ldrb	r2, [r3, #1]
 800ed0c:	2a04      	cmp	r2, #4
 800ed0e:	d1f8      	bne.n	800ed02 <audiod_tx_done_cb.constprop.0+0x2a>
 800ed10:	78d9      	ldrb	r1, [r3, #3]
          *idxItf = tmp;
          *pp_desc_int = p_desc;
          return true;
        }
        // Increase index, bytes read, and pointer
        tmp++;
 800ed12:	1c72      	adds	r2, r6, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ed14:	2900      	cmp	r1, #0
 800ed16:	d1f4      	bne.n	800ed02 <audiod_tx_done_cb.constprop.0+0x2a>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ed18:	7898      	ldrb	r0, [r3, #2]
 800ed1a:	4570      	cmp	r0, lr
 800ed1c:	d007      	beq.n	800ed2e <audiod_tx_done_cb.constprop.0+0x56>
        tmp++;
 800ed1e:	b2d6      	uxtb	r6, r2
 800ed20:	781a      	ldrb	r2, [r3, #0]
 800ed22:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800ed24:	459c      	cmp	ip, r3
 800ed26:	d8f0      	bhi.n	800ed0a <audiod_tx_done_cb.constprop.0+0x32>
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800ed28:	2000      	movs	r0, #0
}
 800ed2a:	b003      	add	sp, #12
 800ed2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 800ed2e:	69e3      	ldr	r3, [r4, #28]
 800ed30:	5d9b      	ldrb	r3, [r3, r6]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0f8      	beq.n	800ed28 <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800ed36:	4a14      	ldr	r2, [pc, #80]	; (800ed88 <audiod_tx_done_cb.constprop.0+0xb0>)
 800ed38:	b12a      	cbz	r2, 800ed46 <audiod_tx_done_cb.constprop.0+0x6e>
 800ed3a:	7a22      	ldrb	r2, [r4, #8]
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f7f5 fe99 	bl	8004a74 <tud_audio_tx_done_pre_load_cb>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d0f0      	beq.n	800ed28 <audiod_tx_done_cb.constprop.0+0x50>
  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 800ed46:	4811      	ldr	r0, [pc, #68]	; (800ed8c <audiod_tx_done_cb.constprop.0+0xb4>)
 800ed48:	f000 feb0 	bl	800faac <tu_fifo_count>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ed4c:	8967      	ldrh	r7, [r4, #10]
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 800ed4e:	4a0f      	ldr	r2, [pc, #60]	; (800ed8c <audiod_tx_done_cb.constprop.0+0xb4>)
 800ed50:	42b8      	cmp	r0, r7
 800ed52:	7a21      	ldrb	r1, [r4, #8]
 800ed54:	bf28      	it	cs
 800ed56:	4638      	movcs	r0, r7
 800ed58:	b287      	uxth	r7, r0
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	463b      	mov	r3, r7
 800ed5e:	f002 f8cf 	bl	8010f00 <usbd_edpt_xfer_fifo>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d0e0      	beq.n	800ed28 <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <audiod_tx_done_cb.constprop.0+0xb8>)
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d0de      	beq.n	800ed2a <audiod_tx_done_cb.constprop.0+0x52>
 800ed6c:	69e2      	ldr	r2, [r4, #28]
 800ed6e:	4639      	mov	r1, r7
 800ed70:	7a23      	ldrb	r3, [r4, #8]
 800ed72:	4628      	mov	r0, r5
 800ed74:	5d94      	ldrb	r4, [r2, r6]
 800ed76:	2200      	movs	r2, #0
 800ed78:	9400      	str	r4, [sp, #0]
 800ed7a:	f7f5 fe7d 	bl	8004a78 <tud_audio_tx_done_post_load_cb>
}
 800ed7e:	b003      	add	sp, #12
 800ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed82:	bf00      	nop
 800ed84:	2400c7e0 	.word	0x2400c7e0
 800ed88:	08004a75 	.word	0x08004a75
 800ed8c:	2400c80c 	.word	0x2400c80c
 800ed90:	08004a79 	.word	0x08004a79

0800ed94 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 800ed94:	b928      	cbnz	r0, 800eda2 <tud_audio_n_read+0xe>
 800ed96:	4804      	ldr	r0, [pc, #16]	; (800eda8 <tud_audio_n_read+0x14>)
 800ed98:	6843      	ldr	r3, [r0, #4]
 800ed9a:	b113      	cbz	r3, 800eda2 <tud_audio_n_read+0xe>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 800ed9c:	3020      	adds	r0, #32
 800ed9e:	f000 bf01 	b.w	800fba4 <tu_fifo_read_n>
}
 800eda2:	2000      	movs	r0, #0
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	2400c7e0 	.word	0x2400c7e0

0800edac <tud_audio_n_write>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 800edac:	b928      	cbnz	r0, 800edba <tud_audio_n_write+0xe>
 800edae:	4804      	ldr	r0, [pc, #16]	; (800edc0 <tud_audio_n_write+0x14>)
 800edb0:	6843      	ldr	r3, [r0, #4]
 800edb2:	b113      	cbz	r3, 800edba <tud_audio_n_write+0xe>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 800edb4:	302c      	adds	r0, #44	; 0x2c
 800edb6:	f001 b84b 	b.w	800fe50 <tu_fifo_write_n>
}
 800edba:	2000      	movs	r0, #0
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	2400c7e0 	.word	0x2400c7e0

0800edc4 <audiod_init>:
{
 800edc4:	b530      	push	{r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800edc6:	4c11      	ldr	r4, [pc, #68]	; (800ee0c <audiod_init+0x48>)
{
 800edc8:	b083      	sub	sp, #12
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800edca:	2238      	movs	r2, #56	; 0x38
 800edcc:	2100      	movs	r1, #0
 800edce:	4620      	mov	r0, r4
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800edd0:	2501      	movs	r5, #1
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800edd2:	f004 f904 	bl	8012fde <memset>
        audio->ctrl_buf = ctrl_buf_1;
 800edd6:	4a0e      	ldr	r2, [pc, #56]	; (800ee10 <audiod_init+0x4c>)
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800edd8:	2340      	movs	r3, #64	; 0x40
        audio->alt_setting = alt_setting_1;
 800edda:	490e      	ldr	r1, [pc, #56]	; (800ee14 <audiod_init+0x50>)
        audio->ctrl_buf = ctrl_buf_1;
 800eddc:	6162      	str	r2, [r4, #20]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800edde:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800ede2:	7623      	strb	r3, [r4, #24]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800ede4:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ede8:	462b      	mov	r3, r5
        audio->alt_setting = alt_setting_1;
 800edea:	61e1      	str	r1, [r4, #28]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800edec:	9500      	str	r5, [sp, #0]
 800edee:	490a      	ldr	r1, [pc, #40]	; (800ee18 <audiod_init+0x54>)
 800edf0:	f000 fe42 	bl	800fa78 <tu_fifo_config>
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 800edf4:	462b      	mov	r3, r5
 800edf6:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800edfa:	4908      	ldr	r1, [pc, #32]	; (800ee1c <audiod_init+0x58>)
 800edfc:	f104 0020 	add.w	r0, r4, #32
 800ee00:	9500      	str	r5, [sp, #0]
 800ee02:	f000 fe39 	bl	800fa78 <tu_fifo_config>
}
 800ee06:	b003      	add	sp, #12
 800ee08:	bd30      	pop	{r4, r5, pc}
 800ee0a:	bf00      	nop
 800ee0c:	2400c7e0 	.word	0x2400c7e0
 800ee10:	2400d134 	.word	0x2400d134
 800ee14:	2400c818 	.word	0x2400c818
 800ee18:	2400c81c 	.word	0x2400c81c
 800ee1c:	2400cb24 	.word	0x2400cb24

0800ee20 <audiod_reset>:
{
 800ee20:	b510      	push	{r4, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800ee22:	4c08      	ldr	r4, [pc, #32]	; (800ee44 <audiod_reset+0x24>)
 800ee24:	2300      	movs	r3, #0
    tu_fifo_clear(&audio->ep_in_ff);
 800ee26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800ee2a:	6123      	str	r3, [r4, #16]
 800ee2c:	e9c4 3300 	strd	r3, r3, [r4]
 800ee30:	e9c4 3302 	strd	r3, r3, [r4, #8]
    tu_fifo_clear(&audio->ep_in_ff);
 800ee34:	f001 f9a6 	bl	8010184 <tu_fifo_clear>
    tu_fifo_clear(&audio->ep_out_ff);
 800ee38:	f104 0020 	add.w	r0, r4, #32
}
 800ee3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&audio->ep_out_ff);
 800ee40:	f001 b9a0 	b.w	8010184 <tu_fifo_clear>
 800ee44:	2400c7e0 	.word	0x2400c7e0

0800ee48 <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800ee48:	794a      	ldrb	r2, [r1, #5]
 800ee4a:	2a01      	cmp	r2, #1
 800ee4c:	d102      	bne.n	800ee54 <audiod_open+0xc>
 800ee4e:	798a      	ldrb	r2, [r1, #6]
 800ee50:	2a01      	cmp	r2, #1
 800ee52:	d001      	beq.n	800ee58 <audiod_open+0x10>
 800ee54:	2000      	movs	r0, #0
}
 800ee56:	4770      	bx	lr
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 800ee58:	79ca      	ldrb	r2, [r1, #7]
 800ee5a:	2a20      	cmp	r2, #32
 800ee5c:	d1fa      	bne.n	800ee54 <audiod_open+0xc>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 800ee5e:	790a      	ldrb	r2, [r1, #4]
 800ee60:	2a01      	cmp	r2, #1
 800ee62:	d0f7      	beq.n	800ee54 <audiod_open+0xc>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 800ee64:	78ca      	ldrb	r2, [r1, #3]
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	d1f4      	bne.n	800ee54 <audiod_open+0xc>
    if (!_audiod_fct[i].p_desc)
 800ee6a:	4603      	mov	r3, r0
{
 800ee6c:	b410      	push	{r4}
    if (!_audiod_fct[i].p_desc)
 800ee6e:	4c0b      	ldr	r4, [pc, #44]	; (800ee9c <audiod_open+0x54>)
 800ee70:	6860      	ldr	r0, [r4, #4]
 800ee72:	b948      	cbnz	r0, 800ee88 <audiod_open+0x40>
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800ee74:	f44f 729c 	mov.w	r2, #312	; 0x138
  return drv_len;
 800ee78:	f44f 7098 	mov.w	r0, #304	; 0x130
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 800ee7c:	6061      	str	r1, [r4, #4]
      _audiod_fct[i].rhport = rhport;
 800ee7e:	7023      	strb	r3, [r4, #0]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800ee80:	8262      	strh	r2, [r4, #18]
}
 800ee82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee86:	4770      	bx	lr
  TU_ASSERT( i < CFG_TUD_AUDIO );
 800ee88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee8c:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 800ee90:	f010 0001 	ands.w	r0, r0, #1
 800ee94:	d0f5      	beq.n	800ee82 <audiod_open+0x3a>
 800ee96:	be00      	bkpt	0x0000
 800ee98:	4610      	mov	r0, r2
 800ee9a:	e7f2      	b.n	800ee82 <audiod_open+0x3a>
 800ee9c:	2400c7e0 	.word	0x2400c7e0

0800eea0 <audiod_control_xfer_cb>:
  if ( stage == CONTROL_STAGE_SETUP )
 800eea0:	2901      	cmp	r1, #1
{
 800eea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea6:	4605      	mov	r5, r0
 800eea8:	b083      	sub	sp, #12
 800eeaa:	4614      	mov	r4, r2
  if ( stage == CONTROL_STAGE_SETUP )
 800eeac:	d006      	beq.n	800eebc <audiod_control_xfer_cb+0x1c>
  else if ( stage == CONTROL_STAGE_DATA )
 800eeae:	2902      	cmp	r1, #2
 800eeb0:	d043      	beq.n	800ef3a <audiod_control_xfer_cb+0x9a>
  return true;
 800eeb2:	2301      	movs	r3, #1
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	b003      	add	sp, #12
 800eeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 800eebc:	7810      	ldrb	r0, [r2, #0]
 800eebe:	f010 0860 	ands.w	r8, r0, #96	; 0x60
 800eec2:	d12b      	bne.n	800ef1c <audiod_control_xfer_cb+0x7c>
    switch (p_request->bRequest)
 800eec4:	7853      	ldrb	r3, [r2, #1]
 800eec6:	2b0a      	cmp	r3, #10
 800eec8:	f000 8092 	beq.w	800eff0 <audiod_control_xfer_cb+0x150>
 800eecc:	2b0b      	cmp	r3, #11
 800eece:	d128      	bne.n	800ef22 <audiod_control_xfer_cb+0x82>
  if (audio->p_desc)
 800eed0:	4f9e      	ldr	r7, [pc, #632]	; (800f14c <audiod_control_xfer_cb+0x2ac>)
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800eed2:	f8b2 a004 	ldrh.w	sl, [r2, #4]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 800eed6:	f8b2 b002 	ldrh.w	fp, [r2, #2]
  if (audio->p_desc)
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	b342      	cbz	r2, 800ef30 <audiod_control_xfer_cb+0x90>
 800eede:	7816      	ldrb	r6, [r2, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800eee0:	8a7b      	ldrh	r3, [r7, #18]
 800eee2:	4416      	add	r6, r2
 800eee4:	3b08      	subs	r3, #8
 800eee6:	441a      	add	r2, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800eee8:	88f3      	ldrh	r3, [r6, #6]
 800eeea:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 800eeec:	42b2      	cmp	r2, r6
 800eeee:	d91f      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800eef0:	fa5f fa8a 	uxtb.w	sl, sl
 800eef4:	e003      	b.n	800eefe <audiod_control_xfer_cb+0x5e>
 800eef6:	7833      	ldrb	r3, [r6, #0]
 800eef8:	441e      	add	r6, r3
 800eefa:	42b2      	cmp	r2, r6
 800eefc:	d918      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800eefe:	7873      	ldrb	r3, [r6, #1]
 800ef00:	2b04      	cmp	r3, #4
 800ef02:	d1f8      	bne.n	800eef6 <audiod_control_xfer_cb+0x56>
 800ef04:	78f3      	ldrb	r3, [r6, #3]
        tmp++;
 800ef06:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1f3      	bne.n	800eef6 <audiod_control_xfer_cb+0x56>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ef0e:	78b0      	ldrb	r0, [r6, #2]
 800ef10:	4550      	cmp	r0, sl
 800ef12:	f000 808f 	beq.w	800f034 <audiod_control_xfer_cb+0x194>
        tmp++;
 800ef16:	fa5f f881 	uxtb.w	r8, r1
 800ef1a:	e7ec      	b.n	800eef6 <audiod_control_xfer_cb+0x56>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 800ef1c:	f1b8 0f20 	cmp.w	r8, #32
 800ef20:	d03a      	beq.n	800ef98 <audiod_control_xfer_cb+0xf8>
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800ef22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef26:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ef2a:	07d8      	lsls	r0, r3, #31
 800ef2c:	d500      	bpl.n	800ef30 <audiod_control_xfer_cb+0x90>
 800ef2e:	be00      	bkpt	0x0000
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	b003      	add	sp, #12
 800ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 800ef3a:	7813      	ldrb	r3, [r2, #0]
 800ef3c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800ef40:	2a20      	cmp	r2, #32
 800ef42:	d1b6      	bne.n	800eeb2 <audiod_control_xfer_cb+0x12>
    switch (p_request->bmRequestType_bit.recipient)
 800ef44:	f003 031f 	and.w	r3, r3, #31
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	f000 80d3 	beq.w	800f0f4 <audiod_control_xfer_cb+0x254>
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	d1e7      	bne.n	800ef22 <audiod_control_xfer_cb+0x82>
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ef52:	88a0      	ldrh	r0, [r4, #4]
        if (tud_audio_set_req_ep_cb)
 800ef54:	4b7e      	ldr	r3, [pc, #504]	; (800f150 <audiod_control_xfer_cb+0x2b0>)
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ef56:	b2c0      	uxtb	r0, r0
        if (tud_audio_set_req_ep_cb)
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0e9      	beq.n	800ef30 <audiod_control_xfer_cb+0x90>
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 800ef5c:	4f7b      	ldr	r7, [pc, #492]	; (800f14c <audiod_control_xfer_cb+0x2ac>)
 800ef5e:	6879      	ldr	r1, [r7, #4]
 800ef60:	2900      	cmp	r1, #0
 800ef62:	d0e5      	beq.n	800ef30 <audiod_control_xfer_cb+0x90>
 800ef64:	780b      	ldrb	r3, [r1, #0]
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800ef66:	8a7a      	ldrh	r2, [r7, #18]
 800ef68:	440b      	add	r3, r1
 800ef6a:	4411      	add	r1, r2

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ef6c:	88da      	ldrh	r2, [r3, #6]
 800ef6e:	4413      	add	r3, r2

      while (p_desc < p_desc_end)
 800ef70:	4299      	cmp	r1, r3
 800ef72:	d804      	bhi.n	800ef7e <audiod_control_xfer_cb+0xde>
 800ef74:	e7dc      	b.n	800ef30 <audiod_control_xfer_cb+0x90>
 800ef76:	781a      	ldrb	r2, [r3, #0]
 800ef78:	4413      	add	r3, r2
 800ef7a:	4299      	cmp	r1, r3
 800ef7c:	d9d8      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800ef7e:	785a      	ldrb	r2, [r3, #1]
 800ef80:	2a05      	cmp	r2, #5
 800ef82:	d1f8      	bne.n	800ef76 <audiod_control_xfer_cb+0xd6>
 800ef84:	789a      	ldrb	r2, [r3, #2]
 800ef86:	4282      	cmp	r2, r0
 800ef88:	d1f5      	bne.n	800ef76 <audiod_control_xfer_cb+0xd6>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f3af 8000 	nop.w
 800ef94:	4603      	mov	r3, r0
 800ef96:	e78d      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800ef98:	8893      	ldrh	r3, [r2, #4]
    switch (p_request->bmRequestType_bit.recipient)
 800ef9a:	f000 021f 	and.w	r2, r0, #31
 800ef9e:	2a01      	cmp	r2, #1
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800efa0:	b2de      	uxtb	r6, r3
    switch (p_request->bmRequestType_bit.recipient)
 800efa2:	f000 80ec 	beq.w	800f17e <audiod_control_xfer_cb+0x2de>
 800efa6:	2a02      	cmp	r2, #2
 800efa8:	d1bb      	bne.n	800ef22 <audiod_control_xfer_cb+0x82>
    if (_audiod_fct[i].p_desc)
 800efaa:	4f68      	ldr	r7, [pc, #416]	; (800f14c <audiod_control_xfer_cb+0x2ac>)
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	2900      	cmp	r1, #0
 800efb0:	d0be      	beq.n	800ef30 <audiod_control_xfer_cb+0x90>
 800efb2:	780b      	ldrb	r3, [r1, #0]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800efb4:	8a7a      	ldrh	r2, [r7, #18]
 800efb6:	440b      	add	r3, r1
 800efb8:	4411      	add	r1, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800efba:	88da      	ldrh	r2, [r3, #6]
 800efbc:	4413      	add	r3, r2
      while (p_desc < p_desc_end)
 800efbe:	4299      	cmp	r1, r3
 800efc0:	d804      	bhi.n	800efcc <audiod_control_xfer_cb+0x12c>
 800efc2:	e7b5      	b.n	800ef30 <audiod_control_xfer_cb+0x90>
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	4413      	add	r3, r2
 800efc8:	4299      	cmp	r1, r3
 800efca:	d9b1      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800efcc:	785a      	ldrb	r2, [r3, #1]
 800efce:	2a05      	cmp	r2, #5
 800efd0:	d1f8      	bne.n	800efc4 <audiod_control_xfer_cb+0x124>
 800efd2:	789a      	ldrb	r2, [r3, #2]
 800efd4:	42b2      	cmp	r2, r6
 800efd6:	d1f5      	bne.n	800efc4 <audiod_control_xfer_cb+0x124>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800efd8:	0603      	lsls	r3, r0, #24
 800efda:	f100 816f 	bmi.w	800f2bc <audiod_control_xfer_cb+0x41c>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 800efde:	7e3b      	ldrb	r3, [r7, #24]
 800efe0:	4621      	mov	r1, r4
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	4628      	mov	r0, r5
}
 800efe6:	b003      	add	sp, #12
 800efe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800efec:	f002 b82a 	b.w	8011044 <tud_control_xfer>
  if (audio->p_desc)
 800eff0:	4f56      	ldr	r7, [pc, #344]	; (800f14c <audiod_control_xfer_cb+0x2ac>)
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800eff2:	8896      	ldrh	r6, [r2, #4]
  if (audio->p_desc)
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	2900      	cmp	r1, #0
 800eff8:	d09a      	beq.n	800ef30 <audiod_control_xfer_cb+0x90>
 800effa:	780b      	ldrb	r3, [r1, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800effc:	8a7a      	ldrh	r2, [r7, #18]
 800effe:	440b      	add	r3, r1
 800f000:	3a08      	subs	r2, #8
 800f002:	4411      	add	r1, r2
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800f004:	88da      	ldrh	r2, [r3, #6]
 800f006:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800f008:	4299      	cmp	r1, r3
 800f00a:	d991      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
 800f00c:	b2f6      	uxtb	r6, r6
 800f00e:	e003      	b.n	800f018 <audiod_control_xfer_cb+0x178>
 800f010:	781a      	ldrb	r2, [r3, #0]
 800f012:	4413      	add	r3, r2
 800f014:	4299      	cmp	r1, r3
 800f016:	d98b      	bls.n	800ef30 <audiod_control_xfer_cb+0x90>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f018:	785a      	ldrb	r2, [r3, #1]
 800f01a:	2a04      	cmp	r2, #4
 800f01c:	d1f8      	bne.n	800f010 <audiod_control_xfer_cb+0x170>
 800f01e:	78da      	ldrb	r2, [r3, #3]
        tmp++;
 800f020:	f108 0001 	add.w	r0, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f024:	2a00      	cmp	r2, #0
 800f026:	d1f3      	bne.n	800f010 <audiod_control_xfer_cb+0x170>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800f028:	789a      	ldrb	r2, [r3, #2]
 800f02a:	42b2      	cmp	r2, r6
 800f02c:	d05c      	beq.n	800f0e8 <audiod_control_xfer_cb+0x248>
        tmp++;
 800f02e:	fa5f f880 	uxtb.w	r8, r0
 800f032:	e7ed      	b.n	800f010 <audiod_control_xfer_cb+0x170>
  if (audio->ep_in_as_intf_num == itf)
 800f034:	4699      	mov	r9, r3
 800f036:	7b3b      	ldrb	r3, [r7, #12]
 800f038:	4553      	cmp	r3, sl
 800f03a:	f000 8115 	beq.w	800f268 <audiod_control_xfer_cb+0x3c8>
  if (audio->ep_out_as_intf_num == itf)
 800f03e:	7c3b      	ldrb	r3, [r7, #16]
 800f040:	4553      	cmp	r3, sl
 800f042:	f000 8126 	beq.w	800f292 <audiod_control_xfer_cb+0x3f2>
  audio->alt_setting[idxItf] = alt;
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	fa5f fb8b 	uxtb.w	fp, fp
 800f04c:	f803 b008 	strb.w	fp, [r3, r8]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f050:	8a7b      	ldrh	r3, [r7, #18]
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	3b08      	subs	r3, #8
 800f056:	eb02 0803 	add.w	r8, r2, r3
  while (p_desc < p_desc_end)
 800f05a:	45b0      	cmp	r8, r6
 800f05c:	d805      	bhi.n	800f06a <audiod_control_xfer_cb+0x1ca>
 800f05e:	e088      	b.n	800f172 <audiod_control_xfer_cb+0x2d2>
 800f060:	7833      	ldrb	r3, [r6, #0]
 800f062:	441e      	add	r6, r3
 800f064:	45b0      	cmp	r8, r6
 800f066:	f240 8084 	bls.w	800f172 <audiod_control_xfer_cb+0x2d2>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800f06a:	7873      	ldrb	r3, [r6, #1]
 800f06c:	2b04      	cmp	r3, #4
 800f06e:	d1f7      	bne.n	800f060 <audiod_control_xfer_cb+0x1c0>
 800f070:	78b3      	ldrb	r3, [r6, #2]
 800f072:	4553      	cmp	r3, sl
 800f074:	d1f4      	bne.n	800f060 <audiod_control_xfer_cb+0x1c0>
 800f076:	78f3      	ldrb	r3, [r6, #3]
 800f078:	455b      	cmp	r3, fp
 800f07a:	d1f1      	bne.n	800f060 <audiod_control_xfer_cb+0x1c0>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800f07c:	f896 b004 	ldrb.w	fp, [r6, #4]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800f080:	f1bb 0f00 	cmp.w	fp, #0
 800f084:	d06c      	beq.n	800f160 <audiod_control_xfer_cb+0x2c0>
 800f086:	45b0      	cmp	r8, r6
 800f088:	f67f af52 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f08c:	7833      	ldrb	r3, [r6, #0]
 800f08e:	45cb      	cmp	fp, r9
 800f090:	441e      	add	r6, r3
 800f092:	d963      	bls.n	800f15c <audiod_control_xfer_cb+0x2bc>
 800f094:	45b0      	cmp	r8, r6
 800f096:	f67f af4b 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 800f09a:	7873      	ldrb	r3, [r6, #1]
 800f09c:	2b05      	cmp	r3, #5
 800f09e:	d1f5      	bne.n	800f08c <audiod_control_xfer_cb+0x1ec>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800f0a0:	4631      	mov	r1, r6
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f001 feb4 	bl	8010e10 <usbd_edpt_open>
 800f0a8:	4603      	mov	r3, r0
          usbd_edpt_clear_stall(rhport, ep_addr);
 800f0aa:	4628      	mov	r0, r5
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f000 8122 	beq.w	800f2f6 <audiod_control_xfer_cb+0x456>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800f0b2:	78b1      	ldrb	r1, [r6, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 800f0b4:	9101      	str	r1, [sp, #4]
 800f0b6:	f001 ff5b 	bl	8010f70 <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800f0ba:	9901      	ldr	r1, [sp, #4]
 800f0bc:	09cb      	lsrs	r3, r1, #7
 800f0be:	f040 8107 	bne.w	800f2d0 <audiod_control_xfer_cb+0x430>
            audio->ep_out = ep_addr;
 800f0c2:	7379      	strb	r1, [r7, #13]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f0c4:	4628      	mov	r0, r5
            audio->ep_out_as_intf_num = itf;
 800f0c6:	f887 a010 	strb.w	sl, [r7, #16]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800f0ca:	88b3      	ldrh	r3, [r6, #4]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f0cc:	4a21      	ldr	r2, [pc, #132]	; (800f154 <audiod_control_xfer_cb+0x2b4>)
 800f0ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 800f0d2:	81fb      	strh	r3, [r7, #14]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f0d4:	f001 ff14 	bl	8010f00 <usbd_edpt_xfer_fifo>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	f43f af29 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
          foundEPs += 1;
 800f0de:	f109 0901 	add.w	r9, r9, #1
 800f0e2:	fa5f f989 	uxtb.w	r9, r9
 800f0e6:	e7d1      	b.n	800f08c <audiod_control_xfer_cb+0x1ec>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800f0e8:	69fa      	ldr	r2, [r7, #28]
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	4442      	add	r2, r8
 800f0f2:	e778      	b.n	800efe6 <audiod_control_xfer_cb+0x146>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f0f4:	88a3      	ldrh	r3, [r4, #4]
 800f0f6:	b2de      	uxtb	r6, r3
        if (entityID != 0)
 800f0f8:	0a1b      	lsrs	r3, r3, #8
 800f0fa:	f000 8092 	beq.w	800f222 <audiod_control_xfer_cb+0x382>
          if (tud_audio_set_req_entity_cb)
 800f0fe:	4a16      	ldr	r2, [pc, #88]	; (800f158 <audiod_control_xfer_cb+0x2b8>)
 800f100:	2a00      	cmp	r2, #0
 800f102:	f43f af15 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f106:	4f11      	ldr	r7, [pc, #68]	; (800f14c <audiod_control_xfer_cb+0x2ac>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f108:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	2900      	cmp	r1, #0
 800f10e:	f43f af0f 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f112:	788b      	ldrb	r3, [r1, #2]
 800f114:	42b3      	cmp	r3, r6
 800f116:	f47f af0b 	bne.w	800ef30 <audiod_control_xfer_cb+0x90>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f11a:	780b      	ldrb	r3, [r1, #0]
 800f11c:	18c8      	adds	r0, r1, r3
 800f11e:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f120:	88c1      	ldrh	r1, [r0, #6]
 800f122:	4403      	add	r3, r0
 800f124:	4408      	add	r0, r1
      while (p_desc < p_desc_end)
 800f126:	4298      	cmp	r0, r3
 800f128:	d805      	bhi.n	800f136 <audiod_control_xfer_cb+0x296>
 800f12a:	e701      	b.n	800ef30 <audiod_control_xfer_cb+0x90>
 800f12c:	7819      	ldrb	r1, [r3, #0]
 800f12e:	440b      	add	r3, r1
 800f130:	4298      	cmp	r0, r3
 800f132:	f67f aefd 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f136:	78d9      	ldrb	r1, [r3, #3]
 800f138:	4291      	cmp	r1, r2
 800f13a:	d1f7      	bne.n	800f12c <audiod_control_xfer_cb+0x28c>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	4621      	mov	r1, r4
 800f140:	4628      	mov	r0, r5
 800f142:	f7f5 fc3b 	bl	80049bc <tud_audio_set_req_entity_cb>
 800f146:	4603      	mov	r3, r0
 800f148:	e6b4      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
 800f14a:	bf00      	nop
 800f14c:	2400c7e0 	.word	0x2400c7e0
 800f150:	00000000 	.word	0x00000000
 800f154:	2400c800 	.word	0x2400c800
 800f158:	080049bd 	.word	0x080049bd
      TU_VERIFY(foundEPs == nEps);
 800f15c:	f47f aee8 	bne.w	800ef30 <audiod_control_xfer_cb+0x90>
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 800f160:	4b69      	ldr	r3, [pc, #420]	; (800f308 <audiod_control_xfer_cb+0x468>)
 800f162:	b133      	cbz	r3, 800f172 <audiod_control_xfer_cb+0x2d2>
 800f164:	4621      	mov	r1, r4
 800f166:	4628      	mov	r0, r5
 800f168:	f7f5 fc60 	bl	8004a2c <tud_audio_set_itf_cb>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	f43f aedf 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
  tud_control_status(rhport, p_request);
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f001 ff4d 	bl	8011014 <tud_control_status>
  return true;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e69a      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
        if (entityID != 0)
 800f17e:	0a1b      	lsrs	r3, r3, #8
 800f180:	d027      	beq.n	800f1d2 <audiod_control_xfer_cb+0x332>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f182:	4f62      	ldr	r7, [pc, #392]	; (800f30c <audiod_control_xfer_cb+0x46c>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f184:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	2900      	cmp	r1, #0
 800f18a:	f43f aed1 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f18e:	788b      	ldrb	r3, [r1, #2]
 800f190:	42b3      	cmp	r3, r6
 800f192:	f47f aecd 	bne.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f196:	780b      	ldrb	r3, [r1, #0]
 800f198:	18ce      	adds	r6, r1, r3
 800f19a:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f19c:	88f1      	ldrh	r1, [r6, #6]
 800f19e:	4433      	add	r3, r6
 800f1a0:	440e      	add	r6, r1
      while (p_desc < p_desc_end)
 800f1a2:	429e      	cmp	r6, r3
 800f1a4:	d805      	bhi.n	800f1b2 <audiod_control_xfer_cb+0x312>
 800f1a6:	e6c3      	b.n	800ef30 <audiod_control_xfer_cb+0x90>
 800f1a8:	7819      	ldrb	r1, [r3, #0]
 800f1aa:	440b      	add	r3, r1
 800f1ac:	429e      	cmp	r6, r3
 800f1ae:	f67f aebf 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f1b2:	78d9      	ldrb	r1, [r3, #3]
 800f1b4:	4291      	cmp	r1, r2
 800f1b6:	d1f7      	bne.n	800f1a8 <audiod_control_xfer_cb+0x308>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800f1b8:	0601      	lsls	r1, r0, #24
 800f1ba:	f57f af10 	bpl.w	800efde <audiod_control_xfer_cb+0x13e>
            if (tud_audio_get_req_entity_cb)
 800f1be:	4b54      	ldr	r3, [pc, #336]	; (800f310 <audiod_control_xfer_cb+0x470>)
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f43f aeb5 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f7f5 fb65 	bl	8004898 <tud_audio_get_req_entity_cb>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	e670      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
    if (_audiod_fct[i].p_desc)
 800f1d2:	4f4e      	ldr	r7, [pc, #312]	; (800f30c <audiod_control_xfer_cb+0x46c>)
 800f1d4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800f1d8:	f1bc 0f00 	cmp.w	ip, #0
 800f1dc:	f43f aea8 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f1e0:	8a79      	ldrh	r1, [r7, #18]
 800f1e2:	3908      	subs	r1, #8
 800f1e4:	4461      	add	r1, ip
      while (p_desc < p_desc_end)
 800f1e6:	458c      	cmp	ip, r1
 800f1e8:	f4bf aea2 	bcs.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f1ec:	4663      	mov	r3, ip
 800f1ee:	e004      	b.n	800f1fa <audiod_control_xfer_cb+0x35a>
 800f1f0:	781a      	ldrb	r2, [r3, #0]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	4299      	cmp	r1, r3
 800f1f6:	f67f ae9b 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f1fa:	785a      	ldrb	r2, [r3, #1]
 800f1fc:	2a04      	cmp	r2, #4
 800f1fe:	d1f7      	bne.n	800f1f0 <audiod_control_xfer_cb+0x350>
 800f200:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800f204:	42b2      	cmp	r2, r6
 800f206:	d1f3      	bne.n	800f1f0 <audiod_control_xfer_cb+0x350>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800f208:	0602      	lsls	r2, r0, #24
 800f20a:	f57f aee8 	bpl.w	800efde <audiod_control_xfer_cb+0x13e>
            if (tud_audio_get_req_itf_cb)
 800f20e:	4b41      	ldr	r3, [pc, #260]	; (800f314 <audiod_control_xfer_cb+0x474>)
 800f210:	2b00      	cmp	r3, #0
 800f212:	f43f ae8d 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 800f216:	4621      	mov	r1, r4
 800f218:	4628      	mov	r0, r5
 800f21a:	f3af 8000 	nop.w
 800f21e:	4603      	mov	r3, r0
 800f220:	e648      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
          if (tud_audio_set_req_itf_cb)
 800f222:	4b3d      	ldr	r3, [pc, #244]	; (800f318 <audiod_control_xfer_cb+0x478>)
 800f224:	2b00      	cmp	r3, #0
 800f226:	f43f ae83 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
    if (_audiod_fct[i].p_desc)
 800f22a:	4f38      	ldr	r7, [pc, #224]	; (800f30c <audiod_control_xfer_cb+0x46c>)
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	2800      	cmp	r0, #0
 800f230:	f43f ae7e 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f234:	8a79      	ldrh	r1, [r7, #18]
 800f236:	3908      	subs	r1, #8
 800f238:	4401      	add	r1, r0
      while (p_desc < p_desc_end)
 800f23a:	4288      	cmp	r0, r1
 800f23c:	f4bf ae78 	bcs.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f240:	4603      	mov	r3, r0
 800f242:	e004      	b.n	800f24e <audiod_control_xfer_cb+0x3ae>
 800f244:	781a      	ldrb	r2, [r3, #0]
 800f246:	4413      	add	r3, r2
 800f248:	4299      	cmp	r1, r3
 800f24a:	f67f ae71 	bls.w	800ef30 <audiod_control_xfer_cb+0x90>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f24e:	785a      	ldrb	r2, [r3, #1]
 800f250:	2a04      	cmp	r2, #4
 800f252:	d1f7      	bne.n	800f244 <audiod_control_xfer_cb+0x3a4>
 800f254:	7882      	ldrb	r2, [r0, #2]
 800f256:	42b2      	cmp	r2, r6
 800f258:	d1f4      	bne.n	800f244 <audiod_control_xfer_cb+0x3a4>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	4621      	mov	r1, r4
 800f25e:	4628      	mov	r0, r5
 800f260:	f3af 8000 	nop.w
 800f264:	4603      	mov	r3, r0
 800f266:	e625      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
    usbd_edpt_close(rhport, audio->ep_in);
 800f268:	7a39      	ldrb	r1, [r7, #8]
 800f26a:	4628      	mov	r0, r5
    audio->ep_in_as_intf_num = 0;
 800f26c:	f887 900c 	strb.w	r9, [r7, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 800f270:	f001 fe9e 	bl	8010fb0 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_in_ff);
 800f274:	4829      	ldr	r0, [pc, #164]	; (800f31c <audiod_control_xfer_cb+0x47c>)
 800f276:	f000 ff85 	bl	8010184 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800f27a:	4b29      	ldr	r3, [pc, #164]	; (800f320 <audiod_control_xfer_cb+0x480>)
 800f27c:	b133      	cbz	r3, 800f28c <audiod_control_xfer_cb+0x3ec>
 800f27e:	4621      	mov	r1, r4
 800f280:	4628      	mov	r0, r5
 800f282:	f7f5 fbd1 	bl	8004a28 <tud_audio_set_itf_close_EP_cb>
 800f286:	2800      	cmp	r0, #0
 800f288:	f43f ae52 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
    audio->ep_in = 0;                           // Necessary?
 800f28c:	2300      	movs	r3, #0
 800f28e:	723b      	strb	r3, [r7, #8]
 800f290:	e6d5      	b.n	800f03e <audiod_control_xfer_cb+0x19e>
    audio->ep_out_as_intf_num = 0;
 800f292:	2300      	movs	r3, #0
    usbd_edpt_close(rhport, audio->ep_out);
 800f294:	7b79      	ldrb	r1, [r7, #13]
 800f296:	4628      	mov	r0, r5
    audio->ep_out_as_intf_num = 0;
 800f298:	743b      	strb	r3, [r7, #16]
    usbd_edpt_close(rhport, audio->ep_out);
 800f29a:	f001 fe89 	bl	8010fb0 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_out_ff);
 800f29e:	4821      	ldr	r0, [pc, #132]	; (800f324 <audiod_control_xfer_cb+0x484>)
 800f2a0:	f000 ff70 	bl	8010184 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800f2a4:	4b1e      	ldr	r3, [pc, #120]	; (800f320 <audiod_control_xfer_cb+0x480>)
 800f2a6:	b133      	cbz	r3, 800f2b6 <audiod_control_xfer_cb+0x416>
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f7f5 fbbc 	bl	8004a28 <tud_audio_set_itf_close_EP_cb>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	f43f ae3d 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
    audio->ep_out = 0;                          // Necessary?
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	737b      	strb	r3, [r7, #13]
 800f2ba:	e6c4      	b.n	800f046 <audiod_control_xfer_cb+0x1a6>
          if (tud_audio_get_req_ep_cb)
 800f2bc:	4b1a      	ldr	r3, [pc, #104]	; (800f328 <audiod_control_xfer_cb+0x488>)
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f43f ae36 	beq.w	800ef30 <audiod_control_xfer_cb+0x90>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f3af 8000 	nop.w
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	e5f1      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800f2d0:	78f3      	ldrb	r3, [r6, #3]
 800f2d2:	f013 0f30 	tst.w	r3, #48	; 0x30
 800f2d6:	f47f af02 	bne.w	800f0de <audiod_control_xfer_cb+0x23e>
            audio->ep_in = ep_addr;
 800f2da:	7239      	strb	r1, [r7, #8]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800f2dc:	4628      	mov	r0, r5
            audio->ep_in_as_intf_num = itf;
 800f2de:	f887 a00c 	strb.w	sl, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800f2e2:	88b3      	ldrh	r3, [r6, #4]
 800f2e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 800f2e8:	817b      	strh	r3, [r7, #10]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800f2ea:	f7ff fcf5 	bl	800ecd8 <audiod_tx_done_cb.constprop.0>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f47f aef5 	bne.w	800f0de <audiod_control_xfer_cb+0x23e>
 800f2f4:	e61c      	b.n	800ef30 <audiod_control_xfer_cb+0x90>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800f2f6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800f2fa:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 800f2fe:	07d4      	lsls	r4, r2, #31
 800f300:	f57f ae16 	bpl.w	800ef30 <audiod_control_xfer_cb+0x90>
 800f304:	be00      	bkpt	0x0000
 800f306:	e5d5      	b.n	800eeb4 <audiod_control_xfer_cb+0x14>
 800f308:	08004a2d 	.word	0x08004a2d
 800f30c:	2400c7e0 	.word	0x2400c7e0
 800f310:	08004899 	.word	0x08004899
	...
 800f31c:	2400c80c 	.word	0x2400c80c
 800f320:	08004a29 	.word	0x08004a29
 800f324:	2400c800 	.word	0x2400c800
 800f328:	00000000 	.word	0x00000000

0800f32c <audiod_xfer_cb>:
{
 800f32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f330:	4c42      	ldr	r4, [pc, #264]	; (800f43c <audiod_xfer_cb+0x110>)
{
 800f332:	b083      	sub	sp, #12
 800f334:	4606      	mov	r6, r0
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f336:	7a22      	ldrb	r2, [r4, #8]
 800f338:	428a      	cmp	r2, r1
 800f33a:	d062      	beq.n	800f402 <audiod_xfer_cb+0xd6>
    if (audio->ep_out == ep_addr)
 800f33c:	7b62      	ldrb	r2, [r4, #13]
 800f33e:	428a      	cmp	r2, r1
 800f340:	d13a      	bne.n	800f3b8 <audiod_xfer_cb+0x8c>
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 800f342:	b29d      	uxth	r5, r3
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f344:	4b3e      	ldr	r3, [pc, #248]	; (800f440 <audiod_xfer_cb+0x114>)
 800f346:	f04f 0201 	mov.w	r2, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d06b      	beq.n	800f426 <audiod_xfer_cb+0xfa>
 800f34e:	b2d2      	uxtb	r2, r2
 800f350:	b93a      	cbnz	r2, 800f362 <audiod_xfer_cb+0x36>
 800f352:	483c      	ldr	r0, [pc, #240]	; (800f444 <audiod_xfer_cb+0x118>)
 800f354:	f04f 0201 	mov.w	r2, #1
 800f358:	2800      	cmp	r0, #0
 800f35a:	d05a      	beq.n	800f412 <audiod_xfer_cb+0xe6>
 800f35c:	b2d2      	uxtb	r2, r2
 800f35e:	2a00      	cmp	r2, #0
 800f360:	d059      	beq.n	800f416 <audiod_xfer_cb+0xea>
  if (audio->p_desc)
 800f362:	6860      	ldr	r0, [r4, #4]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 800f364:	f894 e010 	ldrb.w	lr, [r4, #16]
  if (audio->p_desc)
 800f368:	b330      	cbz	r0, 800f3b8 <audiod_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f36a:	f890 c000 	ldrb.w	ip, [r0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f36e:	8a62      	ldrh	r2, [r4, #18]
 800f370:	4484      	add	ip, r0
 800f372:	3a08      	subs	r2, #8
 800f374:	4410      	add	r0, r2
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800f376:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800f37a:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800f37c:	4560      	cmp	r0, ip
 800f37e:	d91b      	bls.n	800f3b8 <audiod_xfer_cb+0x8c>
    uint8_t tmp = 0;
 800f380:	2700      	movs	r7, #0
 800f382:	e004      	b.n	800f38e <audiod_xfer_cb+0x62>
 800f384:	f89c 2000 	ldrb.w	r2, [ip]
 800f388:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800f38a:	4560      	cmp	r0, ip
 800f38c:	d914      	bls.n	800f3b8 <audiod_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f38e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800f392:	2a04      	cmp	r2, #4
 800f394:	d1f6      	bne.n	800f384 <audiod_xfer_cb+0x58>
 800f396:	f89c 2003 	ldrb.w	r2, [ip, #3]
        tmp++;
 800f39a:	f107 0801 	add.w	r8, r7, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800f39e:	2a00      	cmp	r2, #0
 800f3a0:	d1f0      	bne.n	800f384 <audiod_xfer_cb+0x58>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800f3a2:	f89c 9002 	ldrb.w	r9, [ip, #2]
 800f3a6:	45f1      	cmp	r9, lr
 800f3a8:	d00a      	beq.n	800f3c0 <audiod_xfer_cb+0x94>
 800f3aa:	f89c 2000 	ldrb.w	r2, [ip]
        tmp++;
 800f3ae:	fa5f f788 	uxtb.w	r7, r8
 800f3b2:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800f3b4:	4560      	cmp	r0, ip
 800f3b6:	d8ea      	bhi.n	800f38e <audiod_xfer_cb+0x62>
  return false;
 800f3b8:	2000      	movs	r0, #0
}
 800f3ba:	b003      	add	sp, #12
 800f3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (tud_audio_rx_done_pre_read_cb)
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d032      	beq.n	800f42a <audiod_xfer_cb+0xfe>
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	69e1      	ldr	r1, [r4, #28]
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	5dc9      	ldrb	r1, [r1, r7]
 800f3cc:	9100      	str	r1, [sp, #0]
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	f7f5 fb40 	bl	8004a54 <tud_audio_rx_done_pre_read_cb>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d0ef      	beq.n	800f3b8 <audiod_xfer_cb+0x8c>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f3d8:	89e3      	ldrh	r3, [r4, #14]
 800f3da:	4630      	mov	r0, r6
 800f3dc:	4a1a      	ldr	r2, [pc, #104]	; (800f448 <audiod_xfer_cb+0x11c>)
 800f3de:	7b61      	ldrb	r1, [r4, #13]
 800f3e0:	f001 fd8e 	bl	8010f00 <usbd_edpt_xfer_fifo>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d0e7      	beq.n	800f3b8 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_post_read_cb)
 800f3e8:	4b16      	ldr	r3, [pc, #88]	; (800f444 <audiod_xfer_cb+0x118>)
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0e5      	beq.n	800f3ba <audiod_xfer_cb+0x8e>
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800f3ee:	69e2      	ldr	r2, [r4, #28]
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	7b63      	ldrb	r3, [r4, #13]
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	5dd4      	ldrb	r4, [r2, r7]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	9400      	str	r4, [sp, #0]
 800f3fc:	f3af 8000 	nop.w
 800f400:	e7db      	b.n	800f3ba <audiod_xfer_cb+0x8e>
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800f402:	69e2      	ldr	r2, [r4, #28]
 800f404:	2a00      	cmp	r2, #0
 800f406:	d099      	beq.n	800f33c <audiod_xfer_cb+0x10>
}
 800f408:	b003      	add	sp, #12
 800f40a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800f40e:	f7ff bc63 	b.w	800ecd8 <audiod_tx_done_cb.constprop.0>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f412:	4602      	mov	r2, r0
 800f414:	e7a2      	b.n	800f35c <audiod_xfer_cb+0x30>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f416:	89e3      	ldrh	r3, [r4, #14]
 800f418:	4630      	mov	r0, r6
 800f41a:	4a0b      	ldr	r2, [pc, #44]	; (800f448 <audiod_xfer_cb+0x11c>)
 800f41c:	f001 fd70 	bl	8010f00 <usbd_edpt_xfer_fifo>
 800f420:	2800      	cmp	r0, #0
 800f422:	d1ca      	bne.n	800f3ba <audiod_xfer_cb+0x8e>
 800f424:	e7c8      	b.n	800f3b8 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800f426:	461a      	mov	r2, r3
 800f428:	e791      	b.n	800f34e <audiod_xfer_cb+0x22>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800f42a:	89e3      	ldrh	r3, [r4, #14]
 800f42c:	4630      	mov	r0, r6
 800f42e:	4a06      	ldr	r2, [pc, #24]	; (800f448 <audiod_xfer_cb+0x11c>)
 800f430:	f001 fd66 	bl	8010f00 <usbd_edpt_xfer_fifo>
 800f434:	2800      	cmp	r0, #0
 800f436:	d1da      	bne.n	800f3ee <audiod_xfer_cb+0xc2>
 800f438:	e7be      	b.n	800f3b8 <audiod_xfer_cb+0x8c>
 800f43a:	bf00      	nop
 800f43c:	2400c7e0 	.word	0x2400c7e0
 800f440:	08004a55 	.word	0x08004a55
 800f444:	00000000 	.word	0x00000000
 800f448:	2400c800 	.word	0x2400c800

0800f44c <audiod_sof_isr>:
}
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop

0800f450 <tud_audio_buffer_and_schedule_control_xfer>:
{
 800f450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f454:	460c      	mov	r4, r1
 800f456:	4611      	mov	r1, r2
 800f458:	b082      	sub	sp, #8
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800f45a:	f994 2000 	ldrsb.w	r2, [r4]
 800f45e:	2a00      	cmp	r2, #0
 800f460:	da44      	bge.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  switch (p_request->bmRequestType_bit.recipient)
 800f462:	7822      	ldrb	r2, [r4, #0]
 800f464:	4606      	mov	r6, r0
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f466:	88a0      	ldrh	r0, [r4, #4]
  switch (p_request->bmRequestType_bit.recipient)
 800f468:	f002 021f 	and.w	r2, r2, #31
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800f46c:	fa5f f880 	uxtb.w	r8, r0
  switch (p_request->bmRequestType_bit.recipient)
 800f470:	2a01      	cmp	r2, #1
 800f472:	d032      	beq.n	800f4da <tud_audio_buffer_and_schedule_control_xfer+0x8a>
 800f474:	2a02      	cmp	r2, #2
 800f476:	d13d      	bne.n	800f4f4 <tud_audio_buffer_and_schedule_control_xfer+0xa4>
    if (_audiod_fct[i].p_desc)
 800f478:	4d38      	ldr	r5, [pc, #224]	; (800f55c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800f47a:	686f      	ldr	r7, [r5, #4]
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	d035      	beq.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f480:	f897 c000 	ldrb.w	ip, [r7]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800f484:	8a6a      	ldrh	r2, [r5, #18]
 800f486:	44bc      	add	ip, r7
 800f488:	4417      	add	r7, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800f48a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800f48e:	4494      	add	ip, r2
      while (p_desc < p_desc_end)
 800f490:	4567      	cmp	r7, ip
 800f492:	d805      	bhi.n	800f4a0 <tud_audio_buffer_and_schedule_control_xfer+0x50>
 800f494:	e02a      	b.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f496:	f89c 0000 	ldrb.w	r0, [ip]
 800f49a:	4484      	add	ip, r0
 800f49c:	4567      	cmp	r7, ip
 800f49e:	d925      	bls.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800f4a0:	f89c e001 	ldrb.w	lr, [ip, #1]
 800f4a4:	f1be 0f05 	cmp.w	lr, #5
 800f4a8:	d1f5      	bne.n	800f496 <tud_audio_buffer_and_schedule_control_xfer+0x46>
 800f4aa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800f4ae:	4542      	cmp	r2, r8
 800f4b0:	d1f1      	bne.n	800f496 <tud_audio_buffer_and_schedule_control_xfer+0x46>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800f4b2:	7e2a      	ldrb	r2, [r5, #24]
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 800f4b4:	6968      	ldr	r0, [r5, #20]
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	bf28      	it	cs
 800f4ba:	4613      	movcs	r3, r2
  if (count > destsz) {
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d315      	bcc.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  memcpy(dest, src, count);
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	f003 fe7e 	bl	80131c4 <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800f4c8:	9b01      	ldr	r3, [sp, #4]
 800f4ca:	696a      	ldr	r2, [r5, #20]
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	4630      	mov	r0, r6
}
 800f4d0:	b002      	add	sp, #8
 800f4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800f4d6:	f001 bdb5 	b.w	8011044 <tud_control_xfer>
      if (entityID != 0)
 800f4da:	0a00      	lsrs	r0, r0, #8
 800f4dc:	d012      	beq.n	800f504 <tud_audio_buffer_and_schedule_control_xfer+0xb4>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f4de:	4d1f      	ldr	r5, [pc, #124]	; (800f55c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f4e0:	b2c0      	uxtb	r0, r0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f4e2:	686f      	ldr	r7, [r5, #4]
 800f4e4:	b117      	cbz	r7, 800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f4e6:	78ba      	ldrb	r2, [r7, #2]
 800f4e8:	4542      	cmp	r2, r8
 800f4ea:	d023      	beq.n	800f534 <tud_audio_buffer_and_schedule_control_xfer+0xe4>
}
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	b002      	add	sp, #8
 800f4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800f4f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f4f8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f4fc:	07db      	lsls	r3, r3, #31
 800f4fe:	d5f5      	bpl.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f500:	be00      	bkpt	0x0000
 800f502:	e7f3      	b.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
    if (_audiod_fct[i].p_desc)
 800f504:	4d15      	ldr	r5, [pc, #84]	; (800f55c <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800f506:	686f      	ldr	r7, [r5, #4]
 800f508:	2f00      	cmp	r7, #0
 800f50a:	d0ef      	beq.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f50c:	8a68      	ldrh	r0, [r5, #18]
 800f50e:	3808      	subs	r0, #8
 800f510:	4438      	add	r0, r7
      while (p_desc < p_desc_end)
 800f512:	4287      	cmp	r7, r0
 800f514:	d2ea      	bcs.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f516:	46bc      	mov	ip, r7
 800f518:	e004      	b.n	800f524 <tud_audio_buffer_and_schedule_control_xfer+0xd4>
 800f51a:	f89c 2000 	ldrb.w	r2, [ip]
 800f51e:	4494      	add	ip, r2
 800f520:	4560      	cmp	r0, ip
 800f522:	d9e3      	bls.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f524:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800f528:	2a04      	cmp	r2, #4
 800f52a:	d1f6      	bne.n	800f51a <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f52c:	78ba      	ldrb	r2, [r7, #2]
 800f52e:	4542      	cmp	r2, r8
 800f530:	d1f3      	bne.n	800f51a <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f532:	e7be      	b.n	800f4b2 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f534:	783a      	ldrb	r2, [r7, #0]
 800f536:	eb07 0c02 	add.w	ip, r7, r2
 800f53a:	5cba      	ldrb	r2, [r7, r2]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f53c:	f8bc 7006 	ldrh.w	r7, [ip, #6]
 800f540:	4462      	add	r2, ip
 800f542:	44bc      	add	ip, r7
      while (p_desc < p_desc_end)
 800f544:	4594      	cmp	ip, r2
 800f546:	d804      	bhi.n	800f552 <tud_audio_buffer_and_schedule_control_xfer+0x102>
 800f548:	e7d0      	b.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f54a:	7817      	ldrb	r7, [r2, #0]
 800f54c:	443a      	add	r2, r7
 800f54e:	4594      	cmp	ip, r2
 800f550:	d9cc      	bls.n	800f4ec <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f552:	78d7      	ldrb	r7, [r2, #3]
 800f554:	4287      	cmp	r7, r0
 800f556:	d1f8      	bne.n	800f54a <tud_audio_buffer_and_schedule_control_xfer+0xfa>
 800f558:	e7ab      	b.n	800f4b2 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f55a:	bf00      	nop
 800f55c:	2400c7e0 	.word	0x2400c7e0

0800f560 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 800f560:	b510      	push	{r4, lr}
 800f562:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800f564:	f000 fe86 	bl	8010274 <tud_mounted>
 800f568:	b908      	cbnz	r0, 800f56e <tud_cdc_n_connected+0xe>
 800f56a:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	f000 fe89 	bl	8010284 <tud_suspended>
 800f572:	2800      	cmp	r0, #0
 800f574:	d1f9      	bne.n	800f56a <tud_cdc_n_connected+0xa>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800f576:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f57a:	4b03      	ldr	r3, [pc, #12]	; (800f588 <tud_cdc_n_connected+0x28>)
 800f57c:	fb02 3304 	mla	r3, r2, r4, r3
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800f580:	7918      	ldrb	r0, [r3, #4]
 800f582:	f000 0001 	and.w	r0, r0, #1
}
 800f586:	bd10      	pop	{r4, pc}
 800f588:	2400d174 	.word	0x2400d174

0800f58c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f58c:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800f590:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f592:	4b03      	ldr	r3, [pc, #12]	; (800f5a0 <tud_cdc_n_available+0x14>)
 800f594:	fb02 3000 	mla	r0, r2, r0, r3
 800f598:	3010      	adds	r0, #16
 800f59a:	f000 fa87 	bl	800faac <tu_fifo_count>
}
 800f59e:	bd08      	pop	{r3, pc}
 800f5a0:	2400d174 	.word	0x2400d174

0800f5a4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800f5a4:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f5a8:	b292      	uxth	r2, r2
{
 800f5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ae:	fb03 f500 	mul.w	r5, r3, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800f5b2:	4f19      	ldr	r7, [pc, #100]	; (800f618 <tud_cdc_n_read+0x74>)
 800f5b4:	f105 0410 	add.w	r4, r5, #16
 800f5b8:	443c      	add	r4, r7
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f000 faf2 	bl	800fba4 <tu_fifo_read_n>
 800f5c0:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fa92 	bl	800faec <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f5c8:	283f      	cmp	r0, #63	; 0x3f
 800f5ca:	d802      	bhi.n	800f5d2 <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f5d2:	eb07 0805 	add.w	r8, r7, r5
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f5dc:	f001 fc3c 	bl	8010e58 <usbd_edpt_claim>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d0f3      	beq.n	800f5cc <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f000 fa81 	bl	800faec <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f5ea:	283f      	cmp	r0, #63	; 0x3f
 800f5ec:	d90b      	bls.n	800f606 <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f5ee:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800f5f2:	2340      	movs	r3, #64	; 0x40
 800f5f4:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	443a      	add	r2, r7
 800f5fc:	f001 fc48 	bl	8010e90 <usbd_edpt_xfer>
}
 800f600:	4630      	mov	r0, r6
 800f602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f606:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f60a:	2000      	movs	r0, #0
 800f60c:	f001 fc32 	bl	8010e74 <usbd_edpt_release>
}
 800f610:	4630      	mov	r0, r6
 800f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f616:	bf00      	nop
 800f618:	2400d174 	.word	0x2400d174

0800f61c <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800f61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f620:	4604      	mov	r4, r0
 800f622:	f000 fe27 	bl	8010274 <tud_mounted>
 800f626:	b910      	cbnz	r0, 800f62e <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800f628:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800f62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62e:	f000 fe29 	bl	8010284 <tud_suspended>
 800f632:	4606      	mov	r6, r0
 800f634:	2800      	cmp	r0, #0
 800f636:	d1f7      	bne.n	800f628 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800f638:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f63c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f6a0 <tud_cdc_n_write_flush+0x84>
 800f640:	fb03 f404 	mul.w	r4, r3, r4
 800f644:	f104 051c 	add.w	r5, r4, #28
 800f648:	4445      	add	r5, r8
 800f64a:	4628      	mov	r0, r5
 800f64c:	f000 fa2e 	bl	800faac <tu_fifo_count>
 800f650:	2800      	cmp	r0, #0
 800f652:	d0e9      	beq.n	800f628 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800f654:	eb08 0704 	add.w	r7, r8, r4
 800f658:	4630      	mov	r0, r6
 800f65a:	78b9      	ldrb	r1, [r7, #2]
 800f65c:	f001 fbfc 	bl	8010e58 <usbd_edpt_claim>
 800f660:	2800      	cmp	r0, #0
 800f662:	d0e1      	beq.n	800f628 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800f664:	34e8      	adds	r4, #232	; 0xe8
 800f666:	4628      	mov	r0, r5
 800f668:	2240      	movs	r2, #64	; 0x40
 800f66a:	4444      	add	r4, r8
 800f66c:	4621      	mov	r1, r4
 800f66e:	f000 fa99 	bl	800fba4 <tu_fifo_read_n>
  if ( count )
 800f672:	4605      	mov	r5, r0
 800f674:	b170      	cbz	r0, 800f694 <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800f676:	4603      	mov	r3, r0
 800f678:	4622      	mov	r2, r4
 800f67a:	78b9      	ldrb	r1, [r7, #2]
 800f67c:	4630      	mov	r0, r6
 800f67e:	f001 fc07 	bl	8010e90 <usbd_edpt_xfer>
 800f682:	b950      	cbnz	r0, 800f69a <tud_cdc_n_write_flush+0x7e>
 800f684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f688:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f68c:	07db      	lsls	r3, r3, #31
 800f68e:	d5cb      	bpl.n	800f628 <tud_cdc_n_write_flush+0xc>
 800f690:	be00      	bkpt	0x0000
 800f692:	e7ca      	b.n	800f62a <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800f694:	78b9      	ldrb	r1, [r7, #2]
 800f696:	f001 fbed 	bl	8010e74 <usbd_edpt_release>
    return 0;
 800f69a:	4628      	mov	r0, r5
 800f69c:	e7c5      	b.n	800f62a <tud_cdc_n_write_flush+0xe>
 800f69e:	bf00      	nop
 800f6a0:	2400d174 	.word	0x2400d174

0800f6a4 <tud_cdc_n_write>:
{
 800f6a4:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f6a6:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f6aa:	4c0b      	ldr	r4, [pc, #44]	; (800f6d8 <tud_cdc_n_write+0x34>)
 800f6ac:	b292      	uxth	r2, r2
{
 800f6ae:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f6b0:	fb03 4400 	mla	r4, r3, r0, r4
 800f6b4:	341c      	adds	r4, #28
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 fbca 	bl	800fe50 <tu_fifo_write_n>
 800f6bc:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f6be:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f6c0:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f6c2:	f000 f9f3 	bl	800faac <tu_fifo_count>
 800f6c6:	283f      	cmp	r0, #63	; 0x3f
 800f6c8:	d801      	bhi.n	800f6ce <tud_cdc_n_write+0x2a>
}
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f7ff ffa4 	bl	800f61c <tud_cdc_n_write_flush>
}
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	bd38      	pop	{r3, r4, r5, pc}
 800f6d8:	2400d174 	.word	0x2400d174

0800f6dc <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800f6dc:	b510      	push	{r4, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f6de:	4c12      	ldr	r4, [pc, #72]	; (800f728 <cdcd_init+0x4c>)
{
 800f6e0:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f6e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f003 fc78 	bl	8012fde <memset>
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f6ee:	2300      	movs	r3, #0
    p_cdc->wanted_char = (char) -1;
 800f6f0:	21ff      	movs	r1, #255	; 0xff
    p_cdc->line_coding.bit_rate  = 115200;
 800f6f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    p_cdc->line_coding.data_bits = 8;
 800f6f6:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f6f8:	9300      	str	r3, [sp, #0]
    p_cdc->wanted_char = (char) -1;
 800f6fa:	7161      	strb	r1, [r4, #5]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.bit_rate  = 115200;
 800f702:	60a2      	str	r2, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 800f704:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f706:	2240      	movs	r2, #64	; 0x40
 800f708:	f104 0010 	add.w	r0, r4, #16
 800f70c:	f000 f9b4 	bl	800fa78 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800f710:	2301      	movs	r3, #1
 800f712:	2240      	movs	r2, #64	; 0x40
 800f714:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800f718:	f104 001c 	add.w	r0, r4, #28
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	f000 f9ab 	bl	800fa78 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800f722:	b002      	add	sp, #8
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	2400d174 	.word	0x2400d174

0800f72c <cdcd_reset>:

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f72c:	4b09      	ldr	r3, [pc, #36]	; (800f754 <cdcd_reset+0x28>)
 800f72e:	2200      	movs	r2, #0
{
 800f730:	b510      	push	{r4, lr}
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800f732:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800f736:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f73a:	601a      	str	r2, [r3, #0]
 800f73c:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 800f73e:	f000 fd21 	bl	8010184 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800f742:	4620      	mov	r0, r4
 800f744:	f000 fd1e 	bl	8010184 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f748:	4620      	mov	r0, r4
 800f74a:	2101      	movs	r1, #1
  }
}
 800f74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f750:	f000 bd1e 	b.w	8010190 <tu_fifo_set_overwritable>
 800f754:	2400d174 	.word	0x2400d174

0800f758 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f75c:	794b      	ldrb	r3, [r1, #5]
{
 800f75e:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f760:	2b02      	cmp	r3, #2
 800f762:	d102      	bne.n	800f76a <cdcd_open+0x12>
 800f764:	798b      	ldrb	r3, [r1, #6]
 800f766:	2b02      	cmp	r3, #2
 800f768:	d004      	beq.n	800f774 <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 800f76a:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 800f76c:	4628      	mov	r0, r5
 800f76e:	b002      	add	sp, #8
 800f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800f774:	4e32      	ldr	r6, [pc, #200]	; (800f840 <cdcd_open+0xe8>)
 800f776:	78b3      	ldrb	r3, [r6, #2]
 800f778:	b13b      	cbz	r3, 800f78a <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 800f77a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f77e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f782:	07db      	lsls	r3, r3, #31
 800f784:	d5f1      	bpl.n	800f76a <cdcd_open+0x12>
 800f786:	be00      	bkpt	0x0000
 800f788:	e7ef      	b.n	800f76a <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f78a:	788b      	ldrb	r3, [r1, #2]
 800f78c:	4607      	mov	r7, r0
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800f78e:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f790:	7033      	strb	r3, [r6, #0]
 800f792:	780b      	ldrb	r3, [r1, #0]
 800f794:	18cc      	adds	r4, r1, r3
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f796:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f798:	2924      	cmp	r1, #36	; 0x24
 800f79a:	d10b      	bne.n	800f7b4 <cdcd_open+0x5c>
 800f79c:	2a08      	cmp	r2, #8
 800f79e:	d802      	bhi.n	800f7a6 <cdcd_open+0x4e>
 800f7a0:	e00f      	b.n	800f7c2 <cdcd_open+0x6a>
 800f7a2:	42aa      	cmp	r2, r5
 800f7a4:	d30d      	bcc.n	800f7c2 <cdcd_open+0x6a>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f7a6:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f7a8:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800f7aa:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f7ac:	7861      	ldrb	r1, [r4, #1]
 800f7ae:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f7b0:	2924      	cmp	r1, #36	; 0x24
 800f7b2:	d0f6      	beq.n	800f7a2 <cdcd_open+0x4a>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800f7b4:	2905      	cmp	r1, #5
 800f7b6:	d01b      	beq.n	800f7f0 <cdcd_open+0x98>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800f7b8:	2904      	cmp	r1, #4
 800f7ba:	d102      	bne.n	800f7c2 <cdcd_open+0x6a>
 800f7bc:	7963      	ldrb	r3, [r4, #5]
 800f7be:	2b0a      	cmp	r3, #10
 800f7c0:	d029      	beq.n	800f816 <cdcd_open+0xbe>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f7c2:	4820      	ldr	r0, [pc, #128]	; (800f844 <cdcd_open+0xec>)
 800f7c4:	f000 f992 	bl	800faec <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f7c8:	283f      	cmp	r0, #63	; 0x3f
 800f7ca:	d9cf      	bls.n	800f76c <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f7cc:	78f1      	ldrb	r1, [r6, #3]
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	f001 fb42 	bl	8010e58 <usbd_edpt_claim>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d0c9      	beq.n	800f76c <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f7d8:	481a      	ldr	r0, [pc, #104]	; (800f844 <cdcd_open+0xec>)
 800f7da:	f000 f987 	bl	800faec <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f7de:	283f      	cmp	r0, #63	; 0x3f
 800f7e0:	d914      	bls.n	800f80c <cdcd_open+0xb4>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f7e2:	2340      	movs	r3, #64	; 0x40
 800f7e4:	4a18      	ldr	r2, [pc, #96]	; (800f848 <cdcd_open+0xf0>)
 800f7e6:	78f1      	ldrb	r1, [r6, #3]
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f001 fb51 	bl	8010e90 <usbd_edpt_xfer>
 800f7ee:	e7bd      	b.n	800f76c <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f001 fb0c 	bl	8010e10 <usbd_edpt_open>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d0be      	beq.n	800f77a <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800f7fc:	78a3      	ldrb	r3, [r4, #2]
 800f7fe:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f800:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 800f802:	441d      	add	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f804:	441c      	add	r4, r3
 800f806:	b2ad      	uxth	r5, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f808:	7861      	ldrb	r1, [r4, #1]
 800f80a:	e7d5      	b.n	800f7b8 <cdcd_open+0x60>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f80c:	78f1      	ldrb	r1, [r6, #3]
 800f80e:	2000      	movs	r0, #0
 800f810:	f001 fb30 	bl	8010e74 <usbd_edpt_release>
    return false;
 800f814:	e7aa      	b.n	800f76c <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800f816:	4b0d      	ldr	r3, [pc, #52]	; (800f84c <cdcd_open+0xf4>)
 800f818:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f81a:	f894 8000 	ldrb.w	r8, [r4]
 800f81e:	9301      	str	r3, [sp, #4]
 800f820:	3301      	adds	r3, #1
 800f822:	eb04 0108 	add.w	r1, r4, r8
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	2302      	movs	r3, #2
 800f82a:	461a      	mov	r2, r3
 800f82c:	f001 fa9a 	bl	8010d64 <usbd_open_edpt_pair>
 800f830:	2800      	cmp	r0, #0
 800f832:	d0a2      	beq.n	800f77a <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800f834:	350e      	adds	r5, #14
 800f836:	fa18 f585 	uxtah	r5, r8, r5
 800f83a:	b2ad      	uxth	r5, r5
 800f83c:	e7c1      	b.n	800f7c2 <cdcd_open+0x6a>
 800f83e:	bf00      	nop
 800f840:	2400d174 	.word	0x2400d174
 800f844:	2400d184 	.word	0x2400d184
 800f848:	2400d21c 	.word	0x2400d21c
 800f84c:	2400d176 	.word	0x2400d176

0800f850 <cdcd_control_xfer_cb>:
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f850:	7813      	ldrb	r3, [r2, #0]
 800f852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f856:	2b20      	cmp	r3, #32
{
 800f858:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f85a:	d10f      	bne.n	800f87c <cdcd_control_xfer_cb+0x2c>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 800f85c:	4694      	mov	ip, r2
 800f85e:	4c33      	ldr	r4, [pc, #204]	; (800f92c <cdcd_control_xfer_cb+0xdc>)
 800f860:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800f864:	7822      	ldrb	r2, [r4, #0]
 800f866:	429a      	cmp	r2, r3
 800f868:	d108      	bne.n	800f87c <cdcd_control_xfer_cb+0x2c>
  }

  switch ( request->bRequest )
 800f86a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800f86e:	3b20      	subs	r3, #32
 800f870:	2b03      	cmp	r3, #3
 800f872:	d803      	bhi.n	800f87c <cdcd_control_xfer_cb+0x2c>
 800f874:	e8df f003 	tbb	[pc, r3]
 800f878:	05312816 	.word	0x05312816
 800f87c:	2400      	movs	r4, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 800f87e:	4620      	mov	r0, r4
 800f880:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f882:	2901      	cmp	r1, #1
 800f884:	d042      	beq.n	800f90c <cdcd_control_xfer_cb+0xbc>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f886:	4b2a      	ldr	r3, [pc, #168]	; (800f930 <cdcd_control_xfer_cb+0xe0>)
 800f888:	f04f 0401 	mov.w	r4, #1
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d042      	beq.n	800f916 <cdcd_control_xfer_cb+0xc6>
 800f890:	2903      	cmp	r1, #3
 800f892:	bf14      	ite	ne
 800f894:	2400      	movne	r4, #0
 800f896:	f004 0401 	andeq.w	r4, r4, #1
 800f89a:	2c00      	cmp	r4, #0
 800f89c:	d13f      	bne.n	800f91e <cdcd_control_xfer_cb+0xce>
  return true;
 800f89e:	2401      	movs	r4, #1
}
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f8a4:	2901      	cmp	r1, #1
 800f8a6:	d011      	beq.n	800f8cc <cdcd_control_xfer_cb+0x7c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f8a8:	4b22      	ldr	r3, [pc, #136]	; (800f934 <cdcd_control_xfer_cb+0xe4>)
 800f8aa:	f04f 0401 	mov.w	r4, #1
 800f8ae:	b3a3      	cbz	r3, 800f91a <cdcd_control_xfer_cb+0xca>
 800f8b0:	2903      	cmp	r1, #3
 800f8b2:	bf14      	ite	ne
 800f8b4:	2400      	movne	r4, #0
 800f8b6:	f004 0401 	andeq.w	r4, r4, #1
 800f8ba:	2c00      	cmp	r4, #0
 800f8bc:	d0ef      	beq.n	800f89e <cdcd_control_xfer_cb+0x4e>
 800f8be:	491e      	ldr	r1, [pc, #120]	; (800f938 <cdcd_control_xfer_cb+0xe8>)
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	f3af 8000 	nop.w
 800f8c6:	e7da      	b.n	800f87e <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f8c8:	2901      	cmp	r1, #1
 800f8ca:	d1e8      	bne.n	800f89e <cdcd_control_xfer_cb+0x4e>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f8cc:	2307      	movs	r3, #7
 800f8ce:	4a1a      	ldr	r2, [pc, #104]	; (800f938 <cdcd_control_xfer_cb+0xe8>)
 800f8d0:	4661      	mov	r1, ip
  return true;
 800f8d2:	2401      	movs	r4, #1
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f8d4:	f001 fbb6 	bl	8011044 <tud_control_xfer>
 800f8d8:	e7d1      	b.n	800f87e <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f8da:	2901      	cmp	r1, #1
 800f8dc:	d016      	beq.n	800f90c <cdcd_control_xfer_cb+0xbc>
      else if (stage == CONTROL_STAGE_ACK)
 800f8de:	2903      	cmp	r1, #3
 800f8e0:	d1dd      	bne.n	800f89e <cdcd_control_xfer_cb+0x4e>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800f8e2:	f8bc 5002 	ldrh.w	r5, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f8e6:	4815      	ldr	r0, [pc, #84]	; (800f93c <cdcd_control_xfer_cb+0xec>)
 800f8e8:	f005 0601 	and.w	r6, r5, #1
        p_cdc->line_state = (uint8_t) request->wValue;
 800f8ec:	7125      	strb	r5, [r4, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f8ee:	f086 0101 	eor.w	r1, r6, #1
 800f8f2:	f000 fc4d 	bl	8010190 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f8f6:	4b12      	ldr	r3, [pc, #72]	; (800f940 <cdcd_control_xfer_cb+0xf0>)
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d0d0      	beq.n	800f89e <cdcd_control_xfer_cb+0x4e>
 800f8fc:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800f900:	4631      	mov	r1, r6
 800f902:	2000      	movs	r0, #0
  return true;
 800f904:	2401      	movs	r4, #1
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f906:	f7f5 f933 	bl	8004b70 <tud_cdc_line_state_cb>
 800f90a:	e7b8      	b.n	800f87e <cdcd_control_xfer_cb+0x2e>
        tud_control_status(rhport, request);
 800f90c:	4661      	mov	r1, ip
  return true;
 800f90e:	2401      	movs	r4, #1
        tud_control_status(rhport, request);
 800f910:	f001 fb80 	bl	8011014 <tud_control_status>
 800f914:	e7b3      	b.n	800f87e <cdcd_control_xfer_cb+0x2e>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f916:	461c      	mov	r4, r3
 800f918:	e7ba      	b.n	800f890 <cdcd_control_xfer_cb+0x40>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f91a:	461c      	mov	r4, r3
 800f91c:	e7c8      	b.n	800f8b0 <cdcd_control_xfer_cb+0x60>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f91e:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800f922:	2000      	movs	r0, #0
 800f924:	f3af 8000 	nop.w
 800f928:	e7a9      	b.n	800f87e <cdcd_control_xfer_cb+0x2e>
 800f92a:	bf00      	nop
 800f92c:	2400d174 	.word	0x2400d174
	...
 800f938:	2400d17c 	.word	0x2400d17c
 800f93c:	2400d190 	.word	0x2400d190
 800f940:	08004b71 	.word	0x08004b71

0800f944 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800f944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f948:	4e44      	ldr	r6, [pc, #272]	; (800fa5c <cdcd_xfer_cb+0x118>)
{
 800f94a:	460c      	mov	r4, r1
 800f94c:	4607      	mov	r7, r0
 800f94e:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f950:	78f2      	ldrb	r2, [r6, #3]
 800f952:	428a      	cmp	r2, r1
 800f954:	d15e      	bne.n	800fa14 <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800f956:	b29a      	uxth	r2, r3
 800f958:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800f95c:	f106 0010 	add.w	r0, r6, #16
 800f960:	f000 fa76 	bl	800fe50 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800f964:	4b3e      	ldr	r3, [pc, #248]	; (800fa60 <cdcd_xfer_cb+0x11c>)
 800f966:	b1d3      	cbz	r3, 800f99e <cdcd_xfer_cb+0x5a>
 800f968:	7973      	ldrb	r3, [r6, #5]
 800f96a:	2bff      	cmp	r3, #255	; 0xff
 800f96c:	d017      	beq.n	800f99e <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f96e:	b1b5      	cbz	r5, 800f99e <cdcd_xfer_cb+0x5a>
 800f970:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800f974:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f978:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 800f97c:	e002      	b.n	800f984 <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f97e:	45d0      	cmp	r8, sl
 800f980:	d00d      	beq.n	800f99e <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f982:	7973      	ldrb	r3, [r6, #5]
 800f984:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800f988:	429a      	cmp	r2, r3
 800f98a:	d1f8      	bne.n	800f97e <cdcd_xfer_cb+0x3a>
 800f98c:	4648      	mov	r0, r9
 800f98e:	f000 f8a3 	bl	800fad8 <tu_fifo_empty>
 800f992:	2800      	cmp	r0, #0
 800f994:	d1f3      	bne.n	800f97e <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800f996:	7971      	ldrb	r1, [r6, #5]
 800f998:	f3af 8000 	nop.w
 800f99c:	e7ef      	b.n	800f97e <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800f99e:	4b31      	ldr	r3, [pc, #196]	; (800fa64 <cdcd_xfer_cb+0x120>)
 800f9a0:	b123      	cbz	r3, 800f9ac <cdcd_xfer_cb+0x68>
 800f9a2:	4831      	ldr	r0, [pc, #196]	; (800fa68 <cdcd_xfer_cb+0x124>)
 800f9a4:	f000 f898 	bl	800fad8 <tu_fifo_empty>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d04f      	beq.n	800fa4c <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f9ac:	482e      	ldr	r0, [pc, #184]	; (800fa68 <cdcd_xfer_cb+0x124>)
 800f9ae:	f000 f89d 	bl	800faec <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f9b2:	283f      	cmp	r0, #63	; 0x3f
 800f9b4:	d905      	bls.n	800f9c2 <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f9b6:	78f1      	ldrb	r1, [r6, #3]
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f001 fa4d 	bl	8010e58 <usbd_edpt_claim>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d137      	bne.n	800fa32 <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800f9c2:	78b3      	ldrb	r3, [r6, #2]
 800f9c4:	42a3      	cmp	r3, r4
 800f9c6:	d003      	beq.n	800f9d0 <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800f9c8:	2401      	movs	r4, #1
}
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800f9d0:	4b26      	ldr	r3, [pc, #152]	; (800fa6c <cdcd_xfer_cb+0x128>)
 800f9d2:	b113      	cbz	r3, 800f9da <cdcd_xfer_cb+0x96>
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 800f9da:	2000      	movs	r0, #0
 800f9dc:	f7ff fe1e 	bl	800f61c <tud_cdc_n_write_flush>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d1f1      	bne.n	800f9c8 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800f9e4:	4822      	ldr	r0, [pc, #136]	; (800fa70 <cdcd_xfer_cb+0x12c>)
 800f9e6:	f000 f861 	bl	800faac <tu_fifo_count>
 800f9ea:	2d00      	cmp	r5, #0
 800f9ec:	d0ec      	beq.n	800f9c8 <cdcd_xfer_cb+0x84>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d1ea      	bne.n	800f9c8 <cdcd_xfer_cb+0x84>
 800f9f2:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800f9f6:	d1e7      	bne.n	800f9c8 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800f9f8:	78b1      	ldrb	r1, [r6, #2]
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f001 fa2c 	bl	8010e58 <usbd_edpt_claim>
 800fa00:	4604      	mov	r4, r0
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d0e0      	beq.n	800f9c8 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800fa06:	462b      	mov	r3, r5
 800fa08:	462a      	mov	r2, r5
 800fa0a:	78b1      	ldrb	r1, [r6, #2]
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f001 fa3f 	bl	8010e90 <usbd_edpt_xfer>
 800fa12:	e7da      	b.n	800f9ca <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800fa14:	78b3      	ldrb	r3, [r6, #2]
 800fa16:	428b      	cmp	r3, r1
 800fa18:	d0da      	beq.n	800f9d0 <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 800fa1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fa1e:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800fa22:	f014 0401 	ands.w	r4, r4, #1
 800fa26:	d0d0      	beq.n	800f9ca <cdcd_xfer_cb+0x86>
 800fa28:	be00      	bkpt	0x0000
 800fa2a:	2400      	movs	r4, #0
}
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800fa32:	480d      	ldr	r0, [pc, #52]	; (800fa68 <cdcd_xfer_cb+0x124>)
 800fa34:	f000 f85a 	bl	800faec <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800fa38:	283f      	cmp	r0, #63	; 0x3f
 800fa3a:	d90a      	bls.n	800fa52 <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800fa3c:	2340      	movs	r3, #64	; 0x40
 800fa3e:	4a0d      	ldr	r2, [pc, #52]	; (800fa74 <cdcd_xfer_cb+0x130>)
 800fa40:	78f1      	ldrb	r1, [r6, #3]
 800fa42:	2000      	movs	r0, #0
 800fa44:	f001 fa24 	bl	8010e90 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 800fa48:	78b3      	ldrb	r3, [r6, #2]
 800fa4a:	e7bb      	b.n	800f9c4 <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800fa4c:	f7f5 f892 	bl	8004b74 <tud_cdc_rx_cb>
 800fa50:	e7ac      	b.n	800f9ac <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800fa52:	78f1      	ldrb	r1, [r6, #3]
 800fa54:	2000      	movs	r0, #0
 800fa56:	f001 fa0d 	bl	8010e74 <usbd_edpt_release>
 800fa5a:	e7b2      	b.n	800f9c2 <cdcd_xfer_cb+0x7e>
 800fa5c:	2400d174 	.word	0x2400d174
 800fa60:	00000000 	.word	0x00000000
 800fa64:	08004b75 	.word	0x08004b75
 800fa68:	2400d184 	.word	0x2400d184
 800fa6c:	00000000 	.word	0x00000000
 800fa70:	2400d190 	.word	0x2400d190
 800fa74:	2400d21c 	.word	0x2400d21c

0800fa78 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800fa78:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 800fa7c:	4684      	mov	ip, r0
 800fa7e:	f89d 0000 	ldrb.w	r0, [sp]
  if (depth > 0x8000) return false;
 800fa82:	d810      	bhi.n	800faa6 <tu_fifo_config+0x2e>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800fa84:	f3c3 030e 	ubfx	r3, r3, #0, #15
  f->buffer       = (uint8_t*) buffer;
 800fa88:	f8cc 1000 	str.w	r1, [ip]
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 800fa8c:	2100      	movs	r1, #0
  f->depth        = depth;
 800fa8e:	f8ac 2004 	strh.w	r2, [ip, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800fa92:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  f->wr_idx       = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800fa96:	2001      	movs	r0, #1
  f->rd_idx       = 0;
 800fa98:	f8ac 100a 	strh.w	r1, [ip, #10]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800fa9c:	f8ac 3006 	strh.w	r3, [ip, #6]
  f->wr_idx       = 0;
 800faa0:	f8ac 1008 	strh.w	r1, [ip, #8]
  return true;
 800faa4:	4770      	bx	lr
  if (depth > 0x8000) return false;
 800faa6:	2000      	movs	r0, #0
}
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop

0800faac <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800faac:	8903      	ldrh	r3, [r0, #8]
 800faae:	8942      	ldrh	r2, [r0, #10]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	8880      	ldrh	r0, [r0, #4]
 800fab4:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d305      	bcc.n	800fac6 <tu_fifo_count+0x1a>
    return (uint16_t) (wr_idx - rd_idx);
 800faba:	1a9b      	subs	r3, r3, r2
 800fabc:	b29b      	uxth	r3, r3
}
 800fabe:	4298      	cmp	r0, r3
 800fac0:	bf28      	it	cs
 800fac2:	4618      	movcs	r0, r3
 800fac4:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fac6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800faca:	4413      	add	r3, r2
 800facc:	b29b      	uxth	r3, r3
}
 800face:	4298      	cmp	r0, r3
 800fad0:	bf28      	it	cs
 800fad2:	4618      	movcs	r0, r3
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 800fad8:	8902      	ldrh	r2, [r0, #8]
 800fada:	8943      	ldrh	r3, [r0, #10]
 800fadc:	b290      	uxth	r0, r2
 800fade:	b29b      	uxth	r3, r3
}
 800fae0:	1ac0      	subs	r0, r0, r3
 800fae2:	fab0 f080 	clz	r0, r0
 800fae6:	0940      	lsrs	r0, r0, #5
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop

0800faec <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800faec:	8903      	ldrh	r3, [r0, #8]
 800faee:	8942      	ldrh	r2, [r0, #10]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	8880      	ldrh	r0, [r0, #4]
 800faf4:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d306      	bcc.n	800fb08 <tu_fifo_remaining+0x1c>
    return (uint16_t) (wr_idx - rd_idx);
 800fafa:	1a9b      	subs	r3, r3, r2
 800fafc:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fafe:	4298      	cmp	r0, r3
 800fb00:	d908      	bls.n	800fb14 <tu_fifo_remaining+0x28>
 800fb02:	1ac0      	subs	r0, r0, r3
 800fb04:	b280      	uxth	r0, r0
 800fb06:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fb08:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800fb0c:	4413      	add	r3, r2
 800fb0e:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fb10:	4298      	cmp	r0, r3
 800fb12:	d8f6      	bhi.n	800fb02 <tu_fifo_remaining+0x16>
 800fb14:	2000      	movs	r0, #0
}
 800fb16:	4770      	bx	lr

0800fb18 <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fb18:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fb1c:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fb1e:	fa1f fc8c 	uxth.w	ip, ip
{
 800fb22:	b538      	push	{r3, r4, r5, lr}
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fb24:	8943      	ldrh	r3, [r0, #10]
{
 800fb26:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800fb28:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 800fb2a:	459c      	cmp	ip, r3
 800fb2c:	d32b      	bcc.n	800fb86 <tu_fifo_read+0x6e>
    return (uint16_t) (wr_idx - rd_idx);
 800fb2e:	ebac 0503 	sub.w	r5, ip, r3
 800fb32:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800fb34:	b368      	cbz	r0, 800fb92 <tu_fifo_read+0x7a>
  if ( cnt > f->depth )
 800fb36:	4282      	cmp	r2, r0
 800fb38:	d20b      	bcs.n	800fb52 <tu_fifo_read+0x3a>
  if ( wr_idx >= f->depth )
 800fb3a:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 800fb3c:	bf2c      	ite	cs
 800fb3e:	ebac 0c02 	subcs.w	ip, ip, r2
    rd_idx = wr_idx + f->depth;
 800fb42:	4494      	addcc	ip, r2
 800fb44:	fa1f f38c 	uxth.w	r3, ip
  while ( idx >= depth ) idx -= depth;
 800fb48:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800fb4a:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 800fb4c:	d803      	bhi.n	800fb56 <tu_fifo_read+0x3e>
 800fb4e:	1a9b      	subs	r3, r3, r2
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d9fb      	bls.n	800fb4e <tu_fifo_read+0x36>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800fb56:	88e2      	ldrh	r2, [r4, #6]
 800fb58:	4608      	mov	r0, r1
 800fb5a:	6825      	ldr	r5, [r4, #0]
 800fb5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fb60:	fb02 5103 	mla	r1, r2, r3, r5
 800fb64:	f003 fb2e 	bl	80131c4 <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fb68:	8961      	ldrh	r1, [r4, #10]
 800fb6a:	88a2      	ldrh	r2, [r4, #4]
  return true;
 800fb6c:	2001      	movs	r0, #1
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fb6e:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fb70:	1c4b      	adds	r3, r1, #1
 800fb72:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb74:	4299      	cmp	r1, r3
 800fb76:	d90e      	bls.n	800fb96 <tu_fifo_read+0x7e>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fb7e:	1a5b      	subs	r3, r3, r1
 800fb80:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fb82:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800fb84:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fb86:	ebc3 0542 	rsb	r5, r3, r2, lsl #1
 800fb8a:	4465      	add	r5, ip
 800fb8c:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d1d1      	bne.n	800fb36 <tu_fifo_read+0x1e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fb92:	8963      	ldrh	r3, [r4, #10]
 800fb94:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb96:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fb9a:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800fb9e:	daee      	bge.n	800fb7e <tu_fifo_read+0x66>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800fba0:	8163      	strh	r3, [r4, #10]
}
 800fba2:	bd38      	pop	{r3, r4, r5, pc}

0800fba4 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fba8:	8903      	ldrh	r3, [r0, #8]
{
 800fbaa:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fbac:	8944      	ldrh	r4, [r0, #10]
{
 800fbae:	4688      	mov	r8, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fbb0:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fbb2:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fbb4:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 800fbb6:	42a3      	cmp	r3, r4
 800fbb8:	d354      	bcc.n	800fc64 <tu_fifo_read_n+0xc0>
    return (uint16_t) (wr_idx - rd_idx);
 800fbba:	1b1f      	subs	r7, r3, r4
 800fbbc:	b2bf      	uxth	r7, r7
  if ( cnt == 0 ) return 0;
 800fbbe:	2f00      	cmp	r7, #0
 800fbc0:	d045      	beq.n	800fc4e <tu_fifo_read_n+0xaa>
  if ( cnt > f->depth )
 800fbc2:	42bd      	cmp	r5, r7
 800fbc4:	d33b      	bcc.n	800fc3e <tu_fifo_read_n+0x9a>
  if ( cnt < n ) n = cnt;
 800fbc6:	42ba      	cmp	r2, r7
 800fbc8:	bf28      	it	cs
 800fbca:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 800fbcc:	42a5      	cmp	r5, r4
 800fbce:	b297      	uxth	r7, r2
 800fbd0:	d803      	bhi.n	800fbda <tu_fifo_read_n+0x36>
 800fbd2:	1b64      	subs	r4, r4, r5
 800fbd4:	b2a4      	uxth	r4, r4
 800fbd6:	42a5      	cmp	r5, r4
 800fbd8:	d9fb      	bls.n	800fbd2 <tu_fifo_read_n+0x2e>
  uint16_t const lin_count = f->depth - rd_ptr;
 800fbda:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbdc:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fbe0:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 800fbe2:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbe4:	f3ca 020e 	ubfx	r2, sl, #0, #15
      if ( n <= lin_count )
 800fbe8:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbea:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fbec:	fb02 1104 	mla	r1, r2, r4, r1
      if ( n <= lin_count )
 800fbf0:	d91f      	bls.n	800fc32 <tu_fifo_read_n+0x8e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbf2:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fbf6:	1b7d      	subs	r5, r7, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	fa1f f983 	uxth.w	r9, r3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fbfe:	442c      	add	r4, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800fc00:	464a      	mov	r2, r9
 800fc02:	f003 fadf 	bl	80131c4 <memcpy>
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fc06:	fb14 f20a 	smulbb	r2, r4, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800fc0a:	eb08 0009 	add.w	r0, r8, r9
 800fc0e:	6831      	ldr	r1, [r6, #0]
 800fc10:	b292      	uxth	r2, r2
 800fc12:	f003 fad7 	bl	80131c4 <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fc16:	8972      	ldrh	r2, [r6, #10]
 800fc18:	88b5      	ldrh	r5, [r6, #4]
 800fc1a:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc1c:	19d3      	adds	r3, r2, r7
 800fc1e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d916      	bls.n	800fc52 <tu_fifo_read_n+0xae>
 800fc24:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fc26:	1a9b      	subs	r3, r3, r2
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800fc28:	4638      	mov	r0, r7
 800fc2a:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fc2c:	8173      	strh	r3, [r6, #10]
}
 800fc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 800fc32:	fb07 f202 	mul.w	r2, r7, r2
 800fc36:	4640      	mov	r0, r8
 800fc38:	f003 fac4 	bl	80131c4 <memcpy>
 800fc3c:	e7eb      	b.n	800fc16 <tu_fifo_read_n+0x72>
  if ( wr_idx >= f->depth )
 800fc3e:	42ab      	cmp	r3, r5
  f->rd_idx = rd_idx;
 800fc40:	462f      	mov	r7, r5
    rd_idx = wr_idx - f->depth;
 800fc42:	bf2c      	ite	cs
 800fc44:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 800fc46:	195b      	addcc	r3, r3, r5
 800fc48:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 800fc4a:	8174      	strh	r4, [r6, #10]
    cnt = f->depth;
 800fc4c:	e7bb      	b.n	800fbc6 <tu_fifo_read_n+0x22>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fc4e:	8973      	ldrh	r3, [r6, #10]
 800fc50:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc52:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800fc56:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800fc5a:	dae4      	bge.n	800fc26 <tu_fifo_read_n+0x82>
}
 800fc5c:	4638      	mov	r0, r7
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fc5e:	8173      	strh	r3, [r6, #10]
}
 800fc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fc64:	ebc4 0745 	rsb	r7, r4, r5, lsl #1
 800fc68:	441f      	add	r7, r3
 800fc6a:	b2bf      	uxth	r7, r7
 800fc6c:	e7a7      	b.n	800fbbe <tu_fifo_read_n+0x1a>
 800fc6e:	bf00      	nop

0800fc70 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	460f      	mov	r7, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fc76:	8901      	ldrh	r1, [r0, #8]
 800fc78:	8943      	ldrh	r3, [r0, #10]
{
 800fc7a:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fc7c:	b289      	uxth	r1, r1
{
 800fc7e:	b083      	sub	sp, #12
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fc80:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fc82:	8880      	ldrh	r0, [r0, #4]
  if (wr_idx >= rd_idx)
 800fc84:	4299      	cmp	r1, r3
 800fc86:	f0c0 80a2 	bcc.w	800fdce <tu_fifo_read_n_const_addr_full_words+0x15e>
    return (uint16_t) (wr_idx - rd_idx);
 800fc8a:	1acd      	subs	r5, r1, r3
 800fc8c:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fc90:	b2ad      	uxth	r5, r5
  if ( cnt == 0 ) return 0;
 800fc92:	2d00      	cmp	r5, #0
 800fc94:	f000 8092 	beq.w	800fdbc <tu_fifo_read_n_const_addr_full_words+0x14c>
  if ( cnt > f->depth )
 800fc98:	42a8      	cmp	r0, r5
 800fc9a:	f0c0 8087 	bcc.w	800fdac <tu_fifo_read_n_const_addr_full_words+0x13c>
  if ( cnt < n ) n = cnt;
 800fc9e:	4295      	cmp	r5, r2
 800fca0:	bf28      	it	cs
 800fca2:	4615      	movcs	r5, r2
  while ( idx >= depth ) idx -= depth;
 800fca4:	4298      	cmp	r0, r3
 800fca6:	d803      	bhi.n	800fcb0 <tu_fifo_read_n_const_addr_full_words+0x40>
 800fca8:	1a1b      	subs	r3, r3, r0
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	4298      	cmp	r0, r3
 800fcae:	d9fb      	bls.n	800fca8 <tu_fifo_read_n_const_addr_full_words+0x38>
  uint16_t const lin_count = f->depth - rd_ptr;
 800fcb0:	eba0 0e03 	sub.w	lr, r0, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fcb4:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fcb8:	f8d6 8000 	ldr.w	r8, [r6]
  uint16_t const lin_count = f->depth - rd_ptr;
 800fcbc:	fa1f fe8e 	uxth.w	lr, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800fcc0:	f3ca 0c0e 	ubfx	ip, sl, #0, #15
      if ( n <= lin_count )
 800fcc4:	4575      	cmp	r5, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800fcc6:	46e2      	mov	sl, ip
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fcc8:	fb0c 8c03 	mla	ip, ip, r3, r8
      if ( n <= lin_count )
 800fccc:	d81e      	bhi.n	800fd0c <tu_fifo_read_n_const_addr_full_words+0x9c>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800fcce:	fb15 f20a 	smulbb	r2, r5, sl
  uint16_t full_words = len >> 2;
 800fcd2:	f3c2 018d 	ubfx	r1, r2, #2, #14
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800fcd6:	b292      	uxth	r2, r2
  while(full_words--)
 800fcd8:	2900      	cmp	r1, #0
 800fcda:	d07f      	beq.n	800fddc <tu_fifo_read_n_const_addr_full_words+0x16c>
 800fcdc:	eb0c 0181 	add.w	r1, ip, r1, lsl #2


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fce4:	4561      	cmp	r1, ip
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fce6:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fce8:	d1fa      	bne.n	800fce0 <tu_fifo_read_n_const_addr_full_words+0x70>
  if ( bytes_rem )
 800fcea:	f012 0203 	ands.w	r2, r2, #3
 800fcee:	d155      	bne.n	800fd9c <tu_fifo_read_n_const_addr_full_words+0x12c>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fcf0:	8972      	ldrh	r2, [r6, #10]
 800fcf2:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fcf4:	1953      	adds	r3, r2, r5
 800fcf6:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d961      	bls.n	800fdc0 <tu_fifo_read_n_const_addr_full_words+0x150>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fcfc:	eba3 0309 	sub.w	r3, r3, r9
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fd00:	4628      	mov	r0, r5
 800fd02:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fd04:	8173      	strh	r3, [r6, #10]
}
 800fd06:	b003      	add	sp, #12
 800fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t lin_bytes = lin_count * f->item_size;
 800fd0c:	fb1e fe0a 	smulbb	lr, lr, sl
 800fd10:	fa1f fe8e 	uxth.w	lr, lr
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800fd14:	f02e 0203 	bic.w	r2, lr, #3
 800fd18:	b291      	uxth	r1, r2
  while(full_words--)
 800fd1a:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 800fd1e:	b13a      	cbz	r2, 800fd30 <tu_fifo_read_n_const_addr_full_words+0xc0>
 800fd20:	eb0c 0b8b 	add.w	fp, ip, fp, lsl #2
 800fd24:	4662      	mov	r2, ip
 800fd26:	f852 4b04 	ldr.w	r4, [r2], #4
 800fd2a:	4593      	cmp	fp, r2
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fd2c:	603c      	str	r4, [r7, #0]
  while(full_words--)
 800fd2e:	d1fa      	bne.n	800fd26 <tu_fifo_read_n_const_addr_full_words+0xb6>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fd30:	1a2a      	subs	r2, r5, r0
        if (rem > 0)
 800fd32:	f01e 0b03 	ands.w	fp, lr, #3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fd36:	eb03 0402 	add.w	r4, r3, r2
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fd3a:	fb14 f40a 	smulbb	r4, r4, sl
 800fd3e:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800fd40:	d01e      	beq.n	800fd80 <tu_fifo_read_n_const_addr_full_words+0x110>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fd42:	f1cb 0a04 	rsb	sl, fp, #4
          uint32_t tmp32=0;
 800fd46:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 800fd48:	465a      	mov	r2, fp
 800fd4a:	4461      	add	r1, ip
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fd4c:	fa1f fa8a 	uxth.w	sl, sl
 800fd50:	a801      	add	r0, sp, #4
          uint32_t tmp32=0;
 800fd52:	9301      	str	r3, [sp, #4]
 800fd54:	45a2      	cmp	sl, r4
 800fd56:	bf28      	it	cs
 800fd58:	46a2      	movcs	sl, r4
          while(rem--) *dst_u8++ = *ff_buf++;
 800fd5a:	f003 fa33 	bl	80131c4 <memcpy>
 800fd5e:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 800fd60:	eba4 040a 	sub.w	r4, r4, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fd64:	fa5f f28a 	uxtb.w	r2, sl
          while(rem--) *dst_u8++ = *ff_buf++;
 800fd68:	eb03 000b 	add.w	r0, r3, fp
          wrap_bytes -= remrem;
 800fd6c:	b2a4      	uxth	r4, r4
          while(remrem--) *dst_u8++ = *ff_buf++;
 800fd6e:	f1ba 0f00 	cmp.w	sl, #0
 800fd72:	d003      	beq.n	800fd7c <tu_fifo_read_n_const_addr_full_words+0x10c>
 800fd74:	4641      	mov	r1, r8
 800fd76:	4490      	add	r8, r2
 800fd78:	f003 fa24 	bl	80131c4 <memcpy>
          *reg_tx = tmp32;
 800fd7c:	9b01      	ldr	r3, [sp, #4]
 800fd7e:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800fd80:	2c00      	cmp	r4, #0
 800fd82:	d0b5      	beq.n	800fcf0 <tu_fifo_read_n_const_addr_full_words+0x80>
  while(full_words--)
 800fd84:	08a1      	lsrs	r1, r4, #2
 800fd86:	d02b      	beq.n	800fde0 <tu_fifo_read_n_const_addr_full_words+0x170>
 800fd88:	eb08 0181 	add.w	r1, r8, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fd8c:	f858 3b04 	ldr.w	r3, [r8], #4
 800fd90:	4588      	cmp	r8, r1
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fd92:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fd94:	d1fa      	bne.n	800fd8c <tu_fifo_read_n_const_addr_full_words+0x11c>
  if ( bytes_rem )
 800fd96:	f014 0203 	ands.w	r2, r4, #3
 800fd9a:	d0a9      	beq.n	800fcf0 <tu_fifo_read_n_const_addr_full_words+0x80>
    uint32_t tmp32 = 0;
 800fd9c:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fd9e:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 800fda0:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fda2:	f003 fa0f 	bl	80131c4 <memcpy>
    *reg_tx = tmp32;
 800fda6:	9b01      	ldr	r3, [sp, #4]
 800fda8:	603b      	str	r3, [r7, #0]
 800fdaa:	e7a1      	b.n	800fcf0 <tu_fifo_read_n_const_addr_full_words+0x80>
  if ( wr_idx >= f->depth )
 800fdac:	4281      	cmp	r1, r0
  f->rd_idx = rd_idx;
 800fdae:	4605      	mov	r5, r0
    rd_idx = wr_idx - f->depth;
 800fdb0:	bf2c      	ite	cs
 800fdb2:	1a09      	subcs	r1, r1, r0
    rd_idx = wr_idx + f->depth;
 800fdb4:	1809      	addcc	r1, r1, r0
 800fdb6:	b28b      	uxth	r3, r1
  f->rd_idx = rd_idx;
 800fdb8:	8173      	strh	r3, [r6, #10]
    cnt = f->depth;
 800fdba:	e770      	b.n	800fc9e <tu_fifo_read_n_const_addr_full_words+0x2e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fdbc:	8973      	ldrh	r3, [r6, #10]
 800fdbe:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fdc0:	454b      	cmp	r3, r9
 800fdc2:	da9b      	bge.n	800fcfc <tu_fifo_read_n_const_addr_full_words+0x8c>
}
 800fdc4:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fdc6:	8173      	strh	r3, [r6, #10]
}
 800fdc8:	b003      	add	sp, #12
 800fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fdce:	ebc3 0540 	rsb	r5, r3, r0, lsl #1
 800fdd2:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fdd6:	440d      	add	r5, r1
 800fdd8:	b2ad      	uxth	r5, r5
 800fdda:	e75a      	b.n	800fc92 <tu_fifo_read_n_const_addr_full_words+0x22>
  while(full_words--)
 800fddc:	4661      	mov	r1, ip
 800fdde:	e784      	b.n	800fcea <tu_fifo_read_n_const_addr_full_words+0x7a>
 800fde0:	4641      	mov	r1, r8
 800fde2:	e7d8      	b.n	800fd96 <tu_fifo_read_n_const_addr_full_words+0x126>

0800fde4 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800fde4:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800fde6:	8905      	ldrh	r5, [r0, #8]
{
 800fde8:	4604      	mov	r4, r0
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fdea:	8903      	ldrh	r3, [r0, #8]
 800fdec:	8940      	ldrh	r0, [r0, #10]
  uint16_t const wr_idx = f->wr_idx;
 800fdee:	b2ad      	uxth	r5, r5
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	88a2      	ldrh	r2, [r4, #4]
 800fdf4:	b280      	uxth	r0, r0
  if (wr_idx >= rd_idx)
 800fdf6:	4283      	cmp	r3, r0
 800fdf8:	d320      	bcc.n	800fe3c <tu_fifo_write+0x58>
    return (uint16_t) (wr_idx - rd_idx);
 800fdfa:	1a1b      	subs	r3, r3, r0
 800fdfc:	b29b      	uxth	r3, r3

  if ( tu_fifo_full(f) && !f->overwritable )
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d802      	bhi.n	800fe08 <tu_fifo_write+0x24>
 800fe02:	79e0      	ldrb	r0, [r4, #7]
 800fe04:	09c0      	lsrs	r0, r0, #7
 800fe06:	d018      	beq.n	800fe3a <tu_fifo_write+0x56>
  while ( idx >= depth ) idx -= depth;
 800fe08:	4295      	cmp	r5, r2
 800fe0a:	462b      	mov	r3, r5
 800fe0c:	d303      	bcc.n	800fe16 <tu_fifo_write+0x32>
 800fe0e:	1a9b      	subs	r3, r3, r2
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d2fb      	bcs.n	800fe0e <tu_fifo_write+0x2a>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800fe16:	88e2      	ldrh	r2, [r4, #6]
 800fe18:	6820      	ldr	r0, [r4, #0]
 800fe1a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fe1e:	fb02 0003 	mla	r0, r2, r3, r0
 800fe22:	f003 f9cf 	bl	80131c4 <memcpy>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fe26:	1c6b      	adds	r3, r5, #1

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fe28:	88a2      	ldrh	r2, [r4, #4]
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fe2a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fe2c:	0051      	lsls	r1, r2, #1
 800fe2e:	429d      	cmp	r5, r3
 800fe30:	d909      	bls.n	800fe46 <tu_fifo_write+0x62>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fe32:	1a5b      	subs	r3, r3, r1
 800fe34:	b29b      	uxth	r3, r3

    ret = true;
 800fe36:	2001      	movs	r0, #1
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fe38:	8123      	strh	r3, [r4, #8]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fe3c:	ebc0 0042 	rsb	r0, r0, r2, lsl #1
 800fe40:	4403      	add	r3, r0
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	e7db      	b.n	800fdfe <tu_fifo_write+0x1a>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fe46:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fe4a:	dbf4      	blt.n	800fe36 <tu_fifo_write+0x52>
 800fe4c:	e7f1      	b.n	800fe32 <tu_fifo_write+0x4e>
 800fe4e:	bf00      	nop

0800fe50 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	d043      	beq.n	800fee2 <tu_fifo_write_n+0x92>
  uint16_t wr_idx = f->wr_idx;
 800fe5a:	8907      	ldrh	r7, [r0, #8]
 800fe5c:	4606      	mov	r6, r0
  uint16_t rd_idx = f->rd_idx;
 800fe5e:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fe60:	79c0      	ldrb	r0, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fe62:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fe64:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fe66:	09c0      	lsrs	r0, r0, #7
 800fe68:	d141      	bne.n	800feee <tu_fifo_write_n+0x9e>
  if (wr_idx >= rd_idx)
 800fe6a:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fe6c:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 800fe6e:	d254      	bcs.n	800ff1a <tu_fifo_write_n+0xca>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fe70:	ebc3 0345 	rsb	r3, r3, r5, lsl #1
 800fe74:	443b      	add	r3, r7
 800fe76:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fe78:	429d      	cmp	r5, r3
 800fe7a:	d932      	bls.n	800fee2 <tu_fifo_write_n+0x92>
 800fe7c:	1aeb      	subs	r3, r5, r3
 800fe7e:	f8b6 a006 	ldrh.w	sl, [r6, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	4293      	cmp	r3, r2
 800fe86:	bf28      	it	cs
 800fe88:	4613      	movcs	r3, r2
 800fe8a:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fe8c:	eb08 0907 	add.w	r9, r8, r7
 800fe90:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fe94:	42bd      	cmp	r5, r7
 800fe96:	463c      	mov	r4, r7
 800fe98:	d803      	bhi.n	800fea2 <tu_fifo_write_n+0x52>
 800fe9a:	1b64      	subs	r4, r4, r5
 800fe9c:	b2a4      	uxth	r4, r4
 800fe9e:	42ac      	cmp	r4, r5
 800fea0:	d2fb      	bcs.n	800fe9a <tu_fifo_write_n+0x4a>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fea2:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fea4:	f3ca 020e 	ubfx	r2, sl, #0, #15
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fea8:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 800feaa:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800feac:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800feae:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 800feb2:	4543      	cmp	r3, r8
 800feb4:	d342      	bcc.n	800ff3c <tu_fifo_write_n+0xec>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800feb6:	fb02 f208 	mul.w	r2, r2, r8
 800feba:	f003 f983 	bl	80131c4 <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800febe:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fec0:	454f      	cmp	r7, r9
 800fec2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800fec6:	d802      	bhi.n	800fece <tu_fifo_write_n+0x7e>
 800fec8:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 800fecc:	db03      	blt.n	800fed6 <tu_fifo_write_n+0x86>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fece:	eba9 0303 	sub.w	r3, r9, r3
 800fed2:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800fed6:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fed8:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 800fedc:	b003      	add	sp, #12
 800fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fee2:	f04f 0800 	mov.w	r8, #0
}
 800fee6:	4640      	mov	r0, r8
 800fee8:	b003      	add	sp, #12
 800feea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800feee:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800fef2:	4542      	cmp	r2, r8
 800fef4:	d214      	bcs.n	800ff20 <tu_fifo_write_n+0xd0>
  if (wr_idx >= rd_idx)
 800fef6:	429f      	cmp	r7, r3
 800fef8:	d34e      	bcc.n	800ff98 <tu_fifo_write_n+0x148>
    return (uint16_t) (wr_idx - rd_idx);
 800fefa:	1af8      	subs	r0, r7, r3
 800fefc:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800ff00:	b280      	uxth	r0, r0
      if (overflowable_count + n >= 2*f->depth)
 800ff02:	4410      	add	r0, r2
 800ff04:	42a0      	cmp	r0, r4
 800ff06:	da2d      	bge.n	800ff64 <tu_fifo_write_n+0x114>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ff08:	eb02 0907 	add.w	r9, r2, r7
 800ff0c:	4645      	mov	r5, r8
 800ff0e:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800ff12:	4690      	mov	r8, r2
 800ff14:	fa1f f989 	uxth.w	r9, r9
 800ff18:	e7bc      	b.n	800fe94 <tu_fifo_write_n+0x44>
    return (uint16_t) (wr_idx - rd_idx);
 800ff1a:	1afb      	subs	r3, r7, r3
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	e7ab      	b.n	800fe78 <tu_fifo_write_n+0x28>
        buf8 += (n - f->depth) * f->item_size;
 800ff20:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800ff24:	eba2 0208 	sub.w	r2, r2, r8
 800ff28:	f3ca 000e 	ubfx	r0, sl, #0, #15
 800ff2c:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 800ff30:	f1b8 0f00 	cmp.w	r8, #0
 800ff34:	d0d7      	beq.n	800fee6 <tu_fifo_write_n+0x96>
  uint16_t rd_idx = f->rd_idx;
 800ff36:	461f      	mov	r7, r3
 800ff38:	4645      	mov	r5, r8
 800ff3a:	e7a7      	b.n	800fe8c <tu_fifo_write_n+0x3c>
  uint16_t lin_bytes = lin_count * f->item_size;
 800ff3c:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count;
 800ff40:	eba8 0505 	sub.w	r5, r8, r5
        memcpy(ff_buf, app_buf, lin_bytes);
 800ff44:	9101      	str	r1, [sp, #4]
 800ff46:	fa1f fb83 	uxth.w	fp, r3
 800ff4a:	465a      	mov	r2, fp
 800ff4c:	f003 f93a 	bl	80131c4 <memcpy>
  uint16_t const wrap_count = n - lin_count;
 800ff50:	1962      	adds	r2, r4, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800ff52:	9901      	ldr	r1, [sp, #4]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800ff54:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800ff58:	6830      	ldr	r0, [r6, #0]
 800ff5a:	4459      	add	r1, fp
 800ff5c:	b292      	uxth	r2, r2
 800ff5e:	f003 f931 	bl	80131c4 <memcpy>
 800ff62:	e7ac      	b.n	800febe <tu_fifo_write_n+0x6e>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800ff64:	eb03 0908 	add.w	r9, r3, r8
 800ff68:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ff6c:	eba9 0702 	sub.w	r7, r9, r2
 800ff70:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800ff72:	42bb      	cmp	r3, r7
 800ff74:	d806      	bhi.n	800ff84 <tu_fifo_write_n+0x134>
 800ff76:	42bc      	cmp	r4, r7
 800ff78:	dd04      	ble.n	800ff84 <tu_fifo_write_n+0x134>
 800ff7a:	4645      	mov	r5, r8
 800ff7c:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800ff80:	4690      	mov	r8, r2
 800ff82:	e787      	b.n	800fe94 <tu_fifo_write_n+0x44>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800ff84:	1b3c      	subs	r4, r7, r4
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ff86:	4645      	mov	r5, r8
 800ff88:	4690      	mov	r8, r2
 800ff8a:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800ff8e:	b2a7      	uxth	r7, r4
 800ff90:	443a      	add	r2, r7
 800ff92:	fa1f f982 	uxth.w	r9, r2
 800ff96:	e77d      	b.n	800fe94 <tu_fifo_write_n+0x44>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800ff98:	ebc3 0048 	rsb	r0, r3, r8, lsl #1
 800ff9c:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800ffa0:	4438      	add	r0, r7
 800ffa2:	b280      	uxth	r0, r0
 800ffa4:	e7ad      	b.n	800ff02 <tu_fifo_write_n+0xb2>
 800ffa6:	bf00      	nop

0800ffa8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	b085      	sub	sp, #20
  if ( n == 0 ) return 0;
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	d056      	beq.n	8010060 <tu_fifo_write_n_const_addr_full_words+0xb8>
 800ffb2:	460e      	mov	r6, r1
  if ( !f->overwritable )
 800ffb4:	79c1      	ldrb	r1, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800ffb6:	8907      	ldrh	r7, [r0, #8]
 800ffb8:	4605      	mov	r5, r0
  uint16_t rd_idx = f->rd_idx;
 800ffba:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800ffbc:	09c9      	lsrs	r1, r1, #7
  uint16_t wr_idx = f->wr_idx;
 800ffbe:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800ffc0:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800ffc2:	d153      	bne.n	801006c <tu_fifo_write_n_const_addr_full_words+0xc4>
  if (wr_idx >= rd_idx)
 800ffc4:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800ffc6:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  if (wr_idx >= rd_idx)
 800ffca:	d263      	bcs.n	8010094 <tu_fifo_write_n_const_addr_full_words+0xec>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800ffcc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 800ffd0:	443b      	add	r3, r7
 800ffd2:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800ffd4:	459c      	cmp	ip, r3
 800ffd6:	d943      	bls.n	8010060 <tu_fifo_write_n_const_addr_full_words+0xb8>
 800ffd8:	ebac 0303 	sub.w	r3, ip, r3
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	bf28      	it	cs
 800ffe2:	4613      	movcs	r3, r2
 800ffe4:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ffe6:	eb08 0907 	add.w	r9, r8, r7
 800ffea:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800ffee:	45bc      	cmp	ip, r7
 800fff0:	463b      	mov	r3, r7
 800fff2:	d804      	bhi.n	800fffe <tu_fifo_write_n_const_addr_full_words+0x56>
 800fff4:	eba3 030c 	sub.w	r3, r3, ip
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4563      	cmp	r3, ip
 800fffc:	d2fa      	bcs.n	800fff4 <tu_fifo_write_n_const_addr_full_words+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fffe:	ebac 0003 	sub.w	r0, ip, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 8010002:	88e9      	ldrh	r1, [r5, #6]
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8010004:	f8d5 a000 	ldr.w	sl, [r5]
  uint16_t const lin_count = f->depth - wr_ptr;
 8010008:	b280      	uxth	r0, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 801000a:	f3c1 0e0e 	ubfx	lr, r1, #0, #15
      if(n <= lin_count)
 801000e:	4540      	cmp	r0, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 8010010:	4671      	mov	r1, lr
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8010012:	fb0e ae03 	mla	lr, lr, r3, sl
      if(n <= lin_count)
 8010016:	d346      	bcc.n	80100a6 <tu_fifo_write_n_const_addr_full_words+0xfe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8010018:	fb11 f208 	smulbb	r2, r1, r8
  uint16_t full_words = len >> 2;
 801001c:	f3c2 008d 	ubfx	r0, r2, #2, #14
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8010020:	b292      	uxth	r2, r2
  while(full_words--)
 8010022:	2800      	cmp	r0, #0
 8010024:	f000 80ac 	beq.w	8010180 <tu_fifo_write_n_const_addr_full_words+0x1d8>
 8010028:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 801002c:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 801002e:	f84e 3b04 	str.w	r3, [lr], #4
  while(full_words--)
 8010032:	4570      	cmp	r0, lr
 8010034:	d1fa      	bne.n	801002c <tu_fifo_write_n_const_addr_full_words+0x84>
  if ( bytes_rem )
 8010036:	f012 0203 	ands.w	r2, r2, #3
 801003a:	f040 8099 	bne.w	8010170 <tu_fifo_write_n_const_addr_full_words+0x1c8>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 801003e:	45b9      	cmp	r9, r7
 8010040:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8010044:	d302      	bcc.n	801004c <tu_fifo_write_n_const_addr_full_words+0xa4>
 8010046:	ebb9 0f4c 	cmp.w	r9, ip, lsl #1
 801004a:	db03      	blt.n	8010054 <tu_fifo_write_n_const_addr_full_words+0xac>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 801004c:	eba9 0303 	sub.w	r3, r9, r3
 8010050:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 8010054:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8010056:	f8a5 9008 	strh.w	r9, [r5, #8]
}
 801005a:	b005      	add	sp, #20
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 8010060:	f04f 0800 	mov.w	r8, #0
}
 8010064:	4640      	mov	r0, r8
 8010066:	b005      	add	sp, #20
 8010068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 801006c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8010070:	4542      	cmp	r2, r8
 8010072:	d212      	bcs.n	801009a <tu_fifo_write_n_const_addr_full_words+0xf2>
  if (wr_idx >= rd_idx)
 8010074:	429f      	cmp	r7, r3
 8010076:	d368      	bcc.n	801014a <tu_fifo_write_n_const_addr_full_words+0x1a2>
    return (uint16_t) (wr_idx - rd_idx);
 8010078:	1af9      	subs	r1, r7, r3
 801007a:	ea4f 0048 	mov.w	r0, r8, lsl #1
 801007e:	b289      	uxth	r1, r1
      if (overflowable_count + n >= 2*f->depth)
 8010080:	4411      	add	r1, r2
 8010082:	4281      	cmp	r1, r0
 8010084:	da4b      	bge.n	801011e <tu_fifo_write_n_const_addr_full_words+0x176>
  uint16_t new_idx = (uint16_t) (idx + offset);
 8010086:	eb02 0907 	add.w	r9, r2, r7
 801008a:	46c4      	mov	ip, r8
 801008c:	4690      	mov	r8, r2
 801008e:	fa1f f989 	uxth.w	r9, r9
 8010092:	e7ac      	b.n	800ffee <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 8010094:	1afb      	subs	r3, r7, r3
 8010096:	b29b      	uxth	r3, r3
 8010098:	e79c      	b.n	800ffd4 <tu_fifo_write_n_const_addr_full_words+0x2c>
  if (n)
 801009a:	f1b8 0f00 	cmp.w	r8, #0
 801009e:	d0e1      	beq.n	8010064 <tu_fifo_write_n_const_addr_full_words+0xbc>
 80100a0:	46c4      	mov	ip, r8
  uint16_t rd_idx = f->rd_idx;
 80100a2:	461f      	mov	r7, r3
 80100a4:	e79f      	b.n	800ffe6 <tu_fifo_write_n_const_addr_full_words+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 80100a6:	fb10 f001 	smulbb	r0, r0, r1
 80100aa:	b280      	uxth	r0, r0
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80100ac:	f020 0203 	bic.w	r2, r0, #3
 80100b0:	b294      	uxth	r4, r2
  while(full_words--)
 80100b2:	ea4f 0b92 	mov.w	fp, r2, lsr #2
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80100b6:	9401      	str	r4, [sp, #4]
  while(full_words--)
 80100b8:	b13a      	cbz	r2, 80100ca <tu_fifo_write_n_const_addr_full_words+0x122>
 80100ba:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 80100be:	4672      	mov	r2, lr
    tu_unaligned_write32(ff_buf, *reg_rx);
 80100c0:	6834      	ldr	r4, [r6, #0]
 80100c2:	f842 4b04 	str.w	r4, [r2], #4
  while(full_words--)
 80100c6:	4593      	cmp	fp, r2
 80100c8:	d1fa      	bne.n	80100c0 <tu_fifo_write_n_const_addr_full_words+0x118>
  uint16_t const wrap_count = n - lin_count;
 80100ca:	eba8 040c 	sub.w	r4, r8, ip
        if (rem > 0)
 80100ce:	f010 0b03 	ands.w	fp, r0, #3
  uint16_t const wrap_count = n - lin_count;
 80100d2:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80100d4:	fb14 f401 	smulbb	r4, r4, r1
 80100d8:	b2a4      	uxth	r4, r4
        if (rem > 0)
 80100da:	d01c      	beq.n	8010116 <tu_fifo_write_n_const_addr_full_words+0x16e>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80100dc:	f1cb 0304 	rsb	r3, fp, #4
          while(rem--) *ff_buf++ = *src_u8++;
 80100e0:	9801      	ldr	r0, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 80100e2:	6832      	ldr	r2, [r6, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 80100e4:	a903      	add	r1, sp, #12
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4470      	add	r0, lr
          uint32_t tmp32 = *rx_fifo;
 80100ea:	9203      	str	r2, [sp, #12]
          while(rem--) *ff_buf++ = *src_u8++;
 80100ec:	465a      	mov	r2, fp
 80100ee:	42a3      	cmp	r3, r4
 80100f0:	bf28      	it	cs
 80100f2:	4623      	movcs	r3, r4
          wrap_bytes -= remrem;
 80100f4:	1ae4      	subs	r4, r4, r3
 80100f6:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 80100f8:	f003 f864 	bl	80131c4 <memcpy>
 80100fc:	ab03      	add	r3, sp, #12
          wrap_bytes -= remrem;
 80100fe:	b2a4      	uxth	r4, r4
          ff_buf = f->buffer;
 8010100:	f8d5 a000 	ldr.w	sl, [r5]
          while(rem--) *ff_buf++ = *src_u8++;
 8010104:	eb03 010b 	add.w	r1, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8010108:	9b01      	ldr	r3, [sp, #4]
 801010a:	b2da      	uxtb	r2, r3
          while(remrem--) *ff_buf++ = *src_u8++;
 801010c:	b11b      	cbz	r3, 8010116 <tu_fifo_write_n_const_addr_full_words+0x16e>
 801010e:	4650      	mov	r0, sl
 8010110:	4492      	add	sl, r2
 8010112:	f003 f857 	bl	80131c4 <memcpy>
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8010116:	b9fc      	cbnz	r4, 8010158 <tu_fifo_write_n_const_addr_full_words+0x1b0>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8010118:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801011c:	e78f      	b.n	801003e <tu_fifo_write_n_const_addr_full_words+0x96>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 801011e:	eb03 0908 	add.w	r9, r3, r8
 8010122:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 8010126:	eba9 0702 	sub.w	r7, r9, r2
 801012a:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 801012c:	42bb      	cmp	r3, r7
 801012e:	d804      	bhi.n	801013a <tu_fifo_write_n_const_addr_full_words+0x192>
 8010130:	42b8      	cmp	r0, r7
 8010132:	dd02      	ble.n	801013a <tu_fifo_write_n_const_addr_full_words+0x192>
 8010134:	46c4      	mov	ip, r8
 8010136:	4690      	mov	r8, r2
 8010138:	e759      	b.n	800ffee <tu_fifo_write_n_const_addr_full_words+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 801013a:	1a38      	subs	r0, r7, r0
  uint16_t new_idx = (uint16_t) (idx + offset);
 801013c:	46c4      	mov	ip, r8
 801013e:	4690      	mov	r8, r2
 8010140:	b287      	uxth	r7, r0
 8010142:	443a      	add	r2, r7
 8010144:	fa1f f982 	uxth.w	r9, r2
 8010148:	e751      	b.n	800ffee <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801014a:	ebc3 0148 	rsb	r1, r3, r8, lsl #1
 801014e:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8010152:	4439      	add	r1, r7
 8010154:	b289      	uxth	r1, r1
 8010156:	e793      	b.n	8010080 <tu_fifo_write_n_const_addr_full_words+0xd8>
  while(full_words--)
 8010158:	08a0      	lsrs	r0, r4, #2
 801015a:	d00f      	beq.n	801017c <tu_fifo_write_n_const_addr_full_words+0x1d4>
 801015c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 8010160:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8010162:	f84a 3b04 	str.w	r3, [sl], #4
  while(full_words--)
 8010166:	4582      	cmp	sl, r0
 8010168:	d1fa      	bne.n	8010160 <tu_fifo_write_n_const_addr_full_words+0x1b8>
  if ( bytes_rem )
 801016a:	f014 0203 	ands.w	r2, r4, #3
 801016e:	d0d3      	beq.n	8010118 <tu_fifo_write_n_const_addr_full_words+0x170>
    uint32_t tmp32 = *reg_rx;
 8010170:	6833      	ldr	r3, [r6, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8010172:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *reg_rx;
 8010174:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8010176:	f003 f825 	bl	80131c4 <memcpy>
 801017a:	e7cd      	b.n	8010118 <tu_fifo_write_n_const_addr_full_words+0x170>
  while(full_words--)
 801017c:	4650      	mov	r0, sl
 801017e:	e7f4      	b.n	801016a <tu_fifo_write_n_const_addr_full_words+0x1c2>
 8010180:	4670      	mov	r0, lr
 8010182:	e758      	b.n	8010036 <tu_fifo_write_n_const_addr_full_words+0x8e>

08010184 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8010184:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8010186:	2200      	movs	r2, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 8010188:	2001      	movs	r0, #1
  f->rd_idx = 0;
 801018a:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 801018c:	811a      	strh	r2, [r3, #8]
}
 801018e:	4770      	bx	lr

08010190 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8010190:	4603      	mov	r3, r0

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 8010192:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 8010194:	79da      	ldrb	r2, [r3, #7]
 8010196:	f361 12c7 	bfi	r2, r1, #7, #1
 801019a:	71da      	strb	r2, [r3, #7]
}
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop

080101a0 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 80101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a4:	4b29      	ldr	r3, [pc, #164]	; (801024c <configuration_reset+0xac>)
 80101a6:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80101a8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801025c <configuration_reset+0xbc>
 80101ac:	f898 2000 	ldrb.w	r2, [r8]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d03a      	beq.n	801022a <configuration_reset+0x8a>
 80101b4:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101b6:	4d26      	ldr	r5, [pc, #152]	; (8010250 <configuration_reset+0xb0>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101b8:	4e26      	ldr	r6, [pc, #152]	; (8010254 <configuration_reset+0xb4>)
    drvid -= _app_driver_count;
 80101ba:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101bc:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 80101be:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101c0:	d83d      	bhi.n	801023e <configuration_reset+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101c8:	d908      	bls.n	80101dc <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 80101ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80101ce:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80101d2:	07db      	lsls	r3, r3, #31
 80101d4:	d500      	bpl.n	80101d8 <configuration_reset+0x38>
 80101d6:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 80101d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	4638      	mov	r0, r7
 80101e4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80101e6:	3401      	adds	r4, #1
 80101e8:	f898 2000 	ldrb.w	r2, [r8]
 80101ec:	b2e4      	uxtb	r4, r4
 80101ee:	1c53      	adds	r3, r2, #1
 80101f0:	42a3      	cmp	r3, r4
 80101f2:	dae2      	bge.n	80101ba <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 80101f4:	4b18      	ldr	r3, [pc, #96]	; (8010258 <configuration_reset+0xb8>)
 80101f6:	2237      	movs	r2, #55	; 0x37
 80101f8:	2100      	movs	r1, #0
 80101fa:	4618      	mov	r0, r3
 80101fc:	f002 feef 	bl	8012fde <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8010200:	f04f 32ff 	mov.w	r2, #4294967295
 8010204:	f8c0 2003 	str.w	r2, [r0, #3]
 8010208:	f8c0 2007 	str.w	r2, [r0, #7]
 801020c:	f8c0 200b 	str.w	r2, [r0, #11]
 8010210:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8010214:	f8c0 2013 	str.w	r2, [r0, #19]
 8010218:	f8c0 2017 	str.w	r2, [r0, #23]
 801021c:	f8c0 201b 	str.w	r2, [r0, #27]
 8010220:	f8c0 201f 	str.w	r2, [r0, #31]
 8010224:	f8a0 2023 	strh.w	r2, [r0, #35]	; 0x23
 8010228:	e7d6      	b.n	80101d8 <configuration_reset+0x38>
    driver->reset(rhport);
 801022a:	f7ff fa7f 	bl	800f72c <cdcd_reset>
 801022e:	4638      	mov	r0, r7
 8010230:	f7fe fdf6 	bl	800ee20 <audiod_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8010234:	f898 3000 	ldrb.w	r3, [r8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1c6      	bne.n	80101ca <configuration_reset+0x2a>
 801023c:	e7da      	b.n	80101f4 <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801023e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010242:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver, );
 8010244:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 8010248:	d1ca      	bne.n	80101e0 <configuration_reset+0x40>
 801024a:	e7be      	b.n	80101ca <configuration_reset+0x2a>
 801024c:	00000000 	.word	0x00000000
 8010250:	08019838 	.word	0x08019838
 8010254:	2400d29c 	.word	0x2400d29c
 8010258:	2400d2a4 	.word	0x2400d2a4
 801025c:	2400d2a0 	.word	0x2400d2a0

08010260 <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 8010260:	4b03      	ldr	r3, [pc, #12]	; (8010270 <usbd_int_set+0x10>)
  if (enabled)
 8010262:	b110      	cbz	r0, 801026a <usbd_int_set+0xa>
    dcd_int_enable(_usbd_rhport);
 8010264:	7818      	ldrb	r0, [r3, #0]
 8010266:	f000 bff9 	b.w	801125c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 801026a:	7818      	ldrb	r0, [r3, #0]
 801026c:	f000 bffc 	b.w	8011268 <dcd_int_disable>
 8010270:	24000350 	.word	0x24000350

08010274 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 8010274:	4b02      	ldr	r3, [pc, #8]	; (8010280 <tud_mounted+0xc>)
 8010276:	7858      	ldrb	r0, [r3, #1]
}
 8010278:	3800      	subs	r0, #0
 801027a:	bf18      	it	ne
 801027c:	2001      	movne	r0, #1
 801027e:	4770      	bx	lr
 8010280:	2400d2a4 	.word	0x2400d2a4

08010284 <tud_suspended>:
  return _usbd_dev.suspended;
 8010284:	4b02      	ldr	r3, [pc, #8]	; (8010290 <tud_suspended+0xc>)
 8010286:	7818      	ldrb	r0, [r3, #0]
}
 8010288:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	2400d2a4 	.word	0x2400d2a4

08010294 <tud_init>:
{
 8010294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010298:	4f2e      	ldr	r7, [pc, #184]	; (8010354 <tud_init+0xc0>)
  if ( tud_inited() ) return true;
 801029a:	783b      	ldrb	r3, [r7, #0]
 801029c:	2bff      	cmp	r3, #255	; 0xff
 801029e:	d002      	beq.n	80102a6 <tud_init+0x12>
 80102a0:	2001      	movs	r0, #1
}
 80102a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80102a6:	4e2c      	ldr	r6, [pc, #176]	; (8010358 <tud_init+0xc4>)
  tu_varclr(&_usbd_dev);
 80102a8:	2237      	movs	r2, #55	; 0x37
 80102aa:	2100      	movs	r1, #0
 80102ac:	4604      	mov	r4, r0
 80102ae:	482b      	ldr	r0, [pc, #172]	; (801035c <tud_init+0xc8>)
 80102b0:	f002 fe95 	bl	8012fde <memset>
 80102b4:	1d30      	adds	r0, r6, #4
 80102b6:	f7ff ff65 	bl	8010184 <tu_fifo_clear>
  if ( usbd_app_driver_get_cb )
 80102ba:	4d29      	ldr	r5, [pc, #164]	; (8010360 <tud_init+0xcc>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80102bc:	4b29      	ldr	r3, [pc, #164]	; (8010364 <tud_init+0xd0>)
 80102be:	601e      	str	r6, [r3, #0]
  if ( usbd_app_driver_get_cb )
 80102c0:	b125      	cbz	r5, 80102cc <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80102c2:	4829      	ldr	r0, [pc, #164]	; (8010368 <tud_init+0xd4>)
 80102c4:	f3af 8000 	nop.w
 80102c8:	4b28      	ldr	r3, [pc, #160]	; (801036c <tud_init+0xd8>)
 80102ca:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80102cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8010368 <tud_init+0xd4>
 80102d0:	f899 2000 	ldrb.w	r2, [r9]
 80102d4:	b36d      	cbz	r5, 8010332 <tud_init+0x9e>
 80102d6:	f04f 0800 	mov.w	r8, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80102da:	4d25      	ldr	r5, [pc, #148]	; (8010370 <tud_init+0xdc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80102dc:	4e23      	ldr	r6, [pc, #140]	; (801036c <tud_init+0xd8>)
    drvid -= _app_driver_count;
 80102de:	eba8 0302 	sub.w	r3, r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80102e2:	4542      	cmp	r2, r8
    drvid -= _app_driver_count;
 80102e4:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80102e6:	d82d      	bhi.n	8010344 <tud_init+0xb0>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80102ee:	d90a      	bls.n	8010306 <tud_init+0x72>
    TU_ASSERT(driver);
 80102f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102f4:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 80102f8:	f010 0001 	ands.w	r0, r0, #1
 80102fc:	d0d1      	beq.n	80102a2 <tud_init+0xe>
 80102fe:	be00      	bkpt	0x0000
 8010300:	2000      	movs	r0, #0
}
 8010302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010306:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->init();
 801030a:	681b      	ldr	r3, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 801030c:	f108 0801 	add.w	r8, r8, #1
    driver->init();
 8010310:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010312:	f899 2000 	ldrb.w	r2, [r9]
 8010316:	fa5f f888 	uxtb.w	r8, r8
 801031a:	1c53      	adds	r3, r2, #1
 801031c:	4543      	cmp	r3, r8
 801031e:	dade      	bge.n	80102de <tud_init+0x4a>
  dcd_init(rhport);
 8010320:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 8010322:	703c      	strb	r4, [r7, #0]
  dcd_init(rhport);
 8010324:	f000 fff4 	bl	8011310 <dcd_init>
  dcd_int_enable(rhport);
 8010328:	4620      	mov	r0, r4
 801032a:	f000 ff97 	bl	801125c <dcd_int_enable>
  return true;
 801032e:	2001      	movs	r0, #1
 8010330:	e7b7      	b.n	80102a2 <tud_init+0xe>
    driver->init();
 8010332:	f7ff f9d3 	bl	800f6dc <cdcd_init>
 8010336:	f7fe fd45 	bl	800edc4 <audiod_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 801033a:	f899 3000 	ldrb.w	r3, [r9]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1d6      	bne.n	80102f0 <tud_init+0x5c>
 8010342:	e7ed      	b.n	8010320 <tud_init+0x8c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010344:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8010348:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver);
 801034a:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 801034e:	d1dc      	bne.n	801030a <tud_init+0x76>
 8010350:	e7ce      	b.n	80102f0 <tud_init+0x5c>
 8010352:	bf00      	nop
 8010354:	24000350 	.word	0x24000350
 8010358:	24000340 	.word	0x24000340
 801035c:	2400d2a4 	.word	0x2400d2a4
 8010360:	00000000 	.word	0x00000000
 8010364:	2400d2dc 	.word	0x2400d2dc
 8010368:	2400d2a0 	.word	0x2400d2a0
 801036c:	2400d29c 	.word	0x2400d29c
 8010370:	08019838 	.word	0x08019838

08010374 <tud_task_ext>:
{
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010378:	f8df 9310 	ldr.w	r9, [pc, #784]	; 801068c <tud_task_ext+0x318>
{
 801037c:	b08b      	sub	sp, #44	; 0x2c
  if ( !tud_inited() ) return;
 801037e:	f899 3000 	ldrb.w	r3, [r9]
 8010382:	2bff      	cmp	r3, #255	; 0xff
 8010384:	d052      	beq.n	801042c <tud_task_ext+0xb8>
 8010386:	4db9      	ldr	r5, [pc, #740]	; (801066c <tud_task_ext+0x2f8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010388:	f8df a304 	ldr.w	sl, [pc, #772]	; 8010690 <tud_task_ext+0x31c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801038c:	f8df b304 	ldr.w	fp, [pc, #772]	; 8010694 <tud_task_ext+0x320>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8010390:	682e      	ldr	r6, [r5, #0]
  qhdl->interrupt_set(false);
 8010392:	2000      	movs	r0, #0
 8010394:	4634      	mov	r4, r6
 8010396:	f854 3b04 	ldr.w	r3, [r4], #4
 801039a:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 801039c:	a907      	add	r1, sp, #28
 801039e:	4620      	mov	r0, r4
 80103a0:	f7ff fbba 	bl	800fb18 <tu_fifo_read>
 80103a4:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 80103a6:	6833      	ldr	r3, [r6, #0]
 80103a8:	2001      	movs	r0, #1
 80103aa:	4798      	blx	r3
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	d03d      	beq.n	801042c <tud_task_ext+0xb8>
    switch ( event.event_id )
 80103b0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80103b4:	3b01      	subs	r3, #1
 80103b6:	2b07      	cmp	r3, #7
 80103b8:	f200 80c4 	bhi.w	8010544 <tud_task_ext+0x1d0>
 80103bc:	e8df f003 	tbb	[pc, r3]
 80103c0:	94c2aab7 	.word	0x94c2aab7
 80103c4:	040a3981 	.word	0x040a3981
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80103c8:	9b08      	ldr	r3, [sp, #32]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d0e0      	beq.n	8010390 <tud_task_ext+0x1c>
 80103ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103d0:	4798      	blx	r3
 80103d2:	e7dd      	b.n	8010390 <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80103d4:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80103d8:	4ba5      	ldr	r3, [pc, #660]	; (8010670 <tud_task_ext+0x2fc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80103da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80103de:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80103e2:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 80103e6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80103ea:	f36f 0200 	bfc	r2, #0, #1
 80103ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80103f2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80103f6:	f36f 0282 	bfc	r2, #2, #1
 80103fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if ( 0 == epnum )
 80103fe:	2800      	cmp	r0, #0
 8010400:	f000 80bd 	beq.w	801057e <tud_task_ext+0x20a>
  if ( usbd_app_driver_get_cb )
 8010404:	4a9b      	ldr	r2, [pc, #620]	; (8010674 <tud_task_ext+0x300>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8010406:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 8010408:	b132      	cbz	r2, 8010418 <tud_task_ext+0xa4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801040a:	4a9b      	ldr	r2, [pc, #620]	; (8010678 <tud_task_ext+0x304>)
 801040c:	7812      	ldrb	r2, [r2, #0]
 801040e:	4293      	cmp	r3, r2
 8010410:	f0c0 80ad 	bcc.w	801056e <tud_task_ext+0x1fa>
    drvid -= _app_driver_count;
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010418:	2b01      	cmp	r3, #1
 801041a:	f240 809c 	bls.w	8010556 <tud_task_ext+0x1e2>
          TU_ASSERT(driver, );
 801041e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010422:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010426:	07da      	lsls	r2, r3, #31
 8010428:	d500      	bpl.n	801042c <tud_task_ext+0xb8>
 801042a:	be00      	bkpt	0x0000
}
 801042c:	b00b      	add	sp, #44	; 0x2c
 801042e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 8010432:	4c8f      	ldr	r4, [pc, #572]	; (8010670 <tud_task_ext+0x2fc>)
  usbd_control_set_complete_callback(NULL);
 8010434:	2000      	movs	r0, #0
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010436:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 801043a:	7823      	ldrb	r3, [r4, #0]
 801043c:	f043 0301 	orr.w	r3, r3, #1
 8010440:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8010442:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010446:	f36f 0300 	bfc	r3, #0, #1
 801044a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801044e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010452:	f36f 0382 	bfc	r3, #2, #1
 8010456:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 801045a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801045e:	f36f 0300 	bfc	r3, #0, #1
 8010462:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8010466:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801046a:	f36f 0382 	bfc	r3, #2, #1
 801046e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  usbd_control_set_complete_callback(NULL);
 8010472:	f000 fe4b 	bl	801110c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8010476:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801047a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801047e:	2a60      	cmp	r2, #96	; 0x60
 8010480:	d00d      	beq.n	801049e <tud_task_ext+0x12a>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8010482:	2a40      	cmp	r2, #64	; 0x40
 8010484:	f000 8087 	beq.w	8010596 <tud_task_ext+0x222>
  switch ( p_request->bmRequestType_bit.recipient )
 8010488:	f003 031f 	and.w	r3, r3, #31
 801048c:	2b01      	cmp	r3, #1
 801048e:	f000 8103 	beq.w	8010698 <tud_task_ext+0x324>
 8010492:	2b02      	cmp	r3, #2
 8010494:	f000 80b0 	beq.w	80105f8 <tud_task_ext+0x284>
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 808a 	beq.w	80105b2 <tud_task_ext+0x23e>
    default: TU_BREAKPOINT(); return false;
 801049e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80104a2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80104a6:	07d9      	lsls	r1, r3, #31
 80104a8:	d500      	bpl.n	80104ac <tud_task_ext+0x138>
 80104aa:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 80104ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80104b0:	2100      	movs	r1, #0
 80104b2:	f001 fa8b 	bl	80119cc <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80104b6:	2180      	movs	r1, #128	; 0x80
 80104b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80104bc:	f001 fa86 	bl	80119cc <dcd_edpt_stall>
 80104c0:	e766      	b.n	8010390 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 80104c2:	4a6b      	ldr	r2, [pc, #428]	; (8010670 <tud_task_ext+0x2fc>)
          if (tud_resume_cb) tud_resume_cb();
 80104c4:	f04f 0301 	mov.w	r3, #1
 80104c8:	496c      	ldr	r1, [pc, #432]	; (801067c <tud_task_ext+0x308>)
        if ( _usbd_dev.connected )
 80104ca:	7812      	ldrb	r2, [r2, #0]
 80104cc:	f002 0201 	and.w	r2, r2, #1
          if (tud_resume_cb) tud_resume_cb();
 80104d0:	2900      	cmp	r1, #0
 80104d2:	d05e      	beq.n	8010592 <tud_task_ext+0x21e>
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f43f af5a 	beq.w	8010390 <tud_task_ext+0x1c>
 80104dc:	2a00      	cmp	r2, #0
 80104de:	f43f af57 	beq.w	8010390 <tud_task_ext+0x1c>
 80104e2:	f7f4 f9d7 	bl	8004894 <tud_resume_cb>
 80104e6:	e753      	b.n	8010390 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 80104e8:	4c61      	ldr	r4, [pc, #388]	; (8010670 <tud_task_ext+0x2fc>)
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80104ea:	f04f 0301 	mov.w	r3, #1
 80104ee:	4964      	ldr	r1, [pc, #400]	; (8010680 <tud_task_ext+0x30c>)
        if ( _usbd_dev.connected )
 80104f0:	7822      	ldrb	r2, [r4, #0]
 80104f2:	f002 0201 	and.w	r2, r2, #1
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80104f6:	2900      	cmp	r1, #0
 80104f8:	d049      	beq.n	801058e <tud_task_ext+0x21a>
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f43f af47 	beq.w	8010390 <tud_task_ext+0x1c>
 8010502:	2a00      	cmp	r2, #0
 8010504:	f43f af44 	beq.w	8010390 <tud_task_ext+0x1c>
 8010508:	7820      	ldrb	r0, [r4, #0]
 801050a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801050e:	f7f4 f9bf 	bl	8004890 <tud_suspend_cb>
 8010512:	e73d      	b.n	8010390 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 8010514:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010518:	f7ff fe42 	bl	80101a0 <configuration_reset>
  usbd_control_reset();
 801051c:	f000 fdec 	bl	80110f8 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8010520:	4b58      	ldr	r3, [pc, #352]	; (8010684 <tud_task_ext+0x310>)
 8010522:	2b00      	cmp	r3, #0
 8010524:	f43f af34 	beq.w	8010390 <tud_task_ext+0x1c>
 8010528:	f7f4 f9b0 	bl	800488c <tud_umount_cb>
 801052c:	e730      	b.n	8010390 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 801052e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010532:	f7ff fe35 	bl	80101a0 <configuration_reset>
  usbd_control_reset();
 8010536:	f000 fddf 	bl	80110f8 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 801053a:	4b4d      	ldr	r3, [pc, #308]	; (8010670 <tud_task_ext+0x2fc>)
 801053c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8010540:	709a      	strb	r2, [r3, #2]
      break;
 8010542:	e725      	b.n	8010390 <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 8010544:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010548:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801054c:	07db      	lsls	r3, r3, #31
 801054e:	f57f af1f 	bpl.w	8010390 <tud_task_ext+0x1c>
 8010552:	be00      	bkpt	0x0000
  {
 8010554:	e71c      	b.n	8010390 <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801055a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 801055e:	691c      	ldr	r4, [r3, #16]
 8010560:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010566:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801056a:	47a0      	blx	r4
 801056c:	e710      	b.n	8010390 <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801056e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010572:	f8db 2000 	ldr.w	r2, [fp]
          TU_ASSERT(driver, );
 8010576:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 801057a:	d1f0      	bne.n	801055e <tud_task_ext+0x1ea>
 801057c:	e74f      	b.n	801041e <tud_task_ext+0xaa>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 801057e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010580:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010584:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010588:	f000 fdd6 	bl	8011138 <usbd_control_xfer_cb>
 801058c:	e700      	b.n	8010390 <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801058e:	460b      	mov	r3, r1
 8010590:	e7b3      	b.n	80104fa <tud_task_ext+0x186>
          if (tud_resume_cb) tud_resume_cb();
 8010592:	460b      	mov	r3, r1
 8010594:	e79e      	b.n	80104d4 <tud_task_ext+0x160>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8010596:	483c      	ldr	r0, [pc, #240]	; (8010688 <tud_task_ext+0x314>)
 8010598:	2800      	cmp	r0, #0
 801059a:	d087      	beq.n	80104ac <tud_task_ext+0x138>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 801059c:	f000 fdb6 	bl	801110c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80105a0:	4640      	mov	r0, r8
 80105a2:	aa08      	add	r2, sp, #32
 80105a4:	2101      	movs	r1, #1
 80105a6:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80105aa:	2800      	cmp	r0, #0
 80105ac:	f47f aef0 	bne.w	8010390 <tud_task_ext+0x1c>
 80105b0:	e77c      	b.n	80104ac <tud_task_ext+0x138>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80105b2:	2a20      	cmp	r2, #32
 80105b4:	f000 80aa 	beq.w	801070c <tud_task_ext+0x398>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80105b8:	2a00      	cmp	r2, #0
 80105ba:	f47f af70 	bne.w	801049e <tud_task_ext+0x12a>
      switch ( p_request->bRequest )
 80105be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80105c2:	2b09      	cmp	r3, #9
 80105c4:	f63f af6b 	bhi.w	801049e <tud_task_ext+0x12a>
 80105c8:	a201      	add	r2, pc, #4	; (adr r2, 80105d0 <tud_task_ext+0x25c>)
 80105ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ce:	bf00      	nop
 80105d0:	08010779 	.word	0x08010779
 80105d4:	08010863 	.word	0x08010863
 80105d8:	0801049f 	.word	0x0801049f
 80105dc:	08010847 	.word	0x08010847
 80105e0:	0801049f 	.word	0x0801049f
 80105e4:	0801082d 	.word	0x0801082d
 80105e8:	080107db 	.word	0x080107db
 80105ec:	0801049f 	.word	0x0801049f
 80105f0:	080107c5 	.word	0x080107c5
 80105f4:	0801079b 	.word	0x0801079b
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80105f8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80105fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8010600:	2b08      	cmp	r3, #8
 8010602:	f63f af4c 	bhi.w	801049e <tud_task_ext+0x12a>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8010606:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( usbd_app_driver_get_cb )
 801060a:	4e1a      	ldr	r6, [pc, #104]	; (8010674 <tud_task_ext+0x300>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
 8010612:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
 8010616:	7cc0      	ldrb	r0, [r0, #19]
  if ( usbd_app_driver_get_cb )
 8010618:	b136      	cbz	r6, 8010628 <tud_task_ext+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801061a:	4e17      	ldr	r6, [pc, #92]	; (8010678 <tud_task_ext+0x304>)
 801061c:	7836      	ldrb	r6, [r6, #0]
 801061e:	42b0      	cmp	r0, r6
 8010620:	f0c0 8174 	bcc.w	801090c <tud_task_ext+0x598>
    drvid -= _app_driver_count;
 8010624:	1b80      	subs	r0, r0, r6
 8010626:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010628:	2801      	cmp	r0, #1
 801062a:	f240 8092 	bls.w	8010752 <tud_task_ext+0x3de>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801062e:	2a00      	cmp	r2, #0
 8010630:	f47f af3c 	bne.w	80104ac <tud_task_ext+0x138>
  return NULL;
 8010634:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 8010636:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 801063a:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 801063e:	2801      	cmp	r0, #1
 8010640:	f000 817a 	beq.w	8010938 <tud_task_ext+0x5c4>
 8010644:	2a00      	cmp	r2, #0
 8010646:	f47f af2a 	bne.w	801049e <tud_task_ext+0x12a>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 801064a:	4423      	add	r3, r4
            tud_control_xfer(rhport, p_request, &status, 2);
 801064c:	4640      	mov	r0, r8
 801064e:	f10d 021a 	add.w	r2, sp, #26
 8010652:	a908      	add	r1, sp, #32
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010654:	4463      	add	r3, ip
 8010656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801065a:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 801065e:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 8010662:	2302      	movs	r3, #2
 8010664:	f000 fcee 	bl	8011044 <tud_control_xfer>
          break;
 8010668:	e692      	b.n	8010390 <tud_task_ext+0x1c>
 801066a:	bf00      	nop
 801066c:	2400d2dc 	.word	0x2400d2dc
 8010670:	2400d2a4 	.word	0x2400d2a4
 8010674:	00000000 	.word	0x00000000
 8010678:	2400d2a0 	.word	0x2400d2a0
 801067c:	08004895 	.word	0x08004895
 8010680:	08004891 	.word	0x08004891
 8010684:	0800488d 	.word	0x0800488d
 8010688:	00000000 	.word	0x00000000
 801068c:	24000350 	.word	0x24000350
 8010690:	08019838 	.word	0x08019838
 8010694:	2400d29c 	.word	0x2400d29c
 8010698:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 801069c:	2b0f      	cmp	r3, #15
 801069e:	f63f af05 	bhi.w	80104ac <tud_task_ext+0x138>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80106a2:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 80106a4:	4abb      	ldr	r2, [pc, #748]	; (8010994 <tud_task_ext+0x620>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80106a6:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 80106a8:	b132      	cbz	r2, 80106b8 <tud_task_ext+0x344>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80106aa:	4abb      	ldr	r2, [pc, #748]	; (8010998 <tud_task_ext+0x624>)
 80106ac:	7812      	ldrb	r2, [r2, #0]
 80106ae:	4293      	cmp	r3, r2
 80106b0:	f0c0 8139 	bcc.w	8010926 <tud_task_ext+0x5b2>
    drvid -= _app_driver_count;
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	f63f aef7 	bhi.w	80104ac <tud_task_ext+0x138>
 80106be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80106c2:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80106c6:	68e0      	ldr	r0, [r4, #12]
 80106c8:	f000 fd20 	bl	801110c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80106cc:	68e3      	ldr	r3, [r4, #12]
 80106ce:	aa08      	add	r2, sp, #32
 80106d0:	2101      	movs	r1, #1
 80106d2:	4640      	mov	r0, r8
 80106d4:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 80106d6:	2800      	cmp	r0, #0
 80106d8:	f47f ae5a 	bne.w	8010390 <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80106dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80106e0:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 80106e4:	f47f aee2 	bne.w	80104ac <tud_task_ext+0x138>
        switch(p_request->bRequest)
 80106e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80106ec:	3b0a      	subs	r3, #10
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	f63f aedc 	bhi.w	80104ac <tud_task_ext+0x138>
            usbd_control_set_complete_callback(NULL);
 80106f4:	f000 fd0a 	bl	801110c <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80106f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80106fc:	2b0a      	cmp	r3, #10
 80106fe:	f000 8173 	beq.w	80109e8 <tud_task_ext+0x674>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010702:	a908      	add	r1, sp, #32
 8010704:	4640      	mov	r0, r8
 8010706:	f000 fc85 	bl	8011014 <tud_control_status>
 801070a:	e641      	b.n	8010390 <tud_task_ext+0x1c>
 801070c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010710:	2b0f      	cmp	r3, #15
 8010712:	f63f aecb 	bhi.w	80104ac <tud_task_ext+0x138>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8010716:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 8010718:	4a9e      	ldr	r2, [pc, #632]	; (8010994 <tud_task_ext+0x620>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801071a:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 801071c:	b132      	cbz	r2, 801072c <tud_task_ext+0x3b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801071e:	4a9e      	ldr	r2, [pc, #632]	; (8010998 <tud_task_ext+0x624>)
 8010720:	7812      	ldrb	r2, [r2, #0]
 8010722:	4293      	cmp	r3, r2
 8010724:	f0c0 8140 	bcc.w	80109a8 <tud_task_ext+0x634>
    drvid -= _app_driver_count;
 8010728:	1a9b      	subs	r3, r3, r2
 801072a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801072c:	2b01      	cmp	r3, #1
 801072e:	f63f aebd 	bhi.w	80104ac <tud_task_ext+0x138>
 8010732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010736:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 801073a:	68e0      	ldr	r0, [r4, #12]
 801073c:	f000 fce6 	bl	801110c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010740:	68e3      	ldr	r3, [r4, #12]
 8010742:	4640      	mov	r0, r8
 8010744:	aa08      	add	r2, sp, #32
 8010746:	2101      	movs	r1, #1
 8010748:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801074a:	2800      	cmp	r0, #0
 801074c:	f47f ae20 	bne.w	8010390 <tud_task_ext+0x1c>
 8010750:	e6ac      	b.n	80104ac <tud_task_ext+0x138>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010756:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801075a:	2a00      	cmp	r2, #0
 801075c:	f43f af6b 	beq.w	8010636 <tud_task_ext+0x2c2>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010760:	68f0      	ldr	r0, [r6, #12]
 8010762:	f000 fcd3 	bl	801110c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010766:	68f3      	ldr	r3, [r6, #12]
 8010768:	4640      	mov	r0, r8
 801076a:	aa08      	add	r2, sp, #32
 801076c:	2101      	movs	r1, #1
 801076e:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010770:	2800      	cmp	r0, #0
 8010772:	f47f ae0d 	bne.w	8010390 <tud_task_ext+0x1c>
 8010776:	e699      	b.n	80104ac <tud_task_ext+0x138>
          tud_control_xfer(rhport, p_request, &status, 2);
 8010778:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 801077a:	7821      	ldrb	r1, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 801077c:	4640      	mov	r0, r8
 801077e:	f10d 021a 	add.w	r2, sp, #26
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8010782:	fa21 f403 	lsr.w	r4, r1, r3
 8010786:	f3c1 1140 	ubfx	r1, r1, #5, #1
 801078a:	401c      	ands	r4, r3
 801078c:	4321      	orrs	r1, r4
 801078e:	f8ad 101a 	strh.w	r1, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
 8010792:	a908      	add	r1, sp, #32
 8010794:	f000 fc56 	bl	8011044 <tud_control_xfer>
        break;
 8010798:	e5fa      	b.n	8010390 <tud_task_ext+0x1c>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 801079a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 801079e:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80107a0:	9201      	str	r2, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d007      	beq.n	80107b6 <tud_task_ext+0x442>
            if ( _usbd_dev.cfg_num )
 80107a6:	7863      	ldrb	r3, [r4, #1]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f040 816d 	bne.w	8010a88 <tud_task_ext+0x714>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80107ae:	9b01      	ldr	r3, [sp, #4]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f040 8123 	bne.w	80109fc <tud_task_ext+0x688>
          _usbd_dev.cfg_num = cfg_num;
 80107b6:	9b01      	ldr	r3, [sp, #4]
          tud_control_status(rhport, p_request);
 80107b8:	4640      	mov	r0, r8
 80107ba:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
 80107bc:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 80107be:	f000 fc29 	bl	8011014 <tud_control_status>
        break;
 80107c2:	e5e5      	b.n	8010390 <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80107c4:	7863      	ldrb	r3, [r4, #1]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80107c6:	4640      	mov	r0, r8
 80107c8:	f10d 021a 	add.w	r2, sp, #26
 80107cc:	a908      	add	r1, sp, #32
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80107ce:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80107d2:	2301      	movs	r3, #1
 80107d4:	f000 fc36 	bl	8011044 <tud_control_xfer>
        break;
 80107d8:	e5da      	b.n	8010390 <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80107da:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80107de:	0a03      	lsrs	r3, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80107e0:	b2c0      	uxtb	r0, r0
  switch(desc_type)
 80107e2:	1e5a      	subs	r2, r3, #1
 80107e4:	2a0e      	cmp	r2, #14
 80107e6:	f63f ae61 	bhi.w	80104ac <tud_task_ext+0x138>
 80107ea:	a101      	add	r1, pc, #4	; (adr r1, 80107f0 <tud_task_ext+0x47c>)
 80107ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107f0:	080108ab 	.word	0x080108ab
 80107f4:	0801087f 	.word	0x0801087f
 80107f8:	080108e9 	.word	0x080108e9
 80107fc:	080104ad 	.word	0x080104ad
 8010800:	080104ad 	.word	0x080104ad
 8010804:	080108c3 	.word	0x080108c3
 8010808:	0801087f 	.word	0x0801087f
 801080c:	080104ad 	.word	0x080104ad
 8010810:	080104ad 	.word	0x080104ad
 8010814:	080104ad 	.word	0x080104ad
 8010818:	080104ad 	.word	0x080104ad
 801081c:	080104ad 	.word	0x080104ad
 8010820:	080104ad 	.word	0x080104ad
 8010824:	080104ad 	.word	0x080104ad
 8010828:	080108f9 	.word	0x080108f9
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 801082c:	a808      	add	r0, sp, #32
 801082e:	f000 fc73 	bl	8011118 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8010832:	4640      	mov	r0, r8
 8010834:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8010838:	f000 fd22 	bl	8011280 <dcd_set_address>
          _usbd_dev.addressed = 1;
 801083c:	7823      	ldrb	r3, [r4, #0]
 801083e:	f043 0302 	orr.w	r3, r3, #2
 8010842:	7023      	strb	r3, [r4, #0]
        break;
 8010844:	e5a4      	b.n	8010390 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8010846:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801084a:	2b01      	cmp	r3, #1
 801084c:	f47f ae2e 	bne.w	80104ac <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = true;
 8010850:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010852:	4640      	mov	r0, r8
 8010854:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 8010856:	f043 0308 	orr.w	r3, r3, #8
 801085a:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801085c:	f000 fbda 	bl	8011014 <tud_control_status>
        break;
 8010860:	e596      	b.n	8010390 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8010862:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8010866:	2b01      	cmp	r3, #1
 8010868:	f47f ae20 	bne.w	80104ac <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = false;
 801086c:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801086e:	4640      	mov	r0, r8
 8010870:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 8010872:	f36f 03c3 	bfc	r3, #3, #1
 8010876:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010878:	f000 fbcc 	bl	8011014 <tud_control_status>
        break;
 801087c:	e588      	b.n	8010390 <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 801087e:	2b02      	cmp	r3, #2
 8010880:	f000 8121 	beq.w	8010ac6 <tud_task_ext+0x752>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8010884:	4b45      	ldr	r3, [pc, #276]	; (801099c <tud_task_ext+0x628>)
 8010886:	2b00      	cmp	r3, #0
 8010888:	f43f ae10 	beq.w	80104ac <tud_task_ext+0x138>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 801088c:	f3af 8000 	nop.w
 8010890:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 8010892:	2a00      	cmp	r2, #0
 8010894:	f43f ae03 	beq.w	801049e <tud_task_ext+0x12a>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8010898:	4640      	mov	r0, r8
 801089a:	8853      	ldrh	r3, [r2, #2]
 801089c:	a908      	add	r1, sp, #32
 801089e:	f000 fbd1 	bl	8011044 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80108a2:	2800      	cmp	r0, #0
 80108a4:	f47f ad74 	bne.w	8010390 <tud_task_ext+0x1c>
 80108a8:	e600      	b.n	80104ac <tud_task_ext+0x138>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80108aa:	f7f6 fda1 	bl	80073f0 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80108ae:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80108b0:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80108b2:	a908      	add	r1, sp, #32
 80108b4:	4640      	mov	r0, r8
 80108b6:	f000 fbc5 	bl	8011044 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80108ba:	2800      	cmp	r0, #0
 80108bc:	f47f ad68 	bne.w	8010390 <tud_task_ext+0x1c>
 80108c0:	e5f4      	b.n	80104ac <tud_task_ext+0x138>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80108c2:	4b37      	ldr	r3, [pc, #220]	; (80109a0 <tud_task_ext+0x62c>)
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f43f adf1 	beq.w	80104ac <tud_task_ext+0x138>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80108ca:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 80108ce:	4602      	mov	r2, r0
 80108d0:	2800      	cmp	r0, #0
 80108d2:	f43f adeb 	beq.w	80104ac <tud_task_ext+0x138>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80108d6:	4640      	mov	r0, r8
 80108d8:	7813      	ldrb	r3, [r2, #0]
 80108da:	a908      	add	r1, sp, #32
 80108dc:	f000 fbb2 	bl	8011044 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80108e0:	2800      	cmp	r0, #0
 80108e2:	f47f ad55 	bne.w	8010390 <tud_task_ext+0x1c>
 80108e6:	e5e1      	b.n	80104ac <tud_task_ext+0x138>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80108e8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80108ec:	f7f6 fd88 	bl	8007400 <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 80108f0:	4602      	mov	r2, r0
 80108f2:	2800      	cmp	r0, #0
 80108f4:	d1ef      	bne.n	80108d6 <tud_task_ext+0x562>
 80108f6:	e5d9      	b.n	80104ac <tud_task_ext+0x138>
      if (!tud_descriptor_bos_cb) return false;
 80108f8:	4b2a      	ldr	r3, [pc, #168]	; (80109a4 <tud_task_ext+0x630>)
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	f43f add6 	beq.w	80104ac <tud_task_ext+0x138>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8010900:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 8010904:	4602      	mov	r2, r0
 8010906:	2800      	cmp	r0, #0
 8010908:	d1c6      	bne.n	8010898 <tud_task_ext+0x524>
 801090a:	e5c8      	b.n	801049e <tud_task_ext+0x12a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801090c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010910:	f8db 7000 	ldr.w	r7, [fp]
 8010914:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8010918:	2a00      	cmp	r2, #0
 801091a:	f43f ae8c 	beq.w	8010636 <tud_task_ext+0x2c2>
        TU_VERIFY(driver);
 801091e:	2e00      	cmp	r6, #0
 8010920:	f47f af1e 	bne.w	8010760 <tud_task_ext+0x3ec>
 8010924:	e5c2      	b.n	80104ac <tud_task_ext+0x138>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010926:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801092a:	f8db 2000 	ldr.w	r2, [fp]
      TU_VERIFY(driver);
 801092e:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 8010932:	f43f adbb 	beq.w	80104ac <tud_task_ext+0x138>
 8010936:	e6c6      	b.n	80106c6 <tud_task_ext+0x352>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8010938:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 801093c:	b947      	cbnz	r7, 8010950 <tud_task_ext+0x5dc>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 801093e:	2a01      	cmp	r2, #1
 8010940:	d03b      	beq.n	80109ba <tud_task_ext+0x646>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8010942:	18e7      	adds	r7, r4, r3
 8010944:	4467      	add	r7, ip
 8010946:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801094a:	3720      	adds	r7, #32
 801094c:	079b      	lsls	r3, r3, #30
 801094e:	d513      	bpl.n	8010978 <tud_task_ext+0x604>
            if (driver)
 8010950:	2e00      	cmp	r6, #0
 8010952:	f43f ad1d 	beq.w	8010390 <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010956:	68f0      	ldr	r0, [r6, #12]
 8010958:	f000 fbd8 	bl	801110c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 801095c:	68f3      	ldr	r3, [r6, #12]
 801095e:	aa08      	add	r2, sp, #32
 8010960:	2101      	movs	r1, #1
 8010962:	4640      	mov	r0, r8
 8010964:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 8010966:	2000      	movs	r0, #0
 8010968:	f000 fbd0 	bl	801110c <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 801096c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010970:	07d8      	lsls	r0, r3, #31
 8010972:	f53f ad0d 	bmi.w	8010390 <tud_task_ext+0x1c>
 8010976:	e6c4      	b.n	8010702 <tud_task_ext+0x38e>
    dcd_edpt_stall(rhport, ep_addr);
 8010978:	f899 0000 	ldrb.w	r0, [r9]
 801097c:	f001 f826 	bl	80119cc <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8010980:	797b      	ldrb	r3, [r7, #5]
 8010982:	f043 0302 	orr.w	r3, r3, #2
 8010986:	717b      	strb	r3, [r7, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010988:	797b      	ldrb	r3, [r7, #5]
 801098a:	f043 0301 	orr.w	r3, r3, #1
 801098e:	717b      	strb	r3, [r7, #5]
 8010990:	e7de      	b.n	8010950 <tud_task_ext+0x5dc>
 8010992:	bf00      	nop
 8010994:	00000000 	.word	0x00000000
 8010998:	2400d2a0 	.word	0x2400d2a0
	...
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80109a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80109ac:	f8db 2000 	ldr.w	r2, [fp]
        TU_VERIFY(driver);
 80109b0:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 80109b4:	f43f ad7a 	beq.w	80104ac <tud_task_ext+0x138>
 80109b8:	e6bf      	b.n	801073a <tud_task_ext+0x3c6>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80109ba:	4423      	add	r3, r4
 80109bc:	4463      	add	r3, ip
 80109be:	f103 0220 	add.w	r2, r3, #32
 80109c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80109c6:	0798      	lsls	r0, r3, #30
 80109c8:	d5c2      	bpl.n	8010950 <tud_task_ext+0x5dc>
    dcd_edpt_clear_stall(rhport, ep_addr);
 80109ca:	f899 0000 	ldrb.w	r0, [r9]
 80109ce:	9200      	str	r2, [sp, #0]
 80109d0:	f001 f86c 	bl	8011aac <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80109d4:	9a00      	ldr	r2, [sp, #0]
 80109d6:	7953      	ldrb	r3, [r2, #5]
 80109d8:	f367 0341 	bfi	r3, r7, #1, #1
 80109dc:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80109de:	7953      	ldrb	r3, [r2, #5]
 80109e0:	f367 0300 	bfi	r3, r7, #0, #1
 80109e4:	7153      	strb	r3, [r2, #5]
 80109e6:	e7b3      	b.n	8010950 <tud_task_ext+0x5dc>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80109e8:	a908      	add	r1, sp, #32
 80109ea:	4640      	mov	r0, r8
 80109ec:	2301      	movs	r3, #1
 80109ee:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 80109f2:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80109f6:	f000 fb25 	bl	8011044 <tud_control_xfer>
 80109fa:	e4c9      	b.n	8010390 <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80109fc:	1e58      	subs	r0, r3, #1
 80109fe:	b2c0      	uxtb	r0, r0
 8010a00:	f7f6 fcfa 	bl	80073f8 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d036      	beq.n	8010a76 <tud_task_ext+0x702>
 8010a08:	7843      	ldrb	r3, [r0, #1]
 8010a0a:	2b02      	cmp	r3, #2
 8010a0c:	d133      	bne.n	8010a76 <tud_task_ext+0x702>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010a0e:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8010a10:	f100 0709 	add.w	r7, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010a14:	7821      	ldrb	r1, [r4, #0]
 8010a16:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8010a1a:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8010a1e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8010a22:	011b      	lsls	r3, r3, #4
 8010a24:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010a28:	430b      	orrs	r3, r1
 8010a2a:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8010a2c:	8843      	ldrh	r3, [r0, #2]
 8010a2e:	f8cd 8008 	str.w	r8, [sp, #8]
 8010a32:	18c3      	adds	r3, r0, r3
 8010a34:	9404      	str	r4, [sp, #16]
 8010a36:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8010a38:	9b03      	ldr	r3, [sp, #12]
 8010a3a:	42bb      	cmp	r3, r7
 8010a3c:	d97e      	bls.n	8010b3c <tud_task_ext+0x7c8>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8010a3e:	787b      	ldrb	r3, [r7, #1]
 8010a40:	2b0b      	cmp	r3, #11
 8010a42:	d076      	beq.n	8010b32 <tud_task_ext+0x7be>
    uint8_t assoc_itf_count = 1;
 8010a44:	2301      	movs	r3, #1
 8010a46:	9300      	str	r3, [sp, #0]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8010a48:	787b      	ldrb	r3, [r7, #1]
 8010a4a:	2b04      	cmp	r3, #4
 8010a4c:	d113      	bne.n	8010a76 <tud_task_ext+0x702>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	494e      	ldr	r1, [pc, #312]	; (8010b8c <tud_task_ext+0x818>)
 8010a52:	1bda      	subs	r2, r3, r7
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010a54:	4b4e      	ldr	r3, [pc, #312]	; (8010b90 <tud_task_ext+0x81c>)
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8010a56:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	2900      	cmp	r1, #0
 8010a5c:	d078      	beq.n	8010b50 <tud_task_ext+0x7dc>
 8010a5e:	2600      	movs	r6, #0
 8010a60:	4639      	mov	r1, r7
 8010a62:	4617      	mov	r7, r2
 8010a64:	46b0      	mov	r8, r6
    drvid -= _app_driver_count;
 8010a66:	1af4      	subs	r4, r6, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a68:	429e      	cmp	r6, r3
    drvid -= _app_driver_count;
 8010a6a:	b2e4      	uxtb	r4, r4
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a6c:	d359      	bcc.n	8010b22 <tud_task_ext+0x7ae>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a6e:	2c01      	cmp	r4, #1
 8010a70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010a74:	d911      	bls.n	8010a9a <tud_task_ext+0x726>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010a76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010a7a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010a7e:	07dc      	lsls	r4, r3, #31
 8010a80:	f57f ad0d 	bpl.w	801049e <tud_task_ext+0x12a>
 8010a84:	be00      	bkpt	0x0000
 8010a86:	e50a      	b.n	801049e <tud_task_ext+0x12a>
              dcd_edpt_close_all(rhport);
 8010a88:	4640      	mov	r0, r8
 8010a8a:	f000 fd2b 	bl	80114e4 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8010a8e:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 8010a90:	4640      	mov	r0, r8
 8010a92:	f7ff fb85 	bl	80101a0 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8010a96:	70a6      	strb	r6, [r4, #2]
 8010a98:	e689      	b.n	80107ae <tud_task_ext+0x43a>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a9a:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8010a9e:	68a3      	ldr	r3, [r4, #8]
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	9802      	ldr	r0, [sp, #8]
 8010aa4:	9105      	str	r1, [sp, #20]
 8010aa6:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010aa8:	2808      	cmp	r0, #8
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010aaa:	f106 0301 	add.w	r3, r6, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010aae:	9905      	ldr	r1, [sp, #20]
 8010ab0:	d901      	bls.n	8010ab6 <tud_task_ext+0x742>
 8010ab2:	4287      	cmp	r7, r0
 8010ab4:	d20d      	bcs.n	8010ad2 <tud_task_ext+0x75e>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010ab6:	b2de      	uxtb	r6, r3
 8010ab8:	4b35      	ldr	r3, [pc, #212]	; (8010b90 <tud_task_ext+0x81c>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	46b0      	mov	r8, r6
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	42b2      	cmp	r2, r6
 8010ac2:	dad0      	bge.n	8010a66 <tud_task_ext+0x6f2>
 8010ac4:	e7d7      	b.n	8010a76 <tud_task_ext+0x702>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8010ac6:	f7f6 fc97 	bl	80073f8 <tud_descriptor_configuration_cb>
 8010aca:	4602      	mov	r2, r0
 8010acc:	e6e1      	b.n	8010892 <tud_task_ext+0x51e>
 8010ace:	461c      	mov	r4, r3
 8010ad0:	463e      	mov	r6, r7
        if ( assoc_itf_count == 1)
 8010ad2:	9b00      	ldr	r3, [sp, #0]
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d106      	bne.n	8010ae8 <tud_task_ext+0x774>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8010ada:	9900      	ldr	r1, [sp, #0]
 8010adc:	68a2      	ldr	r2, [r4, #8]
 8010ade:	4b2d      	ldr	r3, [pc, #180]	; (8010b94 <tud_task_ext+0x820>)
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	bf08      	it	eq
 8010ae4:	2102      	moveq	r1, #2
 8010ae6:	9100      	str	r1, [sp, #0]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	e008      	b.n	8010afe <tud_task_ext+0x78a>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8010aec:	78b9      	ldrb	r1, [r7, #2]
 8010aee:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010af0:	9904      	ldr	r1, [sp, #16]
 8010af2:	fa51 f383 	uxtab	r3, r1, r3
 8010af6:	78d9      	ldrb	r1, [r3, #3]
 8010af8:	29ff      	cmp	r1, #255	; 0xff
 8010afa:	d1bc      	bne.n	8010a76 <tud_task_ext+0x702>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8010afc:	70de      	strb	r6, [r3, #3]
 8010afe:	b2d3      	uxtb	r3, r2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010b00:	9900      	ldr	r1, [sp, #0]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010b02:	3201      	adds	r2, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010b04:	4299      	cmp	r1, r3
 8010b06:	d8f1      	bhi.n	8010aec <tud_task_ext+0x778>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010b08:	4633      	mov	r3, r6
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	4602      	mov	r2, r0
        p_desc += drv_len;
 8010b0e:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010b10:	4821      	ldr	r0, [pc, #132]	; (8010b98 <tud_task_ext+0x824>)
 8010b12:	f001 fbed 	bl	80122f0 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010b16:	4b1e      	ldr	r3, [pc, #120]	; (8010b90 <tud_task_ext+0x81c>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	4543      	cmp	r3, r8
 8010b1e:	da8b      	bge.n	8010a38 <tud_task_ext+0x6c4>
 8010b20:	e7a9      	b.n	8010a76 <tud_task_ext+0x702>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010b22:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8010b26:	f8db 4000 	ldr.w	r4, [fp]
      TU_ASSERT(driver);
 8010b2a:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 8010b2e:	d1b6      	bne.n	8010a9e <tud_task_ext+0x72a>
 8010b30:	e7a1      	b.n	8010a76 <tud_task_ext+0x702>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8010b32:	78fa      	ldrb	r2, [r7, #3]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010b34:	783b      	ldrb	r3, [r7, #0]
 8010b36:	9200      	str	r2, [sp, #0]
 8010b38:	441f      	add	r7, r3
 8010b3a:	e785      	b.n	8010a48 <tud_task_ext+0x6d4>
  if (tud_mount_cb) tud_mount_cb();
 8010b3c:	4b17      	ldr	r3, [pc, #92]	; (8010b9c <tud_task_ext+0x828>)
 8010b3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b42:	9c04      	ldr	r4, [sp, #16]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f43f ae36 	beq.w	80107b6 <tud_task_ext+0x442>
 8010b4a:	f7f3 fe9d 	bl	8004888 <tud_mount_cb>
 8010b4e:	e632      	b.n	80107b6 <tud_task_ext+0x442>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010b50:	4688      	mov	r8, r1
 8010b52:	4c13      	ldr	r4, [pc, #76]	; (8010ba0 <tud_task_ext+0x82c>)
 8010b54:	4639      	mov	r1, r7
 8010b56:	4616      	mov	r6, r2
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010b58:	f1b8 0f02 	cmp.w	r8, #2
 8010b5c:	fa5f f788 	uxtb.w	r7, r8
 8010b60:	d089      	beq.n	8010a76 <tud_task_ext+0x702>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8010b62:	68a3      	ldr	r3, [r4, #8]
 8010b64:	4632      	mov	r2, r6
 8010b66:	9802      	ldr	r0, [sp, #8]
 8010b68:	9105      	str	r1, [sp, #20]
 8010b6a:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010b6c:	4286      	cmp	r6, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010b6e:	4623      	mov	r3, r4
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010b70:	9905      	ldr	r1, [sp, #20]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010b72:	f104 0418 	add.w	r4, r4, #24
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010b76:	d301      	bcc.n	8010b7c <tud_task_ext+0x808>
 8010b78:	2808      	cmp	r0, #8
 8010b7a:	d8a8      	bhi.n	8010ace <tud_task_ext+0x75a>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010b7c:	4b04      	ldr	r3, [pc, #16]	; (8010b90 <tud_task_ext+0x81c>)
 8010b7e:	f108 0801 	add.w	r8, r8, #1
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	3301      	adds	r3, #1
 8010b86:	4598      	cmp	r8, r3
 8010b88:	dde6      	ble.n	8010b58 <tud_task_ext+0x7e4>
 8010b8a:	e774      	b.n	8010a76 <tud_task_ext+0x702>
 8010b8c:	00000000 	.word	0x00000000
 8010b90:	2400d2a0 	.word	0x2400d2a0
 8010b94:	0800f759 	.word	0x0800f759
 8010b98:	2400d2b7 	.word	0x2400d2b7
 8010b9c:	08004889 	.word	0x08004889
 8010ba0:	08019838 	.word	0x08019838

08010ba4 <dcd_event_handler>:
{
 8010ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (event->event_id)
 8010ba8:	7843      	ldrb	r3, [r0, #1]
{
 8010baa:	b085      	sub	sp, #20
 8010bac:	4605      	mov	r5, r0
 8010bae:	460e      	mov	r6, r1
  switch (event->event_id)
 8010bb0:	3b02      	subs	r3, #2
 8010bb2:	2b03      	cmp	r3, #3
 8010bb4:	f200 80c3 	bhi.w	8010d3e <dcd_event_handler+0x19a>
 8010bb8:	e8df f003 	tbb	[pc, r3]
 8010bbc:	021f4733 	.word	0x021f4733
      if ( _usbd_dev.connected )
 8010bc0:	4b62      	ldr	r3, [pc, #392]	; (8010d4c <dcd_event_handler+0x1a8>)
 8010bc2:	781a      	ldrb	r2, [r3, #0]
 8010bc4:	07d1      	lsls	r1, r2, #31
 8010bc6:	d515      	bpl.n	8010bf4 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 8010bc8:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8010bca:	4961      	ldr	r1, [pc, #388]	; (8010d50 <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 0;
 8010bcc:	f36f 0282 	bfc	r2, #2, #1
        osal_queue_send(_usbd_q, event, in_isr);
 8010bd0:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 0;
 8010bd2:	701a      	strb	r2, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8010bd4:	b9ee      	cbnz	r6, 8010c12 <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
 8010bd6:	463c      	mov	r4, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f854 3b04 	ldr.w	r3, [r4], #4
 8010bde:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8010be0:	4629      	mov	r1, r5
 8010be2:	4620      	mov	r0, r4
 8010be4:	f7ff f8fe 	bl	800fde4 <tu_fifo_write>
 8010be8:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	2001      	movs	r0, #1
 8010bee:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8010bf0:	2c00      	cmp	r4, #0
 8010bf2:	d075      	beq.n	8010ce0 <dcd_event_handler+0x13c>
}
 8010bf4:	b005      	add	sp, #20
 8010bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ( _usbd_dev.connected )
 8010bfa:	4b54      	ldr	r3, [pc, #336]	; (8010d4c <dcd_event_handler+0x1a8>)
 8010bfc:	781a      	ldrb	r2, [r3, #0]
 8010bfe:	07d0      	lsls	r0, r2, #31
 8010c00:	d5f8      	bpl.n	8010bf4 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 1;
 8010c02:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8010c04:	4952      	ldr	r1, [pc, #328]	; (8010d50 <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 1;
 8010c06:	f042 0204 	orr.w	r2, r2, #4
        osal_queue_send(_usbd_q, event, in_isr);
 8010c0a:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 1;
 8010c0c:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	d0e1      	beq.n	8010bd6 <dcd_event_handler+0x32>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010c12:	4629      	mov	r1, r5
 8010c14:	1d38      	adds	r0, r7, #4
 8010c16:	f7ff f8e5 	bl	800fde4 <tu_fifo_write>
 8010c1a:	4604      	mov	r4, r0
  TU_ASSERT(success);
 8010c1c:	2c00      	cmp	r4, #0
 8010c1e:	d1e9      	bne.n	8010bf4 <dcd_event_handler+0x50>
 8010c20:	e05e      	b.n	8010ce0 <dcd_event_handler+0x13c>
      _usbd_dev.connected  = 0;
 8010c22:	4b4a      	ldr	r3, [pc, #296]	; (8010d4c <dcd_event_handler+0x1a8>)
      _usbd_dev.cfg_num    = 0;
 8010c24:	2100      	movs	r1, #0
      _usbd_dev.connected  = 0;
 8010c26:	781a      	ldrb	r2, [r3, #0]
 8010c28:	f36f 0200 	bfc	r2, #0, #1
 8010c2c:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8010c2e:	781a      	ldrb	r2, [r3, #0]
 8010c30:	f36f 0241 	bfc	r2, #1, #1
 8010c34:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 8010c36:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 8010c38:	781a      	ldrb	r2, [r3, #0]
 8010c3a:	f361 0282 	bfi	r2, r1, #2, #1
      osal_queue_send(_usbd_q, event, in_isr);
 8010c3e:	4944      	ldr	r1, [pc, #272]	; (8010d50 <dcd_event_handler+0x1ac>)
      _usbd_dev.suspended  = 0;
 8010c40:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8010c42:	680f      	ldr	r7, [r1, #0]
  if (!in_isr) {
 8010c44:	2e00      	cmp	r6, #0
 8010c46:	d1e4      	bne.n	8010c12 <dcd_event_handler+0x6e>
 8010c48:	e7c5      	b.n	8010bd6 <dcd_event_handler+0x32>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010c4a:	4f42      	ldr	r7, [pc, #264]	; (8010d54 <dcd_event_handler+0x1b0>)
 8010c4c:	4c42      	ldr	r4, [pc, #264]	; (8010d58 <dcd_event_handler+0x1b4>)
 8010c4e:	783a      	ldrb	r2, [r7, #0]
 8010c50:	2c00      	cmp	r4, #0
 8010c52:	d04d      	beq.n	8010cf0 <dcd_event_handler+0x14c>
 8010c54:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010c56:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8010d5c <dcd_event_handler+0x1b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010c5a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010d60 <dcd_event_handler+0x1bc>
 8010c5e:	e004      	b.n	8010c6a <dcd_event_handler+0xc6>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010c60:	3401      	adds	r4, #1
 8010c62:	1c53      	adds	r3, r2, #1
 8010c64:	b2e4      	uxtb	r4, r4
 8010c66:	42a3      	cmp	r3, r4
 8010c68:	db15      	blt.n	8010c96 <dcd_event_handler+0xf2>
    drvid -= _app_driver_count;
 8010c6a:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010c6c:	4294      	cmp	r4, r2
    drvid -= _app_driver_count;
 8010c6e:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010c70:	d354      	bcc.n	8010d1c <dcd_event_handler+0x178>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010c72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 8010c7c:	d8f0      	bhi.n	8010c60 <dcd_event_handler+0xbc>
        if (driver && driver->sof)
 8010c7e:	694b      	ldr	r3, [r1, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d0ed      	beq.n	8010c60 <dcd_event_handler+0xbc>
          driver->sof(event->rhport, event->sof.frame_count);
 8010c84:	6869      	ldr	r1, [r5, #4]
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010c86:	3401      	adds	r4, #1
          driver->sof(event->rhport, event->sof.frame_count);
 8010c88:	7828      	ldrb	r0, [r5, #0]
 8010c8a:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010c8c:	783a      	ldrb	r2, [r7, #0]
 8010c8e:	b2e4      	uxtb	r4, r4
 8010c90:	1c53      	adds	r3, r2, #1
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	dae9      	bge.n	8010c6a <dcd_event_handler+0xc6>
      if ( _usbd_dev.suspended )
 8010c96:	4b2d      	ldr	r3, [pc, #180]	; (8010d4c <dcd_event_handler+0x1a8>)
 8010c98:	781a      	ldrb	r2, [r3, #0]
 8010c9a:	0752      	lsls	r2, r2, #29
 8010c9c:	d5aa      	bpl.n	8010bf4 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 8010c9e:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010ca0:	2100      	movs	r1, #0
        _usbd_dev.suspended = 0;
 8010ca2:	f36f 0282 	bfc	r2, #2, #1
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010ca6:	9103      	str	r1, [sp, #12]
 8010ca8:	e9cd 1101 	strd	r1, r1, [sp, #4]
        _usbd_dev.suspended = 0;
 8010cac:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010cae:	2105      	movs	r1, #5
 8010cb0:	782b      	ldrb	r3, [r5, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010cb2:	4a27      	ldr	r2, [pc, #156]	; (8010d50 <dcd_event_handler+0x1ac>)
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010cb4:	f88d 1005 	strb.w	r1, [sp, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010cb8:	6815      	ldr	r5, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010cba:	f88d 3004 	strb.w	r3, [sp, #4]
 8010cbe:	2e00      	cmp	r6, #0
 8010cc0:	d134      	bne.n	8010d2c <dcd_event_handler+0x188>
  qhdl->interrupt_set(false);
 8010cc2:	462c      	mov	r4, r5
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f854 3b04 	ldr.w	r3, [r4], #4
 8010cca:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010ccc:	a901      	add	r1, sp, #4
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f7ff f888 	bl	800fde4 <tu_fifo_write>
 8010cd4:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010cd6:	682b      	ldr	r3, [r5, #0]
 8010cd8:	2001      	movs	r0, #1
 8010cda:	4798      	blx	r3
  TU_ASSERT(success);
 8010cdc:	2c00      	cmp	r4, #0
 8010cde:	d189      	bne.n	8010bf4 <dcd_event_handler+0x50>
 8010ce0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010ce4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ce8:	07db      	lsls	r3, r3, #31
 8010cea:	d583      	bpl.n	8010bf4 <dcd_event_handler+0x50>
 8010cec:	be00      	bkpt	0x0000
}
 8010cee:	e781      	b.n	8010bf4 <dcd_event_handler+0x50>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010cf0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010d5c <dcd_event_handler+0x1b8>
 8010cf4:	e004      	b.n	8010d00 <dcd_event_handler+0x15c>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010cf6:	3401      	adds	r4, #1
 8010cf8:	1c53      	adds	r3, r2, #1
 8010cfa:	b2e4      	uxtb	r4, r4
 8010cfc:	42a3      	cmp	r3, r4
 8010cfe:	dbca      	blt.n	8010c96 <dcd_event_handler+0xf2>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010d00:	2c01      	cmp	r4, #1
 8010d02:	d8f8      	bhi.n	8010cf6 <dcd_event_handler+0x152>
 8010d04:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        if (driver && driver->sof)
 8010d08:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0f1      	beq.n	8010cf6 <dcd_event_handler+0x152>
          driver->sof(event->rhport, event->sof.frame_count);
 8010d12:	6869      	ldr	r1, [r5, #4]
 8010d14:	7828      	ldrb	r0, [r5, #0]
 8010d16:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010d18:	783a      	ldrb	r2, [r7, #0]
 8010d1a:	e7ec      	b.n	8010cf6 <dcd_event_handler+0x152>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010d1c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010d20:	f8d9 1000 	ldr.w	r1, [r9]
        if (driver && driver->sof)
 8010d24:	eb11 01c3 	adds.w	r1, r1, r3, lsl #3
 8010d28:	d09a      	beq.n	8010c60 <dcd_event_handler+0xbc>
 8010d2a:	e7a8      	b.n	8010c7e <dcd_event_handler+0xda>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010d2c:	a901      	add	r1, sp, #4
 8010d2e:	1d28      	adds	r0, r5, #4
 8010d30:	f7ff f858 	bl	800fde4 <tu_fifo_write>
 8010d34:	4604      	mov	r4, r0
  TU_ASSERT(success);
 8010d36:	2c00      	cmp	r4, #0
 8010d38:	f47f af5c 	bne.w	8010bf4 <dcd_event_handler+0x50>
 8010d3c:	e7d0      	b.n	8010ce0 <dcd_event_handler+0x13c>
      osal_queue_send(_usbd_q, event, in_isr);
 8010d3e:	4b04      	ldr	r3, [pc, #16]	; (8010d50 <dcd_event_handler+0x1ac>)
 8010d40:	681f      	ldr	r7, [r3, #0]
  if (!in_isr) {
 8010d42:	2900      	cmp	r1, #0
 8010d44:	f47f af65 	bne.w	8010c12 <dcd_event_handler+0x6e>
 8010d48:	e745      	b.n	8010bd6 <dcd_event_handler+0x32>
 8010d4a:	bf00      	nop
 8010d4c:	2400d2a4 	.word	0x2400d2a4
 8010d50:	2400d2dc 	.word	0x2400d2dc
 8010d54:	2400d2a0 	.word	0x2400d2a0
 8010d58:	00000000 	.word	0x00000000
 8010d5c:	08019838 	.word	0x08019838
 8010d60:	2400d29c 	.word	0x2400d29c

08010d64 <usbd_open_edpt_pair>:
{
 8010d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d68:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 8010d6c:	2a00      	cmp	r2, #0
 8010d6e:	d046      	beq.n	8010dfe <usbd_open_edpt_pair+0x9a>
 8010d70:	460c      	mov	r4, r1
 8010d72:	461e      	mov	r6, r3
 8010d74:	4615      	mov	r5, r2
 8010d76:	f04f 0b00 	mov.w	fp, #0
  rhport = _usbd_rhport;
 8010d7a:	4f23      	ldr	r7, [pc, #140]	; (8010e08 <usbd_open_edpt_pair+0xa4>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010d7c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010e0c <usbd_open_edpt_pair+0xa8>
 8010d80:	e015      	b.n	8010dae <usbd_open_edpt_pair+0x4a>
 8010d82:	f899 1002 	ldrb.w	r1, [r9, #2]
 8010d86:	f001 fa7f 	bl	8012288 <tu_edpt_validate>
 8010d8a:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010d90:	b1eb      	cbz	r3, 8010dce <usbd_open_edpt_pair+0x6a>
  return dcd_edpt_open(rhport, desc_ep);
 8010d92:	f000 fb05 	bl	80113a0 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010d96:	b308      	cbz	r0, 8010ddc <usbd_open_edpt_pair+0x78>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8010d98:	78a3      	ldrb	r3, [r4, #2]
 8010d9a:	09da      	lsrs	r2, r3, #7
 8010d9c:	d127      	bne.n	8010dee <usbd_open_edpt_pair+0x8a>
  for(int i=0; i<ep_count; i++)
 8010d9e:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_out) = desc_ep->bEndpointAddress;
 8010da2:	f888 3000 	strb.w	r3, [r8]
 8010da6:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 8010da8:	45ab      	cmp	fp, r5
 8010daa:	441c      	add	r4, r3
 8010dac:	d027      	beq.n	8010dfe <usbd_open_edpt_pair+0x9a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010dae:	7863      	ldrb	r3, [r4, #1]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010db0:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010db2:	2b05      	cmp	r3, #5
 8010db4:	d112      	bne.n	8010ddc <usbd_open_edpt_pair+0x78>
 8010db6:	78e1      	ldrb	r1, [r4, #3]
 8010db8:	f001 0103 	and.w	r1, r1, #3
 8010dbc:	42b1      	cmp	r1, r6
 8010dbe:	d10d      	bne.n	8010ddc <usbd_open_edpt_pair+0x78>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010dc0:	78a3      	ldrb	r3, [r4, #2]
  rhport = _usbd_rhport;
 8010dc2:	f897 a000 	ldrb.w	sl, [r7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dca:	2b08      	cmp	r3, #8
 8010dcc:	d9d9      	bls.n	8010d82 <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010dce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010dd2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010dd6:	07da      	lsls	r2, r3, #31
 8010dd8:	d500      	bpl.n	8010ddc <usbd_open_edpt_pair+0x78>
 8010dda:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010ddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010de0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010de4:	07db      	lsls	r3, r3, #31
 8010de6:	d40d      	bmi.n	8010e04 <usbd_open_edpt_pair+0xa0>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010de8:	2000      	movs	r0, #0
}
 8010dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ep_in) = desc_ep->bEndpointAddress;
 8010dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  for(int i=0; i<ep_count; i++)
 8010df0:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_in) = desc_ep->bEndpointAddress;
 8010df4:	7013      	strb	r3, [r2, #0]
  for(int i=0; i<ep_count; i++)
 8010df6:	45ab      	cmp	fp, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010df8:	7823      	ldrb	r3, [r4, #0]
 8010dfa:	441c      	add	r4, r3
 8010dfc:	d1d7      	bne.n	8010dae <usbd_open_edpt_pair+0x4a>
  return true;
 8010dfe:	2001      	movs	r0, #1
}
 8010e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010e04:	be00      	bkpt	0x0000
 8010e06:	e7ef      	b.n	8010de8 <usbd_open_edpt_pair+0x84>
 8010e08:	24000350 	.word	0x24000350
 8010e0c:	2400d2a4 	.word	0x2400d2a4

08010e10 <usbd_edpt_open>:
{
 8010e10:	b538      	push	{r3, r4, r5, lr}
  rhport = _usbd_rhport;
 8010e12:	4b0f      	ldr	r3, [pc, #60]	; (8010e50 <usbd_edpt_open+0x40>)
 8010e14:	781d      	ldrb	r5, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010e16:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e1c:	2b08      	cmp	r3, #8
 8010e1e:	d908      	bls.n	8010e32 <usbd_edpt_open+0x22>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010e20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010e24:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010e28:	07db      	lsls	r3, r3, #31
 8010e2a:	d500      	bpl.n	8010e2e <usbd_edpt_open+0x1e>
 8010e2c:	be00      	bkpt	0x0000
}
 8010e2e:	2000      	movs	r0, #0
 8010e30:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010e32:	4b08      	ldr	r3, [pc, #32]	; (8010e54 <usbd_edpt_open+0x44>)
 8010e34:	460c      	mov	r4, r1
 8010e36:	4608      	mov	r0, r1
 8010e38:	7899      	ldrb	r1, [r3, #2]
 8010e3a:	f001 fa25 	bl	8012288 <tu_edpt_validate>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d0ee      	beq.n	8010e20 <usbd_edpt_open+0x10>
  return dcd_edpt_open(rhport, desc_ep);
 8010e42:	4621      	mov	r1, r4
 8010e44:	4628      	mov	r0, r5
}
 8010e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8010e4a:	f000 baa9 	b.w	80113a0 <dcd_edpt_open>
 8010e4e:	bf00      	nop
 8010e50:	24000350 	.word	0x24000350
 8010e54:	2400d2a4 	.word	0x2400d2a4

08010e58 <usbd_edpt_claim>:
{
 8010e58:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010e5a:	4805      	ldr	r0, [pc, #20]	; (8010e70 <usbd_edpt_claim+0x18>)
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010e5c:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010e5e:	09da      	lsrs	r2, r3, #7
 8010e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e64:	3225      	adds	r2, #37	; 0x25
 8010e66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010e6a:	4418      	add	r0, r3
 8010e6c:	f001 b9e0 	b.w	8012230 <tu_edpt_claim>
 8010e70:	2400d2a4 	.word	0x2400d2a4

08010e74 <usbd_edpt_release>:
{
 8010e74:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010e76:	4805      	ldr	r0, [pc, #20]	; (8010e8c <usbd_edpt_release+0x18>)
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010e78:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010e7a:	09da      	lsrs	r2, r3, #7
 8010e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e80:	3225      	adds	r2, #37	; 0x25
 8010e82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010e86:	4418      	add	r0, r3
 8010e88:	f001 b9ea 	b.w	8012260 <tu_edpt_release>
 8010e8c:	2400d2a4 	.word	0x2400d2a4

08010e90 <usbd_edpt_xfer>:
{
 8010e90:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010e92:	4c19      	ldr	r4, [pc, #100]	; (8010ef8 <usbd_edpt_xfer+0x68>)
 8010e94:	f001 0e7f 	and.w	lr, r1, #127	; 0x7f
  rhport = _usbd_rhport;
 8010e98:	4818      	ldr	r0, [pc, #96]	; (8010efc <usbd_edpt_xfer+0x6c>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010e9a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
  rhport = _usbd_rhport;
 8010e9e:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010ea0:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8010ea4:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
 8010ea8:	3420      	adds	r4, #32
 8010eaa:	f01c 0f01 	tst.w	ip, #1
 8010eae:	d008      	beq.n	8010ec2 <usbd_edpt_xfer+0x32>
 8010eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010eb4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010eb8:	07da      	lsls	r2, r3, #31
 8010eba:	d500      	bpl.n	8010ebe <usbd_edpt_xfer+0x2e>
 8010ebc:	be00      	bkpt	0x0000
 8010ebe:	2000      	movs	r0, #0
}
 8010ec0:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010ec2:	f894 c005 	ldrb.w	ip, [r4, #5]
 8010ec6:	f04c 0c01 	orr.w	ip, ip, #1
 8010eca:	f884 c005 	strb.w	ip, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8010ece:	f000 fb5d 	bl	801158c <dcd_edpt_xfer>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d1f4      	bne.n	8010ec0 <usbd_edpt_xfer+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010ed6:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010ed8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010edc:	f360 0300 	bfi	r3, r0, #0, #1
 8010ee0:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010ee2:	7963      	ldrb	r3, [r4, #5]
 8010ee4:	f360 0382 	bfi	r3, r0, #2, #1
 8010ee8:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010eea:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010eee:	07db      	lsls	r3, r3, #31
 8010ef0:	d5e5      	bpl.n	8010ebe <usbd_edpt_xfer+0x2e>
 8010ef2:	be00      	bkpt	0x0000
}
 8010ef4:	bd10      	pop	{r4, pc}
 8010ef6:	bf00      	nop
 8010ef8:	2400d2a4 	.word	0x2400d2a4
 8010efc:	24000350 	.word	0x24000350

08010f00 <usbd_edpt_xfer_fifo>:
{
 8010f00:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010f02:	4c19      	ldr	r4, [pc, #100]	; (8010f68 <usbd_edpt_xfer_fifo+0x68>)
 8010f04:	f001 0e7f 	and.w	lr, r1, #127	; 0x7f
  rhport = _usbd_rhport;
 8010f08:	4818      	ldr	r0, [pc, #96]	; (8010f6c <usbd_edpt_xfer_fifo+0x6c>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010f0a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
  rhport = _usbd_rhport;
 8010f0e:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010f10:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8010f14:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
 8010f18:	3420      	adds	r4, #32
 8010f1a:	f01c 0f01 	tst.w	ip, #1
 8010f1e:	d008      	beq.n	8010f32 <usbd_edpt_xfer_fifo+0x32>
 8010f20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010f24:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010f28:	07da      	lsls	r2, r3, #31
 8010f2a:	d500      	bpl.n	8010f2e <usbd_edpt_xfer_fifo+0x2e>
 8010f2c:	be00      	bkpt	0x0000
 8010f2e:	2000      	movs	r0, #0
}
 8010f30:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010f32:	f894 c005 	ldrb.w	ip, [r4, #5]
 8010f36:	f04c 0c01 	orr.w	ip, ip, #1
 8010f3a:	f884 c005 	strb.w	ip, [r4, #5]
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8010f3e:	f000 fc05 	bl	801174c <dcd_edpt_xfer_fifo>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d1f4      	bne.n	8010f30 <usbd_edpt_xfer_fifo+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010f46:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010f48:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010f4c:	f360 0300 	bfi	r3, r0, #0, #1
 8010f50:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010f52:	7963      	ldrb	r3, [r4, #5]
 8010f54:	f360 0382 	bfi	r3, r0, #2, #1
 8010f58:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010f5a:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010f5e:	07db      	lsls	r3, r3, #31
 8010f60:	d5e5      	bpl.n	8010f2e <usbd_edpt_xfer_fifo+0x2e>
 8010f62:	be00      	bkpt	0x0000
}
 8010f64:	bd10      	pop	{r4, pc}
 8010f66:	bf00      	nop
 8010f68:	2400d2a4 	.word	0x2400d2a4
 8010f6c:	24000350 	.word	0x24000350

08010f70 <usbd_edpt_clear_stall>:
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8010f70:	4b0d      	ldr	r3, [pc, #52]	; (8010fa8 <usbd_edpt_clear_stall+0x38>)
 8010f72:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8010f76:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010f7a:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8010f7e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010f82:	0792      	lsls	r2, r2, #30
 8010f84:	d400      	bmi.n	8010f88 <usbd_edpt_clear_stall+0x18>
 8010f86:	4770      	bx	lr
{
 8010f88:	b510      	push	{r4, lr}
 8010f8a:	f103 0420 	add.w	r4, r3, #32
  rhport = _usbd_rhport;
 8010f8e:	4b07      	ldr	r3, [pc, #28]	; (8010fac <usbd_edpt_clear_stall+0x3c>)
    dcd_edpt_clear_stall(rhport, ep_addr);
 8010f90:	7818      	ldrb	r0, [r3, #0]
 8010f92:	f000 fd8b 	bl	8011aac <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010f96:	7963      	ldrb	r3, [r4, #5]
 8010f98:	f36f 0341 	bfc	r3, #1, #1
 8010f9c:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010f9e:	7963      	ldrb	r3, [r4, #5]
 8010fa0:	f36f 0300 	bfc	r3, #0, #1
 8010fa4:	7163      	strb	r3, [r4, #5]
}
 8010fa6:	bd10      	pop	{r4, pc}
 8010fa8:	2400d2a4 	.word	0x2400d2a4
 8010fac:	24000350 	.word	0x24000350

08010fb0 <usbd_edpt_close>:
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  rhport = _usbd_rhport;
 8010fb0:	4a15      	ldr	r2, [pc, #84]	; (8011008 <usbd_edpt_close+0x58>)

  TU_ASSERT(dcd_edpt_close, /**/);
 8010fb2:	4b16      	ldr	r3, [pc, #88]	; (801100c <usbd_edpt_close+0x5c>)
  rhport = _usbd_rhport;
 8010fb4:	7810      	ldrb	r0, [r2, #0]
  TU_ASSERT(dcd_edpt_close, /**/);
 8010fb6:	b1eb      	cbz	r3, 8010ff4 <usbd_edpt_close+0x44>
{
 8010fb8:	b510      	push	{r4, lr}
 8010fba:	460c      	mov	r4, r1
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8010fbc:	f000 fc6c 	bl	8011898 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010fc0:	4b13      	ldr	r3, [pc, #76]	; (8011010 <usbd_edpt_close+0x60>)
 8010fc2:	f004 027f 	and.w	r2, r4, #127	; 0x7f
 8010fc6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010fca:	eb03 11d4 	add.w	r1, r3, r4, lsr #7
 8010fce:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010fd2:	f36f 0341 	bfc	r3, #1, #1
 8010fd6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010fda:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010fde:	f36f 0300 	bfc	r3, #0, #1
 8010fe2:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010fe6:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010fea:	f36f 0382 	bfc	r3, #2, #1
 8010fee:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25

  return;
}
 8010ff2:	bd10      	pop	{r4, pc}
  TU_ASSERT(dcd_edpt_close, /**/);
 8010ff4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010ff8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ffc:	07db      	lsls	r3, r3, #31
 8010ffe:	d501      	bpl.n	8011004 <usbd_edpt_close+0x54>
 8011000:	be00      	bkpt	0x0000
 8011002:	4770      	bx	lr
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	24000350 	.word	0x24000350
 801100c:	08011899 	.word	0x08011899
 8011010:	2400d2a4 	.word	0x2400d2a4

08011014 <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8011014:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 8011016:	4c0a      	ldr	r4, [pc, #40]	; (8011040 <tud_control_status+0x2c>)
{
 8011018:	460b      	mov	r3, r1
 801101a:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 801101c:	6808      	ldr	r0, [r1, #0]
 801101e:	4622      	mov	r2, r4
 8011020:	6849      	ldr	r1, [r1, #4]
 8011022:	c203      	stmia	r2!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8011024:	7819      	ldrb	r1, [r3, #0]
  _ctrl_xfer.buffer        = NULL;
 8011026:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8011028:	4660      	mov	r0, ip
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801102a:	43c9      	mvns	r1, r1
  _ctrl_xfer.buffer        = NULL;
 801102c:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 801102e:	60e3      	str	r3, [r4, #12]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8011030:	461a      	mov	r2, r3
 8011032:	f001 0180 	and.w	r1, r1, #128	; 0x80

  return _status_stage_xact(rhport, request);
}
 8011036:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 801103a:	f7ff bf29 	b.w	8010e90 <usbd_edpt_xfer>
 801103e:	bf00      	nop
 8011040:	2400d3a0 	.word	0x2400d3a0

08011044 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8011044:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 8011046:	4e2a      	ldr	r6, [pc, #168]	; (80110f0 <tud_control_xfer+0xac>)
{
 8011048:	468c      	mov	ip, r1
 801104a:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 801104c:	6808      	ldr	r0, [r1, #0]
 801104e:	46b6      	mov	lr, r6
 8011050:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8011052:	60b2      	str	r2, [r6, #8]
{
 8011054:	b082      	sub	sp, #8
  _ctrl_xfer.request       = (*request);
 8011056:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 801105a:	2100      	movs	r1, #0
 801105c:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 801105e:	f8bc 0006 	ldrh.w	r0, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011062:	4283      	cmp	r3, r0
 8011064:	bf28      	it	cs
 8011066:	4603      	movcs	r3, r0
 8011068:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U)
 801106a:	b188      	cbz	r0, 8011090 <tud_control_xfer+0x4c>
  {
    if(_ctrl_xfer.data_len > 0U)
 801106c:	b32b      	cbz	r3, 80110ba <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 801106e:	4614      	mov	r4, r2
 8011070:	b342      	cbz	r2, 80110c4 <tud_control_xfer+0x80>
 8011072:	2b40      	cmp	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8011074:	f996 2000 	ldrsb.w	r2, [r6]
 8011078:	bf28      	it	cs
 801107a:	2340      	movcs	r3, #64	; 0x40
 801107c:	2a00      	cmp	r2, #0
 801107e:	db2a      	blt.n	80110d6 <tud_control_xfer+0x92>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8011080:	4a1c      	ldr	r2, [pc, #112]	; (80110f4 <tud_control_xfer+0xb0>)
 8011082:	4628      	mov	r0, r5
 8011084:	f7ff ff04 	bl	8010e90 <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8011088:	b170      	cbz	r0, 80110a8 <tud_control_xfer+0x64>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 801108a:	2001      	movs	r0, #1
}
 801108c:	b002      	add	sp, #8
 801108e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8011090:	f89c 1000 	ldrb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8011094:	4603      	mov	r3, r0
 8011096:	4602      	mov	r2, r0
 8011098:	4628      	mov	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801109a:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 801109c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80110a0:	f7ff fef6 	bl	8010e90 <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d1f0      	bne.n	801108a <tud_control_xfer+0x46>
 80110a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80110ac:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80110b0:	07db      	lsls	r3, r3, #31
 80110b2:	d50d      	bpl.n	80110d0 <tud_control_xfer+0x8c>
 80110b4:	be00      	bkpt	0x0000
}
 80110b6:	b002      	add	sp, #8
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80110ba:	7831      	ldrb	r1, [r6, #0]
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80110bc:	461a      	mov	r2, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80110be:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80110c2:	e7de      	b.n	8011082 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 80110c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80110c8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80110cc:	07da      	lsls	r2, r3, #31
 80110ce:	d40c      	bmi.n	80110ea <tud_control_xfer+0xa6>
 80110d0:	2000      	movs	r0, #0
}
 80110d2:	b002      	add	sp, #8
 80110d4:	bd70      	pop	{r4, r5, r6, pc}
  memcpy(dest, src, count);
 80110d6:	461a      	mov	r2, r3
 80110d8:	4621      	mov	r1, r4
 80110da:	4806      	ldr	r0, [pc, #24]	; (80110f4 <tud_control_xfer+0xb0>)
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	f002 f871 	bl	80131c4 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 80110e2:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80110e4:	4a03      	ldr	r2, [pc, #12]	; (80110f4 <tud_control_xfer+0xb0>)
 80110e6:	9b01      	ldr	r3, [sp, #4]
 80110e8:	e7cb      	b.n	8011082 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 80110ea:	be00      	bkpt	0x0000
 80110ec:	4620      	mov	r0, r4
 80110ee:	e7cd      	b.n	801108c <tud_control_xfer+0x48>
 80110f0:	2400d3a0 	.word	0x2400d3a0
 80110f4:	2400d3b4 	.word	0x2400d3b4

080110f8 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 80110f8:	4b03      	ldr	r3, [pc, #12]	; (8011108 <usbd_control_reset+0x10>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	e9c3 2200 	strd	r2, r2, [r3]
 8011100:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8011104:	611a      	str	r2, [r3, #16]
}
 8011106:	4770      	bx	lr
 8011108:	2400d3a0 	.word	0x2400d3a0

0801110c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 801110c:	4b01      	ldr	r3, [pc, #4]	; (8011114 <usbd_control_set_complete_callback+0x8>)
 801110e:	6118      	str	r0, [r3, #16]
}
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	2400d3a0 	.word	0x2400d3a0

08011118 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8011118:	b410      	push	{r4}
 801111a:	4602      	mov	r2, r0
  _ctrl_xfer.request       = (*request);
 801111c:	4c05      	ldr	r4, [pc, #20]	; (8011134 <usbd_control_set_request+0x1c>)
 801111e:	6800      	ldr	r0, [r0, #0]
 8011120:	4623      	mov	r3, r4
 8011122:	6851      	ldr	r1, [r2, #4]
 8011124:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8011126:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8011128:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 801112c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	2400d3a0 	.word	0x2400d3a0

08011138 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8011138:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 801113a:	4c45      	ldr	r4, [pc, #276]	; (8011250 <usbd_control_xfer_cb+0x118>)
 801113c:	09c9      	lsrs	r1, r1, #7
{
 801113e:	b083      	sub	sp, #12
 8011140:	4606      	mov	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8011142:	7822      	ldrb	r2, [r4, #0]
{
 8011144:	461f      	mov	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8011146:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
 801114a:	d01a      	beq.n	8011182 <usbd_control_xfer_cb+0x4a>
  {
    TU_ASSERT(0 == xferred_bytes);
 801114c:	b14b      	cbz	r3, 8011162 <usbd_control_xfer_cb+0x2a>
 801114e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011152:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011156:	07da      	lsls	r2, r3, #31
 8011158:	d45f      	bmi.n	801121a <usbd_control_xfer_cb+0xe2>
 801115a:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 801115c:	4628      	mov	r0, r5
 801115e:	b003      	add	sp, #12
 8011160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8011162:	4b3c      	ldr	r3, [pc, #240]	; (8011254 <usbd_control_xfer_cb+0x11c>)
 8011164:	b113      	cbz	r3, 801116c <usbd_control_xfer_cb+0x34>
 8011166:	4621      	mov	r1, r4
 8011168:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 801116c:	6923      	ldr	r3, [r4, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d04f      	beq.n	8011212 <usbd_control_xfer_cb+0xda>
    return true;
 8011172:	2501      	movs	r5, #1
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8011174:	4a36      	ldr	r2, [pc, #216]	; (8011250 <usbd_control_xfer_cb+0x118>)
 8011176:	2103      	movs	r1, #3
 8011178:	4630      	mov	r0, r6
 801117a:	4798      	blx	r3
}
 801117c:	4628      	mov	r0, r5
 801117e:	b003      	add	sp, #12
 8011180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8011182:	f994 2000 	ldrsb.w	r2, [r4]
 8011186:	2a00      	cmp	r2, #0
 8011188:	db06      	blt.n	8011198 <usbd_control_xfer_cb+0x60>
    TU_VERIFY(_ctrl_xfer.buffer);
 801118a:	68a0      	ldr	r0, [r4, #8]
 801118c:	2800      	cmp	r0, #0
 801118e:	d0e4      	beq.n	801115a <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8011190:	461a      	mov	r2, r3
 8011192:	4931      	ldr	r1, [pc, #196]	; (8011258 <usbd_control_xfer_cb+0x120>)
 8011194:	f002 f816 	bl	80131c4 <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8011198:	89e0      	ldrh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 801119a:	88e5      	ldrh	r5, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 801119c:	4438      	add	r0, r7
  _ctrl_xfer.buffer += xferred_bytes;
 801119e:	68a1      	ldr	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80111a0:	b280      	uxth	r0, r0
  _ctrl_xfer.buffer += xferred_bytes;
 80111a2:	4439      	add	r1, r7
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80111a4:	4285      	cmp	r5, r0
 80111a6:	bf18      	it	ne
 80111a8:	2f3f      	cmpne	r7, #63	; 0x3f
  _ctrl_xfer.buffer += xferred_bytes;
 80111aa:	60a1      	str	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80111ac:	81e0      	strh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80111ae:	bf94      	ite	ls
 80111b0:	2501      	movls	r5, #1
 80111b2:	2500      	movhi	r5, #0
 80111b4:	d819      	bhi.n	80111ea <usbd_control_xfer_cb+0xb2>
    if ( _ctrl_xfer.complete_cb )
 80111b6:	6923      	ldr	r3, [r4, #16]
 80111b8:	b123      	cbz	r3, 80111c4 <usbd_control_xfer_cb+0x8c>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80111ba:	4a25      	ldr	r2, [pc, #148]	; (8011250 <usbd_control_xfer_cb+0x118>)
 80111bc:	2102      	movs	r1, #2
 80111be:	4630      	mov	r0, r6
 80111c0:	4798      	blx	r3
    if ( is_ok )
 80111c2:	b360      	cbz	r0, 801121e <usbd_control_xfer_cb+0xe6>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80111c4:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80111c6:	2300      	movs	r3, #0
 80111c8:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80111ca:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80111cc:	461a      	mov	r2, r3
 80111ce:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80111d2:	f7ff fe5d 	bl	8010e90 <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80111d6:	4605      	mov	r5, r0
 80111d8:	b9d8      	cbnz	r0, 8011212 <usbd_control_xfer_cb+0xda>
    TU_ASSERT( _data_stage_xact(rhport) );
 80111da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80111de:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80111e2:	07db      	lsls	r3, r3, #31
 80111e4:	d5b9      	bpl.n	801115a <usbd_control_xfer_cb+0x22>
 80111e6:	be00      	bkpt	0x0000
 80111e8:	e7b8      	b.n	801115c <usbd_control_xfer_cb+0x24>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80111ea:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80111ec:	f994 4000 	ldrsb.w	r4, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80111f0:	1a13      	subs	r3, r2, r0
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	2b40      	cmp	r3, #64	; 0x40
 80111f6:	bf28      	it	cs
 80111f8:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80111fa:	2c00      	cmp	r4, #0
 80111fc:	db18      	blt.n	8011230 <usbd_control_xfer_cb+0xf8>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80111fe:	4290      	cmp	r0, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8011200:	4629      	mov	r1, r5
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8011202:	d023      	beq.n	801124c <usbd_control_xfer_cb+0x114>
 8011204:	4a14      	ldr	r2, [pc, #80]	; (8011258 <usbd_control_xfer_cb+0x120>)
 8011206:	4630      	mov	r0, r6
 8011208:	f7ff fe42 	bl	8010e90 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 801120c:	4605      	mov	r5, r0
 801120e:	2800      	cmp	r0, #0
 8011210:	d0e3      	beq.n	80111da <usbd_control_xfer_cb+0xa2>
    return true;
 8011212:	2501      	movs	r5, #1
}
 8011214:	4628      	mov	r0, r5
 8011216:	b003      	add	sp, #12
 8011218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(0 == xferred_bytes);
 801121a:	be00      	bkpt	0x0000
 801121c:	e79d      	b.n	801115a <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 801121e:	4601      	mov	r1, r0
 8011220:	4630      	mov	r0, r6
 8011222:	f000 fbd3 	bl	80119cc <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8011226:	2180      	movs	r1, #128	; 0x80
 8011228:	4630      	mov	r0, r6
 801122a:	f000 fbcf 	bl	80119cc <dcd_edpt_stall>
 801122e:	e795      	b.n	801115c <usbd_control_xfer_cb+0x24>
    if ( xact_len ) {
 8011230:	4290      	cmp	r0, r2
 8011232:	d008      	beq.n	8011246 <usbd_control_xfer_cb+0x10e>
  memcpy(dest, src, count);
 8011234:	461a      	mov	r2, r3
 8011236:	4808      	ldr	r0, [pc, #32]	; (8011258 <usbd_control_xfer_cb+0x120>)
 8011238:	9301      	str	r3, [sp, #4]
 801123a:	f001 ffc3 	bl	80131c4 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 801123e:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8011240:	4a05      	ldr	r2, [pc, #20]	; (8011258 <usbd_control_xfer_cb+0x120>)
 8011242:	9b01      	ldr	r3, [sp, #4]
 8011244:	e7df      	b.n	8011206 <usbd_control_xfer_cb+0xce>
    ep_addr = EDPT_CTRL_IN;
 8011246:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8011248:	462a      	mov	r2, r5
 801124a:	e7dc      	b.n	8011206 <usbd_control_xfer_cb+0xce>
 801124c:	462a      	mov	r2, r5
 801124e:	e7da      	b.n	8011206 <usbd_control_xfer_cb+0xce>
 8011250:	2400d3a0 	.word	0x2400d3a0
 8011254:	00000000 	.word	0x00000000
 8011258:	2400d3b4 	.word	0x2400d3b4

0801125c <dcd_int_enable>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801125c:	4b01      	ldr	r3, [pc, #4]	; (8011264 <dcd_int_enable+0x8>)
 801125e:	2220      	movs	r2, #32
 8011260:	60da      	str	r2, [r3, #12]

void dcd_int_enable (uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
}
 8011262:	4770      	bx	lr
 8011264:	e000e100 	.word	0xe000e100

08011268 <dcd_int_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011268:	4b04      	ldr	r3, [pc, #16]	; (801127c <dcd_int_disable+0x14>)
 801126a:	2220      	movs	r2, #32
 801126c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8011270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011274:	f3bf 8f6f 	isb	sy

void dcd_int_disable (uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
}
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	e000e100 	.word	0xe000e100

08011280 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8011280:	b410      	push	{r4}
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8011282:	4c1b      	ldr	r4, [pc, #108]	; (80112f0 <dcd_set_address+0x70>)
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;
 8011284:	f04f 0c00 	mov.w	ip, #0
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8011288:	4a1a      	ldr	r2, [pc, #104]	; (80112f4 <dcd_set_address+0x74>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 801128a:	6823      	ldr	r3, [r4, #0]
  xfer->buffer      = buffer;
 801128c:	481a      	ldr	r0, [pc, #104]	; (80112f8 <dcd_set_address+0x78>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 801128e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011292:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  // EP0 can only handle one packet
  if(epnum == 0) {
    ep0_pending[dir] = total_bytes;
 8011296:	4b19      	ldr	r3, [pc, #100]	; (80112fc <dcd_set_address+0x7c>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8011298:	6021      	str	r1, [r4, #0]
    ep0_pending[dir] = total_bytes;
 801129a:	f8a3 c002 	strh.w	ip, [r3, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 801129e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  xfer->total_len   = total_bytes;
 80112a2:	f8a0 c018 	strh.w	ip, [r0, #24]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80112a6:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80112a8:	6813      	ldr	r3, [r2, #0]
 80112aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80112ae:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80112b0:	6813      	ldr	r3, [r2, #0]
 80112b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  xfer->buffer      = buffer;
 80112b6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80112e8 <dcd_set_address+0x68>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80112ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  xfer->buffer      = buffer;
 80112be:	ed80 7b04 	vstr	d7, [r0, #16]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80112c2:	d002      	beq.n	80112ca <dcd_set_address+0x4a>
}
 80112c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112c8:	4770      	bx	lr
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80112ca:	7f03      	ldrb	r3, [r0, #28]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d1f9      	bne.n	80112c4 <dcd_set_address+0x44>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80112d0:	68a1      	ldr	r1, [r4, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 80112d2:	6813      	ldr	r3, [r2, #0]
 80112d4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80112d8:	bf14      	ite	ne
 80112da:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 80112de:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 80112e2:	430b      	orrs	r3, r1
 80112e4:	6013      	str	r3, [r2, #0]
}
 80112e6:	e7ed      	b.n	80112c4 <dcd_set_address+0x44>
	...
 80112f0:	40080800 	.word	0x40080800
 80112f4:	40080900 	.word	0x40080900
 80112f8:	2400d408 	.word	0x2400d408
 80112fc:	2400d400 	.word	0x2400d400

08011300 <dcd_connect>:
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011300:	4a02      	ldr	r2, [pc, #8]	; (801130c <dcd_connect+0xc>)
 8011302:	6853      	ldr	r3, [r2, #4]
 8011304:	f023 0302 	bic.w	r3, r3, #2
 8011308:	6053      	str	r3, [r2, #4]
}
 801130a:	4770      	bx	lr
 801130c:	40080800 	.word	0x40080800

08011310 <dcd_init>:
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011310:	4a20      	ldr	r2, [pc, #128]	; (8011394 <dcd_init+0x84>)
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8011312:	4920      	ldr	r1, [pc, #128]	; (8011394 <dcd_init+0x84>)
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011314:	68d3      	ldr	r3, [r2, #12]
 8011316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 801131a:	b510      	push	{r4, lr}
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801131c:	60d3      	str	r3, [r2, #12]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 801131e:	690b      	ldr	r3, [r1, #16]
 8011320:	2b00      	cmp	r3, #0
 8011322:	dafc      	bge.n	801131e <dcd_init+0xe>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011324:	690b      	ldr	r3, [r1, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8011326:	4a1b      	ldr	r2, [pc, #108]	; (8011394 <dcd_init+0x84>)
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011328:	f043 0301 	orr.w	r3, r3, #1
 801132c:	610b      	str	r3, [r1, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 801132e:	6913      	ldr	r3, [r2, #16]
 8011330:	f013 0301 	ands.w	r3, r3, #1
 8011334:	d1fb      	bne.n	801132e <dcd_init+0x1e>
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8011336:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 801133a:	2801      	cmp	r0, #1
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 801133c:	6954      	ldr	r4, [r2, #20]
 801133e:	6953      	ldr	r3, [r2, #20]
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8011340:	bf18      	it	ne
 8011342:	f04f 0c03 	movne.w	ip, #3
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8011346:	4914      	ldr	r1, [pc, #80]	; (8011398 <dcd_init+0x88>)
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8011348:	bf08      	it	eq
 801134a:	f04f 0c01 	moveq.w	ip, #1
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 801134e:	4323      	orrs	r3, r4
 8011350:	6153      	str	r3, [r2, #20]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8011352:	6993      	ldr	r3, [r2, #24]
 8011354:	f043 0306 	orr.w	r3, r3, #6
 8011358:	6193      	str	r3, [r2, #24]
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 801135a:	680b      	ldr	r3, [r1, #0]
 801135c:	f043 0304 	orr.w	r3, r3, #4
 8011360:	600b      	str	r3, [r1, #0]
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8011362:	680a      	ldr	r2, [r1, #0]
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011364:	4b0b      	ldr	r3, [pc, #44]	; (8011394 <dcd_init+0x84>)
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8011366:	f022 0203 	bic.w	r2, r2, #3
 801136a:	600a      	str	r2, [r1, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 801136c:	680c      	ldr	r4, [r1, #0]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 801136e:	4a0b      	ldr	r2, [pc, #44]	; (801139c <dcd_init+0x8c>)
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8011370:	ea44 040c 	orr.w	r4, r4, ip
 8011374:	600c      	str	r4, [r1, #0]
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011376:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011378:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 801137c:	6399      	str	r1, [r3, #56]	; 0x38
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 801137e:	6999      	ldr	r1, [r3, #24]
 8011380:	430a      	orrs	r2, r1
 8011382:	619a      	str	r2, [r3, #24]
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011384:	689a      	ldr	r2, [r3, #8]
 8011386:	f042 0201 	orr.w	r2, r2, #1
 801138a:	609a      	str	r2, [r3, #8]
  dcd_connect(rhport);
 801138c:	f7ff ffb8 	bl	8011300 <dcd_connect>
}
 8011390:	bd10      	pop	{r4, pc}
 8011392:	bf00      	nop
 8011394:	40080000 	.word	0x40080000
 8011398:	40080800 	.word	0x40080800
 801139c:	80003810 	.word	0x80003810

080113a0 <dcd_edpt_open>:
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 80113a0:	7888      	ldrb	r0, [r1, #2]
 80113a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  TU_ASSERT(epnum < EP_MAX);
 80113a6:	2b08      	cmp	r3, #8
 80113a8:	d872      	bhi.n	8011490 <dcd_edpt_open+0xf0>
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80113aa:	4a48      	ldr	r2, [pc, #288]	; (80114cc <dcd_edpt_open+0x12c>)
{
 80113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80113b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80113b4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 80113b8:	eb0e 1ed0 	add.w	lr, lr, r0, lsr #7
 80113bc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
  if(dir == TUSB_DIR_OUT)
 80113c0:	09c0      	lsrs	r0, r0, #7
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80113c2:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80113c6:	f10c 0203 	add.w	r2, ip, #3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80113ca:	f8ae c00a 	strh.w	ip, [lr, #10]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80113ce:	ea4f 06a2 	mov.w	r6, r2, asr #2
  xfer->interval = desc_edpt->bInterval;
 80113d2:	798c      	ldrb	r4, [r1, #6]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80113d4:	ea4f 0292 	mov.w	r2, r2, lsr #2
  xfer->interval = desc_edpt->bInterval;
 80113d8:	f88e 400c 	strb.w	r4, [lr, #12]
  if(dir == TUSB_DIR_OUT)
 80113dc:	d036      	beq.n	801144c <dcd_edpt_open+0xac>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 80113de:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80114dc <dcd_edpt_open+0x13c>
 80113e2:	4d3b      	ldr	r5, [pc, #236]	; (80114d0 <dcd_edpt_open+0x130>)
 80113e4:	f8b8 7000 	ldrh.w	r7, [r8]
 80113e8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80113ea:	19b8      	adds	r0, r7, r6
 80113ec:	eb00 0e04 	add.w	lr, r0, r4
 80113f0:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80113f4:	d857      	bhi.n	80114a6 <dcd_edpt_open+0x106>
    _allocated_fifo_words_tx += fifo_size;
 80113f6:	4417      	add	r7, r2
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80113f8:	b280      	uxth	r0, r0
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80113fa:	78ca      	ldrb	r2, [r1, #3]
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80113fc:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 8011400:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8011404:	4c33      	ldr	r4, [pc, #204]	; (80114d4 <dcd_edpt_open+0x134>)
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8011406:	eb05 0581 	add.w	r5, r5, r1, lsl #2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 801140a:	f002 0103 	and.w	r1, r2, #3
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 801140e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    _allocated_fifo_words_tx += fifo_size;
 8011412:	f8a8 7000 	strh.w	r7, [r8]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8011416:	1e4a      	subs	r2, r1, #1
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8011418:	6068      	str	r0, [r5, #4]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 801141a:	4608      	mov	r0, r1
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 801141c:	ea4f 1543 	mov.w	r5, r3, lsl #5
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8011420:	bf18      	it	ne
 8011422:	2201      	movne	r2, #1
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8011424:	0599      	lsls	r1, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8011426:	ea4c 7202 	orr.w	r2, ip, r2, lsl #28
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 801142a:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 801142e:	5928      	ldr	r0, [r5, r4]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8011430:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8011434:	4302      	orrs	r2, r0
 8011436:	430a      	orrs	r2, r1
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8011438:	4927      	ldr	r1, [pc, #156]	; (80114d8 <dcd_edpt_open+0x138>)
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 801143a:	512a      	str	r2, [r5, r4]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 801143c:	2001      	movs	r0, #1
 801143e:	69ca      	ldr	r2, [r1, #28]
 8011440:	fa00 f303 	lsl.w	r3, r0, r3
 8011444:	4313      	orrs	r3, r2
 8011446:	61cb      	str	r3, [r1, #28]
}
 8011448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 801144c:	0052      	lsls	r2, r2, #1
    if (usb_otg->GRXFSIZ < sz)
 801144e:	4c20      	ldr	r4, [pc, #128]	; (80114d0 <dcd_edpt_open+0x130>)
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8011450:	3221      	adds	r2, #33	; 0x21
    if (usb_otg->GRXFSIZ < sz)
 8011452:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011454:	4295      	cmp	r5, r2
 8011456:	d206      	bcs.n	8011466 <dcd_edpt_open+0xc6>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8011458:	4d20      	ldr	r5, [pc, #128]	; (80114dc <dcd_edpt_open+0x13c>)
 801145a:	882d      	ldrh	r5, [r5, #0]
 801145c:	4415      	add	r5, r2
 801145e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8011462:	dc2a      	bgt.n	80114ba <dcd_edpt_open+0x11a>
      usb_otg->GRXFSIZ = sz;
 8011464:	6262      	str	r2, [r4, #36]	; 0x24
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8011466:	015c      	lsls	r4, r3, #5
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8011468:	78c9      	ldrb	r1, [r1, #3]
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 801146a:	481d      	ldr	r0, [pc, #116]	; (80114e0 <dcd_edpt_open+0x140>)
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 801146c:	3310      	adds	r3, #16
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 801146e:	f001 0503 	and.w	r5, r1, #3
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8011472:	5822      	ldr	r2, [r4, r0]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8011474:	1e69      	subs	r1, r5, #1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8011476:	ea4c 0202 	orr.w	r2, ip, r2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 801147a:	bf18      	it	ne
 801147c:	2101      	movne	r1, #1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 801147e:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
 8011482:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8011486:	4914      	ldr	r1, [pc, #80]	; (80114d8 <dcd_edpt_open+0x138>)
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8011488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801148c:	5022      	str	r2, [r4, r0]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 801148e:	e7d5      	b.n	801143c <dcd_edpt_open+0x9c>
  TU_ASSERT(epnum < EP_MAX);
 8011490:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011494:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011498:	07d9      	lsls	r1, r3, #31
 801149a:	d502      	bpl.n	80114a2 <dcd_edpt_open+0x102>
 801149c:	be00      	bkpt	0x0000
 801149e:	2000      	movs	r0, #0
 80114a0:	4770      	bx	lr
 80114a2:	2000      	movs	r0, #0
}
 80114a4:	4770      	bx	lr
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 80114a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80114aa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80114ae:	07db      	lsls	r3, r3, #31
 80114b0:	d500      	bpl.n	80114b4 <dcd_edpt_open+0x114>
 80114b2:	be00      	bkpt	0x0000
 80114b4:	2000      	movs	r0, #0
}
 80114b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 80114ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80114be:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80114c2:	07da      	lsls	r2, r3, #31
 80114c4:	d5f6      	bpl.n	80114b4 <dcd_edpt_open+0x114>
 80114c6:	be00      	bkpt	0x0000
 80114c8:	e7be      	b.n	8011448 <dcd_edpt_open+0xa8>
 80114ca:	bf00      	nop
 80114cc:	2400d408 	.word	0x2400d408
 80114d0:	40080000 	.word	0x40080000
 80114d4:	40080900 	.word	0x40080900
 80114d8:	40080800 	.word	0x40080800
 80114dc:	2400d3f4 	.word	0x2400d3f4
 80114e0:	40080b00 	.word	0x40080b00

080114e4 <dcd_edpt_close_all>:
{
 80114e4:	b430      	push	{r4, r5}
    out_ep[n].DOEPCTL = 0;
 80114e6:	2300      	movs	r3, #0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80114e8:	4a23      	ldr	r2, [pc, #140]	; (8011578 <dcd_edpt_close_all+0x94>)
    out_ep[n].DOEPCTL = 0;
 80114ea:	4824      	ldr	r0, [pc, #144]	; (801157c <dcd_edpt_close_all+0x98>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80114ec:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    in_ep[n].DIEPCTL = 0;
 80114f0:	4923      	ldr	r1, [pc, #140]	; (8011580 <dcd_edpt_close_all+0x9c>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80114f2:	4c24      	ldr	r4, [pc, #144]	; (8011584 <dcd_edpt_close_all+0xa0>)
    in_ep[n].DIEPCTL = 0;
 80114f4:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80114f8:	8553      	strh	r3, [r2, #42]	; 0x2a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80114fa:	8753      	strh	r3, [r2, #58]	; 0x3a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80114fc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011500:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011504:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011508:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801150c:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011510:	f8a2 309a 	strh.w	r3, [r2, #154]	; 0x9a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011514:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011518:	f8a2 30ba 	strh.w	r3, [r2, #186]	; 0xba
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801151c:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011520:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011524:	f8a2 30ea 	strh.w	r3, [r2, #234]	; 0xea
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011528:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801152c:	f8a2 310a 	strh.w	r3, [r2, #266]	; 0x10a
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011530:	61e5      	str	r5, [r4, #28]
    out_ep[n].DOEPCTL = 0;
 8011532:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    in_ep[n].DIEPCTL = 0;
 8011536:	620b      	str	r3, [r1, #32]
    out_ep[n].DOEPCTL = 0;
 8011538:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    in_ep[n].DIEPCTL = 0;
 801153c:	640b      	str	r3, [r1, #64]	; 0x40
    out_ep[n].DOEPCTL = 0;
 801153e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
    in_ep[n].DIEPCTL = 0;
 8011542:	660b      	str	r3, [r1, #96]	; 0x60
    out_ep[n].DOEPCTL = 0;
 8011544:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    in_ep[n].DIEPCTL = 0;
 8011548:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    out_ep[n].DOEPCTL = 0;
 801154c:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
    in_ep[n].DIEPCTL = 0;
 8011550:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
    out_ep[n].DOEPCTL = 0;
 8011554:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
    in_ep[n].DIEPCTL = 0;
 8011558:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
    out_ep[n].DOEPCTL = 0;
 801155c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
    in_ep[n].DIEPCTL = 0;
 8011560:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
    out_ep[n].DOEPCTL = 0;
 8011564:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  _allocated_fifo_words_tx = 16;
 8011568:	4907      	ldr	r1, [pc, #28]	; (8011588 <dcd_edpt_close_all+0xa4>)
    in_ep[n].DIEPCTL = 0;
 801156a:	6003      	str	r3, [r0, #0]
  _allocated_fifo_words_tx = 16;
 801156c:	2010      	movs	r0, #16
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 801156e:	f8a2 311a 	strh.w	r3, [r2, #282]	; 0x11a
  _allocated_fifo_words_tx = 16;
 8011572:	8008      	strh	r0, [r1, #0]
}
 8011574:	bc30      	pop	{r4, r5}
 8011576:	4770      	bx	lr
 8011578:	2400d408 	.word	0x2400d408
 801157c:	40080b00 	.word	0x40080b00
 8011580:	40080900 	.word	0x40080900
 8011584:	40080800 	.word	0x40080800
 8011588:	2400d3f4 	.word	0x2400d3f4

0801158c <dcd_edpt_xfer>:
{
 801158c:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801158e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 8011592:	4d69      	ldr	r5, [pc, #420]	; (8011738 <dcd_edpt_xfer+0x1ac>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8011594:	09ce      	lsrs	r6, r1, #7
  xfer->ff          = NULL;
 8011596:	2700      	movs	r7, #0
  xfer->buffer      = buffer;
 8011598:	0060      	lsls	r0, r4, #1
 801159a:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 801159e:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 80115a2:	0109      	lsls	r1, r1, #4
  xfer->ff          = NULL;
 80115a4:	6047      	str	r7, [r0, #4]
  xfer->buffer      = buffer;
 80115a6:	506a      	str	r2, [r5, r1]
  xfer->total_len   = total_bytes;
 80115a8:	8103      	strh	r3, [r0, #8]
  if(epnum == 0) {
 80115aa:	2c00      	cmp	r4, #0
 80115ac:	d043      	beq.n	8011636 <dcd_edpt_xfer+0xaa>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
    return true;
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80115ae:	8942      	ldrh	r2, [r0, #10]
 80115b0:	fbb3 f1f2 	udiv	r1, r3, r2
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80115b4:	fb02 3211 	mls	r2, r2, r1, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80115b8:	b289      	uxth	r1, r1

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80115ba:	b292      	uxth	r2, r2
 80115bc:	b9da      	cbnz	r2, 80115f6 <dcd_edpt_xfer+0x6a>
 80115be:	b1d3      	cbz	r3, 80115f6 <dcd_edpt_xfer+0x6a>
  if(dir == TUSB_DIR_IN) {
 80115c0:	b9ee      	cbnz	r6, 80115fe <dcd_edpt_xfer+0x72>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80115c2:	485e      	ldr	r0, [pc, #376]	; (801173c <dcd_edpt_xfer+0x1b0>)
 80115c4:	0166      	lsls	r6, r4, #5
 80115c6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80115ca:	6917      	ldr	r7, [r2, #16]
 80115cc:	f007 4760 	and.w	r7, r7, #3758096384	; 0xe0000000
 80115d0:	6117      	str	r7, [r2, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80115d2:	6917      	ldr	r7, [r2, #16]
 80115d4:	433b      	orrs	r3, r7
 80115d6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 80115da:	6113      	str	r3, [r2, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80115dc:	5833      	ldr	r3, [r6, r0]
 80115de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80115e2:	5033      	str	r3, [r6, r0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80115e4:	5833      	ldr	r3, [r6, r0]
 80115e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80115ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80115ee:	d052      	beq.n	8011696 <dcd_edpt_xfer+0x10a>

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 80115f0:	2001      	movs	r0, #1
 80115f2:	bcf0      	pop	{r4, r5, r6, r7}
 80115f4:	4770      	bx	lr
    num_packets++;
 80115f6:	3101      	adds	r1, #1
 80115f8:	b289      	uxth	r1, r1
  if(dir == TUSB_DIR_IN) {
 80115fa:	2e00      	cmp	r6, #0
 80115fc:	d0e1      	beq.n	80115c2 <dcd_edpt_xfer+0x36>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80115fe:	4a50      	ldr	r2, [pc, #320]	; (8011740 <dcd_edpt_xfer+0x1b4>)
 8011600:	0160      	lsls	r0, r4, #5
 8011602:	ea43 41c1 	orr.w	r1, r3, r1, lsl #19
 8011606:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 801160a:	6131      	str	r1, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 801160c:	5881      	ldr	r1, [r0, r2]
 801160e:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8011612:	5081      	str	r1, [r0, r2]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011614:	5881      	ldr	r1, [r0, r2]
 8011616:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 801161a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 801161e:	d04c      	beq.n	80116ba <dcd_edpt_xfer+0x12e>
    if(total_bytes != 0) {
 8011620:	2b00      	cmp	r3, #0
 8011622:	d0e5      	beq.n	80115f0 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011624:	4a47      	ldr	r2, [pc, #284]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 8011626:	2301      	movs	r3, #1
}
 8011628:	2001      	movs	r0, #1
      dev->DIEPEMPMSK |= (1 << epnum);
 801162a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801162c:	40a3      	lsls	r3, r4
 801162e:	430b      	orrs	r3, r1
}
 8011630:	bcf0      	pop	{r4, r5, r6, r7}
      dev->DIEPEMPMSK |= (1 << epnum);
 8011632:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011634:	4770      	bx	lr
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8011636:	eb05 1206 	add.w	r2, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 801163a:	4943      	ldr	r1, [pc, #268]	; (8011748 <dcd_edpt_xfer+0x1bc>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801163c:	8952      	ldrh	r2, [r2, #10]
 801163e:	429a      	cmp	r2, r3
 8011640:	bf28      	it	cs
 8011642:	461a      	movcs	r2, r3
 8011644:	1a9b      	subs	r3, r3, r2
 8011646:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 801164a:	2e00      	cmp	r6, #0
 801164c:	d149      	bne.n	80116e2 <dcd_edpt_xfer+0x156>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 801164e:	4b3b      	ldr	r3, [pc, #236]	; (801173c <dcd_edpt_xfer+0x1b0>)
 8011650:	6919      	ldr	r1, [r3, #16]
 8011652:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 8011656:	6119      	str	r1, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8011658:	6919      	ldr	r1, [r3, #16]
 801165a:	430a      	orrs	r2, r1
 801165c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011660:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011668:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8011670:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8011674:	d1bc      	bne.n	80115f0 <dcd_edpt_xfer+0x64>
 8011676:	7b2a      	ldrb	r2, [r5, #12]
 8011678:	2a01      	cmp	r2, #1
 801167a:	d1b9      	bne.n	80115f0 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 801167c:	4a31      	ldr	r2, [pc, #196]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 801167e:	6891      	ldr	r1, [r2, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011686:	bf14      	ite	ne
 8011688:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 801168c:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8011690:	430a      	orrs	r2, r1
 8011692:	601a      	str	r2, [r3, #0]
 8011694:	e7ac      	b.n	80115f0 <dcd_edpt_xfer+0x64>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011696:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 801169a:	7b2b      	ldrb	r3, [r5, #12]
 801169c:	2b01      	cmp	r3, #1
 801169e:	d1a7      	bne.n	80115f0 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80116a0:	4b28      	ldr	r3, [pc, #160]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 80116a2:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80116a4:	5833      	ldr	r3, [r6, r0]
 80116a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80116aa:	bf14      	ite	ne
 80116ac:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80116b0:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80116b4:	4313      	orrs	r3, r2
 80116b6:	5033      	str	r3, [r6, r0]
 80116b8:	e79a      	b.n	80115f0 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80116ba:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 80116be:	7f29      	ldrb	r1, [r5, #28]
 80116c0:	2901      	cmp	r1, #1
 80116c2:	d1ad      	bne.n	8011620 <dcd_edpt_xfer+0x94>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80116c4:	491f      	ldr	r1, [pc, #124]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 80116c6:	6889      	ldr	r1, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 80116c8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80116cc:	5881      	ldr	r1, [r0, r2]
 80116ce:	bf14      	ite	ne
 80116d0:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 80116d4:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 80116d8:	4329      	orrs	r1, r5
 80116da:	5081      	str	r1, [r0, r2]
    if(total_bytes != 0) {
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d087      	beq.n	80115f0 <dcd_edpt_xfer+0x64>
 80116e0:	e7a0      	b.n	8011624 <dcd_edpt_xfer+0x98>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80116e2:	4b17      	ldr	r3, [pc, #92]	; (8011740 <dcd_edpt_xfer+0x1b4>)
 80116e4:	f442 2100 	orr.w	r1, r2, #524288	; 0x80000
 80116e8:	6119      	str	r1, [r3, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80116ea:	6819      	ldr	r1, [r3, #0]
 80116ec:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 80116f0:	6019      	str	r1, [r3, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80116f2:	6819      	ldr	r1, [r3, #0]
 80116f4:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80116f8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80116fc:	d008      	beq.n	8011710 <dcd_edpt_xfer+0x184>
    if(total_bytes != 0) {
 80116fe:	2a00      	cmp	r2, #0
 8011700:	f43f af76 	beq.w	80115f0 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011704:	4a0f      	ldr	r2, [pc, #60]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 8011706:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011708:	f043 0301 	orr.w	r3, r3, #1
 801170c:	6353      	str	r3, [r2, #52]	; 0x34
 801170e:	e76f      	b.n	80115f0 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011710:	7f29      	ldrb	r1, [r5, #28]
 8011712:	2901      	cmp	r1, #1
 8011714:	d1f3      	bne.n	80116fe <dcd_edpt_xfer+0x172>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011716:	490b      	ldr	r1, [pc, #44]	; (8011744 <dcd_edpt_xfer+0x1b8>)
 8011718:	6888      	ldr	r0, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 801171a:	6819      	ldr	r1, [r3, #0]
 801171c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011720:	bf14      	ite	ne
 8011722:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8011726:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 801172a:	4301      	orrs	r1, r0
 801172c:	6019      	str	r1, [r3, #0]
    if(total_bytes != 0) {
 801172e:	2a00      	cmp	r2, #0
 8011730:	f43f af5e 	beq.w	80115f0 <dcd_edpt_xfer+0x64>
 8011734:	e7e6      	b.n	8011704 <dcd_edpt_xfer+0x178>
 8011736:	bf00      	nop
 8011738:	2400d408 	.word	0x2400d408
 801173c:	40080b00 	.word	0x40080b00
 8011740:	40080900 	.word	0x40080900
 8011744:	40080800 	.word	0x40080800
 8011748:	2400d400 	.word	0x2400d400

0801174c <dcd_edpt_xfer_fifo>:
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 801174c:	88d0      	ldrh	r0, [r2, #6]
 801174e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011752:	2801      	cmp	r0, #1
 8011754:	d00a      	beq.n	801176c <dcd_edpt_xfer_fifo+0x20>
 8011756:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801175a:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 801175e:	f010 0001 	ands.w	r0, r0, #1
 8011762:	d002      	beq.n	801176a <dcd_edpt_xfer_fifo+0x1e>
 8011764:	be00      	bkpt	0x0000
 8011766:	2000      	movs	r0, #0
 8011768:	4770      	bx	lr

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 801176a:	4770      	bx	lr
{
 801176c:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801176e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = NULL;
 8011772:	4d44      	ldr	r5, [pc, #272]	; (8011884 <dcd_edpt_xfer_fifo+0x138>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8011774:	09ce      	lsrs	r6, r1, #7
 8011776:	2700      	movs	r7, #0
 8011778:	0060      	lsls	r0, r4, #1
 801177a:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 801177e:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8011782:	0109      	lsls	r1, r1, #4
  xfer->ff          = ff;
 8011784:	6042      	str	r2, [r0, #4]
  xfer->buffer      = NULL;
 8011786:	506f      	str	r7, [r5, r1]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8011788:	8941      	ldrh	r1, [r0, #10]
  xfer->total_len   = total_bytes;
 801178a:	8103      	strh	r3, [r0, #8]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 801178c:	fbb3 f2f1 	udiv	r2, r3, r1
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8011790:	fb01 3112 	mls	r1, r1, r2, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8011794:	b292      	uxth	r2, r2
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 8011796:	b289      	uxth	r1, r1
 8011798:	bb61      	cbnz	r1, 80117f4 <dcd_edpt_xfer_fifo+0xa8>
 801179a:	b35b      	cbz	r3, 80117f4 <dcd_edpt_xfer_fifo+0xa8>
  if(epnum == 0) {
 801179c:	b95c      	cbnz	r4, 80117b6 <dcd_edpt_xfer_fifo+0x6a>
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 801179e:	483a      	ldr	r0, [pc, #232]	; (8011888 <dcd_edpt_xfer_fifo+0x13c>)
 80117a0:	eb05 1306 	add.w	r3, r5, r6, lsl #4
 80117a4:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
 80117a8:	895b      	ldrh	r3, [r3, #10]
 80117aa:	428b      	cmp	r3, r1
 80117ac:	bf28      	it	cs
 80117ae:	460b      	movcs	r3, r1
    ep0_pending[dir] -= total_bytes;
 80117b0:	1ac9      	subs	r1, r1, r3
 80117b2:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 80117b6:	bb06      	cbnz	r6, 80117fa <dcd_edpt_xfer_fifo+0xae>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80117b8:	4e34      	ldr	r6, [pc, #208]	; (801188c <dcd_edpt_xfer_fifo+0x140>)
 80117ba:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 80117be:	eb06 1044 	add.w	r0, r6, r4, lsl #5
 80117c2:	6901      	ldr	r1, [r0, #16]
 80117c4:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 80117c8:	6101      	str	r1, [r0, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80117ca:	6901      	ldr	r1, [r0, #16]
 80117cc:	ea41 42c2 	orr.w	r2, r1, r2, lsl #19
 80117d0:	4313      	orrs	r3, r2
 80117d2:	6103      	str	r3, [r0, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80117d4:	f85c 3006 	ldr.w	r3, [ip, r6]
 80117d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80117dc:	f84c 3006 	str.w	r3, [ip, r6]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80117e0:	f85c 3006 	ldr.w	r3, [ip, r6]
 80117e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80117e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80117ec:	d032      	beq.n	8011854 <dcd_edpt_xfer_fifo+0x108>
  return true;
 80117ee:	2001      	movs	r0, #1
}
 80117f0:	bcf0      	pop	{r4, r5, r6, r7}
 80117f2:	4770      	bx	lr
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80117f4:	3201      	adds	r2, #1
 80117f6:	b292      	uxth	r2, r2
 80117f8:	e7d0      	b.n	801179c <dcd_edpt_xfer_fifo+0x50>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80117fa:	4925      	ldr	r1, [pc, #148]	; (8011890 <dcd_edpt_xfer_fifo+0x144>)
 80117fc:	0160      	lsls	r0, r4, #5
 80117fe:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 8011802:	eb01 1644 	add.w	r6, r1, r4, lsl #5
 8011806:	6132      	str	r2, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011808:	5842      	ldr	r2, [r0, r1]
 801180a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801180e:	5042      	str	r2, [r0, r1]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011810:	5842      	ldr	r2, [r0, r1]
 8011812:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8011816:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 801181a:	d009      	beq.n	8011830 <dcd_edpt_xfer_fifo+0xe4>
    if(total_bytes != 0) {
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0e6      	beq.n	80117ee <dcd_edpt_xfer_fifo+0xa2>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011820:	4b1c      	ldr	r3, [pc, #112]	; (8011894 <dcd_edpt_xfer_fifo+0x148>)
 8011822:	2001      	movs	r0, #1
 8011824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011826:	fa00 f404 	lsl.w	r4, r0, r4
 801182a:	4314      	orrs	r4, r2
 801182c:	635c      	str	r4, [r3, #52]	; 0x34
 801182e:	e7df      	b.n	80117f0 <dcd_edpt_xfer_fifo+0xa4>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011830:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8011834:	7f2a      	ldrb	r2, [r5, #28]
 8011836:	2a01      	cmp	r2, #1
 8011838:	d1f0      	bne.n	801181c <dcd_edpt_xfer_fifo+0xd0>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 801183a:	4a16      	ldr	r2, [pc, #88]	; (8011894 <dcd_edpt_xfer_fifo+0x148>)
 801183c:	6892      	ldr	r2, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 801183e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8011842:	5842      	ldr	r2, [r0, r1]
 8011844:	bf14      	ite	ne
 8011846:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 801184a:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 801184e:	432a      	orrs	r2, r5
 8011850:	5042      	str	r2, [r0, r1]
 8011852:	e7e3      	b.n	801181c <dcd_edpt_xfer_fifo+0xd0>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011854:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8011858:	7b28      	ldrb	r0, [r5, #12]
 801185a:	2801      	cmp	r0, #1
 801185c:	d1c7      	bne.n	80117ee <dcd_edpt_xfer_fifo+0xa2>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 801185e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011862:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 8011866:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8011868:	f85c 3006 	ldr.w	r3, [ip, r6]
 801186c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8011870:	bf14      	ite	ne
 8011872:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011876:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 801187a:	4313      	orrs	r3, r2
 801187c:	f84c 3006 	str.w	r3, [ip, r6]
 8011880:	e7b6      	b.n	80117f0 <dcd_edpt_xfer_fifo+0xa4>
 8011882:	bf00      	nop
 8011884:	2400d408 	.word	0x2400d408
 8011888:	2400d400 	.word	0x2400d400
 801188c:	40080b00 	.word	0x40080b00
 8011890:	40080900 	.word	0x40080900
 8011894:	40080800 	.word	0x40080800

08011898 <dcd_edpt_close>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8011898:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  if(dir == TUSB_DIR_IN) {
 801189c:	09c9      	lsrs	r1, r1, #7

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 801189e:	b430      	push	{r4, r5}
  if(dir == TUSB_DIR_IN) {
 80118a0:	d132      	bne.n	8011908 <dcd_edpt_close+0x70>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80118a2:	b970      	cbnz	r0, 80118c2 <dcd_edpt_close+0x2a>
 80118a4:	4b42      	ldr	r3, [pc, #264]	; (80119b0 <dcd_edpt_close+0x118>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	601a      	str	r2, [r3, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_disable(rhport, ep_addr, false);

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80118aa:	4b42      	ldr	r3, [pc, #264]	; (80119b4 <dcd_edpt_close+0x11c>)
 80118ac:	2200      	movs	r2, #0
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
    _allocated_fifo_words_tx -= fifo_size;
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80118ae:	4942      	ldr	r1, [pc, #264]	; (80119b8 <dcd_edpt_close+0x120>)
 80118b0:	f04f 0c01 	mov.w	ip, #1
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80118b4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80118b8:	f881 c000 	strb.w	ip, [r1]
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80118bc:	815a      	strh	r2, [r3, #10]
  }
}
 80118be:	bc30      	pop	{r4, r5}
 80118c0:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80118c2:	4c3b      	ldr	r4, [pc, #236]	; (80119b0 <dcd_edpt_close+0x118>)
 80118c4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80118c8:	f85c 2004 	ldr.w	r2, [ip, r4]
 80118cc:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 80118d0:	2a00      	cmp	r2, #0
 80118d2:	dae8      	bge.n	80118a6 <dcd_edpt_close+0xe>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80118d4:	4d39      	ldr	r5, [pc, #228]	; (80119bc <dcd_edpt_close+0x124>)
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80118d6:	493a      	ldr	r1, [pc, #232]	; (80119c0 <dcd_edpt_close+0x128>)
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80118d8:	686a      	ldr	r2, [r5, #4]
 80118da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80118de:	606a      	str	r2, [r5, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80118e0:	694a      	ldr	r2, [r1, #20]
 80118e2:	0615      	lsls	r5, r2, #24
 80118e4:	d5fc      	bpl.n	80118e0 <dcd_edpt_close+0x48>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 80118e6:	f85c 2004 	ldr.w	r2, [ip, r4]
 80118ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80118ee:	f84c 2004 	str.w	r2, [ip, r4]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 80118f2:	689a      	ldr	r2, [r3, #8]
 80118f4:	0792      	lsls	r2, r2, #30
 80118f6:	d5fc      	bpl.n	80118f2 <dcd_edpt_close+0x5a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 80118f8:	4a30      	ldr	r2, [pc, #192]	; (80119bc <dcd_edpt_close+0x124>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 80118fa:	2102      	movs	r1, #2
 80118fc:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 80118fe:	6853      	ldr	r3, [r2, #4]
 8011900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011904:	6053      	str	r3, [r2, #4]
 8011906:	e7d0      	b.n	80118aa <dcd_edpt_close+0x12>
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011908:	2800      	cmp	r0, #0
 801190a:	d033      	beq.n	8011974 <dcd_edpt_close+0xdc>
 801190c:	4c2d      	ldr	r4, [pc, #180]	; (80119c4 <dcd_edpt_close+0x12c>)
 801190e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8011912:	b201      	sxth	r1, r0
 8011914:	f85c 2004 	ldr.w	r2, [ip, r4]
 8011918:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 801191c:	2a00      	cmp	r2, #0
 801191e:	db31      	blt.n	8011984 <dcd_edpt_close+0xec>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011926:	601a      	str	r2, [r3, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8011928:	4a25      	ldr	r2, [pc, #148]	; (80119c0 <dcd_edpt_close+0x128>)
 801192a:	6913      	ldr	r3, [r2, #16]
 801192c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8011930:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8011932:	6913      	ldr	r3, [r2, #16]
 8011934:	f043 0320 	orr.w	r3, r3, #32
 8011938:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 801193a:	6913      	ldr	r3, [r2, #16]
 801193c:	f013 0320 	ands.w	r3, r3, #32
 8011940:	d1fb      	bne.n	801193a <dcd_edpt_close+0xa2>
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8011942:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011946:	491b      	ldr	r1, [pc, #108]	; (80119b4 <dcd_edpt_close+0x11c>)
 8011948:	eb01 1140 	add.w	r1, r1, r0, lsl #5
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 801194c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 8011950:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8011954:	834b      	strh	r3, [r1, #26]
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8011956:	491c      	ldr	r1, [pc, #112]	; (80119c8 <dcd_edpt_close+0x130>)
 8011958:	b292      	uxth	r2, r2
 801195a:	880b      	ldrh	r3, [r1, #0]
 801195c:	f5c3 6080 	rsb	r0, r3, #1024	; 0x400
 8011960:	4282      	cmp	r2, r0
 8011962:	d00a      	beq.n	801197a <dcd_edpt_close+0xe2>
 8011964:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011968:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801196c:	07db      	lsls	r3, r3, #31
 801196e:	d5a6      	bpl.n	80118be <dcd_edpt_close+0x26>
 8011970:	be00      	bkpt	0x0000
 8011972:	e7a4      	b.n	80118be <dcd_edpt_close+0x26>
 8011974:	4b13      	ldr	r3, [pc, #76]	; (80119c4 <dcd_edpt_close+0x12c>)
 8011976:	4601      	mov	r1, r0
 8011978:	e7d2      	b.n	8011920 <dcd_edpt_close+0x88>
    _allocated_fifo_words_tx -= fifo_size;
 801197a:	eba3 4314 	sub.w	r3, r3, r4, lsr #16
}
 801197e:	bc30      	pop	{r4, r5}
    _allocated_fifo_words_tx -= fifo_size;
 8011980:	800b      	strh	r3, [r1, #0]
}
 8011982:	4770      	bx	lr
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011984:	f85c 2004 	ldr.w	r2, [ip, r4]
 8011988:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801198c:	f84c 2004 	str.w	r2, [ip, r4]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	0655      	lsls	r5, r2, #25
 8011994:	d5fc      	bpl.n	8011990 <dcd_edpt_close+0xf8>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011996:	f85c 2004 	ldr.w	r2, [ip, r4]
 801199a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801199e:	f84c 2004 	str.w	r2, [ip, r4]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80119a2:	689a      	ldr	r2, [r3, #8]
 80119a4:	0792      	lsls	r2, r2, #30
 80119a6:	d5fc      	bpl.n	80119a2 <dcd_edpt_close+0x10a>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80119a8:	2202      	movs	r2, #2
 80119aa:	609a      	str	r2, [r3, #8]
 80119ac:	e7bc      	b.n	8011928 <dcd_edpt_close+0x90>
 80119ae:	bf00      	nop
 80119b0:	40080b00 	.word	0x40080b00
 80119b4:	2400d408 	.word	0x2400d408
 80119b8:	2400d3f6 	.word	0x2400d3f6
 80119bc:	40080800 	.word	0x40080800
 80119c0:	40080000 	.word	0x40080000
 80119c4:	40080900 	.word	0x40080900
 80119c8:	2400d3f4 	.word	0x2400d3f4

080119cc <dcd_edpt_stall>:
 80119cc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  if(dir == TUSB_DIR_IN) {
 80119d0:	09c9      	lsrs	r1, r1, #7
 80119d2:	d12b      	bne.n	8011a2c <dcd_edpt_stall+0x60>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80119d4:	b92b      	cbnz	r3, 80119e2 <dcd_edpt_stall+0x16>
 80119d6:	4b30      	ldr	r3, [pc, #192]	; (8011a98 <dcd_edpt_stall+0xcc>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80119de:	601a      	str	r2, [r3, #0]
 80119e0:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80119e2:	482d      	ldr	r0, [pc, #180]	; (8011a98 <dcd_edpt_stall+0xcc>)
 80119e4:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 80119e8:	f85c 2000 	ldr.w	r2, [ip, r0]
 80119ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80119f0:	2a00      	cmp	r2, #0
 80119f2:	daf1      	bge.n	80119d8 <dcd_edpt_stall+0xc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80119f4:	4929      	ldr	r1, [pc, #164]	; (8011a9c <dcd_edpt_stall+0xd0>)
 80119f6:	684a      	ldr	r2, [r1, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80119f8:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80119fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a00:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8011a04:	694a      	ldr	r2, [r1, #20]
 8011a06:	0612      	lsls	r2, r2, #24
 8011a08:	d5fc      	bpl.n	8011a04 <dcd_edpt_stall+0x38>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8011a0a:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011a0e:	4a24      	ldr	r2, [pc, #144]	; (8011aa0 <dcd_edpt_stall+0xd4>)
 8011a10:	430a      	orrs	r2, r1
 8011a12:	f84c 2000 	str.w	r2, [ip, r0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8011a16:	689a      	ldr	r2, [r3, #8]
 8011a18:	0792      	lsls	r2, r2, #30
 8011a1a:	d5fc      	bpl.n	8011a16 <dcd_edpt_stall+0x4a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011a1c:	4a1f      	ldr	r2, [pc, #124]	; (8011a9c <dcd_edpt_stall+0xd0>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8011a1e:	2102      	movs	r1, #2
 8011a20:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011a22:	6853      	ldr	r3, [r2, #4]
 8011a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a28:	6053      	str	r3, [r2, #4]
 8011a2a:	4770      	bx	lr

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8011a2c:	b410      	push	{r4}
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011a2e:	b1db      	cbz	r3, 8011a68 <dcd_edpt_stall+0x9c>
 8011a30:	481c      	ldr	r0, [pc, #112]	; (8011aa4 <dcd_edpt_stall+0xd8>)
 8011a32:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8011a36:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011a3a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8011a3e:	2900      	cmp	r1, #0
 8011a40:	db14      	blt.n	8011a6c <dcd_edpt_stall+0xa0>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011a42:	6811      	ldr	r1, [r2, #0]
 8011a44:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 8011a48:	6011      	str	r1, [r2, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8011a4a:	4a17      	ldr	r2, [pc, #92]	; (8011aa8 <dcd_edpt_stall+0xdc>)
 8011a4c:	6911      	ldr	r1, [r2, #16]
 8011a4e:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8011a52:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8011a54:	6913      	ldr	r3, [r2, #16]
 8011a56:	f043 0320 	orr.w	r3, r3, #32
 8011a5a:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8011a5c:	6913      	ldr	r3, [r2, #16]
 8011a5e:	0699      	lsls	r1, r3, #26
 8011a60:	d4fc      	bmi.n	8011a5c <dcd_edpt_stall+0x90>
  dcd_edpt_disable(rhport, ep_addr, true);
}
 8011a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a66:	4770      	bx	lr
 8011a68:	4a0e      	ldr	r2, [pc, #56]	; (8011aa4 <dcd_edpt_stall+0xd8>)
 8011a6a:	e7ea      	b.n	8011a42 <dcd_edpt_stall+0x76>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011a6c:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011a70:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011a74:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8011a78:	6891      	ldr	r1, [r2, #8]
 8011a7a:	064c      	lsls	r4, r1, #25
 8011a7c:	d5fc      	bpl.n	8011a78 <dcd_edpt_stall+0xac>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011a7e:	f85c 4000 	ldr.w	r4, [ip, r0]
 8011a82:	4907      	ldr	r1, [pc, #28]	; (8011aa0 <dcd_edpt_stall+0xd4>)
 8011a84:	4321      	orrs	r1, r4
 8011a86:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 8011a8a:	6891      	ldr	r1, [r2, #8]
 8011a8c:	0788      	lsls	r0, r1, #30
 8011a8e:	d5fc      	bpl.n	8011a8a <dcd_edpt_stall+0xbe>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8011a90:	2102      	movs	r1, #2
 8011a92:	6091      	str	r1, [r2, #8]
 8011a94:	e7d9      	b.n	8011a4a <dcd_edpt_stall+0x7e>
 8011a96:	bf00      	nop
 8011a98:	40080b00 	.word	0x40080b00
 8011a9c:	40080800 	.word	0x40080800
 8011aa0:	40200000 	.word	0x40200000
 8011aa4:	40080900 	.word	0x40080900
 8011aa8:	40080000 	.word	0x40080000

08011aac <dcd_edpt_clear_stall>:
 8011aac:	f001 037f 	and.w	r3, r1, #127	; 0x7f

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8011ab0:	09c9      	lsrs	r1, r1, #7
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011ab2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8011ab6:	bf14      	ite	ne
 8011ab8:	4a05      	ldrne	r2, [pc, #20]	; (8011ad0 <dcd_edpt_clear_stall+0x24>)
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011aba:	4a06      	ldreq	r2, [pc, #24]	; (8011ad4 <dcd_edpt_clear_stall+0x28>)
 8011abc:	5899      	ldr	r1, [r3, r2]
 8011abe:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8011ac2:	5099      	str	r1, [r3, r2]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011ac4:	5899      	ldr	r1, [r3, r2]
 8011ac6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8011aca:	5099      	str	r1, [r3, r2]
  }
}
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop
 8011ad0:	40080900 	.word	0x40080900
 8011ad4:	40080b00 	.word	0x40080b00

08011ad8 <dcd_int_handler>:
    }
  }
}

void dcd_int_handler(uint8_t rhport)
{
 8011ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8011adc:	4c98      	ldr	r4, [pc, #608]	; (8011d40 <dcd_int_handler+0x268>)
{
 8011ade:	b089      	sub	sp, #36	; 0x24
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8011ae0:	6966      	ldr	r6, [r4, #20]
 8011ae2:	69a3      	ldr	r3, [r4, #24]
{
 8011ae4:	9001      	str	r0, [sp, #4]
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8011ae6:	401e      	ands	r6, r3

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8011ae8:	04f0      	lsls	r0, r6, #19
 8011aea:	f100 813d 	bmi.w	8011d68 <dcd_int_handler+0x290>
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
    bus_reset(rhport);
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8011aee:	04b1      	lsls	r1, r6, #18
 8011af0:	d531      	bpl.n	8011b56 <dcd_int_handler+0x7e>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8011af2:	4b93      	ldr	r3, [pc, #588]	; (8011d40 <dcd_int_handler+0x268>)
 8011af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8011af8:	4992      	ldr	r1, [pc, #584]	; (8011d44 <dcd_int_handler+0x26c>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8011afa:	615a      	str	r2, [r3, #20]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8011afc:	6889      	ldr	r1, [r1, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011afe:	f011 0f06 	tst.w	r1, #6
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b02:	68d9      	ldr	r1, [r3, #12]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011b04:	d010      	beq.n	8011b28 <dcd_int_handler+0x50>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b06:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8011b0a:	60d9      	str	r1, [r3, #12]
    if ( SystemCoreClock >= 32000000U )
 8011b0c:	4b8e      	ldr	r3, [pc, #568]	; (8011d48 <dcd_int_handler+0x270>)
 8011b0e:	498f      	ldr	r1, [pc, #572]	; (8011d4c <dcd_int_handler+0x274>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	428b      	cmp	r3, r1
 8011b14:	f0c0 82c0 	bcc.w	8012098 <dcd_int_handler+0x5c0>
 8011b18:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8011b1c:	4988      	ldr	r1, [pc, #544]	; (8011d40 <dcd_int_handler+0x268>)
 8011b1e:	68cb      	ldr	r3, [r1, #12]
 8011b20:	4313      	orrs	r3, r2
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011b22:	2200      	movs	r2, #0
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8011b24:	60cb      	str	r3, [r1, #12]
 8011b26:	e007      	b.n	8011b38 <dcd_int_handler+0x60>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b28:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011b2c:	2202      	movs	r2, #2
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b2e:	60d9      	str	r1, [r3, #12]
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8011b30:	68d9      	ldr	r1, [r3, #12]
 8011b32:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8011b36:	60d9      	str	r1, [r3, #12]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011b38:	2300      	movs	r3, #0
 8011b3a:	2101      	movs	r1, #1
  event.bus_reset.speed = speed;
  dcd_event_handler(&event, in_isr);
 8011b3c:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011b3e:	9307      	str	r3, [sp, #28]
 8011b40:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011b44:	9b01      	ldr	r3, [sp, #4]
  event.bus_reset.speed = speed;
 8011b46:	f88d 2018 	strb.w	r2, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011b4a:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b4e:	f88d 1015 	strb.w	r1, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b52:	f7ff f827 	bl	8010ba4 <dcd_event_handler>

    set_turnaround(usb_otg, speed);
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8011b56:	0532      	lsls	r2, r6, #20
 8011b58:	f100 80c9 	bmi.w	8011cee <dcd_int_handler+0x216>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8011b5c:	2e00      	cmp	r6, #0
 8011b5e:	f2c0 80db 	blt.w	8011d18 <dcd_int_handler+0x240>
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8011b62:	0773      	lsls	r3, r6, #29
 8011b64:	d506      	bpl.n	8011b74 <dcd_int_handler+0x9c>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8011b66:	4b76      	ldr	r3, [pc, #472]	; (8011d40 <dcd_int_handler+0x268>)
 8011b68:	685c      	ldr	r4, [r3, #4]

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8011b6a:	0767      	lsls	r7, r4, #29
 8011b6c:	f100 8283 	bmi.w	8012076 <dcd_int_handler+0x59e>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8011b70:	4b73      	ldr	r3, [pc, #460]	; (8011d40 <dcd_int_handler+0x268>)
 8011b72:	605c      	str	r4, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8011b74:	0735      	lsls	r5, r6, #28
 8011b76:	f100 80a4 	bmi.w	8011cc2 <dcd_int_handler+0x1ea>

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8011b7a:	06f4      	lsls	r4, r6, #27
 8011b7c:	d529      	bpl.n	8011bd2 <dcd_int_handler+0xfa>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8011b7e:	4f70      	ldr	r7, [pc, #448]	; (8011d40 <dcd_int_handler+0x268>)
      _setup_packet[0] = (* rx_fifo);
 8011b80:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8011d64 <dcd_int_handler+0x28c>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8011b84:	69bb      	ldr	r3, [r7, #24]
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011b86:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8011d60 <dcd_int_handler+0x288>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8011b8a:	f023 0310 	bic.w	r3, r3, #16
 8011b8e:	61bb      	str	r3, [r7, #24]
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8011b90:	6a3c      	ldr	r4, [r7, #32]
  switch(pktsts) {
 8011b92:	f3c4 4343 	ubfx	r3, r4, #17, #4
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8011b96:	f004 050f 	and.w	r5, r4, #15
  switch(pktsts) {
 8011b9a:	3b01      	subs	r3, #1
 8011b9c:	2b05      	cmp	r3, #5
 8011b9e:	d855      	bhi.n	8011c4c <dcd_int_handler+0x174>
 8011ba0:	e8df f003 	tbb	[pc, r3]
 8011ba4:	200a2b0a 	.word	0x200a2b0a
 8011ba8:	0354      	.short	0x0354
      _setup_packet[0] = (* rx_fifo);
 8011baa:	f8d9 2000 	ldr.w	r2, [r9]
 8011bae:	4b68      	ldr	r3, [pc, #416]	; (8011d50 <dcd_int_handler+0x278>)
 8011bb0:	601a      	str	r2, [r3, #0]
      _setup_packet[1] = (* rx_fifo);
 8011bb2:	f8d9 2000 	ldr.w	r2, [r9]
 8011bb6:	605a      	str	r2, [r3, #4]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	f013 0310 	ands.w	r3, r3, #16
 8011bbe:	d1e7      	bne.n	8011b90 <dcd_int_handler+0xb8>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8011bc0:	4964      	ldr	r1, [pc, #400]	; (8011d54 <dcd_int_handler+0x27c>)
 8011bc2:	780a      	ldrb	r2, [r1, #0]
 8011bc4:	2a00      	cmp	r2, #0
 8011bc6:	d14d      	bne.n	8011c64 <dcd_int_handler+0x18c>

      // Disable flag
      _out_ep_closed = false;
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011bc8:	4a5d      	ldr	r2, [pc, #372]	; (8011d40 <dcd_int_handler+0x268>)
 8011bca:	6993      	ldr	r3, [r2, #24]
 8011bcc:	f043 0310 	orr.w	r3, r3, #16
 8011bd0:	6193      	str	r3, [r2, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8011bd2:	0330      	lsls	r0, r6, #12
 8011bd4:	f100 81bf 	bmi.w	8011f56 <dcd_int_handler+0x47e>
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8011bd8:	0370      	lsls	r0, r6, #13
 8011bda:	f100 8123 	bmi.w	8011e24 <dcd_int_handler+0x34c>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8011bde:	b009      	add	sp, #36	; 0x24
 8011be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011be4:	eb08 1545 	add.w	r5, r8, r5, lsl #5
 8011be8:	692b      	ldr	r3, [r5, #16]
 8011bea:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011bee:	612b      	str	r3, [r5, #16]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f013 0310 	ands.w	r3, r3, #16
 8011bf6:	d1cb      	bne.n	8011b90 <dcd_int_handler+0xb8>
 8011bf8:	e7e2      	b.n	8011bc0 <dcd_int_handler+0xe8>
      if (xfer->ff)
 8011bfa:	f8df a160 	ldr.w	sl, [pc, #352]	; 8011d5c <dcd_int_handler+0x284>
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8011bfe:	f3c4 140a 	ubfx	r4, r4, #4, #11
      if (xfer->ff)
 8011c02:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 8011c06:	eb0a 1345 	add.w	r3, sl, r5, lsl #5
 8011c0a:	6858      	ldr	r0, [r3, #4]
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	f000 8211 	beq.w	8012034 <dcd_int_handler+0x55c>
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8011c12:	4622      	mov	r2, r4
 8011c14:	4649      	mov	r1, r9
 8011c16:	f7fe f9c7 	bl	800ffa8 <tu_fifo_write_n_const_addr_full_words>
      if(bcnt < xfer->max_size) {
 8011c1a:	eb0a 030b 	add.w	r3, sl, fp
 8011c1e:	895a      	ldrh	r2, [r3, #10]
 8011c20:	42a2      	cmp	r2, r4
 8011c22:	d9c9      	bls.n	8011bb8 <dcd_int_handler+0xe0>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 8011c24:	eb08 1245 	add.w	r2, r8, r5, lsl #5
 8011c28:	6911      	ldr	r1, [r2, #16]
 8011c2a:	891a      	ldrh	r2, [r3, #8]
 8011c2c:	1a52      	subs	r2, r2, r1
 8011c2e:	b292      	uxth	r2, r2
 8011c30:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 8011c32:	2d00      	cmp	r5, #0
 8011c34:	d1c0      	bne.n	8011bb8 <dcd_int_handler+0xe0>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8011c36:	4b48      	ldr	r3, [pc, #288]	; (8011d58 <dcd_int_handler+0x280>)
 8011c38:	8819      	ldrh	r1, [r3, #0]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8011c3a:	801d      	strh	r5, [r3, #0]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011c3c:	697b      	ldr	r3, [r7, #20]
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8011c3e:	1a52      	subs	r2, r2, r1
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011c40:	f013 0310 	ands.w	r3, r3, #16
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8011c44:	f8aa 2008 	strh.w	r2, [sl, #8]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011c48:	d1a2      	bne.n	8011b90 <dcd_int_handler+0xb8>
 8011c4a:	e7b9      	b.n	8011bc0 <dcd_int_handler+0xe8>
      TU_BREAKPOINT();
 8011c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011c50:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011c54:	07dc      	lsls	r4, r3, #31
 8011c56:	d5af      	bpl.n	8011bb8 <dcd_int_handler+0xe0>
 8011c58:	be00      	bkpt	0x0000
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	f013 0310 	ands.w	r3, r3, #16
 8011c60:	d196      	bne.n	8011b90 <dcd_int_handler+0xb8>
 8011c62:	e7ad      	b.n	8011bc0 <dcd_int_handler+0xe8>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8011c64:	483d      	ldr	r0, [pc, #244]	; (8011d5c <dcd_int_handler+0x284>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8011c66:	8942      	ldrh	r2, [r0, #10]
 8011c68:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8011c6a:	42a2      	cmp	r2, r4
 8011c6c:	bf38      	it	cc
 8011c6e:	4622      	movcc	r2, r4
 8011c70:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 8011c74:	42a2      	cmp	r2, r4
 8011c76:	bf38      	it	cc
 8011c78:	4622      	movcc	r2, r4
 8011c7a:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8011c7e:	42a2      	cmp	r2, r4
 8011c80:	bf38      	it	cc
 8011c82:	4622      	movcc	r2, r4
 8011c84:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
 8011c88:	42a2      	cmp	r2, r4
 8011c8a:	bf38      	it	cc
 8011c8c:	4622      	movcc	r2, r4
 8011c8e:	f8b0 40aa 	ldrh.w	r4, [r0, #170]	; 0xaa
 8011c92:	42a2      	cmp	r2, r4
 8011c94:	bf38      	it	cc
 8011c96:	4622      	movcc	r2, r4
 8011c98:	f8b0 40ca 	ldrh.w	r4, [r0, #202]	; 0xca
 8011c9c:	42a2      	cmp	r2, r4
 8011c9e:	bf38      	it	cc
 8011ca0:	4622      	movcc	r2, r4
 8011ca2:	f8b0 40ea 	ldrh.w	r4, [r0, #234]	; 0xea
 8011ca6:	f8b0 010a 	ldrh.w	r0, [r0, #266]	; 0x10a
 8011caa:	42a2      	cmp	r2, r4
 8011cac:	bf38      	it	cc
 8011cae:	4622      	movcc	r2, r4
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8011cb0:	4282      	cmp	r2, r0
 8011cb2:	bf38      	it	cc
 8011cb4:	4602      	movcc	r2, r0
 8011cb6:	0892      	lsrs	r2, r2, #2
 8011cb8:	0052      	lsls	r2, r2, #1
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8011cba:	3221      	adds	r2, #33	; 0x21
 8011cbc:	627a      	str	r2, [r7, #36]	; 0x24
      _out_ep_closed = false;
 8011cbe:	700b      	strb	r3, [r1, #0]
 8011cc0:	e782      	b.n	8011bc8 <dcd_int_handler+0xf0>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8011cc2:	4b1f      	ldr	r3, [pc, #124]	; (8011d40 <dcd_int_handler+0x268>)
 8011cc4:	2208      	movs	r2, #8
  dcd_event_handler(&event, in_isr);
 8011cc6:	a805      	add	r0, sp, #20
 8011cc8:	2101      	movs	r1, #1
 8011cca:	615a      	str	r2, [r3, #20]
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8011ccc:	699a      	ldr	r2, [r3, #24]
 8011cce:	f022 0208 	bic.w	r2, r2, #8
 8011cd2:	619a      	str	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	2203      	movs	r2, #3
 8011cd8:	9307      	str	r3, [sp, #28]
 8011cda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011cde:	9b01      	ldr	r3, [sp, #4]
 8011ce0:	f88d 2015 	strb.w	r2, [sp, #21]
 8011ce4:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8011ce8:	f7fe ff5c 	bl	8010ba4 <dcd_event_handler>
}
 8011cec:	e745      	b.n	8011b7a <dcd_int_handler+0xa2>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8011cee:	4b14      	ldr	r3, [pc, #80]	; (8011d40 <dcd_int_handler+0x268>)
 8011cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  dcd_event_handler(&event, in_isr);
 8011cf4:	a805      	add	r0, sp, #20
 8011cf6:	2101      	movs	r1, #1
 8011cf8:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	2204      	movs	r2, #4
 8011cfe:	9307      	str	r3, [sp, #28]
 8011d00:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011d04:	9b01      	ldr	r3, [sp, #4]
 8011d06:	f88d 2015 	strb.w	r2, [sp, #21]
 8011d0a:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8011d0e:	f7fe ff49 	bl	8010ba4 <dcd_event_handler>
  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8011d12:	2e00      	cmp	r6, #0
 8011d14:	f6bf af25 	bge.w	8011b62 <dcd_int_handler+0x8a>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8011d18:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <dcd_int_handler+0x268>)
 8011d1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d1e:	a805      	add	r0, sp, #20
 8011d20:	2101      	movs	r1, #1
 8011d22:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011d24:	2300      	movs	r3, #0
 8011d26:	2205      	movs	r2, #5
 8011d28:	9307      	str	r3, [sp, #28]
 8011d2a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011d2e:	9b01      	ldr	r3, [sp, #4]
 8011d30:	f88d 2015 	strb.w	r2, [sp, #21]
 8011d34:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8011d38:	f7fe ff34 	bl	8010ba4 <dcd_event_handler>
}
 8011d3c:	e711      	b.n	8011b62 <dcd_int_handler+0x8a>
 8011d3e:	bf00      	nop
 8011d40:	40080000 	.word	0x40080000
 8011d44:	40080800 	.word	0x40080800
 8011d48:	24000314 	.word	0x24000314
 8011d4c:	01e84800 	.word	0x01e84800
 8011d50:	2400d3f8 	.word	0x2400d3f8
 8011d54:	2400d3f6 	.word	0x2400d3f6
 8011d58:	2400d400 	.word	0x2400d400
 8011d5c:	2400d408 	.word	0x2400d408
 8011d60:	40080b00 	.word	0x40080b00
 8011d64:	40081000 	.word	0x40081000
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011d68:	4da6      	ldr	r5, [pc, #664]	; (8012004 <dcd_int_handler+0x52c>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8011d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011d6e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8011d72:	2100      	movs	r1, #0
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8011d74:	6163      	str	r3, [r4, #20]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011d76:	4628      	mov	r0, r5
 8011d78:	f001 f931 	bl	8012fde <memset>
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8011d7c:	4aa2      	ldr	r2, [pc, #648]	; (8012008 <dcd_int_handler+0x530>)
  _out_ep_closed = false;
 8011d7e:	4ba3      	ldr	r3, [pc, #652]	; (801200c <dcd_int_handler+0x534>)
 8011d80:	2100      	movs	r1, #0
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011d82:	4fa3      	ldr	r7, [pc, #652]	; (8012010 <dcd_int_handler+0x538>)
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8011d84:	2009      	movs	r0, #9
  _out_ep_closed = false;
 8011d86:	7019      	strb	r1, [r3, #0]
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8011d88:	6813      	ldr	r3, [r2, #0]
 8011d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011d8e:	6013      	str	r3, [r2, #0]
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011d90:	4ba0      	ldr	r3, [pc, #640]	; (8012014 <dcd_int_handler+0x53c>)
 8011d92:	6819      	ldr	r1, [r3, #0]
 8011d94:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011d98:	6019      	str	r1, [r3, #0]
 8011d9a:	6a19      	ldr	r1, [r3, #32]
 8011d9c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011da0:	6219      	str	r1, [r3, #32]
 8011da2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011da4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011da8:	6419      	str	r1, [r3, #64]	; 0x40
 8011daa:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8011dac:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011db0:	6619      	str	r1, [r3, #96]	; 0x60
 8011db2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8011db6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011dba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8011dbe:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8011dc2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011dc6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8011dca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8011dce:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011dd2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8011dd6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8011dda:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011dde:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011de8:	6039      	str	r1, [r7, #0]
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011dea:	f04f 1701 	mov.w	r7, #65537	; 0x10001
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8011dee:	498a      	ldr	r1, [pc, #552]	; (8012018 <dcd_int_handler+0x540>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011df0:	61d7      	str	r7, [r2, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8011df2:	6150      	str	r0, [r2, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8011df4:	6110      	str	r0, [r2, #16]
  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8011df6:	2241      	movs	r2, #65	; 0x41
  _allocated_fifo_words_tx = 16;
 8011df8:	2010      	movs	r0, #16
  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8011dfa:	6262      	str	r2, [r4, #36]	; 0x24
  _allocated_fifo_words_tx = 16;
 8011dfc:	4a87      	ldr	r2, [pc, #540]	; (801201c <dcd_int_handler+0x544>)
 8011dfe:	8010      	strh	r0, [r2, #0]
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8011e00:	4a87      	ldr	r2, [pc, #540]	; (8012020 <dcd_int_handler+0x548>)
 8011e02:	62a2      	str	r2, [r4, #40]	; 0x28
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8011e04:	680a      	ldr	r2, [r1, #0]
 8011e06:	f022 0203 	bic.w	r2, r2, #3
 8011e0a:	600a      	str	r2, [r1, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8011e0c:	2140      	movs	r1, #64	; 0x40
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011e0e:	691a      	ldr	r2, [r3, #16]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8011e10:	8369      	strh	r1, [r5, #26]
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011e12:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8011e16:	8169      	strh	r1, [r5, #10]
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011e18:	611a      	str	r2, [r3, #16]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8011e1a:	69a3      	ldr	r3, [r4, #24]
 8011e1c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8011e20:	61a3      	str	r3, [r4, #24]
}
 8011e22:	e664      	b.n	8011aee <dcd_int_handler+0x16>
 8011e24:	4b77      	ldr	r3, [pc, #476]	; (8012004 <dcd_int_handler+0x52c>)
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8011e26:	f04f 0901 	mov.w	r9, #1
 8011e2a:	2400      	movs	r4, #0
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8011e2c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8012008 <dcd_int_handler+0x530>
 8011e30:	461d      	mov	r5, r3
 8011e32:	9302      	str	r3, [sp, #8]
 8011e34:	e009      	b.n	8011e4a <dcd_int_handler+0x372>
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8011e36:	f1b9 0f09 	cmp.w	r9, #9
 8011e3a:	f43f aed0 	beq.w	8011bde <dcd_int_handler+0x106>
 8011e3e:	f109 0901 	add.w	r9, r9, #1
 8011e42:	3401      	adds	r4, #1
 8011e44:	3520      	adds	r5, #32
 8011e46:	fa5f f989 	uxtb.w	r9, r9
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011e50:	b2e0      	uxtb	r0, r4
 8011e52:	fa03 f104 	lsl.w	r1, r3, r4
 8011e56:	4211      	tst	r1, r2
 8011e58:	d0ed      	beq.n	8011e36 <dcd_int_handler+0x35e>
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8011e5a:	4a6f      	ldr	r2, [pc, #444]	; (8012018 <dcd_int_handler+0x540>)
 8011e5c:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 8011e60:	68b2      	ldr	r2, [r6, #8]
 8011e62:	07d1      	lsls	r1, r2, #31
 8011e64:	d519      	bpl.n	8011e9a <dcd_int_handler+0x3c2>
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8011e66:	60b3      	str	r3, [r6, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8011e68:	b924      	cbnz	r4, 8011e74 <dcd_int_handler+0x39c>
 8011e6a:	4a6e      	ldr	r2, [pc, #440]	; (8012024 <dcd_int_handler+0x54c>)
 8011e6c:	8853      	ldrh	r3, [r2, #2]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f040 8172 	bne.w	8012158 <dcd_int_handler+0x680>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011e74:	2300      	movs	r3, #0
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011e76:	f060 007f 	orn	r0, r0, #127	; 0x7f

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 8011e7a:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011e7c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011e80:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 8011e82:	f88d 0018 	strb.w	r0, [sp, #24]
  dcd_event_handler(&event, in_isr);
 8011e86:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011e88:	f88d 3014 	strb.w	r3, [sp, #20]
 8011e8c:	8b2b      	ldrh	r3, [r5, #24]
  event.xfer_complete.len     = xferred_bytes;
 8011e8e:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011e90:	2307      	movs	r3, #7
 8011e92:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011e96:	f7fe fe85 	bl	8010ba4 <dcd_event_handler>
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8011e9a:	68b3      	ldr	r3, [r6, #8]
 8011e9c:	061a      	lsls	r2, r3, #24
 8011e9e:	d5ca      	bpl.n	8011e36 <dcd_int_handler+0x35e>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	40a3      	lsls	r3, r4
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011eac:	421a      	tst	r2, r3
 8011eae:	d0c2      	beq.n	8011e36 <dcd_int_handler+0x35e>
        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8011eb0:	6937      	ldr	r7, [r6, #16]
 8011eb2:	f3c7 47c9 	ubfx	r7, r7, #19, #10
        for(uint16_t i = 0; i < remaining_packets; i++)
 8011eb6:	2f00      	cmp	r7, #0
 8011eb8:	d03f      	beq.n	8011f3a <dcd_int_handler+0x462>
 8011eba:	4b5b      	ldr	r3, [pc, #364]	; (8012028 <dcd_int_handler+0x550>)
 8011ebc:	f04f 0a00 	mov.w	sl, #0
 8011ec0:	eb03 3b04 	add.w	fp, r3, r4, lsl #12
 8011ec4:	e008      	b.n	8011ed8 <dcd_int_handler+0x400>
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8011ec6:	4659      	mov	r1, fp
 8011ec8:	f7fd fed2 	bl	800fc70 <tu_fifo_read_n_const_addr_full_words>
        for(uint16_t i = 0; i < remaining_packets; i++)
 8011ecc:	f10a 0a01 	add.w	sl, sl, #1
 8011ed0:	fa1f f38a 	uxth.w	r3, sl
 8011ed4:	429f      	cmp	r7, r3
 8011ed6:	d930      	bls.n	8011f3a <dcd_int_handler+0x462>
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8011ed8:	6931      	ldr	r1, [r6, #16]
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8011eda:	4a54      	ldr	r2, [pc, #336]	; (801202c <dcd_int_handler+0x554>)
 8011edc:	69b3      	ldr	r3, [r6, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011ede:	b289      	uxth	r1, r1
 8011ee0:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8011ee4:	8b6a      	ldrh	r2, [r5, #26]
 8011ee6:	428a      	cmp	r2, r1
 8011ee8:	bf28      	it	cs
 8011eea:	460a      	movcs	r2, r1
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d824      	bhi.n	8011f3a <dcd_int_handler+0x462>
          if (xfer->ff)
 8011ef0:	6968      	ldr	r0, [r5, #20]
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d1e7      	bne.n	8011ec6 <dcd_int_handler+0x3ee>
  for(uint16_t i = 0; i < full_words; i++){
 8011ef6:	0890      	lsrs	r0, r2, #2
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8011ef8:	f8d5 c010 	ldr.w	ip, [r5, #16]
  for(uint16_t i = 0; i < full_words; i++){
 8011efc:	f000 8150 	beq.w	80121a0 <dcd_int_handler+0x6c8>
 8011f00:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8011f04:	4663      	mov	r3, ip
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8011f06:	f853 1b04 	ldr.w	r1, [r3], #4
  for(uint16_t i = 0; i < full_words; i++){
 8011f0a:	4298      	cmp	r0, r3
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8011f0c:	f8cb 1000 	str.w	r1, [fp]
  for(uint16_t i = 0; i < full_words; i++){
 8011f10:	d1f9      	bne.n	8011f06 <dcd_int_handler+0x42e>
  if(bytes_rem){
 8011f12:	f012 0103 	ands.w	r1, r2, #3
  uint8_t bytes_rem = len & 0x03;
 8011f16:	fa5f fe82 	uxtb.w	lr, r2
  if(bytes_rem){
 8011f1a:	d00b      	beq.n	8011f34 <dcd_int_handler+0x45c>
    if(bytes_rem > 1){
 8011f1c:	f01e 0f02 	tst.w	lr, #2
    tmp_word |= src[0];
 8011f20:	7803      	ldrb	r3, [r0, #0]
      tmp_word |= src[1] << 8;
 8011f22:	bf18      	it	ne
 8011f24:	8803      	ldrhne	r3, [r0, #0]
    if(bytes_rem > 2){
 8011f26:	2903      	cmp	r1, #3
 8011f28:	d102      	bne.n	8011f30 <dcd_int_handler+0x458>
      tmp_word |= src[2] << 16;
 8011f2a:	7881      	ldrb	r1, [r0, #2]
 8011f2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    *tx_fifo = tmp_word;
 8011f30:	f8cb 3000 	str.w	r3, [fp]
            xfer->buffer += packet_size;
 8011f34:	4462      	add	r2, ip
 8011f36:	612a      	str	r2, [r5, #16]
 8011f38:	e7c8      	b.n	8011ecc <dcd_int_handler+0x3f4>
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8011f3a:	6933      	ldr	r3, [r6, #16]
 8011f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f47f af78 	bne.w	8011e36 <dcd_int_handler+0x35e>
          dev->DIEPEMPMSK &= ~(1 << n);
 8011f46:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011f4a:	9a03      	ldr	r2, [sp, #12]
 8011f4c:	ea23 0302 	bic.w	r3, r3, r2
 8011f50:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8011f54:	e76f      	b.n	8011e36 <dcd_int_handler+0x35e>
 8011f56:	4b2b      	ldr	r3, [pc, #172]	; (8012004 <dcd_int_handler+0x52c>)
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8011f58:	2501      	movs	r5, #1
 8011f5a:	2400      	movs	r4, #0
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8011f5c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8012008 <dcd_int_handler+0x530>
 8011f60:	461f      	mov	r7, r3
 8011f62:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8012014 <dcd_int_handler+0x53c>
 8011f66:	9302      	str	r3, [sp, #8]
 8011f68:	e024      	b.n	8011fb4 <dcd_int_handler+0x4dc>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8011f6a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011f6e:	07d3      	lsls	r3, r2, #31
 8011f70:	d519      	bpl.n	8011fa6 <dcd_int_handler+0x4ce>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8011f72:	2201      	movs	r2, #1
 8011f74:	f8c8 2008 	str.w	r2, [r8, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8011f78:	b924      	cbnz	r4, 8011f84 <dcd_int_handler+0x4ac>
 8011f7a:	4b2a      	ldr	r3, [pc, #168]	; (8012024 <dcd_int_handler+0x54c>)
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f040 80b3 	bne.w	80120ea <dcd_int_handler+0x612>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011f84:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 8011f86:	a805      	add	r0, sp, #20
 8011f88:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011f8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011f8e:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 8011f90:	f88d 9018 	strb.w	r9, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011f94:	f88d 3014 	strb.w	r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011f98:	893b      	ldrh	r3, [r7, #8]
  event.xfer_complete.len     = xferred_bytes;
 8011f9a:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011f9c:	2307      	movs	r3, #7
 8011f9e:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011fa2:	f7fe fdff 	bl	8010ba4 <dcd_event_handler>
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8011fa6:	2d09      	cmp	r5, #9
 8011fa8:	f43f ae16 	beq.w	8011bd8 <dcd_int_handler+0x100>
 8011fac:	3501      	adds	r5, #1
 8011fae:	3401      	adds	r4, #1
 8011fb0:	3720      	adds	r7, #32
 8011fb2:	b2ed      	uxtb	r5, r5
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8011fb4:	f104 0310 	add.w	r3, r4, #16
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f8db 1018 	ldr.w	r1, [fp, #24]
 8011fbe:	fa5f f984 	uxtb.w	r9, r4
 8011fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fc6:	420b      	tst	r3, r1
 8011fc8:	d0ed      	beq.n	8011fa6 <dcd_int_handler+0x4ce>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8011fca:	eb0a 1844 	add.w	r8, sl, r4, lsl #5
 8011fce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011fd2:	0709      	lsls	r1, r1, #28
 8011fd4:	d5c9      	bpl.n	8011f6a <dcd_int_handler+0x492>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011fd6:	9b01      	ldr	r3, [sp, #4]
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8011fd8:	2008      	movs	r0, #8
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011fda:	4915      	ldr	r1, [pc, #84]	; (8012030 <dcd_int_handler+0x558>)
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011fdc:	f88d 3014 	strb.w	r3, [sp, #20]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011fe0:	ab08      	add	r3, sp, #32
 8011fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011fe6:	c903      	ldmia	r1, {r0, r1}
 8011fe8:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8011fec:	4611      	mov	r1, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011fee:	2200      	movs	r2, #0
  dcd_event_handler(&event, in_isr);
 8011ff0:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011ff2:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011ff6:	2206      	movs	r2, #6
 8011ff8:	f88d 2015 	strb.w	r2, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011ffc:	f7fe fdd2 	bl	8010ba4 <dcd_event_handler>
}
 8012000:	e7b3      	b.n	8011f6a <dcd_int_handler+0x492>
 8012002:	bf00      	nop
 8012004:	2400d408 	.word	0x2400d408
 8012008:	40080800 	.word	0x40080800
 801200c:	2400d3f6 	.word	0x2400d3f6
 8012010:	40080c00 	.word	0x40080c00
 8012014:	40080b00 	.word	0x40080b00
 8012018:	40080900 	.word	0x40080900
 801201c:	2400d3f4 	.word	0x2400d3f4
 8012020:	001003f0 	.word	0x001003f0
 8012024:	2400d400 	.word	0x2400d400
 8012028:	40081000 	.word	0x40081000
 801202c:	0003fffc 	.word	0x0003fffc
 8012030:	2400d3f8 	.word	0x2400d3f8
  for(uint16_t i = 0; i < full_words; i++) {
 8012034:	08a1      	lsrs	r1, r4, #2
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8012036:	f85a 300b 	ldr.w	r3, [sl, fp]
  for(uint16_t i = 0; i < full_words; i++) {
 801203a:	f000 80c8 	beq.w	80121ce <dcd_int_handler+0x6f6>
 801203e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    uint32_t tmp = *rx_fifo;
 8012042:	f8d9 2000 	ldr.w	r2, [r9]
    dst[0] = tmp & 0x000000FF;
 8012046:	f843 2b04 	str.w	r2, [r3], #4
  for(uint16_t i = 0; i < full_words; i++) {
 801204a:	428b      	cmp	r3, r1
 801204c:	d1f9      	bne.n	8012042 <dcd_int_handler+0x56a>
  if(bytes_rem != 0) {
 801204e:	f014 0203 	ands.w	r2, r4, #3
  uint8_t bytes_rem = len & 0x03;
 8012052:	b2e0      	uxtb	r0, r4
  if(bytes_rem != 0) {
 8012054:	d009      	beq.n	801206a <dcd_int_handler+0x592>
    uint32_t tmp = *rx_fifo;
 8012056:	f8d9 3000 	ldr.w	r3, [r9]
    if(bytes_rem > 1) {
 801205a:	0780      	lsls	r0, r0, #30
    dst[0] = tmp & 0x000000FF;
 801205c:	700b      	strb	r3, [r1, #0]
    if(bytes_rem > 1) {
 801205e:	d501      	bpl.n	8012064 <dcd_int_handler+0x58c>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8012060:	0a18      	lsrs	r0, r3, #8
 8012062:	7048      	strb	r0, [r1, #1]
    if(bytes_rem > 2) {
 8012064:	2a03      	cmp	r2, #3
 8012066:	f000 809d 	beq.w	80121a4 <dcd_int_handler+0x6cc>
        xfer->buffer += bcnt;
 801206a:	f85a 300b 	ldr.w	r3, [sl, fp]
 801206e:	4423      	add	r3, r4
 8012070:	f84a 300b 	str.w	r3, [sl, fp]
 8012074:	e5d1      	b.n	8011c1a <dcd_int_handler+0x142>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8012076:	2300      	movs	r3, #0
 8012078:	9a01      	ldr	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
 801207a:	a805      	add	r0, sp, #20
 801207c:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 801207e:	9307      	str	r3, [sp, #28]
 8012080:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012084:	2302      	movs	r3, #2
 8012086:	f88d 2014 	strb.w	r2, [sp, #20]
 801208a:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 801208e:	f7fe fd89 	bl	8010ba4 <dcd_event_handler>
    usb_otg->GOTGINT = otg_int;
 8012092:	4b57      	ldr	r3, [pc, #348]	; (80121f0 <dcd_int_handler+0x718>)
 8012094:	605c      	str	r4, [r3, #4]
 8012096:	e56d      	b.n	8011b74 <dcd_int_handler+0x9c>
    else if ( SystemCoreClock >= 27500000U )
 8012098:	4956      	ldr	r1, [pc, #344]	; (80121f4 <dcd_int_handler+0x71c>)
 801209a:	428b      	cmp	r3, r1
 801209c:	d87d      	bhi.n	801219a <dcd_int_handler+0x6c2>
    else if ( SystemCoreClock >= 24000000U )
 801209e:	4956      	ldr	r1, [pc, #344]	; (80121f8 <dcd_int_handler+0x720>)
 80120a0:	428b      	cmp	r3, r1
 80120a2:	f4bf ad3b 	bcs.w	8011b1c <dcd_int_handler+0x44>
    else if ( SystemCoreClock >= 21800000U )
 80120a6:	4a55      	ldr	r2, [pc, #340]	; (80121fc <dcd_int_handler+0x724>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	f200 8092 	bhi.w	80121d2 <dcd_int_handler+0x6fa>
    else if ( SystemCoreClock >= 20000000U )
 80120ae:	f5a2 12db 	sub.w	r2, r2, #1794048	; 0x1b6000
 80120b2:	f5a2 52ba 	sub.w	r2, r2, #5952	; 0x1740
 80120b6:	4293      	cmp	r3, r2
 80120b8:	f200 808e 	bhi.w	80121d8 <dcd_int_handler+0x700>
    else if ( SystemCoreClock >= 18500000U )
 80120bc:	f5a2 12b7 	sub.w	r2, r2, #1499136	; 0x16e000
 80120c0:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 80120c4:	4293      	cmp	r3, r2
 80120c6:	f200 808a 	bhi.w	80121de <dcd_int_handler+0x706>
    else if ( SystemCoreClock >= 17200000U )
 80120ca:	4a4d      	ldr	r2, [pc, #308]	; (8012200 <dcd_int_handler+0x728>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	f080 8089 	bcs.w	80121e4 <dcd_int_handler+0x70c>
    else if ( SystemCoreClock >= 16000000U )
 80120d2:	4a4c      	ldr	r2, [pc, #304]	; (8012204 <dcd_int_handler+0x72c>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	f080 8088 	bcs.w	80121ea <dcd_int_handler+0x712>
    else if ( SystemCoreClock >= 15000000U )
 80120da:	4a4b      	ldr	r2, [pc, #300]	; (8012208 <dcd_int_handler+0x730>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	bf2c      	ite	cs
 80120e0:	f44f 5260 	movcs.w	r2, #14336	; 0x3800
 80120e4:	f44f 5270 	movcc.w	r2, #15360	; 0x3c00
 80120e8:	e518      	b.n	8011b1c <dcd_int_handler+0x44>
 80120ea:	9a02      	ldr	r2, [sp, #8]
    ep0_pending[dir] -= total_bytes;
 80120ec:	4947      	ldr	r1, [pc, #284]	; (801220c <dcd_int_handler+0x734>)
 80120ee:	8952      	ldrh	r2, [r2, #10]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	bf28      	it	cs
 80120f4:	461a      	movcs	r2, r3
 80120f6:	1a9b      	subs	r3, r3, r2
 80120f8:	800b      	strh	r3, [r1, #0]
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80120fa:	f8da 3010 	ldr.w	r3, [sl, #16]
 80120fe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8012102:	f8ca 3010 	str.w	r3, [sl, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8012106:	f8da 3010 	ldr.w	r3, [sl, #16]
 801210a:	431a      	orrs	r2, r3
 801210c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8012110:	f8ca 2010 	str.w	r2, [sl, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8012114:	f8da 3000 	ldr.w	r3, [sl]
 8012118:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801211c:	f8ca 3000 	str.w	r3, [sl]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8012120:	f8da 3000 	ldr.w	r3, [sl]
 8012124:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8012128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801212c:	f47f af3e 	bne.w	8011fac <dcd_int_handler+0x4d4>
 8012130:	9b02      	ldr	r3, [sp, #8]
 8012132:	7b1b      	ldrb	r3, [r3, #12]
 8012134:	2b01      	cmp	r3, #1
 8012136:	f47f af39 	bne.w	8011fac <dcd_int_handler+0x4d4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 801213a:	f8db 3008 	ldr.w	r3, [fp, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 801213e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8012142:	f8da 3000 	ldr.w	r3, [sl]
 8012146:	bf14      	ite	ne
 8012148:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 801214c:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8012150:	4313      	orrs	r3, r2
 8012152:	f8ca 3000 	str.w	r3, [sl]
 8012156:	e729      	b.n	8011fac <dcd_int_handler+0x4d4>
 8012158:	9902      	ldr	r1, [sp, #8]
 801215a:	8b49      	ldrh	r1, [r1, #26]
 801215c:	4299      	cmp	r1, r3
 801215e:	bf28      	it	cs
 8012160:	4619      	movcs	r1, r3
    ep0_pending[dir] -= total_bytes;
 8012162:	1a5b      	subs	r3, r3, r1
 8012164:	8053      	strh	r3, [r2, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8012166:	f441 2300 	orr.w	r3, r1, #524288	; 0x80000
 801216a:	4a29      	ldr	r2, [pc, #164]	; (8012210 <dcd_int_handler+0x738>)
 801216c:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 801216e:	6813      	ldr	r3, [r2, #0]
 8012170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012174:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8012176:	6813      	ldr	r3, [r2, #0]
 8012178:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801217c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012180:	d013      	beq.n	80121aa <dcd_int_handler+0x6d2>
    if(total_bytes != 0) {
 8012182:	b129      	cbz	r1, 8012190 <dcd_int_handler+0x6b8>
      dev->DIEPEMPMSK |= (1 << epnum);
 8012184:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8012188:	f043 0301 	orr.w	r3, r3, #1
 801218c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8012190:	68b3      	ldr	r3, [r6, #8]
 8012192:	061b      	lsls	r3, r3, #24
 8012194:	f53f ae84 	bmi.w	8011ea0 <dcd_int_handler+0x3c8>
 8012198:	e651      	b.n	8011e3e <dcd_int_handler+0x366>
 801219a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 801219e:	e4bd      	b.n	8011b1c <dcd_int_handler+0x44>
  for(uint16_t i = 0; i < full_words; i++){
 80121a0:	4660      	mov	r0, ip
 80121a2:	e6b6      	b.n	8011f12 <dcd_int_handler+0x43a>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 80121a4:	0c1b      	lsrs	r3, r3, #16
 80121a6:	708b      	strb	r3, [r1, #2]
 80121a8:	e75f      	b.n	801206a <dcd_int_handler+0x592>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80121aa:	9b02      	ldr	r3, [sp, #8]
 80121ac:	7f1b      	ldrb	r3, [r3, #28]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d1e7      	bne.n	8012182 <dcd_int_handler+0x6aa>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80121b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 80121b6:	4610      	mov	r0, r2
 80121b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80121bc:	6813      	ldr	r3, [r2, #0]
 80121be:	bf14      	ite	ne
 80121c0:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80121c4:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80121c8:	4313      	orrs	r3, r2
 80121ca:	6003      	str	r3, [r0, #0]
 80121cc:	e7d9      	b.n	8012182 <dcd_int_handler+0x6aa>
  for(uint16_t i = 0; i < full_words; i++) {
 80121ce:	4619      	mov	r1, r3
 80121d0:	e73d      	b.n	801204e <dcd_int_handler+0x576>
 80121d2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80121d6:	e4a1      	b.n	8011b1c <dcd_int_handler+0x44>
 80121d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80121dc:	e49e      	b.n	8011b1c <dcd_int_handler+0x44>
 80121de:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80121e2:	e49b      	b.n	8011b1c <dcd_int_handler+0x44>
 80121e4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80121e8:	e498      	b.n	8011b1c <dcd_int_handler+0x44>
 80121ea:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 80121ee:	e495      	b.n	8011b1c <dcd_int_handler+0x44>
 80121f0:	40080000 	.word	0x40080000
 80121f4:	01a39ddf 	.word	0x01a39ddf
 80121f8:	016e3600 	.word	0x016e3600
 80121fc:	014ca43f 	.word	0x014ca43f
 8012200:	01067380 	.word	0x01067380
 8012204:	00f42400 	.word	0x00f42400
 8012208:	00e4e1c0 	.word	0x00e4e1c0
 801220c:	2400d400 	.word	0x2400d400
 8012210:	40080900 	.word	0x40080900

08012214 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 8012214:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8012216:	2000      	movs	r0, #0
 8012218:	f7fe f83c 	bl	8010294 <tud_init>
 801221c:	b100      	cbz	r0, 8012220 <tusb_init+0xc>
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
 801221e:	bd08      	pop	{r3, pc}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8012220:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012224:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8012228:	07db      	lsls	r3, r3, #31
 801222a:	d5f8      	bpl.n	801221e <tusb_init+0xa>
 801222c:	be00      	bkpt	0x0000
}
 801222e:	bd08      	pop	{r3, pc}

08012230 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8012230:	7803      	ldrb	r3, [r0, #0]
 8012232:	f013 0301 	ands.w	r3, r3, #1
 8012236:	d110      	bne.n	801225a <tu_edpt_claim+0x2a>
 8012238:	7802      	ldrb	r2, [r0, #0]
 801223a:	0751      	lsls	r1, r2, #29
 801223c:	d40b      	bmi.n	8012256 <tu_edpt_claim+0x26>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 801223e:	7803      	ldrb	r3, [r0, #0]
 8012240:	f013 0301 	ands.w	r3, r3, #1
 8012244:	d109      	bne.n	801225a <tu_edpt_claim+0x2a>
 8012246:	7802      	ldrb	r2, [r0, #0]
 8012248:	0752      	lsls	r2, r2, #29
 801224a:	d404      	bmi.n	8012256 <tu_edpt_claim+0x26>
  if (available)
  {
    ep_state->claimed = 1;
 801224c:	7802      	ldrb	r2, [r0, #0]
 801224e:	2301      	movs	r3, #1
 8012250:	f042 0204 	orr.w	r2, r2, #4
 8012254:	7002      	strb	r2, [r0, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8012256:	4618      	mov	r0, r3
 8012258:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	4770      	bx	lr

08012260 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8012260:	7803      	ldrb	r3, [r0, #0]
 8012262:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8012266:	075b      	lsls	r3, r3, #29
 8012268:	d401      	bmi.n	801226e <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 801226a:	4610      	mov	r0, r2
 801226c:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 801226e:	7803      	ldrb	r3, [r0, #0]
 8012270:	f013 0101 	ands.w	r1, r3, #1
 8012274:	d105      	bne.n	8012282 <tu_edpt_release+0x22>
    ep_state->claimed = 0;
 8012276:	7803      	ldrb	r3, [r0, #0]
 8012278:	f361 0382 	bfi	r3, r1, #2, #1
 801227c:	7003      	strb	r3, [r0, #0]
}
 801227e:	4610      	mov	r0, r2
 8012280:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8012282:	2200      	movs	r2, #0
}
 8012284:	4610      	mov	r0, r2
 8012286:	4770      	bx	lr

08012288 <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8012288:	78c3      	ldrb	r3, [r0, #3]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 801228a:	8882      	ldrh	r2, [r0, #4]
 801228c:	f003 0003 	and.w	r0, r3, #3
 8012290:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8012294:	2802      	cmp	r0, #2
 8012296:	d005      	beq.n	80122a4 <tu_edpt_validate+0x1c>
 8012298:	2803      	cmp	r0, #3
 801229a:	d01b      	beq.n	80122d4 <tu_edpt_validate+0x4c>
 801229c:	2801      	cmp	r0, #1
 801229e:	d007      	beq.n	80122b0 <tu_edpt_validate+0x28>
 80122a0:	2000      	movs	r0, #0
 80122a2:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80122a4:	2902      	cmp	r1, #2
 80122a6:	d01e      	beq.n	80122e6 <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 80122a8:	2a40      	cmp	r2, #64	; 0x40
 80122aa:	d809      	bhi.n	80122c0 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 80122ac:	2001      	movs	r0, #1
}
 80122ae:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80122b0:	2902      	cmp	r1, #2
 80122b2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80122b6:	bf08      	it	eq
 80122b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 80122bc:	4293      	cmp	r3, r2
 80122be:	d2f6      	bcs.n	80122ae <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 80122c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80122c4:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 80122c8:	f010 0001 	ands.w	r0, r0, #1
 80122cc:	d0ef      	beq.n	80122ae <tu_edpt_validate+0x26>
 80122ce:	be00      	bkpt	0x0000
 80122d0:	2000      	movs	r0, #0
 80122d2:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80122d4:	2902      	cmp	r1, #2
 80122d6:	bf0c      	ite	eq
 80122d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80122dc:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 80122de:	4293      	cmp	r3, r2
 80122e0:	d3ee      	bcc.n	80122c0 <tu_edpt_validate+0x38>
  return true;
 80122e2:	2001      	movs	r0, #1
 80122e4:	e7e3      	b.n	80122ae <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 80122e6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80122ea:	d0df      	beq.n	80122ac <tu_edpt_validate+0x24>
 80122ec:	e7e8      	b.n	80122c0 <tu_edpt_validate+0x38>
 80122ee:	bf00      	nop

080122f0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 80122f0:	440a      	add	r2, r1

  while( p_desc < desc_end )
 80122f2:	4291      	cmp	r1, r2
 80122f4:	d226      	bcs.n	8012344 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80122f6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80122fa:	f1bc 0f05 	cmp.w	ip, #5
 80122fe:	d005      	beq.n	801230c <tu_edpt_bind_driver+0x1c>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012300:	f891 c000 	ldrb.w	ip, [r1]
 8012304:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012306:	428a      	cmp	r2, r1
 8012308:	d8f5      	bhi.n	80122f6 <tu_edpt_bind_driver+0x6>
 801230a:	4770      	bx	lr
{
 801230c:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801230e:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8012312:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 8012316:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 801231a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801231e:	f80e 300c 	strb.w	r3, [lr, ip]
 8012322:	f891 c000 	ldrb.w	ip, [r1]
 8012326:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012328:	428a      	cmp	r2, r1
 801232a:	d909      	bls.n	8012340 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 801232c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8012330:	f1bc 0f05 	cmp.w	ip, #5
 8012334:	d0eb      	beq.n	801230e <tu_edpt_bind_driver+0x1e>
 8012336:	f891 c000 	ldrb.w	ip, [r1]
 801233a:	4461      	add	r1, ip
  while( p_desc < desc_end )
 801233c:	428a      	cmp	r2, r1
 801233e:	d8f5      	bhi.n	801232c <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8012340:	f85d fb04 	ldr.w	pc, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop

08012348 <__assert_func>:
 8012348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801234a:	4614      	mov	r4, r2
 801234c:	461a      	mov	r2, r3
 801234e:	4b09      	ldr	r3, [pc, #36]	; (8012374 <__assert_func+0x2c>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4605      	mov	r5, r0
 8012354:	68d8      	ldr	r0, [r3, #12]
 8012356:	b14c      	cbz	r4, 801236c <__assert_func+0x24>
 8012358:	4b07      	ldr	r3, [pc, #28]	; (8012378 <__assert_func+0x30>)
 801235a:	9100      	str	r1, [sp, #0]
 801235c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012360:	4906      	ldr	r1, [pc, #24]	; (801237c <__assert_func+0x34>)
 8012362:	462b      	mov	r3, r5
 8012364:	f000 fda8 	bl	8012eb8 <fiprintf>
 8012368:	f000 ff3a 	bl	80131e0 <abort>
 801236c:	4b04      	ldr	r3, [pc, #16]	; (8012380 <__assert_func+0x38>)
 801236e:	461c      	mov	r4, r3
 8012370:	e7f3      	b.n	801235a <__assert_func+0x12>
 8012372:	bf00      	nop
 8012374:	240003ac 	.word	0x240003ac
 8012378:	08019868 	.word	0x08019868
 801237c:	08019875 	.word	0x08019875
 8012380:	080198a3 	.word	0x080198a3

08012384 <atoi>:
 8012384:	220a      	movs	r2, #10
 8012386:	2100      	movs	r1, #0
 8012388:	f000 b8c0 	b.w	801250c <strtol>

0801238c <rand>:
 801238c:	4b16      	ldr	r3, [pc, #88]	; (80123e8 <rand+0x5c>)
 801238e:	b510      	push	{r4, lr}
 8012390:	681c      	ldr	r4, [r3, #0]
 8012392:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012394:	b9b3      	cbnz	r3, 80123c4 <rand+0x38>
 8012396:	2018      	movs	r0, #24
 8012398:	f001 fd6a 	bl	8013e70 <malloc>
 801239c:	4602      	mov	r2, r0
 801239e:	6320      	str	r0, [r4, #48]	; 0x30
 80123a0:	b920      	cbnz	r0, 80123ac <rand+0x20>
 80123a2:	4b12      	ldr	r3, [pc, #72]	; (80123ec <rand+0x60>)
 80123a4:	4812      	ldr	r0, [pc, #72]	; (80123f0 <rand+0x64>)
 80123a6:	2152      	movs	r1, #82	; 0x52
 80123a8:	f7ff ffce 	bl	8012348 <__assert_func>
 80123ac:	4911      	ldr	r1, [pc, #68]	; (80123f4 <rand+0x68>)
 80123ae:	4b12      	ldr	r3, [pc, #72]	; (80123f8 <rand+0x6c>)
 80123b0:	e9c0 1300 	strd	r1, r3, [r0]
 80123b4:	4b11      	ldr	r3, [pc, #68]	; (80123fc <rand+0x70>)
 80123b6:	6083      	str	r3, [r0, #8]
 80123b8:	230b      	movs	r3, #11
 80123ba:	8183      	strh	r3, [r0, #12]
 80123bc:	2100      	movs	r1, #0
 80123be:	2001      	movs	r0, #1
 80123c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80123c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123c6:	480e      	ldr	r0, [pc, #56]	; (8012400 <rand+0x74>)
 80123c8:	690b      	ldr	r3, [r1, #16]
 80123ca:	694c      	ldr	r4, [r1, #20]
 80123cc:	4a0d      	ldr	r2, [pc, #52]	; (8012404 <rand+0x78>)
 80123ce:	4358      	muls	r0, r3
 80123d0:	fb02 0004 	mla	r0, r2, r4, r0
 80123d4:	fba3 3202 	umull	r3, r2, r3, r2
 80123d8:	3301      	adds	r3, #1
 80123da:	eb40 0002 	adc.w	r0, r0, r2
 80123de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80123e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80123e6:	bd10      	pop	{r4, pc}
 80123e8:	240003ac 	.word	0x240003ac
 80123ec:	080198a4 	.word	0x080198a4
 80123f0:	080198bb 	.word	0x080198bb
 80123f4:	abcd330e 	.word	0xabcd330e
 80123f8:	e66d1234 	.word	0xe66d1234
 80123fc:	0005deec 	.word	0x0005deec
 8012400:	5851f42d 	.word	0x5851f42d
 8012404:	4c957f2d 	.word	0x4c957f2d

08012408 <_strtol_l.constprop.0>:
 8012408:	2b01      	cmp	r3, #1
 801240a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801240e:	d001      	beq.n	8012414 <_strtol_l.constprop.0+0xc>
 8012410:	2b24      	cmp	r3, #36	; 0x24
 8012412:	d906      	bls.n	8012422 <_strtol_l.constprop.0+0x1a>
 8012414:	f000 fea2 	bl	801315c <__errno>
 8012418:	2316      	movs	r3, #22
 801241a:	6003      	str	r3, [r0, #0]
 801241c:	2000      	movs	r0, #0
 801241e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012422:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012508 <_strtol_l.constprop.0+0x100>
 8012426:	460d      	mov	r5, r1
 8012428:	462e      	mov	r6, r5
 801242a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801242e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012432:	f017 0708 	ands.w	r7, r7, #8
 8012436:	d1f7      	bne.n	8012428 <_strtol_l.constprop.0+0x20>
 8012438:	2c2d      	cmp	r4, #45	; 0x2d
 801243a:	d132      	bne.n	80124a2 <_strtol_l.constprop.0+0x9a>
 801243c:	782c      	ldrb	r4, [r5, #0]
 801243e:	2701      	movs	r7, #1
 8012440:	1cb5      	adds	r5, r6, #2
 8012442:	2b00      	cmp	r3, #0
 8012444:	d05b      	beq.n	80124fe <_strtol_l.constprop.0+0xf6>
 8012446:	2b10      	cmp	r3, #16
 8012448:	d109      	bne.n	801245e <_strtol_l.constprop.0+0x56>
 801244a:	2c30      	cmp	r4, #48	; 0x30
 801244c:	d107      	bne.n	801245e <_strtol_l.constprop.0+0x56>
 801244e:	782c      	ldrb	r4, [r5, #0]
 8012450:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012454:	2c58      	cmp	r4, #88	; 0x58
 8012456:	d14d      	bne.n	80124f4 <_strtol_l.constprop.0+0xec>
 8012458:	786c      	ldrb	r4, [r5, #1]
 801245a:	2310      	movs	r3, #16
 801245c:	3502      	adds	r5, #2
 801245e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012462:	f108 38ff 	add.w	r8, r8, #4294967295
 8012466:	f04f 0e00 	mov.w	lr, #0
 801246a:	fbb8 f9f3 	udiv	r9, r8, r3
 801246e:	4676      	mov	r6, lr
 8012470:	fb03 8a19 	mls	sl, r3, r9, r8
 8012474:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012478:	f1bc 0f09 	cmp.w	ip, #9
 801247c:	d816      	bhi.n	80124ac <_strtol_l.constprop.0+0xa4>
 801247e:	4664      	mov	r4, ip
 8012480:	42a3      	cmp	r3, r4
 8012482:	dd24      	ble.n	80124ce <_strtol_l.constprop.0+0xc6>
 8012484:	f1be 3fff 	cmp.w	lr, #4294967295
 8012488:	d008      	beq.n	801249c <_strtol_l.constprop.0+0x94>
 801248a:	45b1      	cmp	r9, r6
 801248c:	d31c      	bcc.n	80124c8 <_strtol_l.constprop.0+0xc0>
 801248e:	d101      	bne.n	8012494 <_strtol_l.constprop.0+0x8c>
 8012490:	45a2      	cmp	sl, r4
 8012492:	db19      	blt.n	80124c8 <_strtol_l.constprop.0+0xc0>
 8012494:	fb06 4603 	mla	r6, r6, r3, r4
 8012498:	f04f 0e01 	mov.w	lr, #1
 801249c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124a0:	e7e8      	b.n	8012474 <_strtol_l.constprop.0+0x6c>
 80124a2:	2c2b      	cmp	r4, #43	; 0x2b
 80124a4:	bf04      	itt	eq
 80124a6:	782c      	ldrbeq	r4, [r5, #0]
 80124a8:	1cb5      	addeq	r5, r6, #2
 80124aa:	e7ca      	b.n	8012442 <_strtol_l.constprop.0+0x3a>
 80124ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80124b0:	f1bc 0f19 	cmp.w	ip, #25
 80124b4:	d801      	bhi.n	80124ba <_strtol_l.constprop.0+0xb2>
 80124b6:	3c37      	subs	r4, #55	; 0x37
 80124b8:	e7e2      	b.n	8012480 <_strtol_l.constprop.0+0x78>
 80124ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80124be:	f1bc 0f19 	cmp.w	ip, #25
 80124c2:	d804      	bhi.n	80124ce <_strtol_l.constprop.0+0xc6>
 80124c4:	3c57      	subs	r4, #87	; 0x57
 80124c6:	e7db      	b.n	8012480 <_strtol_l.constprop.0+0x78>
 80124c8:	f04f 3eff 	mov.w	lr, #4294967295
 80124cc:	e7e6      	b.n	801249c <_strtol_l.constprop.0+0x94>
 80124ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80124d2:	d105      	bne.n	80124e0 <_strtol_l.constprop.0+0xd8>
 80124d4:	2322      	movs	r3, #34	; 0x22
 80124d6:	6003      	str	r3, [r0, #0]
 80124d8:	4646      	mov	r6, r8
 80124da:	b942      	cbnz	r2, 80124ee <_strtol_l.constprop.0+0xe6>
 80124dc:	4630      	mov	r0, r6
 80124de:	e79e      	b.n	801241e <_strtol_l.constprop.0+0x16>
 80124e0:	b107      	cbz	r7, 80124e4 <_strtol_l.constprop.0+0xdc>
 80124e2:	4276      	negs	r6, r6
 80124e4:	2a00      	cmp	r2, #0
 80124e6:	d0f9      	beq.n	80124dc <_strtol_l.constprop.0+0xd4>
 80124e8:	f1be 0f00 	cmp.w	lr, #0
 80124ec:	d000      	beq.n	80124f0 <_strtol_l.constprop.0+0xe8>
 80124ee:	1e69      	subs	r1, r5, #1
 80124f0:	6011      	str	r1, [r2, #0]
 80124f2:	e7f3      	b.n	80124dc <_strtol_l.constprop.0+0xd4>
 80124f4:	2430      	movs	r4, #48	; 0x30
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1b1      	bne.n	801245e <_strtol_l.constprop.0+0x56>
 80124fa:	2308      	movs	r3, #8
 80124fc:	e7af      	b.n	801245e <_strtol_l.constprop.0+0x56>
 80124fe:	2c30      	cmp	r4, #48	; 0x30
 8012500:	d0a5      	beq.n	801244e <_strtol_l.constprop.0+0x46>
 8012502:	230a      	movs	r3, #10
 8012504:	e7ab      	b.n	801245e <_strtol_l.constprop.0+0x56>
 8012506:	bf00      	nop
 8012508:	08019914 	.word	0x08019914

0801250c <strtol>:
 801250c:	4613      	mov	r3, r2
 801250e:	460a      	mov	r2, r1
 8012510:	4601      	mov	r1, r0
 8012512:	4802      	ldr	r0, [pc, #8]	; (801251c <strtol+0x10>)
 8012514:	6800      	ldr	r0, [r0, #0]
 8012516:	f7ff bf77 	b.w	8012408 <_strtol_l.constprop.0>
 801251a:	bf00      	nop
 801251c:	240003ac 	.word	0x240003ac

08012520 <__cvt>:
 8012520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012522:	ed2d 8b02 	vpush	{d8}
 8012526:	eeb0 8b40 	vmov.f64	d8, d0
 801252a:	b085      	sub	sp, #20
 801252c:	4617      	mov	r7, r2
 801252e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012530:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012532:	ee18 2a90 	vmov	r2, s17
 8012536:	f025 0520 	bic.w	r5, r5, #32
 801253a:	2a00      	cmp	r2, #0
 801253c:	bfb6      	itet	lt
 801253e:	222d      	movlt	r2, #45	; 0x2d
 8012540:	2200      	movge	r2, #0
 8012542:	eeb1 8b40 	vneglt.f64	d8, d0
 8012546:	2d46      	cmp	r5, #70	; 0x46
 8012548:	460c      	mov	r4, r1
 801254a:	701a      	strb	r2, [r3, #0]
 801254c:	d004      	beq.n	8012558 <__cvt+0x38>
 801254e:	2d45      	cmp	r5, #69	; 0x45
 8012550:	d100      	bne.n	8012554 <__cvt+0x34>
 8012552:	3401      	adds	r4, #1
 8012554:	2102      	movs	r1, #2
 8012556:	e000      	b.n	801255a <__cvt+0x3a>
 8012558:	2103      	movs	r1, #3
 801255a:	ab03      	add	r3, sp, #12
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	ab02      	add	r3, sp, #8
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	4622      	mov	r2, r4
 8012564:	4633      	mov	r3, r6
 8012566:	eeb0 0b48 	vmov.f64	d0, d8
 801256a:	f000 fec9 	bl	8013300 <_dtoa_r>
 801256e:	2d47      	cmp	r5, #71	; 0x47
 8012570:	d101      	bne.n	8012576 <__cvt+0x56>
 8012572:	07fb      	lsls	r3, r7, #31
 8012574:	d51a      	bpl.n	80125ac <__cvt+0x8c>
 8012576:	2d46      	cmp	r5, #70	; 0x46
 8012578:	eb00 0204 	add.w	r2, r0, r4
 801257c:	d10c      	bne.n	8012598 <__cvt+0x78>
 801257e:	7803      	ldrb	r3, [r0, #0]
 8012580:	2b30      	cmp	r3, #48	; 0x30
 8012582:	d107      	bne.n	8012594 <__cvt+0x74>
 8012584:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258c:	bf1c      	itt	ne
 801258e:	f1c4 0401 	rsbne	r4, r4, #1
 8012592:	6034      	strne	r4, [r6, #0]
 8012594:	6833      	ldr	r3, [r6, #0]
 8012596:	441a      	add	r2, r3
 8012598:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a0:	bf08      	it	eq
 80125a2:	9203      	streq	r2, [sp, #12]
 80125a4:	2130      	movs	r1, #48	; 0x30
 80125a6:	9b03      	ldr	r3, [sp, #12]
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d307      	bcc.n	80125bc <__cvt+0x9c>
 80125ac:	9b03      	ldr	r3, [sp, #12]
 80125ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125b0:	1a1b      	subs	r3, r3, r0
 80125b2:	6013      	str	r3, [r2, #0]
 80125b4:	b005      	add	sp, #20
 80125b6:	ecbd 8b02 	vpop	{d8}
 80125ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125bc:	1c5c      	adds	r4, r3, #1
 80125be:	9403      	str	r4, [sp, #12]
 80125c0:	7019      	strb	r1, [r3, #0]
 80125c2:	e7f0      	b.n	80125a6 <__cvt+0x86>

080125c4 <__exponent>:
 80125c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125c6:	4603      	mov	r3, r0
 80125c8:	2900      	cmp	r1, #0
 80125ca:	bfb8      	it	lt
 80125cc:	4249      	neglt	r1, r1
 80125ce:	f803 2b02 	strb.w	r2, [r3], #2
 80125d2:	bfb4      	ite	lt
 80125d4:	222d      	movlt	r2, #45	; 0x2d
 80125d6:	222b      	movge	r2, #43	; 0x2b
 80125d8:	2909      	cmp	r1, #9
 80125da:	7042      	strb	r2, [r0, #1]
 80125dc:	dd2a      	ble.n	8012634 <__exponent+0x70>
 80125de:	f10d 0207 	add.w	r2, sp, #7
 80125e2:	4617      	mov	r7, r2
 80125e4:	260a      	movs	r6, #10
 80125e6:	4694      	mov	ip, r2
 80125e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80125ec:	fb06 1415 	mls	r4, r6, r5, r1
 80125f0:	3430      	adds	r4, #48	; 0x30
 80125f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80125f6:	460c      	mov	r4, r1
 80125f8:	2c63      	cmp	r4, #99	; 0x63
 80125fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80125fe:	4629      	mov	r1, r5
 8012600:	dcf1      	bgt.n	80125e6 <__exponent+0x22>
 8012602:	3130      	adds	r1, #48	; 0x30
 8012604:	f1ac 0402 	sub.w	r4, ip, #2
 8012608:	f802 1c01 	strb.w	r1, [r2, #-1]
 801260c:	1c41      	adds	r1, r0, #1
 801260e:	4622      	mov	r2, r4
 8012610:	42ba      	cmp	r2, r7
 8012612:	d30a      	bcc.n	801262a <__exponent+0x66>
 8012614:	f10d 0209 	add.w	r2, sp, #9
 8012618:	eba2 020c 	sub.w	r2, r2, ip
 801261c:	42bc      	cmp	r4, r7
 801261e:	bf88      	it	hi
 8012620:	2200      	movhi	r2, #0
 8012622:	4413      	add	r3, r2
 8012624:	1a18      	subs	r0, r3, r0
 8012626:	b003      	add	sp, #12
 8012628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801262a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801262e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012632:	e7ed      	b.n	8012610 <__exponent+0x4c>
 8012634:	2330      	movs	r3, #48	; 0x30
 8012636:	3130      	adds	r1, #48	; 0x30
 8012638:	7083      	strb	r3, [r0, #2]
 801263a:	70c1      	strb	r1, [r0, #3]
 801263c:	1d03      	adds	r3, r0, #4
 801263e:	e7f1      	b.n	8012624 <__exponent+0x60>

08012640 <_printf_float>:
 8012640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	b08b      	sub	sp, #44	; 0x2c
 8012646:	460c      	mov	r4, r1
 8012648:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801264c:	4616      	mov	r6, r2
 801264e:	461f      	mov	r7, r3
 8012650:	4605      	mov	r5, r0
 8012652:	f000 fd39 	bl	80130c8 <_localeconv_r>
 8012656:	f8d0 b000 	ldr.w	fp, [r0]
 801265a:	4658      	mov	r0, fp
 801265c:	f7ed fef0 	bl	8000440 <strlen>
 8012660:	2300      	movs	r3, #0
 8012662:	9308      	str	r3, [sp, #32]
 8012664:	f8d8 3000 	ldr.w	r3, [r8]
 8012668:	f894 9018 	ldrb.w	r9, [r4, #24]
 801266c:	6822      	ldr	r2, [r4, #0]
 801266e:	3307      	adds	r3, #7
 8012670:	f023 0307 	bic.w	r3, r3, #7
 8012674:	f103 0108 	add.w	r1, r3, #8
 8012678:	f8c8 1000 	str.w	r1, [r8]
 801267c:	ed93 0b00 	vldr	d0, [r3]
 8012680:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80128e0 <_printf_float+0x2a0>
 8012684:	eeb0 7bc0 	vabs.f64	d7, d0
 8012688:	eeb4 7b46 	vcmp.f64	d7, d6
 801268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012690:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8012694:	4682      	mov	sl, r0
 8012696:	dd24      	ble.n	80126e2 <_printf_float+0xa2>
 8012698:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a0:	d502      	bpl.n	80126a8 <_printf_float+0x68>
 80126a2:	232d      	movs	r3, #45	; 0x2d
 80126a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126a8:	498f      	ldr	r1, [pc, #572]	; (80128e8 <_printf_float+0x2a8>)
 80126aa:	4b90      	ldr	r3, [pc, #576]	; (80128ec <_printf_float+0x2ac>)
 80126ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80126b0:	bf94      	ite	ls
 80126b2:	4688      	movls	r8, r1
 80126b4:	4698      	movhi	r8, r3
 80126b6:	2303      	movs	r3, #3
 80126b8:	6123      	str	r3, [r4, #16]
 80126ba:	f022 0204 	bic.w	r2, r2, #4
 80126be:	2300      	movs	r3, #0
 80126c0:	6022      	str	r2, [r4, #0]
 80126c2:	9304      	str	r3, [sp, #16]
 80126c4:	9700      	str	r7, [sp, #0]
 80126c6:	4633      	mov	r3, r6
 80126c8:	aa09      	add	r2, sp, #36	; 0x24
 80126ca:	4621      	mov	r1, r4
 80126cc:	4628      	mov	r0, r5
 80126ce:	f000 f9d1 	bl	8012a74 <_printf_common>
 80126d2:	3001      	adds	r0, #1
 80126d4:	f040 808a 	bne.w	80127ec <_printf_float+0x1ac>
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	b00b      	add	sp, #44	; 0x2c
 80126de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80126e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ea:	d709      	bvc.n	8012700 <_printf_float+0xc0>
 80126ec:	ee10 3a90 	vmov	r3, s1
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	bfbc      	itt	lt
 80126f4:	232d      	movlt	r3, #45	; 0x2d
 80126f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80126fa:	497d      	ldr	r1, [pc, #500]	; (80128f0 <_printf_float+0x2b0>)
 80126fc:	4b7d      	ldr	r3, [pc, #500]	; (80128f4 <_printf_float+0x2b4>)
 80126fe:	e7d5      	b.n	80126ac <_printf_float+0x6c>
 8012700:	6863      	ldr	r3, [r4, #4]
 8012702:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012706:	9104      	str	r1, [sp, #16]
 8012708:	1c59      	adds	r1, r3, #1
 801270a:	d13c      	bne.n	8012786 <_printf_float+0x146>
 801270c:	2306      	movs	r3, #6
 801270e:	6063      	str	r3, [r4, #4]
 8012710:	2300      	movs	r3, #0
 8012712:	9303      	str	r3, [sp, #12]
 8012714:	ab08      	add	r3, sp, #32
 8012716:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801271a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801271e:	ab07      	add	r3, sp, #28
 8012720:	6861      	ldr	r1, [r4, #4]
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	6022      	str	r2, [r4, #0]
 8012726:	f10d 031b 	add.w	r3, sp, #27
 801272a:	4628      	mov	r0, r5
 801272c:	f7ff fef8 	bl	8012520 <__cvt>
 8012730:	9b04      	ldr	r3, [sp, #16]
 8012732:	9907      	ldr	r1, [sp, #28]
 8012734:	2b47      	cmp	r3, #71	; 0x47
 8012736:	4680      	mov	r8, r0
 8012738:	d108      	bne.n	801274c <_printf_float+0x10c>
 801273a:	1cc8      	adds	r0, r1, #3
 801273c:	db02      	blt.n	8012744 <_printf_float+0x104>
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	4299      	cmp	r1, r3
 8012742:	dd41      	ble.n	80127c8 <_printf_float+0x188>
 8012744:	f1a9 0902 	sub.w	r9, r9, #2
 8012748:	fa5f f989 	uxtb.w	r9, r9
 801274c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012750:	d820      	bhi.n	8012794 <_printf_float+0x154>
 8012752:	3901      	subs	r1, #1
 8012754:	464a      	mov	r2, r9
 8012756:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801275a:	9107      	str	r1, [sp, #28]
 801275c:	f7ff ff32 	bl	80125c4 <__exponent>
 8012760:	9a08      	ldr	r2, [sp, #32]
 8012762:	9004      	str	r0, [sp, #16]
 8012764:	1813      	adds	r3, r2, r0
 8012766:	2a01      	cmp	r2, #1
 8012768:	6123      	str	r3, [r4, #16]
 801276a:	dc02      	bgt.n	8012772 <_printf_float+0x132>
 801276c:	6822      	ldr	r2, [r4, #0]
 801276e:	07d2      	lsls	r2, r2, #31
 8012770:	d501      	bpl.n	8012776 <_printf_float+0x136>
 8012772:	3301      	adds	r3, #1
 8012774:	6123      	str	r3, [r4, #16]
 8012776:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d0a2      	beq.n	80126c4 <_printf_float+0x84>
 801277e:	232d      	movs	r3, #45	; 0x2d
 8012780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012784:	e79e      	b.n	80126c4 <_printf_float+0x84>
 8012786:	9904      	ldr	r1, [sp, #16]
 8012788:	2947      	cmp	r1, #71	; 0x47
 801278a:	d1c1      	bne.n	8012710 <_printf_float+0xd0>
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1bf      	bne.n	8012710 <_printf_float+0xd0>
 8012790:	2301      	movs	r3, #1
 8012792:	e7bc      	b.n	801270e <_printf_float+0xce>
 8012794:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012798:	d118      	bne.n	80127cc <_printf_float+0x18c>
 801279a:	2900      	cmp	r1, #0
 801279c:	6863      	ldr	r3, [r4, #4]
 801279e:	dd0b      	ble.n	80127b8 <_printf_float+0x178>
 80127a0:	6121      	str	r1, [r4, #16]
 80127a2:	b913      	cbnz	r3, 80127aa <_printf_float+0x16a>
 80127a4:	6822      	ldr	r2, [r4, #0]
 80127a6:	07d0      	lsls	r0, r2, #31
 80127a8:	d502      	bpl.n	80127b0 <_printf_float+0x170>
 80127aa:	3301      	adds	r3, #1
 80127ac:	440b      	add	r3, r1
 80127ae:	6123      	str	r3, [r4, #16]
 80127b0:	2300      	movs	r3, #0
 80127b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80127b4:	9304      	str	r3, [sp, #16]
 80127b6:	e7de      	b.n	8012776 <_printf_float+0x136>
 80127b8:	b913      	cbnz	r3, 80127c0 <_printf_float+0x180>
 80127ba:	6822      	ldr	r2, [r4, #0]
 80127bc:	07d2      	lsls	r2, r2, #31
 80127be:	d501      	bpl.n	80127c4 <_printf_float+0x184>
 80127c0:	3302      	adds	r3, #2
 80127c2:	e7f4      	b.n	80127ae <_printf_float+0x16e>
 80127c4:	2301      	movs	r3, #1
 80127c6:	e7f2      	b.n	80127ae <_printf_float+0x16e>
 80127c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80127cc:	9b08      	ldr	r3, [sp, #32]
 80127ce:	4299      	cmp	r1, r3
 80127d0:	db05      	blt.n	80127de <_printf_float+0x19e>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	6121      	str	r1, [r4, #16]
 80127d6:	07d8      	lsls	r0, r3, #31
 80127d8:	d5ea      	bpl.n	80127b0 <_printf_float+0x170>
 80127da:	1c4b      	adds	r3, r1, #1
 80127dc:	e7e7      	b.n	80127ae <_printf_float+0x16e>
 80127de:	2900      	cmp	r1, #0
 80127e0:	bfd4      	ite	le
 80127e2:	f1c1 0202 	rsble	r2, r1, #2
 80127e6:	2201      	movgt	r2, #1
 80127e8:	4413      	add	r3, r2
 80127ea:	e7e0      	b.n	80127ae <_printf_float+0x16e>
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	055a      	lsls	r2, r3, #21
 80127f0:	d407      	bmi.n	8012802 <_printf_float+0x1c2>
 80127f2:	6923      	ldr	r3, [r4, #16]
 80127f4:	4642      	mov	r2, r8
 80127f6:	4631      	mov	r1, r6
 80127f8:	4628      	mov	r0, r5
 80127fa:	47b8      	blx	r7
 80127fc:	3001      	adds	r0, #1
 80127fe:	d12a      	bne.n	8012856 <_printf_float+0x216>
 8012800:	e76a      	b.n	80126d8 <_printf_float+0x98>
 8012802:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012806:	f240 80e0 	bls.w	80129ca <_printf_float+0x38a>
 801280a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801280e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012816:	d133      	bne.n	8012880 <_printf_float+0x240>
 8012818:	4a37      	ldr	r2, [pc, #220]	; (80128f8 <_printf_float+0x2b8>)
 801281a:	2301      	movs	r3, #1
 801281c:	4631      	mov	r1, r6
 801281e:	4628      	mov	r0, r5
 8012820:	47b8      	blx	r7
 8012822:	3001      	adds	r0, #1
 8012824:	f43f af58 	beq.w	80126d8 <_printf_float+0x98>
 8012828:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801282c:	429a      	cmp	r2, r3
 801282e:	db02      	blt.n	8012836 <_printf_float+0x1f6>
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	07d8      	lsls	r0, r3, #31
 8012834:	d50f      	bpl.n	8012856 <_printf_float+0x216>
 8012836:	4653      	mov	r3, sl
 8012838:	465a      	mov	r2, fp
 801283a:	4631      	mov	r1, r6
 801283c:	4628      	mov	r0, r5
 801283e:	47b8      	blx	r7
 8012840:	3001      	adds	r0, #1
 8012842:	f43f af49 	beq.w	80126d8 <_printf_float+0x98>
 8012846:	f04f 0800 	mov.w	r8, #0
 801284a:	f104 091a 	add.w	r9, r4, #26
 801284e:	9b08      	ldr	r3, [sp, #32]
 8012850:	3b01      	subs	r3, #1
 8012852:	4543      	cmp	r3, r8
 8012854:	dc09      	bgt.n	801286a <_printf_float+0x22a>
 8012856:	6823      	ldr	r3, [r4, #0]
 8012858:	079b      	lsls	r3, r3, #30
 801285a:	f100 8106 	bmi.w	8012a6a <_printf_float+0x42a>
 801285e:	68e0      	ldr	r0, [r4, #12]
 8012860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012862:	4298      	cmp	r0, r3
 8012864:	bfb8      	it	lt
 8012866:	4618      	movlt	r0, r3
 8012868:	e738      	b.n	80126dc <_printf_float+0x9c>
 801286a:	2301      	movs	r3, #1
 801286c:	464a      	mov	r2, r9
 801286e:	4631      	mov	r1, r6
 8012870:	4628      	mov	r0, r5
 8012872:	47b8      	blx	r7
 8012874:	3001      	adds	r0, #1
 8012876:	f43f af2f 	beq.w	80126d8 <_printf_float+0x98>
 801287a:	f108 0801 	add.w	r8, r8, #1
 801287e:	e7e6      	b.n	801284e <_printf_float+0x20e>
 8012880:	9b07      	ldr	r3, [sp, #28]
 8012882:	2b00      	cmp	r3, #0
 8012884:	dc3a      	bgt.n	80128fc <_printf_float+0x2bc>
 8012886:	4a1c      	ldr	r2, [pc, #112]	; (80128f8 <_printf_float+0x2b8>)
 8012888:	2301      	movs	r3, #1
 801288a:	4631      	mov	r1, r6
 801288c:	4628      	mov	r0, r5
 801288e:	47b8      	blx	r7
 8012890:	3001      	adds	r0, #1
 8012892:	f43f af21 	beq.w	80126d8 <_printf_float+0x98>
 8012896:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801289a:	4313      	orrs	r3, r2
 801289c:	d102      	bne.n	80128a4 <_printf_float+0x264>
 801289e:	6823      	ldr	r3, [r4, #0]
 80128a0:	07d9      	lsls	r1, r3, #31
 80128a2:	d5d8      	bpl.n	8012856 <_printf_float+0x216>
 80128a4:	4653      	mov	r3, sl
 80128a6:	465a      	mov	r2, fp
 80128a8:	4631      	mov	r1, r6
 80128aa:	4628      	mov	r0, r5
 80128ac:	47b8      	blx	r7
 80128ae:	3001      	adds	r0, #1
 80128b0:	f43f af12 	beq.w	80126d8 <_printf_float+0x98>
 80128b4:	f04f 0900 	mov.w	r9, #0
 80128b8:	f104 0a1a 	add.w	sl, r4, #26
 80128bc:	9b07      	ldr	r3, [sp, #28]
 80128be:	425b      	negs	r3, r3
 80128c0:	454b      	cmp	r3, r9
 80128c2:	dc01      	bgt.n	80128c8 <_printf_float+0x288>
 80128c4:	9b08      	ldr	r3, [sp, #32]
 80128c6:	e795      	b.n	80127f4 <_printf_float+0x1b4>
 80128c8:	2301      	movs	r3, #1
 80128ca:	4652      	mov	r2, sl
 80128cc:	4631      	mov	r1, r6
 80128ce:	4628      	mov	r0, r5
 80128d0:	47b8      	blx	r7
 80128d2:	3001      	adds	r0, #1
 80128d4:	f43f af00 	beq.w	80126d8 <_printf_float+0x98>
 80128d8:	f109 0901 	add.w	r9, r9, #1
 80128dc:	e7ee      	b.n	80128bc <_printf_float+0x27c>
 80128de:	bf00      	nop
 80128e0:	ffffffff 	.word	0xffffffff
 80128e4:	7fefffff 	.word	0x7fefffff
 80128e8:	08019a14 	.word	0x08019a14
 80128ec:	08019a18 	.word	0x08019a18
 80128f0:	08019a1c 	.word	0x08019a1c
 80128f4:	08019a20 	.word	0x08019a20
 80128f8:	08019a24 	.word	0x08019a24
 80128fc:	9a08      	ldr	r2, [sp, #32]
 80128fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012900:	429a      	cmp	r2, r3
 8012902:	bfa8      	it	ge
 8012904:	461a      	movge	r2, r3
 8012906:	2a00      	cmp	r2, #0
 8012908:	4691      	mov	r9, r2
 801290a:	dc38      	bgt.n	801297e <_printf_float+0x33e>
 801290c:	2300      	movs	r3, #0
 801290e:	9305      	str	r3, [sp, #20]
 8012910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012914:	f104 021a 	add.w	r2, r4, #26
 8012918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801291a:	9905      	ldr	r1, [sp, #20]
 801291c:	9304      	str	r3, [sp, #16]
 801291e:	eba3 0309 	sub.w	r3, r3, r9
 8012922:	428b      	cmp	r3, r1
 8012924:	dc33      	bgt.n	801298e <_printf_float+0x34e>
 8012926:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801292a:	429a      	cmp	r2, r3
 801292c:	db3c      	blt.n	80129a8 <_printf_float+0x368>
 801292e:	6823      	ldr	r3, [r4, #0]
 8012930:	07da      	lsls	r2, r3, #31
 8012932:	d439      	bmi.n	80129a8 <_printf_float+0x368>
 8012934:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8012938:	eba2 0903 	sub.w	r9, r2, r3
 801293c:	9b04      	ldr	r3, [sp, #16]
 801293e:	1ad2      	subs	r2, r2, r3
 8012940:	4591      	cmp	r9, r2
 8012942:	bfa8      	it	ge
 8012944:	4691      	movge	r9, r2
 8012946:	f1b9 0f00 	cmp.w	r9, #0
 801294a:	dc35      	bgt.n	80129b8 <_printf_float+0x378>
 801294c:	f04f 0800 	mov.w	r8, #0
 8012950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012954:	f104 0a1a 	add.w	sl, r4, #26
 8012958:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801295c:	1a9b      	subs	r3, r3, r2
 801295e:	eba3 0309 	sub.w	r3, r3, r9
 8012962:	4543      	cmp	r3, r8
 8012964:	f77f af77 	ble.w	8012856 <_printf_float+0x216>
 8012968:	2301      	movs	r3, #1
 801296a:	4652      	mov	r2, sl
 801296c:	4631      	mov	r1, r6
 801296e:	4628      	mov	r0, r5
 8012970:	47b8      	blx	r7
 8012972:	3001      	adds	r0, #1
 8012974:	f43f aeb0 	beq.w	80126d8 <_printf_float+0x98>
 8012978:	f108 0801 	add.w	r8, r8, #1
 801297c:	e7ec      	b.n	8012958 <_printf_float+0x318>
 801297e:	4613      	mov	r3, r2
 8012980:	4631      	mov	r1, r6
 8012982:	4642      	mov	r2, r8
 8012984:	4628      	mov	r0, r5
 8012986:	47b8      	blx	r7
 8012988:	3001      	adds	r0, #1
 801298a:	d1bf      	bne.n	801290c <_printf_float+0x2cc>
 801298c:	e6a4      	b.n	80126d8 <_printf_float+0x98>
 801298e:	2301      	movs	r3, #1
 8012990:	4631      	mov	r1, r6
 8012992:	4628      	mov	r0, r5
 8012994:	9204      	str	r2, [sp, #16]
 8012996:	47b8      	blx	r7
 8012998:	3001      	adds	r0, #1
 801299a:	f43f ae9d 	beq.w	80126d8 <_printf_float+0x98>
 801299e:	9b05      	ldr	r3, [sp, #20]
 80129a0:	9a04      	ldr	r2, [sp, #16]
 80129a2:	3301      	adds	r3, #1
 80129a4:	9305      	str	r3, [sp, #20]
 80129a6:	e7b7      	b.n	8012918 <_printf_float+0x2d8>
 80129a8:	4653      	mov	r3, sl
 80129aa:	465a      	mov	r2, fp
 80129ac:	4631      	mov	r1, r6
 80129ae:	4628      	mov	r0, r5
 80129b0:	47b8      	blx	r7
 80129b2:	3001      	adds	r0, #1
 80129b4:	d1be      	bne.n	8012934 <_printf_float+0x2f4>
 80129b6:	e68f      	b.n	80126d8 <_printf_float+0x98>
 80129b8:	9a04      	ldr	r2, [sp, #16]
 80129ba:	464b      	mov	r3, r9
 80129bc:	4442      	add	r2, r8
 80129be:	4631      	mov	r1, r6
 80129c0:	4628      	mov	r0, r5
 80129c2:	47b8      	blx	r7
 80129c4:	3001      	adds	r0, #1
 80129c6:	d1c1      	bne.n	801294c <_printf_float+0x30c>
 80129c8:	e686      	b.n	80126d8 <_printf_float+0x98>
 80129ca:	9a08      	ldr	r2, [sp, #32]
 80129cc:	2a01      	cmp	r2, #1
 80129ce:	dc01      	bgt.n	80129d4 <_printf_float+0x394>
 80129d0:	07db      	lsls	r3, r3, #31
 80129d2:	d537      	bpl.n	8012a44 <_printf_float+0x404>
 80129d4:	2301      	movs	r3, #1
 80129d6:	4642      	mov	r2, r8
 80129d8:	4631      	mov	r1, r6
 80129da:	4628      	mov	r0, r5
 80129dc:	47b8      	blx	r7
 80129de:	3001      	adds	r0, #1
 80129e0:	f43f ae7a 	beq.w	80126d8 <_printf_float+0x98>
 80129e4:	4653      	mov	r3, sl
 80129e6:	465a      	mov	r2, fp
 80129e8:	4631      	mov	r1, r6
 80129ea:	4628      	mov	r0, r5
 80129ec:	47b8      	blx	r7
 80129ee:	3001      	adds	r0, #1
 80129f0:	f43f ae72 	beq.w	80126d8 <_printf_float+0x98>
 80129f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80129f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80129fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a00:	9b08      	ldr	r3, [sp, #32]
 8012a02:	d01a      	beq.n	8012a3a <_printf_float+0x3fa>
 8012a04:	3b01      	subs	r3, #1
 8012a06:	f108 0201 	add.w	r2, r8, #1
 8012a0a:	4631      	mov	r1, r6
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	47b8      	blx	r7
 8012a10:	3001      	adds	r0, #1
 8012a12:	d10e      	bne.n	8012a32 <_printf_float+0x3f2>
 8012a14:	e660      	b.n	80126d8 <_printf_float+0x98>
 8012a16:	2301      	movs	r3, #1
 8012a18:	464a      	mov	r2, r9
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	47b8      	blx	r7
 8012a20:	3001      	adds	r0, #1
 8012a22:	f43f ae59 	beq.w	80126d8 <_printf_float+0x98>
 8012a26:	f108 0801 	add.w	r8, r8, #1
 8012a2a:	9b08      	ldr	r3, [sp, #32]
 8012a2c:	3b01      	subs	r3, #1
 8012a2e:	4543      	cmp	r3, r8
 8012a30:	dcf1      	bgt.n	8012a16 <_printf_float+0x3d6>
 8012a32:	9b04      	ldr	r3, [sp, #16]
 8012a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a38:	e6dd      	b.n	80127f6 <_printf_float+0x1b6>
 8012a3a:	f04f 0800 	mov.w	r8, #0
 8012a3e:	f104 091a 	add.w	r9, r4, #26
 8012a42:	e7f2      	b.n	8012a2a <_printf_float+0x3ea>
 8012a44:	2301      	movs	r3, #1
 8012a46:	4642      	mov	r2, r8
 8012a48:	e7df      	b.n	8012a0a <_printf_float+0x3ca>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	464a      	mov	r2, r9
 8012a4e:	4631      	mov	r1, r6
 8012a50:	4628      	mov	r0, r5
 8012a52:	47b8      	blx	r7
 8012a54:	3001      	adds	r0, #1
 8012a56:	f43f ae3f 	beq.w	80126d8 <_printf_float+0x98>
 8012a5a:	f108 0801 	add.w	r8, r8, #1
 8012a5e:	68e3      	ldr	r3, [r4, #12]
 8012a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a62:	1a5b      	subs	r3, r3, r1
 8012a64:	4543      	cmp	r3, r8
 8012a66:	dcf0      	bgt.n	8012a4a <_printf_float+0x40a>
 8012a68:	e6f9      	b.n	801285e <_printf_float+0x21e>
 8012a6a:	f04f 0800 	mov.w	r8, #0
 8012a6e:	f104 0919 	add.w	r9, r4, #25
 8012a72:	e7f4      	b.n	8012a5e <_printf_float+0x41e>

08012a74 <_printf_common>:
 8012a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	4616      	mov	r6, r2
 8012a7a:	4699      	mov	r9, r3
 8012a7c:	688a      	ldr	r2, [r1, #8]
 8012a7e:	690b      	ldr	r3, [r1, #16]
 8012a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a84:	4293      	cmp	r3, r2
 8012a86:	bfb8      	it	lt
 8012a88:	4613      	movlt	r3, r2
 8012a8a:	6033      	str	r3, [r6, #0]
 8012a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a90:	4607      	mov	r7, r0
 8012a92:	460c      	mov	r4, r1
 8012a94:	b10a      	cbz	r2, 8012a9a <_printf_common+0x26>
 8012a96:	3301      	adds	r3, #1
 8012a98:	6033      	str	r3, [r6, #0]
 8012a9a:	6823      	ldr	r3, [r4, #0]
 8012a9c:	0699      	lsls	r1, r3, #26
 8012a9e:	bf42      	ittt	mi
 8012aa0:	6833      	ldrmi	r3, [r6, #0]
 8012aa2:	3302      	addmi	r3, #2
 8012aa4:	6033      	strmi	r3, [r6, #0]
 8012aa6:	6825      	ldr	r5, [r4, #0]
 8012aa8:	f015 0506 	ands.w	r5, r5, #6
 8012aac:	d106      	bne.n	8012abc <_printf_common+0x48>
 8012aae:	f104 0a19 	add.w	sl, r4, #25
 8012ab2:	68e3      	ldr	r3, [r4, #12]
 8012ab4:	6832      	ldr	r2, [r6, #0]
 8012ab6:	1a9b      	subs	r3, r3, r2
 8012ab8:	42ab      	cmp	r3, r5
 8012aba:	dc26      	bgt.n	8012b0a <_printf_common+0x96>
 8012abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ac0:	1e13      	subs	r3, r2, #0
 8012ac2:	6822      	ldr	r2, [r4, #0]
 8012ac4:	bf18      	it	ne
 8012ac6:	2301      	movne	r3, #1
 8012ac8:	0692      	lsls	r2, r2, #26
 8012aca:	d42b      	bmi.n	8012b24 <_printf_common+0xb0>
 8012acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	47c0      	blx	r8
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	d01e      	beq.n	8012b18 <_printf_common+0xa4>
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	6922      	ldr	r2, [r4, #16]
 8012ade:	f003 0306 	and.w	r3, r3, #6
 8012ae2:	2b04      	cmp	r3, #4
 8012ae4:	bf02      	ittt	eq
 8012ae6:	68e5      	ldreq	r5, [r4, #12]
 8012ae8:	6833      	ldreq	r3, [r6, #0]
 8012aea:	1aed      	subeq	r5, r5, r3
 8012aec:	68a3      	ldr	r3, [r4, #8]
 8012aee:	bf0c      	ite	eq
 8012af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012af4:	2500      	movne	r5, #0
 8012af6:	4293      	cmp	r3, r2
 8012af8:	bfc4      	itt	gt
 8012afa:	1a9b      	subgt	r3, r3, r2
 8012afc:	18ed      	addgt	r5, r5, r3
 8012afe:	2600      	movs	r6, #0
 8012b00:	341a      	adds	r4, #26
 8012b02:	42b5      	cmp	r5, r6
 8012b04:	d11a      	bne.n	8012b3c <_printf_common+0xc8>
 8012b06:	2000      	movs	r0, #0
 8012b08:	e008      	b.n	8012b1c <_printf_common+0xa8>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	4652      	mov	r2, sl
 8012b0e:	4649      	mov	r1, r9
 8012b10:	4638      	mov	r0, r7
 8012b12:	47c0      	blx	r8
 8012b14:	3001      	adds	r0, #1
 8012b16:	d103      	bne.n	8012b20 <_printf_common+0xac>
 8012b18:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b20:	3501      	adds	r5, #1
 8012b22:	e7c6      	b.n	8012ab2 <_printf_common+0x3e>
 8012b24:	18e1      	adds	r1, r4, r3
 8012b26:	1c5a      	adds	r2, r3, #1
 8012b28:	2030      	movs	r0, #48	; 0x30
 8012b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b2e:	4422      	add	r2, r4
 8012b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b38:	3302      	adds	r3, #2
 8012b3a:	e7c7      	b.n	8012acc <_printf_common+0x58>
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	4622      	mov	r2, r4
 8012b40:	4649      	mov	r1, r9
 8012b42:	4638      	mov	r0, r7
 8012b44:	47c0      	blx	r8
 8012b46:	3001      	adds	r0, #1
 8012b48:	d0e6      	beq.n	8012b18 <_printf_common+0xa4>
 8012b4a:	3601      	adds	r6, #1
 8012b4c:	e7d9      	b.n	8012b02 <_printf_common+0x8e>
	...

08012b50 <_printf_i>:
 8012b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b54:	7e0f      	ldrb	r7, [r1, #24]
 8012b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b58:	2f78      	cmp	r7, #120	; 0x78
 8012b5a:	4691      	mov	r9, r2
 8012b5c:	4680      	mov	r8, r0
 8012b5e:	460c      	mov	r4, r1
 8012b60:	469a      	mov	sl, r3
 8012b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b66:	d807      	bhi.n	8012b78 <_printf_i+0x28>
 8012b68:	2f62      	cmp	r7, #98	; 0x62
 8012b6a:	d80a      	bhi.n	8012b82 <_printf_i+0x32>
 8012b6c:	2f00      	cmp	r7, #0
 8012b6e:	f000 80d4 	beq.w	8012d1a <_printf_i+0x1ca>
 8012b72:	2f58      	cmp	r7, #88	; 0x58
 8012b74:	f000 80c0 	beq.w	8012cf8 <_printf_i+0x1a8>
 8012b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b80:	e03a      	b.n	8012bf8 <_printf_i+0xa8>
 8012b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b86:	2b15      	cmp	r3, #21
 8012b88:	d8f6      	bhi.n	8012b78 <_printf_i+0x28>
 8012b8a:	a101      	add	r1, pc, #4	; (adr r1, 8012b90 <_printf_i+0x40>)
 8012b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b90:	08012be9 	.word	0x08012be9
 8012b94:	08012bfd 	.word	0x08012bfd
 8012b98:	08012b79 	.word	0x08012b79
 8012b9c:	08012b79 	.word	0x08012b79
 8012ba0:	08012b79 	.word	0x08012b79
 8012ba4:	08012b79 	.word	0x08012b79
 8012ba8:	08012bfd 	.word	0x08012bfd
 8012bac:	08012b79 	.word	0x08012b79
 8012bb0:	08012b79 	.word	0x08012b79
 8012bb4:	08012b79 	.word	0x08012b79
 8012bb8:	08012b79 	.word	0x08012b79
 8012bbc:	08012d01 	.word	0x08012d01
 8012bc0:	08012c29 	.word	0x08012c29
 8012bc4:	08012cbb 	.word	0x08012cbb
 8012bc8:	08012b79 	.word	0x08012b79
 8012bcc:	08012b79 	.word	0x08012b79
 8012bd0:	08012d23 	.word	0x08012d23
 8012bd4:	08012b79 	.word	0x08012b79
 8012bd8:	08012c29 	.word	0x08012c29
 8012bdc:	08012b79 	.word	0x08012b79
 8012be0:	08012b79 	.word	0x08012b79
 8012be4:	08012cc3 	.word	0x08012cc3
 8012be8:	682b      	ldr	r3, [r5, #0]
 8012bea:	1d1a      	adds	r2, r3, #4
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	602a      	str	r2, [r5, #0]
 8012bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e09f      	b.n	8012d3c <_printf_i+0x1ec>
 8012bfc:	6820      	ldr	r0, [r4, #0]
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	0607      	lsls	r7, r0, #24
 8012c02:	f103 0104 	add.w	r1, r3, #4
 8012c06:	6029      	str	r1, [r5, #0]
 8012c08:	d501      	bpl.n	8012c0e <_printf_i+0xbe>
 8012c0a:	681e      	ldr	r6, [r3, #0]
 8012c0c:	e003      	b.n	8012c16 <_printf_i+0xc6>
 8012c0e:	0646      	lsls	r6, r0, #25
 8012c10:	d5fb      	bpl.n	8012c0a <_printf_i+0xba>
 8012c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012c16:	2e00      	cmp	r6, #0
 8012c18:	da03      	bge.n	8012c22 <_printf_i+0xd2>
 8012c1a:	232d      	movs	r3, #45	; 0x2d
 8012c1c:	4276      	negs	r6, r6
 8012c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c22:	485a      	ldr	r0, [pc, #360]	; (8012d8c <_printf_i+0x23c>)
 8012c24:	230a      	movs	r3, #10
 8012c26:	e012      	b.n	8012c4e <_printf_i+0xfe>
 8012c28:	682b      	ldr	r3, [r5, #0]
 8012c2a:	6820      	ldr	r0, [r4, #0]
 8012c2c:	1d19      	adds	r1, r3, #4
 8012c2e:	6029      	str	r1, [r5, #0]
 8012c30:	0605      	lsls	r5, r0, #24
 8012c32:	d501      	bpl.n	8012c38 <_printf_i+0xe8>
 8012c34:	681e      	ldr	r6, [r3, #0]
 8012c36:	e002      	b.n	8012c3e <_printf_i+0xee>
 8012c38:	0641      	lsls	r1, r0, #25
 8012c3a:	d5fb      	bpl.n	8012c34 <_printf_i+0xe4>
 8012c3c:	881e      	ldrh	r6, [r3, #0]
 8012c3e:	4853      	ldr	r0, [pc, #332]	; (8012d8c <_printf_i+0x23c>)
 8012c40:	2f6f      	cmp	r7, #111	; 0x6f
 8012c42:	bf0c      	ite	eq
 8012c44:	2308      	moveq	r3, #8
 8012c46:	230a      	movne	r3, #10
 8012c48:	2100      	movs	r1, #0
 8012c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c4e:	6865      	ldr	r5, [r4, #4]
 8012c50:	60a5      	str	r5, [r4, #8]
 8012c52:	2d00      	cmp	r5, #0
 8012c54:	bfa2      	ittt	ge
 8012c56:	6821      	ldrge	r1, [r4, #0]
 8012c58:	f021 0104 	bicge.w	r1, r1, #4
 8012c5c:	6021      	strge	r1, [r4, #0]
 8012c5e:	b90e      	cbnz	r6, 8012c64 <_printf_i+0x114>
 8012c60:	2d00      	cmp	r5, #0
 8012c62:	d04b      	beq.n	8012cfc <_printf_i+0x1ac>
 8012c64:	4615      	mov	r5, r2
 8012c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8012c6e:	5dc7      	ldrb	r7, [r0, r7]
 8012c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c74:	4637      	mov	r7, r6
 8012c76:	42bb      	cmp	r3, r7
 8012c78:	460e      	mov	r6, r1
 8012c7a:	d9f4      	bls.n	8012c66 <_printf_i+0x116>
 8012c7c:	2b08      	cmp	r3, #8
 8012c7e:	d10b      	bne.n	8012c98 <_printf_i+0x148>
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	07de      	lsls	r6, r3, #31
 8012c84:	d508      	bpl.n	8012c98 <_printf_i+0x148>
 8012c86:	6923      	ldr	r3, [r4, #16]
 8012c88:	6861      	ldr	r1, [r4, #4]
 8012c8a:	4299      	cmp	r1, r3
 8012c8c:	bfde      	ittt	le
 8012c8e:	2330      	movle	r3, #48	; 0x30
 8012c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012c98:	1b52      	subs	r2, r2, r5
 8012c9a:	6122      	str	r2, [r4, #16]
 8012c9c:	f8cd a000 	str.w	sl, [sp]
 8012ca0:	464b      	mov	r3, r9
 8012ca2:	aa03      	add	r2, sp, #12
 8012ca4:	4621      	mov	r1, r4
 8012ca6:	4640      	mov	r0, r8
 8012ca8:	f7ff fee4 	bl	8012a74 <_printf_common>
 8012cac:	3001      	adds	r0, #1
 8012cae:	d14a      	bne.n	8012d46 <_printf_i+0x1f6>
 8012cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb4:	b004      	add	sp, #16
 8012cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	f043 0320 	orr.w	r3, r3, #32
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	4833      	ldr	r0, [pc, #204]	; (8012d90 <_printf_i+0x240>)
 8012cc4:	2778      	movs	r7, #120	; 0x78
 8012cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	6829      	ldr	r1, [r5, #0]
 8012cce:	061f      	lsls	r7, r3, #24
 8012cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012cd4:	d402      	bmi.n	8012cdc <_printf_i+0x18c>
 8012cd6:	065f      	lsls	r7, r3, #25
 8012cd8:	bf48      	it	mi
 8012cda:	b2b6      	uxthmi	r6, r6
 8012cdc:	07df      	lsls	r7, r3, #31
 8012cde:	bf48      	it	mi
 8012ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8012ce4:	6029      	str	r1, [r5, #0]
 8012ce6:	bf48      	it	mi
 8012ce8:	6023      	strmi	r3, [r4, #0]
 8012cea:	b91e      	cbnz	r6, 8012cf4 <_printf_i+0x1a4>
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	f023 0320 	bic.w	r3, r3, #32
 8012cf2:	6023      	str	r3, [r4, #0]
 8012cf4:	2310      	movs	r3, #16
 8012cf6:	e7a7      	b.n	8012c48 <_printf_i+0xf8>
 8012cf8:	4824      	ldr	r0, [pc, #144]	; (8012d8c <_printf_i+0x23c>)
 8012cfa:	e7e4      	b.n	8012cc6 <_printf_i+0x176>
 8012cfc:	4615      	mov	r5, r2
 8012cfe:	e7bd      	b.n	8012c7c <_printf_i+0x12c>
 8012d00:	682b      	ldr	r3, [r5, #0]
 8012d02:	6826      	ldr	r6, [r4, #0]
 8012d04:	6961      	ldr	r1, [r4, #20]
 8012d06:	1d18      	adds	r0, r3, #4
 8012d08:	6028      	str	r0, [r5, #0]
 8012d0a:	0635      	lsls	r5, r6, #24
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	d501      	bpl.n	8012d14 <_printf_i+0x1c4>
 8012d10:	6019      	str	r1, [r3, #0]
 8012d12:	e002      	b.n	8012d1a <_printf_i+0x1ca>
 8012d14:	0670      	lsls	r0, r6, #25
 8012d16:	d5fb      	bpl.n	8012d10 <_printf_i+0x1c0>
 8012d18:	8019      	strh	r1, [r3, #0]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	6123      	str	r3, [r4, #16]
 8012d1e:	4615      	mov	r5, r2
 8012d20:	e7bc      	b.n	8012c9c <_printf_i+0x14c>
 8012d22:	682b      	ldr	r3, [r5, #0]
 8012d24:	1d1a      	adds	r2, r3, #4
 8012d26:	602a      	str	r2, [r5, #0]
 8012d28:	681d      	ldr	r5, [r3, #0]
 8012d2a:	6862      	ldr	r2, [r4, #4]
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f7ed fb36 	bl	80003a0 <memchr>
 8012d34:	b108      	cbz	r0, 8012d3a <_printf_i+0x1ea>
 8012d36:	1b40      	subs	r0, r0, r5
 8012d38:	6060      	str	r0, [r4, #4]
 8012d3a:	6863      	ldr	r3, [r4, #4]
 8012d3c:	6123      	str	r3, [r4, #16]
 8012d3e:	2300      	movs	r3, #0
 8012d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d44:	e7aa      	b.n	8012c9c <_printf_i+0x14c>
 8012d46:	6923      	ldr	r3, [r4, #16]
 8012d48:	462a      	mov	r2, r5
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	4640      	mov	r0, r8
 8012d4e:	47d0      	blx	sl
 8012d50:	3001      	adds	r0, #1
 8012d52:	d0ad      	beq.n	8012cb0 <_printf_i+0x160>
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	079b      	lsls	r3, r3, #30
 8012d58:	d413      	bmi.n	8012d82 <_printf_i+0x232>
 8012d5a:	68e0      	ldr	r0, [r4, #12]
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	4298      	cmp	r0, r3
 8012d60:	bfb8      	it	lt
 8012d62:	4618      	movlt	r0, r3
 8012d64:	e7a6      	b.n	8012cb4 <_printf_i+0x164>
 8012d66:	2301      	movs	r3, #1
 8012d68:	4632      	mov	r2, r6
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	4640      	mov	r0, r8
 8012d6e:	47d0      	blx	sl
 8012d70:	3001      	adds	r0, #1
 8012d72:	d09d      	beq.n	8012cb0 <_printf_i+0x160>
 8012d74:	3501      	adds	r5, #1
 8012d76:	68e3      	ldr	r3, [r4, #12]
 8012d78:	9903      	ldr	r1, [sp, #12]
 8012d7a:	1a5b      	subs	r3, r3, r1
 8012d7c:	42ab      	cmp	r3, r5
 8012d7e:	dcf2      	bgt.n	8012d66 <_printf_i+0x216>
 8012d80:	e7eb      	b.n	8012d5a <_printf_i+0x20a>
 8012d82:	2500      	movs	r5, #0
 8012d84:	f104 0619 	add.w	r6, r4, #25
 8012d88:	e7f5      	b.n	8012d76 <_printf_i+0x226>
 8012d8a:	bf00      	nop
 8012d8c:	08019a26 	.word	0x08019a26
 8012d90:	08019a37 	.word	0x08019a37

08012d94 <std>:
 8012d94:	2300      	movs	r3, #0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da2:	6083      	str	r3, [r0, #8]
 8012da4:	8181      	strh	r1, [r0, #12]
 8012da6:	6643      	str	r3, [r0, #100]	; 0x64
 8012da8:	81c2      	strh	r2, [r0, #14]
 8012daa:	6183      	str	r3, [r0, #24]
 8012dac:	4619      	mov	r1, r3
 8012dae:	2208      	movs	r2, #8
 8012db0:	305c      	adds	r0, #92	; 0x5c
 8012db2:	f000 f914 	bl	8012fde <memset>
 8012db6:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <std+0x38>)
 8012db8:	6263      	str	r3, [r4, #36]	; 0x24
 8012dba:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <std+0x3c>)
 8012dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dbe:	4b05      	ldr	r3, [pc, #20]	; (8012dd4 <std+0x40>)
 8012dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dc2:	4b05      	ldr	r3, [pc, #20]	; (8012dd8 <std+0x44>)
 8012dc4:	6224      	str	r4, [r4, #32]
 8012dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8012dc8:	bd10      	pop	{r4, pc}
 8012dca:	bf00      	nop
 8012dcc:	08012f59 	.word	0x08012f59
 8012dd0:	08012f7b 	.word	0x08012f7b
 8012dd4:	08012fb3 	.word	0x08012fb3
 8012dd8:	08012fd7 	.word	0x08012fd7

08012ddc <stdio_exit_handler>:
 8012ddc:	4a02      	ldr	r2, [pc, #8]	; (8012de8 <stdio_exit_handler+0xc>)
 8012dde:	4903      	ldr	r1, [pc, #12]	; (8012dec <stdio_exit_handler+0x10>)
 8012de0:	4803      	ldr	r0, [pc, #12]	; (8012df0 <stdio_exit_handler+0x14>)
 8012de2:	f000 b87b 	b.w	8012edc <_fwalk_sglue>
 8012de6:	bf00      	nop
 8012de8:	24000354 	.word	0x24000354
 8012dec:	08014d15 	.word	0x08014d15
 8012df0:	24000360 	.word	0x24000360

08012df4 <cleanup_stdio>:
 8012df4:	6841      	ldr	r1, [r0, #4]
 8012df6:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <cleanup_stdio+0x34>)
 8012df8:	4299      	cmp	r1, r3
 8012dfa:	b510      	push	{r4, lr}
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	d001      	beq.n	8012e04 <cleanup_stdio+0x10>
 8012e00:	f001 ff88 	bl	8014d14 <_fflush_r>
 8012e04:	68a1      	ldr	r1, [r4, #8]
 8012e06:	4b09      	ldr	r3, [pc, #36]	; (8012e2c <cleanup_stdio+0x38>)
 8012e08:	4299      	cmp	r1, r3
 8012e0a:	d002      	beq.n	8012e12 <cleanup_stdio+0x1e>
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f001 ff81 	bl	8014d14 <_fflush_r>
 8012e12:	68e1      	ldr	r1, [r4, #12]
 8012e14:	4b06      	ldr	r3, [pc, #24]	; (8012e30 <cleanup_stdio+0x3c>)
 8012e16:	4299      	cmp	r1, r3
 8012e18:	d004      	beq.n	8012e24 <cleanup_stdio+0x30>
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e20:	f001 bf78 	b.w	8014d14 <_fflush_r>
 8012e24:	bd10      	pop	{r4, pc}
 8012e26:	bf00      	nop
 8012e28:	2400d528 	.word	0x2400d528
 8012e2c:	2400d590 	.word	0x2400d590
 8012e30:	2400d5f8 	.word	0x2400d5f8

08012e34 <global_stdio_init.part.0>:
 8012e34:	b510      	push	{r4, lr}
 8012e36:	4b0b      	ldr	r3, [pc, #44]	; (8012e64 <global_stdio_init.part.0+0x30>)
 8012e38:	4c0b      	ldr	r4, [pc, #44]	; (8012e68 <global_stdio_init.part.0+0x34>)
 8012e3a:	4a0c      	ldr	r2, [pc, #48]	; (8012e6c <global_stdio_init.part.0+0x38>)
 8012e3c:	601a      	str	r2, [r3, #0]
 8012e3e:	4620      	mov	r0, r4
 8012e40:	2200      	movs	r2, #0
 8012e42:	2104      	movs	r1, #4
 8012e44:	f7ff ffa6 	bl	8012d94 <std>
 8012e48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	2109      	movs	r1, #9
 8012e50:	f7ff ffa0 	bl	8012d94 <std>
 8012e54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012e58:	2202      	movs	r2, #2
 8012e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e5e:	2112      	movs	r1, #18
 8012e60:	f7ff bf98 	b.w	8012d94 <std>
 8012e64:	2400d660 	.word	0x2400d660
 8012e68:	2400d528 	.word	0x2400d528
 8012e6c:	08012ddd 	.word	0x08012ddd

08012e70 <__sfp_lock_acquire>:
 8012e70:	4801      	ldr	r0, [pc, #4]	; (8012e78 <__sfp_lock_acquire+0x8>)
 8012e72:	f000 b99d 	b.w	80131b0 <__retarget_lock_acquire_recursive>
 8012e76:	bf00      	nop
 8012e78:	2400d669 	.word	0x2400d669

08012e7c <__sfp_lock_release>:
 8012e7c:	4801      	ldr	r0, [pc, #4]	; (8012e84 <__sfp_lock_release+0x8>)
 8012e7e:	f000 b998 	b.w	80131b2 <__retarget_lock_release_recursive>
 8012e82:	bf00      	nop
 8012e84:	2400d669 	.word	0x2400d669

08012e88 <__sinit>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	f7ff fff0 	bl	8012e70 <__sfp_lock_acquire>
 8012e90:	6a23      	ldr	r3, [r4, #32]
 8012e92:	b11b      	cbz	r3, 8012e9c <__sinit+0x14>
 8012e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e98:	f7ff bff0 	b.w	8012e7c <__sfp_lock_release>
 8012e9c:	4b04      	ldr	r3, [pc, #16]	; (8012eb0 <__sinit+0x28>)
 8012e9e:	6223      	str	r3, [r4, #32]
 8012ea0:	4b04      	ldr	r3, [pc, #16]	; (8012eb4 <__sinit+0x2c>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d1f5      	bne.n	8012e94 <__sinit+0xc>
 8012ea8:	f7ff ffc4 	bl	8012e34 <global_stdio_init.part.0>
 8012eac:	e7f2      	b.n	8012e94 <__sinit+0xc>
 8012eae:	bf00      	nop
 8012eb0:	08012df5 	.word	0x08012df5
 8012eb4:	2400d660 	.word	0x2400d660

08012eb8 <fiprintf>:
 8012eb8:	b40e      	push	{r1, r2, r3}
 8012eba:	b503      	push	{r0, r1, lr}
 8012ebc:	4601      	mov	r1, r0
 8012ebe:	ab03      	add	r3, sp, #12
 8012ec0:	4805      	ldr	r0, [pc, #20]	; (8012ed8 <fiprintf+0x20>)
 8012ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ec6:	6800      	ldr	r0, [r0, #0]
 8012ec8:	9301      	str	r3, [sp, #4]
 8012eca:	f001 fd83 	bl	80149d4 <_vfiprintf_r>
 8012ece:	b002      	add	sp, #8
 8012ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ed4:	b003      	add	sp, #12
 8012ed6:	4770      	bx	lr
 8012ed8:	240003ac 	.word	0x240003ac

08012edc <_fwalk_sglue>:
 8012edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	4688      	mov	r8, r1
 8012ee4:	4614      	mov	r4, r2
 8012ee6:	2600      	movs	r6, #0
 8012ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eec:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef0:	d505      	bpl.n	8012efe <_fwalk_sglue+0x22>
 8012ef2:	6824      	ldr	r4, [r4, #0]
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	d1f7      	bne.n	8012ee8 <_fwalk_sglue+0xc>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efe:	89ab      	ldrh	r3, [r5, #12]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d907      	bls.n	8012f14 <_fwalk_sglue+0x38>
 8012f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	d003      	beq.n	8012f14 <_fwalk_sglue+0x38>
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4638      	mov	r0, r7
 8012f10:	47c0      	blx	r8
 8012f12:	4306      	orrs	r6, r0
 8012f14:	3568      	adds	r5, #104	; 0x68
 8012f16:	e7e9      	b.n	8012eec <_fwalk_sglue+0x10>

08012f18 <siprintf>:
 8012f18:	b40e      	push	{r1, r2, r3}
 8012f1a:	b500      	push	{lr}
 8012f1c:	b09c      	sub	sp, #112	; 0x70
 8012f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8012f20:	9002      	str	r0, [sp, #8]
 8012f22:	9006      	str	r0, [sp, #24]
 8012f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f28:	4809      	ldr	r0, [pc, #36]	; (8012f50 <siprintf+0x38>)
 8012f2a:	9107      	str	r1, [sp, #28]
 8012f2c:	9104      	str	r1, [sp, #16]
 8012f2e:	4909      	ldr	r1, [pc, #36]	; (8012f54 <siprintf+0x3c>)
 8012f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f34:	9105      	str	r1, [sp, #20]
 8012f36:	6800      	ldr	r0, [r0, #0]
 8012f38:	9301      	str	r3, [sp, #4]
 8012f3a:	a902      	add	r1, sp, #8
 8012f3c:	f001 fc22 	bl	8014784 <_svfiprintf_r>
 8012f40:	9b02      	ldr	r3, [sp, #8]
 8012f42:	2200      	movs	r2, #0
 8012f44:	701a      	strb	r2, [r3, #0]
 8012f46:	b01c      	add	sp, #112	; 0x70
 8012f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f4c:	b003      	add	sp, #12
 8012f4e:	4770      	bx	lr
 8012f50:	240003ac 	.word	0x240003ac
 8012f54:	ffff0208 	.word	0xffff0208

08012f58 <__sread>:
 8012f58:	b510      	push	{r4, lr}
 8012f5a:	460c      	mov	r4, r1
 8012f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f60:	f000 f8d8 	bl	8013114 <_read_r>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	bfab      	itete	ge
 8012f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8012f6c:	181b      	addge	r3, r3, r0
 8012f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f72:	bfac      	ite	ge
 8012f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f76:	81a3      	strhlt	r3, [r4, #12]
 8012f78:	bd10      	pop	{r4, pc}

08012f7a <__swrite>:
 8012f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7e:	461f      	mov	r7, r3
 8012f80:	898b      	ldrh	r3, [r1, #12]
 8012f82:	05db      	lsls	r3, r3, #23
 8012f84:	4605      	mov	r5, r0
 8012f86:	460c      	mov	r4, r1
 8012f88:	4616      	mov	r6, r2
 8012f8a:	d505      	bpl.n	8012f98 <__swrite+0x1e>
 8012f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f90:	2302      	movs	r3, #2
 8012f92:	2200      	movs	r2, #0
 8012f94:	f000 f8ac 	bl	80130f0 <_lseek_r>
 8012f98:	89a3      	ldrh	r3, [r4, #12]
 8012f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fa2:	81a3      	strh	r3, [r4, #12]
 8012fa4:	4632      	mov	r2, r6
 8012fa6:	463b      	mov	r3, r7
 8012fa8:	4628      	mov	r0, r5
 8012faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fae:	f000 b8c3 	b.w	8013138 <_write_r>

08012fb2 <__sseek>:
 8012fb2:	b510      	push	{r4, lr}
 8012fb4:	460c      	mov	r4, r1
 8012fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fba:	f000 f899 	bl	80130f0 <_lseek_r>
 8012fbe:	1c43      	adds	r3, r0, #1
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	bf15      	itete	ne
 8012fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fce:	81a3      	strheq	r3, [r4, #12]
 8012fd0:	bf18      	it	ne
 8012fd2:	81a3      	strhne	r3, [r4, #12]
 8012fd4:	bd10      	pop	{r4, pc}

08012fd6 <__sclose>:
 8012fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fda:	f000 b879 	b.w	80130d0 <_close_r>

08012fde <memset>:
 8012fde:	4402      	add	r2, r0
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d100      	bne.n	8012fe8 <memset+0xa>
 8012fe6:	4770      	bx	lr
 8012fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8012fec:	e7f9      	b.n	8012fe2 <memset+0x4>

08012fee <strcspn>:
 8012fee:	b570      	push	{r4, r5, r6, lr}
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	461e      	mov	r6, r3
 8012ff4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012ff8:	b144      	cbz	r4, 801300c <strcspn+0x1e>
 8012ffa:	1e4a      	subs	r2, r1, #1
 8012ffc:	e001      	b.n	8013002 <strcspn+0x14>
 8012ffe:	42a5      	cmp	r5, r4
 8013000:	d004      	beq.n	801300c <strcspn+0x1e>
 8013002:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8013006:	2d00      	cmp	r5, #0
 8013008:	d1f9      	bne.n	8012ffe <strcspn+0x10>
 801300a:	e7f2      	b.n	8012ff2 <strcspn+0x4>
 801300c:	1a30      	subs	r0, r6, r0
 801300e:	bd70      	pop	{r4, r5, r6, pc}

08013010 <strtok>:
 8013010:	4b16      	ldr	r3, [pc, #88]	; (801306c <strtok+0x5c>)
 8013012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013014:	681e      	ldr	r6, [r3, #0]
 8013016:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8013018:	4605      	mov	r5, r0
 801301a:	b9fc      	cbnz	r4, 801305c <strtok+0x4c>
 801301c:	2050      	movs	r0, #80	; 0x50
 801301e:	9101      	str	r1, [sp, #4]
 8013020:	f000 ff26 	bl	8013e70 <malloc>
 8013024:	9901      	ldr	r1, [sp, #4]
 8013026:	6470      	str	r0, [r6, #68]	; 0x44
 8013028:	4602      	mov	r2, r0
 801302a:	b920      	cbnz	r0, 8013036 <strtok+0x26>
 801302c:	4b10      	ldr	r3, [pc, #64]	; (8013070 <strtok+0x60>)
 801302e:	4811      	ldr	r0, [pc, #68]	; (8013074 <strtok+0x64>)
 8013030:	215b      	movs	r1, #91	; 0x5b
 8013032:	f7ff f989 	bl	8012348 <__assert_func>
 8013036:	e9c0 4400 	strd	r4, r4, [r0]
 801303a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801303e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013042:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013046:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801304a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801304e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013052:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013056:	6184      	str	r4, [r0, #24]
 8013058:	7704      	strb	r4, [r0, #28]
 801305a:	6244      	str	r4, [r0, #36]	; 0x24
 801305c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801305e:	2301      	movs	r3, #1
 8013060:	4628      	mov	r0, r5
 8013062:	b002      	add	sp, #8
 8013064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013068:	f000 b806 	b.w	8013078 <__strtok_r>
 801306c:	240003ac 	.word	0x240003ac
 8013070:	080198a4 	.word	0x080198a4
 8013074:	08019a48 	.word	0x08019a48

08013078 <__strtok_r>:
 8013078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801307a:	b908      	cbnz	r0, 8013080 <__strtok_r+0x8>
 801307c:	6810      	ldr	r0, [r2, #0]
 801307e:	b188      	cbz	r0, 80130a4 <__strtok_r+0x2c>
 8013080:	4604      	mov	r4, r0
 8013082:	4620      	mov	r0, r4
 8013084:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013088:	460f      	mov	r7, r1
 801308a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801308e:	b91e      	cbnz	r6, 8013098 <__strtok_r+0x20>
 8013090:	b965      	cbnz	r5, 80130ac <__strtok_r+0x34>
 8013092:	6015      	str	r5, [r2, #0]
 8013094:	4628      	mov	r0, r5
 8013096:	e005      	b.n	80130a4 <__strtok_r+0x2c>
 8013098:	42b5      	cmp	r5, r6
 801309a:	d1f6      	bne.n	801308a <__strtok_r+0x12>
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1f0      	bne.n	8013082 <__strtok_r+0xa>
 80130a0:	6014      	str	r4, [r2, #0]
 80130a2:	7003      	strb	r3, [r0, #0]
 80130a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130a6:	461c      	mov	r4, r3
 80130a8:	e00c      	b.n	80130c4 <__strtok_r+0x4c>
 80130aa:	b915      	cbnz	r5, 80130b2 <__strtok_r+0x3a>
 80130ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130b0:	460e      	mov	r6, r1
 80130b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80130b6:	42ab      	cmp	r3, r5
 80130b8:	d1f7      	bne.n	80130aa <__strtok_r+0x32>
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d0f3      	beq.n	80130a6 <__strtok_r+0x2e>
 80130be:	2300      	movs	r3, #0
 80130c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80130c4:	6014      	str	r4, [r2, #0]
 80130c6:	e7ed      	b.n	80130a4 <__strtok_r+0x2c>

080130c8 <_localeconv_r>:
 80130c8:	4800      	ldr	r0, [pc, #0]	; (80130cc <_localeconv_r+0x4>)
 80130ca:	4770      	bx	lr
 80130cc:	240004a0 	.word	0x240004a0

080130d0 <_close_r>:
 80130d0:	b538      	push	{r3, r4, r5, lr}
 80130d2:	4d06      	ldr	r5, [pc, #24]	; (80130ec <_close_r+0x1c>)
 80130d4:	2300      	movs	r3, #0
 80130d6:	4604      	mov	r4, r0
 80130d8:	4608      	mov	r0, r1
 80130da:	602b      	str	r3, [r5, #0]
 80130dc:	f7f4 f8ec 	bl	80072b8 <_close>
 80130e0:	1c43      	adds	r3, r0, #1
 80130e2:	d102      	bne.n	80130ea <_close_r+0x1a>
 80130e4:	682b      	ldr	r3, [r5, #0]
 80130e6:	b103      	cbz	r3, 80130ea <_close_r+0x1a>
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	bd38      	pop	{r3, r4, r5, pc}
 80130ec:	2400d664 	.word	0x2400d664

080130f0 <_lseek_r>:
 80130f0:	b538      	push	{r3, r4, r5, lr}
 80130f2:	4d07      	ldr	r5, [pc, #28]	; (8013110 <_lseek_r+0x20>)
 80130f4:	4604      	mov	r4, r0
 80130f6:	4608      	mov	r0, r1
 80130f8:	4611      	mov	r1, r2
 80130fa:	2200      	movs	r2, #0
 80130fc:	602a      	str	r2, [r5, #0]
 80130fe:	461a      	mov	r2, r3
 8013100:	f7f4 f8e6 	bl	80072d0 <_lseek>
 8013104:	1c43      	adds	r3, r0, #1
 8013106:	d102      	bne.n	801310e <_lseek_r+0x1e>
 8013108:	682b      	ldr	r3, [r5, #0]
 801310a:	b103      	cbz	r3, 801310e <_lseek_r+0x1e>
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	bd38      	pop	{r3, r4, r5, pc}
 8013110:	2400d664 	.word	0x2400d664

08013114 <_read_r>:
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	4d07      	ldr	r5, [pc, #28]	; (8013134 <_read_r+0x20>)
 8013118:	4604      	mov	r4, r0
 801311a:	4608      	mov	r0, r1
 801311c:	4611      	mov	r1, r2
 801311e:	2200      	movs	r2, #0
 8013120:	602a      	str	r2, [r5, #0]
 8013122:	461a      	mov	r2, r3
 8013124:	f7f4 f8ac 	bl	8007280 <_read>
 8013128:	1c43      	adds	r3, r0, #1
 801312a:	d102      	bne.n	8013132 <_read_r+0x1e>
 801312c:	682b      	ldr	r3, [r5, #0]
 801312e:	b103      	cbz	r3, 8013132 <_read_r+0x1e>
 8013130:	6023      	str	r3, [r4, #0]
 8013132:	bd38      	pop	{r3, r4, r5, pc}
 8013134:	2400d664 	.word	0x2400d664

08013138 <_write_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4d07      	ldr	r5, [pc, #28]	; (8013158 <_write_r+0x20>)
 801313c:	4604      	mov	r4, r0
 801313e:	4608      	mov	r0, r1
 8013140:	4611      	mov	r1, r2
 8013142:	2200      	movs	r2, #0
 8013144:	602a      	str	r2, [r5, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	f7f4 f8a8 	bl	800729c <_write>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	d102      	bne.n	8013156 <_write_r+0x1e>
 8013150:	682b      	ldr	r3, [r5, #0]
 8013152:	b103      	cbz	r3, 8013156 <_write_r+0x1e>
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	bd38      	pop	{r3, r4, r5, pc}
 8013158:	2400d664 	.word	0x2400d664

0801315c <__errno>:
 801315c:	4b01      	ldr	r3, [pc, #4]	; (8013164 <__errno+0x8>)
 801315e:	6818      	ldr	r0, [r3, #0]
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	240003ac 	.word	0x240003ac

08013168 <__libc_init_array>:
 8013168:	b570      	push	{r4, r5, r6, lr}
 801316a:	4d0d      	ldr	r5, [pc, #52]	; (80131a0 <__libc_init_array+0x38>)
 801316c:	4c0d      	ldr	r4, [pc, #52]	; (80131a4 <__libc_init_array+0x3c>)
 801316e:	1b64      	subs	r4, r4, r5
 8013170:	10a4      	asrs	r4, r4, #2
 8013172:	2600      	movs	r6, #0
 8013174:	42a6      	cmp	r6, r4
 8013176:	d109      	bne.n	801318c <__libc_init_array+0x24>
 8013178:	4d0b      	ldr	r5, [pc, #44]	; (80131a8 <__libc_init_array+0x40>)
 801317a:	4c0c      	ldr	r4, [pc, #48]	; (80131ac <__libc_init_array+0x44>)
 801317c:	f003 f908 	bl	8016390 <_init>
 8013180:	1b64      	subs	r4, r4, r5
 8013182:	10a4      	asrs	r4, r4, #2
 8013184:	2600      	movs	r6, #0
 8013186:	42a6      	cmp	r6, r4
 8013188:	d105      	bne.n	8013196 <__libc_init_array+0x2e>
 801318a:	bd70      	pop	{r4, r5, r6, pc}
 801318c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013190:	4798      	blx	r3
 8013192:	3601      	adds	r6, #1
 8013194:	e7ee      	b.n	8013174 <__libc_init_array+0xc>
 8013196:	f855 3b04 	ldr.w	r3, [r5], #4
 801319a:	4798      	blx	r3
 801319c:	3601      	adds	r6, #1
 801319e:	e7f2      	b.n	8013186 <__libc_init_array+0x1e>
 80131a0:	0801af70 	.word	0x0801af70
 80131a4:	0801af70 	.word	0x0801af70
 80131a8:	0801af70 	.word	0x0801af70
 80131ac:	0801af74 	.word	0x0801af74

080131b0 <__retarget_lock_acquire_recursive>:
 80131b0:	4770      	bx	lr

080131b2 <__retarget_lock_release_recursive>:
 80131b2:	4770      	bx	lr

080131b4 <strcpy>:
 80131b4:	4603      	mov	r3, r0
 80131b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131ba:	f803 2b01 	strb.w	r2, [r3], #1
 80131be:	2a00      	cmp	r2, #0
 80131c0:	d1f9      	bne.n	80131b6 <strcpy+0x2>
 80131c2:	4770      	bx	lr

080131c4 <memcpy>:
 80131c4:	440a      	add	r2, r1
 80131c6:	4291      	cmp	r1, r2
 80131c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80131cc:	d100      	bne.n	80131d0 <memcpy+0xc>
 80131ce:	4770      	bx	lr
 80131d0:	b510      	push	{r4, lr}
 80131d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131da:	4291      	cmp	r1, r2
 80131dc:	d1f9      	bne.n	80131d2 <memcpy+0xe>
 80131de:	bd10      	pop	{r4, pc}

080131e0 <abort>:
 80131e0:	b508      	push	{r3, lr}
 80131e2:	2006      	movs	r0, #6
 80131e4:	f001 fe96 	bl	8014f14 <raise>
 80131e8:	2001      	movs	r0, #1
 80131ea:	f7f4 f843 	bl	8007274 <_exit>

080131ee <quorem>:
 80131ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f2:	6903      	ldr	r3, [r0, #16]
 80131f4:	690c      	ldr	r4, [r1, #16]
 80131f6:	42a3      	cmp	r3, r4
 80131f8:	4607      	mov	r7, r0
 80131fa:	db7e      	blt.n	80132fa <quorem+0x10c>
 80131fc:	3c01      	subs	r4, #1
 80131fe:	f101 0814 	add.w	r8, r1, #20
 8013202:	f100 0514 	add.w	r5, r0, #20
 8013206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801320a:	9301      	str	r3, [sp, #4]
 801320c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013214:	3301      	adds	r3, #1
 8013216:	429a      	cmp	r2, r3
 8013218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801321c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013220:	fbb2 f6f3 	udiv	r6, r2, r3
 8013224:	d331      	bcc.n	801328a <quorem+0x9c>
 8013226:	f04f 0e00 	mov.w	lr, #0
 801322a:	4640      	mov	r0, r8
 801322c:	46ac      	mov	ip, r5
 801322e:	46f2      	mov	sl, lr
 8013230:	f850 2b04 	ldr.w	r2, [r0], #4
 8013234:	b293      	uxth	r3, r2
 8013236:	fb06 e303 	mla	r3, r6, r3, lr
 801323a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801323e:	0c1a      	lsrs	r2, r3, #16
 8013240:	b29b      	uxth	r3, r3
 8013242:	ebaa 0303 	sub.w	r3, sl, r3
 8013246:	f8dc a000 	ldr.w	sl, [ip]
 801324a:	fa13 f38a 	uxtah	r3, r3, sl
 801324e:	fb06 220e 	mla	r2, r6, lr, r2
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	9b00      	ldr	r3, [sp, #0]
 8013256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801325a:	b292      	uxth	r2, r2
 801325c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013264:	f8bd 3000 	ldrh.w	r3, [sp]
 8013268:	4581      	cmp	r9, r0
 801326a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801326e:	f84c 3b04 	str.w	r3, [ip], #4
 8013272:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013276:	d2db      	bcs.n	8013230 <quorem+0x42>
 8013278:	f855 300b 	ldr.w	r3, [r5, fp]
 801327c:	b92b      	cbnz	r3, 801328a <quorem+0x9c>
 801327e:	9b01      	ldr	r3, [sp, #4]
 8013280:	3b04      	subs	r3, #4
 8013282:	429d      	cmp	r5, r3
 8013284:	461a      	mov	r2, r3
 8013286:	d32c      	bcc.n	80132e2 <quorem+0xf4>
 8013288:	613c      	str	r4, [r7, #16]
 801328a:	4638      	mov	r0, r7
 801328c:	f001 f920 	bl	80144d0 <__mcmp>
 8013290:	2800      	cmp	r0, #0
 8013292:	db22      	blt.n	80132da <quorem+0xec>
 8013294:	3601      	adds	r6, #1
 8013296:	4629      	mov	r1, r5
 8013298:	2000      	movs	r0, #0
 801329a:	f858 2b04 	ldr.w	r2, [r8], #4
 801329e:	f8d1 c000 	ldr.w	ip, [r1]
 80132a2:	b293      	uxth	r3, r2
 80132a4:	1ac3      	subs	r3, r0, r3
 80132a6:	0c12      	lsrs	r2, r2, #16
 80132a8:	fa13 f38c 	uxtah	r3, r3, ip
 80132ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80132b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132ba:	45c1      	cmp	r9, r8
 80132bc:	f841 3b04 	str.w	r3, [r1], #4
 80132c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80132c4:	d2e9      	bcs.n	801329a <quorem+0xac>
 80132c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132ce:	b922      	cbnz	r2, 80132da <quorem+0xec>
 80132d0:	3b04      	subs	r3, #4
 80132d2:	429d      	cmp	r5, r3
 80132d4:	461a      	mov	r2, r3
 80132d6:	d30a      	bcc.n	80132ee <quorem+0x100>
 80132d8:	613c      	str	r4, [r7, #16]
 80132da:	4630      	mov	r0, r6
 80132dc:	b003      	add	sp, #12
 80132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e2:	6812      	ldr	r2, [r2, #0]
 80132e4:	3b04      	subs	r3, #4
 80132e6:	2a00      	cmp	r2, #0
 80132e8:	d1ce      	bne.n	8013288 <quorem+0x9a>
 80132ea:	3c01      	subs	r4, #1
 80132ec:	e7c9      	b.n	8013282 <quorem+0x94>
 80132ee:	6812      	ldr	r2, [r2, #0]
 80132f0:	3b04      	subs	r3, #4
 80132f2:	2a00      	cmp	r2, #0
 80132f4:	d1f0      	bne.n	80132d8 <quorem+0xea>
 80132f6:	3c01      	subs	r4, #1
 80132f8:	e7eb      	b.n	80132d2 <quorem+0xe4>
 80132fa:	2000      	movs	r0, #0
 80132fc:	e7ee      	b.n	80132dc <quorem+0xee>
	...

08013300 <_dtoa_r>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	ed2d 8b02 	vpush	{d8}
 8013308:	69c5      	ldr	r5, [r0, #28]
 801330a:	b091      	sub	sp, #68	; 0x44
 801330c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013310:	ec59 8b10 	vmov	r8, r9, d0
 8013314:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013316:	9106      	str	r1, [sp, #24]
 8013318:	4606      	mov	r6, r0
 801331a:	9208      	str	r2, [sp, #32]
 801331c:	930c      	str	r3, [sp, #48]	; 0x30
 801331e:	b975      	cbnz	r5, 801333e <_dtoa_r+0x3e>
 8013320:	2010      	movs	r0, #16
 8013322:	f000 fda5 	bl	8013e70 <malloc>
 8013326:	4602      	mov	r2, r0
 8013328:	61f0      	str	r0, [r6, #28]
 801332a:	b920      	cbnz	r0, 8013336 <_dtoa_r+0x36>
 801332c:	4ba6      	ldr	r3, [pc, #664]	; (80135c8 <_dtoa_r+0x2c8>)
 801332e:	21ef      	movs	r1, #239	; 0xef
 8013330:	48a6      	ldr	r0, [pc, #664]	; (80135cc <_dtoa_r+0x2cc>)
 8013332:	f7ff f809 	bl	8012348 <__assert_func>
 8013336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801333a:	6005      	str	r5, [r0, #0]
 801333c:	60c5      	str	r5, [r0, #12]
 801333e:	69f3      	ldr	r3, [r6, #28]
 8013340:	6819      	ldr	r1, [r3, #0]
 8013342:	b151      	cbz	r1, 801335a <_dtoa_r+0x5a>
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	604a      	str	r2, [r1, #4]
 8013348:	2301      	movs	r3, #1
 801334a:	4093      	lsls	r3, r2
 801334c:	608b      	str	r3, [r1, #8]
 801334e:	4630      	mov	r0, r6
 8013350:	f000 fe82 	bl	8014058 <_Bfree>
 8013354:	69f3      	ldr	r3, [r6, #28]
 8013356:	2200      	movs	r2, #0
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	f1b9 0300 	subs.w	r3, r9, #0
 801335e:	bfbb      	ittet	lt
 8013360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013364:	9303      	strlt	r3, [sp, #12]
 8013366:	2300      	movge	r3, #0
 8013368:	2201      	movlt	r2, #1
 801336a:	bfac      	ite	ge
 801336c:	6023      	strge	r3, [r4, #0]
 801336e:	6022      	strlt	r2, [r4, #0]
 8013370:	4b97      	ldr	r3, [pc, #604]	; (80135d0 <_dtoa_r+0x2d0>)
 8013372:	9c03      	ldr	r4, [sp, #12]
 8013374:	43a3      	bics	r3, r4
 8013376:	d11c      	bne.n	80133b2 <_dtoa_r+0xb2>
 8013378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801337a:	f242 730f 	movw	r3, #9999	; 0x270f
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013384:	ea53 0308 	orrs.w	r3, r3, r8
 8013388:	f000 84fb 	beq.w	8013d82 <_dtoa_r+0xa82>
 801338c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801338e:	b963      	cbnz	r3, 80133aa <_dtoa_r+0xaa>
 8013390:	4b90      	ldr	r3, [pc, #576]	; (80135d4 <_dtoa_r+0x2d4>)
 8013392:	e020      	b.n	80133d6 <_dtoa_r+0xd6>
 8013394:	4b90      	ldr	r3, [pc, #576]	; (80135d8 <_dtoa_r+0x2d8>)
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	3308      	adds	r3, #8
 801339a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	9801      	ldr	r0, [sp, #4]
 80133a0:	b011      	add	sp, #68	; 0x44
 80133a2:	ecbd 8b02 	vpop	{d8}
 80133a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133aa:	4b8a      	ldr	r3, [pc, #552]	; (80135d4 <_dtoa_r+0x2d4>)
 80133ac:	9301      	str	r3, [sp, #4]
 80133ae:	3303      	adds	r3, #3
 80133b0:	e7f3      	b.n	801339a <_dtoa_r+0x9a>
 80133b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80133b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80133ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133be:	d10c      	bne.n	80133da <_dtoa_r+0xda>
 80133c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133c2:	2301      	movs	r3, #1
 80133c4:	6013      	str	r3, [r2, #0]
 80133c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 84d7 	beq.w	8013d7c <_dtoa_r+0xa7c>
 80133ce:	4b83      	ldr	r3, [pc, #524]	; (80135dc <_dtoa_r+0x2dc>)
 80133d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80133d2:	6013      	str	r3, [r2, #0]
 80133d4:	3b01      	subs	r3, #1
 80133d6:	9301      	str	r3, [sp, #4]
 80133d8:	e7e1      	b.n	801339e <_dtoa_r+0x9e>
 80133da:	aa0e      	add	r2, sp, #56	; 0x38
 80133dc:	a90f      	add	r1, sp, #60	; 0x3c
 80133de:	4630      	mov	r0, r6
 80133e0:	eeb0 0b48 	vmov.f64	d0, d8
 80133e4:	f001 f91a 	bl	801461c <__d2b>
 80133e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80133ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133ee:	4605      	mov	r5, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d046      	beq.n	8013482 <_dtoa_r+0x182>
 80133f4:	eeb0 7b48 	vmov.f64	d7, d8
 80133f8:	ee18 1a90 	vmov	r1, s17
 80133fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013400:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8013404:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013408:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801340c:	2000      	movs	r0, #0
 801340e:	ee07 1a90 	vmov	s15, r1
 8013412:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8013416:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80135b0 <_dtoa_r+0x2b0>
 801341a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801341e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80135b8 <_dtoa_r+0x2b8>
 8013422:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013426:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80135c0 <_dtoa_r+0x2c0>
 801342a:	ee07 3a90 	vmov	s15, r3
 801342e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013432:	eeb0 7b46 	vmov.f64	d7, d6
 8013436:	eea4 7b05 	vfma.f64	d7, d4, d5
 801343a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801343e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013446:	ee16 ba90 	vmov	fp, s13
 801344a:	9009      	str	r0, [sp, #36]	; 0x24
 801344c:	d508      	bpl.n	8013460 <_dtoa_r+0x160>
 801344e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013452:	eeb4 6b47 	vcmp.f64	d6, d7
 8013456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345a:	bf18      	it	ne
 801345c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013460:	f1bb 0f16 	cmp.w	fp, #22
 8013464:	d82b      	bhi.n	80134be <_dtoa_r+0x1be>
 8013466:	495e      	ldr	r1, [pc, #376]	; (80135e0 <_dtoa_r+0x2e0>)
 8013468:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801346c:	ed91 7b00 	vldr	d7, [r1]
 8013470:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013478:	d501      	bpl.n	801347e <_dtoa_r+0x17e>
 801347a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801347e:	2100      	movs	r1, #0
 8013480:	e01e      	b.n	80134c0 <_dtoa_r+0x1c0>
 8013482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013484:	4413      	add	r3, r2
 8013486:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801348a:	2920      	cmp	r1, #32
 801348c:	bfc1      	itttt	gt
 801348e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8013492:	408c      	lslgt	r4, r1
 8013494:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8013498:	fa28 f101 	lsrgt.w	r1, r8, r1
 801349c:	bfd6      	itet	le
 801349e:	f1c1 0120 	rsble	r1, r1, #32
 80134a2:	4321      	orrgt	r1, r4
 80134a4:	fa08 f101 	lslle.w	r1, r8, r1
 80134a8:	ee07 1a90 	vmov	s15, r1
 80134ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80134b0:	3b01      	subs	r3, #1
 80134b2:	ee17 1a90 	vmov	r1, s15
 80134b6:	2001      	movs	r0, #1
 80134b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80134bc:	e7a7      	b.n	801340e <_dtoa_r+0x10e>
 80134be:	2101      	movs	r1, #1
 80134c0:	1ad2      	subs	r2, r2, r3
 80134c2:	1e53      	subs	r3, r2, #1
 80134c4:	9305      	str	r3, [sp, #20]
 80134c6:	bf45      	ittet	mi
 80134c8:	f1c2 0301 	rsbmi	r3, r2, #1
 80134cc:	9304      	strmi	r3, [sp, #16]
 80134ce:	2300      	movpl	r3, #0
 80134d0:	2300      	movmi	r3, #0
 80134d2:	bf4c      	ite	mi
 80134d4:	9305      	strmi	r3, [sp, #20]
 80134d6:	9304      	strpl	r3, [sp, #16]
 80134d8:	f1bb 0f00 	cmp.w	fp, #0
 80134dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80134de:	db18      	blt.n	8013512 <_dtoa_r+0x212>
 80134e0:	9b05      	ldr	r3, [sp, #20]
 80134e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80134e6:	445b      	add	r3, fp
 80134e8:	9305      	str	r3, [sp, #20]
 80134ea:	2300      	movs	r3, #0
 80134ec:	9a06      	ldr	r2, [sp, #24]
 80134ee:	2a09      	cmp	r2, #9
 80134f0:	d848      	bhi.n	8013584 <_dtoa_r+0x284>
 80134f2:	2a05      	cmp	r2, #5
 80134f4:	bfc4      	itt	gt
 80134f6:	3a04      	subgt	r2, #4
 80134f8:	9206      	strgt	r2, [sp, #24]
 80134fa:	9a06      	ldr	r2, [sp, #24]
 80134fc:	f1a2 0202 	sub.w	r2, r2, #2
 8013500:	bfcc      	ite	gt
 8013502:	2400      	movgt	r4, #0
 8013504:	2401      	movle	r4, #1
 8013506:	2a03      	cmp	r2, #3
 8013508:	d847      	bhi.n	801359a <_dtoa_r+0x29a>
 801350a:	e8df f002 	tbb	[pc, r2]
 801350e:	2d0b      	.short	0x2d0b
 8013510:	392b      	.short	0x392b
 8013512:	9b04      	ldr	r3, [sp, #16]
 8013514:	2200      	movs	r2, #0
 8013516:	eba3 030b 	sub.w	r3, r3, fp
 801351a:	9304      	str	r3, [sp, #16]
 801351c:	920a      	str	r2, [sp, #40]	; 0x28
 801351e:	f1cb 0300 	rsb	r3, fp, #0
 8013522:	e7e3      	b.n	80134ec <_dtoa_r+0x1ec>
 8013524:	2200      	movs	r2, #0
 8013526:	9207      	str	r2, [sp, #28]
 8013528:	9a08      	ldr	r2, [sp, #32]
 801352a:	2a00      	cmp	r2, #0
 801352c:	dc38      	bgt.n	80135a0 <_dtoa_r+0x2a0>
 801352e:	f04f 0a01 	mov.w	sl, #1
 8013532:	46d1      	mov	r9, sl
 8013534:	4652      	mov	r2, sl
 8013536:	f8cd a020 	str.w	sl, [sp, #32]
 801353a:	69f7      	ldr	r7, [r6, #28]
 801353c:	2100      	movs	r1, #0
 801353e:	2004      	movs	r0, #4
 8013540:	f100 0c14 	add.w	ip, r0, #20
 8013544:	4594      	cmp	ip, r2
 8013546:	d930      	bls.n	80135aa <_dtoa_r+0x2aa>
 8013548:	6079      	str	r1, [r7, #4]
 801354a:	4630      	mov	r0, r6
 801354c:	930d      	str	r3, [sp, #52]	; 0x34
 801354e:	f000 fd43 	bl	8013fd8 <_Balloc>
 8013552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013554:	9001      	str	r0, [sp, #4]
 8013556:	4602      	mov	r2, r0
 8013558:	2800      	cmp	r0, #0
 801355a:	d145      	bne.n	80135e8 <_dtoa_r+0x2e8>
 801355c:	4b21      	ldr	r3, [pc, #132]	; (80135e4 <_dtoa_r+0x2e4>)
 801355e:	f240 11af 	movw	r1, #431	; 0x1af
 8013562:	e6e5      	b.n	8013330 <_dtoa_r+0x30>
 8013564:	2201      	movs	r2, #1
 8013566:	e7de      	b.n	8013526 <_dtoa_r+0x226>
 8013568:	2200      	movs	r2, #0
 801356a:	9207      	str	r2, [sp, #28]
 801356c:	9a08      	ldr	r2, [sp, #32]
 801356e:	eb0b 0a02 	add.w	sl, fp, r2
 8013572:	f10a 0901 	add.w	r9, sl, #1
 8013576:	464a      	mov	r2, r9
 8013578:	2a01      	cmp	r2, #1
 801357a:	bfb8      	it	lt
 801357c:	2201      	movlt	r2, #1
 801357e:	e7dc      	b.n	801353a <_dtoa_r+0x23a>
 8013580:	2201      	movs	r2, #1
 8013582:	e7f2      	b.n	801356a <_dtoa_r+0x26a>
 8013584:	2401      	movs	r4, #1
 8013586:	2200      	movs	r2, #0
 8013588:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801358c:	f04f 3aff 	mov.w	sl, #4294967295
 8013590:	2100      	movs	r1, #0
 8013592:	46d1      	mov	r9, sl
 8013594:	2212      	movs	r2, #18
 8013596:	9108      	str	r1, [sp, #32]
 8013598:	e7cf      	b.n	801353a <_dtoa_r+0x23a>
 801359a:	2201      	movs	r2, #1
 801359c:	9207      	str	r2, [sp, #28]
 801359e:	e7f5      	b.n	801358c <_dtoa_r+0x28c>
 80135a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80135a4:	46d1      	mov	r9, sl
 80135a6:	4652      	mov	r2, sl
 80135a8:	e7c7      	b.n	801353a <_dtoa_r+0x23a>
 80135aa:	3101      	adds	r1, #1
 80135ac:	0040      	lsls	r0, r0, #1
 80135ae:	e7c7      	b.n	8013540 <_dtoa_r+0x240>
 80135b0:	636f4361 	.word	0x636f4361
 80135b4:	3fd287a7 	.word	0x3fd287a7
 80135b8:	8b60c8b3 	.word	0x8b60c8b3
 80135bc:	3fc68a28 	.word	0x3fc68a28
 80135c0:	509f79fb 	.word	0x509f79fb
 80135c4:	3fd34413 	.word	0x3fd34413
 80135c8:	080198a4 	.word	0x080198a4
 80135cc:	08019aaf 	.word	0x08019aaf
 80135d0:	7ff00000 	.word	0x7ff00000
 80135d4:	08019aab 	.word	0x08019aab
 80135d8:	08019aa2 	.word	0x08019aa2
 80135dc:	08019a25 	.word	0x08019a25
 80135e0:	08019ba0 	.word	0x08019ba0
 80135e4:	08019b07 	.word	0x08019b07
 80135e8:	69f2      	ldr	r2, [r6, #28]
 80135ea:	9901      	ldr	r1, [sp, #4]
 80135ec:	6011      	str	r1, [r2, #0]
 80135ee:	f1b9 0f0e 	cmp.w	r9, #14
 80135f2:	d86c      	bhi.n	80136ce <_dtoa_r+0x3ce>
 80135f4:	2c00      	cmp	r4, #0
 80135f6:	d06a      	beq.n	80136ce <_dtoa_r+0x3ce>
 80135f8:	f1bb 0f00 	cmp.w	fp, #0
 80135fc:	f340 80a0 	ble.w	8013740 <_dtoa_r+0x440>
 8013600:	4ac1      	ldr	r2, [pc, #772]	; (8013908 <_dtoa_r+0x608>)
 8013602:	f00b 010f 	and.w	r1, fp, #15
 8013606:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801360a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801360e:	ed92 7b00 	vldr	d7, [r2]
 8013612:	ea4f 122b 	mov.w	r2, fp, asr #4
 8013616:	f000 8087 	beq.w	8013728 <_dtoa_r+0x428>
 801361a:	49bc      	ldr	r1, [pc, #752]	; (801390c <_dtoa_r+0x60c>)
 801361c:	ed91 6b08 	vldr	d6, [r1, #32]
 8013620:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013624:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013628:	f002 020f 	and.w	r2, r2, #15
 801362c:	2103      	movs	r1, #3
 801362e:	48b7      	ldr	r0, [pc, #732]	; (801390c <_dtoa_r+0x60c>)
 8013630:	2a00      	cmp	r2, #0
 8013632:	d17b      	bne.n	801372c <_dtoa_r+0x42c>
 8013634:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013638:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801363c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013646:	2a00      	cmp	r2, #0
 8013648:	f000 80a0 	beq.w	801378c <_dtoa_r+0x48c>
 801364c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013650:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013658:	f140 8098 	bpl.w	801378c <_dtoa_r+0x48c>
 801365c:	f1b9 0f00 	cmp.w	r9, #0
 8013660:	f000 8094 	beq.w	801378c <_dtoa_r+0x48c>
 8013664:	f1ba 0f00 	cmp.w	sl, #0
 8013668:	dd2f      	ble.n	80136ca <_dtoa_r+0x3ca>
 801366a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801366e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013676:	f10b 32ff 	add.w	r2, fp, #4294967295
 801367a:	3101      	adds	r1, #1
 801367c:	4654      	mov	r4, sl
 801367e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013682:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013686:	ee07 1a90 	vmov	s15, r1
 801368a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801368e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013692:	ee15 7a90 	vmov	r7, s11
 8013696:	ec51 0b15 	vmov	r0, r1, d5
 801369a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801369e:	2c00      	cmp	r4, #0
 80136a0:	d177      	bne.n	8013792 <_dtoa_r+0x492>
 80136a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80136a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80136aa:	ec41 0b17 	vmov	d7, r0, r1
 80136ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b6:	f300 826a 	bgt.w	8013b8e <_dtoa_r+0x88e>
 80136ba:	eeb1 7b47 	vneg.f64	d7, d7
 80136be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c6:	f100 8260 	bmi.w	8013b8a <_dtoa_r+0x88a>
 80136ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80136ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	f2c0 811d 	blt.w	8013910 <_dtoa_r+0x610>
 80136d6:	f1bb 0f0e 	cmp.w	fp, #14
 80136da:	f300 8119 	bgt.w	8013910 <_dtoa_r+0x610>
 80136de:	4b8a      	ldr	r3, [pc, #552]	; (8013908 <_dtoa_r+0x608>)
 80136e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136e4:	ed93 6b00 	vldr	d6, [r3]
 80136e8:	9b08      	ldr	r3, [sp, #32]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f280 80b7 	bge.w	801385e <_dtoa_r+0x55e>
 80136f0:	f1b9 0f00 	cmp.w	r9, #0
 80136f4:	f300 80b3 	bgt.w	801385e <_dtoa_r+0x55e>
 80136f8:	f040 8246 	bne.w	8013b88 <_dtoa_r+0x888>
 80136fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013700:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013704:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013710:	464c      	mov	r4, r9
 8013712:	464f      	mov	r7, r9
 8013714:	f280 821c 	bge.w	8013b50 <_dtoa_r+0x850>
 8013718:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801371c:	2331      	movs	r3, #49	; 0x31
 801371e:	f808 3b01 	strb.w	r3, [r8], #1
 8013722:	f10b 0b01 	add.w	fp, fp, #1
 8013726:	e218      	b.n	8013b5a <_dtoa_r+0x85a>
 8013728:	2102      	movs	r1, #2
 801372a:	e780      	b.n	801362e <_dtoa_r+0x32e>
 801372c:	07d4      	lsls	r4, r2, #31
 801372e:	d504      	bpl.n	801373a <_dtoa_r+0x43a>
 8013730:	ed90 6b00 	vldr	d6, [r0]
 8013734:	3101      	adds	r1, #1
 8013736:	ee27 7b06 	vmul.f64	d7, d7, d6
 801373a:	1052      	asrs	r2, r2, #1
 801373c:	3008      	adds	r0, #8
 801373e:	e777      	b.n	8013630 <_dtoa_r+0x330>
 8013740:	d022      	beq.n	8013788 <_dtoa_r+0x488>
 8013742:	f1cb 0200 	rsb	r2, fp, #0
 8013746:	4970      	ldr	r1, [pc, #448]	; (8013908 <_dtoa_r+0x608>)
 8013748:	f002 000f 	and.w	r0, r2, #15
 801374c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013750:	ed91 7b00 	vldr	d7, [r1]
 8013754:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013758:	ed8d 7b02 	vstr	d7, [sp, #8]
 801375c:	486b      	ldr	r0, [pc, #428]	; (801390c <_dtoa_r+0x60c>)
 801375e:	1112      	asrs	r2, r2, #4
 8013760:	2400      	movs	r4, #0
 8013762:	2102      	movs	r1, #2
 8013764:	b92a      	cbnz	r2, 8013772 <_dtoa_r+0x472>
 8013766:	2c00      	cmp	r4, #0
 8013768:	f43f af6a 	beq.w	8013640 <_dtoa_r+0x340>
 801376c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013770:	e766      	b.n	8013640 <_dtoa_r+0x340>
 8013772:	07d7      	lsls	r7, r2, #31
 8013774:	d505      	bpl.n	8013782 <_dtoa_r+0x482>
 8013776:	ed90 6b00 	vldr	d6, [r0]
 801377a:	3101      	adds	r1, #1
 801377c:	2401      	movs	r4, #1
 801377e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013782:	1052      	asrs	r2, r2, #1
 8013784:	3008      	adds	r0, #8
 8013786:	e7ed      	b.n	8013764 <_dtoa_r+0x464>
 8013788:	2102      	movs	r1, #2
 801378a:	e759      	b.n	8013640 <_dtoa_r+0x340>
 801378c:	465a      	mov	r2, fp
 801378e:	464c      	mov	r4, r9
 8013790:	e775      	b.n	801367e <_dtoa_r+0x37e>
 8013792:	ec41 0b17 	vmov	d7, r0, r1
 8013796:	495c      	ldr	r1, [pc, #368]	; (8013908 <_dtoa_r+0x608>)
 8013798:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801379c:	ed11 4b02 	vldr	d4, [r1, #-8]
 80137a0:	9901      	ldr	r1, [sp, #4]
 80137a2:	440c      	add	r4, r1
 80137a4:	9907      	ldr	r1, [sp, #28]
 80137a6:	b351      	cbz	r1, 80137fe <_dtoa_r+0x4fe>
 80137a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80137ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80137b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80137b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80137b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80137bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80137c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80137c4:	ee14 1a90 	vmov	r1, s9
 80137c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80137cc:	3130      	adds	r1, #48	; 0x30
 80137ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80137d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137da:	f808 1b01 	strb.w	r1, [r8], #1
 80137de:	d439      	bmi.n	8013854 <_dtoa_r+0x554>
 80137e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80137e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80137e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ec:	d472      	bmi.n	80138d4 <_dtoa_r+0x5d4>
 80137ee:	45a0      	cmp	r8, r4
 80137f0:	f43f af6b 	beq.w	80136ca <_dtoa_r+0x3ca>
 80137f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80137f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80137fc:	e7e0      	b.n	80137c0 <_dtoa_r+0x4c0>
 80137fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013802:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013806:	4620      	mov	r0, r4
 8013808:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801380c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013810:	ee14 1a90 	vmov	r1, s9
 8013814:	3130      	adds	r1, #48	; 0x30
 8013816:	f808 1b01 	strb.w	r1, [r8], #1
 801381a:	45a0      	cmp	r8, r4
 801381c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013820:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013824:	d118      	bne.n	8013858 <_dtoa_r+0x558>
 8013826:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801382a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801382e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	dc4d      	bgt.n	80138d4 <_dtoa_r+0x5d4>
 8013838:	ee35 5b47 	vsub.f64	d5, d5, d7
 801383c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013844:	f57f af41 	bpl.w	80136ca <_dtoa_r+0x3ca>
 8013848:	4680      	mov	r8, r0
 801384a:	3801      	subs	r0, #1
 801384c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013850:	2b30      	cmp	r3, #48	; 0x30
 8013852:	d0f9      	beq.n	8013848 <_dtoa_r+0x548>
 8013854:	4693      	mov	fp, r2
 8013856:	e02a      	b.n	80138ae <_dtoa_r+0x5ae>
 8013858:	ee26 6b03 	vmul.f64	d6, d6, d3
 801385c:	e7d6      	b.n	801380c <_dtoa_r+0x50c>
 801385e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013862:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801386a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801386e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013872:	ee15 3a10 	vmov	r3, s10
 8013876:	3330      	adds	r3, #48	; 0x30
 8013878:	f808 3b01 	strb.w	r3, [r8], #1
 801387c:	9b01      	ldr	r3, [sp, #4]
 801387e:	eba8 0303 	sub.w	r3, r8, r3
 8013882:	4599      	cmp	r9, r3
 8013884:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013888:	eea3 7b46 	vfms.f64	d7, d3, d6
 801388c:	d133      	bne.n	80138f6 <_dtoa_r+0x5f6>
 801388e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013892:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389a:	dc1a      	bgt.n	80138d2 <_dtoa_r+0x5d2>
 801389c:	eeb4 7b46 	vcmp.f64	d7, d6
 80138a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a4:	d103      	bne.n	80138ae <_dtoa_r+0x5ae>
 80138a6:	ee15 3a10 	vmov	r3, s10
 80138aa:	07d9      	lsls	r1, r3, #31
 80138ac:	d411      	bmi.n	80138d2 <_dtoa_r+0x5d2>
 80138ae:	4629      	mov	r1, r5
 80138b0:	4630      	mov	r0, r6
 80138b2:	f000 fbd1 	bl	8014058 <_Bfree>
 80138b6:	2300      	movs	r3, #0
 80138b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138ba:	f888 3000 	strb.w	r3, [r8]
 80138be:	f10b 0301 	add.w	r3, fp, #1
 80138c2:	6013      	str	r3, [r2, #0]
 80138c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f43f ad69 	beq.w	801339e <_dtoa_r+0x9e>
 80138cc:	f8c3 8000 	str.w	r8, [r3]
 80138d0:	e565      	b.n	801339e <_dtoa_r+0x9e>
 80138d2:	465a      	mov	r2, fp
 80138d4:	4643      	mov	r3, r8
 80138d6:	4698      	mov	r8, r3
 80138d8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80138dc:	2939      	cmp	r1, #57	; 0x39
 80138de:	d106      	bne.n	80138ee <_dtoa_r+0x5ee>
 80138e0:	9901      	ldr	r1, [sp, #4]
 80138e2:	4299      	cmp	r1, r3
 80138e4:	d1f7      	bne.n	80138d6 <_dtoa_r+0x5d6>
 80138e6:	9801      	ldr	r0, [sp, #4]
 80138e8:	2130      	movs	r1, #48	; 0x30
 80138ea:	3201      	adds	r2, #1
 80138ec:	7001      	strb	r1, [r0, #0]
 80138ee:	7819      	ldrb	r1, [r3, #0]
 80138f0:	3101      	adds	r1, #1
 80138f2:	7019      	strb	r1, [r3, #0]
 80138f4:	e7ae      	b.n	8013854 <_dtoa_r+0x554>
 80138f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80138fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80138fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013902:	d1b2      	bne.n	801386a <_dtoa_r+0x56a>
 8013904:	e7d3      	b.n	80138ae <_dtoa_r+0x5ae>
 8013906:	bf00      	nop
 8013908:	08019ba0 	.word	0x08019ba0
 801390c:	08019b78 	.word	0x08019b78
 8013910:	9907      	ldr	r1, [sp, #28]
 8013912:	2900      	cmp	r1, #0
 8013914:	f000 80d0 	beq.w	8013ab8 <_dtoa_r+0x7b8>
 8013918:	9906      	ldr	r1, [sp, #24]
 801391a:	2901      	cmp	r1, #1
 801391c:	f300 80b4 	bgt.w	8013a88 <_dtoa_r+0x788>
 8013920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013922:	2900      	cmp	r1, #0
 8013924:	f000 80ac 	beq.w	8013a80 <_dtoa_r+0x780>
 8013928:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801392c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013930:	461c      	mov	r4, r3
 8013932:	9309      	str	r3, [sp, #36]	; 0x24
 8013934:	9b04      	ldr	r3, [sp, #16]
 8013936:	4413      	add	r3, r2
 8013938:	9304      	str	r3, [sp, #16]
 801393a:	9b05      	ldr	r3, [sp, #20]
 801393c:	2101      	movs	r1, #1
 801393e:	4413      	add	r3, r2
 8013940:	4630      	mov	r0, r6
 8013942:	9305      	str	r3, [sp, #20]
 8013944:	f000 fc3e 	bl	80141c4 <__i2b>
 8013948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801394a:	4607      	mov	r7, r0
 801394c:	f1b8 0f00 	cmp.w	r8, #0
 8013950:	d00d      	beq.n	801396e <_dtoa_r+0x66e>
 8013952:	9a05      	ldr	r2, [sp, #20]
 8013954:	2a00      	cmp	r2, #0
 8013956:	dd0a      	ble.n	801396e <_dtoa_r+0x66e>
 8013958:	4542      	cmp	r2, r8
 801395a:	9904      	ldr	r1, [sp, #16]
 801395c:	bfa8      	it	ge
 801395e:	4642      	movge	r2, r8
 8013960:	1a89      	subs	r1, r1, r2
 8013962:	9104      	str	r1, [sp, #16]
 8013964:	9905      	ldr	r1, [sp, #20]
 8013966:	eba8 0802 	sub.w	r8, r8, r2
 801396a:	1a8a      	subs	r2, r1, r2
 801396c:	9205      	str	r2, [sp, #20]
 801396e:	b303      	cbz	r3, 80139b2 <_dtoa_r+0x6b2>
 8013970:	9a07      	ldr	r2, [sp, #28]
 8013972:	2a00      	cmp	r2, #0
 8013974:	f000 80a5 	beq.w	8013ac2 <_dtoa_r+0x7c2>
 8013978:	2c00      	cmp	r4, #0
 801397a:	dd13      	ble.n	80139a4 <_dtoa_r+0x6a4>
 801397c:	4639      	mov	r1, r7
 801397e:	4622      	mov	r2, r4
 8013980:	4630      	mov	r0, r6
 8013982:	930d      	str	r3, [sp, #52]	; 0x34
 8013984:	f000 fcde 	bl	8014344 <__pow5mult>
 8013988:	462a      	mov	r2, r5
 801398a:	4601      	mov	r1, r0
 801398c:	4607      	mov	r7, r0
 801398e:	4630      	mov	r0, r6
 8013990:	f000 fc2e 	bl	80141f0 <__multiply>
 8013994:	4629      	mov	r1, r5
 8013996:	9009      	str	r0, [sp, #36]	; 0x24
 8013998:	4630      	mov	r0, r6
 801399a:	f000 fb5d 	bl	8014058 <_Bfree>
 801399e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139a2:	4615      	mov	r5, r2
 80139a4:	1b1a      	subs	r2, r3, r4
 80139a6:	d004      	beq.n	80139b2 <_dtoa_r+0x6b2>
 80139a8:	4629      	mov	r1, r5
 80139aa:	4630      	mov	r0, r6
 80139ac:	f000 fcca 	bl	8014344 <__pow5mult>
 80139b0:	4605      	mov	r5, r0
 80139b2:	2101      	movs	r1, #1
 80139b4:	4630      	mov	r0, r6
 80139b6:	f000 fc05 	bl	80141c4 <__i2b>
 80139ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139bc:	2b00      	cmp	r3, #0
 80139be:	4604      	mov	r4, r0
 80139c0:	f340 8081 	ble.w	8013ac6 <_dtoa_r+0x7c6>
 80139c4:	461a      	mov	r2, r3
 80139c6:	4601      	mov	r1, r0
 80139c8:	4630      	mov	r0, r6
 80139ca:	f000 fcbb 	bl	8014344 <__pow5mult>
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	4604      	mov	r4, r0
 80139d4:	dd7a      	ble.n	8013acc <_dtoa_r+0x7cc>
 80139d6:	2300      	movs	r3, #0
 80139d8:	9309      	str	r3, [sp, #36]	; 0x24
 80139da:	6922      	ldr	r2, [r4, #16]
 80139dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80139e0:	6910      	ldr	r0, [r2, #16]
 80139e2:	f000 fba1 	bl	8014128 <__hi0bits>
 80139e6:	f1c0 0020 	rsb	r0, r0, #32
 80139ea:	9b05      	ldr	r3, [sp, #20]
 80139ec:	4418      	add	r0, r3
 80139ee:	f010 001f 	ands.w	r0, r0, #31
 80139f2:	f000 8093 	beq.w	8013b1c <_dtoa_r+0x81c>
 80139f6:	f1c0 0220 	rsb	r2, r0, #32
 80139fa:	2a04      	cmp	r2, #4
 80139fc:	f340 8085 	ble.w	8013b0a <_dtoa_r+0x80a>
 8013a00:	9b04      	ldr	r3, [sp, #16]
 8013a02:	f1c0 001c 	rsb	r0, r0, #28
 8013a06:	4403      	add	r3, r0
 8013a08:	9304      	str	r3, [sp, #16]
 8013a0a:	9b05      	ldr	r3, [sp, #20]
 8013a0c:	4480      	add	r8, r0
 8013a0e:	4403      	add	r3, r0
 8013a10:	9305      	str	r3, [sp, #20]
 8013a12:	9b04      	ldr	r3, [sp, #16]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	dd05      	ble.n	8013a24 <_dtoa_r+0x724>
 8013a18:	4629      	mov	r1, r5
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f000 fceb 	bl	80143f8 <__lshift>
 8013a22:	4605      	mov	r5, r0
 8013a24:	9b05      	ldr	r3, [sp, #20]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	dd05      	ble.n	8013a36 <_dtoa_r+0x736>
 8013a2a:	4621      	mov	r1, r4
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	4630      	mov	r0, r6
 8013a30:	f000 fce2 	bl	80143f8 <__lshift>
 8013a34:	4604      	mov	r4, r0
 8013a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d071      	beq.n	8013b20 <_dtoa_r+0x820>
 8013a3c:	4621      	mov	r1, r4
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f000 fd46 	bl	80144d0 <__mcmp>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	da6b      	bge.n	8013b20 <_dtoa_r+0x820>
 8013a48:	2300      	movs	r3, #0
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	220a      	movs	r2, #10
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f000 fb24 	bl	801409c <__multadd>
 8013a54:	9b07      	ldr	r3, [sp, #28]
 8013a56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a5a:	4605      	mov	r5, r0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	f000 8197 	beq.w	8013d90 <_dtoa_r+0xa90>
 8013a62:	4639      	mov	r1, r7
 8013a64:	2300      	movs	r3, #0
 8013a66:	220a      	movs	r2, #10
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f000 fb17 	bl	801409c <__multadd>
 8013a6e:	f1ba 0f00 	cmp.w	sl, #0
 8013a72:	4607      	mov	r7, r0
 8013a74:	f300 8093 	bgt.w	8013b9e <_dtoa_r+0x89e>
 8013a78:	9b06      	ldr	r3, [sp, #24]
 8013a7a:	2b02      	cmp	r3, #2
 8013a7c:	dc57      	bgt.n	8013b2e <_dtoa_r+0x82e>
 8013a7e:	e08e      	b.n	8013b9e <_dtoa_r+0x89e>
 8013a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a86:	e751      	b.n	801392c <_dtoa_r+0x62c>
 8013a88:	f109 34ff 	add.w	r4, r9, #4294967295
 8013a8c:	42a3      	cmp	r3, r4
 8013a8e:	bfbf      	itttt	lt
 8013a90:	1ae2      	sublt	r2, r4, r3
 8013a92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013a94:	189b      	addlt	r3, r3, r2
 8013a96:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013a98:	bfae      	itee	ge
 8013a9a:	1b1c      	subge	r4, r3, r4
 8013a9c:	4623      	movlt	r3, r4
 8013a9e:	2400      	movlt	r4, #0
 8013aa0:	f1b9 0f00 	cmp.w	r9, #0
 8013aa4:	bfb5      	itete	lt
 8013aa6:	9a04      	ldrlt	r2, [sp, #16]
 8013aa8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013aac:	eba2 0809 	sublt.w	r8, r2, r9
 8013ab0:	464a      	movge	r2, r9
 8013ab2:	bfb8      	it	lt
 8013ab4:	2200      	movlt	r2, #0
 8013ab6:	e73c      	b.n	8013932 <_dtoa_r+0x632>
 8013ab8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013abc:	9f07      	ldr	r7, [sp, #28]
 8013abe:	461c      	mov	r4, r3
 8013ac0:	e744      	b.n	801394c <_dtoa_r+0x64c>
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	e770      	b.n	80139a8 <_dtoa_r+0x6a8>
 8013ac6:	9b06      	ldr	r3, [sp, #24]
 8013ac8:	2b01      	cmp	r3, #1
 8013aca:	dc18      	bgt.n	8013afe <_dtoa_r+0x7fe>
 8013acc:	9b02      	ldr	r3, [sp, #8]
 8013ace:	b9b3      	cbnz	r3, 8013afe <_dtoa_r+0x7fe>
 8013ad0:	9b03      	ldr	r3, [sp, #12]
 8013ad2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013ad6:	b9a2      	cbnz	r2, 8013b02 <_dtoa_r+0x802>
 8013ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013adc:	0d12      	lsrs	r2, r2, #20
 8013ade:	0512      	lsls	r2, r2, #20
 8013ae0:	b18a      	cbz	r2, 8013b06 <_dtoa_r+0x806>
 8013ae2:	9b04      	ldr	r3, [sp, #16]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	9304      	str	r3, [sp, #16]
 8013ae8:	9b05      	ldr	r3, [sp, #20]
 8013aea:	3301      	adds	r3, #1
 8013aec:	9305      	str	r3, [sp, #20]
 8013aee:	2301      	movs	r3, #1
 8013af0:	9309      	str	r3, [sp, #36]	; 0x24
 8013af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f47f af70 	bne.w	80139da <_dtoa_r+0x6da>
 8013afa:	2001      	movs	r0, #1
 8013afc:	e775      	b.n	80139ea <_dtoa_r+0x6ea>
 8013afe:	2300      	movs	r3, #0
 8013b00:	e7f6      	b.n	8013af0 <_dtoa_r+0x7f0>
 8013b02:	9b02      	ldr	r3, [sp, #8]
 8013b04:	e7f4      	b.n	8013af0 <_dtoa_r+0x7f0>
 8013b06:	9209      	str	r2, [sp, #36]	; 0x24
 8013b08:	e7f3      	b.n	8013af2 <_dtoa_r+0x7f2>
 8013b0a:	d082      	beq.n	8013a12 <_dtoa_r+0x712>
 8013b0c:	9b04      	ldr	r3, [sp, #16]
 8013b0e:	321c      	adds	r2, #28
 8013b10:	4413      	add	r3, r2
 8013b12:	9304      	str	r3, [sp, #16]
 8013b14:	9b05      	ldr	r3, [sp, #20]
 8013b16:	4490      	add	r8, r2
 8013b18:	4413      	add	r3, r2
 8013b1a:	e779      	b.n	8013a10 <_dtoa_r+0x710>
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	e7f5      	b.n	8013b0c <_dtoa_r+0x80c>
 8013b20:	f1b9 0f00 	cmp.w	r9, #0
 8013b24:	dc36      	bgt.n	8013b94 <_dtoa_r+0x894>
 8013b26:	9b06      	ldr	r3, [sp, #24]
 8013b28:	2b02      	cmp	r3, #2
 8013b2a:	dd33      	ble.n	8013b94 <_dtoa_r+0x894>
 8013b2c:	46ca      	mov	sl, r9
 8013b2e:	f1ba 0f00 	cmp.w	sl, #0
 8013b32:	d10d      	bne.n	8013b50 <_dtoa_r+0x850>
 8013b34:	4621      	mov	r1, r4
 8013b36:	4653      	mov	r3, sl
 8013b38:	2205      	movs	r2, #5
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	f000 faae 	bl	801409c <__multadd>
 8013b40:	4601      	mov	r1, r0
 8013b42:	4604      	mov	r4, r0
 8013b44:	4628      	mov	r0, r5
 8013b46:	f000 fcc3 	bl	80144d0 <__mcmp>
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	f73f ade4 	bgt.w	8013718 <_dtoa_r+0x418>
 8013b50:	9b08      	ldr	r3, [sp, #32]
 8013b52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b56:	ea6f 0b03 	mvn.w	fp, r3
 8013b5a:	f04f 0900 	mov.w	r9, #0
 8013b5e:	4621      	mov	r1, r4
 8013b60:	4630      	mov	r0, r6
 8013b62:	f000 fa79 	bl	8014058 <_Bfree>
 8013b66:	2f00      	cmp	r7, #0
 8013b68:	f43f aea1 	beq.w	80138ae <_dtoa_r+0x5ae>
 8013b6c:	f1b9 0f00 	cmp.w	r9, #0
 8013b70:	d005      	beq.n	8013b7e <_dtoa_r+0x87e>
 8013b72:	45b9      	cmp	r9, r7
 8013b74:	d003      	beq.n	8013b7e <_dtoa_r+0x87e>
 8013b76:	4649      	mov	r1, r9
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f000 fa6d 	bl	8014058 <_Bfree>
 8013b7e:	4639      	mov	r1, r7
 8013b80:	4630      	mov	r0, r6
 8013b82:	f000 fa69 	bl	8014058 <_Bfree>
 8013b86:	e692      	b.n	80138ae <_dtoa_r+0x5ae>
 8013b88:	2400      	movs	r4, #0
 8013b8a:	4627      	mov	r7, r4
 8013b8c:	e7e0      	b.n	8013b50 <_dtoa_r+0x850>
 8013b8e:	4693      	mov	fp, r2
 8013b90:	4627      	mov	r7, r4
 8013b92:	e5c1      	b.n	8013718 <_dtoa_r+0x418>
 8013b94:	9b07      	ldr	r3, [sp, #28]
 8013b96:	46ca      	mov	sl, r9
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f000 8100 	beq.w	8013d9e <_dtoa_r+0xa9e>
 8013b9e:	f1b8 0f00 	cmp.w	r8, #0
 8013ba2:	dd05      	ble.n	8013bb0 <_dtoa_r+0x8b0>
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	4642      	mov	r2, r8
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f000 fc25 	bl	80143f8 <__lshift>
 8013bae:	4607      	mov	r7, r0
 8013bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d05d      	beq.n	8013c72 <_dtoa_r+0x972>
 8013bb6:	6879      	ldr	r1, [r7, #4]
 8013bb8:	4630      	mov	r0, r6
 8013bba:	f000 fa0d 	bl	8013fd8 <_Balloc>
 8013bbe:	4680      	mov	r8, r0
 8013bc0:	b928      	cbnz	r0, 8013bce <_dtoa_r+0x8ce>
 8013bc2:	4b82      	ldr	r3, [pc, #520]	; (8013dcc <_dtoa_r+0xacc>)
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013bca:	f7ff bbb1 	b.w	8013330 <_dtoa_r+0x30>
 8013bce:	693a      	ldr	r2, [r7, #16]
 8013bd0:	3202      	adds	r2, #2
 8013bd2:	0092      	lsls	r2, r2, #2
 8013bd4:	f107 010c 	add.w	r1, r7, #12
 8013bd8:	300c      	adds	r0, #12
 8013bda:	f7ff faf3 	bl	80131c4 <memcpy>
 8013bde:	2201      	movs	r2, #1
 8013be0:	4641      	mov	r1, r8
 8013be2:	4630      	mov	r0, r6
 8013be4:	f000 fc08 	bl	80143f8 <__lshift>
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	3301      	adds	r3, #1
 8013bec:	9304      	str	r3, [sp, #16]
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	4453      	add	r3, sl
 8013bf2:	9308      	str	r3, [sp, #32]
 8013bf4:	9b02      	ldr	r3, [sp, #8]
 8013bf6:	f003 0301 	and.w	r3, r3, #1
 8013bfa:	46b9      	mov	r9, r7
 8013bfc:	9307      	str	r3, [sp, #28]
 8013bfe:	4607      	mov	r7, r0
 8013c00:	9b04      	ldr	r3, [sp, #16]
 8013c02:	4621      	mov	r1, r4
 8013c04:	3b01      	subs	r3, #1
 8013c06:	4628      	mov	r0, r5
 8013c08:	9302      	str	r3, [sp, #8]
 8013c0a:	f7ff faf0 	bl	80131ee <quorem>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	3330      	adds	r3, #48	; 0x30
 8013c12:	9005      	str	r0, [sp, #20]
 8013c14:	4649      	mov	r1, r9
 8013c16:	4628      	mov	r0, r5
 8013c18:	9309      	str	r3, [sp, #36]	; 0x24
 8013c1a:	f000 fc59 	bl	80144d0 <__mcmp>
 8013c1e:	463a      	mov	r2, r7
 8013c20:	4682      	mov	sl, r0
 8013c22:	4621      	mov	r1, r4
 8013c24:	4630      	mov	r0, r6
 8013c26:	f000 fc6f 	bl	8014508 <__mdiff>
 8013c2a:	68c2      	ldr	r2, [r0, #12]
 8013c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c2e:	4680      	mov	r8, r0
 8013c30:	bb0a      	cbnz	r2, 8013c76 <_dtoa_r+0x976>
 8013c32:	4601      	mov	r1, r0
 8013c34:	4628      	mov	r0, r5
 8013c36:	f000 fc4b 	bl	80144d0 <__mcmp>
 8013c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	4641      	mov	r1, r8
 8013c40:	4630      	mov	r0, r6
 8013c42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013c46:	f000 fa07 	bl	8014058 <_Bfree>
 8013c4a:	9b06      	ldr	r3, [sp, #24]
 8013c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013c52:	ea43 0102 	orr.w	r1, r3, r2
 8013c56:	9b07      	ldr	r3, [sp, #28]
 8013c58:	4319      	orrs	r1, r3
 8013c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5c:	d10d      	bne.n	8013c7a <_dtoa_r+0x97a>
 8013c5e:	2b39      	cmp	r3, #57	; 0x39
 8013c60:	d029      	beq.n	8013cb6 <_dtoa_r+0x9b6>
 8013c62:	f1ba 0f00 	cmp.w	sl, #0
 8013c66:	dd01      	ble.n	8013c6c <_dtoa_r+0x96c>
 8013c68:	9b05      	ldr	r3, [sp, #20]
 8013c6a:	3331      	adds	r3, #49	; 0x31
 8013c6c:	9a02      	ldr	r2, [sp, #8]
 8013c6e:	7013      	strb	r3, [r2, #0]
 8013c70:	e775      	b.n	8013b5e <_dtoa_r+0x85e>
 8013c72:	4638      	mov	r0, r7
 8013c74:	e7b8      	b.n	8013be8 <_dtoa_r+0x8e8>
 8013c76:	2201      	movs	r2, #1
 8013c78:	e7e1      	b.n	8013c3e <_dtoa_r+0x93e>
 8013c7a:	f1ba 0f00 	cmp.w	sl, #0
 8013c7e:	db06      	blt.n	8013c8e <_dtoa_r+0x98e>
 8013c80:	9906      	ldr	r1, [sp, #24]
 8013c82:	ea41 0a0a 	orr.w	sl, r1, sl
 8013c86:	9907      	ldr	r1, [sp, #28]
 8013c88:	ea5a 0a01 	orrs.w	sl, sl, r1
 8013c8c:	d120      	bne.n	8013cd0 <_dtoa_r+0x9d0>
 8013c8e:	2a00      	cmp	r2, #0
 8013c90:	ddec      	ble.n	8013c6c <_dtoa_r+0x96c>
 8013c92:	4629      	mov	r1, r5
 8013c94:	2201      	movs	r2, #1
 8013c96:	4630      	mov	r0, r6
 8013c98:	9304      	str	r3, [sp, #16]
 8013c9a:	f000 fbad 	bl	80143f8 <__lshift>
 8013c9e:	4621      	mov	r1, r4
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	f000 fc15 	bl	80144d0 <__mcmp>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	9b04      	ldr	r3, [sp, #16]
 8013caa:	dc02      	bgt.n	8013cb2 <_dtoa_r+0x9b2>
 8013cac:	d1de      	bne.n	8013c6c <_dtoa_r+0x96c>
 8013cae:	07da      	lsls	r2, r3, #31
 8013cb0:	d5dc      	bpl.n	8013c6c <_dtoa_r+0x96c>
 8013cb2:	2b39      	cmp	r3, #57	; 0x39
 8013cb4:	d1d8      	bne.n	8013c68 <_dtoa_r+0x968>
 8013cb6:	9a02      	ldr	r2, [sp, #8]
 8013cb8:	2339      	movs	r3, #57	; 0x39
 8013cba:	7013      	strb	r3, [r2, #0]
 8013cbc:	4643      	mov	r3, r8
 8013cbe:	4698      	mov	r8, r3
 8013cc0:	3b01      	subs	r3, #1
 8013cc2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013cc6:	2a39      	cmp	r2, #57	; 0x39
 8013cc8:	d051      	beq.n	8013d6e <_dtoa_r+0xa6e>
 8013cca:	3201      	adds	r2, #1
 8013ccc:	701a      	strb	r2, [r3, #0]
 8013cce:	e746      	b.n	8013b5e <_dtoa_r+0x85e>
 8013cd0:	2a00      	cmp	r2, #0
 8013cd2:	dd03      	ble.n	8013cdc <_dtoa_r+0x9dc>
 8013cd4:	2b39      	cmp	r3, #57	; 0x39
 8013cd6:	d0ee      	beq.n	8013cb6 <_dtoa_r+0x9b6>
 8013cd8:	3301      	adds	r3, #1
 8013cda:	e7c7      	b.n	8013c6c <_dtoa_r+0x96c>
 8013cdc:	9a04      	ldr	r2, [sp, #16]
 8013cde:	9908      	ldr	r1, [sp, #32]
 8013ce0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013ce4:	428a      	cmp	r2, r1
 8013ce6:	d02b      	beq.n	8013d40 <_dtoa_r+0xa40>
 8013ce8:	4629      	mov	r1, r5
 8013cea:	2300      	movs	r3, #0
 8013cec:	220a      	movs	r2, #10
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f000 f9d4 	bl	801409c <__multadd>
 8013cf4:	45b9      	cmp	r9, r7
 8013cf6:	4605      	mov	r5, r0
 8013cf8:	f04f 0300 	mov.w	r3, #0
 8013cfc:	f04f 020a 	mov.w	r2, #10
 8013d00:	4649      	mov	r1, r9
 8013d02:	4630      	mov	r0, r6
 8013d04:	d107      	bne.n	8013d16 <_dtoa_r+0xa16>
 8013d06:	f000 f9c9 	bl	801409c <__multadd>
 8013d0a:	4681      	mov	r9, r0
 8013d0c:	4607      	mov	r7, r0
 8013d0e:	9b04      	ldr	r3, [sp, #16]
 8013d10:	3301      	adds	r3, #1
 8013d12:	9304      	str	r3, [sp, #16]
 8013d14:	e774      	b.n	8013c00 <_dtoa_r+0x900>
 8013d16:	f000 f9c1 	bl	801409c <__multadd>
 8013d1a:	4639      	mov	r1, r7
 8013d1c:	4681      	mov	r9, r0
 8013d1e:	2300      	movs	r3, #0
 8013d20:	220a      	movs	r2, #10
 8013d22:	4630      	mov	r0, r6
 8013d24:	f000 f9ba 	bl	801409c <__multadd>
 8013d28:	4607      	mov	r7, r0
 8013d2a:	e7f0      	b.n	8013d0e <_dtoa_r+0xa0e>
 8013d2c:	f1ba 0f00 	cmp.w	sl, #0
 8013d30:	9a01      	ldr	r2, [sp, #4]
 8013d32:	bfcc      	ite	gt
 8013d34:	46d0      	movgt	r8, sl
 8013d36:	f04f 0801 	movle.w	r8, #1
 8013d3a:	4490      	add	r8, r2
 8013d3c:	f04f 0900 	mov.w	r9, #0
 8013d40:	4629      	mov	r1, r5
 8013d42:	2201      	movs	r2, #1
 8013d44:	4630      	mov	r0, r6
 8013d46:	9302      	str	r3, [sp, #8]
 8013d48:	f000 fb56 	bl	80143f8 <__lshift>
 8013d4c:	4621      	mov	r1, r4
 8013d4e:	4605      	mov	r5, r0
 8013d50:	f000 fbbe 	bl	80144d0 <__mcmp>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	dcb1      	bgt.n	8013cbc <_dtoa_r+0x9bc>
 8013d58:	d102      	bne.n	8013d60 <_dtoa_r+0xa60>
 8013d5a:	9b02      	ldr	r3, [sp, #8]
 8013d5c:	07db      	lsls	r3, r3, #31
 8013d5e:	d4ad      	bmi.n	8013cbc <_dtoa_r+0x9bc>
 8013d60:	4643      	mov	r3, r8
 8013d62:	4698      	mov	r8, r3
 8013d64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d68:	2a30      	cmp	r2, #48	; 0x30
 8013d6a:	d0fa      	beq.n	8013d62 <_dtoa_r+0xa62>
 8013d6c:	e6f7      	b.n	8013b5e <_dtoa_r+0x85e>
 8013d6e:	9a01      	ldr	r2, [sp, #4]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d1a4      	bne.n	8013cbe <_dtoa_r+0x9be>
 8013d74:	f10b 0b01 	add.w	fp, fp, #1
 8013d78:	2331      	movs	r3, #49	; 0x31
 8013d7a:	e778      	b.n	8013c6e <_dtoa_r+0x96e>
 8013d7c:	4b14      	ldr	r3, [pc, #80]	; (8013dd0 <_dtoa_r+0xad0>)
 8013d7e:	f7ff bb2a 	b.w	80133d6 <_dtoa_r+0xd6>
 8013d82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f47f ab05 	bne.w	8013394 <_dtoa_r+0x94>
 8013d8a:	4b12      	ldr	r3, [pc, #72]	; (8013dd4 <_dtoa_r+0xad4>)
 8013d8c:	f7ff bb23 	b.w	80133d6 <_dtoa_r+0xd6>
 8013d90:	f1ba 0f00 	cmp.w	sl, #0
 8013d94:	dc03      	bgt.n	8013d9e <_dtoa_r+0xa9e>
 8013d96:	9b06      	ldr	r3, [sp, #24]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	f73f aec8 	bgt.w	8013b2e <_dtoa_r+0x82e>
 8013d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013da2:	4621      	mov	r1, r4
 8013da4:	4628      	mov	r0, r5
 8013da6:	f7ff fa22 	bl	80131ee <quorem>
 8013daa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013dae:	f808 3b01 	strb.w	r3, [r8], #1
 8013db2:	9a01      	ldr	r2, [sp, #4]
 8013db4:	eba8 0202 	sub.w	r2, r8, r2
 8013db8:	4592      	cmp	sl, r2
 8013dba:	ddb7      	ble.n	8013d2c <_dtoa_r+0xa2c>
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	220a      	movs	r2, #10
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	f000 f96a 	bl	801409c <__multadd>
 8013dc8:	4605      	mov	r5, r0
 8013dca:	e7ea      	b.n	8013da2 <_dtoa_r+0xaa2>
 8013dcc:	08019b07 	.word	0x08019b07
 8013dd0:	08019a24 	.word	0x08019a24
 8013dd4:	08019aa2 	.word	0x08019aa2

08013dd8 <_free_r>:
 8013dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dda:	2900      	cmp	r1, #0
 8013ddc:	d044      	beq.n	8013e68 <_free_r+0x90>
 8013dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013de2:	9001      	str	r0, [sp, #4]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	f1a1 0404 	sub.w	r4, r1, #4
 8013dea:	bfb8      	it	lt
 8013dec:	18e4      	addlt	r4, r4, r3
 8013dee:	f000 f8e7 	bl	8013fc0 <__malloc_lock>
 8013df2:	4a1e      	ldr	r2, [pc, #120]	; (8013e6c <_free_r+0x94>)
 8013df4:	9801      	ldr	r0, [sp, #4]
 8013df6:	6813      	ldr	r3, [r2, #0]
 8013df8:	b933      	cbnz	r3, 8013e08 <_free_r+0x30>
 8013dfa:	6063      	str	r3, [r4, #4]
 8013dfc:	6014      	str	r4, [r2, #0]
 8013dfe:	b003      	add	sp, #12
 8013e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e04:	f000 b8e2 	b.w	8013fcc <__malloc_unlock>
 8013e08:	42a3      	cmp	r3, r4
 8013e0a:	d908      	bls.n	8013e1e <_free_r+0x46>
 8013e0c:	6825      	ldr	r5, [r4, #0]
 8013e0e:	1961      	adds	r1, r4, r5
 8013e10:	428b      	cmp	r3, r1
 8013e12:	bf01      	itttt	eq
 8013e14:	6819      	ldreq	r1, [r3, #0]
 8013e16:	685b      	ldreq	r3, [r3, #4]
 8013e18:	1949      	addeq	r1, r1, r5
 8013e1a:	6021      	streq	r1, [r4, #0]
 8013e1c:	e7ed      	b.n	8013dfa <_free_r+0x22>
 8013e1e:	461a      	mov	r2, r3
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	b10b      	cbz	r3, 8013e28 <_free_r+0x50>
 8013e24:	42a3      	cmp	r3, r4
 8013e26:	d9fa      	bls.n	8013e1e <_free_r+0x46>
 8013e28:	6811      	ldr	r1, [r2, #0]
 8013e2a:	1855      	adds	r5, r2, r1
 8013e2c:	42a5      	cmp	r5, r4
 8013e2e:	d10b      	bne.n	8013e48 <_free_r+0x70>
 8013e30:	6824      	ldr	r4, [r4, #0]
 8013e32:	4421      	add	r1, r4
 8013e34:	1854      	adds	r4, r2, r1
 8013e36:	42a3      	cmp	r3, r4
 8013e38:	6011      	str	r1, [r2, #0]
 8013e3a:	d1e0      	bne.n	8013dfe <_free_r+0x26>
 8013e3c:	681c      	ldr	r4, [r3, #0]
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	6053      	str	r3, [r2, #4]
 8013e42:	440c      	add	r4, r1
 8013e44:	6014      	str	r4, [r2, #0]
 8013e46:	e7da      	b.n	8013dfe <_free_r+0x26>
 8013e48:	d902      	bls.n	8013e50 <_free_r+0x78>
 8013e4a:	230c      	movs	r3, #12
 8013e4c:	6003      	str	r3, [r0, #0]
 8013e4e:	e7d6      	b.n	8013dfe <_free_r+0x26>
 8013e50:	6825      	ldr	r5, [r4, #0]
 8013e52:	1961      	adds	r1, r4, r5
 8013e54:	428b      	cmp	r3, r1
 8013e56:	bf04      	itt	eq
 8013e58:	6819      	ldreq	r1, [r3, #0]
 8013e5a:	685b      	ldreq	r3, [r3, #4]
 8013e5c:	6063      	str	r3, [r4, #4]
 8013e5e:	bf04      	itt	eq
 8013e60:	1949      	addeq	r1, r1, r5
 8013e62:	6021      	streq	r1, [r4, #0]
 8013e64:	6054      	str	r4, [r2, #4]
 8013e66:	e7ca      	b.n	8013dfe <_free_r+0x26>
 8013e68:	b003      	add	sp, #12
 8013e6a:	bd30      	pop	{r4, r5, pc}
 8013e6c:	2400d66c 	.word	0x2400d66c

08013e70 <malloc>:
 8013e70:	4b02      	ldr	r3, [pc, #8]	; (8013e7c <malloc+0xc>)
 8013e72:	4601      	mov	r1, r0
 8013e74:	6818      	ldr	r0, [r3, #0]
 8013e76:	f000 b823 	b.w	8013ec0 <_malloc_r>
 8013e7a:	bf00      	nop
 8013e7c:	240003ac 	.word	0x240003ac

08013e80 <sbrk_aligned>:
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	4e0e      	ldr	r6, [pc, #56]	; (8013ebc <sbrk_aligned+0x3c>)
 8013e84:	460c      	mov	r4, r1
 8013e86:	6831      	ldr	r1, [r6, #0]
 8013e88:	4605      	mov	r5, r0
 8013e8a:	b911      	cbnz	r1, 8013e92 <sbrk_aligned+0x12>
 8013e8c:	f001 f85e 	bl	8014f4c <_sbrk_r>
 8013e90:	6030      	str	r0, [r6, #0]
 8013e92:	4621      	mov	r1, r4
 8013e94:	4628      	mov	r0, r5
 8013e96:	f001 f859 	bl	8014f4c <_sbrk_r>
 8013e9a:	1c43      	adds	r3, r0, #1
 8013e9c:	d00a      	beq.n	8013eb4 <sbrk_aligned+0x34>
 8013e9e:	1cc4      	adds	r4, r0, #3
 8013ea0:	f024 0403 	bic.w	r4, r4, #3
 8013ea4:	42a0      	cmp	r0, r4
 8013ea6:	d007      	beq.n	8013eb8 <sbrk_aligned+0x38>
 8013ea8:	1a21      	subs	r1, r4, r0
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f001 f84e 	bl	8014f4c <_sbrk_r>
 8013eb0:	3001      	adds	r0, #1
 8013eb2:	d101      	bne.n	8013eb8 <sbrk_aligned+0x38>
 8013eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8013eb8:	4620      	mov	r0, r4
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
 8013ebc:	2400d670 	.word	0x2400d670

08013ec0 <_malloc_r>:
 8013ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ec4:	1ccd      	adds	r5, r1, #3
 8013ec6:	f025 0503 	bic.w	r5, r5, #3
 8013eca:	3508      	adds	r5, #8
 8013ecc:	2d0c      	cmp	r5, #12
 8013ece:	bf38      	it	cc
 8013ed0:	250c      	movcc	r5, #12
 8013ed2:	2d00      	cmp	r5, #0
 8013ed4:	4607      	mov	r7, r0
 8013ed6:	db01      	blt.n	8013edc <_malloc_r+0x1c>
 8013ed8:	42a9      	cmp	r1, r5
 8013eda:	d905      	bls.n	8013ee8 <_malloc_r+0x28>
 8013edc:	230c      	movs	r3, #12
 8013ede:	603b      	str	r3, [r7, #0]
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ee8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013fbc <_malloc_r+0xfc>
 8013eec:	f000 f868 	bl	8013fc0 <__malloc_lock>
 8013ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ef4:	461c      	mov	r4, r3
 8013ef6:	bb5c      	cbnz	r4, 8013f50 <_malloc_r+0x90>
 8013ef8:	4629      	mov	r1, r5
 8013efa:	4638      	mov	r0, r7
 8013efc:	f7ff ffc0 	bl	8013e80 <sbrk_aligned>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	4604      	mov	r4, r0
 8013f04:	d155      	bne.n	8013fb2 <_malloc_r+0xf2>
 8013f06:	f8d8 4000 	ldr.w	r4, [r8]
 8013f0a:	4626      	mov	r6, r4
 8013f0c:	2e00      	cmp	r6, #0
 8013f0e:	d145      	bne.n	8013f9c <_malloc_r+0xdc>
 8013f10:	2c00      	cmp	r4, #0
 8013f12:	d048      	beq.n	8013fa6 <_malloc_r+0xe6>
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	4631      	mov	r1, r6
 8013f18:	4638      	mov	r0, r7
 8013f1a:	eb04 0903 	add.w	r9, r4, r3
 8013f1e:	f001 f815 	bl	8014f4c <_sbrk_r>
 8013f22:	4581      	cmp	r9, r0
 8013f24:	d13f      	bne.n	8013fa6 <_malloc_r+0xe6>
 8013f26:	6821      	ldr	r1, [r4, #0]
 8013f28:	1a6d      	subs	r5, r5, r1
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	4638      	mov	r0, r7
 8013f2e:	f7ff ffa7 	bl	8013e80 <sbrk_aligned>
 8013f32:	3001      	adds	r0, #1
 8013f34:	d037      	beq.n	8013fa6 <_malloc_r+0xe6>
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	442b      	add	r3, r5
 8013f3a:	6023      	str	r3, [r4, #0]
 8013f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d038      	beq.n	8013fb6 <_malloc_r+0xf6>
 8013f44:	685a      	ldr	r2, [r3, #4]
 8013f46:	42a2      	cmp	r2, r4
 8013f48:	d12b      	bne.n	8013fa2 <_malloc_r+0xe2>
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	e00f      	b.n	8013f70 <_malloc_r+0xb0>
 8013f50:	6822      	ldr	r2, [r4, #0]
 8013f52:	1b52      	subs	r2, r2, r5
 8013f54:	d41f      	bmi.n	8013f96 <_malloc_r+0xd6>
 8013f56:	2a0b      	cmp	r2, #11
 8013f58:	d917      	bls.n	8013f8a <_malloc_r+0xca>
 8013f5a:	1961      	adds	r1, r4, r5
 8013f5c:	42a3      	cmp	r3, r4
 8013f5e:	6025      	str	r5, [r4, #0]
 8013f60:	bf18      	it	ne
 8013f62:	6059      	strne	r1, [r3, #4]
 8013f64:	6863      	ldr	r3, [r4, #4]
 8013f66:	bf08      	it	eq
 8013f68:	f8c8 1000 	streq.w	r1, [r8]
 8013f6c:	5162      	str	r2, [r4, r5]
 8013f6e:	604b      	str	r3, [r1, #4]
 8013f70:	4638      	mov	r0, r7
 8013f72:	f104 060b 	add.w	r6, r4, #11
 8013f76:	f000 f829 	bl	8013fcc <__malloc_unlock>
 8013f7a:	f026 0607 	bic.w	r6, r6, #7
 8013f7e:	1d23      	adds	r3, r4, #4
 8013f80:	1af2      	subs	r2, r6, r3
 8013f82:	d0ae      	beq.n	8013ee2 <_malloc_r+0x22>
 8013f84:	1b9b      	subs	r3, r3, r6
 8013f86:	50a3      	str	r3, [r4, r2]
 8013f88:	e7ab      	b.n	8013ee2 <_malloc_r+0x22>
 8013f8a:	42a3      	cmp	r3, r4
 8013f8c:	6862      	ldr	r2, [r4, #4]
 8013f8e:	d1dd      	bne.n	8013f4c <_malloc_r+0x8c>
 8013f90:	f8c8 2000 	str.w	r2, [r8]
 8013f94:	e7ec      	b.n	8013f70 <_malloc_r+0xb0>
 8013f96:	4623      	mov	r3, r4
 8013f98:	6864      	ldr	r4, [r4, #4]
 8013f9a:	e7ac      	b.n	8013ef6 <_malloc_r+0x36>
 8013f9c:	4634      	mov	r4, r6
 8013f9e:	6876      	ldr	r6, [r6, #4]
 8013fa0:	e7b4      	b.n	8013f0c <_malloc_r+0x4c>
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	e7cc      	b.n	8013f40 <_malloc_r+0x80>
 8013fa6:	230c      	movs	r3, #12
 8013fa8:	603b      	str	r3, [r7, #0]
 8013faa:	4638      	mov	r0, r7
 8013fac:	f000 f80e 	bl	8013fcc <__malloc_unlock>
 8013fb0:	e797      	b.n	8013ee2 <_malloc_r+0x22>
 8013fb2:	6025      	str	r5, [r4, #0]
 8013fb4:	e7dc      	b.n	8013f70 <_malloc_r+0xb0>
 8013fb6:	605b      	str	r3, [r3, #4]
 8013fb8:	deff      	udf	#255	; 0xff
 8013fba:	bf00      	nop
 8013fbc:	2400d66c 	.word	0x2400d66c

08013fc0 <__malloc_lock>:
 8013fc0:	4801      	ldr	r0, [pc, #4]	; (8013fc8 <__malloc_lock+0x8>)
 8013fc2:	f7ff b8f5 	b.w	80131b0 <__retarget_lock_acquire_recursive>
 8013fc6:	bf00      	nop
 8013fc8:	2400d668 	.word	0x2400d668

08013fcc <__malloc_unlock>:
 8013fcc:	4801      	ldr	r0, [pc, #4]	; (8013fd4 <__malloc_unlock+0x8>)
 8013fce:	f7ff b8f0 	b.w	80131b2 <__retarget_lock_release_recursive>
 8013fd2:	bf00      	nop
 8013fd4:	2400d668 	.word	0x2400d668

08013fd8 <_Balloc>:
 8013fd8:	b570      	push	{r4, r5, r6, lr}
 8013fda:	69c6      	ldr	r6, [r0, #28]
 8013fdc:	4604      	mov	r4, r0
 8013fde:	460d      	mov	r5, r1
 8013fe0:	b976      	cbnz	r6, 8014000 <_Balloc+0x28>
 8013fe2:	2010      	movs	r0, #16
 8013fe4:	f7ff ff44 	bl	8013e70 <malloc>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	61e0      	str	r0, [r4, #28]
 8013fec:	b920      	cbnz	r0, 8013ff8 <_Balloc+0x20>
 8013fee:	4b18      	ldr	r3, [pc, #96]	; (8014050 <_Balloc+0x78>)
 8013ff0:	4818      	ldr	r0, [pc, #96]	; (8014054 <_Balloc+0x7c>)
 8013ff2:	216b      	movs	r1, #107	; 0x6b
 8013ff4:	f7fe f9a8 	bl	8012348 <__assert_func>
 8013ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ffc:	6006      	str	r6, [r0, #0]
 8013ffe:	60c6      	str	r6, [r0, #12]
 8014000:	69e6      	ldr	r6, [r4, #28]
 8014002:	68f3      	ldr	r3, [r6, #12]
 8014004:	b183      	cbz	r3, 8014028 <_Balloc+0x50>
 8014006:	69e3      	ldr	r3, [r4, #28]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801400e:	b9b8      	cbnz	r0, 8014040 <_Balloc+0x68>
 8014010:	2101      	movs	r1, #1
 8014012:	fa01 f605 	lsl.w	r6, r1, r5
 8014016:	1d72      	adds	r2, r6, #5
 8014018:	0092      	lsls	r2, r2, #2
 801401a:	4620      	mov	r0, r4
 801401c:	f000 ffa6 	bl	8014f6c <_calloc_r>
 8014020:	b160      	cbz	r0, 801403c <_Balloc+0x64>
 8014022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014026:	e00e      	b.n	8014046 <_Balloc+0x6e>
 8014028:	2221      	movs	r2, #33	; 0x21
 801402a:	2104      	movs	r1, #4
 801402c:	4620      	mov	r0, r4
 801402e:	f000 ff9d 	bl	8014f6c <_calloc_r>
 8014032:	69e3      	ldr	r3, [r4, #28]
 8014034:	60f0      	str	r0, [r6, #12]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d1e4      	bne.n	8014006 <_Balloc+0x2e>
 801403c:	2000      	movs	r0, #0
 801403e:	bd70      	pop	{r4, r5, r6, pc}
 8014040:	6802      	ldr	r2, [r0, #0]
 8014042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014046:	2300      	movs	r3, #0
 8014048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801404c:	e7f7      	b.n	801403e <_Balloc+0x66>
 801404e:	bf00      	nop
 8014050:	080198a4 	.word	0x080198a4
 8014054:	08019b18 	.word	0x08019b18

08014058 <_Bfree>:
 8014058:	b570      	push	{r4, r5, r6, lr}
 801405a:	69c6      	ldr	r6, [r0, #28]
 801405c:	4605      	mov	r5, r0
 801405e:	460c      	mov	r4, r1
 8014060:	b976      	cbnz	r6, 8014080 <_Bfree+0x28>
 8014062:	2010      	movs	r0, #16
 8014064:	f7ff ff04 	bl	8013e70 <malloc>
 8014068:	4602      	mov	r2, r0
 801406a:	61e8      	str	r0, [r5, #28]
 801406c:	b920      	cbnz	r0, 8014078 <_Bfree+0x20>
 801406e:	4b09      	ldr	r3, [pc, #36]	; (8014094 <_Bfree+0x3c>)
 8014070:	4809      	ldr	r0, [pc, #36]	; (8014098 <_Bfree+0x40>)
 8014072:	218f      	movs	r1, #143	; 0x8f
 8014074:	f7fe f968 	bl	8012348 <__assert_func>
 8014078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801407c:	6006      	str	r6, [r0, #0]
 801407e:	60c6      	str	r6, [r0, #12]
 8014080:	b13c      	cbz	r4, 8014092 <_Bfree+0x3a>
 8014082:	69eb      	ldr	r3, [r5, #28]
 8014084:	6862      	ldr	r2, [r4, #4]
 8014086:	68db      	ldr	r3, [r3, #12]
 8014088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801408c:	6021      	str	r1, [r4, #0]
 801408e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014092:	bd70      	pop	{r4, r5, r6, pc}
 8014094:	080198a4 	.word	0x080198a4
 8014098:	08019b18 	.word	0x08019b18

0801409c <__multadd>:
 801409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	690d      	ldr	r5, [r1, #16]
 80140a2:	4607      	mov	r7, r0
 80140a4:	460c      	mov	r4, r1
 80140a6:	461e      	mov	r6, r3
 80140a8:	f101 0c14 	add.w	ip, r1, #20
 80140ac:	2000      	movs	r0, #0
 80140ae:	f8dc 3000 	ldr.w	r3, [ip]
 80140b2:	b299      	uxth	r1, r3
 80140b4:	fb02 6101 	mla	r1, r2, r1, r6
 80140b8:	0c1e      	lsrs	r6, r3, #16
 80140ba:	0c0b      	lsrs	r3, r1, #16
 80140bc:	fb02 3306 	mla	r3, r2, r6, r3
 80140c0:	b289      	uxth	r1, r1
 80140c2:	3001      	adds	r0, #1
 80140c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80140c8:	4285      	cmp	r5, r0
 80140ca:	f84c 1b04 	str.w	r1, [ip], #4
 80140ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80140d2:	dcec      	bgt.n	80140ae <__multadd+0x12>
 80140d4:	b30e      	cbz	r6, 801411a <__multadd+0x7e>
 80140d6:	68a3      	ldr	r3, [r4, #8]
 80140d8:	42ab      	cmp	r3, r5
 80140da:	dc19      	bgt.n	8014110 <__multadd+0x74>
 80140dc:	6861      	ldr	r1, [r4, #4]
 80140de:	4638      	mov	r0, r7
 80140e0:	3101      	adds	r1, #1
 80140e2:	f7ff ff79 	bl	8013fd8 <_Balloc>
 80140e6:	4680      	mov	r8, r0
 80140e8:	b928      	cbnz	r0, 80140f6 <__multadd+0x5a>
 80140ea:	4602      	mov	r2, r0
 80140ec:	4b0c      	ldr	r3, [pc, #48]	; (8014120 <__multadd+0x84>)
 80140ee:	480d      	ldr	r0, [pc, #52]	; (8014124 <__multadd+0x88>)
 80140f0:	21ba      	movs	r1, #186	; 0xba
 80140f2:	f7fe f929 	bl	8012348 <__assert_func>
 80140f6:	6922      	ldr	r2, [r4, #16]
 80140f8:	3202      	adds	r2, #2
 80140fa:	f104 010c 	add.w	r1, r4, #12
 80140fe:	0092      	lsls	r2, r2, #2
 8014100:	300c      	adds	r0, #12
 8014102:	f7ff f85f 	bl	80131c4 <memcpy>
 8014106:	4621      	mov	r1, r4
 8014108:	4638      	mov	r0, r7
 801410a:	f7ff ffa5 	bl	8014058 <_Bfree>
 801410e:	4644      	mov	r4, r8
 8014110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014114:	3501      	adds	r5, #1
 8014116:	615e      	str	r6, [r3, #20]
 8014118:	6125      	str	r5, [r4, #16]
 801411a:	4620      	mov	r0, r4
 801411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014120:	08019b07 	.word	0x08019b07
 8014124:	08019b18 	.word	0x08019b18

08014128 <__hi0bits>:
 8014128:	0c03      	lsrs	r3, r0, #16
 801412a:	041b      	lsls	r3, r3, #16
 801412c:	b9d3      	cbnz	r3, 8014164 <__hi0bits+0x3c>
 801412e:	0400      	lsls	r0, r0, #16
 8014130:	2310      	movs	r3, #16
 8014132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014136:	bf04      	itt	eq
 8014138:	0200      	lsleq	r0, r0, #8
 801413a:	3308      	addeq	r3, #8
 801413c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014140:	bf04      	itt	eq
 8014142:	0100      	lsleq	r0, r0, #4
 8014144:	3304      	addeq	r3, #4
 8014146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801414a:	bf04      	itt	eq
 801414c:	0080      	lsleq	r0, r0, #2
 801414e:	3302      	addeq	r3, #2
 8014150:	2800      	cmp	r0, #0
 8014152:	db05      	blt.n	8014160 <__hi0bits+0x38>
 8014154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014158:	f103 0301 	add.w	r3, r3, #1
 801415c:	bf08      	it	eq
 801415e:	2320      	moveq	r3, #32
 8014160:	4618      	mov	r0, r3
 8014162:	4770      	bx	lr
 8014164:	2300      	movs	r3, #0
 8014166:	e7e4      	b.n	8014132 <__hi0bits+0xa>

08014168 <__lo0bits>:
 8014168:	6803      	ldr	r3, [r0, #0]
 801416a:	f013 0207 	ands.w	r2, r3, #7
 801416e:	d00c      	beq.n	801418a <__lo0bits+0x22>
 8014170:	07d9      	lsls	r1, r3, #31
 8014172:	d422      	bmi.n	80141ba <__lo0bits+0x52>
 8014174:	079a      	lsls	r2, r3, #30
 8014176:	bf49      	itett	mi
 8014178:	085b      	lsrmi	r3, r3, #1
 801417a:	089b      	lsrpl	r3, r3, #2
 801417c:	6003      	strmi	r3, [r0, #0]
 801417e:	2201      	movmi	r2, #1
 8014180:	bf5c      	itt	pl
 8014182:	6003      	strpl	r3, [r0, #0]
 8014184:	2202      	movpl	r2, #2
 8014186:	4610      	mov	r0, r2
 8014188:	4770      	bx	lr
 801418a:	b299      	uxth	r1, r3
 801418c:	b909      	cbnz	r1, 8014192 <__lo0bits+0x2a>
 801418e:	0c1b      	lsrs	r3, r3, #16
 8014190:	2210      	movs	r2, #16
 8014192:	b2d9      	uxtb	r1, r3
 8014194:	b909      	cbnz	r1, 801419a <__lo0bits+0x32>
 8014196:	3208      	adds	r2, #8
 8014198:	0a1b      	lsrs	r3, r3, #8
 801419a:	0719      	lsls	r1, r3, #28
 801419c:	bf04      	itt	eq
 801419e:	091b      	lsreq	r3, r3, #4
 80141a0:	3204      	addeq	r2, #4
 80141a2:	0799      	lsls	r1, r3, #30
 80141a4:	bf04      	itt	eq
 80141a6:	089b      	lsreq	r3, r3, #2
 80141a8:	3202      	addeq	r2, #2
 80141aa:	07d9      	lsls	r1, r3, #31
 80141ac:	d403      	bmi.n	80141b6 <__lo0bits+0x4e>
 80141ae:	085b      	lsrs	r3, r3, #1
 80141b0:	f102 0201 	add.w	r2, r2, #1
 80141b4:	d003      	beq.n	80141be <__lo0bits+0x56>
 80141b6:	6003      	str	r3, [r0, #0]
 80141b8:	e7e5      	b.n	8014186 <__lo0bits+0x1e>
 80141ba:	2200      	movs	r2, #0
 80141bc:	e7e3      	b.n	8014186 <__lo0bits+0x1e>
 80141be:	2220      	movs	r2, #32
 80141c0:	e7e1      	b.n	8014186 <__lo0bits+0x1e>
	...

080141c4 <__i2b>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	460c      	mov	r4, r1
 80141c8:	2101      	movs	r1, #1
 80141ca:	f7ff ff05 	bl	8013fd8 <_Balloc>
 80141ce:	4602      	mov	r2, r0
 80141d0:	b928      	cbnz	r0, 80141de <__i2b+0x1a>
 80141d2:	4b05      	ldr	r3, [pc, #20]	; (80141e8 <__i2b+0x24>)
 80141d4:	4805      	ldr	r0, [pc, #20]	; (80141ec <__i2b+0x28>)
 80141d6:	f240 1145 	movw	r1, #325	; 0x145
 80141da:	f7fe f8b5 	bl	8012348 <__assert_func>
 80141de:	2301      	movs	r3, #1
 80141e0:	6144      	str	r4, [r0, #20]
 80141e2:	6103      	str	r3, [r0, #16]
 80141e4:	bd10      	pop	{r4, pc}
 80141e6:	bf00      	nop
 80141e8:	08019b07 	.word	0x08019b07
 80141ec:	08019b18 	.word	0x08019b18

080141f0 <__multiply>:
 80141f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f4:	4691      	mov	r9, r2
 80141f6:	690a      	ldr	r2, [r1, #16]
 80141f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	bfb8      	it	lt
 8014200:	460b      	movlt	r3, r1
 8014202:	460c      	mov	r4, r1
 8014204:	bfbc      	itt	lt
 8014206:	464c      	movlt	r4, r9
 8014208:	4699      	movlt	r9, r3
 801420a:	6927      	ldr	r7, [r4, #16]
 801420c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014210:	68a3      	ldr	r3, [r4, #8]
 8014212:	6861      	ldr	r1, [r4, #4]
 8014214:	eb07 060a 	add.w	r6, r7, sl
 8014218:	42b3      	cmp	r3, r6
 801421a:	b085      	sub	sp, #20
 801421c:	bfb8      	it	lt
 801421e:	3101      	addlt	r1, #1
 8014220:	f7ff feda 	bl	8013fd8 <_Balloc>
 8014224:	b930      	cbnz	r0, 8014234 <__multiply+0x44>
 8014226:	4602      	mov	r2, r0
 8014228:	4b44      	ldr	r3, [pc, #272]	; (801433c <__multiply+0x14c>)
 801422a:	4845      	ldr	r0, [pc, #276]	; (8014340 <__multiply+0x150>)
 801422c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014230:	f7fe f88a 	bl	8012348 <__assert_func>
 8014234:	f100 0514 	add.w	r5, r0, #20
 8014238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801423c:	462b      	mov	r3, r5
 801423e:	2200      	movs	r2, #0
 8014240:	4543      	cmp	r3, r8
 8014242:	d321      	bcc.n	8014288 <__multiply+0x98>
 8014244:	f104 0314 	add.w	r3, r4, #20
 8014248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801424c:	f109 0314 	add.w	r3, r9, #20
 8014250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014254:	9202      	str	r2, [sp, #8]
 8014256:	1b3a      	subs	r2, r7, r4
 8014258:	3a15      	subs	r2, #21
 801425a:	f022 0203 	bic.w	r2, r2, #3
 801425e:	3204      	adds	r2, #4
 8014260:	f104 0115 	add.w	r1, r4, #21
 8014264:	428f      	cmp	r7, r1
 8014266:	bf38      	it	cc
 8014268:	2204      	movcc	r2, #4
 801426a:	9201      	str	r2, [sp, #4]
 801426c:	9a02      	ldr	r2, [sp, #8]
 801426e:	9303      	str	r3, [sp, #12]
 8014270:	429a      	cmp	r2, r3
 8014272:	d80c      	bhi.n	801428e <__multiply+0x9e>
 8014274:	2e00      	cmp	r6, #0
 8014276:	dd03      	ble.n	8014280 <__multiply+0x90>
 8014278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801427c:	2b00      	cmp	r3, #0
 801427e:	d05b      	beq.n	8014338 <__multiply+0x148>
 8014280:	6106      	str	r6, [r0, #16]
 8014282:	b005      	add	sp, #20
 8014284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014288:	f843 2b04 	str.w	r2, [r3], #4
 801428c:	e7d8      	b.n	8014240 <__multiply+0x50>
 801428e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014292:	f1ba 0f00 	cmp.w	sl, #0
 8014296:	d024      	beq.n	80142e2 <__multiply+0xf2>
 8014298:	f104 0e14 	add.w	lr, r4, #20
 801429c:	46a9      	mov	r9, r5
 801429e:	f04f 0c00 	mov.w	ip, #0
 80142a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80142a6:	f8d9 1000 	ldr.w	r1, [r9]
 80142aa:	fa1f fb82 	uxth.w	fp, r2
 80142ae:	b289      	uxth	r1, r1
 80142b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80142b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80142b8:	f8d9 2000 	ldr.w	r2, [r9]
 80142bc:	4461      	add	r1, ip
 80142be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80142c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80142ca:	b289      	uxth	r1, r1
 80142cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80142d0:	4577      	cmp	r7, lr
 80142d2:	f849 1b04 	str.w	r1, [r9], #4
 80142d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142da:	d8e2      	bhi.n	80142a2 <__multiply+0xb2>
 80142dc:	9a01      	ldr	r2, [sp, #4]
 80142de:	f845 c002 	str.w	ip, [r5, r2]
 80142e2:	9a03      	ldr	r2, [sp, #12]
 80142e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80142e8:	3304      	adds	r3, #4
 80142ea:	f1b9 0f00 	cmp.w	r9, #0
 80142ee:	d021      	beq.n	8014334 <__multiply+0x144>
 80142f0:	6829      	ldr	r1, [r5, #0]
 80142f2:	f104 0c14 	add.w	ip, r4, #20
 80142f6:	46ae      	mov	lr, r5
 80142f8:	f04f 0a00 	mov.w	sl, #0
 80142fc:	f8bc b000 	ldrh.w	fp, [ip]
 8014300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014304:	fb09 220b 	mla	r2, r9, fp, r2
 8014308:	4452      	add	r2, sl
 801430a:	b289      	uxth	r1, r1
 801430c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014310:	f84e 1b04 	str.w	r1, [lr], #4
 8014314:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014318:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801431c:	f8be 1000 	ldrh.w	r1, [lr]
 8014320:	fb09 110a 	mla	r1, r9, sl, r1
 8014324:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014328:	4567      	cmp	r7, ip
 801432a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801432e:	d8e5      	bhi.n	80142fc <__multiply+0x10c>
 8014330:	9a01      	ldr	r2, [sp, #4]
 8014332:	50a9      	str	r1, [r5, r2]
 8014334:	3504      	adds	r5, #4
 8014336:	e799      	b.n	801426c <__multiply+0x7c>
 8014338:	3e01      	subs	r6, #1
 801433a:	e79b      	b.n	8014274 <__multiply+0x84>
 801433c:	08019b07 	.word	0x08019b07
 8014340:	08019b18 	.word	0x08019b18

08014344 <__pow5mult>:
 8014344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014348:	4615      	mov	r5, r2
 801434a:	f012 0203 	ands.w	r2, r2, #3
 801434e:	4606      	mov	r6, r0
 8014350:	460f      	mov	r7, r1
 8014352:	d007      	beq.n	8014364 <__pow5mult+0x20>
 8014354:	4c25      	ldr	r4, [pc, #148]	; (80143ec <__pow5mult+0xa8>)
 8014356:	3a01      	subs	r2, #1
 8014358:	2300      	movs	r3, #0
 801435a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801435e:	f7ff fe9d 	bl	801409c <__multadd>
 8014362:	4607      	mov	r7, r0
 8014364:	10ad      	asrs	r5, r5, #2
 8014366:	d03d      	beq.n	80143e4 <__pow5mult+0xa0>
 8014368:	69f4      	ldr	r4, [r6, #28]
 801436a:	b97c      	cbnz	r4, 801438c <__pow5mult+0x48>
 801436c:	2010      	movs	r0, #16
 801436e:	f7ff fd7f 	bl	8013e70 <malloc>
 8014372:	4602      	mov	r2, r0
 8014374:	61f0      	str	r0, [r6, #28]
 8014376:	b928      	cbnz	r0, 8014384 <__pow5mult+0x40>
 8014378:	4b1d      	ldr	r3, [pc, #116]	; (80143f0 <__pow5mult+0xac>)
 801437a:	481e      	ldr	r0, [pc, #120]	; (80143f4 <__pow5mult+0xb0>)
 801437c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014380:	f7fd ffe2 	bl	8012348 <__assert_func>
 8014384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014388:	6004      	str	r4, [r0, #0]
 801438a:	60c4      	str	r4, [r0, #12]
 801438c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014394:	b94c      	cbnz	r4, 80143aa <__pow5mult+0x66>
 8014396:	f240 2171 	movw	r1, #625	; 0x271
 801439a:	4630      	mov	r0, r6
 801439c:	f7ff ff12 	bl	80141c4 <__i2b>
 80143a0:	2300      	movs	r3, #0
 80143a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80143a6:	4604      	mov	r4, r0
 80143a8:	6003      	str	r3, [r0, #0]
 80143aa:	f04f 0900 	mov.w	r9, #0
 80143ae:	07eb      	lsls	r3, r5, #31
 80143b0:	d50a      	bpl.n	80143c8 <__pow5mult+0x84>
 80143b2:	4639      	mov	r1, r7
 80143b4:	4622      	mov	r2, r4
 80143b6:	4630      	mov	r0, r6
 80143b8:	f7ff ff1a 	bl	80141f0 <__multiply>
 80143bc:	4639      	mov	r1, r7
 80143be:	4680      	mov	r8, r0
 80143c0:	4630      	mov	r0, r6
 80143c2:	f7ff fe49 	bl	8014058 <_Bfree>
 80143c6:	4647      	mov	r7, r8
 80143c8:	106d      	asrs	r5, r5, #1
 80143ca:	d00b      	beq.n	80143e4 <__pow5mult+0xa0>
 80143cc:	6820      	ldr	r0, [r4, #0]
 80143ce:	b938      	cbnz	r0, 80143e0 <__pow5mult+0x9c>
 80143d0:	4622      	mov	r2, r4
 80143d2:	4621      	mov	r1, r4
 80143d4:	4630      	mov	r0, r6
 80143d6:	f7ff ff0b 	bl	80141f0 <__multiply>
 80143da:	6020      	str	r0, [r4, #0]
 80143dc:	f8c0 9000 	str.w	r9, [r0]
 80143e0:	4604      	mov	r4, r0
 80143e2:	e7e4      	b.n	80143ae <__pow5mult+0x6a>
 80143e4:	4638      	mov	r0, r7
 80143e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ea:	bf00      	nop
 80143ec:	08019c68 	.word	0x08019c68
 80143f0:	080198a4 	.word	0x080198a4
 80143f4:	08019b18 	.word	0x08019b18

080143f8 <__lshift>:
 80143f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143fc:	460c      	mov	r4, r1
 80143fe:	6849      	ldr	r1, [r1, #4]
 8014400:	6923      	ldr	r3, [r4, #16]
 8014402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014406:	68a3      	ldr	r3, [r4, #8]
 8014408:	4607      	mov	r7, r0
 801440a:	4691      	mov	r9, r2
 801440c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014410:	f108 0601 	add.w	r6, r8, #1
 8014414:	42b3      	cmp	r3, r6
 8014416:	db0b      	blt.n	8014430 <__lshift+0x38>
 8014418:	4638      	mov	r0, r7
 801441a:	f7ff fddd 	bl	8013fd8 <_Balloc>
 801441e:	4605      	mov	r5, r0
 8014420:	b948      	cbnz	r0, 8014436 <__lshift+0x3e>
 8014422:	4602      	mov	r2, r0
 8014424:	4b28      	ldr	r3, [pc, #160]	; (80144c8 <__lshift+0xd0>)
 8014426:	4829      	ldr	r0, [pc, #164]	; (80144cc <__lshift+0xd4>)
 8014428:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801442c:	f7fd ff8c 	bl	8012348 <__assert_func>
 8014430:	3101      	adds	r1, #1
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	e7ee      	b.n	8014414 <__lshift+0x1c>
 8014436:	2300      	movs	r3, #0
 8014438:	f100 0114 	add.w	r1, r0, #20
 801443c:	f100 0210 	add.w	r2, r0, #16
 8014440:	4618      	mov	r0, r3
 8014442:	4553      	cmp	r3, sl
 8014444:	db33      	blt.n	80144ae <__lshift+0xb6>
 8014446:	6920      	ldr	r0, [r4, #16]
 8014448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801444c:	f104 0314 	add.w	r3, r4, #20
 8014450:	f019 091f 	ands.w	r9, r9, #31
 8014454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801445c:	d02b      	beq.n	80144b6 <__lshift+0xbe>
 801445e:	f1c9 0e20 	rsb	lr, r9, #32
 8014462:	468a      	mov	sl, r1
 8014464:	2200      	movs	r2, #0
 8014466:	6818      	ldr	r0, [r3, #0]
 8014468:	fa00 f009 	lsl.w	r0, r0, r9
 801446c:	4310      	orrs	r0, r2
 801446e:	f84a 0b04 	str.w	r0, [sl], #4
 8014472:	f853 2b04 	ldr.w	r2, [r3], #4
 8014476:	459c      	cmp	ip, r3
 8014478:	fa22 f20e 	lsr.w	r2, r2, lr
 801447c:	d8f3      	bhi.n	8014466 <__lshift+0x6e>
 801447e:	ebac 0304 	sub.w	r3, ip, r4
 8014482:	3b15      	subs	r3, #21
 8014484:	f023 0303 	bic.w	r3, r3, #3
 8014488:	3304      	adds	r3, #4
 801448a:	f104 0015 	add.w	r0, r4, #21
 801448e:	4584      	cmp	ip, r0
 8014490:	bf38      	it	cc
 8014492:	2304      	movcc	r3, #4
 8014494:	50ca      	str	r2, [r1, r3]
 8014496:	b10a      	cbz	r2, 801449c <__lshift+0xa4>
 8014498:	f108 0602 	add.w	r6, r8, #2
 801449c:	3e01      	subs	r6, #1
 801449e:	4638      	mov	r0, r7
 80144a0:	612e      	str	r6, [r5, #16]
 80144a2:	4621      	mov	r1, r4
 80144a4:	f7ff fdd8 	bl	8014058 <_Bfree>
 80144a8:	4628      	mov	r0, r5
 80144aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80144b2:	3301      	adds	r3, #1
 80144b4:	e7c5      	b.n	8014442 <__lshift+0x4a>
 80144b6:	3904      	subs	r1, #4
 80144b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80144bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80144c0:	459c      	cmp	ip, r3
 80144c2:	d8f9      	bhi.n	80144b8 <__lshift+0xc0>
 80144c4:	e7ea      	b.n	801449c <__lshift+0xa4>
 80144c6:	bf00      	nop
 80144c8:	08019b07 	.word	0x08019b07
 80144cc:	08019b18 	.word	0x08019b18

080144d0 <__mcmp>:
 80144d0:	b530      	push	{r4, r5, lr}
 80144d2:	6902      	ldr	r2, [r0, #16]
 80144d4:	690c      	ldr	r4, [r1, #16]
 80144d6:	1b12      	subs	r2, r2, r4
 80144d8:	d10e      	bne.n	80144f8 <__mcmp+0x28>
 80144da:	f100 0314 	add.w	r3, r0, #20
 80144de:	3114      	adds	r1, #20
 80144e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80144e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80144e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80144ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80144f0:	42a5      	cmp	r5, r4
 80144f2:	d003      	beq.n	80144fc <__mcmp+0x2c>
 80144f4:	d305      	bcc.n	8014502 <__mcmp+0x32>
 80144f6:	2201      	movs	r2, #1
 80144f8:	4610      	mov	r0, r2
 80144fa:	bd30      	pop	{r4, r5, pc}
 80144fc:	4283      	cmp	r3, r0
 80144fe:	d3f3      	bcc.n	80144e8 <__mcmp+0x18>
 8014500:	e7fa      	b.n	80144f8 <__mcmp+0x28>
 8014502:	f04f 32ff 	mov.w	r2, #4294967295
 8014506:	e7f7      	b.n	80144f8 <__mcmp+0x28>

08014508 <__mdiff>:
 8014508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801450c:	460c      	mov	r4, r1
 801450e:	4606      	mov	r6, r0
 8014510:	4611      	mov	r1, r2
 8014512:	4620      	mov	r0, r4
 8014514:	4690      	mov	r8, r2
 8014516:	f7ff ffdb 	bl	80144d0 <__mcmp>
 801451a:	1e05      	subs	r5, r0, #0
 801451c:	d110      	bne.n	8014540 <__mdiff+0x38>
 801451e:	4629      	mov	r1, r5
 8014520:	4630      	mov	r0, r6
 8014522:	f7ff fd59 	bl	8013fd8 <_Balloc>
 8014526:	b930      	cbnz	r0, 8014536 <__mdiff+0x2e>
 8014528:	4b3a      	ldr	r3, [pc, #232]	; (8014614 <__mdiff+0x10c>)
 801452a:	4602      	mov	r2, r0
 801452c:	f240 2137 	movw	r1, #567	; 0x237
 8014530:	4839      	ldr	r0, [pc, #228]	; (8014618 <__mdiff+0x110>)
 8014532:	f7fd ff09 	bl	8012348 <__assert_func>
 8014536:	2301      	movs	r3, #1
 8014538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801453c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014540:	bfa4      	itt	ge
 8014542:	4643      	movge	r3, r8
 8014544:	46a0      	movge	r8, r4
 8014546:	4630      	mov	r0, r6
 8014548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801454c:	bfa6      	itte	ge
 801454e:	461c      	movge	r4, r3
 8014550:	2500      	movge	r5, #0
 8014552:	2501      	movlt	r5, #1
 8014554:	f7ff fd40 	bl	8013fd8 <_Balloc>
 8014558:	b920      	cbnz	r0, 8014564 <__mdiff+0x5c>
 801455a:	4b2e      	ldr	r3, [pc, #184]	; (8014614 <__mdiff+0x10c>)
 801455c:	4602      	mov	r2, r0
 801455e:	f240 2145 	movw	r1, #581	; 0x245
 8014562:	e7e5      	b.n	8014530 <__mdiff+0x28>
 8014564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014568:	6926      	ldr	r6, [r4, #16]
 801456a:	60c5      	str	r5, [r0, #12]
 801456c:	f104 0914 	add.w	r9, r4, #20
 8014570:	f108 0514 	add.w	r5, r8, #20
 8014574:	f100 0e14 	add.w	lr, r0, #20
 8014578:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801457c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014580:	f108 0210 	add.w	r2, r8, #16
 8014584:	46f2      	mov	sl, lr
 8014586:	2100      	movs	r1, #0
 8014588:	f859 3b04 	ldr.w	r3, [r9], #4
 801458c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014590:	fa11 f88b 	uxtah	r8, r1, fp
 8014594:	b299      	uxth	r1, r3
 8014596:	0c1b      	lsrs	r3, r3, #16
 8014598:	eba8 0801 	sub.w	r8, r8, r1
 801459c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80145a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80145a4:	fa1f f888 	uxth.w	r8, r8
 80145a8:	1419      	asrs	r1, r3, #16
 80145aa:	454e      	cmp	r6, r9
 80145ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80145b0:	f84a 3b04 	str.w	r3, [sl], #4
 80145b4:	d8e8      	bhi.n	8014588 <__mdiff+0x80>
 80145b6:	1b33      	subs	r3, r6, r4
 80145b8:	3b15      	subs	r3, #21
 80145ba:	f023 0303 	bic.w	r3, r3, #3
 80145be:	3304      	adds	r3, #4
 80145c0:	3415      	adds	r4, #21
 80145c2:	42a6      	cmp	r6, r4
 80145c4:	bf38      	it	cc
 80145c6:	2304      	movcc	r3, #4
 80145c8:	441d      	add	r5, r3
 80145ca:	4473      	add	r3, lr
 80145cc:	469e      	mov	lr, r3
 80145ce:	462e      	mov	r6, r5
 80145d0:	4566      	cmp	r6, ip
 80145d2:	d30e      	bcc.n	80145f2 <__mdiff+0xea>
 80145d4:	f10c 0203 	add.w	r2, ip, #3
 80145d8:	1b52      	subs	r2, r2, r5
 80145da:	f022 0203 	bic.w	r2, r2, #3
 80145de:	3d03      	subs	r5, #3
 80145e0:	45ac      	cmp	ip, r5
 80145e2:	bf38      	it	cc
 80145e4:	2200      	movcc	r2, #0
 80145e6:	4413      	add	r3, r2
 80145e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80145ec:	b17a      	cbz	r2, 801460e <__mdiff+0x106>
 80145ee:	6107      	str	r7, [r0, #16]
 80145f0:	e7a4      	b.n	801453c <__mdiff+0x34>
 80145f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80145f6:	fa11 f288 	uxtah	r2, r1, r8
 80145fa:	1414      	asrs	r4, r2, #16
 80145fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014600:	b292      	uxth	r2, r2
 8014602:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014606:	f84e 2b04 	str.w	r2, [lr], #4
 801460a:	1421      	asrs	r1, r4, #16
 801460c:	e7e0      	b.n	80145d0 <__mdiff+0xc8>
 801460e:	3f01      	subs	r7, #1
 8014610:	e7ea      	b.n	80145e8 <__mdiff+0xe0>
 8014612:	bf00      	nop
 8014614:	08019b07 	.word	0x08019b07
 8014618:	08019b18 	.word	0x08019b18

0801461c <__d2b>:
 801461c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014620:	460f      	mov	r7, r1
 8014622:	2101      	movs	r1, #1
 8014624:	ec59 8b10 	vmov	r8, r9, d0
 8014628:	4616      	mov	r6, r2
 801462a:	f7ff fcd5 	bl	8013fd8 <_Balloc>
 801462e:	4604      	mov	r4, r0
 8014630:	b930      	cbnz	r0, 8014640 <__d2b+0x24>
 8014632:	4602      	mov	r2, r0
 8014634:	4b24      	ldr	r3, [pc, #144]	; (80146c8 <__d2b+0xac>)
 8014636:	4825      	ldr	r0, [pc, #148]	; (80146cc <__d2b+0xb0>)
 8014638:	f240 310f 	movw	r1, #783	; 0x30f
 801463c:	f7fd fe84 	bl	8012348 <__assert_func>
 8014640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014648:	bb2d      	cbnz	r5, 8014696 <__d2b+0x7a>
 801464a:	9301      	str	r3, [sp, #4]
 801464c:	f1b8 0300 	subs.w	r3, r8, #0
 8014650:	d026      	beq.n	80146a0 <__d2b+0x84>
 8014652:	4668      	mov	r0, sp
 8014654:	9300      	str	r3, [sp, #0]
 8014656:	f7ff fd87 	bl	8014168 <__lo0bits>
 801465a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801465e:	b1e8      	cbz	r0, 801469c <__d2b+0x80>
 8014660:	f1c0 0320 	rsb	r3, r0, #32
 8014664:	fa02 f303 	lsl.w	r3, r2, r3
 8014668:	430b      	orrs	r3, r1
 801466a:	40c2      	lsrs	r2, r0
 801466c:	6163      	str	r3, [r4, #20]
 801466e:	9201      	str	r2, [sp, #4]
 8014670:	9b01      	ldr	r3, [sp, #4]
 8014672:	61a3      	str	r3, [r4, #24]
 8014674:	2b00      	cmp	r3, #0
 8014676:	bf14      	ite	ne
 8014678:	2202      	movne	r2, #2
 801467a:	2201      	moveq	r2, #1
 801467c:	6122      	str	r2, [r4, #16]
 801467e:	b1bd      	cbz	r5, 80146b0 <__d2b+0x94>
 8014680:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014684:	4405      	add	r5, r0
 8014686:	603d      	str	r5, [r7, #0]
 8014688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801468c:	6030      	str	r0, [r6, #0]
 801468e:	4620      	mov	r0, r4
 8014690:	b003      	add	sp, #12
 8014692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801469a:	e7d6      	b.n	801464a <__d2b+0x2e>
 801469c:	6161      	str	r1, [r4, #20]
 801469e:	e7e7      	b.n	8014670 <__d2b+0x54>
 80146a0:	a801      	add	r0, sp, #4
 80146a2:	f7ff fd61 	bl	8014168 <__lo0bits>
 80146a6:	9b01      	ldr	r3, [sp, #4]
 80146a8:	6163      	str	r3, [r4, #20]
 80146aa:	3020      	adds	r0, #32
 80146ac:	2201      	movs	r2, #1
 80146ae:	e7e5      	b.n	801467c <__d2b+0x60>
 80146b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80146b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80146b8:	6038      	str	r0, [r7, #0]
 80146ba:	6918      	ldr	r0, [r3, #16]
 80146bc:	f7ff fd34 	bl	8014128 <__hi0bits>
 80146c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80146c4:	e7e2      	b.n	801468c <__d2b+0x70>
 80146c6:	bf00      	nop
 80146c8:	08019b07 	.word	0x08019b07
 80146cc:	08019b18 	.word	0x08019b18

080146d0 <__ssputs_r>:
 80146d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146d4:	688e      	ldr	r6, [r1, #8]
 80146d6:	461f      	mov	r7, r3
 80146d8:	42be      	cmp	r6, r7
 80146da:	680b      	ldr	r3, [r1, #0]
 80146dc:	4682      	mov	sl, r0
 80146de:	460c      	mov	r4, r1
 80146e0:	4690      	mov	r8, r2
 80146e2:	d82c      	bhi.n	801473e <__ssputs_r+0x6e>
 80146e4:	898a      	ldrh	r2, [r1, #12]
 80146e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80146ea:	d026      	beq.n	801473a <__ssputs_r+0x6a>
 80146ec:	6965      	ldr	r5, [r4, #20]
 80146ee:	6909      	ldr	r1, [r1, #16]
 80146f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146f4:	eba3 0901 	sub.w	r9, r3, r1
 80146f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80146fc:	1c7b      	adds	r3, r7, #1
 80146fe:	444b      	add	r3, r9
 8014700:	106d      	asrs	r5, r5, #1
 8014702:	429d      	cmp	r5, r3
 8014704:	bf38      	it	cc
 8014706:	461d      	movcc	r5, r3
 8014708:	0553      	lsls	r3, r2, #21
 801470a:	d527      	bpl.n	801475c <__ssputs_r+0x8c>
 801470c:	4629      	mov	r1, r5
 801470e:	f7ff fbd7 	bl	8013ec0 <_malloc_r>
 8014712:	4606      	mov	r6, r0
 8014714:	b360      	cbz	r0, 8014770 <__ssputs_r+0xa0>
 8014716:	6921      	ldr	r1, [r4, #16]
 8014718:	464a      	mov	r2, r9
 801471a:	f7fe fd53 	bl	80131c4 <memcpy>
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014728:	81a3      	strh	r3, [r4, #12]
 801472a:	6126      	str	r6, [r4, #16]
 801472c:	6165      	str	r5, [r4, #20]
 801472e:	444e      	add	r6, r9
 8014730:	eba5 0509 	sub.w	r5, r5, r9
 8014734:	6026      	str	r6, [r4, #0]
 8014736:	60a5      	str	r5, [r4, #8]
 8014738:	463e      	mov	r6, r7
 801473a:	42be      	cmp	r6, r7
 801473c:	d900      	bls.n	8014740 <__ssputs_r+0x70>
 801473e:	463e      	mov	r6, r7
 8014740:	6820      	ldr	r0, [r4, #0]
 8014742:	4632      	mov	r2, r6
 8014744:	4641      	mov	r1, r8
 8014746:	f000 fba3 	bl	8014e90 <memmove>
 801474a:	68a3      	ldr	r3, [r4, #8]
 801474c:	1b9b      	subs	r3, r3, r6
 801474e:	60a3      	str	r3, [r4, #8]
 8014750:	6823      	ldr	r3, [r4, #0]
 8014752:	4433      	add	r3, r6
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	2000      	movs	r0, #0
 8014758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801475c:	462a      	mov	r2, r5
 801475e:	f000 fc2d 	bl	8014fbc <_realloc_r>
 8014762:	4606      	mov	r6, r0
 8014764:	2800      	cmp	r0, #0
 8014766:	d1e0      	bne.n	801472a <__ssputs_r+0x5a>
 8014768:	6921      	ldr	r1, [r4, #16]
 801476a:	4650      	mov	r0, sl
 801476c:	f7ff fb34 	bl	8013dd8 <_free_r>
 8014770:	230c      	movs	r3, #12
 8014772:	f8ca 3000 	str.w	r3, [sl]
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801477c:	81a3      	strh	r3, [r4, #12]
 801477e:	f04f 30ff 	mov.w	r0, #4294967295
 8014782:	e7e9      	b.n	8014758 <__ssputs_r+0x88>

08014784 <_svfiprintf_r>:
 8014784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	4698      	mov	r8, r3
 801478a:	898b      	ldrh	r3, [r1, #12]
 801478c:	061b      	lsls	r3, r3, #24
 801478e:	b09d      	sub	sp, #116	; 0x74
 8014790:	4607      	mov	r7, r0
 8014792:	460d      	mov	r5, r1
 8014794:	4614      	mov	r4, r2
 8014796:	d50e      	bpl.n	80147b6 <_svfiprintf_r+0x32>
 8014798:	690b      	ldr	r3, [r1, #16]
 801479a:	b963      	cbnz	r3, 80147b6 <_svfiprintf_r+0x32>
 801479c:	2140      	movs	r1, #64	; 0x40
 801479e:	f7ff fb8f 	bl	8013ec0 <_malloc_r>
 80147a2:	6028      	str	r0, [r5, #0]
 80147a4:	6128      	str	r0, [r5, #16]
 80147a6:	b920      	cbnz	r0, 80147b2 <_svfiprintf_r+0x2e>
 80147a8:	230c      	movs	r3, #12
 80147aa:	603b      	str	r3, [r7, #0]
 80147ac:	f04f 30ff 	mov.w	r0, #4294967295
 80147b0:	e0d0      	b.n	8014954 <_svfiprintf_r+0x1d0>
 80147b2:	2340      	movs	r3, #64	; 0x40
 80147b4:	616b      	str	r3, [r5, #20]
 80147b6:	2300      	movs	r3, #0
 80147b8:	9309      	str	r3, [sp, #36]	; 0x24
 80147ba:	2320      	movs	r3, #32
 80147bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80147c4:	2330      	movs	r3, #48	; 0x30
 80147c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801496c <_svfiprintf_r+0x1e8>
 80147ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147ce:	f04f 0901 	mov.w	r9, #1
 80147d2:	4623      	mov	r3, r4
 80147d4:	469a      	mov	sl, r3
 80147d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147da:	b10a      	cbz	r2, 80147e0 <_svfiprintf_r+0x5c>
 80147dc:	2a25      	cmp	r2, #37	; 0x25
 80147de:	d1f9      	bne.n	80147d4 <_svfiprintf_r+0x50>
 80147e0:	ebba 0b04 	subs.w	fp, sl, r4
 80147e4:	d00b      	beq.n	80147fe <_svfiprintf_r+0x7a>
 80147e6:	465b      	mov	r3, fp
 80147e8:	4622      	mov	r2, r4
 80147ea:	4629      	mov	r1, r5
 80147ec:	4638      	mov	r0, r7
 80147ee:	f7ff ff6f 	bl	80146d0 <__ssputs_r>
 80147f2:	3001      	adds	r0, #1
 80147f4:	f000 80a9 	beq.w	801494a <_svfiprintf_r+0x1c6>
 80147f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147fa:	445a      	add	r2, fp
 80147fc:	9209      	str	r2, [sp, #36]	; 0x24
 80147fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 80a1 	beq.w	801494a <_svfiprintf_r+0x1c6>
 8014808:	2300      	movs	r3, #0
 801480a:	f04f 32ff 	mov.w	r2, #4294967295
 801480e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014812:	f10a 0a01 	add.w	sl, sl, #1
 8014816:	9304      	str	r3, [sp, #16]
 8014818:	9307      	str	r3, [sp, #28]
 801481a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801481e:	931a      	str	r3, [sp, #104]	; 0x68
 8014820:	4654      	mov	r4, sl
 8014822:	2205      	movs	r2, #5
 8014824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014828:	4850      	ldr	r0, [pc, #320]	; (801496c <_svfiprintf_r+0x1e8>)
 801482a:	f7eb fdb9 	bl	80003a0 <memchr>
 801482e:	9a04      	ldr	r2, [sp, #16]
 8014830:	b9d8      	cbnz	r0, 801486a <_svfiprintf_r+0xe6>
 8014832:	06d0      	lsls	r0, r2, #27
 8014834:	bf44      	itt	mi
 8014836:	2320      	movmi	r3, #32
 8014838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801483c:	0711      	lsls	r1, r2, #28
 801483e:	bf44      	itt	mi
 8014840:	232b      	movmi	r3, #43	; 0x2b
 8014842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014846:	f89a 3000 	ldrb.w	r3, [sl]
 801484a:	2b2a      	cmp	r3, #42	; 0x2a
 801484c:	d015      	beq.n	801487a <_svfiprintf_r+0xf6>
 801484e:	9a07      	ldr	r2, [sp, #28]
 8014850:	4654      	mov	r4, sl
 8014852:	2000      	movs	r0, #0
 8014854:	f04f 0c0a 	mov.w	ip, #10
 8014858:	4621      	mov	r1, r4
 801485a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801485e:	3b30      	subs	r3, #48	; 0x30
 8014860:	2b09      	cmp	r3, #9
 8014862:	d94d      	bls.n	8014900 <_svfiprintf_r+0x17c>
 8014864:	b1b0      	cbz	r0, 8014894 <_svfiprintf_r+0x110>
 8014866:	9207      	str	r2, [sp, #28]
 8014868:	e014      	b.n	8014894 <_svfiprintf_r+0x110>
 801486a:	eba0 0308 	sub.w	r3, r0, r8
 801486e:	fa09 f303 	lsl.w	r3, r9, r3
 8014872:	4313      	orrs	r3, r2
 8014874:	9304      	str	r3, [sp, #16]
 8014876:	46a2      	mov	sl, r4
 8014878:	e7d2      	b.n	8014820 <_svfiprintf_r+0x9c>
 801487a:	9b03      	ldr	r3, [sp, #12]
 801487c:	1d19      	adds	r1, r3, #4
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	9103      	str	r1, [sp, #12]
 8014882:	2b00      	cmp	r3, #0
 8014884:	bfbb      	ittet	lt
 8014886:	425b      	neglt	r3, r3
 8014888:	f042 0202 	orrlt.w	r2, r2, #2
 801488c:	9307      	strge	r3, [sp, #28]
 801488e:	9307      	strlt	r3, [sp, #28]
 8014890:	bfb8      	it	lt
 8014892:	9204      	strlt	r2, [sp, #16]
 8014894:	7823      	ldrb	r3, [r4, #0]
 8014896:	2b2e      	cmp	r3, #46	; 0x2e
 8014898:	d10c      	bne.n	80148b4 <_svfiprintf_r+0x130>
 801489a:	7863      	ldrb	r3, [r4, #1]
 801489c:	2b2a      	cmp	r3, #42	; 0x2a
 801489e:	d134      	bne.n	801490a <_svfiprintf_r+0x186>
 80148a0:	9b03      	ldr	r3, [sp, #12]
 80148a2:	1d1a      	adds	r2, r3, #4
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	9203      	str	r2, [sp, #12]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	bfb8      	it	lt
 80148ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80148b0:	3402      	adds	r4, #2
 80148b2:	9305      	str	r3, [sp, #20]
 80148b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801497c <_svfiprintf_r+0x1f8>
 80148b8:	7821      	ldrb	r1, [r4, #0]
 80148ba:	2203      	movs	r2, #3
 80148bc:	4650      	mov	r0, sl
 80148be:	f7eb fd6f 	bl	80003a0 <memchr>
 80148c2:	b138      	cbz	r0, 80148d4 <_svfiprintf_r+0x150>
 80148c4:	9b04      	ldr	r3, [sp, #16]
 80148c6:	eba0 000a 	sub.w	r0, r0, sl
 80148ca:	2240      	movs	r2, #64	; 0x40
 80148cc:	4082      	lsls	r2, r0
 80148ce:	4313      	orrs	r3, r2
 80148d0:	3401      	adds	r4, #1
 80148d2:	9304      	str	r3, [sp, #16]
 80148d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148d8:	4825      	ldr	r0, [pc, #148]	; (8014970 <_svfiprintf_r+0x1ec>)
 80148da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148de:	2206      	movs	r2, #6
 80148e0:	f7eb fd5e 	bl	80003a0 <memchr>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d038      	beq.n	801495a <_svfiprintf_r+0x1d6>
 80148e8:	4b22      	ldr	r3, [pc, #136]	; (8014974 <_svfiprintf_r+0x1f0>)
 80148ea:	bb1b      	cbnz	r3, 8014934 <_svfiprintf_r+0x1b0>
 80148ec:	9b03      	ldr	r3, [sp, #12]
 80148ee:	3307      	adds	r3, #7
 80148f0:	f023 0307 	bic.w	r3, r3, #7
 80148f4:	3308      	adds	r3, #8
 80148f6:	9303      	str	r3, [sp, #12]
 80148f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148fa:	4433      	add	r3, r6
 80148fc:	9309      	str	r3, [sp, #36]	; 0x24
 80148fe:	e768      	b.n	80147d2 <_svfiprintf_r+0x4e>
 8014900:	fb0c 3202 	mla	r2, ip, r2, r3
 8014904:	460c      	mov	r4, r1
 8014906:	2001      	movs	r0, #1
 8014908:	e7a6      	b.n	8014858 <_svfiprintf_r+0xd4>
 801490a:	2300      	movs	r3, #0
 801490c:	3401      	adds	r4, #1
 801490e:	9305      	str	r3, [sp, #20]
 8014910:	4619      	mov	r1, r3
 8014912:	f04f 0c0a 	mov.w	ip, #10
 8014916:	4620      	mov	r0, r4
 8014918:	f810 2b01 	ldrb.w	r2, [r0], #1
 801491c:	3a30      	subs	r2, #48	; 0x30
 801491e:	2a09      	cmp	r2, #9
 8014920:	d903      	bls.n	801492a <_svfiprintf_r+0x1a6>
 8014922:	2b00      	cmp	r3, #0
 8014924:	d0c6      	beq.n	80148b4 <_svfiprintf_r+0x130>
 8014926:	9105      	str	r1, [sp, #20]
 8014928:	e7c4      	b.n	80148b4 <_svfiprintf_r+0x130>
 801492a:	fb0c 2101 	mla	r1, ip, r1, r2
 801492e:	4604      	mov	r4, r0
 8014930:	2301      	movs	r3, #1
 8014932:	e7f0      	b.n	8014916 <_svfiprintf_r+0x192>
 8014934:	ab03      	add	r3, sp, #12
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	462a      	mov	r2, r5
 801493a:	4b0f      	ldr	r3, [pc, #60]	; (8014978 <_svfiprintf_r+0x1f4>)
 801493c:	a904      	add	r1, sp, #16
 801493e:	4638      	mov	r0, r7
 8014940:	f7fd fe7e 	bl	8012640 <_printf_float>
 8014944:	1c42      	adds	r2, r0, #1
 8014946:	4606      	mov	r6, r0
 8014948:	d1d6      	bne.n	80148f8 <_svfiprintf_r+0x174>
 801494a:	89ab      	ldrh	r3, [r5, #12]
 801494c:	065b      	lsls	r3, r3, #25
 801494e:	f53f af2d 	bmi.w	80147ac <_svfiprintf_r+0x28>
 8014952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014954:	b01d      	add	sp, #116	; 0x74
 8014956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495a:	ab03      	add	r3, sp, #12
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	462a      	mov	r2, r5
 8014960:	4b05      	ldr	r3, [pc, #20]	; (8014978 <_svfiprintf_r+0x1f4>)
 8014962:	a904      	add	r1, sp, #16
 8014964:	4638      	mov	r0, r7
 8014966:	f7fe f8f3 	bl	8012b50 <_printf_i>
 801496a:	e7eb      	b.n	8014944 <_svfiprintf_r+0x1c0>
 801496c:	08019c74 	.word	0x08019c74
 8014970:	08019c7e 	.word	0x08019c7e
 8014974:	08012641 	.word	0x08012641
 8014978:	080146d1 	.word	0x080146d1
 801497c:	08019c7a 	.word	0x08019c7a

08014980 <__sfputc_r>:
 8014980:	6893      	ldr	r3, [r2, #8]
 8014982:	3b01      	subs	r3, #1
 8014984:	2b00      	cmp	r3, #0
 8014986:	b410      	push	{r4}
 8014988:	6093      	str	r3, [r2, #8]
 801498a:	da08      	bge.n	801499e <__sfputc_r+0x1e>
 801498c:	6994      	ldr	r4, [r2, #24]
 801498e:	42a3      	cmp	r3, r4
 8014990:	db01      	blt.n	8014996 <__sfputc_r+0x16>
 8014992:	290a      	cmp	r1, #10
 8014994:	d103      	bne.n	801499e <__sfputc_r+0x1e>
 8014996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801499a:	f000 b9e3 	b.w	8014d64 <__swbuf_r>
 801499e:	6813      	ldr	r3, [r2, #0]
 80149a0:	1c58      	adds	r0, r3, #1
 80149a2:	6010      	str	r0, [r2, #0]
 80149a4:	7019      	strb	r1, [r3, #0]
 80149a6:	4608      	mov	r0, r1
 80149a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ac:	4770      	bx	lr

080149ae <__sfputs_r>:
 80149ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b0:	4606      	mov	r6, r0
 80149b2:	460f      	mov	r7, r1
 80149b4:	4614      	mov	r4, r2
 80149b6:	18d5      	adds	r5, r2, r3
 80149b8:	42ac      	cmp	r4, r5
 80149ba:	d101      	bne.n	80149c0 <__sfputs_r+0x12>
 80149bc:	2000      	movs	r0, #0
 80149be:	e007      	b.n	80149d0 <__sfputs_r+0x22>
 80149c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149c4:	463a      	mov	r2, r7
 80149c6:	4630      	mov	r0, r6
 80149c8:	f7ff ffda 	bl	8014980 <__sfputc_r>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d1f3      	bne.n	80149b8 <__sfputs_r+0xa>
 80149d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149d4 <_vfiprintf_r>:
 80149d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d8:	460d      	mov	r5, r1
 80149da:	b09d      	sub	sp, #116	; 0x74
 80149dc:	4614      	mov	r4, r2
 80149de:	4698      	mov	r8, r3
 80149e0:	4606      	mov	r6, r0
 80149e2:	b118      	cbz	r0, 80149ec <_vfiprintf_r+0x18>
 80149e4:	6a03      	ldr	r3, [r0, #32]
 80149e6:	b90b      	cbnz	r3, 80149ec <_vfiprintf_r+0x18>
 80149e8:	f7fe fa4e 	bl	8012e88 <__sinit>
 80149ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149ee:	07d9      	lsls	r1, r3, #31
 80149f0:	d405      	bmi.n	80149fe <_vfiprintf_r+0x2a>
 80149f2:	89ab      	ldrh	r3, [r5, #12]
 80149f4:	059a      	lsls	r2, r3, #22
 80149f6:	d402      	bmi.n	80149fe <_vfiprintf_r+0x2a>
 80149f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149fa:	f7fe fbd9 	bl	80131b0 <__retarget_lock_acquire_recursive>
 80149fe:	89ab      	ldrh	r3, [r5, #12]
 8014a00:	071b      	lsls	r3, r3, #28
 8014a02:	d501      	bpl.n	8014a08 <_vfiprintf_r+0x34>
 8014a04:	692b      	ldr	r3, [r5, #16]
 8014a06:	b99b      	cbnz	r3, 8014a30 <_vfiprintf_r+0x5c>
 8014a08:	4629      	mov	r1, r5
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f000 f9e8 	bl	8014de0 <__swsetup_r>
 8014a10:	b170      	cbz	r0, 8014a30 <_vfiprintf_r+0x5c>
 8014a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a14:	07dc      	lsls	r4, r3, #31
 8014a16:	d504      	bpl.n	8014a22 <_vfiprintf_r+0x4e>
 8014a18:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1c:	b01d      	add	sp, #116	; 0x74
 8014a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a22:	89ab      	ldrh	r3, [r5, #12]
 8014a24:	0598      	lsls	r0, r3, #22
 8014a26:	d4f7      	bmi.n	8014a18 <_vfiprintf_r+0x44>
 8014a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a2a:	f7fe fbc2 	bl	80131b2 <__retarget_lock_release_recursive>
 8014a2e:	e7f3      	b.n	8014a18 <_vfiprintf_r+0x44>
 8014a30:	2300      	movs	r3, #0
 8014a32:	9309      	str	r3, [sp, #36]	; 0x24
 8014a34:	2320      	movs	r3, #32
 8014a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a3e:	2330      	movs	r3, #48	; 0x30
 8014a40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014bf4 <_vfiprintf_r+0x220>
 8014a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a48:	f04f 0901 	mov.w	r9, #1
 8014a4c:	4623      	mov	r3, r4
 8014a4e:	469a      	mov	sl, r3
 8014a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a54:	b10a      	cbz	r2, 8014a5a <_vfiprintf_r+0x86>
 8014a56:	2a25      	cmp	r2, #37	; 0x25
 8014a58:	d1f9      	bne.n	8014a4e <_vfiprintf_r+0x7a>
 8014a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a5e:	d00b      	beq.n	8014a78 <_vfiprintf_r+0xa4>
 8014a60:	465b      	mov	r3, fp
 8014a62:	4622      	mov	r2, r4
 8014a64:	4629      	mov	r1, r5
 8014a66:	4630      	mov	r0, r6
 8014a68:	f7ff ffa1 	bl	80149ae <__sfputs_r>
 8014a6c:	3001      	adds	r0, #1
 8014a6e:	f000 80a9 	beq.w	8014bc4 <_vfiprintf_r+0x1f0>
 8014a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a74:	445a      	add	r2, fp
 8014a76:	9209      	str	r2, [sp, #36]	; 0x24
 8014a78:	f89a 3000 	ldrb.w	r3, [sl]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 80a1 	beq.w	8014bc4 <_vfiprintf_r+0x1f0>
 8014a82:	2300      	movs	r3, #0
 8014a84:	f04f 32ff 	mov.w	r2, #4294967295
 8014a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a8c:	f10a 0a01 	add.w	sl, sl, #1
 8014a90:	9304      	str	r3, [sp, #16]
 8014a92:	9307      	str	r3, [sp, #28]
 8014a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a98:	931a      	str	r3, [sp, #104]	; 0x68
 8014a9a:	4654      	mov	r4, sl
 8014a9c:	2205      	movs	r2, #5
 8014a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aa2:	4854      	ldr	r0, [pc, #336]	; (8014bf4 <_vfiprintf_r+0x220>)
 8014aa4:	f7eb fc7c 	bl	80003a0 <memchr>
 8014aa8:	9a04      	ldr	r2, [sp, #16]
 8014aaa:	b9d8      	cbnz	r0, 8014ae4 <_vfiprintf_r+0x110>
 8014aac:	06d1      	lsls	r1, r2, #27
 8014aae:	bf44      	itt	mi
 8014ab0:	2320      	movmi	r3, #32
 8014ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ab6:	0713      	lsls	r3, r2, #28
 8014ab8:	bf44      	itt	mi
 8014aba:	232b      	movmi	r3, #43	; 0x2b
 8014abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ac6:	d015      	beq.n	8014af4 <_vfiprintf_r+0x120>
 8014ac8:	9a07      	ldr	r2, [sp, #28]
 8014aca:	4654      	mov	r4, sl
 8014acc:	2000      	movs	r0, #0
 8014ace:	f04f 0c0a 	mov.w	ip, #10
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ad8:	3b30      	subs	r3, #48	; 0x30
 8014ada:	2b09      	cmp	r3, #9
 8014adc:	d94d      	bls.n	8014b7a <_vfiprintf_r+0x1a6>
 8014ade:	b1b0      	cbz	r0, 8014b0e <_vfiprintf_r+0x13a>
 8014ae0:	9207      	str	r2, [sp, #28]
 8014ae2:	e014      	b.n	8014b0e <_vfiprintf_r+0x13a>
 8014ae4:	eba0 0308 	sub.w	r3, r0, r8
 8014ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8014aec:	4313      	orrs	r3, r2
 8014aee:	9304      	str	r3, [sp, #16]
 8014af0:	46a2      	mov	sl, r4
 8014af2:	e7d2      	b.n	8014a9a <_vfiprintf_r+0xc6>
 8014af4:	9b03      	ldr	r3, [sp, #12]
 8014af6:	1d19      	adds	r1, r3, #4
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	9103      	str	r1, [sp, #12]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	bfbb      	ittet	lt
 8014b00:	425b      	neglt	r3, r3
 8014b02:	f042 0202 	orrlt.w	r2, r2, #2
 8014b06:	9307      	strge	r3, [sp, #28]
 8014b08:	9307      	strlt	r3, [sp, #28]
 8014b0a:	bfb8      	it	lt
 8014b0c:	9204      	strlt	r2, [sp, #16]
 8014b0e:	7823      	ldrb	r3, [r4, #0]
 8014b10:	2b2e      	cmp	r3, #46	; 0x2e
 8014b12:	d10c      	bne.n	8014b2e <_vfiprintf_r+0x15a>
 8014b14:	7863      	ldrb	r3, [r4, #1]
 8014b16:	2b2a      	cmp	r3, #42	; 0x2a
 8014b18:	d134      	bne.n	8014b84 <_vfiprintf_r+0x1b0>
 8014b1a:	9b03      	ldr	r3, [sp, #12]
 8014b1c:	1d1a      	adds	r2, r3, #4
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	9203      	str	r2, [sp, #12]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	bfb8      	it	lt
 8014b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b2a:	3402      	adds	r4, #2
 8014b2c:	9305      	str	r3, [sp, #20]
 8014b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014c04 <_vfiprintf_r+0x230>
 8014b32:	7821      	ldrb	r1, [r4, #0]
 8014b34:	2203      	movs	r2, #3
 8014b36:	4650      	mov	r0, sl
 8014b38:	f7eb fc32 	bl	80003a0 <memchr>
 8014b3c:	b138      	cbz	r0, 8014b4e <_vfiprintf_r+0x17a>
 8014b3e:	9b04      	ldr	r3, [sp, #16]
 8014b40:	eba0 000a 	sub.w	r0, r0, sl
 8014b44:	2240      	movs	r2, #64	; 0x40
 8014b46:	4082      	lsls	r2, r0
 8014b48:	4313      	orrs	r3, r2
 8014b4a:	3401      	adds	r4, #1
 8014b4c:	9304      	str	r3, [sp, #16]
 8014b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b52:	4829      	ldr	r0, [pc, #164]	; (8014bf8 <_vfiprintf_r+0x224>)
 8014b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b58:	2206      	movs	r2, #6
 8014b5a:	f7eb fc21 	bl	80003a0 <memchr>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d03f      	beq.n	8014be2 <_vfiprintf_r+0x20e>
 8014b62:	4b26      	ldr	r3, [pc, #152]	; (8014bfc <_vfiprintf_r+0x228>)
 8014b64:	bb1b      	cbnz	r3, 8014bae <_vfiprintf_r+0x1da>
 8014b66:	9b03      	ldr	r3, [sp, #12]
 8014b68:	3307      	adds	r3, #7
 8014b6a:	f023 0307 	bic.w	r3, r3, #7
 8014b6e:	3308      	adds	r3, #8
 8014b70:	9303      	str	r3, [sp, #12]
 8014b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b74:	443b      	add	r3, r7
 8014b76:	9309      	str	r3, [sp, #36]	; 0x24
 8014b78:	e768      	b.n	8014a4c <_vfiprintf_r+0x78>
 8014b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b7e:	460c      	mov	r4, r1
 8014b80:	2001      	movs	r0, #1
 8014b82:	e7a6      	b.n	8014ad2 <_vfiprintf_r+0xfe>
 8014b84:	2300      	movs	r3, #0
 8014b86:	3401      	adds	r4, #1
 8014b88:	9305      	str	r3, [sp, #20]
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	f04f 0c0a 	mov.w	ip, #10
 8014b90:	4620      	mov	r0, r4
 8014b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b96:	3a30      	subs	r2, #48	; 0x30
 8014b98:	2a09      	cmp	r2, #9
 8014b9a:	d903      	bls.n	8014ba4 <_vfiprintf_r+0x1d0>
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d0c6      	beq.n	8014b2e <_vfiprintf_r+0x15a>
 8014ba0:	9105      	str	r1, [sp, #20]
 8014ba2:	e7c4      	b.n	8014b2e <_vfiprintf_r+0x15a>
 8014ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ba8:	4604      	mov	r4, r0
 8014baa:	2301      	movs	r3, #1
 8014bac:	e7f0      	b.n	8014b90 <_vfiprintf_r+0x1bc>
 8014bae:	ab03      	add	r3, sp, #12
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	462a      	mov	r2, r5
 8014bb4:	4b12      	ldr	r3, [pc, #72]	; (8014c00 <_vfiprintf_r+0x22c>)
 8014bb6:	a904      	add	r1, sp, #16
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f7fd fd41 	bl	8012640 <_printf_float>
 8014bbe:	4607      	mov	r7, r0
 8014bc0:	1c78      	adds	r0, r7, #1
 8014bc2:	d1d6      	bne.n	8014b72 <_vfiprintf_r+0x19e>
 8014bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bc6:	07d9      	lsls	r1, r3, #31
 8014bc8:	d405      	bmi.n	8014bd6 <_vfiprintf_r+0x202>
 8014bca:	89ab      	ldrh	r3, [r5, #12]
 8014bcc:	059a      	lsls	r2, r3, #22
 8014bce:	d402      	bmi.n	8014bd6 <_vfiprintf_r+0x202>
 8014bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bd2:	f7fe faee 	bl	80131b2 <__retarget_lock_release_recursive>
 8014bd6:	89ab      	ldrh	r3, [r5, #12]
 8014bd8:	065b      	lsls	r3, r3, #25
 8014bda:	f53f af1d 	bmi.w	8014a18 <_vfiprintf_r+0x44>
 8014bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014be0:	e71c      	b.n	8014a1c <_vfiprintf_r+0x48>
 8014be2:	ab03      	add	r3, sp, #12
 8014be4:	9300      	str	r3, [sp, #0]
 8014be6:	462a      	mov	r2, r5
 8014be8:	4b05      	ldr	r3, [pc, #20]	; (8014c00 <_vfiprintf_r+0x22c>)
 8014bea:	a904      	add	r1, sp, #16
 8014bec:	4630      	mov	r0, r6
 8014bee:	f7fd ffaf 	bl	8012b50 <_printf_i>
 8014bf2:	e7e4      	b.n	8014bbe <_vfiprintf_r+0x1ea>
 8014bf4:	08019c74 	.word	0x08019c74
 8014bf8:	08019c7e 	.word	0x08019c7e
 8014bfc:	08012641 	.word	0x08012641
 8014c00:	080149af 	.word	0x080149af
 8014c04:	08019c7a 	.word	0x08019c7a

08014c08 <__sflush_r>:
 8014c08:	898a      	ldrh	r2, [r1, #12]
 8014c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c0e:	4605      	mov	r5, r0
 8014c10:	0710      	lsls	r0, r2, #28
 8014c12:	460c      	mov	r4, r1
 8014c14:	d458      	bmi.n	8014cc8 <__sflush_r+0xc0>
 8014c16:	684b      	ldr	r3, [r1, #4]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	dc05      	bgt.n	8014c28 <__sflush_r+0x20>
 8014c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	dc02      	bgt.n	8014c28 <__sflush_r+0x20>
 8014c22:	2000      	movs	r0, #0
 8014c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c2a:	2e00      	cmp	r6, #0
 8014c2c:	d0f9      	beq.n	8014c22 <__sflush_r+0x1a>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c34:	682f      	ldr	r7, [r5, #0]
 8014c36:	6a21      	ldr	r1, [r4, #32]
 8014c38:	602b      	str	r3, [r5, #0]
 8014c3a:	d032      	beq.n	8014ca2 <__sflush_r+0x9a>
 8014c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c3e:	89a3      	ldrh	r3, [r4, #12]
 8014c40:	075a      	lsls	r2, r3, #29
 8014c42:	d505      	bpl.n	8014c50 <__sflush_r+0x48>
 8014c44:	6863      	ldr	r3, [r4, #4]
 8014c46:	1ac0      	subs	r0, r0, r3
 8014c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c4a:	b10b      	cbz	r3, 8014c50 <__sflush_r+0x48>
 8014c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c4e:	1ac0      	subs	r0, r0, r3
 8014c50:	2300      	movs	r3, #0
 8014c52:	4602      	mov	r2, r0
 8014c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c56:	6a21      	ldr	r1, [r4, #32]
 8014c58:	4628      	mov	r0, r5
 8014c5a:	47b0      	blx	r6
 8014c5c:	1c43      	adds	r3, r0, #1
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	d106      	bne.n	8014c70 <__sflush_r+0x68>
 8014c62:	6829      	ldr	r1, [r5, #0]
 8014c64:	291d      	cmp	r1, #29
 8014c66:	d82b      	bhi.n	8014cc0 <__sflush_r+0xb8>
 8014c68:	4a29      	ldr	r2, [pc, #164]	; (8014d10 <__sflush_r+0x108>)
 8014c6a:	410a      	asrs	r2, r1
 8014c6c:	07d6      	lsls	r6, r2, #31
 8014c6e:	d427      	bmi.n	8014cc0 <__sflush_r+0xb8>
 8014c70:	2200      	movs	r2, #0
 8014c72:	6062      	str	r2, [r4, #4]
 8014c74:	04d9      	lsls	r1, r3, #19
 8014c76:	6922      	ldr	r2, [r4, #16]
 8014c78:	6022      	str	r2, [r4, #0]
 8014c7a:	d504      	bpl.n	8014c86 <__sflush_r+0x7e>
 8014c7c:	1c42      	adds	r2, r0, #1
 8014c7e:	d101      	bne.n	8014c84 <__sflush_r+0x7c>
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	b903      	cbnz	r3, 8014c86 <__sflush_r+0x7e>
 8014c84:	6560      	str	r0, [r4, #84]	; 0x54
 8014c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c88:	602f      	str	r7, [r5, #0]
 8014c8a:	2900      	cmp	r1, #0
 8014c8c:	d0c9      	beq.n	8014c22 <__sflush_r+0x1a>
 8014c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c92:	4299      	cmp	r1, r3
 8014c94:	d002      	beq.n	8014c9c <__sflush_r+0x94>
 8014c96:	4628      	mov	r0, r5
 8014c98:	f7ff f89e 	bl	8013dd8 <_free_r>
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8014ca0:	e7c0      	b.n	8014c24 <__sflush_r+0x1c>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	47b0      	blx	r6
 8014ca8:	1c41      	adds	r1, r0, #1
 8014caa:	d1c8      	bne.n	8014c3e <__sflush_r+0x36>
 8014cac:	682b      	ldr	r3, [r5, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d0c5      	beq.n	8014c3e <__sflush_r+0x36>
 8014cb2:	2b1d      	cmp	r3, #29
 8014cb4:	d001      	beq.n	8014cba <__sflush_r+0xb2>
 8014cb6:	2b16      	cmp	r3, #22
 8014cb8:	d101      	bne.n	8014cbe <__sflush_r+0xb6>
 8014cba:	602f      	str	r7, [r5, #0]
 8014cbc:	e7b1      	b.n	8014c22 <__sflush_r+0x1a>
 8014cbe:	89a3      	ldrh	r3, [r4, #12]
 8014cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cc4:	81a3      	strh	r3, [r4, #12]
 8014cc6:	e7ad      	b.n	8014c24 <__sflush_r+0x1c>
 8014cc8:	690f      	ldr	r7, [r1, #16]
 8014cca:	2f00      	cmp	r7, #0
 8014ccc:	d0a9      	beq.n	8014c22 <__sflush_r+0x1a>
 8014cce:	0793      	lsls	r3, r2, #30
 8014cd0:	680e      	ldr	r6, [r1, #0]
 8014cd2:	bf08      	it	eq
 8014cd4:	694b      	ldreq	r3, [r1, #20]
 8014cd6:	600f      	str	r7, [r1, #0]
 8014cd8:	bf18      	it	ne
 8014cda:	2300      	movne	r3, #0
 8014cdc:	eba6 0807 	sub.w	r8, r6, r7
 8014ce0:	608b      	str	r3, [r1, #8]
 8014ce2:	f1b8 0f00 	cmp.w	r8, #0
 8014ce6:	dd9c      	ble.n	8014c22 <__sflush_r+0x1a>
 8014ce8:	6a21      	ldr	r1, [r4, #32]
 8014cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014cec:	4643      	mov	r3, r8
 8014cee:	463a      	mov	r2, r7
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	47b0      	blx	r6
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	dc06      	bgt.n	8014d06 <__sflush_r+0xfe>
 8014cf8:	89a3      	ldrh	r3, [r4, #12]
 8014cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cfe:	81a3      	strh	r3, [r4, #12]
 8014d00:	f04f 30ff 	mov.w	r0, #4294967295
 8014d04:	e78e      	b.n	8014c24 <__sflush_r+0x1c>
 8014d06:	4407      	add	r7, r0
 8014d08:	eba8 0800 	sub.w	r8, r8, r0
 8014d0c:	e7e9      	b.n	8014ce2 <__sflush_r+0xda>
 8014d0e:	bf00      	nop
 8014d10:	dfbffffe 	.word	0xdfbffffe

08014d14 <_fflush_r>:
 8014d14:	b538      	push	{r3, r4, r5, lr}
 8014d16:	690b      	ldr	r3, [r1, #16]
 8014d18:	4605      	mov	r5, r0
 8014d1a:	460c      	mov	r4, r1
 8014d1c:	b913      	cbnz	r3, 8014d24 <_fflush_r+0x10>
 8014d1e:	2500      	movs	r5, #0
 8014d20:	4628      	mov	r0, r5
 8014d22:	bd38      	pop	{r3, r4, r5, pc}
 8014d24:	b118      	cbz	r0, 8014d2e <_fflush_r+0x1a>
 8014d26:	6a03      	ldr	r3, [r0, #32]
 8014d28:	b90b      	cbnz	r3, 8014d2e <_fflush_r+0x1a>
 8014d2a:	f7fe f8ad 	bl	8012e88 <__sinit>
 8014d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d0f3      	beq.n	8014d1e <_fflush_r+0xa>
 8014d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d38:	07d0      	lsls	r0, r2, #31
 8014d3a:	d404      	bmi.n	8014d46 <_fflush_r+0x32>
 8014d3c:	0599      	lsls	r1, r3, #22
 8014d3e:	d402      	bmi.n	8014d46 <_fflush_r+0x32>
 8014d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d42:	f7fe fa35 	bl	80131b0 <__retarget_lock_acquire_recursive>
 8014d46:	4628      	mov	r0, r5
 8014d48:	4621      	mov	r1, r4
 8014d4a:	f7ff ff5d 	bl	8014c08 <__sflush_r>
 8014d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d50:	07da      	lsls	r2, r3, #31
 8014d52:	4605      	mov	r5, r0
 8014d54:	d4e4      	bmi.n	8014d20 <_fflush_r+0xc>
 8014d56:	89a3      	ldrh	r3, [r4, #12]
 8014d58:	059b      	lsls	r3, r3, #22
 8014d5a:	d4e1      	bmi.n	8014d20 <_fflush_r+0xc>
 8014d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d5e:	f7fe fa28 	bl	80131b2 <__retarget_lock_release_recursive>
 8014d62:	e7dd      	b.n	8014d20 <_fflush_r+0xc>

08014d64 <__swbuf_r>:
 8014d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d66:	460e      	mov	r6, r1
 8014d68:	4614      	mov	r4, r2
 8014d6a:	4605      	mov	r5, r0
 8014d6c:	b118      	cbz	r0, 8014d76 <__swbuf_r+0x12>
 8014d6e:	6a03      	ldr	r3, [r0, #32]
 8014d70:	b90b      	cbnz	r3, 8014d76 <__swbuf_r+0x12>
 8014d72:	f7fe f889 	bl	8012e88 <__sinit>
 8014d76:	69a3      	ldr	r3, [r4, #24]
 8014d78:	60a3      	str	r3, [r4, #8]
 8014d7a:	89a3      	ldrh	r3, [r4, #12]
 8014d7c:	071a      	lsls	r2, r3, #28
 8014d7e:	d525      	bpl.n	8014dcc <__swbuf_r+0x68>
 8014d80:	6923      	ldr	r3, [r4, #16]
 8014d82:	b31b      	cbz	r3, 8014dcc <__swbuf_r+0x68>
 8014d84:	6823      	ldr	r3, [r4, #0]
 8014d86:	6922      	ldr	r2, [r4, #16]
 8014d88:	1a98      	subs	r0, r3, r2
 8014d8a:	6963      	ldr	r3, [r4, #20]
 8014d8c:	b2f6      	uxtb	r6, r6
 8014d8e:	4283      	cmp	r3, r0
 8014d90:	4637      	mov	r7, r6
 8014d92:	dc04      	bgt.n	8014d9e <__swbuf_r+0x3a>
 8014d94:	4621      	mov	r1, r4
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7ff ffbc 	bl	8014d14 <_fflush_r>
 8014d9c:	b9e0      	cbnz	r0, 8014dd8 <__swbuf_r+0x74>
 8014d9e:	68a3      	ldr	r3, [r4, #8]
 8014da0:	3b01      	subs	r3, #1
 8014da2:	60a3      	str	r3, [r4, #8]
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	1c5a      	adds	r2, r3, #1
 8014da8:	6022      	str	r2, [r4, #0]
 8014daa:	701e      	strb	r6, [r3, #0]
 8014dac:	6962      	ldr	r2, [r4, #20]
 8014dae:	1c43      	adds	r3, r0, #1
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d004      	beq.n	8014dbe <__swbuf_r+0x5a>
 8014db4:	89a3      	ldrh	r3, [r4, #12]
 8014db6:	07db      	lsls	r3, r3, #31
 8014db8:	d506      	bpl.n	8014dc8 <__swbuf_r+0x64>
 8014dba:	2e0a      	cmp	r6, #10
 8014dbc:	d104      	bne.n	8014dc8 <__swbuf_r+0x64>
 8014dbe:	4621      	mov	r1, r4
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f7ff ffa7 	bl	8014d14 <_fflush_r>
 8014dc6:	b938      	cbnz	r0, 8014dd8 <__swbuf_r+0x74>
 8014dc8:	4638      	mov	r0, r7
 8014dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dcc:	4621      	mov	r1, r4
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f000 f806 	bl	8014de0 <__swsetup_r>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d0d5      	beq.n	8014d84 <__swbuf_r+0x20>
 8014dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8014ddc:	e7f4      	b.n	8014dc8 <__swbuf_r+0x64>
	...

08014de0 <__swsetup_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4b2a      	ldr	r3, [pc, #168]	; (8014e8c <__swsetup_r+0xac>)
 8014de4:	4605      	mov	r5, r0
 8014de6:	6818      	ldr	r0, [r3, #0]
 8014de8:	460c      	mov	r4, r1
 8014dea:	b118      	cbz	r0, 8014df4 <__swsetup_r+0x14>
 8014dec:	6a03      	ldr	r3, [r0, #32]
 8014dee:	b90b      	cbnz	r3, 8014df4 <__swsetup_r+0x14>
 8014df0:	f7fe f84a 	bl	8012e88 <__sinit>
 8014df4:	89a3      	ldrh	r3, [r4, #12]
 8014df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014dfa:	0718      	lsls	r0, r3, #28
 8014dfc:	d422      	bmi.n	8014e44 <__swsetup_r+0x64>
 8014dfe:	06d9      	lsls	r1, r3, #27
 8014e00:	d407      	bmi.n	8014e12 <__swsetup_r+0x32>
 8014e02:	2309      	movs	r3, #9
 8014e04:	602b      	str	r3, [r5, #0]
 8014e06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e0a:	81a3      	strh	r3, [r4, #12]
 8014e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e10:	e034      	b.n	8014e7c <__swsetup_r+0x9c>
 8014e12:	0758      	lsls	r0, r3, #29
 8014e14:	d512      	bpl.n	8014e3c <__swsetup_r+0x5c>
 8014e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e18:	b141      	cbz	r1, 8014e2c <__swsetup_r+0x4c>
 8014e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e1e:	4299      	cmp	r1, r3
 8014e20:	d002      	beq.n	8014e28 <__swsetup_r+0x48>
 8014e22:	4628      	mov	r0, r5
 8014e24:	f7fe ffd8 	bl	8013dd8 <_free_r>
 8014e28:	2300      	movs	r3, #0
 8014e2a:	6363      	str	r3, [r4, #52]	; 0x34
 8014e2c:	89a3      	ldrh	r3, [r4, #12]
 8014e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e32:	81a3      	strh	r3, [r4, #12]
 8014e34:	2300      	movs	r3, #0
 8014e36:	6063      	str	r3, [r4, #4]
 8014e38:	6923      	ldr	r3, [r4, #16]
 8014e3a:	6023      	str	r3, [r4, #0]
 8014e3c:	89a3      	ldrh	r3, [r4, #12]
 8014e3e:	f043 0308 	orr.w	r3, r3, #8
 8014e42:	81a3      	strh	r3, [r4, #12]
 8014e44:	6923      	ldr	r3, [r4, #16]
 8014e46:	b94b      	cbnz	r3, 8014e5c <__swsetup_r+0x7c>
 8014e48:	89a3      	ldrh	r3, [r4, #12]
 8014e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e52:	d003      	beq.n	8014e5c <__swsetup_r+0x7c>
 8014e54:	4621      	mov	r1, r4
 8014e56:	4628      	mov	r0, r5
 8014e58:	f000 f912 	bl	8015080 <__smakebuf_r>
 8014e5c:	89a0      	ldrh	r0, [r4, #12]
 8014e5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e62:	f010 0301 	ands.w	r3, r0, #1
 8014e66:	d00a      	beq.n	8014e7e <__swsetup_r+0x9e>
 8014e68:	2300      	movs	r3, #0
 8014e6a:	60a3      	str	r3, [r4, #8]
 8014e6c:	6963      	ldr	r3, [r4, #20]
 8014e6e:	425b      	negs	r3, r3
 8014e70:	61a3      	str	r3, [r4, #24]
 8014e72:	6923      	ldr	r3, [r4, #16]
 8014e74:	b943      	cbnz	r3, 8014e88 <__swsetup_r+0xa8>
 8014e76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e7a:	d1c4      	bne.n	8014e06 <__swsetup_r+0x26>
 8014e7c:	bd38      	pop	{r3, r4, r5, pc}
 8014e7e:	0781      	lsls	r1, r0, #30
 8014e80:	bf58      	it	pl
 8014e82:	6963      	ldrpl	r3, [r4, #20]
 8014e84:	60a3      	str	r3, [r4, #8]
 8014e86:	e7f4      	b.n	8014e72 <__swsetup_r+0x92>
 8014e88:	2000      	movs	r0, #0
 8014e8a:	e7f7      	b.n	8014e7c <__swsetup_r+0x9c>
 8014e8c:	240003ac 	.word	0x240003ac

08014e90 <memmove>:
 8014e90:	4288      	cmp	r0, r1
 8014e92:	b510      	push	{r4, lr}
 8014e94:	eb01 0402 	add.w	r4, r1, r2
 8014e98:	d902      	bls.n	8014ea0 <memmove+0x10>
 8014e9a:	4284      	cmp	r4, r0
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	d807      	bhi.n	8014eb0 <memmove+0x20>
 8014ea0:	1e43      	subs	r3, r0, #1
 8014ea2:	42a1      	cmp	r1, r4
 8014ea4:	d008      	beq.n	8014eb8 <memmove+0x28>
 8014ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014eae:	e7f8      	b.n	8014ea2 <memmove+0x12>
 8014eb0:	4402      	add	r2, r0
 8014eb2:	4601      	mov	r1, r0
 8014eb4:	428a      	cmp	r2, r1
 8014eb6:	d100      	bne.n	8014eba <memmove+0x2a>
 8014eb8:	bd10      	pop	{r4, pc}
 8014eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ec2:	e7f7      	b.n	8014eb4 <memmove+0x24>

08014ec4 <_raise_r>:
 8014ec4:	291f      	cmp	r1, #31
 8014ec6:	b538      	push	{r3, r4, r5, lr}
 8014ec8:	4604      	mov	r4, r0
 8014eca:	460d      	mov	r5, r1
 8014ecc:	d904      	bls.n	8014ed8 <_raise_r+0x14>
 8014ece:	2316      	movs	r3, #22
 8014ed0:	6003      	str	r3, [r0, #0]
 8014ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ed6:	bd38      	pop	{r3, r4, r5, pc}
 8014ed8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014eda:	b112      	cbz	r2, 8014ee2 <_raise_r+0x1e>
 8014edc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ee0:	b94b      	cbnz	r3, 8014ef6 <_raise_r+0x32>
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	f000 f830 	bl	8014f48 <_getpid_r>
 8014ee8:	462a      	mov	r2, r5
 8014eea:	4601      	mov	r1, r0
 8014eec:	4620      	mov	r0, r4
 8014eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ef2:	f000 b817 	b.w	8014f24 <_kill_r>
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d00a      	beq.n	8014f10 <_raise_r+0x4c>
 8014efa:	1c59      	adds	r1, r3, #1
 8014efc:	d103      	bne.n	8014f06 <_raise_r+0x42>
 8014efe:	2316      	movs	r3, #22
 8014f00:	6003      	str	r3, [r0, #0]
 8014f02:	2001      	movs	r0, #1
 8014f04:	e7e7      	b.n	8014ed6 <_raise_r+0x12>
 8014f06:	2400      	movs	r4, #0
 8014f08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	4798      	blx	r3
 8014f10:	2000      	movs	r0, #0
 8014f12:	e7e0      	b.n	8014ed6 <_raise_r+0x12>

08014f14 <raise>:
 8014f14:	4b02      	ldr	r3, [pc, #8]	; (8014f20 <raise+0xc>)
 8014f16:	4601      	mov	r1, r0
 8014f18:	6818      	ldr	r0, [r3, #0]
 8014f1a:	f7ff bfd3 	b.w	8014ec4 <_raise_r>
 8014f1e:	bf00      	nop
 8014f20:	240003ac 	.word	0x240003ac

08014f24 <_kill_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	4d07      	ldr	r5, [pc, #28]	; (8014f44 <_kill_r+0x20>)
 8014f28:	2300      	movs	r3, #0
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	4608      	mov	r0, r1
 8014f2e:	4611      	mov	r1, r2
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	f7f2 f995 	bl	8007260 <_kill>
 8014f36:	1c43      	adds	r3, r0, #1
 8014f38:	d102      	bne.n	8014f40 <_kill_r+0x1c>
 8014f3a:	682b      	ldr	r3, [r5, #0]
 8014f3c:	b103      	cbz	r3, 8014f40 <_kill_r+0x1c>
 8014f3e:	6023      	str	r3, [r4, #0]
 8014f40:	bd38      	pop	{r3, r4, r5, pc}
 8014f42:	bf00      	nop
 8014f44:	2400d664 	.word	0x2400d664

08014f48 <_getpid_r>:
 8014f48:	f7f2 b988 	b.w	800725c <_getpid>

08014f4c <_sbrk_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	4d06      	ldr	r5, [pc, #24]	; (8014f68 <_sbrk_r+0x1c>)
 8014f50:	2300      	movs	r3, #0
 8014f52:	4604      	mov	r4, r0
 8014f54:	4608      	mov	r0, r1
 8014f56:	602b      	str	r3, [r5, #0]
 8014f58:	f7f2 f9bc 	bl	80072d4 <_sbrk>
 8014f5c:	1c43      	adds	r3, r0, #1
 8014f5e:	d102      	bne.n	8014f66 <_sbrk_r+0x1a>
 8014f60:	682b      	ldr	r3, [r5, #0]
 8014f62:	b103      	cbz	r3, 8014f66 <_sbrk_r+0x1a>
 8014f64:	6023      	str	r3, [r4, #0]
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	2400d664 	.word	0x2400d664

08014f6c <_calloc_r>:
 8014f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8014f72:	b94c      	cbnz	r4, 8014f88 <_calloc_r+0x1c>
 8014f74:	4611      	mov	r1, r2
 8014f76:	9201      	str	r2, [sp, #4]
 8014f78:	f7fe ffa2 	bl	8013ec0 <_malloc_r>
 8014f7c:	9a01      	ldr	r2, [sp, #4]
 8014f7e:	4605      	mov	r5, r0
 8014f80:	b930      	cbnz	r0, 8014f90 <_calloc_r+0x24>
 8014f82:	4628      	mov	r0, r5
 8014f84:	b003      	add	sp, #12
 8014f86:	bd30      	pop	{r4, r5, pc}
 8014f88:	220c      	movs	r2, #12
 8014f8a:	6002      	str	r2, [r0, #0]
 8014f8c:	2500      	movs	r5, #0
 8014f8e:	e7f8      	b.n	8014f82 <_calloc_r+0x16>
 8014f90:	4621      	mov	r1, r4
 8014f92:	f7fe f824 	bl	8012fde <memset>
 8014f96:	e7f4      	b.n	8014f82 <_calloc_r+0x16>

08014f98 <__ascii_mbtowc>:
 8014f98:	b082      	sub	sp, #8
 8014f9a:	b901      	cbnz	r1, 8014f9e <__ascii_mbtowc+0x6>
 8014f9c:	a901      	add	r1, sp, #4
 8014f9e:	b142      	cbz	r2, 8014fb2 <__ascii_mbtowc+0x1a>
 8014fa0:	b14b      	cbz	r3, 8014fb6 <__ascii_mbtowc+0x1e>
 8014fa2:	7813      	ldrb	r3, [r2, #0]
 8014fa4:	600b      	str	r3, [r1, #0]
 8014fa6:	7812      	ldrb	r2, [r2, #0]
 8014fa8:	1e10      	subs	r0, r2, #0
 8014faa:	bf18      	it	ne
 8014fac:	2001      	movne	r0, #1
 8014fae:	b002      	add	sp, #8
 8014fb0:	4770      	bx	lr
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	e7fb      	b.n	8014fae <__ascii_mbtowc+0x16>
 8014fb6:	f06f 0001 	mvn.w	r0, #1
 8014fba:	e7f8      	b.n	8014fae <__ascii_mbtowc+0x16>

08014fbc <_realloc_r>:
 8014fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc0:	4680      	mov	r8, r0
 8014fc2:	4614      	mov	r4, r2
 8014fc4:	460e      	mov	r6, r1
 8014fc6:	b921      	cbnz	r1, 8014fd2 <_realloc_r+0x16>
 8014fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fcc:	4611      	mov	r1, r2
 8014fce:	f7fe bf77 	b.w	8013ec0 <_malloc_r>
 8014fd2:	b92a      	cbnz	r2, 8014fe0 <_realloc_r+0x24>
 8014fd4:	f7fe ff00 	bl	8013dd8 <_free_r>
 8014fd8:	4625      	mov	r5, r4
 8014fda:	4628      	mov	r0, r5
 8014fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe0:	f000 f8ac 	bl	801513c <_malloc_usable_size_r>
 8014fe4:	4284      	cmp	r4, r0
 8014fe6:	4607      	mov	r7, r0
 8014fe8:	d802      	bhi.n	8014ff0 <_realloc_r+0x34>
 8014fea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014fee:	d812      	bhi.n	8015016 <_realloc_r+0x5a>
 8014ff0:	4621      	mov	r1, r4
 8014ff2:	4640      	mov	r0, r8
 8014ff4:	f7fe ff64 	bl	8013ec0 <_malloc_r>
 8014ff8:	4605      	mov	r5, r0
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d0ed      	beq.n	8014fda <_realloc_r+0x1e>
 8014ffe:	42bc      	cmp	r4, r7
 8015000:	4622      	mov	r2, r4
 8015002:	4631      	mov	r1, r6
 8015004:	bf28      	it	cs
 8015006:	463a      	movcs	r2, r7
 8015008:	f7fe f8dc 	bl	80131c4 <memcpy>
 801500c:	4631      	mov	r1, r6
 801500e:	4640      	mov	r0, r8
 8015010:	f7fe fee2 	bl	8013dd8 <_free_r>
 8015014:	e7e1      	b.n	8014fda <_realloc_r+0x1e>
 8015016:	4635      	mov	r5, r6
 8015018:	e7df      	b.n	8014fda <_realloc_r+0x1e>

0801501a <__ascii_wctomb>:
 801501a:	b149      	cbz	r1, 8015030 <__ascii_wctomb+0x16>
 801501c:	2aff      	cmp	r2, #255	; 0xff
 801501e:	bf85      	ittet	hi
 8015020:	238a      	movhi	r3, #138	; 0x8a
 8015022:	6003      	strhi	r3, [r0, #0]
 8015024:	700a      	strbls	r2, [r1, #0]
 8015026:	f04f 30ff 	movhi.w	r0, #4294967295
 801502a:	bf98      	it	ls
 801502c:	2001      	movls	r0, #1
 801502e:	4770      	bx	lr
 8015030:	4608      	mov	r0, r1
 8015032:	4770      	bx	lr

08015034 <__swhatbuf_r>:
 8015034:	b570      	push	{r4, r5, r6, lr}
 8015036:	460c      	mov	r4, r1
 8015038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801503c:	2900      	cmp	r1, #0
 801503e:	b096      	sub	sp, #88	; 0x58
 8015040:	4615      	mov	r5, r2
 8015042:	461e      	mov	r6, r3
 8015044:	da0d      	bge.n	8015062 <__swhatbuf_r+0x2e>
 8015046:	89a3      	ldrh	r3, [r4, #12]
 8015048:	f013 0f80 	tst.w	r3, #128	; 0x80
 801504c:	f04f 0100 	mov.w	r1, #0
 8015050:	bf0c      	ite	eq
 8015052:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015056:	2340      	movne	r3, #64	; 0x40
 8015058:	2000      	movs	r0, #0
 801505a:	6031      	str	r1, [r6, #0]
 801505c:	602b      	str	r3, [r5, #0]
 801505e:	b016      	add	sp, #88	; 0x58
 8015060:	bd70      	pop	{r4, r5, r6, pc}
 8015062:	466a      	mov	r2, sp
 8015064:	f000 f848 	bl	80150f8 <_fstat_r>
 8015068:	2800      	cmp	r0, #0
 801506a:	dbec      	blt.n	8015046 <__swhatbuf_r+0x12>
 801506c:	9901      	ldr	r1, [sp, #4]
 801506e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015072:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015076:	4259      	negs	r1, r3
 8015078:	4159      	adcs	r1, r3
 801507a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801507e:	e7eb      	b.n	8015058 <__swhatbuf_r+0x24>

08015080 <__smakebuf_r>:
 8015080:	898b      	ldrh	r3, [r1, #12]
 8015082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015084:	079d      	lsls	r5, r3, #30
 8015086:	4606      	mov	r6, r0
 8015088:	460c      	mov	r4, r1
 801508a:	d507      	bpl.n	801509c <__smakebuf_r+0x1c>
 801508c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015090:	6023      	str	r3, [r4, #0]
 8015092:	6123      	str	r3, [r4, #16]
 8015094:	2301      	movs	r3, #1
 8015096:	6163      	str	r3, [r4, #20]
 8015098:	b002      	add	sp, #8
 801509a:	bd70      	pop	{r4, r5, r6, pc}
 801509c:	ab01      	add	r3, sp, #4
 801509e:	466a      	mov	r2, sp
 80150a0:	f7ff ffc8 	bl	8015034 <__swhatbuf_r>
 80150a4:	9900      	ldr	r1, [sp, #0]
 80150a6:	4605      	mov	r5, r0
 80150a8:	4630      	mov	r0, r6
 80150aa:	f7fe ff09 	bl	8013ec0 <_malloc_r>
 80150ae:	b948      	cbnz	r0, 80150c4 <__smakebuf_r+0x44>
 80150b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150b4:	059a      	lsls	r2, r3, #22
 80150b6:	d4ef      	bmi.n	8015098 <__smakebuf_r+0x18>
 80150b8:	f023 0303 	bic.w	r3, r3, #3
 80150bc:	f043 0302 	orr.w	r3, r3, #2
 80150c0:	81a3      	strh	r3, [r4, #12]
 80150c2:	e7e3      	b.n	801508c <__smakebuf_r+0xc>
 80150c4:	89a3      	ldrh	r3, [r4, #12]
 80150c6:	6020      	str	r0, [r4, #0]
 80150c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150cc:	81a3      	strh	r3, [r4, #12]
 80150ce:	9b00      	ldr	r3, [sp, #0]
 80150d0:	6163      	str	r3, [r4, #20]
 80150d2:	9b01      	ldr	r3, [sp, #4]
 80150d4:	6120      	str	r0, [r4, #16]
 80150d6:	b15b      	cbz	r3, 80150f0 <__smakebuf_r+0x70>
 80150d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150dc:	4630      	mov	r0, r6
 80150de:	f000 f81d 	bl	801511c <_isatty_r>
 80150e2:	b128      	cbz	r0, 80150f0 <__smakebuf_r+0x70>
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	f023 0303 	bic.w	r3, r3, #3
 80150ea:	f043 0301 	orr.w	r3, r3, #1
 80150ee:	81a3      	strh	r3, [r4, #12]
 80150f0:	89a3      	ldrh	r3, [r4, #12]
 80150f2:	431d      	orrs	r5, r3
 80150f4:	81a5      	strh	r5, [r4, #12]
 80150f6:	e7cf      	b.n	8015098 <__smakebuf_r+0x18>

080150f8 <_fstat_r>:
 80150f8:	b538      	push	{r3, r4, r5, lr}
 80150fa:	4d07      	ldr	r5, [pc, #28]	; (8015118 <_fstat_r+0x20>)
 80150fc:	2300      	movs	r3, #0
 80150fe:	4604      	mov	r4, r0
 8015100:	4608      	mov	r0, r1
 8015102:	4611      	mov	r1, r2
 8015104:	602b      	str	r3, [r5, #0]
 8015106:	f7f2 f8db 	bl	80072c0 <_fstat>
 801510a:	1c43      	adds	r3, r0, #1
 801510c:	d102      	bne.n	8015114 <_fstat_r+0x1c>
 801510e:	682b      	ldr	r3, [r5, #0]
 8015110:	b103      	cbz	r3, 8015114 <_fstat_r+0x1c>
 8015112:	6023      	str	r3, [r4, #0]
 8015114:	bd38      	pop	{r3, r4, r5, pc}
 8015116:	bf00      	nop
 8015118:	2400d664 	.word	0x2400d664

0801511c <_isatty_r>:
 801511c:	b538      	push	{r3, r4, r5, lr}
 801511e:	4d06      	ldr	r5, [pc, #24]	; (8015138 <_isatty_r+0x1c>)
 8015120:	2300      	movs	r3, #0
 8015122:	4604      	mov	r4, r0
 8015124:	4608      	mov	r0, r1
 8015126:	602b      	str	r3, [r5, #0]
 8015128:	f7f2 f8d0 	bl	80072cc <_isatty>
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	d102      	bne.n	8015136 <_isatty_r+0x1a>
 8015130:	682b      	ldr	r3, [r5, #0]
 8015132:	b103      	cbz	r3, 8015136 <_isatty_r+0x1a>
 8015134:	6023      	str	r3, [r4, #0]
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	2400d664 	.word	0x2400d664

0801513c <_malloc_usable_size_r>:
 801513c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015140:	1f18      	subs	r0, r3, #4
 8015142:	2b00      	cmp	r3, #0
 8015144:	bfbc      	itt	lt
 8015146:	580b      	ldrlt	r3, [r1, r0]
 8015148:	18c0      	addlt	r0, r0, r3
 801514a:	4770      	bx	lr
 801514c:	0000      	movs	r0, r0
	...

08015150 <log10>:
 8015150:	b508      	push	{r3, lr}
 8015152:	ed2d 8b02 	vpush	{d8}
 8015156:	eeb0 8b40 	vmov.f64	d8, d0
 801515a:	f000 fad5 	bl	8015708 <__ieee754_log10>
 801515e:	eeb4 8b48 	vcmp.f64	d8, d8
 8015162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015166:	d60f      	bvs.n	8015188 <log10+0x38>
 8015168:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015170:	d80a      	bhi.n	8015188 <log10+0x38>
 8015172:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801517a:	d108      	bne.n	801518e <log10+0x3e>
 801517c:	f7fd ffee 	bl	801315c <__errno>
 8015180:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80151a8 <log10+0x58>
 8015184:	2322      	movs	r3, #34	; 0x22
 8015186:	6003      	str	r3, [r0, #0]
 8015188:	ecbd 8b02 	vpop	{d8}
 801518c:	bd08      	pop	{r3, pc}
 801518e:	f7fd ffe5 	bl	801315c <__errno>
 8015192:	ecbd 8b02 	vpop	{d8}
 8015196:	2321      	movs	r3, #33	; 0x21
 8015198:	6003      	str	r3, [r0, #0]
 801519a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801519e:	4804      	ldr	r0, [pc, #16]	; (80151b0 <log10+0x60>)
 80151a0:	f000 b8a2 	b.w	80152e8 <nan>
 80151a4:	f3af 8000 	nop.w
 80151a8:	00000000 	.word	0x00000000
 80151ac:	fff00000 	.word	0xfff00000
 80151b0:	080198a3 	.word	0x080198a3
 80151b4:	00000000 	.word	0x00000000

080151b8 <cos>:
 80151b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151ba:	eeb0 7b40 	vmov.f64	d7, d0
 80151be:	ee17 3a90 	vmov	r3, s15
 80151c2:	4a21      	ldr	r2, [pc, #132]	; (8015248 <cos+0x90>)
 80151c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151c8:	4293      	cmp	r3, r2
 80151ca:	dc06      	bgt.n	80151da <cos+0x22>
 80151cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015240 <cos+0x88>
 80151d0:	b005      	add	sp, #20
 80151d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80151d6:	f000 b9d3 	b.w	8015580 <__kernel_cos>
 80151da:	4a1c      	ldr	r2, [pc, #112]	; (801524c <cos+0x94>)
 80151dc:	4293      	cmp	r3, r2
 80151de:	dd04      	ble.n	80151ea <cos+0x32>
 80151e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80151e4:	b005      	add	sp, #20
 80151e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80151ea:	4668      	mov	r0, sp
 80151ec:	f000 fafc 	bl	80157e8 <__ieee754_rem_pio2>
 80151f0:	f000 0003 	and.w	r0, r0, #3
 80151f4:	2801      	cmp	r0, #1
 80151f6:	d009      	beq.n	801520c <cos+0x54>
 80151f8:	2802      	cmp	r0, #2
 80151fa:	d010      	beq.n	801521e <cos+0x66>
 80151fc:	b9b0      	cbnz	r0, 801522c <cos+0x74>
 80151fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015202:	ed9d 0b00 	vldr	d0, [sp]
 8015206:	f000 f9bb 	bl	8015580 <__kernel_cos>
 801520a:	e7eb      	b.n	80151e4 <cos+0x2c>
 801520c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015210:	ed9d 0b00 	vldr	d0, [sp]
 8015214:	f000 fa20 	bl	8015658 <__kernel_sin>
 8015218:	eeb1 0b40 	vneg.f64	d0, d0
 801521c:	e7e2      	b.n	80151e4 <cos+0x2c>
 801521e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015222:	ed9d 0b00 	vldr	d0, [sp]
 8015226:	f000 f9ab 	bl	8015580 <__kernel_cos>
 801522a:	e7f5      	b.n	8015218 <cos+0x60>
 801522c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015230:	ed9d 0b00 	vldr	d0, [sp]
 8015234:	2001      	movs	r0, #1
 8015236:	f000 fa0f 	bl	8015658 <__kernel_sin>
 801523a:	e7d3      	b.n	80151e4 <cos+0x2c>
 801523c:	f3af 8000 	nop.w
	...
 8015248:	3fe921fb 	.word	0x3fe921fb
 801524c:	7fefffff 	.word	0x7fefffff

08015250 <sin>:
 8015250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015252:	eeb0 7b40 	vmov.f64	d7, d0
 8015256:	ee17 3a90 	vmov	r3, s15
 801525a:	4a21      	ldr	r2, [pc, #132]	; (80152e0 <sin+0x90>)
 801525c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015260:	4293      	cmp	r3, r2
 8015262:	dc07      	bgt.n	8015274 <sin+0x24>
 8015264:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80152d8 <sin+0x88>
 8015268:	2000      	movs	r0, #0
 801526a:	b005      	add	sp, #20
 801526c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015270:	f000 b9f2 	b.w	8015658 <__kernel_sin>
 8015274:	4a1b      	ldr	r2, [pc, #108]	; (80152e4 <sin+0x94>)
 8015276:	4293      	cmp	r3, r2
 8015278:	dd04      	ble.n	8015284 <sin+0x34>
 801527a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801527e:	b005      	add	sp, #20
 8015280:	f85d fb04 	ldr.w	pc, [sp], #4
 8015284:	4668      	mov	r0, sp
 8015286:	f000 faaf 	bl	80157e8 <__ieee754_rem_pio2>
 801528a:	f000 0003 	and.w	r0, r0, #3
 801528e:	2801      	cmp	r0, #1
 8015290:	d00a      	beq.n	80152a8 <sin+0x58>
 8015292:	2802      	cmp	r0, #2
 8015294:	d00f      	beq.n	80152b6 <sin+0x66>
 8015296:	b9c0      	cbnz	r0, 80152ca <sin+0x7a>
 8015298:	ed9d 1b02 	vldr	d1, [sp, #8]
 801529c:	ed9d 0b00 	vldr	d0, [sp]
 80152a0:	2001      	movs	r0, #1
 80152a2:	f000 f9d9 	bl	8015658 <__kernel_sin>
 80152a6:	e7ea      	b.n	801527e <sin+0x2e>
 80152a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80152ac:	ed9d 0b00 	vldr	d0, [sp]
 80152b0:	f000 f966 	bl	8015580 <__kernel_cos>
 80152b4:	e7e3      	b.n	801527e <sin+0x2e>
 80152b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80152ba:	ed9d 0b00 	vldr	d0, [sp]
 80152be:	2001      	movs	r0, #1
 80152c0:	f000 f9ca 	bl	8015658 <__kernel_sin>
 80152c4:	eeb1 0b40 	vneg.f64	d0, d0
 80152c8:	e7d9      	b.n	801527e <sin+0x2e>
 80152ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80152ce:	ed9d 0b00 	vldr	d0, [sp]
 80152d2:	f000 f955 	bl	8015580 <__kernel_cos>
 80152d6:	e7f5      	b.n	80152c4 <sin+0x74>
	...
 80152e0:	3fe921fb 	.word	0x3fe921fb
 80152e4:	7fefffff 	.word	0x7fefffff

080152e8 <nan>:
 80152e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80152f0 <nan+0x8>
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop
 80152f0:	00000000 	.word	0x00000000
 80152f4:	7ff80000 	.word	0x7ff80000

080152f8 <exp>:
 80152f8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80152fa:	ee10 3a90 	vmov	r3, s1
 80152fe:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8015302:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8015306:	18a2      	adds	r2, r4, r2
 8015308:	2a3e      	cmp	r2, #62	; 0x3e
 801530a:	ee10 1a10 	vmov	r1, s0
 801530e:	d922      	bls.n	8015356 <exp+0x5e>
 8015310:	2a00      	cmp	r2, #0
 8015312:	da06      	bge.n	8015322 <exp+0x2a>
 8015314:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015318:	ee30 0b07 	vadd.f64	d0, d0, d7
 801531c:	b004      	add	sp, #16
 801531e:	bcf0      	pop	{r4, r5, r6, r7}
 8015320:	4770      	bx	lr
 8015322:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8015326:	f04f 0000 	mov.w	r0, #0
 801532a:	d913      	bls.n	8015354 <exp+0x5c>
 801532c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8015330:	bf08      	it	eq
 8015332:	4281      	cmpeq	r1, r0
 8015334:	f000 80a0 	beq.w	8015478 <exp+0x180>
 8015338:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801533c:	4294      	cmp	r4, r2
 801533e:	d0e9      	beq.n	8015314 <exp+0x1c>
 8015340:	4283      	cmp	r3, r0
 8015342:	da03      	bge.n	801534c <exp+0x54>
 8015344:	b004      	add	sp, #16
 8015346:	bcf0      	pop	{r4, r5, r6, r7}
 8015348:	f000 b8c6 	b.w	80154d8 <__math_uflow>
 801534c:	b004      	add	sp, #16
 801534e:	bcf0      	pop	{r4, r5, r6, r7}
 8015350:	f000 b8ca 	b.w	80154e8 <__math_oflow>
 8015354:	4604      	mov	r4, r0
 8015356:	4950      	ldr	r1, [pc, #320]	; (8015498 <exp+0x1a0>)
 8015358:	ed91 6b02 	vldr	d6, [r1, #8]
 801535c:	ed91 5b00 	vldr	d5, [r1]
 8015360:	eeb0 7b46 	vmov.f64	d7, d6
 8015364:	eea5 7b00 	vfma.f64	d7, d5, d0
 8015368:	ee17 5a10 	vmov	r5, s14
 801536c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015370:	ed91 6b04 	vldr	d6, [r1, #16]
 8015374:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8015378:	eea6 0b07 	vfma.f64	d0, d6, d7
 801537c:	ed91 6b06 	vldr	d6, [r1, #24]
 8015380:	18d8      	adds	r0, r3, r3
 8015382:	f100 030f 	add.w	r3, r0, #15
 8015386:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801538a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801538e:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8015392:	ee20 7b00 	vmul.f64	d7, d0, d0
 8015396:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801539a:	ed91 4b08 	vldr	d4, [r1, #32]
 801539e:	ee30 6b06 	vadd.f64	d6, d0, d6
 80153a2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80153a6:	eea3 4b00 	vfma.f64	d4, d3, d0
 80153aa:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 80153ae:	eea4 6b07 	vfma.f64	d6, d4, d7
 80153b2:	ee27 7b07 	vmul.f64	d7, d7, d7
 80153b6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80153ba:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 80153be:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80153c2:	eea3 4b00 	vfma.f64	d4, d3, d0
 80153c6:	2600      	movs	r6, #0
 80153c8:	19f2      	adds	r2, r6, r7
 80153ca:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 80153ce:	eea7 6b04 	vfma.f64	d6, d7, d4
 80153d2:	2c00      	cmp	r4, #0
 80153d4:	d14b      	bne.n	801546e <exp+0x176>
 80153d6:	42b5      	cmp	r5, r6
 80153d8:	db10      	blt.n	80153fc <exp+0x104>
 80153da:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80153de:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8015480 <exp+0x188>
 80153e2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80153e6:	4610      	mov	r0, r2
 80153e8:	ec41 0b10 	vmov	d0, r0, r1
 80153ec:	eea6 0b00 	vfma.f64	d0, d6, d0
 80153f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80153f4:	b004      	add	sp, #16
 80153f6:	bcf0      	pop	{r4, r5, r6, r7}
 80153f8:	f000 b8ae 	b.w	8015558 <__math_check_oflow>
 80153fc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8015400:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8015404:	4610      	mov	r0, r2
 8015406:	ec41 0b17 	vmov	d7, r0, r1
 801540a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801540e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015412:	ee37 5b06 	vadd.f64	d5, d7, d6
 8015416:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015488 <exp+0x190>
 8015422:	d51e      	bpl.n	8015462 <exp+0x16a>
 8015424:	ee35 3b04 	vadd.f64	d3, d5, d4
 8015428:	ee37 7b45 	vsub.f64	d7, d7, d5
 801542c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015430:	ee34 6b43 	vsub.f64	d6, d4, d3
 8015434:	ee36 6b05 	vadd.f64	d6, d6, d5
 8015438:	ee36 6b07 	vadd.f64	d6, d6, d7
 801543c:	ee36 6b03 	vadd.f64	d6, d6, d3
 8015440:	ee36 5b44 	vsub.f64	d5, d6, d4
 8015444:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	d101      	bne.n	8015452 <exp+0x15a>
 801544e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8015490 <exp+0x198>
 8015452:	ed8d 0b00 	vstr	d0, [sp]
 8015456:	ed9d 7b00 	vldr	d7, [sp]
 801545a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801545e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015462:	ee25 0b00 	vmul.f64	d0, d5, d0
 8015466:	b004      	add	sp, #16
 8015468:	bcf0      	pop	{r4, r5, r6, r7}
 801546a:	f000 b86c 	b.w	8015546 <__math_check_uflow>
 801546e:	ec43 2b10 	vmov	d0, r2, r3
 8015472:	eea6 0b00 	vfma.f64	d0, d6, d0
 8015476:	e751      	b.n	801531c <exp+0x24>
 8015478:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8015490 <exp+0x198>
 801547c:	e74e      	b.n	801531c <exp+0x24>
 801547e:	bf00      	nop
 8015480:	00000000 	.word	0x00000000
 8015484:	7f000000 	.word	0x7f000000
 8015488:	00000000 	.word	0x00000000
 801548c:	00100000 	.word	0x00100000
	...
 8015498:	08019c90 	.word	0x08019c90

0801549c <with_errno>:
 801549c:	b513      	push	{r0, r1, r4, lr}
 801549e:	4604      	mov	r4, r0
 80154a0:	ed8d 0b00 	vstr	d0, [sp]
 80154a4:	f7fd fe5a 	bl	801315c <__errno>
 80154a8:	ed9d 0b00 	vldr	d0, [sp]
 80154ac:	6004      	str	r4, [r0, #0]
 80154ae:	b002      	add	sp, #8
 80154b0:	bd10      	pop	{r4, pc}

080154b2 <xflow>:
 80154b2:	b082      	sub	sp, #8
 80154b4:	b158      	cbz	r0, 80154ce <xflow+0x1c>
 80154b6:	eeb1 7b40 	vneg.f64	d7, d0
 80154ba:	ed8d 7b00 	vstr	d7, [sp]
 80154be:	ed9d 7b00 	vldr	d7, [sp]
 80154c2:	2022      	movs	r0, #34	; 0x22
 80154c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80154c8:	b002      	add	sp, #8
 80154ca:	f7ff bfe7 	b.w	801549c <with_errno>
 80154ce:	eeb0 7b40 	vmov.f64	d7, d0
 80154d2:	e7f2      	b.n	80154ba <xflow+0x8>
 80154d4:	0000      	movs	r0, r0
	...

080154d8 <__math_uflow>:
 80154d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80154e0 <__math_uflow+0x8>
 80154dc:	f7ff bfe9 	b.w	80154b2 <xflow>
 80154e0:	00000000 	.word	0x00000000
 80154e4:	10000000 	.word	0x10000000

080154e8 <__math_oflow>:
 80154e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80154f0 <__math_oflow+0x8>
 80154ec:	f7ff bfe1 	b.w	80154b2 <xflow>
 80154f0:	00000000 	.word	0x00000000
 80154f4:	70000000 	.word	0x70000000

080154f8 <__math_divzero>:
 80154f8:	b082      	sub	sp, #8
 80154fa:	2800      	cmp	r0, #0
 80154fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015500:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8015504:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8015508:	ed8d 7b00 	vstr	d7, [sp]
 801550c:	ed9d 0b00 	vldr	d0, [sp]
 8015510:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8015520 <__math_divzero+0x28>
 8015514:	2022      	movs	r0, #34	; 0x22
 8015516:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801551a:	b002      	add	sp, #8
 801551c:	f7ff bfbe 	b.w	801549c <with_errno>
	...

08015528 <__math_invalid>:
 8015528:	eeb0 7b40 	vmov.f64	d7, d0
 801552c:	eeb4 7b47 	vcmp.f64	d7, d7
 8015530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015534:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015538:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801553c:	d602      	bvs.n	8015544 <__math_invalid+0x1c>
 801553e:	2021      	movs	r0, #33	; 0x21
 8015540:	f7ff bfac 	b.w	801549c <with_errno>
 8015544:	4770      	bx	lr

08015546 <__math_check_uflow>:
 8015546:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554e:	d102      	bne.n	8015556 <__math_check_uflow+0x10>
 8015550:	2022      	movs	r0, #34	; 0x22
 8015552:	f7ff bfa3 	b.w	801549c <with_errno>
 8015556:	4770      	bx	lr

08015558 <__math_check_oflow>:
 8015558:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8015578 <__math_check_oflow+0x20>
 801555c:	eeb0 7bc0 	vabs.f64	d7, d0
 8015560:	eeb4 7b46 	vcmp.f64	d7, d6
 8015564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015568:	dd02      	ble.n	8015570 <__math_check_oflow+0x18>
 801556a:	2022      	movs	r0, #34	; 0x22
 801556c:	f7ff bf96 	b.w	801549c <with_errno>
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	f3af 8000 	nop.w
 8015578:	ffffffff 	.word	0xffffffff
 801557c:	7fefffff 	.word	0x7fefffff

08015580 <__kernel_cos>:
 8015580:	ee10 1a90 	vmov	r1, s1
 8015584:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015588:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801558c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8015590:	da05      	bge.n	801559e <__kernel_cos+0x1e>
 8015592:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015596:	ee17 3a90 	vmov	r3, s15
 801559a:	2b00      	cmp	r3, #0
 801559c:	d03d      	beq.n	801561a <__kernel_cos+0x9a>
 801559e:	ee20 5b00 	vmul.f64	d5, d0, d0
 80155a2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80155a6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8015620 <__kernel_cos+0xa0>
 80155aa:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8015628 <__kernel_cos+0xa8>
 80155ae:	eea5 4b07 	vfma.f64	d4, d5, d7
 80155b2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015630 <__kernel_cos+0xb0>
 80155b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80155ba:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8015638 <__kernel_cos+0xb8>
 80155be:	eea7 4b05 	vfma.f64	d4, d7, d5
 80155c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015640 <__kernel_cos+0xc0>
 80155c6:	4b22      	ldr	r3, [pc, #136]	; (8015650 <__kernel_cos+0xd0>)
 80155c8:	eea4 7b05 	vfma.f64	d7, d4, d5
 80155cc:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8015648 <__kernel_cos+0xc8>
 80155d0:	4299      	cmp	r1, r3
 80155d2:	eea7 4b05 	vfma.f64	d4, d7, d5
 80155d6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80155da:	ee24 4b05 	vmul.f64	d4, d4, d5
 80155de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80155e2:	eea5 1b04 	vfma.f64	d1, d5, d4
 80155e6:	dc04      	bgt.n	80155f2 <__kernel_cos+0x72>
 80155e8:	ee37 7b41 	vsub.f64	d7, d7, d1
 80155ec:	ee36 0b47 	vsub.f64	d0, d6, d7
 80155f0:	4770      	bx	lr
 80155f2:	4b18      	ldr	r3, [pc, #96]	; (8015654 <__kernel_cos+0xd4>)
 80155f4:	4299      	cmp	r1, r3
 80155f6:	dc0d      	bgt.n	8015614 <__kernel_cos+0x94>
 80155f8:	2200      	movs	r2, #0
 80155fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80155fe:	ec43 2b15 	vmov	d5, r2, r3
 8015602:	ee36 0b45 	vsub.f64	d0, d6, d5
 8015606:	ee37 7b45 	vsub.f64	d7, d7, d5
 801560a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801560e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015612:	4770      	bx	lr
 8015614:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8015618:	e7f3      	b.n	8015602 <__kernel_cos+0x82>
 801561a:	eeb0 0b46 	vmov.f64	d0, d6
 801561e:	4770      	bx	lr
 8015620:	be8838d4 	.word	0xbe8838d4
 8015624:	bda8fae9 	.word	0xbda8fae9
 8015628:	bdb4b1c4 	.word	0xbdb4b1c4
 801562c:	3e21ee9e 	.word	0x3e21ee9e
 8015630:	809c52ad 	.word	0x809c52ad
 8015634:	be927e4f 	.word	0xbe927e4f
 8015638:	19cb1590 	.word	0x19cb1590
 801563c:	3efa01a0 	.word	0x3efa01a0
 8015640:	16c15177 	.word	0x16c15177
 8015644:	bf56c16c 	.word	0xbf56c16c
 8015648:	5555554c 	.word	0x5555554c
 801564c:	3fa55555 	.word	0x3fa55555
 8015650:	3fd33332 	.word	0x3fd33332
 8015654:	3fe90000 	.word	0x3fe90000

08015658 <__kernel_sin>:
 8015658:	ee10 3a90 	vmov	r3, s1
 801565c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015660:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015664:	da04      	bge.n	8015670 <__kernel_sin+0x18>
 8015666:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801566a:	ee17 3a90 	vmov	r3, s15
 801566e:	b35b      	cbz	r3, 80156c8 <__kernel_sin+0x70>
 8015670:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015674:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015678:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80156d0 <__kernel_sin+0x78>
 801567c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80156d8 <__kernel_sin+0x80>
 8015680:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015684:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80156e0 <__kernel_sin+0x88>
 8015688:	eea4 7b06 	vfma.f64	d7, d4, d6
 801568c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80156e8 <__kernel_sin+0x90>
 8015690:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015694:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80156f0 <__kernel_sin+0x98>
 8015698:	eea4 7b06 	vfma.f64	d7, d4, d6
 801569c:	b930      	cbnz	r0, 80156ac <__kernel_sin+0x54>
 801569e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80156f8 <__kernel_sin+0xa0>
 80156a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80156a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80156aa:	4770      	bx	lr
 80156ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80156b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80156b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80156b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80156bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8015700 <__kernel_sin+0xa8>
 80156c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80156c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80156c8:	4770      	bx	lr
 80156ca:	bf00      	nop
 80156cc:	f3af 8000 	nop.w
 80156d0:	5acfd57c 	.word	0x5acfd57c
 80156d4:	3de5d93a 	.word	0x3de5d93a
 80156d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80156dc:	be5ae5e6 	.word	0xbe5ae5e6
 80156e0:	57b1fe7d 	.word	0x57b1fe7d
 80156e4:	3ec71de3 	.word	0x3ec71de3
 80156e8:	19c161d5 	.word	0x19c161d5
 80156ec:	bf2a01a0 	.word	0xbf2a01a0
 80156f0:	1110f8a6 	.word	0x1110f8a6
 80156f4:	3f811111 	.word	0x3f811111
 80156f8:	55555549 	.word	0x55555549
 80156fc:	bfc55555 	.word	0xbfc55555
 8015700:	55555549 	.word	0x55555549
 8015704:	3fc55555 	.word	0x3fc55555

08015708 <__ieee754_log10>:
 8015708:	b510      	push	{r4, lr}
 801570a:	ee10 3a90 	vmov	r3, s1
 801570e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015712:	ed2d 8b02 	vpush	{d8}
 8015716:	da21      	bge.n	801575c <__ieee754_log10+0x54>
 8015718:	ee10 1a10 	vmov	r1, s0
 801571c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015720:	430a      	orrs	r2, r1
 8015722:	d108      	bne.n	8015736 <__ieee754_log10+0x2e>
 8015724:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80157b0 <__ieee754_log10+0xa8>
 8015728:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80157b8 <__ieee754_log10+0xb0>
 801572c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8015730:	ecbd 8b02 	vpop	{d8}
 8015734:	bd10      	pop	{r4, pc}
 8015736:	2b00      	cmp	r3, #0
 8015738:	da02      	bge.n	8015740 <__ieee754_log10+0x38>
 801573a:	ee30 6b40 	vsub.f64	d6, d0, d0
 801573e:	e7f3      	b.n	8015728 <__ieee754_log10+0x20>
 8015740:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80157c0 <__ieee754_log10+0xb8>
 8015744:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015748:	ee10 3a90 	vmov	r3, s1
 801574c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8015750:	4923      	ldr	r1, [pc, #140]	; (80157e0 <__ieee754_log10+0xd8>)
 8015752:	428b      	cmp	r3, r1
 8015754:	dd04      	ble.n	8015760 <__ieee754_log10+0x58>
 8015756:	ee30 0b00 	vadd.f64	d0, d0, d0
 801575a:	e7e9      	b.n	8015730 <__ieee754_log10+0x28>
 801575c:	2200      	movs	r2, #0
 801575e:	e7f7      	b.n	8015750 <__ieee754_log10+0x48>
 8015760:	1518      	asrs	r0, r3, #20
 8015762:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8015766:	4410      	add	r0, r2
 8015768:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801576c:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8015770:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8015774:	ee08 3a10 	vmov	s16, r3
 8015778:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 801577c:	ec53 2b10 	vmov	r2, r3, d0
 8015780:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015784:	ec43 2b10 	vmov	d0, r2, r3
 8015788:	f000 f97e 	bl	8015a88 <log>
 801578c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80157c8 <__ieee754_log10+0xc0>
 8015790:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015794:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80157d0 <__ieee754_log10+0xc8>
 8015798:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 801579c:	eea8 0b07 	vfma.f64	d0, d8, d7
 80157a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80157d8 <__ieee754_log10+0xd0>
 80157a4:	eea8 0b07 	vfma.f64	d0, d8, d7
 80157a8:	e7c2      	b.n	8015730 <__ieee754_log10+0x28>
 80157aa:	bf00      	nop
 80157ac:	f3af 8000 	nop.w
 80157b0:	00000000 	.word	0x00000000
 80157b4:	c3500000 	.word	0xc3500000
	...
 80157c4:	43500000 	.word	0x43500000
 80157c8:	1526e50e 	.word	0x1526e50e
 80157cc:	3fdbcb7b 	.word	0x3fdbcb7b
 80157d0:	11f12b36 	.word	0x11f12b36
 80157d4:	3d59fef3 	.word	0x3d59fef3
 80157d8:	509f6000 	.word	0x509f6000
 80157dc:	3fd34413 	.word	0x3fd34413
 80157e0:	7fefffff 	.word	0x7fefffff
 80157e4:	00000000 	.word	0x00000000

080157e8 <__ieee754_rem_pio2>:
 80157e8:	b570      	push	{r4, r5, r6, lr}
 80157ea:	eeb0 7b40 	vmov.f64	d7, d0
 80157ee:	ee17 5a90 	vmov	r5, s15
 80157f2:	4b99      	ldr	r3, [pc, #612]	; (8015a58 <__ieee754_rem_pio2+0x270>)
 80157f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80157f8:	429e      	cmp	r6, r3
 80157fa:	b088      	sub	sp, #32
 80157fc:	4604      	mov	r4, r0
 80157fe:	dc07      	bgt.n	8015810 <__ieee754_rem_pio2+0x28>
 8015800:	2200      	movs	r2, #0
 8015802:	2300      	movs	r3, #0
 8015804:	ed84 0b00 	vstr	d0, [r4]
 8015808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801580c:	2000      	movs	r0, #0
 801580e:	e01b      	b.n	8015848 <__ieee754_rem_pio2+0x60>
 8015810:	4b92      	ldr	r3, [pc, #584]	; (8015a5c <__ieee754_rem_pio2+0x274>)
 8015812:	429e      	cmp	r6, r3
 8015814:	dc3b      	bgt.n	801588e <__ieee754_rem_pio2+0xa6>
 8015816:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801581a:	2d00      	cmp	r5, #0
 801581c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8015a18 <__ieee754_rem_pio2+0x230>
 8015820:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8015824:	dd19      	ble.n	801585a <__ieee754_rem_pio2+0x72>
 8015826:	ee30 7b46 	vsub.f64	d7, d0, d6
 801582a:	429e      	cmp	r6, r3
 801582c:	d00e      	beq.n	801584c <__ieee754_rem_pio2+0x64>
 801582e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8015a20 <__ieee754_rem_pio2+0x238>
 8015832:	ee37 5b46 	vsub.f64	d5, d7, d6
 8015836:	ee37 7b45 	vsub.f64	d7, d7, d5
 801583a:	ed84 5b00 	vstr	d5, [r4]
 801583e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015842:	ed84 7b02 	vstr	d7, [r4, #8]
 8015846:	2001      	movs	r0, #1
 8015848:	b008      	add	sp, #32
 801584a:	bd70      	pop	{r4, r5, r6, pc}
 801584c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015a28 <__ieee754_rem_pio2+0x240>
 8015850:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015854:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015a30 <__ieee754_rem_pio2+0x248>
 8015858:	e7eb      	b.n	8015832 <__ieee754_rem_pio2+0x4a>
 801585a:	429e      	cmp	r6, r3
 801585c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015860:	d00e      	beq.n	8015880 <__ieee754_rem_pio2+0x98>
 8015862:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8015a20 <__ieee754_rem_pio2+0x238>
 8015866:	ee37 5b06 	vadd.f64	d5, d7, d6
 801586a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801586e:	ed84 5b00 	vstr	d5, [r4]
 8015872:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015876:	f04f 30ff 	mov.w	r0, #4294967295
 801587a:	ed84 7b02 	vstr	d7, [r4, #8]
 801587e:	e7e3      	b.n	8015848 <__ieee754_rem_pio2+0x60>
 8015880:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015a28 <__ieee754_rem_pio2+0x240>
 8015884:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015888:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015a30 <__ieee754_rem_pio2+0x248>
 801588c:	e7eb      	b.n	8015866 <__ieee754_rem_pio2+0x7e>
 801588e:	4b74      	ldr	r3, [pc, #464]	; (8015a60 <__ieee754_rem_pio2+0x278>)
 8015890:	429e      	cmp	r6, r3
 8015892:	dc70      	bgt.n	8015976 <__ieee754_rem_pio2+0x18e>
 8015894:	f000 f8ec 	bl	8015a70 <fabs>
 8015898:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801589c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015a38 <__ieee754_rem_pio2+0x250>
 80158a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80158a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80158a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80158ac:	ee17 0a90 	vmov	r0, s15
 80158b0:	eeb1 4b45 	vneg.f64	d4, d5
 80158b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015a18 <__ieee754_rem_pio2+0x230>
 80158b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80158bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015a20 <__ieee754_rem_pio2+0x238>
 80158c0:	281f      	cmp	r0, #31
 80158c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80158c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80158ca:	dc08      	bgt.n	80158de <__ieee754_rem_pio2+0xf6>
 80158cc:	4b65      	ldr	r3, [pc, #404]	; (8015a64 <__ieee754_rem_pio2+0x27c>)
 80158ce:	1e42      	subs	r2, r0, #1
 80158d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d4:	42b3      	cmp	r3, r6
 80158d6:	d002      	beq.n	80158de <__ieee754_rem_pio2+0xf6>
 80158d8:	ed84 6b00 	vstr	d6, [r4]
 80158dc:	e024      	b.n	8015928 <__ieee754_rem_pio2+0x140>
 80158de:	ee16 3a90 	vmov	r3, s13
 80158e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80158e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80158ea:	2b10      	cmp	r3, #16
 80158ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 80158f0:	ddf2      	ble.n	80158d8 <__ieee754_rem_pio2+0xf0>
 80158f2:	eeb0 6b40 	vmov.f64	d6, d0
 80158f6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8015a28 <__ieee754_rem_pio2+0x240>
 80158fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80158fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015902:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015906:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8015a30 <__ieee754_rem_pio2+0x248>
 801590a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801590e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015912:	ee13 3a90 	vmov	r3, s7
 8015916:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	2b31      	cmp	r3, #49	; 0x31
 801591e:	dc17      	bgt.n	8015950 <__ieee754_rem_pio2+0x168>
 8015920:	eeb0 0b46 	vmov.f64	d0, d6
 8015924:	ed84 3b00 	vstr	d3, [r4]
 8015928:	ed94 6b00 	vldr	d6, [r4]
 801592c:	2d00      	cmp	r5, #0
 801592e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015932:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015936:	ed84 0b02 	vstr	d0, [r4, #8]
 801593a:	da85      	bge.n	8015848 <__ieee754_rem_pio2+0x60>
 801593c:	eeb1 6b46 	vneg.f64	d6, d6
 8015940:	eeb1 0b40 	vneg.f64	d0, d0
 8015944:	ed84 6b00 	vstr	d6, [r4]
 8015948:	ed84 0b02 	vstr	d0, [r4, #8]
 801594c:	4240      	negs	r0, r0
 801594e:	e77b      	b.n	8015848 <__ieee754_rem_pio2+0x60>
 8015950:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8015a40 <__ieee754_rem_pio2+0x258>
 8015954:	eeb0 0b46 	vmov.f64	d0, d6
 8015958:	eea4 0b07 	vfma.f64	d0, d4, d7
 801595c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8015960:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015964:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8015a48 <__ieee754_rem_pio2+0x260>
 8015968:	eeb0 7b46 	vmov.f64	d7, d6
 801596c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8015970:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015974:	e7b0      	b.n	80158d8 <__ieee754_rem_pio2+0xf0>
 8015976:	4b3c      	ldr	r3, [pc, #240]	; (8015a68 <__ieee754_rem_pio2+0x280>)
 8015978:	429e      	cmp	r6, r3
 801597a:	dd06      	ble.n	801598a <__ieee754_rem_pio2+0x1a2>
 801597c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015980:	ed80 7b02 	vstr	d7, [r0, #8]
 8015984:	ed80 7b00 	vstr	d7, [r0]
 8015988:	e740      	b.n	801580c <__ieee754_rem_pio2+0x24>
 801598a:	1532      	asrs	r2, r6, #20
 801598c:	ee10 0a10 	vmov	r0, s0
 8015990:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015994:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015998:	ec41 0b17 	vmov	d7, r0, r1
 801599c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80159a0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8015a50 <__ieee754_rem_pio2+0x268>
 80159a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80159a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80159ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80159b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80159b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80159b8:	a808      	add	r0, sp, #32
 80159ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80159be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80159c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80159c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80159ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80159ce:	2103      	movs	r1, #3
 80159d0:	ed30 7b02 	vldmdb	r0!, {d7}
 80159d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80159d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159dc:	460b      	mov	r3, r1
 80159de:	f101 31ff 	add.w	r1, r1, #4294967295
 80159e2:	d0f5      	beq.n	80159d0 <__ieee754_rem_pio2+0x1e8>
 80159e4:	4921      	ldr	r1, [pc, #132]	; (8015a6c <__ieee754_rem_pio2+0x284>)
 80159e6:	9101      	str	r1, [sp, #4]
 80159e8:	2102      	movs	r1, #2
 80159ea:	9100      	str	r1, [sp, #0]
 80159ec:	a802      	add	r0, sp, #8
 80159ee:	4621      	mov	r1, r4
 80159f0:	f000 f942 	bl	8015c78 <__kernel_rem_pio2>
 80159f4:	2d00      	cmp	r5, #0
 80159f6:	f6bf af27 	bge.w	8015848 <__ieee754_rem_pio2+0x60>
 80159fa:	ed94 7b00 	vldr	d7, [r4]
 80159fe:	eeb1 7b47 	vneg.f64	d7, d7
 8015a02:	ed84 7b00 	vstr	d7, [r4]
 8015a06:	ed94 7b02 	vldr	d7, [r4, #8]
 8015a0a:	eeb1 7b47 	vneg.f64	d7, d7
 8015a0e:	ed84 7b02 	vstr	d7, [r4, #8]
 8015a12:	e79b      	b.n	801594c <__ieee754_rem_pio2+0x164>
 8015a14:	f3af 8000 	nop.w
 8015a18:	54400000 	.word	0x54400000
 8015a1c:	3ff921fb 	.word	0x3ff921fb
 8015a20:	1a626331 	.word	0x1a626331
 8015a24:	3dd0b461 	.word	0x3dd0b461
 8015a28:	1a600000 	.word	0x1a600000
 8015a2c:	3dd0b461 	.word	0x3dd0b461
 8015a30:	2e037073 	.word	0x2e037073
 8015a34:	3ba3198a 	.word	0x3ba3198a
 8015a38:	6dc9c883 	.word	0x6dc9c883
 8015a3c:	3fe45f30 	.word	0x3fe45f30
 8015a40:	2e000000 	.word	0x2e000000
 8015a44:	3ba3198a 	.word	0x3ba3198a
 8015a48:	252049c1 	.word	0x252049c1
 8015a4c:	397b839a 	.word	0x397b839a
 8015a50:	00000000 	.word	0x00000000
 8015a54:	41700000 	.word	0x41700000
 8015a58:	3fe921fb 	.word	0x3fe921fb
 8015a5c:	4002d97b 	.word	0x4002d97b
 8015a60:	413921fb 	.word	0x413921fb
 8015a64:	0801a500 	.word	0x0801a500
 8015a68:	7fefffff 	.word	0x7fefffff
 8015a6c:	0801a580 	.word	0x0801a580

08015a70 <fabs>:
 8015a70:	ec51 0b10 	vmov	r0, r1, d0
 8015a74:	ee10 2a10 	vmov	r2, s0
 8015a78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015a7c:	ec43 2b10 	vmov	d0, r2, r3
 8015a80:	4770      	bx	lr
 8015a82:	0000      	movs	r0, r0
 8015a84:	0000      	movs	r0, r0
	...

08015a88 <log>:
 8015a88:	b470      	push	{r4, r5, r6}
 8015a8a:	ee10 1a90 	vmov	r1, s1
 8015a8e:	ee10 3a10 	vmov	r3, s0
 8015a92:	f04f 34ff 	mov.w	r4, #4294967295
 8015a96:	429c      	cmp	r4, r3
 8015a98:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8015a9c:	4c72      	ldr	r4, [pc, #456]	; (8015c68 <log+0x1e0>)
 8015a9e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8015aa2:	4184      	sbcs	r4, r0
 8015aa4:	ed2d 8b02 	vpush	{d8}
 8015aa8:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8015aac:	d35a      	bcc.n	8015b64 <log+0xdc>
 8015aae:	4a6f      	ldr	r2, [pc, #444]	; (8015c6c <log+0x1e4>)
 8015ab0:	4291      	cmp	r1, r2
 8015ab2:	bf08      	it	eq
 8015ab4:	2b00      	cmpeq	r3, #0
 8015ab6:	f000 80c5 	beq.w	8015c44 <log+0x1bc>
 8015aba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015abe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015ac2:	4b6b      	ldr	r3, [pc, #428]	; (8015c70 <log+0x1e8>)
 8015ac4:	ee20 2b00 	vmul.f64	d2, d0, d0
 8015ac8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8015acc:	ee20 4b02 	vmul.f64	d4, d0, d2
 8015ad0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8015ad4:	eea6 7b00 	vfma.f64	d7, d6, d0
 8015ad8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8015adc:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8015ae0:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015ae4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8015ae8:	eea5 6b00 	vfma.f64	d6, d5, d0
 8015aec:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8015af0:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8015af4:	eea5 6b02 	vfma.f64	d6, d5, d2
 8015af8:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8015afc:	eea3 5b00 	vfma.f64	d5, d3, d0
 8015b00:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8015b04:	eea3 5b02 	vfma.f64	d5, d3, d2
 8015b08:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8015b0c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015b10:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015b14:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8015b18:	eea6 7b04 	vfma.f64	d7, d6, d4
 8015b1c:	eeb0 2b47 	vmov.f64	d2, d7
 8015b20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015c50 <log+0x1c8>
 8015b24:	eeb0 6b40 	vmov.f64	d6, d0
 8015b28:	eeb0 3b40 	vmov.f64	d3, d0
 8015b2c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8015b30:	eea0 6b47 	vfms.f64	d6, d0, d7
 8015b34:	ee30 8b46 	vsub.f64	d8, d0, d6
 8015b38:	ee26 1b06 	vmul.f64	d1, d6, d6
 8015b3c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8015b40:	ee30 7b43 	vsub.f64	d7, d0, d3
 8015b44:	ee30 0b06 	vadd.f64	d0, d0, d6
 8015b48:	eea1 7b05 	vfma.f64	d7, d1, d5
 8015b4c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8015b50:	eea5 7b00 	vfma.f64	d7, d5, d0
 8015b54:	eea2 7b04 	vfma.f64	d7, d2, d4
 8015b58:	ee33 0b07 	vadd.f64	d0, d3, d7
 8015b5c:	ecbd 8b02 	vpop	{d8}
 8015b60:	bc70      	pop	{r4, r5, r6}
 8015b62:	4770      	bx	lr
 8015b64:	f1a2 0410 	sub.w	r4, r2, #16
 8015b68:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8015b6c:	4284      	cmp	r4, r0
 8015b6e:	d924      	bls.n	8015bba <log+0x132>
 8015b70:	18d8      	adds	r0, r3, r3
 8015b72:	eb41 0401 	adc.w	r4, r1, r1
 8015b76:	4320      	orrs	r0, r4
 8015b78:	d105      	bne.n	8015b86 <log+0xfe>
 8015b7a:	ecbd 8b02 	vpop	{d8}
 8015b7e:	2001      	movs	r0, #1
 8015b80:	bc70      	pop	{r4, r5, r6}
 8015b82:	f7ff bcb9 	b.w	80154f8 <__math_divzero>
 8015b86:	483b      	ldr	r0, [pc, #236]	; (8015c74 <log+0x1ec>)
 8015b88:	4281      	cmp	r1, r0
 8015b8a:	bf08      	it	eq
 8015b8c:	2b00      	cmpeq	r3, #0
 8015b8e:	d0e5      	beq.n	8015b5c <log+0xd4>
 8015b90:	0413      	lsls	r3, r2, #16
 8015b92:	d403      	bmi.n	8015b9c <log+0x114>
 8015b94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8015b98:	4393      	bics	r3, r2
 8015b9a:	d104      	bne.n	8015ba6 <log+0x11e>
 8015b9c:	ecbd 8b02 	vpop	{d8}
 8015ba0:	bc70      	pop	{r4, r5, r6}
 8015ba2:	f7ff bcc1 	b.w	8015528 <__math_invalid>
 8015ba6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8015c58 <log+0x1d0>
 8015baa:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015bae:	ec53 2b17 	vmov	r2, r3, d7
 8015bb2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8015bb6:	ee17 3a10 	vmov	r3, s14
 8015bba:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8015bbe:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8015bc2:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 8015bc6:	0d16      	lsrs	r6, r2, #20
 8015bc8:	1e1c      	subs	r4, r3, #0
 8015bca:	4b29      	ldr	r3, [pc, #164]	; (8015c70 <log+0x1e8>)
 8015bcc:	f3c2 3046 	ubfx	r0, r2, #13, #7
 8015bd0:	0536      	lsls	r6, r6, #20
 8015bd2:	1b8d      	subs	r5, r1, r6
 8015bd4:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 8015bd8:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8015bdc:	ec45 4b16 	vmov	d6, r4, r5
 8015be0:	1512      	asrs	r2, r2, #20
 8015be2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8015be6:	ee07 2a90 	vmov	s15, r2
 8015bea:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015bee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015bf2:	ed93 4b00 	vldr	d4, [r3]
 8015bf6:	ee25 1b02 	vmul.f64	d1, d5, d2
 8015bfa:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8015bfe:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c02:	ee35 4b07 	vadd.f64	d4, d5, d7
 8015c06:	ee37 0b44 	vsub.f64	d0, d7, d4
 8015c0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8015c0e:	ee30 0b05 	vadd.f64	d0, d0, d5
 8015c12:	eea7 0b06 	vfma.f64	d0, d7, d6
 8015c16:	ed93 7b04 	vldr	d7, [r3, #16]
 8015c1a:	ed93 6b08 	vldr	d6, [r3, #32]
 8015c1e:	eea7 0b02 	vfma.f64	d0, d7, d2
 8015c22:	ed93 7b06 	vldr	d7, [r3, #24]
 8015c26:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8015c2a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8015c2e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8015c32:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015c36:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015c3a:	eea1 0b07 	vfma.f64	d0, d1, d7
 8015c3e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8015c42:	e78b      	b.n	8015b5c <log+0xd4>
 8015c44:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8015c60 <log+0x1d8>
 8015c48:	e788      	b.n	8015b5c <log+0xd4>
 8015c4a:	bf00      	nop
 8015c4c:	f3af 8000 	nop.w
 8015c50:	00000000 	.word	0x00000000
 8015c54:	41a00000 	.word	0x41a00000
 8015c58:	00000000 	.word	0x00000000
 8015c5c:	43300000 	.word	0x43300000
	...
 8015c68:	000308ff 	.word	0x000308ff
 8015c6c:	3ff00000 	.word	0x3ff00000
 8015c70:	0801a688 	.word	0x0801a688
 8015c74:	7ff00000 	.word	0x7ff00000

08015c78 <__kernel_rem_pio2>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	ed2d 8b06 	vpush	{d8-d10}
 8015c80:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8015c84:	460f      	mov	r7, r1
 8015c86:	9002      	str	r0, [sp, #8]
 8015c88:	49c3      	ldr	r1, [pc, #780]	; (8015f98 <__kernel_rem_pio2+0x320>)
 8015c8a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8015c8c:	9301      	str	r3, [sp, #4]
 8015c8e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8015c92:	9901      	ldr	r1, [sp, #4]
 8015c94:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8015c96:	f112 0f14 	cmn.w	r2, #20
 8015c9a:	bfa8      	it	ge
 8015c9c:	1ed0      	subge	r0, r2, #3
 8015c9e:	f101 3aff 	add.w	sl, r1, #4294967295
 8015ca2:	bfaa      	itet	ge
 8015ca4:	2418      	movge	r4, #24
 8015ca6:	2000      	movlt	r0, #0
 8015ca8:	fb90 f0f4 	sdivge	r0, r0, r4
 8015cac:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8015f80 <__kernel_rem_pio2+0x308>
 8015cb0:	f06f 0417 	mvn.w	r4, #23
 8015cb4:	fb00 4404 	mla	r4, r0, r4, r4
 8015cb8:	eba0 060a 	sub.w	r6, r0, sl
 8015cbc:	4414      	add	r4, r2
 8015cbe:	eb09 0c0a 	add.w	ip, r9, sl
 8015cc2:	ad1a      	add	r5, sp, #104	; 0x68
 8015cc4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8015cc8:	2200      	movs	r2, #0
 8015cca:	4562      	cmp	r2, ip
 8015ccc:	dd10      	ble.n	8015cf0 <__kernel_rem_pio2+0x78>
 8015cce:	9a01      	ldr	r2, [sp, #4]
 8015cd0:	a91a      	add	r1, sp, #104	; 0x68
 8015cd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015cd6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8015cda:	f04f 0c00 	mov.w	ip, #0
 8015cde:	45cc      	cmp	ip, r9
 8015ce0:	dc26      	bgt.n	8015d30 <__kernel_rem_pio2+0xb8>
 8015ce2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8015f80 <__kernel_rem_pio2+0x308>
 8015ce6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015cea:	4616      	mov	r6, r2
 8015cec:	2500      	movs	r5, #0
 8015cee:	e015      	b.n	8015d1c <__kernel_rem_pio2+0xa4>
 8015cf0:	42d6      	cmn	r6, r2
 8015cf2:	d409      	bmi.n	8015d08 <__kernel_rem_pio2+0x90>
 8015cf4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8015cf8:	ee07 1a90 	vmov	s15, r1
 8015cfc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015d00:	eca5 7b02 	vstmia	r5!, {d7}
 8015d04:	3201      	adds	r2, #1
 8015d06:	e7e0      	b.n	8015cca <__kernel_rem_pio2+0x52>
 8015d08:	eeb0 7b46 	vmov.f64	d7, d6
 8015d0c:	e7f8      	b.n	8015d00 <__kernel_rem_pio2+0x88>
 8015d0e:	ecbe 5b02 	vldmia	lr!, {d5}
 8015d12:	ed96 6b00 	vldr	d6, [r6]
 8015d16:	3501      	adds	r5, #1
 8015d18:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015d1c:	4555      	cmp	r5, sl
 8015d1e:	f1a6 0608 	sub.w	r6, r6, #8
 8015d22:	ddf4      	ble.n	8015d0e <__kernel_rem_pio2+0x96>
 8015d24:	eca8 7b02 	vstmia	r8!, {d7}
 8015d28:	f10c 0c01 	add.w	ip, ip, #1
 8015d2c:	3208      	adds	r2, #8
 8015d2e:	e7d6      	b.n	8015cde <__kernel_rem_pio2+0x66>
 8015d30:	aa06      	add	r2, sp, #24
 8015d32:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8015f88 <__kernel_rem_pio2+0x310>
 8015d36:	ed9f ab96 	vldr	d10, [pc, #600]	; 8015f90 <__kernel_rem_pio2+0x318>
 8015d3a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015d3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015d42:	9204      	str	r2, [sp, #16]
 8015d44:	9303      	str	r3, [sp, #12]
 8015d46:	464d      	mov	r5, r9
 8015d48:	00eb      	lsls	r3, r5, #3
 8015d4a:	9305      	str	r3, [sp, #20]
 8015d4c:	ab92      	add	r3, sp, #584	; 0x248
 8015d4e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015d52:	f10d 0b18 	add.w	fp, sp, #24
 8015d56:	ab6a      	add	r3, sp, #424	; 0x1a8
 8015d58:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8015d5c:	465e      	mov	r6, fp
 8015d5e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015d62:	4628      	mov	r0, r5
 8015d64:	2800      	cmp	r0, #0
 8015d66:	f1a2 0208 	sub.w	r2, r2, #8
 8015d6a:	dc48      	bgt.n	8015dfe <__kernel_rem_pio2+0x186>
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f000 fa17 	bl	80161a0 <scalbn>
 8015d72:	eeb0 8b40 	vmov.f64	d8, d0
 8015d76:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8015d7a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8015d7e:	f000 fa8f 	bl	80162a0 <floor>
 8015d82:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8015d86:	eea0 8b47 	vfms.f64	d8, d0, d7
 8015d8a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8015d8e:	2c00      	cmp	r4, #0
 8015d90:	ee17 8a90 	vmov	r8, s15
 8015d94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015d98:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015d9c:	dd41      	ble.n	8015e22 <__kernel_rem_pio2+0x1aa>
 8015d9e:	1e68      	subs	r0, r5, #1
 8015da0:	ab06      	add	r3, sp, #24
 8015da2:	f1c4 0c18 	rsb	ip, r4, #24
 8015da6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8015daa:	fa46 f20c 	asr.w	r2, r6, ip
 8015dae:	4490      	add	r8, r2
 8015db0:	fa02 f20c 	lsl.w	r2, r2, ip
 8015db4:	1ab6      	subs	r6, r6, r2
 8015db6:	f1c4 0217 	rsb	r2, r4, #23
 8015dba:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8015dbe:	4116      	asrs	r6, r2
 8015dc0:	2e00      	cmp	r6, #0
 8015dc2:	dd3d      	ble.n	8015e40 <__kernel_rem_pio2+0x1c8>
 8015dc4:	f04f 0c00 	mov.w	ip, #0
 8015dc8:	f108 0801 	add.w	r8, r8, #1
 8015dcc:	4660      	mov	r0, ip
 8015dce:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8015dd2:	4565      	cmp	r5, ip
 8015dd4:	dc6a      	bgt.n	8015eac <__kernel_rem_pio2+0x234>
 8015dd6:	2c00      	cmp	r4, #0
 8015dd8:	dd04      	ble.n	8015de4 <__kernel_rem_pio2+0x16c>
 8015dda:	2c01      	cmp	r4, #1
 8015ddc:	d07b      	beq.n	8015ed6 <__kernel_rem_pio2+0x25e>
 8015dde:	2c02      	cmp	r4, #2
 8015de0:	f000 8083 	beq.w	8015eea <__kernel_rem_pio2+0x272>
 8015de4:	2e02      	cmp	r6, #2
 8015de6:	d12b      	bne.n	8015e40 <__kernel_rem_pio2+0x1c8>
 8015de8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015dec:	ee30 8b48 	vsub.f64	d8, d0, d8
 8015df0:	b330      	cbz	r0, 8015e40 <__kernel_rem_pio2+0x1c8>
 8015df2:	4620      	mov	r0, r4
 8015df4:	f000 f9d4 	bl	80161a0 <scalbn>
 8015df8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8015dfc:	e020      	b.n	8015e40 <__kernel_rem_pio2+0x1c8>
 8015dfe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8015e02:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015e06:	3801      	subs	r0, #1
 8015e08:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8015e0c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8015e10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015e14:	eca6 0a01 	vstmia	r6!, {s0}
 8015e18:	ed92 0b00 	vldr	d0, [r2]
 8015e1c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8015e20:	e7a0      	b.n	8015d64 <__kernel_rem_pio2+0xec>
 8015e22:	d105      	bne.n	8015e30 <__kernel_rem_pio2+0x1b8>
 8015e24:	1e6a      	subs	r2, r5, #1
 8015e26:	ab06      	add	r3, sp, #24
 8015e28:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015e2c:	15f6      	asrs	r6, r6, #23
 8015e2e:	e7c7      	b.n	8015dc0 <__kernel_rem_pio2+0x148>
 8015e30:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015e34:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3c:	da34      	bge.n	8015ea8 <__kernel_rem_pio2+0x230>
 8015e3e:	2600      	movs	r6, #0
 8015e40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e48:	f040 80aa 	bne.w	8015fa0 <__kernel_rem_pio2+0x328>
 8015e4c:	f105 3bff 	add.w	fp, r5, #4294967295
 8015e50:	4658      	mov	r0, fp
 8015e52:	2200      	movs	r2, #0
 8015e54:	4548      	cmp	r0, r9
 8015e56:	da50      	bge.n	8015efa <__kernel_rem_pio2+0x282>
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	d06b      	beq.n	8015f34 <__kernel_rem_pio2+0x2bc>
 8015e5c:	ab06      	add	r3, sp, #24
 8015e5e:	3c18      	subs	r4, #24
 8015e60:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	f000 8087 	beq.w	8015f78 <__kernel_rem_pio2+0x300>
 8015e6a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f000 f996 	bl	80161a0 <scalbn>
 8015e74:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8015f88 <__kernel_rem_pio2+0x310>
 8015e78:	f10b 0201 	add.w	r2, fp, #1
 8015e7c:	a96a      	add	r1, sp, #424	; 0x1a8
 8015e7e:	00d3      	lsls	r3, r2, #3
 8015e80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015e84:	465a      	mov	r2, fp
 8015e86:	2a00      	cmp	r2, #0
 8015e88:	f280 80b8 	bge.w	8015ffc <__kernel_rem_pio2+0x384>
 8015e8c:	465a      	mov	r2, fp
 8015e8e:	2a00      	cmp	r2, #0
 8015e90:	f2c0 80d6 	blt.w	8016040 <__kernel_rem_pio2+0x3c8>
 8015e94:	a96a      	add	r1, sp, #424	; 0x1a8
 8015e96:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8015e9a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015f80 <__kernel_rem_pio2+0x308>
 8015e9e:	4d3f      	ldr	r5, [pc, #252]	; (8015f9c <__kernel_rem_pio2+0x324>)
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	ebab 0102 	sub.w	r1, fp, r2
 8015ea6:	e0c0      	b.n	801602a <__kernel_rem_pio2+0x3b2>
 8015ea8:	2602      	movs	r6, #2
 8015eaa:	e78b      	b.n	8015dc4 <__kernel_rem_pio2+0x14c>
 8015eac:	f8db 2000 	ldr.w	r2, [fp]
 8015eb0:	b958      	cbnz	r0, 8015eca <__kernel_rem_pio2+0x252>
 8015eb2:	b122      	cbz	r2, 8015ebe <__kernel_rem_pio2+0x246>
 8015eb4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8015eb8:	f8cb 2000 	str.w	r2, [fp]
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	f10c 0c01 	add.w	ip, ip, #1
 8015ec2:	f10b 0b04 	add.w	fp, fp, #4
 8015ec6:	4610      	mov	r0, r2
 8015ec8:	e783      	b.n	8015dd2 <__kernel_rem_pio2+0x15a>
 8015eca:	ebae 0202 	sub.w	r2, lr, r2
 8015ece:	f8cb 2000 	str.w	r2, [fp]
 8015ed2:	4602      	mov	r2, r0
 8015ed4:	e7f3      	b.n	8015ebe <__kernel_rem_pio2+0x246>
 8015ed6:	f105 3cff 	add.w	ip, r5, #4294967295
 8015eda:	ab06      	add	r3, sp, #24
 8015edc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015ee0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015ee4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8015ee8:	e77c      	b.n	8015de4 <__kernel_rem_pio2+0x16c>
 8015eea:	f105 3cff 	add.w	ip, r5, #4294967295
 8015eee:	ab06      	add	r3, sp, #24
 8015ef0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015ef4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8015ef8:	e7f4      	b.n	8015ee4 <__kernel_rem_pio2+0x26c>
 8015efa:	ab06      	add	r3, sp, #24
 8015efc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f00:	3801      	subs	r0, #1
 8015f02:	431a      	orrs	r2, r3
 8015f04:	e7a6      	b.n	8015e54 <__kernel_rem_pio2+0x1dc>
 8015f06:	3201      	adds	r2, #1
 8015f08:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8015f0c:	2e00      	cmp	r6, #0
 8015f0e:	d0fa      	beq.n	8015f06 <__kernel_rem_pio2+0x28e>
 8015f10:	9b05      	ldr	r3, [sp, #20]
 8015f12:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8015f16:	eb0d 0003 	add.w	r0, sp, r3
 8015f1a:	9b01      	ldr	r3, [sp, #4]
 8015f1c:	18ee      	adds	r6, r5, r3
 8015f1e:	ab1a      	add	r3, sp, #104	; 0x68
 8015f20:	f105 0c01 	add.w	ip, r5, #1
 8015f24:	3898      	subs	r0, #152	; 0x98
 8015f26:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8015f2a:	442a      	add	r2, r5
 8015f2c:	4562      	cmp	r2, ip
 8015f2e:	da04      	bge.n	8015f3a <__kernel_rem_pio2+0x2c2>
 8015f30:	4615      	mov	r5, r2
 8015f32:	e709      	b.n	8015d48 <__kernel_rem_pio2+0xd0>
 8015f34:	9804      	ldr	r0, [sp, #16]
 8015f36:	2201      	movs	r2, #1
 8015f38:	e7e6      	b.n	8015f08 <__kernel_rem_pio2+0x290>
 8015f3a:	9b03      	ldr	r3, [sp, #12]
 8015f3c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015f40:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8015f44:	9305      	str	r3, [sp, #20]
 8015f46:	ee07 3a90 	vmov	s15, r3
 8015f4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015f4e:	2500      	movs	r5, #0
 8015f50:	eca6 7b02 	vstmia	r6!, {d7}
 8015f54:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8015f80 <__kernel_rem_pio2+0x308>
 8015f58:	46b0      	mov	r8, r6
 8015f5a:	4555      	cmp	r5, sl
 8015f5c:	dd04      	ble.n	8015f68 <__kernel_rem_pio2+0x2f0>
 8015f5e:	eca0 7b02 	vstmia	r0!, {d7}
 8015f62:	f10c 0c01 	add.w	ip, ip, #1
 8015f66:	e7e1      	b.n	8015f2c <__kernel_rem_pio2+0x2b4>
 8015f68:	ecbe 5b02 	vldmia	lr!, {d5}
 8015f6c:	ed38 6b02 	vldmdb	r8!, {d6}
 8015f70:	3501      	adds	r5, #1
 8015f72:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015f76:	e7f0      	b.n	8015f5a <__kernel_rem_pio2+0x2e2>
 8015f78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015f7c:	e76e      	b.n	8015e5c <__kernel_rem_pio2+0x1e4>
 8015f7e:	bf00      	nop
	...
 8015f8c:	3e700000 	.word	0x3e700000
 8015f90:	00000000 	.word	0x00000000
 8015f94:	41700000 	.word	0x41700000
 8015f98:	0801af58 	.word	0x0801af58
 8015f9c:	0801af18 	.word	0x0801af18
 8015fa0:	4260      	negs	r0, r4
 8015fa2:	eeb0 0b48 	vmov.f64	d0, d8
 8015fa6:	f000 f8fb 	bl	80161a0 <scalbn>
 8015faa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8016188 <__kernel_rem_pio2+0x510>
 8015fae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8015fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb6:	db18      	blt.n	8015fea <__kernel_rem_pio2+0x372>
 8015fb8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016190 <__kernel_rem_pio2+0x518>
 8015fbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015fc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015fc4:	aa06      	add	r2, sp, #24
 8015fc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8015fca:	eea5 0b46 	vfms.f64	d0, d5, d6
 8015fce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015fd2:	f105 0b01 	add.w	fp, r5, #1
 8015fd6:	ee10 3a10 	vmov	r3, s0
 8015fda:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015fde:	ee17 3a10 	vmov	r3, s14
 8015fe2:	3418      	adds	r4, #24
 8015fe4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8015fe8:	e73f      	b.n	8015e6a <__kernel_rem_pio2+0x1f2>
 8015fea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015fee:	aa06      	add	r2, sp, #24
 8015ff0:	ee10 3a10 	vmov	r3, s0
 8015ff4:	46ab      	mov	fp, r5
 8015ff6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015ffa:	e736      	b.n	8015e6a <__kernel_rem_pio2+0x1f2>
 8015ffc:	a806      	add	r0, sp, #24
 8015ffe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016002:	9001      	str	r0, [sp, #4]
 8016004:	ee07 0a90 	vmov	s15, r0
 8016008:	3a01      	subs	r2, #1
 801600a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801600e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016012:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016016:	ed21 7b02 	vstmdb	r1!, {d7}
 801601a:	e734      	b.n	8015e86 <__kernel_rem_pio2+0x20e>
 801601c:	ecb5 5b02 	vldmia	r5!, {d5}
 8016020:	ecb4 6b02 	vldmia	r4!, {d6}
 8016024:	3001      	adds	r0, #1
 8016026:	eea5 7b06 	vfma.f64	d7, d5, d6
 801602a:	4548      	cmp	r0, r9
 801602c:	dc01      	bgt.n	8016032 <__kernel_rem_pio2+0x3ba>
 801602e:	4288      	cmp	r0, r1
 8016030:	ddf4      	ble.n	801601c <__kernel_rem_pio2+0x3a4>
 8016032:	a842      	add	r0, sp, #264	; 0x108
 8016034:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016038:	ed81 7b00 	vstr	d7, [r1]
 801603c:	3a01      	subs	r2, #1
 801603e:	e726      	b.n	8015e8e <__kernel_rem_pio2+0x216>
 8016040:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8016042:	2a02      	cmp	r2, #2
 8016044:	dc0a      	bgt.n	801605c <__kernel_rem_pio2+0x3e4>
 8016046:	2a00      	cmp	r2, #0
 8016048:	dc2e      	bgt.n	80160a8 <__kernel_rem_pio2+0x430>
 801604a:	d047      	beq.n	80160dc <__kernel_rem_pio2+0x464>
 801604c:	f008 0007 	and.w	r0, r8, #7
 8016050:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8016054:	ecbd 8b06 	vpop	{d8-d10}
 8016058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801605c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801605e:	2a03      	cmp	r2, #3
 8016060:	d1f4      	bne.n	801604c <__kernel_rem_pio2+0x3d4>
 8016062:	a942      	add	r1, sp, #264	; 0x108
 8016064:	f1a3 0208 	sub.w	r2, r3, #8
 8016068:	440a      	add	r2, r1
 801606a:	4611      	mov	r1, r2
 801606c:	4658      	mov	r0, fp
 801606e:	2800      	cmp	r0, #0
 8016070:	f1a1 0108 	sub.w	r1, r1, #8
 8016074:	dc55      	bgt.n	8016122 <__kernel_rem_pio2+0x4aa>
 8016076:	4659      	mov	r1, fp
 8016078:	2901      	cmp	r1, #1
 801607a:	f1a2 0208 	sub.w	r2, r2, #8
 801607e:	dc60      	bgt.n	8016142 <__kernel_rem_pio2+0x4ca>
 8016080:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8016198 <__kernel_rem_pio2+0x520>
 8016084:	aa42      	add	r2, sp, #264	; 0x108
 8016086:	4413      	add	r3, r2
 8016088:	f1bb 0f01 	cmp.w	fp, #1
 801608c:	dc69      	bgt.n	8016162 <__kernel_rem_pio2+0x4ea>
 801608e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8016092:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8016096:	2e00      	cmp	r6, #0
 8016098:	d16a      	bne.n	8016170 <__kernel_rem_pio2+0x4f8>
 801609a:	ed87 5b00 	vstr	d5, [r7]
 801609e:	ed87 6b02 	vstr	d6, [r7, #8]
 80160a2:	ed87 7b04 	vstr	d7, [r7, #16]
 80160a6:	e7d1      	b.n	801604c <__kernel_rem_pio2+0x3d4>
 80160a8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016198 <__kernel_rem_pio2+0x520>
 80160ac:	aa42      	add	r2, sp, #264	; 0x108
 80160ae:	4413      	add	r3, r2
 80160b0:	465a      	mov	r2, fp
 80160b2:	2a00      	cmp	r2, #0
 80160b4:	da26      	bge.n	8016104 <__kernel_rem_pio2+0x48c>
 80160b6:	b35e      	cbz	r6, 8016110 <__kernel_rem_pio2+0x498>
 80160b8:	eeb1 7b46 	vneg.f64	d7, d6
 80160bc:	ed87 7b00 	vstr	d7, [r7]
 80160c0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80160c4:	aa44      	add	r2, sp, #272	; 0x110
 80160c6:	2301      	movs	r3, #1
 80160c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80160cc:	459b      	cmp	fp, r3
 80160ce:	da22      	bge.n	8016116 <__kernel_rem_pio2+0x49e>
 80160d0:	b10e      	cbz	r6, 80160d6 <__kernel_rem_pio2+0x45e>
 80160d2:	eeb1 7b47 	vneg.f64	d7, d7
 80160d6:	ed87 7b02 	vstr	d7, [r7, #8]
 80160da:	e7b7      	b.n	801604c <__kernel_rem_pio2+0x3d4>
 80160dc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016198 <__kernel_rem_pio2+0x520>
 80160e0:	aa42      	add	r2, sp, #264	; 0x108
 80160e2:	4413      	add	r3, r2
 80160e4:	f1bb 0f00 	cmp.w	fp, #0
 80160e8:	da05      	bge.n	80160f6 <__kernel_rem_pio2+0x47e>
 80160ea:	b10e      	cbz	r6, 80160f0 <__kernel_rem_pio2+0x478>
 80160ec:	eeb1 7b47 	vneg.f64	d7, d7
 80160f0:	ed87 7b00 	vstr	d7, [r7]
 80160f4:	e7aa      	b.n	801604c <__kernel_rem_pio2+0x3d4>
 80160f6:	ed33 6b02 	vldmdb	r3!, {d6}
 80160fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80160fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016102:	e7ef      	b.n	80160e4 <__kernel_rem_pio2+0x46c>
 8016104:	ed33 7b02 	vldmdb	r3!, {d7}
 8016108:	3a01      	subs	r2, #1
 801610a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801610e:	e7d0      	b.n	80160b2 <__kernel_rem_pio2+0x43a>
 8016110:	eeb0 7b46 	vmov.f64	d7, d6
 8016114:	e7d2      	b.n	80160bc <__kernel_rem_pio2+0x444>
 8016116:	ecb2 6b02 	vldmia	r2!, {d6}
 801611a:	3301      	adds	r3, #1
 801611c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016120:	e7d4      	b.n	80160cc <__kernel_rem_pio2+0x454>
 8016122:	ed91 7b00 	vldr	d7, [r1]
 8016126:	ed91 5b02 	vldr	d5, [r1, #8]
 801612a:	3801      	subs	r0, #1
 801612c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016130:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016134:	ed81 6b00 	vstr	d6, [r1]
 8016138:	ee37 7b05 	vadd.f64	d7, d7, d5
 801613c:	ed81 7b02 	vstr	d7, [r1, #8]
 8016140:	e795      	b.n	801606e <__kernel_rem_pio2+0x3f6>
 8016142:	ed92 7b00 	vldr	d7, [r2]
 8016146:	ed92 5b02 	vldr	d5, [r2, #8]
 801614a:	3901      	subs	r1, #1
 801614c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016150:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016154:	ed82 6b00 	vstr	d6, [r2]
 8016158:	ee37 7b05 	vadd.f64	d7, d7, d5
 801615c:	ed82 7b02 	vstr	d7, [r2, #8]
 8016160:	e78a      	b.n	8016078 <__kernel_rem_pio2+0x400>
 8016162:	ed33 6b02 	vldmdb	r3!, {d6}
 8016166:	f10b 3bff 	add.w	fp, fp, #4294967295
 801616a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801616e:	e78b      	b.n	8016088 <__kernel_rem_pio2+0x410>
 8016170:	eeb1 5b45 	vneg.f64	d5, d5
 8016174:	eeb1 6b46 	vneg.f64	d6, d6
 8016178:	ed87 5b00 	vstr	d5, [r7]
 801617c:	eeb1 7b47 	vneg.f64	d7, d7
 8016180:	ed87 6b02 	vstr	d6, [r7, #8]
 8016184:	e78d      	b.n	80160a2 <__kernel_rem_pio2+0x42a>
 8016186:	bf00      	nop
 8016188:	00000000 	.word	0x00000000
 801618c:	41700000 	.word	0x41700000
 8016190:	00000000 	.word	0x00000000
 8016194:	3e700000 	.word	0x3e700000
	...

080161a0 <scalbn>:
 80161a0:	ee10 1a90 	vmov	r1, s1
 80161a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80161a8:	b98b      	cbnz	r3, 80161ce <scalbn+0x2e>
 80161aa:	ee10 3a10 	vmov	r3, s0
 80161ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80161b2:	4319      	orrs	r1, r3
 80161b4:	d00a      	beq.n	80161cc <scalbn+0x2c>
 80161b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8016268 <scalbn+0xc8>
 80161ba:	4b37      	ldr	r3, [pc, #220]	; (8016298 <scalbn+0xf8>)
 80161bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80161c0:	4298      	cmp	r0, r3
 80161c2:	da0b      	bge.n	80161dc <scalbn+0x3c>
 80161c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8016270 <scalbn+0xd0>
 80161c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80161cc:	4770      	bx	lr
 80161ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d107      	bne.n	80161e6 <scalbn+0x46>
 80161d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80161da:	4770      	bx	lr
 80161dc:	ee10 1a90 	vmov	r1, s1
 80161e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80161e4:	3b36      	subs	r3, #54	; 0x36
 80161e6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80161ea:	4290      	cmp	r0, r2
 80161ec:	dd0d      	ble.n	801620a <scalbn+0x6a>
 80161ee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016278 <scalbn+0xd8>
 80161f2:	ee10 3a90 	vmov	r3, s1
 80161f6:	eeb0 6b47 	vmov.f64	d6, d7
 80161fa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8016280 <scalbn+0xe0>
 80161fe:	2b00      	cmp	r3, #0
 8016200:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016204:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016208:	4770      	bx	lr
 801620a:	4418      	add	r0, r3
 801620c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016210:	4298      	cmp	r0, r3
 8016212:	dcec      	bgt.n	80161ee <scalbn+0x4e>
 8016214:	2800      	cmp	r0, #0
 8016216:	dd0a      	ble.n	801622e <scalbn+0x8e>
 8016218:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801621c:	ec53 2b10 	vmov	r2, r3, d0
 8016220:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016224:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016228:	ec43 2b10 	vmov	d0, r2, r3
 801622c:	4770      	bx	lr
 801622e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8016232:	da09      	bge.n	8016248 <scalbn+0xa8>
 8016234:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016270 <scalbn+0xd0>
 8016238:	ee10 3a90 	vmov	r3, s1
 801623c:	eeb0 6b47 	vmov.f64	d6, d7
 8016240:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8016288 <scalbn+0xe8>
 8016244:	2b00      	cmp	r3, #0
 8016246:	e7db      	b.n	8016200 <scalbn+0x60>
 8016248:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801624c:	ec53 2b10 	vmov	r2, r3, d0
 8016250:	3036      	adds	r0, #54	; 0x36
 8016252:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016256:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801625a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8016290 <scalbn+0xf0>
 801625e:	ec43 2b10 	vmov	d0, r2, r3
 8016262:	e7b1      	b.n	80161c8 <scalbn+0x28>
 8016264:	f3af 8000 	nop.w
 8016268:	00000000 	.word	0x00000000
 801626c:	43500000 	.word	0x43500000
 8016270:	c2f8f359 	.word	0xc2f8f359
 8016274:	01a56e1f 	.word	0x01a56e1f
 8016278:	8800759c 	.word	0x8800759c
 801627c:	7e37e43c 	.word	0x7e37e43c
 8016280:	8800759c 	.word	0x8800759c
 8016284:	fe37e43c 	.word	0xfe37e43c
 8016288:	c2f8f359 	.word	0xc2f8f359
 801628c:	81a56e1f 	.word	0x81a56e1f
 8016290:	00000000 	.word	0x00000000
 8016294:	3c900000 	.word	0x3c900000
 8016298:	ffff3cb0 	.word	0xffff3cb0
 801629c:	00000000 	.word	0x00000000

080162a0 <floor>:
 80162a0:	ee10 1a90 	vmov	r1, s1
 80162a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80162a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80162ac:	2b13      	cmp	r3, #19
 80162ae:	b530      	push	{r4, r5, lr}
 80162b0:	ee10 0a10 	vmov	r0, s0
 80162b4:	ee10 5a10 	vmov	r5, s0
 80162b8:	dc31      	bgt.n	801631e <floor+0x7e>
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	da15      	bge.n	80162ea <floor+0x4a>
 80162be:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016380 <floor+0xe0>
 80162c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80162c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80162ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ce:	dd07      	ble.n	80162e0 <floor+0x40>
 80162d0:	2900      	cmp	r1, #0
 80162d2:	da4e      	bge.n	8016372 <floor+0xd2>
 80162d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80162d8:	4308      	orrs	r0, r1
 80162da:	d04d      	beq.n	8016378 <floor+0xd8>
 80162dc:	492a      	ldr	r1, [pc, #168]	; (8016388 <floor+0xe8>)
 80162de:	2000      	movs	r0, #0
 80162e0:	460b      	mov	r3, r1
 80162e2:	4602      	mov	r2, r0
 80162e4:	ec43 2b10 	vmov	d0, r2, r3
 80162e8:	e020      	b.n	801632c <floor+0x8c>
 80162ea:	4a28      	ldr	r2, [pc, #160]	; (801638c <floor+0xec>)
 80162ec:	411a      	asrs	r2, r3
 80162ee:	ea01 0402 	and.w	r4, r1, r2
 80162f2:	4304      	orrs	r4, r0
 80162f4:	d01a      	beq.n	801632c <floor+0x8c>
 80162f6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016380 <floor+0xe0>
 80162fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80162fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016306:	ddeb      	ble.n	80162e0 <floor+0x40>
 8016308:	2900      	cmp	r1, #0
 801630a:	bfbe      	ittt	lt
 801630c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016310:	fa40 f303 	asrlt.w	r3, r0, r3
 8016314:	18c9      	addlt	r1, r1, r3
 8016316:	ea21 0102 	bic.w	r1, r1, r2
 801631a:	2000      	movs	r0, #0
 801631c:	e7e0      	b.n	80162e0 <floor+0x40>
 801631e:	2b33      	cmp	r3, #51	; 0x33
 8016320:	dd05      	ble.n	801632e <floor+0x8e>
 8016322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016326:	d101      	bne.n	801632c <floor+0x8c>
 8016328:	ee30 0b00 	vadd.f64	d0, d0, d0
 801632c:	bd30      	pop	{r4, r5, pc}
 801632e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016332:	f04f 32ff 	mov.w	r2, #4294967295
 8016336:	40e2      	lsrs	r2, r4
 8016338:	4210      	tst	r0, r2
 801633a:	d0f7      	beq.n	801632c <floor+0x8c>
 801633c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016380 <floor+0xe0>
 8016340:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016344:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801634c:	ddc8      	ble.n	80162e0 <floor+0x40>
 801634e:	2900      	cmp	r1, #0
 8016350:	da02      	bge.n	8016358 <floor+0xb8>
 8016352:	2b14      	cmp	r3, #20
 8016354:	d103      	bne.n	801635e <floor+0xbe>
 8016356:	3101      	adds	r1, #1
 8016358:	ea20 0002 	bic.w	r0, r0, r2
 801635c:	e7c0      	b.n	80162e0 <floor+0x40>
 801635e:	2401      	movs	r4, #1
 8016360:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016364:	fa04 f303 	lsl.w	r3, r4, r3
 8016368:	4418      	add	r0, r3
 801636a:	4285      	cmp	r5, r0
 801636c:	bf88      	it	hi
 801636e:	1909      	addhi	r1, r1, r4
 8016370:	e7f2      	b.n	8016358 <floor+0xb8>
 8016372:	2000      	movs	r0, #0
 8016374:	4601      	mov	r1, r0
 8016376:	e7b3      	b.n	80162e0 <floor+0x40>
 8016378:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801637c:	e7b0      	b.n	80162e0 <floor+0x40>
 801637e:	bf00      	nop
 8016380:	8800759c 	.word	0x8800759c
 8016384:	7e37e43c 	.word	0x7e37e43c
 8016388:	bff00000 	.word	0xbff00000
 801638c:	000fffff 	.word	0x000fffff

08016390 <_init>:
 8016390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016392:	bf00      	nop
 8016394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016396:	bc08      	pop	{r3}
 8016398:	469e      	mov	lr, r3
 801639a:	4770      	bx	lr

0801639c <_fini>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	bf00      	nop
 80163a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163a2:	bc08      	pop	{r3}
 80163a4:	469e      	mov	lr, r3
 80163a6:	4770      	bx	lr
