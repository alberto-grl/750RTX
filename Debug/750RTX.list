
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a7d8  08012778  08012778  00022778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf50  0801cf50  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf50  0801cf50  0002cf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf58  0801cf58  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf58  0801cf58  0002cf58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf5c  0801cf5c  0002cf5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000054c  24000000  0801cf60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010878  24000560  0801d4ac  00030560  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  24010dd8  0801d4ac  00030dd8  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006496e  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009e2b  00000000  00000000  000b399c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002e483  00000000  00000000  000bd7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bb0  00000000  00000000  000ebc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004ca8  00000000  00000000  000ed800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00041073  00000000  00000000  000f24a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042a0a  00000000  00000000  0013351b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001867fb  00000000  00000000  00175f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c8  00000000  00000000  002fc720  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000749c  00000000  00000000  002fc7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801275c 	.word	0x0801275c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	0801275c 	.word	0x0801275c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <eccfr_add_reversal_bits>:
		0b111111111110
};


uint32_t eccfr_add_reversal_bits(uint32_t codeword)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint32_t outword = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	for (i=0;i<6;i++)
 8000694:	2300      	movs	r3, #0
 8000696:	72fb      	strb	r3, [r7, #11]
 8000698:	e01c      	b.n	80006d4 <eccfr_add_reversal_bits+0x4c>
	{
		if (i>0)
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <eccfr_add_reversal_bits+0x1e>
			outword = (outword << 5);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	015b      	lsls	r3, r3, #5
 80006a4:	60fb      	str	r3, [r7, #12]
		codeword = (codeword << 4);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	607b      	str	r3, [r7, #4]
		uint8_t temp = (codeword >> 24) & 0x0F;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	0e1b      	lsrs	r3, r3, #24
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	72bb      	strb	r3, [r7, #10]
		outword |= (temp | (((temp & 0x08) ^ 0x08) << 1));
 80006b8:	7aba      	ldrb	r2, [r7, #10]
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	43db      	mvns	r3, r3
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	4313      	orrs	r3, r2
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
	for (i=0;i<6;i++)
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	3301      	adds	r3, #1
 80006d2:	72fb      	strb	r3, [r7, #11]
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	2b05      	cmp	r3, #5
 80006d8:	d9df      	bls.n	800069a <eccfr_add_reversal_bits+0x12>
	}
	return outword;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <eccfr_code_word_put_mem_buf>:


void eccfr_code_word_put_mem_buf(uint16_t code, void *st)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	80fb      	strh	r3, [r7, #6]
	eccfr_code_word_put_mem_buf_struct *s = (eccfr_code_word_put_mem_buf_struct *) st;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60fb      	str	r3, [r7, #12]
	if (s->cur_word < s->max_words)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	791a      	ldrb	r2, [r3, #4]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	429a      	cmp	r2, r3
 8000702:	d20b      	bcs.n	800071c <eccfr_code_word_put_mem_buf+0x34>
		s->code_word_array[s->cur_word++] = code;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	1c59      	adds	r1, r3, #1
 800070e:	b2c8      	uxtb	r0, r1
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	7108      	strb	r0, [r1, #4]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	88fa      	ldrh	r2, [r7, #6]
 800071a:	801a      	strh	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <eccfr_find_code_in_table>:


/* convert character to 6-bit code if it exists */
/* should probably replace this with an inverse look up table later */
uint8_t eccfr_find_code_in_table(uint8_t c)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	if ((c >= 'a') && (c <= 'z')) c -= 32;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b60      	cmp	r3, #96	; 0x60
 8000736:	d905      	bls.n	8000744 <eccfr_find_code_in_table+0x1c>
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b7a      	cmp	r3, #122	; 0x7a
 800073c:	d802      	bhi.n	8000744 <eccfr_find_code_in_table+0x1c>
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3b20      	subs	r3, #32
 8000742:	71fb      	strb	r3, [r7, #7]
	if (c =='\n') c = '\r';
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b0a      	cmp	r3, #10
 8000748:	d101      	bne.n	800074e <eccfr_find_code_in_table+0x26>
 800074a:	230d      	movs	r3, #13
 800074c:	71fb      	strb	r3, [r7, #7]
	if (c == 127) c = '\b';
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b7f      	cmp	r3, #127	; 0x7f
 8000752:	d101      	bne.n	8000758 <eccfr_find_code_in_table+0x30>
 8000754:	2308      	movs	r3, #8
 8000756:	71fb      	strb	r3, [r7, #7]
	for (i=1;i<(sizeof(ecc_6bit_codesymbols)/sizeof(uint8_t));i++)
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e00a      	b.n	8000774 <eccfr_find_code_in_table+0x4c>
		if (ecc_6bit_codesymbols[i] == c) return i;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	4a09      	ldr	r2, [pc, #36]	; (8000788 <eccfr_find_code_in_table+0x60>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	429a      	cmp	r2, r3
 8000768:	d101      	bne.n	800076e <eccfr_find_code_in_table+0x46>
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	e006      	b.n	800077c <eccfr_find_code_in_table+0x54>
	for (i=1;i<(sizeof(ecc_6bit_codesymbols)/sizeof(uint8_t));i++)
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	3301      	adds	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b3b      	cmp	r3, #59	; 0x3b
 8000778:	d9f1      	bls.n	800075e <eccfr_find_code_in_table+0x36>
	return 0xFF;
 800077a:	23ff      	movs	r3, #255	; 0xff
}
 800077c:	4618      	mov	r0, r3
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	080127dc 	.word	0x080127dc

0800078c <eccfr_bytes_to_code_words>:
   otherwise they are encoded as an 8-bit binary raw data word.
   If a byte that can be encoded as a 6 bit symbol precedes one that can
   not be encoded as a 6 bit symbol, and there is an extra symbol slot
   in the current word, fill it with a zero. */
void eccfr_bytes_to_code_words(uint8_t *bytes, uint8_t num_bytes, eccfr_code_word_put ecwp, void *st)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	460b      	mov	r3, r1
 800079a:	72fb      	strb	r3, [r7, #11]
	uint8_t cur_byte = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
	uint16_t last_code_word = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	83bb      	strh	r3, [r7, #28]
	uint16_t code_word;
	while (cur_byte < num_bytes)
 80007a4:	e045      	b.n	8000832 <eccfr_bytes_to_code_words+0xa6>
	{
		uint8_t b = bytes[cur_byte++];
 80007a6:	7ffb      	ldrb	r3, [r7, #31]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	77fa      	strb	r2, [r7, #31]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	767b      	strb	r3, [r7, #25]
		uint8_t code1 = eccfr_find_code_in_table(b);
 80007b6:	7e7b      	ldrb	r3, [r7, #25]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb5 	bl	8000728 <eccfr_find_code_in_table>
 80007be:	4603      	mov	r3, r0
 80007c0:	763b      	strb	r3, [r7, #24]
		if (code1 == 0xFF)
 80007c2:	7e3b      	ldrb	r3, [r7, #24]
 80007c4:	2bff      	cmp	r3, #255	; 0xff
 80007c6:	d106      	bne.n	80007d6 <eccfr_bytes_to_code_words+0x4a>
		{
			code_word = ((uint16_t)(0xF00)) | b;
 80007c8:	7e7b      	ldrb	r3, [r7, #25]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	837b      	strh	r3, [r7, #26]
 80007d4:	e026      	b.n	8000824 <eccfr_bytes_to_code_words+0x98>
		} else
		{
			code_word = (uint16_t)code1;
 80007d6:	7e3b      	ldrb	r3, [r7, #24]
 80007d8:	837b      	strh	r3, [r7, #26]
			if (cur_byte < num_bytes)
 80007da:	7ffa      	ldrb	r2, [r7, #31]
 80007dc:	7afb      	ldrb	r3, [r7, #11]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d218      	bcs.n	8000814 <eccfr_bytes_to_code_words+0x88>
			{
				b = bytes[cur_byte];
 80007e2:	7ffb      	ldrb	r3, [r7, #31]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	767b      	strb	r3, [r7, #25]
				uint8_t code2 = eccfr_find_code_in_table(b);
 80007ec:	7e7b      	ldrb	r3, [r7, #25]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff9a 	bl	8000728 <eccfr_find_code_in_table>
 80007f4:	4603      	mov	r3, r0
 80007f6:	75fb      	strb	r3, [r7, #23]
				if (code2 != 0xFF)
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2bff      	cmp	r3, #255	; 0xff
 80007fc:	d00a      	beq.n	8000814 <eccfr_bytes_to_code_words+0x88>
				{
					code_word |= (((uint16_t)code2) << 6);
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	b21a      	sxth	r2, r3
 8000804:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	837b      	strh	r3, [r7, #26]
					cur_byte++;
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	3301      	adds	r3, #1
 8000812:	77fb      	strb	r3, [r7, #31]
				}
			}
			if (code_word == last_code_word)
 8000814:	8b7a      	ldrh	r2, [r7, #26]
 8000816:	8bbb      	ldrh	r3, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	d103      	bne.n	8000824 <eccfr_bytes_to_code_words+0x98>
				ecwp(0, st);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	2000      	movs	r0, #0
 8000822:	4798      	blx	r3
		}
		ecwp(code_word, st);
 8000824:	8b7a      	ldrh	r2, [r7, #26]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6839      	ldr	r1, [r7, #0]
 800082a:	4610      	mov	r0, r2
 800082c:	4798      	blx	r3
		last_code_word = code_word;
 800082e:	8b7b      	ldrh	r3, [r7, #26]
 8000830:	83bb      	strh	r3, [r7, #28]
	while (cur_byte < num_bytes)
 8000832:	7ffa      	ldrb	r2, [r7, #31]
 8000834:	7afb      	ldrb	r3, [r7, #11]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3b5      	bcc.n	80007a6 <eccfr_bytes_to_code_words+0x1a>
	}
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <golay_mult>:
		ecwp( ((uint16_t)(0xF00)) | b, st );
	}
}

uint16_t golay_mult(uint16_t wd_enc)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]
	uint16_t enc = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	for (i=12;i>0;)
 8000852:	230c      	movs	r3, #12
 8000854:	737b      	strb	r3, [r7, #13]
 8000856:	e011      	b.n	800087c <golay_mult+0x38>
	{
		i--;
 8000858:	7b7b      	ldrb	r3, [r7, #13]
 800085a:	3b01      	subs	r3, #1
 800085c:	737b      	strb	r3, [r7, #13]
		if (wd_enc & 1) enc ^= golay_matrix[i];
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <golay_mult+0x32>
 8000868:	7b7b      	ldrb	r3, [r7, #13]
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <golay_mult+0x4c>)
 800086c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	4053      	eors	r3, r2
 8000874:	81fb      	strh	r3, [r7, #14]
		wd_enc >>= 1;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	80fb      	strh	r3, [r7, #6]
	for (i=12;i>0;)
 800087c:	7b7b      	ldrb	r3, [r7, #13]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1ea      	bne.n	8000858 <golay_mult+0x14>
	}
	return enc;
 8000882:	89fb      	ldrh	r3, [r7, #14]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	08012818 	.word	0x08012818

08000894 <golay_encode>:



uint32_t golay_encode(uint16_t wd_enc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	uint16_t enc = golay_mult(wd_enc);
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffcf 	bl	8000844 <golay_mult>
 80008a6:	4603      	mov	r3, r0
 80008a8:	81fb      	strh	r3, [r7, #14]
	return (((uint32_t)enc) << 12) | wd_enc;
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	031a      	lsls	r2, r3, #12
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	4313      	orrs	r3, r2
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop

080008bc <PrepareBits>:



void PrepareBits(uint8_t *s, OutData_t *TXMessage)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	6018      	str	r0, [r3, #0]
 80008c8:	463b      	mov	r3, r7
 80008ca:	6019      	str	r1, [r3, #0]
	uint16_t codes[255];

	uint8_t l, i;
	eccfr_code_word_put_mem_buf_struct ecwpmbs;

	l = strlen((char*) s);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	f7ff fd06 	bl	80002e0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	ecwpmbs.code_word_array = codes;
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	601a      	str	r2, [r3, #0]
	ecwpmbs.cur_word = 0;
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
	ecwpmbs.max_words = sizeof(codes) / sizeof(uint16_t);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	715a      	strb	r2, [r3, #5]
	eccfr_bytes_to_code_words((uint8_t*) s, l, eccfr_code_word_put_mem_buf, &ecwpmbs);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 80008fc:	1d38      	adds	r0, r7, #4
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <PrepareBits+0xe0>)
 8000900:	6800      	ldr	r0, [r0, #0]
 8000902:	f7ff ff43 	bl	800078c <eccfr_bytes_to_code_words>
	//input string is converted to 12 bits tokens, each contains two chars

	for (i = 0; i < ecwpmbs.cur_word; i++)
 8000906:	2300      	movs	r3, #0
 8000908:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800090c:	e029      	b.n	8000962 <PrepareBits+0xa6>
	{
		TXMessage->OutCodes[i + 2] = golay_encode(ecwpmbs.code_word_array[i]); //leave space for preamble and sync word
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000922:	1c9c      	adds	r4, r3, #2
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff ffb5 	bl	8000894 <golay_encode>
 800092a:	4602      	mov	r2, r0
 800092c:	463b      	mov	r3, r7
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		TXMessage->OutCodes[i + 2] = eccfr_add_reversal_bits(TXMessage->OutCodes[i + 2]);
 8000934:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000938:	1c9a      	adds	r2, r3, #2
 800093a:	463b      	mov	r3, r7
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000942:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000946:	1c9c      	adds	r4, r3, #2
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fe9d 	bl	8000688 <eccfr_add_reversal_bits>
 800094e:	4602      	mov	r2, r0
 8000950:	463b      	mov	r3, r7
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (i = 0; i < ecwpmbs.cur_word; i++)
 8000958:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800095c:	3301      	adds	r3, #1
 800095e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ce      	bcc.n	800090e <PrepareBits+0x52>
	}
	TXMessage->OutCodes[0] = 0x3FFFFFC3;  //preamble
 8000970:	463b      	mov	r3, r7
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <PrepareBits+0xe4>)
 8000976:	601a      	str	r2, [r3, #0]
	TXMessage->OutCodes[1] = 0x3ED19D1E;  //sync
 8000978:	463b      	mov	r3, r7
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <PrepareBits+0xe8>)
 800097e:	605a      	str	r2, [r3, #4]

	TXMessage->OutLength = ecwpmbs.cur_word + 2;
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	3302      	adds	r3, #2
 8000988:	461a      	mov	r2, r3
 800098a:	463b      	mov	r3, r7
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 8000992:	bf00      	nop
 8000994:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	080006e9 	.word	0x080006e9
 80009a0:	3fffffc3 	.word	0x3fffffc3
 80009a4:	3ed19d1e 	.word	0x3ed19d1e

080009a8 <GetTXBit>:

uint8_t GetTXBit(OutData_t* TXMessage, uint32_t n)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint32_t Frame;
	Frame = TXMessage->OutCodes[n / 30];
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <GetTXBit+0x58>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	091a      	lsrs	r2, r3, #4
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	60fb      	str	r3, [r7, #12]

	if (Frame & (1 << (29 -(n % 30))))
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <GetTXBit+0x58>)
 80009c8:	fba3 2301 	umull	r2, r3, r3, r1
 80009cc:	091a      	lsrs	r2, r3, #4
 80009ce:	4613      	mov	r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1aca      	subs	r2, r1, r3
 80009d8:	f1c2 031d 	rsb	r3, r2, #29
 80009dc:	2201      	movs	r2, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <GetTXBit+0x48>
		return 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <GetTXBit+0x4a>
	else
		return 0;
 80009f0:	2300      	movs	r3, #0

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	88888889 	.word	0x88888889

08000a04 <TXScamp>:


void TXScamp(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	uint8_t TXBit;

	volatile static long testcount0, testcount1;


	if (TXMessage.OutLength == 0)
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <TXScamp+0xf0>)
 8000a0c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d06a      	beq.n	8000aea <TXScamp+0xe6>
	{
		return;
	}


	if (TXSamplesLeft == 0)
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <TXScamp+0xf4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d141      	bne.n	8000aa0 <TXScamp+0x9c>
	{
		TXBit = GetTXBit(& TXMessage, TXBitN);
 8000a1c:	4b37      	ldr	r3, [pc, #220]	; (8000afc <TXScamp+0xf8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4834      	ldr	r0, [pc, #208]	; (8000af4 <TXScamp+0xf0>)
 8000a24:	f7ff ffc0 	bl	80009a8 <GetTXBit>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
		if (TXBit == 1)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d103      	bne.n	8000a3a <TXScamp+0x36>
		{
			TXLevel = 1.0;
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <TXScamp+0xfc>)
 8000a34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a38:	601a      	str	r2, [r3, #0]
		}
		if (TXBit == 0)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d103      	bne.n	8000a48 <TXScamp+0x44>
		{
			TXLevel = 0.0;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <TXScamp+0xfc>)
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		}
		TXSamplesLeft = N_SAMPLES_PER_BIT;
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <TXScamp+0xf4>)
 8000a4a:	22c8      	movs	r2, #200	; 0xc8
 8000a4c:	601a      	str	r2, [r3, #0]


		if (TXBitN < TXMessage.OutLength * 30) //N. bits in SCAMP frame
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <TXScamp+0xf0>)
 8000a50:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8000a54:	4613      	mov	r3, r2
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <TXScamp+0xf8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d908      	bls.n	8000a78 <TXScamp+0x74>
		{
			TXBitN++;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <TXScamp+0xf8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <TXScamp+0xf8>)
 8000a6e:	6013      	str	r3, [r2, #0]
			TXSamplesLeft = N_SAMPLES_PER_BIT;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <TXScamp+0xf4>)
 8000a72:	22c8      	movs	r2, #200	; 0xc8
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e013      	b.n	8000aa0 <TXScamp+0x9c>
		}
		else
		{
			TXMessage.OutLength = 0; //TX finished
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <TXScamp+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
			TXBitN = 0;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <TXScamp+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
			TXSamplesLeft = N_SAMPLES_PER_BIT;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <TXScamp+0xf4>)
 8000a88:	22c8      	movs	r2, #200	; 0xc8
 8000a8a:	601a      	str	r2, [r3, #0]
			TXLevel = 0.0;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <TXScamp+0xfc>)
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			CarrierEnable(0);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f002 fac7 	bl	8003028 <CarrierEnable>
			TXSwitch(0);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f002 fa60 	bl	8002f60 <TXSwitch>
		}
	}

	if (TXLevel > 0.5)
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <TXScamp+0xfc>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab2:	dd08      	ble.n	8000ac6 <TXScamp+0xc2>
	{
		CarrierEnable(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f002 fab7 	bl	8003028 <CarrierEnable>
		testcount1++;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <TXScamp+0x100>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <TXScamp+0x100>)
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	e007      	b.n	8000ad6 <TXScamp+0xd2>
	}
	else
	{
		CarrierEnable(0);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f002 faae 	bl	8003028 <CarrierEnable>
		testcount0++;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <TXScamp+0x104>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <TXScamp+0x104>)
 8000ad4:	6013      	str	r3, [r2, #0]
	}
	if(TXSamplesLeft > 0)
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <TXScamp+0xf4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <TXScamp+0xe8>
		TXSamplesLeft--;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <TXScamp+0xf4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <TXScamp+0xf4>)
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e000      	b.n	8000aec <TXScamp+0xe8>
		return;
 8000aea:	bf00      	nop

}
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24003f48 	.word	0x24003f48
 8000af8:	2400057c 	.word	0x2400057c
 8000afc:	24000580 	.word	0x24000580
 8000b00:	24000584 	.word	0x24000584
 8000b04:	24000588 	.word	0x24000588
 8000b08:	2400058c 	.word	0x2400058c

08000b0c <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000b0c:	4602      	mov	r2, r0

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b14:	17d3      	asrs	r3, r2, #31
{
 8000b16:	b510      	push	{r4, lr}
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000b18:	4c02      	ldr	r4, [pc, #8]	; (8000b24 <loadWPM+0x18>)
 8000b1a:	f7ff fc39 	bl	8000390 <__aeabi_uldivmod>
 8000b1e:	6020      	str	r0, [r4, #0]

}
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	bf00      	nop
 8000b24:	24008b4c 	.word	0x24008b4c

08000b28 <HAL_TIM_PeriodElapsedCallback>:
{
#ifdef USE_KEYER
	DoKeyer();
#endif
#ifdef USE_SCAMP
	TXScamp();
 8000b28:	f7ff bf6c 	b.w	8000a04 <TXScamp>

08000b2c <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <Load_Presets+0x40>)
{
 8000b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b32:	4c0f      	ldr	r4, [pc, #60]	; (8000b70 <Load_Presets+0x44>)
 8000b34:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000b38:	4f0e      	ldr	r7, [pc, #56]	; (8000b74 <Load_Presets+0x48>)
 8000b3a:	4e0f      	ldr	r6, [pc, #60]	; (8000b78 <Load_Presets+0x4c>)
 8000b3c:	4d0f      	ldr	r5, [pc, #60]	; (8000b7c <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00e fb13 	bl	800f16c <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 8000b46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 8000b4a:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000b4c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000b50:	f857 0b04 	ldr.w	r0, [r7], #4
 8000b54:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 8000b56:	7519      	strb	r1, [r3, #20]
 8000b58:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 8000b5a:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000b5e:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000b62:	4543      	cmp	r3, r8
 8000b64:	d1eb      	bne.n	8000b3e <Load_Presets+0x12>
	}
}
 8000b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24009c3c 	.word	0x24009c3c
 8000b70:	24000000 	.word	0x24000000
 8000b74:	08018840 	.word	0x08018840
 8000b78:	08018877 	.word	0x08018877
 8000b7c:	0801882f 	.word	0x0801882f

08000b80 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <SetBW+0x8c>)
	CurrentBW = newbw;
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <SetBW+0x90>)
{
 8000b84:	b470      	push	{r4, r5, r6}
 8000b86:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000b88:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d83c      	bhi.n	8000c08 <SetBW+0x88>
 8000b8e:	e8df f003 	tbb	[pc, r3]
 8000b92:	1c0f      	.short	0x1c0f
 8000b94:	022f      	.short	0x022f

		break;

	case CW  :

		bw[CW] = newbw;
 8000b96:	491f      	ldr	r1, [pc, #124]	; (8000c14 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000b98:	2500      	movs	r5, #0
 8000b9a:	4c1f      	ldr	r4, [pc, #124]	; (8000c18 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000ba0:	70c8      	strb	r0, [r1, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8000ba4:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ba6:	491e      	ldr	r1, [pc, #120]	; (8000c20 <SetBW+0xa0>)
 8000ba8:	481e      	ldr	r0, [pc, #120]	; (8000c24 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000baa:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000bac:	f001 b898 	b.w	8001ce0 <SDR_2R_toC_f32>
		bw[AM] = newbw;
 8000bb0:	4918      	ldr	r1, [pc, #96]	; (8000c14 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4c1c      	ldr	r4, [pc, #112]	; (8000c28 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000bba:	7008      	strb	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8000bbe:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bc0:	491a      	ldr	r1, [pc, #104]	; (8000c2c <SetBW+0xac>)
 8000bc2:	481b      	ldr	r0, [pc, #108]	; (8000c30 <SetBW+0xb0>)
}	
 8000bc4:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bc6:	f001 b88b 	b.w	8001ce0 <SDR_2R_toC_f32>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000bca:	1e06      	subs	r6, r0, #0
		bw[LSB] = newbw;
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bce:	4916      	ldr	r1, [pc, #88]	; (8000c28 <SetBW+0xa8>)
		LSBindex = 0; // TODO toglimi
 8000bd0:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000bd4:	bf18      	it	ne
 8000bd6:	2601      	movne	r6, #1
		LSBindex = 0; // TODO toglimi
 8000bd8:	4c16      	ldr	r4, [pc, #88]	; (8000c34 <SetBW+0xb4>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[LSB] = newbw;
 8000bde:	7050      	strb	r0, [r2, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000be0:	800e      	strh	r6, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <SetBW+0x9c>)
		USBindex = 0; // TODO toglimi
 8000be4:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000be6:	4914      	ldr	r1, [pc, #80]	; (8000c38 <SetBW+0xb8>)
 8000be8:	4814      	ldr	r0, [pc, #80]	; (8000c3c <SetBW+0xbc>)
}	
 8000bea:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000bec:	f001 b878 	b.w	8001ce0 <SDR_2R_toC_f32>
		bw[USB] = newbw;
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <SetBW+0x94>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bf2:	1e06      	subs	r6, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <SetBW+0xa8>)
		USBindex = 0; // TODO toglimi
 8000bf6:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bfa:	bf18      	it	ne
 8000bfc:	2601      	movne	r6, #1
		USBindex = 0; // TODO toglimi
 8000bfe:	4c10      	ldr	r4, [pc, #64]	; (8000c40 <SetBW+0xc0>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[USB] = newbw;
 8000c04:	7090      	strb	r0, [r2, #2]
 8000c06:	e7eb      	b.n	8000be0 <SetBW+0x60>
}	
 8000c08:	bc70      	pop	{r4, r5, r6}
 8000c0a:	4770      	bx	lr
 8000c0c:	2400e074 	.word	0x2400e074
 8000c10:	24001dd4 	.word	0x24001dd4
 8000c14:	24009dec 	.word	0x24009dec
 8000c18:	24009de4 	.word	0x24009de4
 8000c1c:	20004000 	.word	0x20004000
 8000c20:	08014830 	.word	0x08014830
 8000c24:	08015830 	.word	0x08015830
 8000c28:	2400f4ee 	.word	0x2400f4ee
 8000c2c:	08012830 	.word	0x08012830
 8000c30:	08013830 	.word	0x08013830
 8000c34:	2400f4ec 	.word	0x2400f4ec
 8000c38:	08016830 	.word	0x08016830
 8000c3c:	08017830 	.word	0x08017830
 8000c40:	240093ac 	.word	0x240093ac

08000c44 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000c46:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <SetAGC+0x94>)
{
 8000c48:	b430      	push	{r4, r5}
 8000c4a:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000c4c:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d810      	bhi.n	8000c74 <SetAGC+0x30>
 8000c52:	e8df f003 	tbb	[pc, r3]
 8000c56:	2011      	.short	0x2011
 8000c58:	022f      	.short	0x022f
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c62:	4c20      	ldr	r4, [pc, #128]	; (8000ce4 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c64:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000c68:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c6e:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c70:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 8000c72:	70d8      	strb	r0, [r3, #3]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000c74:	bc30      	pop	{r4, r5}
 8000c76:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c7a:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000c7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c80:	4c18      	ldr	r4, [pc, #96]	; (8000ce4 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c82:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000c86:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000c8c:	6025      	str	r5, [r4, #0]
	case AM :       agc[AM] = newAGC;
 8000c8e:	7018      	strb	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c90:	8011      	strh	r1, [r2, #0]
}	
 8000c92:	bc30      	pop	{r4, r5}
 8000c94:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000c98:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000c9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c9e:	4c11      	ldr	r4, [pc, #68]	; (8000ce4 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ca0:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ca4:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000caa:	6065      	str	r5, [r4, #4]
	case LSB :      agc[LSB] = newAGC;
 8000cac:	7058      	strb	r0, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cae:	8051      	strh	r1, [r2, #2]
}	
 8000cb0:	bc30      	pop	{r4, r5}
 8000cb2:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000cb8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000cbc:	4c09      	ldr	r4, [pc, #36]	; (8000ce4 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cbe:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000cc2:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000cc8:	60a5      	str	r5, [r4, #8]
	case USB :      agc[USB] = newAGC;
 8000cca:	7098      	strb	r0, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ccc:	8091      	strh	r1, [r2, #4]
}	
 8000cce:	bc30      	pop	{r4, r5}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2400e074 	.word	0x2400e074
 8000cd8:	240019c0 	.word	0x240019c0
 8000cdc:	2400e064 	.word	0x2400e064
 8000ce0:	2400adfc 	.word	0x2400adfc
 8000ce4:	24003de0 	.word	0x24003de0
 8000ce8:	24009390 	.word	0x24009390
 8000cec:	24008b48 	.word	0x24008b48

08000cf0 <Tune_Preset>:
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000cf4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000cf8:	4e48      	ldr	r6, [pc, #288]	; (8000e1c <Tune_Preset+0x12c>)
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <Tune_Preset+0x130>)
{
 8000cfc:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000cfe:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000d02:	4f48      	ldr	r7, [pc, #288]	; (8000e24 <Tune_Preset+0x134>)
	LOfreq = psets[Idx].freq;
 8000d04:	0045      	lsls	r5, r0, #1
 8000d06:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000d08:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000d0a:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000d0c:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d87d      	bhi.n	8000e0e <Tune_Preset+0x11e>
 8000d12:	e8df f003 	tbb	[pc, r3]
 8000d16:	6458      	.short	0x6458
 8000d18:	0270      	.short	0x0270
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d1a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000e60 <Tune_Preset+0x170>
 8000d1e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000d22:	f7ff ff2d 	bl	8000b80 <SetBW>
 8000d26:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <Tune_Preset+0x138>)
 8000d28:	78d8      	ldrb	r0, [r3, #3]
 8000d2a:	f7ff ff8b 	bl	8000c44 <SetAGC>
		break;
 8000d2e:	783b      	ldrb	r3, [r7, #0]
	SetBW( psets[Idx].bw);
 8000d30:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000d32:	493e      	ldr	r1, [pc, #248]	; (8000e2c <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000d34:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000d38:	7d6a      	ldrb	r2, [r5, #21]
	CurrentBW = newbw;
 8000d3a:	700a      	strb	r2, [r1, #0]
	switch(CurrentMode)
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d80f      	bhi.n	8000d60 <Tune_Preset+0x70>
 8000d40:	e8df f003 	tbb	[pc, r3]
 8000d44:	0217372a 	.word	0x0217372a
		CWindex = 0; // TODO toglimi
 8000d48:	4839      	ldr	r0, [pc, #228]	; (8000e30 <Tune_Preset+0x140>)
 8000d4a:	2500      	movs	r5, #0
		bw[CW] = newbw;
 8000d4c:	f888 2003 	strb.w	r2, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000d54:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000d56:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <Tune_Preset+0x144>)
 8000d58:	4937      	ldr	r1, [pc, #220]	; (8000e38 <Tune_Preset+0x148>)
 8000d5a:	4838      	ldr	r0, [pc, #224]	; (8000e3c <Tune_Preset+0x14c>)
 8000d5c:	f000 ffc0 	bl	8001ce0 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000d60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000d64:	4836      	ldr	r0, [pc, #216]	; (8000e40 <Tune_Preset+0x150>)
 8000d66:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000d6e:	f00e b9fd 	b.w	800f16c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000d72:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d74:	4933      	ldr	r1, [pc, #204]	; (8000e44 <Tune_Preset+0x154>)
		USBindex = 0; // TODO toglimi
 8000d76:	4834      	ldr	r0, [pc, #208]	; (8000e48 <Tune_Preset+0x158>)
 8000d78:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000d7c:	bf18      	it	ne
 8000d7e:	2701      	movne	r7, #1
		bw[USB] = newbw;
 8000d80:	f888 2002 	strb.w	r2, [r8, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d84:	800f      	strh	r7, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000d8a:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000d8c:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <Tune_Preset+0x144>)
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <Tune_Preset+0x15c>)
 8000d90:	482f      	ldr	r0, [pc, #188]	; (8000e50 <Tune_Preset+0x160>)
 8000d92:	f000 ffa5 	bl	8001ce0 <SDR_2R_toC_f32>
		break;
 8000d96:	e7e3      	b.n	8000d60 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000d98:	482a      	ldr	r0, [pc, #168]	; (8000e44 <Tune_Preset+0x154>)
 8000d9a:	2500      	movs	r5, #0
		bw[AM] = newbw;
 8000d9c:	f888 2000 	strb.w	r2, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000da4:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <Tune_Preset+0x144>)
 8000da8:	492a      	ldr	r1, [pc, #168]	; (8000e54 <Tune_Preset+0x164>)
 8000daa:	482b      	ldr	r0, [pc, #172]	; (8000e58 <Tune_Preset+0x168>)
 8000dac:	f000 ff98 	bl	8001ce0 <SDR_2R_toC_f32>
		break;
 8000db0:	e7d6      	b.n	8000d60 <Tune_Preset+0x70>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000db2:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000db4:	4923      	ldr	r1, [pc, #140]	; (8000e44 <Tune_Preset+0x154>)
		LSBindex = 0; // TODO toglimi
 8000db6:	4829      	ldr	r0, [pc, #164]	; (8000e5c <Tune_Preset+0x16c>)
 8000db8:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000dbc:	bf18      	it	ne
 8000dbe:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 8000dc0:	f888 2001 	strb.w	r2, [r8, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000dc4:	e7de      	b.n	8000d84 <Tune_Preset+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000dc6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000e60 <Tune_Preset+0x170>
 8000dca:	f898 0000 	ldrb.w	r0, [r8]
 8000dce:	f7ff fed7 	bl	8000b80 <SetBW>
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <Tune_Preset+0x138>)
 8000dd4:	7818      	ldrb	r0, [r3, #0]
 8000dd6:	f7ff ff35 	bl	8000c44 <SetAGC>
		break;
 8000dda:	783b      	ldrb	r3, [r7, #0]

	default :
		break;
	}
}	
 8000ddc:	e7a8      	b.n	8000d30 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000dde:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000e60 <Tune_Preset+0x170>
 8000de2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000de6:	f7ff fecb 	bl	8000b80 <SetBW>
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <Tune_Preset+0x138>)
 8000dec:	7858      	ldrb	r0, [r3, #1]
 8000dee:	f7ff ff29 	bl	8000c44 <SetAGC>
		break;
 8000df2:	783b      	ldrb	r3, [r7, #0]
 8000df4:	e79c      	b.n	8000d30 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000df6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000e60 <Tune_Preset+0x170>
 8000dfa:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000dfe:	f7ff febf 	bl	8000b80 <SetBW>
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <Tune_Preset+0x138>)
 8000e04:	7898      	ldrb	r0, [r3, #2]
 8000e06:	f7ff ff1d 	bl	8000c44 <SetAGC>
		break;
 8000e0a:	783b      	ldrb	r3, [r7, #0]
 8000e0c:	e790      	b.n	8000d30 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000e0e:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000e12:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000e16:	7d5b      	ldrb	r3, [r3, #21]
 8000e18:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000e1a:	e7a1      	b.n	8000d60 <Tune_Preset+0x70>
 8000e1c:	24009c3c 	.word	0x24009c3c
 8000e20:	2400ae00 	.word	0x2400ae00
 8000e24:	2400e074 	.word	0x2400e074
 8000e28:	24008b48 	.word	0x24008b48
 8000e2c:	24001dd4 	.word	0x24001dd4
 8000e30:	24009de4 	.word	0x24009de4
 8000e34:	20004000 	.word	0x20004000
 8000e38:	08014830 	.word	0x08014830
 8000e3c:	08015830 	.word	0x08015830
 8000e40:	24005998 	.word	0x24005998
 8000e44:	2400f4ee 	.word	0x2400f4ee
 8000e48:	240093ac 	.word	0x240093ac
 8000e4c:	08016830 	.word	0x08016830
 8000e50:	08017830 	.word	0x08017830
 8000e54:	08012830 	.word	0x08012830
 8000e58:	08013830 	.word	0x08013830
 8000e5c:	2400f4ec 	.word	0x2400f4ec
 8000e60:	24009dec 	.word	0x24009dec

08000e64 <SetMode>:
{
 8000e64:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <SetMode+0x64>)
 8000e68:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000e6a:	2803      	cmp	r0, #3
 8000e6c:	d82b      	bhi.n	8000ec6 <SetMode+0x62>
 8000e6e:	e8df f000 	tbb	[pc, r0]
 8000e72:	160c      	.short	0x160c
 8000e74:	0220      	.short	0x0220
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <SetMode+0x68>)
 8000e78:	78d8      	ldrb	r0, [r3, #3]
 8000e7a:	f7ff fe81 	bl	8000b80 <SetBW>
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <SetMode+0x6c>)
 8000e80:	78d8      	ldrb	r0, [r3, #3]
}	
 8000e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e86:	f7ff bedd 	b.w	8000c44 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <SetMode+0x68>)
 8000e8c:	7818      	ldrb	r0, [r3, #0]
 8000e8e:	f7ff fe77 	bl	8000b80 <SetBW>
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <SetMode+0x6c>)
 8000e94:	7818      	ldrb	r0, [r3, #0]
}	
 8000e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e9a:	f7ff bed3 	b.w	8000c44 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <SetMode+0x68>)
 8000ea0:	7858      	ldrb	r0, [r3, #1]
 8000ea2:	f7ff fe6d 	bl	8000b80 <SetBW>
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SetMode+0x6c>)
 8000ea8:	7858      	ldrb	r0, [r3, #1]
}	
 8000eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000eae:	f7ff bec9 	b.w	8000c44 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SetMode+0x68>)
 8000eb4:	7898      	ldrb	r0, [r3, #2]
 8000eb6:	f7ff fe63 	bl	8000b80 <SetBW>
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SetMode+0x6c>)
 8000ebc:	7898      	ldrb	r0, [r3, #2]
}	
 8000ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ec2:	f7ff bebf 	b.w	8000c44 <SetAGC>
}	
 8000ec6:	bd08      	pop	{r3, pc}
 8000ec8:	2400e074 	.word	0x2400e074
 8000ecc:	24009dec 	.word	0x24009dec
 8000ed0:	24008b48 	.word	0x24008b48
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000ed8:	2809      	cmp	r0, #9
{
 8000eda:	b508      	push	{r3, lr}
	if (idx == 9)
 8000edc:	d012      	beq.n	8000f04 <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000ede:	f1c0 0005 	rsb	r0, r0, #5
 8000ee2:	ee06 0a90 	vmov	s13, r0
 8000ee6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000f10 <SetFstep+0x38>
 8000eea:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 8000eee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000ef2:	f010 fad9 	bl	80114a8 <exp>
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <SetFstep+0x40>)
 8000ef8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000efc:	ee17 3a90 	vmov	r3, s15
 8000f00:	6013      	str	r3, [r2, #0]
}	
 8000f02:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000f04:	f242 3328 	movw	r3, #9000	; 0x2328
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <SetFstep+0x40>)
 8000f0a:	6013      	str	r3, [r2, #0]
}	
 8000f0c:	bd08      	pop	{r3, pc}
 8000f0e:	bf00      	nop
 8000f10:	bbb55516 	.word	0xbbb55516
 8000f14:	40026bb1 	.word	0x40026bb1
 8000f18:	2400e06c 	.word	0x2400e06c

08000f1c <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <FplusClicked+0xb4>)
 8000f1e:	ee07 0a90 	vmov	s15, r0
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <FplusClicked+0xb8>)
 8000f24:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000f28:	ed93 6a00 	vldr	s12, [r3]
 8000f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f30:	ed92 7a00 	vldr	s14, [r2]
 8000f34:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f3a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000f3e:	4927      	ldr	r1, [pc, #156]	; (8000fdc <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000f40:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000fe0 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f44:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000f48:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f4a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4c24      	ldr	r4, [pc, #144]	; (8000fe4 <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000f52:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f54:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f58:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000f5a:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000f5c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8000f60:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8000f64:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f68:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d80b      	bhi.n	8000f88 <FplusClicked+0x6c>
 8000f70:	e8df f003 	tbb	[pc, r3]
 8000f74:	02241b12 	.word	0x02241b12
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f78:	78c8      	ldrb	r0, [r1, #3]
 8000f7a:	f7ff fe01 	bl	8000b80 <SetBW>
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <FplusClicked+0xcc>)
 8000f80:	78d8      	ldrb	r0, [r3, #3]
 8000f82:	f7ff fe5f 	bl	8000c44 <SetAGC>
		break;
 8000f86:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 8000f88:	f7ff fdfa 	bl	8000b80 <SetBW>
	strcpy(msg, psets[Idx].name);
 8000f8c:	4915      	ldr	r1, [pc, #84]	; (8000fe4 <FplusClicked+0xc8>)
 8000f8e:	4817      	ldr	r0, [pc, #92]	; (8000fec <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000f94:	f00e b8ea 	b.w	800f16c <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f98:	7808      	ldrb	r0, [r1, #0]
 8000f9a:	f7ff fdf1 	bl	8000b80 <SetBW>
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <FplusClicked+0xcc>)
 8000fa0:	7818      	ldrb	r0, [r3, #0]
 8000fa2:	f7ff fe4f 	bl	8000c44 <SetAGC>
		break;
 8000fa6:	7d60      	ldrb	r0, [r4, #21]
}	
 8000fa8:	e7ee      	b.n	8000f88 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000faa:	7848      	ldrb	r0, [r1, #1]
 8000fac:	f7ff fde8 	bl	8000b80 <SetBW>
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <FplusClicked+0xcc>)
 8000fb2:	7858      	ldrb	r0, [r3, #1]
 8000fb4:	f7ff fe46 	bl	8000c44 <SetAGC>
		break;
 8000fb8:	7d60      	ldrb	r0, [r4, #21]
 8000fba:	e7e5      	b.n	8000f88 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000fbc:	7888      	ldrb	r0, [r1, #2]
 8000fbe:	f7ff fddf 	bl	8000b80 <SetBW>
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <FplusClicked+0xcc>)
 8000fc4:	7898      	ldrb	r0, [r3, #2]
 8000fc6:	f7ff fe3d 	bl	8000c44 <SetAGC>
		break;
 8000fca:	7d60      	ldrb	r0, [r4, #21]
 8000fcc:	e7dc      	b.n	8000f88 <FplusClicked+0x6c>
 8000fce:	bf00      	nop
 8000fd0:	2400e06c 	.word	0x2400e06c
 8000fd4:	2400ae00 	.word	0x2400ae00
 8000fd8:	2400e074 	.word	0x2400e074
 8000fdc:	24009dec 	.word	0x24009dec
 8000fe0:	4c3ebc20 	.word	0x4c3ebc20
 8000fe4:	24009c3c 	.word	0x24009c3c
 8000fe8:	24008b48 	.word	0x24008b48
 8000fec:	24005998 	.word	0x24005998

08000ff0 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <FminusClicked+0xb4>)
 8000ff2:	ee07 0a90 	vmov	s15, r0
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <FminusClicked+0xb8>)
 8000ff8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000ffc:	ed93 6a00 	vldr	s12, [r3]
 8001000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001004:	ed92 7a00 	vldr	s14, [r2]
 8001008:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 800100e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 8001014:	eddf 5a27 	vldr	s11, [pc, #156]	; 80010b4 <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001018:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 800101c:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 800101e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4c24      	ldr	r4, [pc, #144]	; (80010b8 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8001026:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001028:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800102c:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 800102e:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001030:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8001034:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8001038:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800103c:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001040:	2b03      	cmp	r3, #3
 8001042:	d80b      	bhi.n	800105c <FminusClicked+0x6c>
 8001044:	e8df f003 	tbb	[pc, r3]
 8001048:	02241b12 	.word	0x02241b12
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 800104c:	78c8      	ldrb	r0, [r1, #3]
 800104e:	f7ff fd97 	bl	8000b80 <SetBW>
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <FminusClicked+0xcc>)
 8001054:	78d8      	ldrb	r0, [r3, #3]
 8001056:	f7ff fdf5 	bl	8000c44 <SetAGC>
		break;
 800105a:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 800105c:	f7ff fd90 	bl	8000b80 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001060:	4915      	ldr	r1, [pc, #84]	; (80010b8 <FminusClicked+0xc8>)
 8001062:	4817      	ldr	r0, [pc, #92]	; (80010c0 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8001064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001068:	f00e b880 	b.w	800f16c <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800106c:	7808      	ldrb	r0, [r1, #0]
 800106e:	f7ff fd87 	bl	8000b80 <SetBW>
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <FminusClicked+0xcc>)
 8001074:	7818      	ldrb	r0, [r3, #0]
 8001076:	f7ff fde5 	bl	8000c44 <SetAGC>
		break;
 800107a:	7d60      	ldrb	r0, [r4, #21]
}	
 800107c:	e7ee      	b.n	800105c <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800107e:	7848      	ldrb	r0, [r1, #1]
 8001080:	f7ff fd7e 	bl	8000b80 <SetBW>
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <FminusClicked+0xcc>)
 8001086:	7858      	ldrb	r0, [r3, #1]
 8001088:	f7ff fddc 	bl	8000c44 <SetAGC>
		break;
 800108c:	7d60      	ldrb	r0, [r4, #21]
 800108e:	e7e5      	b.n	800105c <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001090:	7888      	ldrb	r0, [r1, #2]
 8001092:	f7ff fd75 	bl	8000b80 <SetBW>
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <FminusClicked+0xcc>)
 8001098:	7898      	ldrb	r0, [r3, #2]
 800109a:	f7ff fdd3 	bl	8000c44 <SetAGC>
		break;
 800109e:	7d60      	ldrb	r0, [r4, #21]
 80010a0:	e7dc      	b.n	800105c <FminusClicked+0x6c>
 80010a2:	bf00      	nop
 80010a4:	2400e06c 	.word	0x2400e06c
 80010a8:	2400ae00 	.word	0x2400ae00
 80010ac:	2400e074 	.word	0x2400e074
 80010b0:	24009dec 	.word	0x24009dec
 80010b4:	45fa0000 	.word	0x45fa0000
 80010b8:	24009c3c 	.word	0x24009c3c
 80010bc:	24008b48 	.word	0x24008b48
 80010c0:	24005998 	.word	0x24005998

080010c4 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80010ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 80010ce:	b083      	sub	sp, #12
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80010d0:	497c      	ldr	r1, [pc, #496]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80010d2:	487d      	ldr	r0, [pc, #500]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80010d4:	f000 ff12 	bl	8001efc <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 80010d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010dc:	497b      	ldr	r1, [pc, #492]	; (80012cc <HAL_GPIO_EXTI_Callback+0x204>)
 80010de:	487c      	ldr	r0, [pc, #496]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x208>)
 80010e0:	f000 ff0c 	bl	8001efc <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 80010e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e8:	4a7a      	ldr	r2, [pc, #488]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 80010ea:	4977      	ldr	r1, [pc, #476]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80010ec:	487a      	ldr	r0, [pc, #488]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x210>)
 80010ee:	f00c fe3f 	bl	800dd70 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80010f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010f6:	4a79      	ldr	r2, [pc, #484]	; (80012dc <HAL_GPIO_EXTI_Callback+0x214>)
 80010f8:	4975      	ldr	r1, [pc, #468]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x208>)
 80010fa:	4879      	ldr	r0, [pc, #484]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x218>)
 80010fc:	f00c fe38 	bl	800dd70 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001100:	4978      	ldr	r1, [pc, #480]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001102:	f44f 6280 	mov.w	r2, #1024	; 0x400
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001106:	4c78      	ldr	r4, [pc, #480]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x220>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001108:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
*/

// TODO: check why with the original code above LSB and USB are swapped

 //if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800110c:	4d77      	ldr	r5, [pc, #476]	; (80012ec <HAL_GPIO_EXTI_Callback+0x224>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800110e:	f000 fef5 	bl	8001efc <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	4a73      	ldr	r2, [pc, #460]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001118:	4970      	ldr	r1, [pc, #448]	; (80012dc <HAL_GPIO_EXTI_Callback+0x214>)
 800111a:	486e      	ldr	r0, [pc, #440]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800111c:	f000 fde0 	bl	8001ce0 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001120:	4620      	mov	r0, r4
 8001122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001126:	4972      	ldr	r1, [pc, #456]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x228>)
 8001128:	f000 fee8 	bl	8001efc <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 800112c:	2301      	movs	r3, #1
 800112e:	4621      	mov	r1, r4
 8001130:	2200      	movs	r2, #0
 8001132:	4870      	ldr	r0, [pc, #448]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001134:	f00c fd5e 	bl	800dbf4 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001138:	782b      	ldrb	r3, [r5, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	f000 80aa 	beq.w	8001294 <HAL_GPIO_EXTI_Callback+0x1cc>

#ifdef TEST_WF
	if (ShowWF) {
 8001140:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x230>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d049      	beq.n	80011dc <HAL_GPIO_EXTI_Callback+0x114>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8001148:	2300      	movs	r3, #0
 800114a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800114e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001158:	d240      	bcs.n	80011dc <HAL_GPIO_EXTI_Callback+0x114>
 800115a:	4e68      	ldr	r6, [pc, #416]	; (80012fc <HAL_GPIO_EXTI_Callback+0x234>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800115c:	2700      	movs	r7, #0
		{
			tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 800115e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001162:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001166:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800116a:	b292      	uxth	r2, r2
 800116c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8001170:	b29b      	uxth	r3, r3
 8001172:	b280      	uxth	r0, r0
 8001174:	b289      	uxth	r1, r1
 8001176:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800117a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800117e:	edd0 7a01 	vldr	s15, [r0, #4]
 8001182:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001186:	ed91 7a01 	vldr	s14, [r1, #4]
 800118a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800118e:	edd2 6a00 	vldr	s13, [r2]
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800119e:	edcd 7a01 	vstr	s15, [sp, #4]
			arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 80011a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80011a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ae:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80011ba:	db71      	blt.n	80012a0 <HAL_GPIO_EXTI_Callback+0x1d8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80011bc:	eeb1 7ae7 	vsqrt.f32	s14, s15
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80011c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011c4:	3302      	adds	r3, #2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80011cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011d6:	ed82 7a00 	vstr	s14, [r2]
 80011da:	d3c0      	bcc.n	800115e <HAL_GPIO_EXTI_Callback+0x96>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_GPIO_EXTI_Callback+0x238>)
 80011e2:	4948      	ldr	r1, [pc, #288]	; (8001304 <HAL_GPIO_EXTI_Callback+0x23c>)
 80011e4:	4840      	ldr	r0, [pc, #256]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x220>)
 80011e6:	f00c ff7b 	bl	800e0e0 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80011ea:	2301      	movs	r3, #1
 80011ec:	4944      	ldr	r1, [pc, #272]	; (8001300 <HAL_GPIO_EXTI_Callback+0x238>)
 80011ee:	461a      	mov	r2, r3
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x22c>)
 80011f2:	f00c fcff 	bl	800dbf4 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	4943      	ldr	r1, [pc, #268]	; (8001308 <HAL_GPIO_EXTI_Callback+0x240>)
 80011fc:	4843      	ldr	r0, [pc, #268]	; (800130c <HAL_GPIO_EXTI_Callback+0x244>)
 80011fe:	f000 fe7d 	bl	8001efc <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001202:	782b      	ldrb	r3, [r5, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d826      	bhi.n	8001256 <HAL_GPIO_EXTI_Callback+0x18e>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d13e      	bne.n	800128a <HAL_GPIO_EXTI_Callback+0x1c2>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800120c:	4940      	ldr	r1, [pc, #256]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 800120e:	483f      	ldr	r0, [pc, #252]	; (800130c <HAL_GPIO_EXTI_Callback+0x244>)
 8001210:	f000 ffca 	bl	80021a8 <SDR_demodAM_AGC>
#endif


	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 8001214:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	b369      	cbz	r1, 8001276 <HAL_GPIO_EXTI_Callback+0x1ae>
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = volume; //Volume
			else
				fAudio[i] = -volume;
 800121a:	493f      	ldr	r1, [pc, #252]	; (8001318 <HAL_GPIO_EXTI_Callback+0x250>)
 800121c:	2300      	movs	r3, #0
 800121e:	4a3c      	ldr	r2, [pc, #240]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 8001220:	edd1 7a00 	vldr	s15, [r1]
 8001224:	eeb1 7a67 	vneg.f32	s14, s15
			if (i % 64 > 31)
 8001228:	0699      	lsls	r1, r3, #26
 800122a:	f103 0301 	add.w	r3, r3, #1
 800122e:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = volume; //Volume
 8001232:	bf4c      	ite	mi
 8001234:	ed42 7a01 	vstrmi	s15, [r2, #-4]
				fAudio[i] = -volume;
 8001238:	ed02 7a01 	vstrpl	s14, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d1f2      	bne.n	8001228 <HAL_GPIO_EXTI_Callback+0x160>
	}

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_GPIO_EXTI_Callback+0x254>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	4831      	ldr	r0, [pc, #196]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 800124a:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 800124c:	b003      	add	sp, #12
 800124e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001252:	f000 bde9 	b.w	8001e28 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 8001256:	2b03      	cmp	r3, #3
 8001258:	d1dc      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x14c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 800125a:	492d      	ldr	r1, [pc, #180]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 800125c:	482b      	ldr	r0, [pc, #172]	; (800130c <HAL_GPIO_EXTI_Callback+0x244>)
 800125e:	f001 f837 	bl	80022d0 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_GPIO_EXTI_Callback+0x258>)
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1d4      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x14c>
			SDR_CWPeak(fAudio, BSIZE);
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126e:	4828      	ldr	r0, [pc, #160]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 8001270:	f000 ff0a 	bl	8002088 <SDR_CWPeak>
 8001274:	e7ce      	b.n	8001214 <HAL_GPIO_EXTI_Callback+0x14c>
		if (TransmissionEnabled)
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0e1      	beq.n	8001242 <HAL_GPIO_EXTI_Callback+0x17a>
 800127e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001282:	4823      	ldr	r0, [pc, #140]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 8001284:	f00d faf0 	bl	800e868 <memset>
 8001288:	e7db      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0x17a>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800128a:	4921      	ldr	r1, [pc, #132]	; (8001310 <HAL_GPIO_EXTI_Callback+0x248>)
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <HAL_GPIO_EXTI_Callback+0x244>)
 800128e:	f001 f81f 	bl	80022d0 <SDR_demodSSB_CW_AGC>
 8001292:	e7bf      	b.n	8001214 <HAL_GPIO_EXTI_Callback+0x14c>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4620      	mov	r0, r4
 800129a:	f000 fe4b 	bl	8001f34 <SDR_mirror_LSB>
 800129e:	e74f      	b.n	8001140 <HAL_GPIO_EXTI_Callback+0x78>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80012a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80012a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80012a8:	3202      	adds	r2, #2
 80012aa:	601f      	str	r7, [r3, #0]
 80012ac:	b293      	uxth	r3, r2
 80012ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80012b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012bc:	f4ff af4f 	bcc.w	800115e <HAL_GPIO_EXTI_Callback+0x96>
 80012c0:	e78c      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x114>
 80012c2:	bf00      	nop
 80012c4:	2000d000 	.word	0x2000d000
 80012c8:	20009000 	.word	0x20009000
 80012cc:	2000b000 	.word	0x2000b000
 80012d0:	20007000 	.word	0x20007000
 80012d4:	20006800 	.word	0x20006800
 80012d8:	240019c4 	.word	0x240019c4
 80012dc:	20006000 	.word	0x20006000
 80012e0:	24009c2c 	.word	0x24009c2c
 80012e4:	24002de0 	.word	0x24002de0
 80012e8:	20002000 	.word	0x20002000
 80012ec:	2400e074 	.word	0x2400e074
 80012f0:	24001de0 	.word	0x24001de0
 80012f4:	08018a74 	.word	0x08018a74
 80012f8:	24009c38 	.word	0x24009c38
 80012fc:	2400d064 	.word	0x2400d064
 8001300:	20000000 	.word	0x20000000
 8001304:	20004000 	.word	0x20004000
 8001308:	20001000 	.word	0x20001000
 800130c:	240040e0 	.word	0x240040e0
 8001310:	2400e07c 	.word	0x2400e07c
 8001314:	24008ae0 	.word	0x24008ae0
 8001318:	24005918 	.word	0x24005918
 800131c:	240059c4 	.word	0x240059c4
 8001320:	24009dec 	.word	0x24009dec
 8001324:	24009d8c 	.word	0x24009d8c

08001328 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <ADC_Stream0_Handler+0x1ec>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800132e:	4e7a      	ldr	r6, [pc, #488]	; (8001518 <ADC_Stream0_Handler+0x1f0>)
{
 8001330:	ed2d 8b10 	vpush	{d8-d15}
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001334:	f5a6 6180 	sub.w	r1, r6, #1024	; 0x400
	if(CurrentMode == CW)
 8001338:	7812      	ldrb	r2, [r2, #0]
{
 800133a:	b097      	sub	sp, #92	; 0x5c
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800133c:	2800      	cmp	r0, #0
 800133e:	bf08      	it	eq
 8001340:	460e      	moveq	r6, r1
	if(CurrentMode == CW)
 8001342:	2a03      	cmp	r2, #3
 8001344:	f000 83ff 	beq.w	8001b46 <ADC_Stream0_Handler+0x81e>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8001348:	4b74      	ldr	r3, [pc, #464]	; (800151c <ADC_Stream0_Handler+0x1f4>)
 800134a:	ed93 0a00 	vldr	s0, [r3]
 800134e:	f000 fc0b 	bl	8001b68 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8001352:	f206 32fe 	addw	r2, r6, #1022	; 0x3fe
 8001356:	1eb5      	subs	r5, r6, #2
	sum = 0; k = BSIZE;
 8001358:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001520 <ADC_Stream0_Handler+0x1f8>
	{
		sum += pR[k-1];
 800135c:	8811      	ldrh	r1, [r2, #0]
 800135e:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8001360:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8001362:	b289      	uxth	r1, r1
		sum += pR[k-3];
 8001364:	8890      	ldrh	r0, [r2, #4]
		sum += pR[k-2];
 8001366:	b29b      	uxth	r3, r3
		sum += pR[k-1];
 8001368:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-3];
 800136c:	b280      	uxth	r0, r0
		sum += pR[k-4];
 800136e:	8851      	ldrh	r1, [r2, #2]
	while(k)
 8001370:	4295      	cmp	r5, r2
		sum += pR[k-1];
 8001372:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-2];
 8001376:	ee07 3a90 	vmov	s15, r3
		sum += pR[k-4];
 800137a:	b289      	uxth	r1, r1
		sum += pR[k-2];
 800137c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		sum += pR[k-3];
 8001380:	ee07 0a90 	vmov	s15, r0
		sum += pR[k-4];
 8001384:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sum += pR[k-4];
 800138c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800139c:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80013a0:	d1dc      	bne.n	800135c <ADC_Stream0_Handler+0x34>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80013a2:	f8b6 3200 	ldrh.w	r3, [r6, #512]	; 0x200

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013a6:	4630      	mov	r0, r6
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013a8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001524 <ADC_Stream0_Handler+0x1fc>
 80013ac:	2400      	movs	r4, #0
	TestSampledValue=pR[BSIZE/2];
 80013ae:	b29b      	uxth	r3, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013b0:	4d5d      	ldr	r5, [pc, #372]	; (8001528 <ADC_Stream0_Handler+0x200>)
 80013b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013b6:	4e5d      	ldr	r6, [pc, #372]	; (800152c <ADC_Stream0_Handler+0x204>)
	TestSampledValue=pR[BSIZE/2];
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	4f5c      	ldr	r7, [pc, #368]	; (8001530 <ADC_Stream0_Handler+0x208>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013be:	4a5d      	ldr	r2, [pc, #372]	; (8001534 <ADC_Stream0_Handler+0x20c>)
	TestSampledValue=pR[BSIZE/2];
 80013c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013c4:	495c      	ldr	r1, [pc, #368]	; (8001538 <ADC_Stream0_Handler+0x210>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013c6:	ed85 0a00 	vstr	s0, [r5]
 80013ca:	8034      	strh	r4, [r6, #0]
	TestSampledValue=pR[BSIZE/2];
 80013cc:	edc7 7a00 	vstr	s15, [r7]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013d0:	f000 fcb8 	bl	8001d44 <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 80013d4:	21ff      	movs	r1, #255	; 0xff
 80013d6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80015c0 <ADC_Stream0_Handler+0x298>
 80013da:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 80015c4 <ADC_Stream0_Handler+0x29c>
 80013de:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80013e2:	8031      	strh	r1, [r6, #0]
 80013e4:	460b      	mov	r3, r1
 80013e6:	4955      	ldr	r1, [pc, #340]	; (800153c <ADC_Stream0_Handler+0x214>)
 80013e8:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 80013ec:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80015c8 <ADC_Stream0_Handler+0x2a0>
 80013f0:	edd1 0a00 	vldr	s1, [r1]
 80013f4:	4952      	ldr	r1, [pc, #328]	; (8001540 <ADC_Stream0_Handler+0x218>)
 80013f6:	ed98 0a00 	vldr	s0, [r8]
 80013fa:	ed91 7a00 	vldr	s14, [r1]
 80013fe:	4951      	ldr	r1, [pc, #324]	; (8001544 <ADC_Stream0_Handler+0x21c>)
 8001400:	edde 7a00 	vldr	s15, [lr]
 8001404:	edd1 1a00 	vldr	s3, [r1]
 8001408:	494f      	ldr	r1, [pc, #316]	; (8001548 <ADC_Stream0_Handler+0x220>)
 800140a:	ed9c 1a00 	vldr	s2, [ip]
 800140e:	edd1 aa00 	vldr	s21, [r1]
 8001412:	494e      	ldr	r1, [pc, #312]	; (800154c <ADC_Stream0_Handler+0x224>)
 8001414:	484e      	ldr	r0, [pc, #312]	; (8001550 <ADC_Stream0_Handler+0x228>)
 8001416:	ed91 5a00 	vldr	s10, [r1]
 800141a:	494e      	ldr	r1, [pc, #312]	; (8001554 <ADC_Stream0_Handler+0x22c>)
 800141c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80015cc <ADC_Stream0_Handler+0x2a4>
 8001420:	edd1 9a00 	vldr	s19, [r1]
 8001424:	494c      	ldr	r1, [pc, #304]	; (8001558 <ADC_Stream0_Handler+0x230>)
 8001426:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80015d0 <ADC_Stream0_Handler+0x2a8>
 800142a:	ed91 aa00 	vldr	s20, [r1]
 800142e:	494b      	ldr	r1, [pc, #300]	; (800155c <ADC_Stream0_Handler+0x234>)
 8001430:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80015d4 <ADC_Stream0_Handler+0x2ac>
 8001434:	edd1 5a00 	vldr	s11, [r1]
 8001438:	4949      	ldr	r1, [pc, #292]	; (8001560 <ADC_Stream0_Handler+0x238>)
 800143a:	4a4a      	ldr	r2, [pc, #296]	; (8001564 <ADC_Stream0_Handler+0x23c>)
 800143c:	ed91 9a00 	vldr	s18, [r1]
 8001440:	4949      	ldr	r1, [pc, #292]	; (8001568 <ADC_Stream0_Handler+0x240>)
 8001442:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 8001446:	edd1 da00 	vldr	s27, [r1]
 800144a:	4948      	ldr	r1, [pc, #288]	; (800156c <ADC_Stream0_Handler+0x244>)
 800144c:	ed91 3a00 	vldr	s6, [r1]
 8001450:	4947      	ldr	r1, [pc, #284]	; (8001570 <ADC_Stream0_Handler+0x248>)
 8001452:	edd1 ba00 	vldr	s23, [r1]
 8001456:	4947      	ldr	r1, [pc, #284]	; (8001574 <ADC_Stream0_Handler+0x24c>)
 8001458:	ed91 da00 	vldr	s26, [r1]
 800145c:	4946      	ldr	r1, [pc, #280]	; (8001578 <ADC_Stream0_Handler+0x250>)
 800145e:	edd1 3a00 	vldr	s7, [r1]
 8001462:	4946      	ldr	r1, [pc, #280]	; (800157c <ADC_Stream0_Handler+0x254>)
 8001464:	ed91 ba00 	vldr	s22, [r1]
 8001468:	4945      	ldr	r1, [pc, #276]	; (8001580 <ADC_Stream0_Handler+0x258>)
 800146a:	edd1 fa00 	vldr	s31, [r1]
 800146e:	4945      	ldr	r1, [pc, #276]	; (8001584 <ADC_Stream0_Handler+0x25c>)
 8001470:	edd1 6a00 	vldr	s13, [r1]
 8001474:	4944      	ldr	r1, [pc, #272]	; (8001588 <ADC_Stream0_Handler+0x260>)
 8001476:	edcd 6a04 	vstr	s13, [sp, #16]
 800147a:	edd1 ea00 	vldr	s29, [r1]
 800147e:	4943      	ldr	r1, [pc, #268]	; (800158c <ADC_Stream0_Handler+0x264>)
 8001480:	ed91 fa00 	vldr	s30, [r1]
 8001484:	4942      	ldr	r1, [pc, #264]	; (8001590 <ADC_Stream0_Handler+0x268>)
 8001486:	edd1 6a00 	vldr	s13, [r1]
 800148a:	4942      	ldr	r1, [pc, #264]	; (8001594 <ADC_Stream0_Handler+0x26c>)
 800148c:	edcd 6a03 	vstr	s13, [sp, #12]
 8001490:	ed91 ea00 	vldr	s28, [r1]
 8001494:	4940      	ldr	r1, [pc, #256]	; (8001598 <ADC_Stream0_Handler+0x270>)
 8001496:	edd1 6a00 	vldr	s13, [r1]
 800149a:	4940      	ldr	r1, [pc, #256]	; (800159c <ADC_Stream0_Handler+0x274>)
 800149c:	edcd 6a02 	vstr	s13, [sp, #8]
 80014a0:	edd1 6a00 	vldr	s13, [r1]
 80014a4:	493e      	ldr	r1, [pc, #248]	; (80015a0 <ADC_Stream0_Handler+0x278>)
 80014a6:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80014aa:	edd1 6a00 	vldr	s13, [r1]
 80014ae:	493d      	ldr	r1, [pc, #244]	; (80015a4 <ADC_Stream0_Handler+0x27c>)
 80014b0:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80014b4:	edd1 6a00 	vldr	s13, [r1]
 80014b8:	493b      	ldr	r1, [pc, #236]	; (80015a8 <ADC_Stream0_Handler+0x280>)
 80014ba:	edcd 6a05 	vstr	s13, [sp, #20]
 80014be:	edd1 6a00 	vldr	s13, [r1]
 80014c2:	493a      	ldr	r1, [pc, #232]	; (80015ac <ADC_Stream0_Handler+0x284>)
 80014c4:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 80014c8:	edd1 6a00 	vldr	s13, [r1]
 80014cc:	4938      	ldr	r1, [pc, #224]	; (80015b0 <ADC_Stream0_Handler+0x288>)
 80014ce:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80014d2:	edd1 6a00 	vldr	s13, [r1]
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <ADC_Stream0_Handler+0x28c>)
 80014d8:	edcd 6a08 	vstr	s13, [sp, #32]
 80014dc:	edd0 6a00 	vldr	s13, [r0]
 80014e0:	4835      	ldr	r0, [pc, #212]	; (80015b8 <ADC_Stream0_Handler+0x290>)
 80014e2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80014e6:	edd0 6a00 	vldr	s13, [r0]
 80014ea:	4834      	ldr	r0, [pc, #208]	; (80015bc <ADC_Stream0_Handler+0x294>)
 80014ec:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80014f0:	edd0 6a00 	vldr	s13, [r0]
 80014f4:	f9ba 0000 	ldrsh.w	r0, [sl]
 80014f8:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 80014fc:	eddb 6a00 	vldr	s13, [fp]
 8001500:	4605      	mov	r5, r0
 8001502:	4608      	mov	r0, r1
 8001504:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8001508:	edd9 6a00 	vldr	s13, [r9]
 800150c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8001510:	e165      	b.n	80017de <ADC_Stream0_Handler+0x4b6>
 8001512:	bf00      	nop
 8001514:	2400e074 	.word	0x2400e074
 8001518:	2400ece0 	.word	0x2400ece0
 800151c:	2400ae00 	.word	0x2400ae00
 8001520:	00000000 	.word	0x00000000
 8001524:	3b000000 	.word	0x3b000000
 8001528:	2400d054 	.word	0x2400d054
 800152c:	24000624 	.word	0x24000624
 8001530:	2400e070 	.word	0x2400e070
 8001534:	240093b0 	.word	0x240093b0
 8001538:	24008b90 	.word	0x24008b90
 800153c:	240005c4 	.word	0x240005c4
 8001540:	240005c8 	.word	0x240005c8
 8001544:	24000594 	.word	0x24000594
 8001548:	240005dc 	.word	0x240005dc
 800154c:	240005e0 	.word	0x240005e0
 8001550:	24000620 	.word	0x24000620
 8001554:	240005a0 	.word	0x240005a0
 8001558:	240005d4 	.word	0x240005d4
 800155c:	240005d8 	.word	0x240005d8
 8001560:	2400059c 	.word	0x2400059c
 8001564:	24008b98 	.word	0x24008b98
 8001568:	240005ec 	.word	0x240005ec
 800156c:	240005f0 	.word	0x240005f0
 8001570:	240005a8 	.word	0x240005a8
 8001574:	240005e4 	.word	0x240005e4
 8001578:	240005e8 	.word	0x240005e8
 800157c:	240005a4 	.word	0x240005a4
 8001580:	240005fc 	.word	0x240005fc
 8001584:	24000600 	.word	0x24000600
 8001588:	240005b0 	.word	0x240005b0
 800158c:	240005f4 	.word	0x240005f4
 8001590:	240005f8 	.word	0x240005f8
 8001594:	240005ac 	.word	0x240005ac
 8001598:	2400060c 	.word	0x2400060c
 800159c:	24000610 	.word	0x24000610
 80015a0:	240005b8 	.word	0x240005b8
 80015a4:	24000604 	.word	0x24000604
 80015a8:	24000608 	.word	0x24000608
 80015ac:	240005b4 	.word	0x240005b4
 80015b0:	2400061c 	.word	0x2400061c
 80015b4:	240093b8 	.word	0x240093b8
 80015b8:	240005c0 	.word	0x240005c0
 80015bc:	24000614 	.word	0x24000614
 80015c0:	240005cc 	.word	0x240005cc
 80015c4:	240005d0 	.word	0x240005d0
 80015c8:	24000598 	.word	0x24000598
 80015cc:	24000618 	.word	0x24000618
 80015d0:	240005bc 	.word	0x240005bc
 80015d4:	24000590 	.word	0x24000590
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015d8:	eeaa 5a84 	vfma.f32	s10, s21, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015dc:	0799      	lsls	r1, r3, #30
 80015de:	eeea 5a04 	vfma.f32	s11, s20, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015e2:	ee79 9aac 	vadd.f32	s19, s19, s25
 80015e6:	ee39 9a0c 	vadd.f32	s18, s18, s24
 80015ea:	eea9 5aa4 	vfma.f32	s10, s19, s9
 80015ee:	eee9 5a24 	vfma.f32	s11, s18, s9
 80015f2:	ee75 2a26 	vadd.f32	s5, s10, s13
 80015f6:	ee75 7a86 	vadd.f32	s15, s11, s12
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015fa:	f100 8118 	bmi.w	800182e <ADC_Stream0_Handler+0x506>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80015fe:	eead 3a84 	vfma.f32	s6, s27, s8
 8001602:	ed9d 7a01 	vldr	s14, [sp, #4]
 8001606:	eeed 3a04 	vfma.f32	s7, s26, s8
 800160a:	eddd 5a00 	vldr	s11, [sp]
 800160e:	ee7b ba87 	vadd.f32	s23, s23, s14

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001612:	075f      	lsls	r7, r3, #29
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001614:	ee3b ba25 	vadd.f32	s22, s22, s11
 8001618:	eeab 3aa4 	vfma.f32	s6, s23, s9
 800161c:	eeeb 3a24 	vfma.f32	s7, s22, s9
 8001620:	ee33 7a22 	vadd.f32	s14, s6, s5
 8001624:	ee33 2aa7 	vadd.f32	s4, s7, s15
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001628:	f100 8112 	bmi.w	8001850 <ADC_Stream0_Handler+0x528>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800162c:	ed9d 9a04 	vldr	s18, [sp, #16]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001630:	0719      	lsls	r1, r3, #28
 8001632:	eddd 9a03 	vldr	s19, [sp, #12]
 8001636:	eeaf 9a84 	vfma.f32	s18, s31, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800163a:	ed9d 5a07 	vldr	s10, [sp, #28]
 800163e:	eeef 9a04 	vfma.f32	s19, s30, s8
 8001642:	eddd 3a06 	vldr	s7, [sp, #24]
 8001646:	ee7e ea85 	vadd.f32	s29, s29, s10
 800164a:	ee3e ea23 	vadd.f32	s28, s28, s7
 800164e:	eeae 9aa4 	vfma.f32	s18, s29, s9
 8001652:	eeee 9a24 	vfma.f32	s19, s28, s9
 8001656:	ee37 9a09 	vadd.f32	s18, s14, s18
 800165a:	ee79 9a82 	vadd.f32	s19, s19, s4
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800165e:	f100 81a1 	bmi.w	80019a4 <ADC_Stream0_Handler+0x67c>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001662:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001666:	f013 0110 	ands.w	r1, r3, #16
 800166a:	ed9d ea02 	vldr	s28, [sp, #8]
 800166e:	eddd ba0c 	vldr	s23, [sp, #48]	; 0x30
 8001672:	eddd ea05 	vldr	s29, [sp, #20]
 8001676:	eeae ba04 	vfma.f32	s22, s28, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800167a:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
 800167e:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8001682:	eeee ba84 	vfma.f32	s23, s29, s8
 8001686:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 800168a:	ee33 5a05 	vadd.f32	s10, s6, s10
 800168e:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001692:	910b      	str	r1, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001694:	ee73 5a23 	vadd.f32	s11, s6, s7
 8001698:	eea5 ba24 	vfma.f32	s22, s10, s9
 800169c:	eee5 baa4 	vfma.f32	s23, s11, s9
 80016a0:	ee39 ba0b 	vadd.f32	s22, s18, s22
 80016a4:	ee79 baab 	vadd.f32	s23, s19, s23
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016a8:	f040 81a5 	bne.w	80019f6 <ADC_Stream0_Handler+0x6ce>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016ac:	eddd 3a08 	vldr	s7, [sp, #32]
 80016b0:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80016b4:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 80016b8:	eea3 5a84 	vfma.f32	s10, s7, s8
 80016bc:	eddd 3a10 	vldr	s7, [sp, #64]	; 0x40
 80016c0:	ed9d ea11 	vldr	s28, [sp, #68]	; 0x44
 80016c4:	eee3 3a04 	vfma.f32	s7, s6, s8
 80016c8:	ed9d 3a0f 	vldr	s6, [sp, #60]	; 0x3c
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016cc:	49df      	ldr	r1, [pc, #892]	; (8001a4c <ADC_Stream0_Handler+0x724>)
 80016ce:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80016d2:	00a9      	lsls	r1, r5, #2
 80016d4:	3501      	adds	r5, #1
 80016d6:	9703      	str	r7, [sp, #12]
 80016d8:	eef0 5a63 	vmov.f32	s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016dc:	eddd 3a14 	vldr	s7, [sp, #80]	; 0x50
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016e0:	4fdb      	ldr	r7, [pc, #876]	; (8001a50 <ADC_Stream0_Handler+0x728>)
 80016e2:	b22d      	sxth	r5, r5
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016e4:	ee33 3a83 	vadd.f32	s6, s7, s6
 80016e8:	eddd 3a15 	vldr	s7, [sp, #84]	; 0x54
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016ec:	4439      	add	r1, r7
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80016ee:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016f2:	ee73 3a8e 	vadd.f32	s7, s7, s28
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016f6:	9f03      	ldr	r7, [sp, #12]
 80016f8:	eea3 5a24 	vfma.f32	s10, s6, s9
 80016fc:	eee3 5aa4 	vfma.f32	s11, s7, s9
 8001700:	eddf 3ad4 	vldr	s7, [pc, #848]	; 8001a54 <ADC_Stream0_Handler+0x72c>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001704:	ee35 5a0b 	vadd.f32	s10, s10, s22
 8001708:	ee75 5aab 	vadd.f32	s11, s11, s23
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800170c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001710:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8001714:	ed87 5a00 	vstr	s10, [r7]
 8001718:	edc1 5a00 	vstr	s11, [r1]
		if(idx < BSIZE*4)
 800171c:	f2c0 81da 	blt.w	8001ad4 <ADC_Stream0_Handler+0x7ac>

#endif

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8001720:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001724:	eddd 3a08 	vldr	s7, [sp, #32]
 8001728:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800172c:	eef0 5a4a 	vmov.f32	s11, s20
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001730:	68b9      	ldr	r1, [r7, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001732:	eeb0 aa46 	vmov.f32	s20, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001736:	ed9d 3a02 	vldr	s6, [sp, #8]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800173a:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800173e:	eef0 3a4d 	vmov.f32	s7, s26
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001742:	ed8d fa03 	vstr	s30, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001746:	eeb0 da67 	vmov.f32	s26, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800174a:	edcd fa04 	vstr	s31, [sp, #16]
 800174e:	eeb0 fa42 	vmov.f32	s30, s4
 8001752:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001756:	ed8d 5a10 	vstr	s10, [sp, #64]	; 0x40
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800175a:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800175e:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001762:	eeb0 3a6d 	vmov.f32	s6, s27
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001766:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800176a:	eef0 da62 	vmov.f32	s27, s5
		inE6Rold = inER;                           inE6Iold = inEI;
 800176e:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001772:	eef0 aa66 	vmov.f32	s21, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8001776:	eddd 2a15 	vldr	s5, [sp, #84]	; 0x54
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800177a:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		idx = 0;
 800177e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001780:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001784:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 8001788:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800178c:	edcd 9a05 	vstr	s19, [sp, #20]
 8001790:	ed8d 9a02 	vstr	s18, [sp, #8]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001794:	60b9      	str	r1, [r7, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001796:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
 800179a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800179e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE2Rold = inER;                           inE2Iold = inEI;
 80017a2:	eeb0 9a4c 	vmov.f32	s18, s24
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017a6:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inE2Rold = inER;                           inE2Iold = inEI;
 80017aa:	eef0 9a6c 	vmov.f32	s19, s25
		inE4Rold = inER;                           inE4Iold = inEI;
 80017ae:	ed9d ea06 	vldr	s28, [sp, #24]
 80017b2:	eddd ea07 	vldr	s29, [sp, #28]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80017b6:	ed9d ba00 	vldr	s22, [sp]
 80017ba:	eddd ba01 	vldr	s23, [sp, #4]
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017be:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	while(k--)
 80017c2:	3208      	adds	r2, #8
 80017c4:	3b01      	subs	r3, #1
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	3008      	adds	r0, #8
 80017cc:	4294      	cmp	r4, r2
 80017ce:	eeb0 7a60 	vmov.f32	s14, s1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	d059      	beq.n	800188a <ADC_Stream0_Handler+0x562>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80017d6:	eef0 0a48 	vmov.f32	s1, s16
 80017da:	eeb0 0a68 	vmov.f32	s0, s17
 80017de:	ed52 8a01 	vldr	s17, [r2, #-4]
 80017e2:	eeb0 2a41 	vmov.f32	s4, s2
 80017e6:	ed10 8a01 	vldr	s16, [r0, #-4]
 80017ea:	eef0 2a61 	vmov.f32	s5, s3
 80017ee:	eef0 6a68 	vmov.f32	s13, s17
 80017f2:	ed12 1a02 	vldr	s2, [r2, #-8]
 80017f6:	eeb0 6a48 	vmov.f32	s12, s16
 80017fa:	ed50 1a02 	vldr	s3, [r0, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80017fe:	ee31 2a02 	vadd.f32	s4, s2, s4
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001802:	07df      	lsls	r7, r3, #31
 8001804:	eee0 6a04 	vfma.f32	s13, s0, s8
 8001808:	eea0 6a84 	vfma.f32	s12, s1, s8
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800180c:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8001810:	eee2 6a24 	vfma.f32	s13, s4, s9
 8001814:	eea2 6aa4 	vfma.f32	s12, s5, s9
 8001818:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800181c:	ee37 6a06 	vadd.f32	s12, s14, s12
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001820:	f57f aeda 	bpl.w	80015d8 <ADC_Stream0_Handler+0x2b0>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001824:	eeb0 ca46 	vmov.f32	s24, s12
 8001828:	eef0 ca66 	vmov.f32	s25, s13
 800182c:	e7c9      	b.n	80017c2 <ADC_Stream0_Handler+0x49a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800182e:	eef0 5a4a 	vmov.f32	s11, s20
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001832:	edcd 7a00 	vstr	s15, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001836:	eeb0 5a6a 	vmov.f32	s10, s21
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 800183a:	edcd 2a01 	vstr	s5, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800183e:	eeb0 aa46 	vmov.f32	s20, s12
 8001842:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001846:	eeb0 9a4c 	vmov.f32	s18, s24
 800184a:	eef0 9a6c 	vmov.f32	s19, s25
 800184e:	e7b8      	b.n	80017c2 <ADC_Stream0_Handler+0x49a>
 8001850:	eeb0 ba65 	vmov.f32	s22, s11
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001854:	eddd ba01 	vldr	s23, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001858:	eef0 3a4d 	vmov.f32	s7, s26
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 800185c:	ed8d 2a06 	vstr	s4, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001860:	eeb0 3a6d 	vmov.f32	s6, s27
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001864:	ed8d 7a07 	vstr	s14, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001868:	eef0 5a4a 	vmov.f32	s11, s20
 800186c:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001870:	eeb0 da67 	vmov.f32	s26, s15
 8001874:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001878:	eeb0 aa46 	vmov.f32	s20, s12
 800187c:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001880:	eeb0 9a4c 	vmov.f32	s18, s24
 8001884:	eef0 9a6c 	vmov.f32	s19, s25
 8001888:	e79b      	b.n	80017c2 <ADC_Stream0_Handler+0x49a>
 800188a:	4a73      	ldr	r2, [pc, #460]	; (8001a58 <ADC_Stream0_Handler+0x730>)
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	eddd 7a04 	vldr	s15, [sp, #16]
 8001894:	ed82 8a00 	vstr	s16, [r2]
 8001898:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <ADC_Stream0_Handler+0x734>)
 800189a:	edc8 8a00 	vstr	s17, [r8]
 800189e:	edc2 0a00 	vstr	s1, [r2]
 80018a2:	4a6f      	ldr	r2, [pc, #444]	; (8001a60 <ADC_Stream0_Handler+0x738>)
 80018a4:	ed8e 0a00 	vstr	s0, [lr]
 80018a8:	edc2 1a00 	vstr	s3, [r2]
 80018ac:	4a6d      	ldr	r2, [pc, #436]	; (8001a64 <ADC_Stream0_Handler+0x73c>)
 80018ae:	ed8c 1a00 	vstr	s2, [ip]
 80018b2:	edc2 aa00 	vstr	s21, [r2]
 80018b6:	4a6c      	ldr	r2, [pc, #432]	; (8001a68 <ADC_Stream0_Handler+0x740>)
 80018b8:	ed82 5a00 	vstr	s10, [r2]
 80018bc:	4a6b      	ldr	r2, [pc, #428]	; (8001a6c <ADC_Stream0_Handler+0x744>)
 80018be:	edc2 9a00 	vstr	s19, [r2]
 80018c2:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <ADC_Stream0_Handler+0x748>)
 80018c4:	ed82 aa00 	vstr	s20, [r2]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <ADC_Stream0_Handler+0x74c>)
 80018ca:	edc2 5a00 	vstr	s11, [r2]
 80018ce:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <ADC_Stream0_Handler+0x750>)
 80018d0:	ed82 9a00 	vstr	s18, [r2]
 80018d4:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <ADC_Stream0_Handler+0x754>)
 80018d6:	edc2 da00 	vstr	s27, [r2]
 80018da:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <ADC_Stream0_Handler+0x758>)
 80018dc:	ed82 3a00 	vstr	s6, [r2]
 80018e0:	4a68      	ldr	r2, [pc, #416]	; (8001a84 <ADC_Stream0_Handler+0x75c>)
 80018e2:	edc2 ba00 	vstr	s23, [r2]
 80018e6:	4a68      	ldr	r2, [pc, #416]	; (8001a88 <ADC_Stream0_Handler+0x760>)
 80018e8:	ed82 da00 	vstr	s26, [r2]
 80018ec:	4a67      	ldr	r2, [pc, #412]	; (8001a8c <ADC_Stream0_Handler+0x764>)
 80018ee:	edc2 3a00 	vstr	s7, [r2]
 80018f2:	4a67      	ldr	r2, [pc, #412]	; (8001a90 <ADC_Stream0_Handler+0x768>)
 80018f4:	ed82 ba00 	vstr	s22, [r2]
 80018f8:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <ADC_Stream0_Handler+0x76c>)
 80018fa:	edc2 fa00 	vstr	s31, [r2]
 80018fe:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <ADC_Stream0_Handler+0x770>)
 8001900:	edc2 7a00 	vstr	s15, [r2]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <ADC_Stream0_Handler+0x774>)
 8001906:	eddd 7a03 	vldr	s15, [sp, #12]
 800190a:	edc2 ea00 	vstr	s29, [r2]
 800190e:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <ADC_Stream0_Handler+0x778>)
 8001910:	ed82 fa00 	vstr	s30, [r2]
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <ADC_Stream0_Handler+0x77c>)
 8001916:	edc2 7a00 	vstr	s15, [r2]
 800191a:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <ADC_Stream0_Handler+0x780>)
 800191c:	eddd 7a02 	vldr	s15, [sp, #8]
 8001920:	ed82 ea00 	vstr	s28, [r2]
 8001924:	4a61      	ldr	r2, [pc, #388]	; (8001aac <ADC_Stream0_Handler+0x784>)
 8001926:	edc2 7a00 	vstr	s15, [r2]
 800192a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800192e:	4a60      	ldr	r2, [pc, #384]	; (8001ab0 <ADC_Stream0_Handler+0x788>)
 8001930:	edc2 7a00 	vstr	s15, [r2]
 8001934:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001938:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <ADC_Stream0_Handler+0x78c>)
 800193a:	edc2 7a00 	vstr	s15, [r2]
 800193e:	eddd 7a05 	vldr	s15, [sp, #20]
 8001942:	4a5d      	ldr	r2, [pc, #372]	; (8001ab8 <ADC_Stream0_Handler+0x790>)
 8001944:	f8aa 5000 	strh.w	r5, [sl]
 8001948:	edc2 7a00 	vstr	s15, [r2]
 800194c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <ADC_Stream0_Handler+0x794>)
 8001952:	8033      	strh	r3, [r6, #0]
 8001954:	edc2 7a00 	vstr	s15, [r2]
 8001958:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <ADC_Stream0_Handler+0x798>)
 800195e:	edc2 7a00 	vstr	s15, [r2]
 8001962:	eddd 7a08 	vldr	s15, [sp, #32]
 8001966:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <ADC_Stream0_Handler+0x79c>)
 8001968:	edc2 7a00 	vstr	s15, [r2]
 800196c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <ADC_Stream0_Handler+0x7a0>)
 8001972:	edc2 7a00 	vstr	s15, [r2]
 8001976:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800197a:	4a54      	ldr	r2, [pc, #336]	; (8001acc <ADC_Stream0_Handler+0x7a4>)
 800197c:	edc2 7a00 	vstr	s15, [r2]
 8001980:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <ADC_Stream0_Handler+0x7a8>)
 8001986:	edc2 7a00 	vstr	s15, [r2]
 800198a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800198e:	edcb 7a00 	vstr	s15, [fp]
 8001992:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8001996:	edc9 7a00 	vstr	s15, [r9]
		}

		// LED_YELLOW_OFF;

	}
 800199a:	b017      	add	sp, #92	; 0x5c
 800199c:	ecbd 8b10 	vpop	{d8-d15}
 80019a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a4:	eeb0 ea63 	vmov.f32	s28, s7
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019a8:	ed8d fa03 	vstr	s30, [sp, #12]
 80019ac:	eef0 ea45 	vmov.f32	s29, s10
 80019b0:	edcd fa04 	vstr	s31, [sp, #16]
 80019b4:	eeb0 ba65 	vmov.f32	s22, s11
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019b8:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019bc:	eef0 3a4d 	vmov.f32	s7, s26
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019c0:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019c4:	eeb0 3a6d 	vmov.f32	s6, s27
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80019c8:	eddd ba01 	vldr	s23, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019cc:	eef0 5a4a 	vmov.f32	s11, s20
 80019d0:	eeb0 5a6a 	vmov.f32	s10, s21
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019d4:	eeb0 fa42 	vmov.f32	s30, s4
 80019d8:	eef0 fa47 	vmov.f32	s31, s14
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019dc:	eeb0 da67 	vmov.f32	s26, s15
 80019e0:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019e4:	eeb0 aa46 	vmov.f32	s20, s12
 80019e8:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 80019ec:	eeb0 9a4c 	vmov.f32	s18, s24
 80019f0:	eef0 9a6c 	vmov.f32	s19, s25
 80019f4:	e6e5      	b.n	80017c2 <ADC_Stream0_Handler+0x49a>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019f6:	eddd 5a02 	vldr	s11, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019fa:	eef0 3a4d 	vmov.f32	s7, s26
 80019fe:	eeb0 3a6d 	vmov.f32	s6, s27
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a02:	ed8d fa03 	vstr	s30, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a06:	eeb0 5a6a 	vmov.f32	s10, s21
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a0a:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a0e:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a12:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a16:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a1a:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a1e:	eef0 fa47 	vmov.f32	s31, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a22:	edcd 9a05 	vstr	s19, [sp, #20]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a26:	eeb0 da67 	vmov.f32	s26, s15
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a2a:	ed8d 9a02 	vstr	s18, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a2e:	eef0 da62 	vmov.f32	s27, s5
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a32:	edcd ba15 	vstr	s23, [sp, #84]	; 0x54
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a36:	eeb0 aa46 	vmov.f32	s20, s12
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a3a:	ed8d ba14 	vstr	s22, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a3e:	eef0 aa66 	vmov.f32	s21, s13
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a42:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001a46:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001a4a:	e6aa      	b.n	80017a2 <ADC_Stream0_Handler+0x47a>
 8001a4c:	2000d000 	.word	0x2000d000
 8001a50:	2000b000 	.word	0x2000b000
 8001a54:	34000000 	.word	0x34000000
 8001a58:	240005c4 	.word	0x240005c4
 8001a5c:	240005c8 	.word	0x240005c8
 8001a60:	24000594 	.word	0x24000594
 8001a64:	240005dc 	.word	0x240005dc
 8001a68:	240005e0 	.word	0x240005e0
 8001a6c:	240005a0 	.word	0x240005a0
 8001a70:	240005d4 	.word	0x240005d4
 8001a74:	240005d8 	.word	0x240005d8
 8001a78:	2400059c 	.word	0x2400059c
 8001a7c:	240005ec 	.word	0x240005ec
 8001a80:	240005f0 	.word	0x240005f0
 8001a84:	240005a8 	.word	0x240005a8
 8001a88:	240005e4 	.word	0x240005e4
 8001a8c:	240005e8 	.word	0x240005e8
 8001a90:	240005a4 	.word	0x240005a4
 8001a94:	240005fc 	.word	0x240005fc
 8001a98:	24000600 	.word	0x24000600
 8001a9c:	240005b0 	.word	0x240005b0
 8001aa0:	240005f4 	.word	0x240005f4
 8001aa4:	240005f8 	.word	0x240005f8
 8001aa8:	240005ac 	.word	0x240005ac
 8001aac:	2400060c 	.word	0x2400060c
 8001ab0:	24000610 	.word	0x24000610
 8001ab4:	240005b8 	.word	0x240005b8
 8001ab8:	24000604 	.word	0x24000604
 8001abc:	24000608 	.word	0x24000608
 8001ac0:	240005b4 	.word	0x240005b4
 8001ac4:	2400061c 	.word	0x2400061c
 8001ac8:	24000620 	.word	0x24000620
 8001acc:	240005c0 	.word	0x240005c0
 8001ad0:	24000614 	.word	0x24000614
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ad4:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ad8:	eef0 3a4d 	vmov.f32	s7, s26
 8001adc:	eeb0 da67 	vmov.f32	s26, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ae0:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ae4:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ae8:	eeb0 3a6d 	vmov.f32	s6, s27
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001aec:	eddd 5a08 	vldr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001af0:	eeb0 5a6a 	vmov.f32	s10, s21
		inE6Rold = inER;                           inE6Iold = inEI;
 8001af4:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001af8:	eef0 da62 	vmov.f32	s27, s5
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001afc:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b00:	eef0 aa66 	vmov.f32	s21, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b04:	eddd 5a05 	vldr	s11, [sp, #20]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b08:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b0c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 8001b10:	eddd 5a02 	vldr	s11, [sp, #8]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b14:	ed8d fa03 	vstr	s30, [sp, #12]
 8001b18:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b1c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b20:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b24:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b28:	eeb0 aa46 	vmov.f32	s20, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b2c:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b30:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 8001b34:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b38:	edcd 9a05 	vstr	s19, [sp, #20]
 8001b3c:	ed8d 9a02 	vstr	s18, [sp, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b40:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001b44:	e77d      	b.n	8001a42 <ADC_Stream0_Handler+0x71a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001b46:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <ADC_Stream0_Handler+0x838>)
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <ADC_Stream0_Handler+0x83c>)
 8001b4a:	ed92 0a00 	vldr	s0, [r2]
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b56:	f000 f807 	bl	8001b68 <SDR_ComputeLO>
 8001b5a:	f7ff bbfa 	b.w	8001352 <ADC_Stream0_Handler+0x2a>
 8001b5e:	bf00      	nop
 8001b60:	2400ae00 	.word	0x2400ae00
 8001b64:	2400adf8 	.word	0x2400adf8

08001b68 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001b68:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <SDR_ComputeLO+0x140>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001b74:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d171      	bne.n	8001c62 <SDR_ComputeLO+0xfa>
 8001b7e:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <SDR_ComputeLO+0x144>)
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <SDR_ComputeLO+0x148>)
 8001b82:	ed92 8a00 	vldr	s16, [r2]
 8001b86:	ed93 6a00 	vldr	s12, [r3]
 8001b8a:	4d4a      	ldr	r5, [pc, #296]	; (8001cb4 <SDR_ComputeLO+0x14c>)
 8001b8c:	4c4a      	ldr	r4, [pc, #296]	; (8001cb8 <SDR_ComputeLO+0x150>)
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001b8e:	484b      	ldr	r0, [pc, #300]	; (8001cbc <SDR_ComputeLO+0x154>)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <SDR_ComputeLO+0x158>)
 8001b92:	ed95 5a00 	vldr	s10, [r5]
 8001b96:	edd4 7a00 	vldr	s15, [r4]
 8001b9a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001b9e:	edd0 5a00 	vldr	s11, [r0]
 8001ba2:	4a48      	ldr	r2, [pc, #288]	; (8001cc4 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ba4:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001ba8:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001baa:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001bae:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bb0:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bb4:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bb8:	ee25 7a87 	vmul.f32	s14, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bbc:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bc0:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bc4:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bc8:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bcc:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bd0:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bd4:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bdc:	ee25 7a87 	vmul.f32	s14, s11, s14
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be0:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be4:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001be8:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bec:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf0:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf4:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf8:	ee25 7aa6 	vmul.f32	s14, s11, s13
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c00:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c04:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c08:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c0c:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c10:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c14:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c18:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c1c:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c20:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001c24:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c26:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001c2a:	d1bb      	bne.n	8001ba4 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c2c:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001c30:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001cc8 <SDR_ComputeLO+0x160>
 8001c34:	edc4 7a00 	vstr	s15, [r4]
 8001c38:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001ccc <SDR_ComputeLO+0x164>
 8001c3c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <SDR_ComputeLO+0x168>)
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <SDR_ComputeLO+0x16c>)
 8001c44:	ed85 5a00 	vstr	s10, [r5]
 8001c48:	edc2 6a00 	vstr	s13, [r2]
 8001c4c:	ed83 7a00 	vstr	s14, [r3]
 8001c50:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001c54:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c58:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001c5c:	edc0 7a00 	vstr	s15, [r0]
}	
 8001c60:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c62:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001cd8 <SDR_ComputeLO+0x170>
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <SDR_ComputeLO+0x174>)
 8001c68:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001c6c:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c70:	ed92 7a00 	vldr	s14, [r2]
 8001c74:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001c78:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001c7c:	eeb0 0b49 	vmov.f64	d0, d9
 8001c80:	f00f fe8e 	bl	80119a0 <cos>
 8001c84:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c8a:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c8e:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c92:	f00f fecd 	bl	8011a30 <sin>
 8001c96:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SDR_ComputeLO+0x148>)
 8001c9c:	eeb1 6a46 	vneg.f32	s12, s12
 8001ca0:	ed83 6a00 	vstr	s12, [r3]
 8001ca4:	e771      	b.n	8001b8a <SDR_ComputeLO+0x22>
 8001ca6:	bf00      	nop
 8001ca8:	240000e4 	.word	0x240000e4
 8001cac:	24000628 	.word	0x24000628
 8001cb0:	24000630 	.word	0x24000630
 8001cb4:	240000e8 	.word	0x240000e8
 8001cb8:	24000648 	.word	0x24000648
 8001cbc:	240000e0 	.word	0x240000e0
 8001cc0:	24005124 	.word	0x24005124
 8001cc4:	240059dc 	.word	0x240059dc
 8001cc8:	46000200 	.word	0x46000200
 8001ccc:	39000000 	.word	0x39000000
 8001cd0:	2400064c 	.word	0x2400064c
 8001cd4:	24000650 	.word	0x24000650
 8001cd8:	40c90fdb 	.word	0x40c90fdb
 8001cdc:	240059c0 	.word	0x240059c0

08001ce0 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	d02e      	beq.n	8001d42 <SDR_2R_toC_f32+0x62>
 8001ce4:	3010      	adds	r0, #16
 8001ce6:	3110      	adds	r1, #16
 8001ce8:	3220      	adds	r2, #32
{
 8001cea:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cec:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	f100 0010 	add.w	r0, r0, #16
 8001cf6:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cfa:	f842 4c20 	str.w	r4, [r2, #-32]
 8001cfe:	f102 0220 	add.w	r2, r2, #32
 8001d02:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001d06:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d0a:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001d0e:	f842 4c38 	str.w	r4, [r2, #-56]
 8001d12:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001d16:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d1a:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001d1e:	f842 4c30 	str.w	r4, [r2, #-48]
 8001d22:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001d26:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d2a:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001d2e:	f842 4c28 	str.w	r4, [r2, #-40]
 8001d32:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001d36:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001d3a:	d1d7      	bne.n	8001cec <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	4770      	bx	lr

08001d44 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <SDR_downconvert_f32+0xd8>)
 8001d46:	3008      	adds	r0, #8
 8001d48:	3110      	adds	r1, #16
 8001d4a:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d4c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001e20 <SDR_downconvert_f32+0xdc>
{
 8001d50:	b430      	push	{r4, r5}
 8001d52:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001d56:	4c33      	ldr	r4, [pc, #204]	; (8001e24 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d58:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001d5c:	3310      	adds	r3, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d5e:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001d62:	3008      	adds	r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d64:	ee06 ca10 	vmov	s12, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d68:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001d6c:	3110      	adds	r1, #16
 8001d6e:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d70:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d74:	ee06 ca90 	vmov	s13, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d78:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001d7c:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d82:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d86:	ee07 ca90 	vmov	s15, ip
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d8a:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d8e:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d92:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d96:	ee07 ca10 	vmov	s14, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d9e:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001da2:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001daa:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dae:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001db2:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001db6:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dba:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dbe:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dc2:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dc6:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001dca:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001dce:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001dd2:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001dd6:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001dda:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001dde:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001de2:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001de6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001dea:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001dee:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001df2:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001df6:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001dfa:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001dfe:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e04:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001e08:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001e14:	d1a0      	bne.n	8001d58 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001e16:	bc30      	pop	{r4, r5}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	240059dc 	.word	0x240059dc
 8001e20:	3a000000 	.word	0x3a000000
 8001e24:	24005124 	.word	0x24005124

08001e28 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001e28:	b430      	push	{r4, r5}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001e2a:	0895      	lsrs	r5, r2, #2
  while(blkCnt--)
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	d05b      	beq.n	8001ee8 <SDR_float_to_DAC_audio+0xc0>
 8001e30:	1e6c      	subs	r4, r5, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e32:	4d30      	ldr	r5, [pc, #192]	; (8001ef4 <SDR_float_to_DAC_audio+0xcc>)
 8001e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e38:	b2a3      	uxth	r3, r4
 8001e3a:	f100 0420 	add.w	r4, r0, #32
 8001e3e:	edd5 7a00 	vldr	s15, [r5]
 8001e42:	3010      	adds	r0, #16
 8001e44:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8001e48:	f101 0308 	add.w	r3, r1, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e4c:	eef0 4a47 	vmov.f32	s9, s14
 8001e50:	ed50 5a03 	vldr	s11, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e54:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e58:	eeb0 5a47 	vmov.f32	s10, s14
 8001e5c:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001e60:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e62:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8001e66:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e68:	eea6 5aa7 	vfma.f32	s10, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e6c:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
  while(blkCnt--)
 8001e70:	4284      	cmp	r4, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e72:	eef0 5a64 	vmov.f32	s11, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e76:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7a:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7e:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e82:	eee7 4a86 	vfma.f32	s9, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e86:	ee15 5a10 	vmov	r5, s10
 8001e8a:	f823 5c10 	strh.w	r5, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e8e:	ee15 5a90 	vmov	r5, s11
 8001e92:	f823 5c0e 	strh.w	r5, [r3, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e96:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9a:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9e:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea2:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea6:	ee16 5a10 	vmov	r5, s12
 8001eaa:	f823 5c0c 	strh.w	r5, [r3, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eae:	eef0 6a64 	vmov.f32	s13, s9
 8001eb2:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
 8001eb6:	ee16 5a90 	vmov	r5, s13
 8001eba:	f823 5c0a 	strh.w	r5, [r3, #-10]
  while(blkCnt--)
 8001ebe:	d1c5      	bne.n	8001e4c <SDR_float_to_DAC_audio+0x24>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001ec0:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ec2:	f001 021f 	and.w	r2, r1, #31
 8001ec6:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec8:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <SDR_float_to_DAC_audio+0xd0>)
 8001ece:	440a      	add	r2, r1
 8001ed0:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ed4:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001ed6:	1a53      	subs	r3, r2, r1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dcf9      	bgt.n	8001ed0 <SDR_float_to_DAC_audio+0xa8>
 8001edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee0:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001ee4:	bc30      	pop	{r4, r5}
 8001ee6:	4770      	bx	lr
    if ( dsize > 0 ) { 
 8001ee8:	0093      	lsls	r3, r2, #2
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d1e9      	bne.n	8001ec2 <SDR_float_to_DAC_audio+0x9a>
 8001eee:	bc30      	pop	{r4, r5}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	24005918 	.word	0x24005918
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001efc:	0892      	lsrs	r2, r2, #2
 8001efe:	d017      	beq.n	8001f30 <SDR_memcpy_f32+0x34>
 8001f00:	3110      	adds	r1, #16
 8001f02:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001f04:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001f08:	3a01      	subs	r2, #1
 8001f0a:	f101 0110 	add.w	r1, r1, #16
 8001f0e:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001f12:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001f16:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001f1a:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001f1e:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001f22:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001f26:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001f2a:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001f2e:	d1e9      	bne.n	8001f04 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop

08001f34 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001f34:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f36:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001f3a:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f3c:	440b      	add	r3, r1
	while(blkCnt--)
 8001f3e:	d037      	beq.n	8001fb0 <SDR_mirror_LSB+0x7c>
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1e91      	subs	r1, r2, #2
{
 8001f44:	b410      	push	{r4}
 8001f46:	f1a3 0220 	sub.w	r2, r3, #32
 8001f4a:	f1a3 041c 	sub.w	r4, r3, #28
 8001f4e:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001f52:	4402      	add	r2, r0
 8001f54:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f56:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001f58:	3901      	subs	r1, #1
 8001f5a:	3a20      	subs	r2, #32
 8001f5c:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f5e:	f843 4c20 	str.w	r4, [r3, #-32]
 8001f62:	3320      	adds	r3, #32
 8001f64:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001f68:	eef1 7a67 	vneg.f32	s15, s15
 8001f6c:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f70:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001f72:	f843 4c38 	str.w	r4, [r3, #-56]
 8001f76:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001f7a:	eef1 7a67 	vneg.f32	s15, s15
 8001f7e:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f82:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001f84:	f843 4c30 	str.w	r4, [r3, #-48]
 8001f88:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001f8c:	eef1 7a67 	vneg.f32	s15, s15
 8001f90:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f94:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001f96:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001f9a:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f9c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001fa0:	eef1 7a67 	vneg.f32	s15, s15
 8001fa4:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001fa8:	d1d5      	bne.n	8001f56 <SDR_mirror_LSB+0x22>
	}
}
 8001faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001fb4:	b508      	push	{r3, lr}
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <SDR_compute_IIR_parms+0xb0>)
 8001fb8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002068 <SDR_compute_IIR_parms+0xb4>
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	; (800206c <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
   r = Qfactor;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <SDR_compute_IIR_parms+0xbc>)
   wr = 2.f * cwpitch / rate * myPI;
 8001fc8:	ed92 7a00 	vldr	s14, [r2]
 8001fcc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002074 <SDR_compute_IIR_parms+0xc0>
{
 8001fd0:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001fd4:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001fd8:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fdc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001fe0:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fe4:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001fe8:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001fec:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001ff0:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001ff4:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001ff8:	f00f fcd2 	bl	80119a0 <cos>
 8001ffc:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <SDR_compute_IIR_parms+0xc8>)
 8002004:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002008:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 800200c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002010:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002014:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8002018:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800201c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002020:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002024:	ee25 6b06 	vmul.f64	d6, d5, d6
 8002028:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 800202c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002030:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002034:	f00f fcb4 	bl	80119a0 <cos>
 8002038:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 800203c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002080 <SDR_compute_IIR_parms+0xcc>
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <SDR_compute_IIR_parms+0xd0>)
 8002042:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002046:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800204a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 800204e:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002052:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8002056:	ee27 7b05 	vmul.f64	d7, d7, d5
 800205a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800205e:	ed83 7a00 	vstr	s14, [r3]
}
 8002062:	bd08      	pop	{r3, pc}
 8002064:	2400adf8 	.word	0x2400adf8
 8002068:	44000000 	.word	0x44000000
 800206c:	240059c0 	.word	0x240059c0
 8002070:	24009de0 	.word	0x24009de0
 8002074:	40490fdb 	.word	0x40490fdb
 8002078:	2400591c 	.word	0x2400591c
 800207c:	24009ddc 	.word	0x24009ddc
 8002080:	3f99999a 	.word	0x3f99999a
 8002084:	2400d05c 	.word	0x2400d05c

08002088 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8002088:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 800208a:	2900      	cmp	r1, #0
 800208c:	d07c      	beq.n	8002188 <SDR_CWPeak+0x100>
 800208e:	1e4b      	subs	r3, r1, #1
 8002090:	f8df c110 	ldr.w	ip, [pc, #272]	; 80021a4 <SDR_CWPeak+0x11c>
 8002094:	493d      	ldr	r1, [pc, #244]	; (800218c <SDR_CWPeak+0x104>)
 8002096:	3010      	adds	r0, #16
 8002098:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <SDR_CWPeak+0x108>)
 800209a:	eddc 2a00 	vldr	s5, [ip]
 800209e:	edd1 6a00 	vldr	s13, [r1]
 80020a2:	ed92 5a00 	vldr	s10, [r2]
{
 80020a6:	b4f0      	push	{r4, r5, r6, r7}
 80020a8:	4c3a      	ldr	r4, [pc, #232]	; (8002194 <SDR_CWPeak+0x10c>)
 80020aa:	4f3b      	ldr	r7, [pc, #236]	; (8002198 <SDR_CWPeak+0x110>)
 80020ac:	edd4 4a00 	vldr	s9, [r4]
 80020b0:	4e3a      	ldr	r6, [pc, #232]	; (800219c <SDR_CWPeak+0x114>)
 80020b2:	4d3b      	ldr	r5, [pc, #236]	; (80021a0 <SDR_CWPeak+0x118>)
 80020b4:	eeb1 2a64 	vneg.f32	s4, s9
 80020b8:	edd7 7a00 	vldr	s15, [r7]
 80020bc:	edd6 5a00 	vldr	s11, [r6]
 80020c0:	ed95 7a00 	vldr	s14, [r5]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020c4:	ee66 3ae7 	vnmul.f32	s7, s13, s15
 80020c8:	ed50 7a04 	vldr	s15, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020cc:	ee26 4ac7 	vnmul.f32	s8, s13, s14
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d0:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d4:	ed10 7a02 	vldr	s14, [r0, #-8]
	 while(blkCnt--)
 80020d8:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020da:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020de:	ed10 3a01 	vldr	s6, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020e2:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020ee:	eee7 3a85 	vfma.f32	s7, s15, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020f2:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 80020f6:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020fa:	ed92 5a00 	vldr	s10, [r2]
 80020fe:	edd1 6a00 	vldr	s13, [r1]
 8002102:	ee25 6a06 	vmul.f32	s12, s10, s12
 8002106:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800210a:	ee65 7a07 	vmul.f32	s15, s10, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800210e:	ee25 3a03 	vmul.f32	s6, s10, s6
 8002112:	eeb0 7a46 	vmov.f32	s14, s12
 8002116:	eee6 7ae3 	vfms.f32	s15, s13, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800211a:	eeb1 2a64 	vneg.f32	s4, s9
 800211e:	eea6 7ae2 	vfms.f32	s14, s13, s5
 8002122:	eea4 7ae3 	vfms.f32	s14, s9, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002126:	eef0 3a43 	vmov.f32	s7, s6
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800212a:	eee4 7ac7 	vfms.f32	s15, s9, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800212e:	ee25 6a07 	vmul.f32	s12, s10, s14
 8002132:	eee6 3ac7 	vfms.f32	s7, s13, s14
 8002136:	eea4 6ac4 	vfms.f32	s12, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800213a:	ee25 7a27 	vmul.f32	s14, s10, s15
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800213e:	eee4 3ae7 	vfms.f32	s7, s9, s15
 8002142:	eea6 7ac4 	vfms.f32	s14, s13, s8
 8002146:	eeb0 4a46 	vmov.f32	s8, s12
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800214a:	eea6 6ae5 	vfms.f32	s12, s13, s11
	   *buf++ = y0;
 800214e:	ee96 4aa5 	vfnms.f32	s8, s13, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002152:	ee65 5a23 	vmul.f32	s11, s10, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002156:	eef0 2a63 	vmov.f32	s5, s7
 800215a:	eee6 5ac6 	vfms.f32	s11, s13, s12
	   *buf++ = y0;
 800215e:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002162:	eea4 7a84 	vfma.f32	s14, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002166:	eee4 5ac7 	vfms.f32	s11, s9, s14
	   *buf++ = y0;
 800216a:	ed00 7a06 	vstr	s14, [r0, #-24]	; 0xffffffe8
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 800216e:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002172:	d1a7      	bne.n	80020c4 <SDR_CWPeak+0x3c>
 8002174:	edc7 7a00 	vstr	s15, [r7]
 8002178:	edc6 5a00 	vstr	s11, [r6]
 800217c:	ed85 7a00 	vstr	s14, [r5]
 8002180:	edcc 3a00 	vstr	s7, [ip]
   }
}
 8002184:	bcf0      	pop	{r4, r5, r6, r7}
 8002186:	4770      	bx	lr
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	24009ddc 	.word	0x24009ddc
 8002190:	2400d05c 	.word	0x2400d05c
 8002194:	2400591c 	.word	0x2400591c
 8002198:	24000640 	.word	0x24000640
 800219c:	2400063c 	.word	0x2400063c
 80021a0:	24000644 	.word	0x24000644
 80021a4:	24000638 	.word	0x24000638

080021a8 <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80021a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <SDR_demodAM_AGC+0x100>)
{
 80021ae:	b082      	sub	sp, #8
 80021b0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80022c8 <SDR_demodAM_AGC+0x120>
 80021b4:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
 80021b8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80022cc <SDR_demodAM_AGC+0x124>
		  hangcnt = Hcount[AM]; 
 80021bc:	f8b3 c000 	ldrh.w	ip, [r3]
 80021c0:	f8de 2000 	ldr.w	r2, [lr]
 80021c4:	ed98 7a00 	vldr	s14, [r8]
 80021c8:	4b38      	ldr	r3, [pc, #224]	; (80022ac <SDR_demodAM_AGC+0x104>)
 80021ca:	4d39      	ldr	r5, [pc, #228]	; (80022b0 <SDR_demodAM_AGC+0x108>)
 80021cc:	4c39      	ldr	r4, [pc, #228]	; (80022b4 <SDR_demodAM_AGC+0x10c>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80021ce:	eddf 4a3a 	vldr	s9, [pc, #232]	; 80022b8 <SDR_demodAM_AGC+0x110>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80021d2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80022bc <SDR_demodAM_AGC+0x114>
		  pk  *= Decay[AM];
 80021d6:	4f3a      	ldr	r7, [pc, #232]	; (80022c0 <SDR_demodAM_AGC+0x118>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021d8:	edd0 7a01 	vldr	s15, [r0, #4]
 80021dc:	edd0 6a00 	vldr	s13, [r0]
 80021e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 80021e4:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021e8:	eee6 7aa6 	vfma.f32	s15, s13, s13
	  if(pk < audiotmp)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021f0:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80021f4:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80021f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002200:	bfac      	ite	ge
 8002202:	eef1 5ae7 	vsqrtge.f32	s11, s15
      *pOut = 0.0f;
 8002206:	eef0 5a64 	vmovlt.f32	s11, s9
	  if(pk < audiotmp)
 800220a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	d504      	bpl.n	800221e <SDR_demodAM_AGC+0x76>
			pk = audiotmp;
 8002214:	eef0 6a65 	vmov.f32	s13, s11
		  hangcnt = Hcount[AM]; 
 8002218:	4662      	mov	r2, ip
			pk = audiotmp;
 800221a:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 800221e:	fe86 6a86 	vmaxnm.f32	s12, s13, s12
 8002222:	eec5 7a86 	vdiv.f32	s15, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002226:	eeb0 6a67 	vmov.f32	s12, s15
    audiotmp /= max(pk, AgcThreshold);  
 800222a:	edc4 7a00 	vstr	s15, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800222e:	eea7 6a05 	vfma.f32	s12, s14, s10
	  if(hangcnt == 0)
 8002232:	b9e2      	cbnz	r2, 800226e <SDR_demodAM_AGC+0xc6>
		  pk  *= Decay[AM];
 8002234:	edd7 7a00 	vldr	s15, [r7]
 8002238:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800223a:	ed8d 6a00 	vstr	s12, [sp]
		  pk  *= Decay[AM];
 800223e:	ee67 6aa6 	vmul.f32	s13, s15, s13
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002242:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002246:	4286      	cmp	r6, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002248:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800224c:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 8002250:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002254:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002258:	d1be      	bne.n	80021d8 <SDR_demodAM_AGC+0x30>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <SDR_demodAM_AGC+0x11c>)
 800225e:	f8ce 2000 	str.w	r2, [lr]
 8002262:	ed88 7a00 	vstr	s14, [r8]
 8002266:	6019      	str	r1, [r3, #0]
	if(hangcnt > 0)  hangcnt--;
}
 8002268:	b002      	add	sp, #8
 800226a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800226e:	ed8d 6a00 	vstr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002272:	3008      	adds	r0, #8
 8002274:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002278:	4286      	cmp	r6, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800227a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800227e:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002282:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002286:	d1a7      	bne.n	80021d8 <SDR_demodAM_AGC+0x30>
    PeakAudioValue=pk;
 8002288:	6819      	ldr	r1, [r3, #0]
	if(hangcnt > 0)  hangcnt--;
 800228a:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <SDR_demodAM_AGC+0x11c>)
 800228e:	f8ce 2000 	str.w	r2, [lr]
 8002292:	ed88 7a00 	vstr	s14, [r8]
 8002296:	6019      	str	r1, [r3, #0]
	if(hangcnt > 0)  hangcnt--;
 8002298:	dd02      	ble.n	80022a0 <SDR_demodAM_AGC+0xf8>
 800229a:	3a01      	subs	r2, #1
 800229c:	f8ce 2000 	str.w	r2, [lr]
}
 80022a0:	b002      	add	sp, #8
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a6:	bf00      	nop
 80022a8:	24009390 	.word	0x24009390
 80022ac:	2400f0e0 	.word	0x2400f0e0
 80022b0:	2400adf4 	.word	0x2400adf4
 80022b4:	24001dd8 	.word	0x24001dd8
 80022b8:	00000000 	.word	0x00000000
 80022bc:	3f75c28f 	.word	0x3f75c28f
 80022c0:	24003de0 	.word	0x24003de0
 80022c4:	24009c28 	.word	0x24009c28
 80022c8:	2400cf04 	.word	0x2400cf04
 80022cc:	24000634 	.word	0x24000634

080022d0 <SDR_demodSSB_CW_AGC>:
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022d0:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <SDR_demodSSB_CW_AGC+0x174>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <SDR_demodSSB_CW_AGC+0x178>)
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022d4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022da:	885c      	ldrh	r4, [r3, #2]
 80022dc:	f241 0604 	movw	r6, #4100	; 0x1004
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022e0:	7815      	ldrb	r5, [r2, #0]
{
 80022e2:	460a      	mov	r2, r1
 80022e4:	4f59      	ldr	r7, [pc, #356]	; (800244c <SDR_demodSSB_CW_AGC+0x17c>)
 80022e6:	2d01      	cmp	r5, #1
 80022e8:	bf08      	it	eq
 80022ea:	46a4      	moveq	ip, r4
 80022ec:	4958      	ldr	r1, [pc, #352]	; (8002450 <SDR_demodSSB_CW_AGC+0x180>)
 80022ee:	2d03      	cmp	r5, #3
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022f0:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80022f4:	683c      	ldr	r4, [r7, #0]
 80022f6:	f100 0304 	add.w	r3, r0, #4
 80022fa:	edd1 7a00 	vldr	s15, [r1]
 80022fe:	d06f      	beq.n	80023e0 <SDR_demodSSB_CW_AGC+0x110>
 8002300:	2d01      	cmp	r5, #1
 8002302:	4406      	add	r6, r0
 8002304:	4d53      	ldr	r5, [pc, #332]	; (8002454 <SDR_demodSSB_CW_AGC+0x184>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002306:	4854      	ldr	r0, [pc, #336]	; (8002458 <SDR_demodSSB_CW_AGC+0x188>)
 8002308:	d10b      	bne.n	8002322 <SDR_demodSSB_CW_AGC+0x52>
 800230a:	e046      	b.n	800239a <SDR_demodSSB_CW_AGC+0xca>
 800230c:	ed91 7a00 	vldr	s14, [r1]
 8002310:	3308      	adds	r3, #8
 8002312:	edd0 7a02 	vldr	s15, [r0, #8]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002316:	429e      	cmp	r6, r3
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	edc1 7a00 	vstr	s15, [r1]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002320:	d024      	beq.n	800236c <SDR_demodSSB_CW_AGC+0x9c>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002322:	ed93 7a00 	vldr	s14, [r3]
 8002326:	ed13 6a01 	vldr	s12, [r3, #-4]
 800232a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800232e:	eea6 7a06 	vfma.f32	s14, s12, s12
      *pOut = sqrtf(in);
 8002332:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 8002336:	eef4 7ae6 	vcmpe.f32	s15, s13
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d506      	bpl.n	800234e <SDR_demodSSB_CW_AGC+0x7e>
 8002340:	eef0 7a66 	vmov.f32	s15, s13
			pk = sav;
 8002344:	edc1 6a00 	vstr	s13, [r1]
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002348:	4664      	mov	r4, ip
 800234a:	ed13 6a01 	vldr	s12, [r3, #-4]
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800234e:	ed95 7a00 	vldr	s14, [r5]
 8002352:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002356:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800235a:	eca2 7a01 	vstmia	r2!, {s14}
	  if(hangcnt == 0)
 800235e:	2c00      	cmp	r4, #0
 8002360:	d0d4      	beq.n	800230c <SDR_demodSSB_CW_AGC+0x3c>
 8002362:	3308      	adds	r3, #8
 8002364:	edd1 7a00 	vldr	s15, [r1]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002368:	429e      	cmp	r6, r3
 800236a:	d1da      	bne.n	8002322 <SDR_demodSSB_CW_AGC+0x52>
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <SDR_demodSSB_CW_AGC+0x18c>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 800236e:	2c00      	cmp	r4, #0
	PeakAudioValue=pk;
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <SDR_demodSSB_CW_AGC+0x190>)
 8002372:	603c      	str	r4, [r7, #0]
 8002374:	edc2 6a00 	vstr	s13, [r2]
 8002378:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800237c:	dd01      	ble.n	8002382 <SDR_demodSSB_CW_AGC+0xb2>
 800237e:	3c01      	subs	r4, #1
 8002380:	603c      	str	r4, [r7, #0]
}
 8002382:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002384:	ed91 7a00 	vldr	s14, [r1]
 8002388:	edd0 7a01 	vldr	s15, [r0, #4]
 800238c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002390:	edc1 7a00 	vstr	s15, [r1]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002394:	3308      	adds	r3, #8
 8002396:	42b3      	cmp	r3, r6
 8002398:	d0e8      	beq.n	800236c <SDR_demodSSB_CW_AGC+0x9c>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	ed13 6a01 	vldr	s12, [r3, #-4]
 80023a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80023a6:	eea6 7a06 	vfma.f32	s14, s12, s12
 80023aa:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 80023ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d506      	bpl.n	80023c6 <SDR_demodSSB_CW_AGC+0xf6>
 80023b8:	eef0 7a66 	vmov.f32	s15, s13
			pk = sav;
 80023bc:	edc1 6a00 	vstr	s13, [r1]
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80023c0:	4664      	mov	r4, ip
 80023c2:	ed13 6a01 	vldr	s12, [r3, #-4]
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80023c6:	ed95 7a00 	vldr	s14, [r5]
 80023ca:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80023ce:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80023d2:	eca2 7a01 	vstmia	r2!, {s14}
	  if(hangcnt == 0)
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d0d4      	beq.n	8002384 <SDR_demodSSB_CW_AGC+0xb4>
 80023da:	edd1 7a00 	vldr	s15, [r1]
 80023de:	e7d9      	b.n	8002394 <SDR_demodSSB_CW_AGC+0xc4>
 80023e0:	4406      	add	r6, r0
 80023e2:	4d1c      	ldr	r5, [pc, #112]	; (8002454 <SDR_demodSSB_CW_AGC+0x184>)
      if(CurrentMode == CW) pk  *= Decay[CW];
 80023e4:	481c      	ldr	r0, [pc, #112]	; (8002458 <SDR_demodSSB_CW_AGC+0x188>)
 80023e6:	e00a      	b.n	80023fe <SDR_demodSSB_CW_AGC+0x12e>
 80023e8:	ed91 7a00 	vldr	s14, [r1]
 80023ec:	edd0 7a03 	vldr	s15, [r0, #12]
 80023f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f4:	edc1 7a00 	vstr	s15, [r1]
	for(k=j=0; k<BSIZE*2; k+=2)
 80023f8:	3308      	adds	r3, #8
 80023fa:	42b3      	cmp	r3, r6
 80023fc:	d0b6      	beq.n	800236c <SDR_demodSSB_CW_AGC+0x9c>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023fe:	ed93 7a00 	vldr	s14, [r3]
 8002402:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002406:	ee27 7a07 	vmul.f32	s14, s14, s14
 800240a:	eea6 7a06 	vfma.f32	s14, s12, s12
 800240e:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 8002412:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d506      	bpl.n	800242a <SDR_demodSSB_CW_AGC+0x15a>
 800241c:	eef0 7a66 	vmov.f32	s15, s13
			pk = sav;
 8002420:	edc1 6a00 	vstr	s13, [r1]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002424:	4674      	mov	r4, lr
 8002426:	ed13 6a01 	vldr	s12, [r3, #-4]
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800242a:	ed95 7a00 	vldr	s14, [r5]
 800242e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002432:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002436:	eca2 7a01 	vstmia	r2!, {s14}
	  if(hangcnt == 0)
 800243a:	2c00      	cmp	r4, #0
 800243c:	d0d4      	beq.n	80023e8 <SDR_demodSSB_CW_AGC+0x118>
 800243e:	edd1 7a00 	vldr	s15, [r1]
 8002442:	e7d9      	b.n	80023f8 <SDR_demodSSB_CW_AGC+0x128>
 8002444:	24009390 	.word	0x24009390
 8002448:	2400e074 	.word	0x2400e074
 800244c:	2400cf04 	.word	0x2400cf04
 8002450:	2400f0e0 	.word	0x2400f0e0
 8002454:	2400adf4 	.word	0x2400adf4
 8002458:	24003de0 	.word	0x24003de0
 800245c:	2400062c 	.word	0x2400062c
 8002460:	24009c28 	.word	0x24009c28

08002464 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8002464:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002468:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800246c:	490a      	ldr	r1, [pc, #40]	; (8002498 <HAL_ADC_ConvCpltCallback+0x34>)
 800246e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002472:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002476:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002478:	4293      	cmp	r3, r2
 800247a:	d1fa      	bne.n	8002472 <HAL_ADC_ConvCpltCallback+0xe>
 800247c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002480:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe ff4f 	bl	8001328 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_ADC_ConvCpltCallback+0x38>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
}
 8002490:	bd08      	pop	{r3, pc}
 8002492:	bf00      	nop
 8002494:	2400ece0 	.word	0x2400ece0
 8002498:	e000ed00 	.word	0xe000ed00
 800249c:	24000679 	.word	0x24000679

080024a0 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a0:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80024a4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80024a8:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80024aa:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80024ae:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80024b2:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d1fa      	bne.n	80024ae <HAL_ADC_ConvHalfCpltCallback+0xe>
 80024b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024bc:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe ff31 	bl	8001328 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
}
 80024cc:	bd08      	pop	{r3, pc}
 80024ce:	bf00      	nop
 80024d0:	2400e8e0 	.word	0x2400e8e0
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	24000679 	.word	0x24000679

080024dc <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024dc:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80024e0:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80024e2:	4c05      	ldr	r4, [pc, #20]	; (80024f8 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80024e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80024ea:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80024ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80024f0:	f004 bf7c 	b.w	80073ec <HAL_GPIO_WritePin>
 80024f4:	240059c4 	.word	0x240059c4
 80024f8:	240086e0 	.word	0x240086e0
 80024fc:	58020400 	.word	0x58020400

08002500 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002500:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 8002504:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8002506:	4c05      	ldr	r4, [pc, #20]	; (800251c <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 8002508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 800250e:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 8002510:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8002514:	f004 bf6a 	b.w	80073ec <HAL_GPIO_WritePin>
 8002518:	240059c4 	.word	0x240059c4
 800251c:	240082e0 	.word	0x240082e0
 8002520:	58020400 	.word	0x58020400

08002524 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_ADC_LevelOutOfWindowCallback+0x2c>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002528:	6811      	ldr	r1, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800252a:	681a      	ldr	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800252c:	684b      	ldr	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 800252e:	4809      	ldr	r0, [pc, #36]	; (8002554 <HAL_ADC_LevelOutOfWindowCallback+0x30>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 8002534:	b410      	push	{r4}
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002536:	604b      	str	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 8002538:	2402      	movs	r4, #2
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800253a:	6853      	ldr	r3, [r2, #4]
	OVFDetected = OVF_TIMEOUT;
 800253c:	8004      	strh	r4, [r0, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800253e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 8002542:	f85d 4b04 	ldr.w	r4, [sp], #4
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002546:	6053      	str	r3, [r2, #4]
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	24008ae4 	.word	0x24008ae4
 8002550:	24003ee4 	.word	0x24003ee4
 8002554:	24001ddc 	.word	0x24001ddc

08002558 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002558:	4b64      	ldr	r3, [pc, #400]	; (80026ec <DisplayStatus+0x194>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	b088      	sub	sp, #32
	switch(Fstep)
 8002564:	f000 80aa 	beq.w	80026bc <DisplayStatus+0x164>
 8002568:	d81c      	bhi.n	80025a4 <DisplayStatus+0x4c>
 800256a:	2b0a      	cmp	r3, #10
 800256c:	f000 80ad 	beq.w	80026ca <DisplayStatus+0x172>
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d10e      	bne.n	8002592 <DisplayStatus+0x3a>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 8002574:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <DisplayStatus+0x198>)
 8002576:	4c5f      	ldr	r4, [pc, #380]	; (80026f4 <DisplayStatus+0x19c>)
 8002578:	e893 0003 	ldmia.w	r3, {r0, r1}
 800257c:	6020      	str	r0, [r4, #0]
 800257e:	80a1      	strh	r1, [r4, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <DisplayStatus+0x1a0>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b03      	cmp	r3, #3
 8002586:	f200 80ae 	bhi.w	80026e6 <DisplayStatus+0x18e>
 800258a:	e8df f003 	tbb	[pc, r3]
 800258e:	7573      	.short	0x7573
 8002590:	278f      	.short	0x278f
	switch(Fstep)
 8002592:	2b01      	cmp	r3, #1
 8002594:	d120      	bne.n	80025d8 <DisplayStatus+0x80>
	case 1:			strcpy(StringStep,"   1 "); break;
 8002596:	4b59      	ldr	r3, [pc, #356]	; (80026fc <DisplayStatus+0x1a4>)
 8002598:	4c56      	ldr	r4, [pc, #344]	; (80026f4 <DisplayStatus+0x19c>)
 800259a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800259e:	6020      	str	r0, [r4, #0]
 80025a0:	80a1      	strh	r1, [r4, #4]
 80025a2:	e7ed      	b.n	8002580 <DisplayStatus+0x28>
	switch(Fstep)
 80025a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f000 8095 	beq.w	80026d8 <DisplayStatus+0x180>
 80025ae:	4a54      	ldr	r2, [pc, #336]	; (8002700 <DisplayStatus+0x1a8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d106      	bne.n	80025c2 <DisplayStatus+0x6a>
	case 100000: 	strcpy(StringStep," 100K"); break;
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <DisplayStatus+0x1ac>)
 80025b6:	4c4f      	ldr	r4, [pc, #316]	; (80026f4 <DisplayStatus+0x19c>)
 80025b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025bc:	6020      	str	r0, [r4, #0]
 80025be:	80a1      	strh	r1, [r4, #4]
 80025c0:	e7de      	b.n	8002580 <DisplayStatus+0x28>
	switch(Fstep)
 80025c2:	f242 3228 	movw	r2, #9000	; 0x2328
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d106      	bne.n	80025d8 <DisplayStatus+0x80>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <DisplayStatus+0x1b0>)
 80025cc:	4c49      	ldr	r4, [pc, #292]	; (80026f4 <DisplayStatus+0x19c>)
 80025ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025d2:	6020      	str	r0, [r4, #0]
 80025d4:	80a1      	strh	r1, [r4, #4]
 80025d6:	e7d3      	b.n	8002580 <DisplayStatus+0x28>
 80025d8:	4c46      	ldr	r4, [pc, #280]	; (80026f4 <DisplayStatus+0x19c>)
 80025da:	e7d1      	b.n	8002580 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <DisplayStatus+0x1b4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4e4b      	ldr	r6, [pc, #300]	; (8002710 <DisplayStatus+0x1b8>)
 80025e2:	0c1a      	lsrs	r2, r3, #16
 80025e4:	8033      	strh	r3, [r6, #0]
 80025e6:	70b2      	strb	r2, [r6, #2]
	}
	switch (CurrentAGC)
 80025e8:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <DisplayStatus+0x1bc>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d04a      	beq.n	8002686 <DisplayStatus+0x12e>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d15f      	bne.n	80026b4 <DisplayStatus+0x15c>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <DisplayStatus+0x1c0>)
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <DisplayStatus+0x1c4>)
 80025f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fc:	6018      	str	r0, [r3, #0]
 80025fe:	7119      	strb	r1, [r3, #4]
	}
	switch (CurrentBW)
 8002600:	4a47      	ldr	r2, [pc, #284]	; (8002720 <DisplayStatus+0x1c8>)
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	2a00      	cmp	r2, #0
 8002606:	d048      	beq.n	800269a <DisplayStatus+0x142>
 8002608:	2a01      	cmp	r2, #1
 800260a:	d155      	bne.n	80026b8 <DisplayStatus+0x160>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 800260c:	4a45      	ldr	r2, [pc, #276]	; (8002724 <DisplayStatus+0x1cc>)
 800260e:	4d46      	ldr	r5, [pc, #280]	; (8002728 <DisplayStatus+0x1d0>)
 8002610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002614:	6028      	str	r0, [r5, #0]
 8002616:	7129      	strb	r1, [r5, #4]
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, volume);
 8002618:	4944      	ldr	r1, [pc, #272]	; (800272c <DisplayStatus+0x1d4>)
 800261a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8002730 <DisplayStatus+0x1d8>
 800261e:	edd1 6a00 	vldr	s13, [r1]
 8002622:	4a44      	ldr	r2, [pc, #272]	; (8002734 <DisplayStatus+0x1dc>)
 8002624:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002628:	4943      	ldr	r1, [pc, #268]	; (8002738 <DisplayStatus+0x1e0>)
 800262a:	ed92 7a00 	vldr	s14, [r2]
 800262e:	4a43      	ldr	r2, [pc, #268]	; (800273c <DisplayStatus+0x1e4>)
 8002630:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	9400      	str	r4, [sp, #0]
 8002640:	ec53 2b16 	vmov	r2, r3, d6
 8002644:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8002648:	ed8d 7b06 	vstr	d7, [sp, #24]
 800264c:	493c      	ldr	r1, [pc, #240]	; (8002740 <DisplayStatus+0x1e8>)
 800264e:	483d      	ldr	r0, [pc, #244]	; (8002744 <DisplayStatus+0x1ec>)
 8002650:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8002654:	f00c fd52 	bl	800f0fc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002658:	483a      	ldr	r0, [pc, #232]	; (8002744 <DisplayStatus+0x1ec>)
 800265a:	f7fd fe41 	bl	80002e0 <strlen>
 800265e:	4601      	mov	r1, r0
 8002660:	4838      	ldr	r0, [pc, #224]	; (8002744 <DisplayStatus+0x1ec>)
 8002662:	b289      	uxth	r1, r1
 8002664:	f00a fd30 	bl	800d0c8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002668:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 800266a:	b008      	add	sp, #32
 800266c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8002670:	f001 bede 	b.w	8004430 <HAL_Delay>
	case AM: strcpy(StringMode,"AM"); break;
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <DisplayStatus+0x1f0>)
 8002676:	e7b2      	b.n	80025de <DisplayStatus+0x86>
	case LSB: strcpy(StringMode,"LSB"); break;
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <DisplayStatus+0x1f4>)
 800267a:	4e25      	ldr	r6, [pc, #148]	; (8002710 <DisplayStatus+0x1b8>)
 800267c:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <DisplayStatus+0x1bc>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1b4      	bne.n	80025f0 <DisplayStatus+0x98>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002686:	4a32      	ldr	r2, [pc, #200]	; (8002750 <DisplayStatus+0x1f8>)
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <DisplayStatus+0x1c4>)
 800268a:	e892 0003 	ldmia.w	r2, {r0, r1}
	switch (CurrentBW)
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <DisplayStatus+0x1c8>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002690:	6018      	str	r0, [r3, #0]
	switch (CurrentBW)
 8002692:	7812      	ldrb	r2, [r2, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002694:	7119      	strb	r1, [r3, #4]
	switch (CurrentBW)
 8002696:	2a00      	cmp	r2, #0
 8002698:	d1b6      	bne.n	8002608 <DisplayStatus+0xb0>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <DisplayStatus+0x1fc>)
 800269c:	4d22      	ldr	r5, [pc, #136]	; (8002728 <DisplayStatus+0x1d0>)
 800269e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a2:	0c0a      	lsrs	r2, r1, #16
 80026a4:	6028      	str	r0, [r5, #0]
 80026a6:	80a9      	strh	r1, [r5, #4]
 80026a8:	71aa      	strb	r2, [r5, #6]
 80026aa:	e7b5      	b.n	8002618 <DisplayStatus+0xc0>
	case USB: strcpy(StringMode,"USB"); break;
 80026ac:	4e18      	ldr	r6, [pc, #96]	; (8002710 <DisplayStatus+0x1b8>)
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <DisplayStatus+0x200>)
 80026b0:	6033      	str	r3, [r6, #0]
 80026b2:	e799      	b.n	80025e8 <DisplayStatus+0x90>
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <DisplayStatus+0x1c4>)
 80026b6:	e7a3      	b.n	8002600 <DisplayStatus+0xa8>
 80026b8:	4d1b      	ldr	r5, [pc, #108]	; (8002728 <DisplayStatus+0x1d0>)
 80026ba:	e7ad      	b.n	8002618 <DisplayStatus+0xc0>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <DisplayStatus+0x204>)
 80026be:	4c0d      	ldr	r4, [pc, #52]	; (80026f4 <DisplayStatus+0x19c>)
 80026c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026c4:	6020      	str	r0, [r4, #0]
 80026c6:	80a1      	strh	r1, [r4, #4]
 80026c8:	e75a      	b.n	8002580 <DisplayStatus+0x28>
	case 10: 		strcpy(StringStep,"  10 "); break;
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <DisplayStatus+0x208>)
 80026cc:	4c09      	ldr	r4, [pc, #36]	; (80026f4 <DisplayStatus+0x19c>)
 80026ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026d2:	6020      	str	r0, [r4, #0]
 80026d4:	80a1      	strh	r1, [r4, #4]
 80026d6:	e753      	b.n	8002580 <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <DisplayStatus+0x20c>)
 80026da:	4c06      	ldr	r4, [pc, #24]	; (80026f4 <DisplayStatus+0x19c>)
 80026dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026e0:	6020      	str	r0, [r4, #0]
 80026e2:	80a1      	strh	r1, [r4, #4]
 80026e4:	e74c      	b.n	8002580 <DisplayStatus+0x28>
 80026e6:	4e0a      	ldr	r6, [pc, #40]	; (8002710 <DisplayStatus+0x1b8>)
 80026e8:	e77e      	b.n	80025e8 <DisplayStatus+0x90>
 80026ea:	bf00      	nop
 80026ec:	2400e06c 	.word	0x2400e06c
 80026f0:	08018898 	.word	0x08018898
 80026f4:	24000668 	.word	0x24000668
 80026f8:	2400e074 	.word	0x2400e074
 80026fc:	08018888 	.word	0x08018888
 8002700:	000186a0 	.word	0x000186a0
 8002704:	080188b8 	.word	0x080188b8
 8002708:	080188a8 	.word	0x080188a8
 800270c:	080188c4 	.word	0x080188c4
 8002710:	24000660 	.word	0x24000660
 8002714:	240019c0 	.word	0x240019c0
 8002718:	080188d0 	.word	0x080188d0
 800271c:	24000658 	.word	0x24000658
 8002720:	24001dd4 	.word	0x24001dd4
 8002724:	080188e0 	.word	0x080188e0
 8002728:	24000670 	.word	0x24000670
 800272c:	2400ae00 	.word	0x2400ae00
 8002730:	3a83126f 	.word	0x3a83126f
 8002734:	24005918 	.word	0x24005918
 8002738:	240093a8 	.word	0x240093a8
 800273c:	24001dd0 	.word	0x24001dd0
 8002740:	080188e8 	.word	0x080188e8
 8002744:	240009b4 	.word	0x240009b4
 8002748:	080188c0 	.word	0x080188c0
 800274c:	0042534c 	.word	0x0042534c
 8002750:	080188c8 	.word	0x080188c8
 8002754:	080188d8 	.word	0x080188d8
 8002758:	00425355 	.word	0x00425355
 800275c:	080188a0 	.word	0x080188a0
 8002760:	08018890 	.word	0x08018890
 8002764:	080188b0 	.word	0x080188b0

08002768 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <SetTXPLL+0xec>)
 800276a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	MinDiff = 999999999;
 800276e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002858 <SetTXPLL+0xf0>
				OutF = XTalFreq * n / m / p / od;
 8002772:	edd3 4a00 	vldr	s9, [r3]
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002776:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800285c <SetTXPLL+0xf4>
 800277a:	eddf 3a39 	vldr	s7, [pc, #228]	; 8002860 <SetTXPLL+0xf8>
{
 800277e:	b4f0      	push	{r4, r5, r6, r7}
	for (m = 2; m <= 25; m++) //was 64
 8002780:	2502      	movs	r5, #2
		for (n = 2; n <= 512; n++) //was 1
 8002782:	f240 2601 	movw	r6, #513	; 0x201
				OutF = XTalFreq * n / m / p / od;
 8002786:	ee07 5a90 	vmov	s15, r5
		for (n = 2; n <= 512; n++) //was 1
 800278a:	2202      	movs	r2, #2
				OutF = XTalFreq * n / m / p / od;
 800278c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002790:	ee83 4a25 	vdiv.f32	s8, s6, s11
 8002794:	e002      	b.n	800279c <SetTXPLL+0x34>
		for (n = 2; n <= 512; n++) //was 1
 8002796:	3201      	adds	r2, #1
 8002798:	42b2      	cmp	r2, r6
 800279a:	d037      	beq.n	800280c <SetTXPLL+0xa4>
				OutF = XTalFreq * n / m / p / od;
 800279c:	ee07 2a90 	vmov	s15, r2
 80027a0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80027a4:	ee26 6a24 	vmul.f32	s12, s12, s9
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027a8:	ee66 7a04 	vmul.f32	s15, s12, s8
 80027ac:	eef4 7a45 	vcmp.f32	s15, s10
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	ddef      	ble.n	8002796 <SetTXPLL+0x2e>
 80027b6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	d5ea      	bpl.n	8002796 <SetTXPLL+0x2e>
			for (p = 2; p <= 128; p+=2)
 80027c0:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ca:	ee27 7a25 	vmul.f32	s14, s14, s11
 80027ce:	eec6 7a07 	vdiv.f32	s15, s12, s14
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80027d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027da:	ee17 7a90 	vmov	r7, s15
 80027de:	2f00      	cmp	r7, #0
 80027e0:	bfb8      	it	lt
 80027e2:	427f      	neglt	r7, r7
 80027e4:	ee07 7a90 	vmov	s15, r7
 80027e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	d504      	bpl.n	8002800 <SetTXPLL+0x98>
 80027f6:	eef0 6a67 	vmov.f32	s13, s15
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	462c      	mov	r4, r5
			for (p = 2; p <= 128; p+=2)
 8002800:	3302      	adds	r3, #2
 8002802:	2b82      	cmp	r3, #130	; 0x82
 8002804:	d1dd      	bne.n	80027c2 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 8002806:	3201      	adds	r2, #1
 8002808:	42b2      	cmp	r2, r6
 800280a:	d1c7      	bne.n	800279c <SetTXPLL+0x34>
	for (m = 2; m <= 25; m++) //was 64
 800280c:	3501      	adds	r5, #1
 800280e:	2d1a      	cmp	r5, #26
 8002810:	d1b9      	bne.n	8002786 <SetTXPLL+0x1e>
				}
			}
		}
	}
	TXFreqError = MinDiff;
	__HAL_RCC_PLL2_DISABLE();
 8002812:	4d14      	ldr	r5, [pc, #80]	; (8002864 <SetTXPLL+0xfc>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002814:	1e4b      	subs	r3, r1, #1
 8002816:	1e42      	subs	r2, r0, #1
	TXFreqError = MinDiff;
 8002818:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	__HAL_RCC_PLL2_DISABLE();
 800281c:	6829      	ldr	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800281e:	025b      	lsls	r3, r3, #9
	TXFreqError = MinDiff;
 8002820:	4e11      	ldr	r6, [pc, #68]	; (8002868 <SetTXPLL+0x100>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002826:	b29b      	uxth	r3, r3
	__HAL_RCC_PLL2_DISABLE();
 8002828:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
	TXFreqError = MinDiff;
 800282c:	edc6 6a00 	vstr	s13, [r6]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002830:	4313      	orrs	r3, r2
	__HAL_RCC_PLL2_DISABLE();
 8002832:	6029      	str	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002834:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800283e:	ea42 3404 	orr.w	r4, r2, r4, lsl #12
 8002842:	62ac      	str	r4, [r5, #40]	; 0x28
 8002844:	63ab      	str	r3, [r5, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800284c:	602b      	str	r3, [r5, #0]

}
 800284e:	bcf0      	pop	{r4, r5, r6, r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	24009398 	.word	0x24009398
 8002858:	4e6e6b28 	.word	0x4e6e6b28
 800285c:	4d0f0d18 	.word	0x4d0f0d18
 8002860:	4e64e1c0 	.word	0x4e64e1c0
 8002864:	58024400 	.word	0x58024400
 8002868:	24001dd0 	.word	0x24001dd0
 800286c:	00000000 	.word	0x00000000

08002870 <UserInput>:
	if (USBRXLength)
 8002870:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <UserInput+0x200>)
 8002872:	681a      	ldr	r2, [r3, #0]
{
 8002874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002878:	ed2d 8b06 	vpush	{d8-d10}
 800287c:	b09f      	sub	sp, #124	; 0x7c
	if (USBRXLength)
 800287e:	2a00      	cmp	r2, #0
 8002880:	f000 80e7 	beq.w	8002a52 <UserInput+0x1e2>
		result = HAL_OK;
 8002884:	2200      	movs	r2, #0
 8002886:	f88d 200f 	strb.w	r2, [sp, #15]
		USBRXLength = 0;
 800288a:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 800288c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002894:	2b00      	cmp	r3, #0
 8002896:	d165      	bne.n	8002964 <UserInput+0xf4>
		switch (UartRXString[0])
 8002898:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <UserInput+0x204>)
		UartRXDataReady = RESET;
 800289a:	4977      	ldr	r1, [pc, #476]	; (8002a78 <UserInput+0x208>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 80028a0:	3b2b      	subs	r3, #43	; 0x2b
 80028a2:	2b4f      	cmp	r3, #79	; 0x4f
 80028a4:	d85c      	bhi.n	8002960 <UserInput+0xf0>
 80028a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028aa:	01e0      	.short	0x01e0
 80028ac:	01cb005b 	.word	0x01cb005b
 80028b0:	005b005b 	.word	0x005b005b
 80028b4:	0332005b 	.word	0x0332005b
 80028b8:	032a032e 	.word	0x032a032e
 80028bc:	03220326 	.word	0x03220326
 80028c0:	031a031e 	.word	0x031a031e
 80028c4:	03120316 	.word	0x03120316
 80028c8:	005b005b 	.word	0x005b005b
 80028cc:	005b005b 	.word	0x005b005b
 80028d0:	005b005b 	.word	0x005b005b
 80028d4:	005b005b 	.word	0x005b005b
 80028d8:	005b005b 	.word	0x005b005b
 80028dc:	005b005b 	.word	0x005b005b
 80028e0:	005b005b 	.word	0x005b005b
 80028e4:	005b005b 	.word	0x005b005b
 80028e8:	005b005b 	.word	0x005b005b
 80028ec:	005b005b 	.word	0x005b005b
 80028f0:	005b005b 	.word	0x005b005b
 80028f4:	005b005b 	.word	0x005b005b
 80028f8:	005b005b 	.word	0x005b005b
 80028fc:	005b005b 	.word	0x005b005b
 8002900:	030c005b 	.word	0x030c005b
 8002904:	005b005b 	.word	0x005b005b
 8002908:	005b005b 	.word	0x005b005b
 800290c:	005b005b 	.word	0x005b005b
 8002910:	005b005b 	.word	0x005b005b
 8002914:	0308005b 	.word	0x0308005b
 8002918:	0304005b 	.word	0x0304005b
 800291c:	005b005b 	.word	0x005b005b
 8002920:	02770281 	.word	0x02770281
 8002924:	005b0050 	.word	0x005b0050
 8002928:	005b005b 	.word	0x005b005b
 800292c:	005b0273 	.word	0x005b0273
 8002930:	005b026f 	.word	0x005b026f
 8002934:	005b005b 	.word	0x005b005b
 8002938:	0239023d 	.word	0x0239023d
 800293c:	033601f2 	.word	0x033601f2
 8002940:	0300005b 	.word	0x0300005b
 8002944:	005b005b 	.word	0x005b005b
 8002948:	02bb      	.short	0x02bb
			keyer_speed += 1;
 800294a:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <UserInput+0x20c>)
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8002950:	2832      	cmp	r0, #50	; 0x32
 8002952:	f340 82e4 	ble.w	8002f1e <UserInput+0x6ae>
				keyer_speed = 50;
 8002956:	2232      	movs	r2, #50	; 0x32
 8002958:	4610      	mov	r0, r2
 800295a:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 800295c:	f7fe f8d6 	bl	8000b0c <loadWPM>
		DisplayStatus();
 8002960:	f7ff fdfa 	bl	8002558 <DisplayStatus>
	EncVal = TIM4->CNT;
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <UserInput+0x210>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002966:	4c47      	ldr	r4, [pc, #284]	; (8002a84 <UserInput+0x214>)
	EncVal = TIM4->CNT;
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 800296a:	8821      	ldrh	r1, [r4, #0]
	EncVal = TIM4->CNT;
 800296c:	b29b      	uxth	r3, r3
 800296e:	4d46      	ldr	r5, [pc, #280]	; (8002a88 <UserInput+0x218>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002970:	1a5a      	subs	r2, r3, r1
	EncVal = TIM4->CNT;
 8002972:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002974:	b216      	sxth	r6, r2
 8002976:	b290      	uxth	r0, r2
	if (DiffEncVal < 0)
 8002978:	2e00      	cmp	r6, #0
 800297a:	f2c0 8158 	blt.w	8002c2e <UserInput+0x3be>
	if (DiffEncVal > 0)
 800297e:	d005      	beq.n	800298c <UserInput+0x11c>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8002980:	f7fe fb36 	bl	8000ff0 <FminusClicked>
		DisplayStatus();
 8002984:	f7ff fde8 	bl	8002558 <DisplayStatus>
		LastEncVal = EncVal;
 8002988:	882b      	ldrh	r3, [r5, #0]
 800298a:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <UserInput+0x21c>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 800298e:	4f40      	ldr	r7, [pc, #256]	; (8002a90 <UserInput+0x220>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	4c3f      	ldr	r4, [pc, #252]	; (8002a94 <UserInput+0x224>)
 8002996:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800299a:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8002a60 <UserInput+0x1f0>
 800299e:	ee27 0b00 	vmul.f64	d0, d7, d0
 80029a2:	f00f f88d 	bl	8011ac0 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 80029a6:	493c      	ldr	r1, [pc, #240]	; (8002a98 <UserInput+0x228>)
 80029a8:	4638      	mov	r0, r7
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80029aa:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 80029ae:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002a68 <UserInput+0x1f8>
 80029b2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80029b6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 80029ba:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80029be:	ed84 7a00 	vstr	s14, [r4]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 80029c2:	ec53 2b16 	vmov	r2, r3, d6
 80029c6:	f00c fb99 	bl	800f0fc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80029ca:	4638      	mov	r0, r7
 80029cc:	f7fd fc88 	bl	80002e0 <strlen>
 80029d0:	4601      	mov	r1, r0
 80029d2:	4638      	mov	r0, r7
 80029d4:	b289      	uxth	r1, r1
 80029d6:	f00a fb77 	bl	800d0c8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f001 fd28 	bl	8004430 <HAL_Delay>
	if (ShowWF) {
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <UserInput+0x22c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d165      	bne.n	8002ab4 <UserInput+0x244>
	if (OVFDetected)
 80029e8:	492d      	ldr	r1, [pc, #180]	; (8002aa0 <UserInput+0x230>)
 80029ea:	880b      	ldrh	r3, [r1, #0]
 80029ec:	b343      	cbz	r3, 8002a40 <UserInput+0x1d0>
		OVFDetected--;
 80029ee:	3b01      	subs	r3, #1
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80029f0:	4d2c      	ldr	r5, [pc, #176]	; (8002aa4 <UserInput+0x234>)
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80029f2:	482d      	ldr	r0, [pc, #180]	; (8002aa8 <UserInput+0x238>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80029f4:	2480      	movs	r4, #128	; 0x80
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <UserInput+0x23c>)
		OVFDetected--;
 80029f8:	b29b      	uxth	r3, r3
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80029fa:	682e      	ldr	r6, [r5, #0]
		OVFDetected--;
 80029fc:	800b      	strh	r3, [r1, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80029fe:	6805      	ldr	r5, [r0, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002a00:	ca03      	ldmia	r2!, {r0, r1}
 8002a02:	6079      	str	r1, [r7, #4]
 8002a04:	8811      	ldrh	r1, [r2, #0]
 8002a06:	7892      	ldrb	r2, [r2, #2]
 8002a08:	6038      	str	r0, [r7, #0]
 8002a0a:	8139      	strh	r1, [r7, #8]
 8002a0c:	72ba      	strb	r2, [r7, #10]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002a0e:	6034      	str	r4, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002a10:	602c      	str	r4, [r5, #0]
		if (!OVFDetected)
 8002a12:	b92b      	cbnz	r3, 8002a20 <UserInput+0x1b0>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002a14:	6873      	ldr	r3, [r6, #4]
 8002a16:	4323      	orrs	r3, r4
 8002a18:	6073      	str	r3, [r6, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002a1a:	686b      	ldr	r3, [r5, #4]
 8002a1c:	4323      	orrs	r3, r4
 8002a1e:	606b      	str	r3, [r5, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002a20:	481b      	ldr	r0, [pc, #108]	; (8002a90 <UserInput+0x220>)
 8002a22:	f7fd fc5d 	bl	80002e0 <strlen>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4819      	ldr	r0, [pc, #100]	; (8002a90 <UserInput+0x220>)
 8002a2a:	b289      	uxth	r1, r1
 8002a2c:	f00a fb4c 	bl	800d0c8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f001 fcfd 	bl	8004430 <HAL_Delay>
}
 8002a36:	b01f      	add	sp, #124	; 0x7c
 8002a38:	ecbd 8b06 	vpop	{d8-d10}
 8002a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <UserInput+0x240>)
 8002a42:	cb03      	ldmia	r3!, {r0, r1}
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	789b      	ldrb	r3, [r3, #2]
 8002a48:	6038      	str	r0, [r7, #0]
 8002a4a:	6079      	str	r1, [r7, #4]
 8002a4c:	813a      	strh	r2, [r7, #8]
 8002a4e:	72bb      	strb	r3, [r7, #10]
 8002a50:	e7e6      	b.n	8002a20 <UserInput+0x1b0>
		result = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f88d 300f 	strb.w	r3, [sp, #15]
 8002a58:	e718      	b.n	800288c <UserInput+0x1c>
 8002a5a:	bf00      	nop
 8002a5c:	f3af 8000 	nop.w
 8002a60:	00000000 	.word	0x00000000
 8002a64:	409f4000 	.word	0x409f4000
 8002a68:	9916f6a6 	.word	0x9916f6a6
 8002a6c:	400a93fc 	.word	0x400a93fc
 8002a70:	240009b0 	.word	0x240009b0
 8002a74:	240008b0 	.word	0x240008b0
 8002a78:	24000678 	.word	0x24000678
 8002a7c:	240093a8 	.word	0x240093a8
 8002a80:	40000800 	.word	0x40000800
 8002a84:	24008b8c 	.word	0x24008b8c
 8002a88:	240093a0 	.word	0x240093a0
 8002a8c:	24009c28 	.word	0x24009c28
 8002a90:	240009b4 	.word	0x240009b4
 8002a94:	240059b8 	.word	0x240059b8
 8002a98:	0801893c 	.word	0x0801893c
 8002a9c:	24009c38 	.word	0x24009c38
 8002aa0:	24001ddc 	.word	0x24001ddc
 8002aa4:	24008ae4 	.word	0x24008ae4
 8002aa8:	24003ee4 	.word	0x24003ee4
 8002aac:	08018974 	.word	0x08018974
 8002ab0:	08018980 	.word	0x08018980
		sprintf((char*)UartTXString, "\e[11;1H");
 8002ab4:	4bc8      	ldr	r3, [pc, #800]	; (8002dd8 <UserInput+0x568>)
 8002ab6:	ad04      	add	r5, sp, #16
 8002ab8:	4cc8      	ldr	r4, [pc, #800]	; (8002ddc <UserInput+0x56c>)
 8002aba:	ed9f aac9 	vldr	s20, [pc, #804]	; 8002de0 <UserInput+0x570>
 8002abe:	f5a4 6980 	sub.w	r9, r4, #1024	; 0x400
 8002ac2:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8002e1c <UserInput+0x5ac>
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002ac6:	ed9f 9bbc 	vldr	d9, [pc, #752]	; 8002db8 <UserInput+0x548>
 8002aca:	ed9f 8bbd 	vldr	d8, [pc, #756]	; 8002dc0 <UserInput+0x550>
		sprintf((char*)UartTXString, "\e[11;1H");
 8002ace:	cb03      	ldmia	r3!, {r0, r1}
 8002ad0:	6038      	str	r0, [r7, #0]
 8002ad2:	6079      	str	r1, [r7, #4]
				if (StrongestSignal < WFBuffer[i + j])
 8002ad4:	edd4 6a01 	vldr	s13, [r4, #4]
 8002ad8:	ed94 7a02 	vldr	s14, [r4, #8]
 8002adc:	edd4 7a00 	vldr	s15, [r4]
 8002ae0:	ed94 0a03 	vldr	s0, [r4, #12]
 8002ae4:	ed94 6a04 	vldr	s12, [r4, #16]
 8002ae8:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8002aec:	edd4 6a05 	vldr	s13, [r4, #20]
 8002af0:	fec7 7a8a 	vmaxnm.f32	s15, s15, s20
 8002af4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002af8:	ed94 7a06 	vldr	s14, [r4, #24]
 8002afc:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002b00:	edd4 7a07 	vldr	s15, [r4, #28]
 8002b04:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
				if (StrongestSignal < WFBuffer[i + j])
 8002b08:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002b0c:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002b10:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8002b14:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002b18:	ee30 0b09 	vadd.f64	d0, d0, d9
 8002b1c:	f00e fdb4 	bl	8011688 <log>
 8002b20:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002b24:	49af      	ldr	r1, [pc, #700]	; (8002de4 <UserInput+0x574>)
 8002b26:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002b28:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002b2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002b30:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002b34:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002b38:	edcd 7a01 	vstr	s15, [sp, #4]
 8002b3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002b40:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002b44:	f00c fada 	bl	800f0fc <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002b48:	4629      	mov	r1, r5
 8002b4a:	48a7      	ldr	r0, [pc, #668]	; (8002de8 <UserInput+0x578>)
 8002b4c:	f00c faff 	bl	800f14e <strcat>
		for (i = 256; i >= 0; i -= 8)
 8002b50:	45a1      	cmp	r9, r4
 8002b52:	f1a4 0420 	sub.w	r4, r4, #32
 8002b56:	d1bd      	bne.n	8002ad4 <UserInput+0x264>
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002b58:	ed9f 8b9b 	vldr	d8, [pc, #620]	; 8002dc8 <UserInput+0x558>
 8002b5c:	f509 663e 	add.w	r6, r9, #3040	; 0xbe0
 8002b60:	4ca2      	ldr	r4, [pc, #648]	; (8002dec <UserInput+0x57c>)
 8002b62:	ed9f 9a9f 	vldr	s18, [pc, #636]	; 8002de0 <UserInput+0x570>
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002b66:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002de4 <UserInput+0x574>
				if (StrongestSignal < WFBuffer[i - j])
 8002b6a:	ed94 7a06 	vldr	s14, [r4, #24]
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002b6e:	4623      	mov	r3, r4
 8002b70:	ed94 6a05 	vldr	s12, [r4, #20]
 8002b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b78:	edd4 7a07 	vldr	s15, [r4, #28]
 8002b7c:	3c20      	subs	r4, #32
 8002b7e:	ed94 5a0c 	vldr	s10, [r4, #48]	; 0x30
 8002b82:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 8002b86:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002b8a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8002b8e:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
				if (StrongestSignal < WFBuffer[i - j])
 8002b9a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8002b9e:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8002ba2:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8002ba6:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8002baa:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002bae:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8002bb2:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002bb6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002bba:	f00e fd65 	bl	8011688 <log>
 8002bbe:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002bc6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002bca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002bce:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002bd2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002bd6:	edcd 7a01 	vstr	s15, [sp, #4]
 8002bda:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002bde:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002be2:	f00c fa8b 	bl	800f0fc <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002be6:	4880      	ldr	r0, [pc, #512]	; (8002de8 <UserInput+0x578>)
 8002be8:	f7fd fb7a 	bl	80002e0 <strlen>
 8002bec:	4629      	mov	r1, r5
 8002bee:	4438      	add	r0, r7
 8002bf0:	f00c faa4 	bl	800f13c <stpcpy>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002bf4:	42b4      	cmp	r4, r6
			strcat(UartTXString, (int8_t *)WFString);
 8002bf6:	4603      	mov	r3, r0
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002bf8:	d1b7      	bne.n	8002b6a <UserInput+0x2fa>
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <UserInput+0x580>)
		strcat(UartTXString, (int8_t *)WFString);
 8002bfc:	462c      	mov	r4, r5
 8002bfe:	f1c7 060a 	rsb	r6, r7, #10
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002c02:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c04:	c503      	stmia	r5!, {r0, r1}
 8002c06:	0c11      	lsrs	r1, r2, #16
 8002c08:	f825 2b02 	strh.w	r2, [r5], #2
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002c0c:	441e      	add	r6, r3
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002c0e:	7029      	strb	r1, [r5, #0]
		strcat(UartTXString, (int8_t *)WFString);
 8002c10:	cc03      	ldmia	r4!, {r0, r1}
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	6059      	str	r1, [r3, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002c16:	b2b1      	uxth	r1, r6
		strcat(UartTXString, (int8_t *)WFString);
 8002c18:	8825      	ldrh	r5, [r4, #0]
 8002c1a:	78a2      	ldrb	r2, [r4, #2]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002c1c:	4872      	ldr	r0, [pc, #456]	; (8002de8 <UserInput+0x578>)
		strcat(UartTXString, (int8_t *)WFString);
 8002c1e:	811d      	strh	r5, [r3, #8]
 8002c20:	729a      	strb	r2, [r3, #10]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002c22:	f00a fa51 	bl	800d0c8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f001 fc02 	bl	8004430 <HAL_Delay>
}
 8002c2c:	e6dc      	b.n	80029e8 <UserInput+0x178>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8002c2e:	1acb      	subs	r3, r1, r3
 8002c30:	b298      	uxth	r0, r3
 8002c32:	f7fe f973 	bl	8000f1c <FplusClicked>
		DisplayStatus();
 8002c36:	f7ff fc8f 	bl	8002558 <DisplayStatus>
		LastEncVal = EncVal;
 8002c3a:	882b      	ldrh	r3, [r5, #0]
 8002c3c:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8002c3e:	e6a5      	b.n	800298c <UserInput+0x11c>
			volume -= 0.1;
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <UserInput+0x584>)
			if (volume < 0)
 8002c42:	2200      	movs	r2, #0
			volume -= 0.1;
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002dd0 <UserInput+0x560>
 8002c4c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002c50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c54:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002c58:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8002c60:	bf54      	ite	pl
 8002c62:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8002c66:	601a      	strmi	r2, [r3, #0]
 8002c68:	e67a      	b.n	8002960 <UserInput+0xf0>
			volume += 0.1;
 8002c6a:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <UserInput+0x584>)
			if (volume > 1.0)
 8002c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002c70:	ed93 7a00 	vldr	s14, [r3]
 8002c74:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002dd0 <UserInput+0x560>
 8002c78:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002c7c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002c80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c84:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8002c88:	edc3 7a00 	vstr	s15, [r3]
 8002c8c:	e668      	b.n	8002960 <UserInput+0xf0>
	if (Status)
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8002c8e:	4e5a      	ldr	r6, [pc, #360]	; (8002df8 <UserInput+0x588>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8002c92:	4c5a      	ldr	r4, [pc, #360]	; (8002dfc <UserInput+0x58c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	ad04      	add	r5, sp, #16
		if (LastTXFreq != LOfreq)
 8002c96:	ed96 0a00 	vldr	s0, [r6]
		TransmissionEnabled = 1;
 8002c9a:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 8002c9c:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <UserInput+0x590>)
		if (LastTXFreq != LOfreq)
 8002ca2:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	9304      	str	r3, [sp, #16]
		TransmissionEnabled = 1;
 8002ca8:	7011      	strb	r1, [r2, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002caa:	606b      	str	r3, [r5, #4]
		if (LastTXFreq != LOfreq)
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	612b      	str	r3, [r5, #16]
 8002cb2:	e9c5 3302 	strd	r3, r3, [r5, #8]
		if (LastTXFreq != LOfreq)
 8002cb6:	f040 8134 	bne.w	8002f22 <UserInput+0x6b2>
		{
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cba:	2303      	movs	r3, #3
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cbc:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002cc4:	2702      	movs	r7, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	484e      	ldr	r0, [pc, #312]	; (8002e04 <UserInput+0x594>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cca:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd4:	f004 fa50 	bl	8007178 <HAL_GPIO_Init>

		RELAY_TX_ON;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cde:	484a      	ldr	r0, [pc, #296]	; (8002e08 <UserInput+0x598>)
 8002ce0:	f004 fb84 	bl	80073ec <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cea:	4848      	ldr	r0, [pc, #288]	; (8002e0c <UserInput+0x59c>)
 8002cec:	f004 fb7e 	bl	80073ec <HAL_GPIO_WritePin>
{

	if (Status)
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf6:	4844      	ldr	r0, [pc, #272]	; (8002e08 <UserInput+0x598>)
 8002cf8:	f004 fb78 	bl	80073ec <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1024); // TX gate bias
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d02:	2110      	movs	r1, #16
 8002d04:	4842      	ldr	r0, [pc, #264]	; (8002e10 <UserInput+0x5a0>)
 8002d06:	f002 fe49 	bl	800599c <HAL_DAC_SetValue>
		TXCarrierEnabled = 1;
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <UserInput+0x5a4>)
		LED_GREEN_ON;
 8002d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d12:	483e      	ldr	r0, [pc, #248]	; (8002e0c <UserInput+0x59c>)
		TXCarrierEnabled = 1;
 8002d14:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8002d16:	f004 fb69 	bl	80073ec <HAL_GPIO_WritePin>
 8002d1a:	e621      	b.n	8002960 <UserInput+0xf0>
			SetAGC((Agctype)Slow);  break;
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7fd ff91 	bl	8000c44 <SetAGC>
 8002d22:	e61d      	b.n	8002960 <UserInput+0xf0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d26:	2300      	movs	r3, #0
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002d2e:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d30:	a904      	add	r1, sp, #16
 8002d32:	4834      	ldr	r0, [pc, #208]	; (8002e04 <UserInput+0x594>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3e:	f004 fa1b 	bl	8007178 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002d42:	4622      	mov	r2, r4
 8002d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d48:	482f      	ldr	r0, [pc, #188]	; (8002e08 <UserInput+0x598>)
 8002d4a:	f004 fb4f 	bl	80073ec <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8002d4e:	4622      	mov	r2, r4
 8002d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d54:	482d      	ldr	r0, [pc, #180]	; (8002e0c <UserInput+0x59c>)
 8002d56:	f004 fb49 	bl	80073ec <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <UserInput+0x590>)
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d62:	4829      	ldr	r0, [pc, #164]	; (8002e08 <UserInput+0x598>)
		TransmissionEnabled = 0;
 8002d64:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002d66:	f004 fb41 	bl	80073ec <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	2110      	movs	r1, #16
 8002d70:	4827      	ldr	r0, [pc, #156]	; (8002e10 <UserInput+0x5a0>)
 8002d72:	f002 fe13 	bl	800599c <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 8002d76:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <UserInput+0x5a4>)
		LED_GREEN_OFF;
 8002d78:	4622      	mov	r2, r4
 8002d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7e:	4823      	ldr	r0, [pc, #140]	; (8002e0c <UserInput+0x59c>)
		TXCarrierEnabled = 0;
 8002d80:	701c      	strb	r4, [r3, #0]
		LED_GREEN_OFF;
 8002d82:	f004 fb33 	bl	80073ec <HAL_GPIO_WritePin>
 8002d86:	e5eb      	b.n	8002960 <UserInput+0xf0>
			SetBW((Bwidth)Narrow);  break;
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fef9 	bl	8000b80 <SetBW>
 8002d8e:	e5e7      	b.n	8002960 <UserInput+0xf0>
			SetMode((Mode)LSB); break;
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7fe f867 	bl	8000e64 <SetMode>
 8002d96:	e5e3      	b.n	8002960 <UserInput+0xf0>
			keyer_speed -= 1;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <UserInput+0x5a8>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	f300 80bd 	bgt.w	8002f1e <UserInput+0x6ae>
				keyer_speed = 3;
 8002da4:	2203      	movs	r2, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8002daa:	e5d7      	b.n	800295c <UserInput+0xec>
			SetAGC((Agctype)Fast);  break;
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd ff49 	bl	8000c44 <SetAGC>
 8002db2:	e5d5      	b.n	8002960 <UserInput+0xf0>
 8002db4:	f3af 8000 	nop.w
 8002db8:	c28f5c29 	.word	0xc28f5c29
 8002dbc:	3ff028f5 	.word	0x3ff028f5
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40490000 	.word	0x40490000
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	40590000 	.word	0x40590000
 8002dd0:	9999999a 	.word	0x9999999a
 8002dd4:	3fb99999 	.word	0x3fb99999
 8002dd8:	08018954 	.word	0x08018954
 8002ddc:	2400d464 	.word	0x2400d464
 8002de0:	00000000 	.word	0x00000000
 8002de4:	0801895c 	.word	0x0801895c
 8002de8:	240009b4 	.word	0x240009b4
 8002dec:	2400e044 	.word	0x2400e044
 8002df0:	08018968 	.word	0x08018968
 8002df4:	24005918 	.word	0x24005918
 8002df8:	2400ae00 	.word	0x2400ae00
 8002dfc:	24000654 	.word	0x24000654
 8002e00:	24009d8c 	.word	0x24009d8c
 8002e04:	58020800 	.word	0x58020800
 8002e08:	58020c00 	.word	0x58020c00
 8002e0c:	58020400 	.word	0x58020400
 8002e10:	24003e40 	.word	0x24003e40
 8002e14:	24008ae0 	.word	0x24008ae0
 8002e18:	240093a8 	.word	0x240093a8
 8002e1c:	0801898c 	.word	0x0801898c
		if (LastTXFreq != LOfreq)
 8002e20:	4e46      	ldr	r6, [pc, #280]	; (8002f3c <UserInput+0x6cc>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e22:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8002e24:	4c46      	ldr	r4, [pc, #280]	; (8002f40 <UserInput+0x6d0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e26:	ad04      	add	r5, sp, #16
		if (LastTXFreq != LOfreq)
 8002e28:	ed96 0a00 	vldr	s0, [r6]
		TransmissionEnabled = 1;
 8002e2c:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 8002e2e:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8002e32:	4a44      	ldr	r2, [pc, #272]	; (8002f44 <UserInput+0x6d4>)
		if (LastTXFreq != LOfreq)
 8002e34:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	9304      	str	r3, [sp, #16]
		TransmissionEnabled = 1;
 8002e3a:	7011      	strb	r1, [r2, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	606b      	str	r3, [r5, #4]
		if (LastTXFreq != LOfreq)
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	612b      	str	r3, [r5, #16]
 8002e44:	e9c5 3302 	strd	r3, r3, [r5, #8]
		if (LastTXFreq != LOfreq)
 8002e48:	d173      	bne.n	8002f32 <UserInput+0x6c2>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	2200      	movs	r2, #0
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e4e:	2700      	movs	r7, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e50:	f44f 7800 	mov.w	r8, #512	; 0x200
 8002e54:	f04f 0902 	mov.w	r9, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e58:	4629      	mov	r1, r5
 8002e5a:	483b      	ldr	r0, [pc, #236]	; (8002f48 <UserInput+0x6d8>)
	uint8_t s[100] = "SSS SSS SSS DE I4NZX";
 8002e5c:	462c      	mov	r4, r5
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e5e:	9708      	str	r7, [sp, #32]
	uint8_t s[100] = "SSS SSS SSS DE I4NZX";
 8002e60:	4e3a      	ldr	r6, [pc, #232]	; (8002f4c <UserInput+0x6dc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e66:	e9cd 8904 	strd	r8, r9, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f004 f985 	bl	8007178 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e74:	4836      	ldr	r0, [pc, #216]	; (8002f50 <UserInput+0x6e0>)
 8002e76:	f004 fab9 	bl	80073ec <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e80:	4834      	ldr	r0, [pc, #208]	; (8002f54 <UserInput+0x6e4>)
 8002e82:	f004 fab3 	bl	80073ec <HAL_GPIO_WritePin>
	uint8_t s[100] = "SSS SSS SSS DE I4NZX";
 8002e86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002e8e:	224f      	movs	r2, #79	; 0x4f
 8002e90:	f844 0b04 	str.w	r0, [r4], #4
 8002e94:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8002e98:	7021      	strb	r1, [r4, #0]
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	f00b fce4 	bl	800e868 <memset>
	PrepareBits(s, & TXMessage);
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	492d      	ldr	r1, [pc, #180]	; (8002f58 <UserInput+0x6e8>)
 8002ea4:	f7fd fd0a 	bl	80008bc <PrepareBits>
}
 8002ea8:	e55a      	b.n	8002960 <UserInput+0xf0>
			SetBW((Bwidth)Wide);  break;
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7fd fe68 	bl	8000b80 <SetBW>
 8002eb0:	e556      	b.n	8002960 <UserInput+0xf0>
			SetMode((Mode)CW); break;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f7fd ffd6 	bl	8000e64 <SetMode>
 8002eb8:	e552      	b.n	8002960 <UserInput+0xf0>
			SetMode((Mode)AM); break;
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd ffd2 	bl	8000e64 <SetMode>
 8002ec0:	e54e      	b.n	8002960 <UserInput+0xf0>
			if (ShowWF)
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <UserInput+0x6ec>)
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	b38a      	cbz	r2, 8002f2c <UserInput+0x6bc>
				ShowWF=0;
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e548      	b.n	8002960 <UserInput+0xf0>
			SetFstep(9); break;
 8002ece:	2009      	movs	r0, #9
 8002ed0:	f7fe f802 	bl	8000ed8 <SetFstep>
 8002ed4:	e544      	b.n	8002960 <UserInput+0xf0>
			SetFstep(0); break;
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fffe 	bl	8000ed8 <SetFstep>
 8002edc:	e540      	b.n	8002960 <UserInput+0xf0>
			SetFstep(1); break;
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd fffa 	bl	8000ed8 <SetFstep>
 8002ee4:	e53c      	b.n	8002960 <UserInput+0xf0>
			SetFstep(2);  break;
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f7fd fff6 	bl	8000ed8 <SetFstep>
 8002eec:	e538      	b.n	8002960 <UserInput+0xf0>
			SetFstep(3);  break;
 8002eee:	2003      	movs	r0, #3
 8002ef0:	f7fd fff2 	bl	8000ed8 <SetFstep>
 8002ef4:	e534      	b.n	8002960 <UserInput+0xf0>
			SetFstep(4);  break;
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f7fd ffee 	bl	8000ed8 <SetFstep>
 8002efc:	e530      	b.n	8002960 <UserInput+0xf0>
			SetFstep(5);  break;
 8002efe:	2005      	movs	r0, #5
 8002f00:	f7fd ffea 	bl	8000ed8 <SetFstep>
 8002f04:	e52c      	b.n	8002960 <UserInput+0xf0>
			FplusClicked(2); break;
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7fe f808 	bl	8000f1c <FplusClicked>
 8002f0c:	e528      	b.n	8002960 <UserInput+0xf0>
			FminusClicked(2); break;
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f7fe f86e 	bl	8000ff0 <FminusClicked>
 8002f14:	e524      	b.n	8002960 <UserInput+0xf0>
			SetMode((Mode)USB); break;
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7fd ffa4 	bl	8000e64 <SetMode>
 8002f1c:	e520      	b.n	8002960 <UserInput+0xf0>
			keyer_speed += 1;
 8002f1e:	6018      	str	r0, [r3, #0]
 8002f20:	e51c      	b.n	800295c <UserInput+0xec>
			SetTXPLL(LOfreq);
 8002f22:	f7ff fc21 	bl	8002768 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002f26:	6833      	ldr	r3, [r6, #0]
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	e6c6      	b.n	8002cba <UserInput+0x44a>
				ShowWF=1;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e516      	b.n	8002960 <UserInput+0xf0>
			SetTXPLL(LOfreq);
 8002f32:	f7ff fc19 	bl	8002768 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002f36:	6833      	ldr	r3, [r6, #0]
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	e786      	b.n	8002e4a <UserInput+0x5da>
 8002f3c:	2400ae00 	.word	0x2400ae00
 8002f40:	24000654 	.word	0x24000654
 8002f44:	24009d8c 	.word	0x24009d8c
 8002f48:	58020800 	.word	0x58020800
 8002f4c:	08012778 	.word	0x08012778
 8002f50:	58020c00 	.word	0x58020c00
 8002f54:	58020400 	.word	0x58020400
 8002f58:	24003f48 	.word	0x24003f48
 8002f5c:	24009c38 	.word	0x24009c38

08002f60 <TXSwitch>:
{
 8002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f62:	2300      	movs	r3, #0
{
 8002f64:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f66:	e9cd 3300 	strd	r3, r3, [sp]
 8002f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f6e:	9304      	str	r3, [sp, #16]
	if (Status)
 8002f70:	b378      	cbz	r0, 8002fd2 <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 8002f72:	4d27      	ldr	r5, [pc, #156]	; (8003010 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 8002f74:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8002f76:	4c27      	ldr	r4, [pc, #156]	; (8003014 <TXSwitch+0xb4>)
 8002f78:	ed95 0a00 	vldr	s0, [r5]
 8002f7c:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 8002f82:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8002f86:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d11c      	bne.n	8002fc8 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002f96:	2502      	movs	r5, #2
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f98:	2600      	movs	r6, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9a:	4669      	mov	r1, sp
 8002f9c:	481f      	ldr	r0, [pc, #124]	; (800301c <TXSwitch+0xbc>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f9e:	9604      	str	r6, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fa4:	e9cd 4500 	strd	r4, r5, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa8:	f004 f8e6 	bl	8007178 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8002fac:	2201      	movs	r2, #1
 8002fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fb2:	481b      	ldr	r0, [pc, #108]	; (8003020 <TXSwitch+0xc0>)
 8002fb4:	f004 fa1a 	bl	80073ec <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fbe:	4819      	ldr	r0, [pc, #100]	; (8003024 <TXSwitch+0xc4>)
 8002fc0:	f004 fa14 	bl	80073ec <HAL_GPIO_WritePin>
}
 8002fc4:	b007      	add	sp, #28
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SetTXPLL(LOfreq);
 8002fc8:	f7ff fbce 	bl	8002768 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	e7dd      	b.n	8002f8e <TXSwitch+0x2e>
 8002fd2:	4604      	mov	r4, r0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002fdc:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fde:	4669      	mov	r1, sp
 8002fe0:	480e      	ldr	r0, [pc, #56]	; (800301c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fe2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fe6:	e9cd 6700 	strd	r6, r7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fea:	f004 f8c5 	bl	8007178 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002fee:	4622      	mov	r2, r4
 8002ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ff4:	480a      	ldr	r0, [pc, #40]	; (8003020 <TXSwitch+0xc0>)
 8002ff6:	f004 f9f9 	bl	80073ec <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003000:	4808      	ldr	r0, [pc, #32]	; (8003024 <TXSwitch+0xc4>)
 8003002:	f004 f9f3 	bl	80073ec <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <TXSwitch+0xb8>)
 8003008:	701c      	strb	r4, [r3, #0]
}
 800300a:	b007      	add	sp, #28
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300e:	bf00      	nop
 8003010:	2400ae00 	.word	0x2400ae00
 8003014:	24000654 	.word	0x24000654
 8003018:	24009d8c 	.word	0x24009d8c
 800301c:	58020800 	.word	0x58020800
 8003020:	58020c00 	.word	0x58020c00
 8003024:	58020400 	.word	0x58020400

08003028 <CarrierEnable>:
{
 8003028:	b510      	push	{r4, lr}
	if (Status)
 800302a:	b1b0      	cbz	r0, 800305a <CarrierEnable+0x32>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003032:	4815      	ldr	r0, [pc, #84]	; (8003088 <CarrierEnable+0x60>)
 8003034:	f004 f9da 	bl	80073ec <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1024); // TX gate bias
 8003038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303c:	2200      	movs	r2, #0
 800303e:	2110      	movs	r1, #16
 8003040:	4812      	ldr	r0, [pc, #72]	; (800308c <CarrierEnable+0x64>)
 8003042:	f002 fcab 	bl	800599c <HAL_DAC_SetValue>
		TXCarrierEnabled = 1;
 8003046:	2201      	movs	r2, #1
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <CarrierEnable+0x68>)
		LED_GREEN_ON;
 800304a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304e:	4811      	ldr	r0, [pc, #68]	; (8003094 <CarrierEnable+0x6c>)
		TXCarrierEnabled = 1;
 8003050:	701a      	strb	r2, [r3, #0]
	}
}
 8003052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LED_GREEN_ON;
 8003056:	f004 b9c9 	b.w	80073ec <HAL_GPIO_WritePin>
 800305a:	4604      	mov	r4, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <CarrierEnable+0x60>)
 8003064:	f004 f9c2 	bl	80073ec <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8003068:	4623      	mov	r3, r4
 800306a:	4622      	mov	r2, r4
 800306c:	2110      	movs	r1, #16
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <CarrierEnable+0x64>)
 8003070:	f002 fc94 	bl	800599c <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <CarrierEnable+0x68>)
		LED_GREEN_OFF;
 8003076:	4622      	mov	r2, r4
 8003078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		TXCarrierEnabled = 0;
 800307c:	701c      	strb	r4, [r3, #0]
		LED_GREEN_OFF;
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <CarrierEnable+0x6c>)
}
 8003080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LED_GREEN_OFF;
 8003084:	f004 b9b2 	b.w	80073ec <HAL_GPIO_WritePin>
 8003088:	58020c00 	.word	0x58020c00
 800308c:	24003e40 	.word	0x24003e40
 8003090:	24008ae0 	.word	0x24008ae0
 8003094:	58020400 	.word	0x58020400

08003098 <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8003098:	4e09      	ldr	r6, [pc, #36]	; (80030c0 <Error_Handler+0x28>)
{
 800309a:	4d0a      	ldr	r5, [pc, #40]	; (80030c4 <Error_Handler+0x2c>)
 800309c:	4c0a      	ldr	r4, [pc, #40]	; (80030c8 <Error_Handler+0x30>)
 800309e:	b508      	push	{r3, lr}
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	fb05 f303 	mul.w	r3, r5, r3
 80030a6:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80030aa:	d200      	bcs.n	80030ae <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80030ac:	e7fe      	b.n	80030ac <Error_Handler+0x14>
			LED_switch();
 80030ae:	f7fe f809 	bl	80010c4 <LED_switch>
 80030b2:	6833      	ldr	r3, [r6, #0]
 80030b4:	fb05 f303 	mul.w	r3, r5, r3
 80030b8:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80030bc:	d2f7      	bcs.n	80030ae <Error_Handler+0x16>
 80030be:	e7f5      	b.n	80030ac <Error_Handler+0x14>
 80030c0:	2400ae04 	.word	0x2400ae04
 80030c4:	c28f5c29 	.word	0xc28f5c29
 80030c8:	051eb851 	.word	0x051eb851

080030cc <SystemClock_Config_For_OC>:
{
 80030cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d0:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030d2:	224c      	movs	r2, #76	; 0x4c
 80030d4:	2100      	movs	r1, #0
 80030d6:	a80a      	add	r0, sp, #40	; 0x28
 80030d8:	f00b fbc6 	bl	800e868 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030dc:	2220      	movs	r2, #32
 80030de:	2100      	movs	r1, #0
 80030e0:	a802      	add	r0, sp, #8
 80030e2:	f00b fbc1 	bl	800e868 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e6:	22bc      	movs	r2, #188	; 0xbc
 80030e8:	2100      	movs	r1, #0
 80030ea:	a81e      	add	r0, sp, #120	; 0x78
 80030ec:	f00b fbbc 	bl	800e868 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80030f0:	2002      	movs	r0, #2
 80030f2:	f004 ff83 	bl	8007ffc <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80030f6:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <SystemClock_Config_For_OC+0x15c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	494c      	ldr	r1, [pc, #304]	; (800322c <SystemClock_Config_For_OC+0x160>)
 80030fc:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030fe:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003100:	6998      	ldr	r0, [r3, #24]
 8003102:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8003106:	6198      	str	r0, [r3, #24]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003118:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003122:	6993      	ldr	r3, [r2, #24]
 8003124:	049b      	lsls	r3, r3, #18
 8003126:	d5fc      	bpl.n	8003122 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003128:	4841      	ldr	r0, [pc, #260]	; (8003230 <SystemClock_Config_For_OC+0x164>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800312a:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800312c:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800312e:	2501      	movs	r5, #1
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003130:	6a83      	ldr	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 480;
 8003132:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003136:	2100      	movs	r1, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003138:	2621      	movs	r6, #33	; 0x21
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800313a:	f023 0303 	bic.w	r3, r3, #3
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800313e:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003142:	4313      	orrs	r3, r2
 8003144:	6283      	str	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003146:	230a      	movs	r3, #10
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003148:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800314a:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLR = 2;
 800314c:	9219      	str	r2, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 10;
 800314e:	9315      	str	r3, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8003150:	4b38      	ldr	r3, [pc, #224]	; (8003234 <SystemClock_Config_For_OC+0x168>)
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003152:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 480;
 8003154:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003158:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800315a:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800315c:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8003160:	4a35      	ldr	r2, [pc, #212]	; (8003238 <SystemClock_Config_For_OC+0x16c>)
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003162:	e9cd 111b 	strd	r1, r1, [sp, #108]	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003166:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800316a:	601a      	str	r2, [r3, #0]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800316c:	f004 fff8 	bl	8008160 <HAL_RCC_OscConfig>
 8003170:	2800      	cmp	r0, #0
 8003172:	d157      	bne.n	8003224 <SystemClock_Config_For_OC+0x158>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003174:	263f      	movs	r6, #63	; 0x3f
 8003176:	2703      	movs	r7, #3
 8003178:	2200      	movs	r2, #0
 800317a:	2308      	movs	r3, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800317c:	4621      	mov	r1, r4
 800317e:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003180:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003184:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003188:	2640      	movs	r6, #64	; 0x40
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003190:	2740      	movs	r7, #64	; 0x40
 8003192:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003196:	e9cd 6706 	strd	r6, r7, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800319a:	f005 fbc3 	bl	8008924 <HAL_RCC_ClockConfig>
 800319e:	4603      	mov	r3, r0
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d13f      	bne.n	8003224 <SystemClock_Config_For_OC+0x158>
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031a4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80031a8:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031aa:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80031ac:	2318      	movs	r3, #24
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031ae:	923f      	str	r2, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80031b0:	2226      	movs	r2, #38	; 0x26
 80031b2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800323c <SystemClock_Config_For_OC+0x170>
 80031b6:	f04f 0904 	mov.w	r9, #4
 80031ba:	2602      	movs	r6, #2
 80031bc:	2702      	movs	r7, #2
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80031be:	f44f 6480 	mov.w	r4, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80031c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c6:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80031c8:	9444      	str	r4, [sp, #272]	; 0x110
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80031ca:	9146      	str	r1, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80031cc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	2300      	movs	r3, #0
 80031d4:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	2302      	movs	r3, #2
 80031dc:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 80031e0:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 80031e4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 80031e8:	f04f 0800 	mov.w	r8, #0
 80031ec:	f04f 0905 	mov.w	r9, #5
 80031f0:	2608      	movs	r6, #8
 80031f2:	2705      	movs	r7, #5
 80031f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f8:	2300      	movs	r3, #0
 80031fa:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 80031fe:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8003202:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003206:	f005 fe7f 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
 800320a:	b958      	cbnz	r0, 8003224 <SystemClock_Config_For_OC+0x158>
	HAL_PWREx_EnableUSBVoltageDetector();
 800320c:	f004 ff1c 	bl	8008048 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8003210:	4628      	mov	r0, r5
 8003212:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003216:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800321a:	f005 fa87 	bl	800872c <HAL_RCC_MCOConfig>
}
 800321e:	b04f      	add	sp, #316	; 0x13c
 8003220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Error_Handler();
 8003224:	f7ff ff38 	bl	8003098 <Error_Handler>
 8003228:	58024800 	.word	0x58024800
 800322c:	58000400 	.word	0x58000400
 8003230:	58024400 	.word	0x58024400
 8003234:	24009398 	.word	0x24009398
 8003238:	4bbebbc7 	.word	0x4bbebbc7
 800323c:	000c0042 	.word	0x000c0042

08003240 <MX_TIM6_Init_Custom_Rate>:
{
 8003240:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003244:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8003246:	4c10      	ldr	r4, [pc, #64]	; (8003288 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8003248:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 800324a:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800324e:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8003250:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003252:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8003254:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003256:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8003258:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325a:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325c:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003262:	f006 ff3f 	bl	800a0e4 <HAL_TIM_Base_Init>
 8003266:	b950      	cbnz	r0, 800327e <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003268:	4603      	mov	r3, r0
 800326a:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800326c:	a901      	add	r1, sp, #4
 800326e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003270:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003272:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003274:	f007 fb64 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 8003278:	b908      	cbnz	r0, 800327e <MX_TIM6_Init_Custom_Rate+0x3e>
}
 800327a:	b004      	add	sp, #16
 800327c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800327e:	f7ff ff0b 	bl	8003098 <Error_Handler>
 8003282:	bf00      	nop
 8003284:	40001000 	.word	0x40001000
 8003288:	24009d90 	.word	0x24009d90
 800328c:	00000000 	.word	0x00000000

08003290 <main>:
{
 8003290:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003294:	b0cf      	sub	sp, #316	; 0x13c
  HAL_Init();
 8003296:	f001 f889 	bl	80043ac <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800329a:	4bd5      	ldr	r3, [pc, #852]	; (80035f0 <main+0x360>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80032a2:	d111      	bne.n	80032c8 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80032a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032a8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80032ac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80032b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032b4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032be:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80032c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032c4:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	4dca      	ldr	r5, [pc, #808]	; (80035f4 <main+0x364>)
	SystemClock_Config_For_OC();
 80032cc:	f7ff fefe 	bl	80030cc <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always on an Android phone) does not initialize
 80032d0:	2014      	movs	r0, #20
 80032d2:	f001 f8ad 	bl	8004430 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d6:	9448      	str	r4, [sp, #288]	; 0x120
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d8:	2601      	movs	r6, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032da:	f04f 0a08 	mov.w	sl, #8
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80032de:	4622      	mov	r2, r4
 80032e0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80032e4:	48c4      	ldr	r0, [pc, #784]	; (80035f8 <main+0x368>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80032e6:	f04f 0800 	mov.w	r8, #0
 80032ea:	f04f 0900 	mov.w	r9, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80032ee:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f2:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f6:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 80032fa:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800330a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	9305      	str	r3, [sp, #20]
 8003314:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003316:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800331a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003322:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	9306      	str	r3, [sp, #24]
 800332c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003332:	4333      	orrs	r3, r6
 8003334:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003338:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800333c:	4033      	ands	r3, r6
 800333e:	9307      	str	r3, [sp, #28]
 8003340:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800334e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	9308      	str	r3, [sp, #32]
 8003358:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800335e:	ea43 030a 	orr.w	r3, r3, sl
 8003362:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003366:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800336a:	ea03 030a 	and.w	r3, r3, sl
 800336e:	9309      	str	r3, [sp, #36]	; 0x24
 8003370:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8003372:	f004 f83b 	bl	80073ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8003376:	4622      	mov	r2, r4
 8003378:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800337c:	489f      	ldr	r0, [pc, #636]	; (80035fc <main+0x36c>)
 800337e:	f004 f835 	bl	80073ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003382:	4622      	mov	r2, r4
 8003384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003388:	489d      	ldr	r0, [pc, #628]	; (8003600 <main+0x370>)
 800338a:	f004 f82f 	bl	80073ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 800338e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003392:	2300      	movs	r3, #0
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8003394:	a944      	add	r1, sp, #272	; 0x110
 8003396:	489b      	ldr	r0, [pc, #620]	; (8003604 <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003398:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 800339a:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 800339e:	f003 feeb 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80033a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80033aa:	a944      	add	r1, sp, #272	; 0x110
 80033ac:	4895      	ldr	r0, [pc, #596]	; (8003604 <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ae:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80033b0:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f003 fee0 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80033b8:	22c0      	movs	r2, #192	; 0xc0
 80033ba:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	a944      	add	r1, sp, #272	; 0x110
 80033be:	4890      	ldr	r0, [pc, #576]	; (8003600 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c0:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80033c2:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f003 fed7 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80033ca:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80033ce:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d0:	a944      	add	r1, sp, #272	; 0x110
 80033d2:	4889      	ldr	r0, [pc, #548]	; (80035f8 <main+0x368>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80033d4:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 80033d8:	e9cd 8946 	strd	r8, r9, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033dc:	f003 fecc 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80033e0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80033e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e6:	a944      	add	r1, sp, #272	; 0x110
 80033e8:	4884      	ldr	r0, [pc, #528]	; (80035fc <main+0x36c>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80033ea:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 80033ee:	2202      	movs	r2, #2
 80033f0:	2300      	movs	r3, #0
 80033f2:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f6:	f003 febf 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003400:	a944      	add	r1, sp, #272	; 0x110
 8003402:	4880      	ldr	r0, [pc, #512]	; (8003604 <main+0x374>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003404:	9448      	str	r4, [sp, #288]	; 0x120
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003406:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 800340a:	2200      	movs	r2, #0
 800340c:	2303      	movs	r3, #3
 800340e:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003412:	f003 feb1 	bl	8007178 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003416:	2301      	movs	r3, #1
 8003418:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800341c:	a944      	add	r1, sp, #272	; 0x110
 800341e:	4878      	ldr	r0, [pc, #480]	; (8003600 <main+0x370>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003420:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8003424:	e9cd 8946 	strd	r8, r9, [sp, #280]	; 0x118
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003428:	f003 fea6 	bl	8007178 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800342c:	4622      	mov	r2, r4
 800342e:	2104      	movs	r1, #4
 8003430:	2028      	movs	r0, #40	; 0x28
 8003432:	f002 f981 	bl	8005738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003436:	2028      	movs	r0, #40	; 0x28
 8003438:	f002 f9b8 	bl	80057ac <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800343c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003440:	4622      	mov	r2, r4
 8003442:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003444:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003446:	200b      	movs	r0, #11
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003448:	f44f 7880 	mov.w	r8, #256	; 0x100
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800344c:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003450:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8003454:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8003458:	4d6b      	ldr	r5, [pc, #428]	; (8003608 <main+0x378>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800345a:	4033      	ands	r3, r6
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003460:	f002 f96a 	bl	8005738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003464:	200b      	movs	r0, #11
 8003466:	f002 f9a1 	bl	80057ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800346a:	4622      	mov	r2, r4
 800346c:	2102      	movs	r1, #2
 800346e:	200c      	movs	r0, #12
 8003470:	f002 f962 	bl	8005738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003474:	200c      	movs	r0, #12
 8003476:	f002 f999 	bl	80057ac <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800347a:	4a64      	ldr	r2, [pc, #400]	; (800360c <main+0x37c>)
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800347c:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800347e:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003480:	f8a5 8014 	strh.w	r8, [r5, #20]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003484:	9424      	str	r4, [sp, #144]	; 0x90
  ADC_ChannelConfTypeDef sConfig = {0};
 8003486:	9432      	str	r4, [sp, #200]	; 0xc8
  ADC_MultiModeTypeDef multimode = {0};
 8003488:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800348a:	9429      	str	r4, [sp, #164]	; 0xa4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800348c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800348e:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003490:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003492:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003494:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Instance = ADC1;
 8003498:	602a      	str	r2, [r5, #0]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800349a:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800349c:	f8c5 b010 	str.w	fp, [r5, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80034a0:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80034a4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80034a8:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 80034ac:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
  ADC_ChannelConfTypeDef sConfig = {0};
 80034b0:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
 80034b4:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
 80034b8:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034bc:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034c0:	e9c5 7a01 	strd	r7, sl, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034c4:	f001 fed6 	bl	8005274 <HAL_ADC_Init>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	f040 82ed 	bne.w	8003aa8 <main+0x818>
  multimode.Mode = ADC_DUALMODE_INTERL;
 80034ce:	2207      	movs	r2, #7
 80034d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034d4:	a90a      	add	r1, sp, #40	; 0x28
 80034d6:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80034d8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 80034dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034e0:	f002 f8ae 	bl	8005640 <HAL_ADCEx_MultiModeConfigChannel>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	f040 82df 	bne.w	8003aa8 <main+0x818>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80034ea:	4a49      	ldr	r2, [pc, #292]	; (8003610 <main+0x380>)
 80034ec:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80034f0:	4c48      	ldr	r4, [pc, #288]	; (8003614 <main+0x384>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80034f2:	a924      	add	r1, sp, #144	; 0x90
 80034f4:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 80034f6:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80034fa:	9426      	str	r4, [sp, #152]	; 0x98
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80034fc:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  AnalogWDGConfig.HighThreshold = 4094;
 8003500:	2301      	movs	r3, #1
 8003502:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003506:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800350a:	f001 fb91 	bl	8004c30 <HAL_ADC_AnalogWDGConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2800      	cmp	r0, #0
 8003512:	f040 82c9 	bne.w	8003aa8 <main+0x818>
  sConfig.Channel = ADC_CHANNEL_5;
 8003516:	2200      	movs	r2, #0
  sConfig.OffsetSignedSaturation = DISABLE;
 8003518:	f88d 30e1 	strb.w	r3, [sp, #225]	; 0xe1
  sConfig.Channel = ADC_CHANNEL_5;
 800351c:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003520:	a932      	add	r1, sp, #200	; 0xc8
 8003522:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8003524:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8003528:	a32f      	add	r3, pc, #188	; (adr r3, 80035e8 <main+0x358>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8003532:	2300      	movs	r3, #0
 8003534:	2204      	movs	r2, #4
 8003536:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800353a:	f001 f949 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800353e:	4603      	mov	r3, r0
 8003540:	2800      	cmp	r0, #0
 8003542:	f040 82b1 	bne.w	8003aa8 <main+0x818>
  hadc2.Instance = ADC2;
 8003546:	4d34      	ldr	r5, [pc, #208]	; (8003618 <main+0x388>)
 8003548:	4a34      	ldr	r2, [pc, #208]	; (800361c <main+0x38c>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800354a:	901e      	str	r0, [sp, #120]	; 0x78
  ADC_ChannelConfTypeDef sConfig = {0};
 800354c:	902a      	str	r0, [sp, #168]	; 0xa8
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800354e:	4628      	mov	r0, r5
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003550:	f8a5 8014 	strh.w	r8, [r5, #20]
  hadc2.Init.NbrOfConversion = 1;
 8003554:	61ae      	str	r6, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003556:	772b      	strb	r3, [r5, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003558:	636b      	str	r3, [r5, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800355a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hadc2.Instance = ADC2;
 800355e:	602a      	str	r2, [r5, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003560:	9323      	str	r3, [sp, #140]	; 0x8c
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003562:	e9c5 7a01 	strd	r7, sl, [r5, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003566:	e9c5 3b03 	strd	r3, fp, [r5, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800356a:	e9c5 390b 	strd	r3, r9, [r5, #44]	; 0x2c
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800356e:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8003572:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  ADC_ChannelConfTypeDef sConfig = {0};
 8003576:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 800357a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 800357e:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003582:	f001 fe77 	bl	8005274 <HAL_ADC_Init>
 8003586:	2800      	cmp	r0, #0
 8003588:	f040 828e 	bne.w	8003aa8 <main+0x818>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800358c:	4a20      	ldr	r2, [pc, #128]	; (8003610 <main+0x380>)
 800358e:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003592:	a91e      	add	r1, sp, #120	; 0x78
 8003594:	4628      	mov	r0, r5
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003596:	9420      	str	r4, [sp, #128]	; 0x80
  AnalogWDGConfig.ITMode = ENABLE;
 8003598:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800359c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  AnalogWDGConfig.HighThreshold = 4094;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035a6:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80035aa:	f001 fb41 	bl	8004c30 <HAL_ADC_AnalogWDGConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	f040 8279 	bne.w	8003aa8 <main+0x818>
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b6:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
  sConfig.Channel = ADC_CHANNEL_5;
 80035ba:	2200      	movs	r2, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035bc:	a92a      	add	r1, sp, #168	; 0xa8
 80035be:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 80035c0:	a409      	add	r4, pc, #36	; (adr r4, 80035e8 <main+0x358>)
 80035c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035c6:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8
 80035ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80035ce:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 80035d2:	2204      	movs	r2, #4
 80035d4:	2300      	movs	r3, #0
 80035d6:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035da:	f001 f8f9 	bl	80047d0 <HAL_ADC_ConfigChannel>
 80035de:	4601      	mov	r1, r0
 80035e0:	2800      	cmp	r0, #0
 80035e2:	f040 8261 	bne.w	8003aa8 <main+0x818>
 80035e6:	e01b      	b.n	8003620 <main+0x390>
 80035e8:	14f00020 	.word	0x14f00020
 80035ec:	00000006 	.word	0x00000006
 80035f0:	e000ed00 	.word	0xe000ed00
 80035f4:	58024400 	.word	0x58024400
 80035f8:	58020400 	.word	0x58020400
 80035fc:	58020c00 	.word	0x58020c00
 8003600:	58020000 	.word	0x58020000
 8003604:	58020800 	.word	0x58020800
 8003608:	24008ae4 	.word	0x24008ae4
 800360c:	40022000 	.word	0x40022000
 8003610:	7dc00000 	.word	0x7dc00000
 8003614:	14f00020 	.word	0x14f00020
 8003618:	24003ee4 	.word	0x24003ee4
 800361c:	40022100 	.word	0x40022100
  DAC_ChannelConfTypeDef sConfig = {0};
 8003620:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8003622:	4cc0      	ldr	r4, [pc, #768]	; (8003924 <main+0x694>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8003624:	a844      	add	r0, sp, #272	; 0x110
 8003626:	f00b f91f 	bl	800e868 <memset>
  hdac1.Instance = DAC1;
 800362a:	4bbf      	ldr	r3, [pc, #764]	; (8003928 <main+0x698>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800362c:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 800362e:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003630:	f002 f8e2 	bl	80057f8 <HAL_DAC_Init>
 8003634:	4602      	mov	r2, r0
 8003636:	2800      	cmp	r0, #0
 8003638:	f040 8236 	bne.w	8003aa8 <main+0x818>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800363c:	2000      	movs	r0, #0
 800363e:	2116      	movs	r1, #22
 8003640:	2600      	movs	r6, #0
 8003642:	2701      	movs	r7, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003644:	9248      	str	r2, [sp, #288]	; 0x120
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003646:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800364a:	a944      	add	r1, sp, #272	; 0x110
 800364c:	4620      	mov	r0, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800364e:	e9cd 6746 	strd	r6, r7, [sp, #280]	; 0x118
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003652:	f002 fa0d 	bl	8005a70 <HAL_DAC_ConfigChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 8225 	bne.w	8003aa8 <main+0x818>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800365e:	a944      	add	r1, sp, #272	; 0x110
 8003660:	4620      	mov	r0, r4
 8003662:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003664:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003666:	f002 fa03 	bl	8005a70 <HAL_DAC_ConfigChannel>
 800366a:	2800      	cmp	r0, #0
 800366c:	f040 821c 	bne.w	8003aa8 <main+0x818>
  hlptim2.Instance = LPTIM2;
 8003670:	48ae      	ldr	r0, [pc, #696]	; (800392c <main+0x69c>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003672:	2300      	movs	r3, #0
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003674:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hlptim2.Instance = LPTIM2;
 8003678:	49ad      	ldr	r1, [pc, #692]	; (8003930 <main+0x6a0>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800367a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 800367e:	6001      	str	r1, [r0, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003680:	6282      	str	r2, [r0, #40]	; 0x28
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003682:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003684:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003688:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800368c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8003690:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8003694:	f003 febc 	bl	8007410 <HAL_LPTIM_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	f040 8204 	bne.w	8003aa8 <main+0x818>
  htim6.Instance = TIM6;
 80036a0:	4ca4      	ldr	r4, [pc, #656]	; (8003934 <main+0x6a4>)
  htim6.Init.Period = 8191;
 80036a2:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Instance = TIM6;
 80036a6:	48a4      	ldr	r0, [pc, #656]	; (8003938 <main+0x6a8>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036a8:	2280      	movs	r2, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036aa:	9317      	str	r3, [sp, #92]	; 0x5c
  htim6.Instance = TIM6;
 80036ac:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036ae:	4620      	mov	r0, r4
  htim6.Init.Period = 8191;
 80036b0:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036b2:	61a2      	str	r2, [r4, #24]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036bc:	f006 fd12 	bl	800a0e4 <HAL_TIM_Base_Init>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f040 81f0 	bne.w	8003aa8 <main+0x818>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036c8:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036ca:	a917      	add	r1, sp, #92	; 0x5c
 80036cc:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ce:	9319      	str	r3, [sp, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036d0:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036d2:	f007 f935 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2800      	cmp	r0, #0
 80036da:	f040 81e5 	bne.w	8003aa8 <main+0x818>
  huart3.Instance = USART3;
 80036de:	4c97      	ldr	r4, [pc, #604]	; (800393c <main+0x6ac>)
  huart3.Init.BaudRate = 115200;
 80036e0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036e4:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 80036e6:	4d96      	ldr	r5, [pc, #600]	; (8003940 <main+0x6b0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036e8:	60a0      	str	r0, [r4, #8]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036ea:	4620      	mov	r0, r4
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ec:	62a3      	str	r3, [r4, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036ee:	6162      	str	r2, [r4, #20]
  huart3.Init.BaudRate = 115200;
 80036f0:	e9c4 5100 	strd	r5, r1, [r4]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036f4:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036fc:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003700:	f007 feb8 	bl	800b474 <HAL_UART_Init>
 8003704:	4601      	mov	r1, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	f040 81ce 	bne.w	8003aa8 <main+0x818>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800370c:	4620      	mov	r0, r4
 800370e:	f007 ff41 	bl	800b594 <HAL_UARTEx_SetTxFifoThreshold>
 8003712:	4601      	mov	r1, r0
 8003714:	2800      	cmp	r0, #0
 8003716:	f040 81c7 	bne.w	8003aa8 <main+0x818>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800371a:	4620      	mov	r0, r4
 800371c:	f007 ff78 	bl	800b610 <HAL_UARTEx_SetRxFifoThreshold>
 8003720:	2800      	cmp	r0, #0
 8003722:	f040 81c1 	bne.w	8003aa8 <main+0x818>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003726:	4620      	mov	r0, r4
 8003728:	f007 ff16 	bl	800b558 <HAL_UARTEx_DisableFifoMode>
 800372c:	4604      	mov	r4, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	f040 81ba 	bne.w	8003aa8 <main+0x818>
  MX_USB_DEVICE_Init();
 8003734:	f009 fc3c 	bl	800cfb0 <MX_USB_DEVICE_Init>
  htim4.Instance = TIM4;
 8003738:	4d82      	ldr	r5, [pc, #520]	; (8003944 <main+0x6b4>)
 800373a:	4b83      	ldr	r3, [pc, #524]	; (8003948 <main+0x6b8>)
  sConfig.IC2Filter = 8;
 800373c:	2108      	movs	r1, #8
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800373e:	2201      	movs	r2, #1
  htim4.Init.Period = 65535;
 8003740:	60ee      	str	r6, [r5, #12]
  htim4.Instance = TIM4;
 8003742:	602b      	str	r3, [r5, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003744:	f04f 0801 	mov.w	r8, #1
 8003748:	2300      	movs	r3, #0
 800374a:	f04f 0902 	mov.w	r9, #2
 800374e:	2608      	movs	r6, #8
 8003750:	2702      	movs	r7, #2
  sConfig.IC2Filter = 8;
 8003752:	9142      	str	r1, [sp, #264]	; 0x108
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003754:	4628      	mov	r0, r5
 8003756:	a93a      	add	r1, sp, #232	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003758:	9414      	str	r4, [sp, #80]	; 0x50
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375c:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800375e:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
 8003762:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003766:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800376a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800376e:	e9cd 893a 	strd	r8, r9, [sp, #232]	; 0xe8
 8003772:	e9cd 673e 	strd	r6, r7, [sp, #248]	; 0xf8
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003776:	f006 fe17 	bl	800a3a8 <HAL_TIM_Encoder_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2800      	cmp	r0, #0
 800377e:	f040 8193 	bne.w	8003aa8 <main+0x818>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003782:	a914      	add	r1, sp, #80	; 0x50
 8003784:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003786:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003788:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800378a:	f007 f8d9 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 800378e:	4603      	mov	r3, r0
 8003790:	2800      	cmp	r0, #0
 8003792:	f040 8189 	bne.w	8003aa8 <main+0x818>
  htim7.Instance = TIM7;
 8003796:	486d      	ldr	r0, [pc, #436]	; (800394c <main+0x6bc>)
  htim7.Init.Period = 15000;
 8003798:	f643 2298 	movw	r2, #15000	; 0x3a98
  htim7.Instance = TIM7;
 800379c:	496c      	ldr	r1, [pc, #432]	; (8003950 <main+0x6c0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379e:	9311      	str	r3, [sp, #68]	; 0x44
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a0:	6183      	str	r3, [r0, #24]
  htim7.Instance = TIM7;
 80037a2:	6001      	str	r1, [r0, #0]
  htim7.Init.Period = 15000;
 80037a4:	60c2      	str	r2, [r0, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037aa:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037ae:	f006 fc99 	bl	800a0e4 <HAL_TIM_Base_Init>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	f040 8178 	bne.w	8003aa8 <main+0x818>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037ba:	a911      	add	r1, sp, #68	; 0x44
 80037bc:	4863      	ldr	r0, [pc, #396]	; (800394c <main+0x6bc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037be:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037c2:	f007 f8bd 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2800      	cmp	r0, #0
 80037ca:	f040 816d 	bne.w	8003aa8 <main+0x818>
  htim2.Instance = TIM2;
 80037ce:	4c61      	ldr	r4, [pc, #388]	; (8003954 <main+0x6c4>)
 80037d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 15000;
 80037d4:	f643 2298 	movw	r2, #15000	; 0x3a98
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d8:	901a      	str	r0, [sp, #104]	; 0x68
  htim2.Init.Prescaler = 0;
 80037da:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037dc:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e0:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e2:	61a3      	str	r3, [r4, #24]
  htim2.Instance = TIM2;
 80037e4:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 15000;
 80037e6:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e8:	931d      	str	r3, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ea:	9310      	str	r3, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ec:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037f4:	f006 fc76 	bl	800a0e4 <HAL_TIM_Base_Init>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f040 8155 	bne.w	8003aa8 <main+0x818>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003802:	a91a      	add	r1, sp, #104	; 0x68
 8003804:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003806:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003808:	f006 ff0e 	bl	800a628 <HAL_TIM_ConfigClockSource>
 800380c:	4603      	mov	r3, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	f040 814a 	bne.w	8003aa8 <main+0x818>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003814:	4620      	mov	r0, r4
 8003816:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003818:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800381c:	f007 f890 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 8003820:	2800      	cmp	r0, #0
 8003822:	f040 8141 	bne.w	8003aa8 <main+0x818>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003826:	484c      	ldr	r0, [pc, #304]	; (8003958 <main+0x6c8>)
 8003828:	6943      	ldr	r3, [r0, #20]
 800382a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800382e:	d124      	bne.n	800387a <main+0x5ea>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003830:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003834:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003838:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800383c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003840:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003844:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003848:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800384a:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800384e:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003850:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8003854:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003856:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	d1f8      	bne.n	8003850 <main+0x5c0>
    } while(sets-- != 0U);
 800385e:	3c20      	subs	r4, #32
 8003860:	f114 0f20 	cmn.w	r4, #32
 8003864:	d1f1      	bne.n	800384a <main+0x5ba>
 8003866:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800386a:	6943      	ldr	r3, [r0, #20]
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6143      	str	r3, [r0, #20]
 8003872:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003876:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 800387a:	f7ff fce1 	bl	8003240 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800387e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003886:	4835      	ldr	r0, [pc, #212]	; (800395c <main+0x6cc>)
 8003888:	f001 fe00 	bl	800548c <HAL_ADCEx_Calibration_Start>
 800388c:	2800      	cmp	r0, #0
 800388e:	f040 810b 	bne.w	8003aa8 <main+0x818>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8003892:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003896:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389a:	4831      	ldr	r0, [pc, #196]	; (8003960 <main+0x6d0>)
 800389c:	f001 fdf6 	bl	800548c <HAL_ADCEx_Calibration_Start>
 80038a0:	4604      	mov	r4, r0
 80038a2:	2800      	cmp	r0, #0
 80038a4:	f040 8100 	bne.w	8003aa8 <main+0x818>
	HAL_Delay(1);
 80038a8:	2001      	movs	r0, #1
	AMindex  = LSBindex = 1;
 80038aa:	2501      	movs	r5, #1
	HAL_Delay(1);
 80038ac:	f000 fdc0 	bl	8004430 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80038b0:	4621      	mov	r1, r4
 80038b2:	4824      	ldr	r0, [pc, #144]	; (8003944 <main+0x6b4>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80038b4:	f44f 6600 	mov.w	r6, #2048	; 0x800
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80038b8:	f006 fe5c 	bl	800a574 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 80038bc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80039a4 <main+0x714>
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <main+0x6d4>)
	LED_GREEN_ON;
 80038c2:	462a      	mov	r2, r5
 80038c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c8:	4827      	ldr	r0, [pc, #156]	; (8003968 <main+0x6d8>)
	volume= 0.1;
 80038ca:	f8c3 8000 	str.w	r8, [r3]
	LED_GREEN_ON;
 80038ce:	f003 fd8d 	bl	80073ec <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 80038d2:	4622      	mov	r2, r4
 80038d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d8:	4823      	ldr	r0, [pc, #140]	; (8003968 <main+0x6d8>)
 80038da:	f003 fd87 	bl	80073ec <HAL_GPIO_WritePin>
	SetFstep(2);
 80038de:	2002      	movs	r0, #2
 80038e0:	f7fd fafa 	bl	8000ed8 <SetFstep>
	cwpitch = CWPITCH;
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <main+0x6dc>)
 80038e6:	4922      	ldr	r1, [pc, #136]	; (8003970 <main+0x6e0>)
	bw[AM]   = bw[LSB]  = Wide;
 80038e8:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80038ec:	4f21      	ldr	r7, [pc, #132]	; (8003974 <main+0x6e4>)
	CarrierEnable(0);
 80038ee:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 80038f0:	6019      	str	r1, [r3, #0]
	os_time = 0;
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <main+0x6e8>)
	meanavg = 0.f;
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <main+0x6ec>)
	os_time = 0;
 80038f6:	600c      	str	r4, [r1, #0]
	meanavg = 0.f;
 80038f8:	2100      	movs	r1, #0
 80038fa:	6019      	str	r1, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <main+0x6f0>)
 80038fe:	4921      	ldr	r1, [pc, #132]	; (8003984 <main+0x6f4>)
 8003900:	6019      	str	r1, [r3, #0]
	AMindex  = LSBindex = 1;
 8003902:	4b21      	ldr	r3, [pc, #132]	; (8003988 <main+0x6f8>)
	Muted   = false;
 8003904:	4921      	ldr	r1, [pc, #132]	; (800398c <main+0x6fc>)
	AMindex  = LSBindex = 1;
 8003906:	801d      	strh	r5, [r3, #0]
	USBindex = CWindex  = 1;
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <main+0x700>)
	Muted   = false;
 800390a:	700c      	strb	r4, [r1, #0]
	USBindex = CWindex  = 1;
 800390c:	801d      	strh	r5, [r3, #0]
	AMindex  = LSBindex = 1;
 800390e:	4921      	ldr	r1, [pc, #132]	; (8003994 <main+0x704>)
	bw[AM]   = bw[LSB]  = Wide;
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <main+0x708>)
	AMindex  = LSBindex = 1;
 8003912:	800d      	strh	r5, [r1, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003914:	601a      	str	r2, [r3, #0]
	agc[AM]  = agc[LSB] = Slow;
 8003916:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
	USBindex = CWindex  = 1;
 800391a:	4920      	ldr	r1, [pc, #128]	; (800399c <main+0x70c>)
	agc[AM]  = agc[LSB] = Slow;
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <main+0x710>)
	USBindex = CWindex  = 1;
 800391e:	800d      	strh	r5, [r1, #0]
	agc[AM]  = agc[LSB] = Slow;
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e041      	b.n	80039a8 <main+0x718>
 8003924:	24003e40 	.word	0x24003e40
 8003928:	40007400 	.word	0x40007400
 800392c:	24008b54 	.word	0x24008b54
 8003930:	58002400 	.word	0x58002400
 8003934:	24009d90 	.word	0x24009d90
 8003938:	40001000 	.word	0x40001000
 800393c:	24003e54 	.word	0x24003e54
 8003940:	40004800 	.word	0x40004800
 8003944:	24003df4 	.word	0x24003df4
 8003948:	40000800 	.word	0x40000800
 800394c:	2400e87c 	.word	0x2400e87c
 8003950:	40001400 	.word	0x40001400
 8003954:	2400cf08 	.word	0x2400cf08
 8003958:	e000ed00 	.word	0xe000ed00
 800395c:	24008ae4 	.word	0x24008ae4
 8003960:	24003ee4 	.word	0x24003ee4
 8003964:	24005918 	.word	0x24005918
 8003968:	58020400 	.word	0x58020400
 800396c:	2400adf8 	.word	0x2400adf8
 8003970:	44228000 	.word	0x44228000
 8003974:	240059c0 	.word	0x240059c0
 8003978:	2400ae04 	.word	0x2400ae04
 800397c:	2400d054 	.word	0x2400d054
 8003980:	24009de0 	.word	0x24009de0
 8003984:	3f7cac08 	.word	0x3f7cac08
 8003988:	2400f4ec 	.word	0x2400f4ec
 800398c:	24008ae1 	.word	0x24008ae1
 8003990:	24009de4 	.word	0x24009de4
 8003994:	2400f4ee 	.word	0x2400f4ee
 8003998:	24009dec 	.word	0x24009dec
 800399c:	240093ac 	.word	0x240093ac
 80039a0:	24008b48 	.word	0x24008b48
 80039a4:	3dcccccd 	.word	0x3dcccccd
	AGC_decay[Fast] = 0.9995f;
 80039a8:	4959      	ldr	r1, [pc, #356]	; (8003b10 <main+0x880>)
 80039aa:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <main+0x884>)
	AGC_decay[Slow] = 0.99995f;
 80039ac:	4a5a      	ldr	r2, [pc, #360]	; (8003b18 <main+0x888>)
	AGC_decay[Fast] = 0.9995f;
 80039ae:	6019      	str	r1, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80039b0:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 80039b2:	4b5a      	ldr	r3, [pc, #360]	; (8003b1c <main+0x88c>)
 80039b4:	4a5a      	ldr	r2, [pc, #360]	; (8003b20 <main+0x890>)
 80039b6:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 80039b8:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <main+0x894>)
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <main+0x898>)
 80039bc:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 80039be:	4a5b      	ldr	r2, [pc, #364]	; (8003b2c <main+0x89c>)
 80039c0:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <main+0x8a0>)
 80039c2:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80039c4:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <main+0x8a4>)
 80039c6:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 80039c8:	f7ff fb2e 	bl	8003028 <CarrierEnable>
	TXSwitch(0);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff fac7 	bl	8002f60 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 80039d2:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <main+0x8a8>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80039d4:	221a      	movs	r2, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80039d6:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80039da:	4958      	ldr	r1, [pc, #352]	; (8003b3c <main+0x8ac>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80039dc:	9203      	str	r2, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80039de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 80039e2:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80039e4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003b40 <main+0x8b0>
	__HAL_RCC_PLL2_DISABLE();
 80039e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
	CWThreshold = 0.1;
 80039ec:	4855      	ldr	r0, [pc, #340]	; (8003b44 <main+0x8b4>)
	__HAL_RCC_PLL2_DISABLE();
 80039ee:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80039f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80039fa:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8003b08 <main+0x878>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003a00:	9a03      	ldr	r2, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003a02:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003a06:	3a01      	subs	r2, #1
 8003a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0c:	4311      	orrs	r1, r2
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003a0e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003a12:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003a14:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003a16:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8003a1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a1e:	601a      	str	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003a20:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <main+0x8b8>)
	CWThreshold = 0.1;
 8003a22:	f8c0 8000 	str.w	r8, [r0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003a26:	edc3 7a00 	vstr	s15, [r3]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003a2a:	ed87 7a00 	vstr	s14, [r7]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8003a2e:	f7fe fac1 	bl	8001fb4 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003a32:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <main+0x8bc>)
 8003a34:	2204      	movs	r2, #4
 8003a36:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003b94 <main+0x904>
 8003a3a:	2140      	movs	r1, #64	; 0x40
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4844      	ldr	r0, [pc, #272]	; (8003b50 <main+0x8c0>)
 8003a40:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <main+0x8c4>)
 8003a42:	9601      	str	r6, [sp, #4]
 8003a44:	f00a f974 	bl	800dd30 <arm_fir_decimate_init_f32>
 8003a48:	f888 0000 	strb.w	r0, [r8]
	while(arc != ARM_MATH_SUCCESS)
 8003a4c:	b100      	cbz	r0, 8003a50 <main+0x7c0>
 8003a4e:	e7fe      	b.n	8003a4e <main+0x7be>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <main+0x8c8>)
 8003a52:	2204      	movs	r2, #4
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	4841      	ldr	r0, [pc, #260]	; (8003b5c <main+0x8cc>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	9601      	str	r6, [sp, #4]
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <main+0x8c4>)
 8003a5e:	f00a f967 	bl	800dd30 <arm_fir_decimate_init_f32>
 8003a62:	4604      	mov	r4, r0
 8003a64:	f888 0000 	strb.w	r0, [r8]
	while(arc != ARM_MATH_SUCCESS)
 8003a68:	bb00      	cbnz	r0, 8003aac <main+0x81c>
	Load_Presets();
 8003a6a:	f7fd f85f 	bl	8000b2c <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f7fd f93e 	bl	8000cf0 <Tune_Preset>
	keyer_speed = 15;
 8003a74:	200f      	movs	r0, #15
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <main+0x8d0>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003a78:	2610      	movs	r6, #16
	keyerState = IDLE;
 8003a7a:	4a3a      	ldr	r2, [pc, #232]	; (8003b64 <main+0x8d4>)
	keyer_speed = 15;
 8003a7c:	6018      	str	r0, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <main+0x8d8>)
	keyerState = IDLE;
 8003a80:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003a82:	701e      	strb	r6, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8003a84:	f7fd f842 	bl	8000b0c <loadWPM>
	keyer_mode = 1; //->  iambic
 8003a88:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <main+0x8dc>)
	txdelay = 10;
 8003a8a:	220a      	movs	r2, #10
	keyer_swap = 0; //->  DI/DAH
 8003a8c:	4938      	ldr	r1, [pc, #224]	; (8003b70 <main+0x8e0>)
	keyer_mode = 1; //->  iambic
 8003a8e:	701d      	strb	r5, [r3, #0]
	txdelay = 10;
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <main+0x8e4>)
	keyer_swap = 0; //->  DI/DAH
 8003a92:	700c      	strb	r4, [r1, #0]
	txdelay = 10;
 8003a94:	701a      	strb	r2, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8003a96:	f7fe fd5f 	bl	8002558 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <main+0x8e8>)
 8003aa0:	4836      	ldr	r0, [pc, #216]	; (8003b7c <main+0x8ec>)
 8003aa2:	f001 fd45 	bl	8005530 <HAL_ADCEx_MultiModeStart_DMA>
 8003aa6:	b110      	cbz	r0, 8003aae <main+0x81e>
    Error_Handler();
 8003aa8:	f7ff faf6 	bl	8003098 <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8003aac:	e7fe      	b.n	8003aac <main+0x81c>
	 if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8003aae:	4834      	ldr	r0, [pc, #208]	; (8003b80 <main+0x8f0>)
 8003ab0:	f006 fc1e 	bl	800a2f0 <HAL_TIM_Base_Start_IT>
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1f6      	bne.n	8003aa8 <main+0x818>
	HAL_TIM_Base_Start(&htim6);
 8003aba:	4832      	ldr	r0, [pc, #200]	; (8003b84 <main+0x8f4>)
 8003abc:	f006 fbc0 	bl	800a240 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8003ac0:	4831      	ldr	r0, [pc, #196]	; (8003b88 <main+0x8f8>)
 8003ac2:	f006 fbbd 	bl	800a240 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4830      	ldr	r0, [pc, #192]	; (8003b8c <main+0x8fc>)
 8003aca:	f001 feab 	bl	8005824 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8003ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad2:	4a2f      	ldr	r2, [pc, #188]	; (8003b90 <main+0x900>)
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	482d      	ldr	r0, [pc, #180]	; (8003b8c <main+0x8fc>)
 8003ad8:	9400      	str	r4, [sp, #0]
 8003ada:	f001 fecf 	bl	800587c <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f000 fcbe 	bl	8004460 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	4829      	ldr	r0, [pc, #164]	; (8003b8c <main+0x8fc>)
 8003ae8:	f001 fe9c 	bl	8005824 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8003aec:	4623      	mov	r3, r4
 8003aee:	4622      	mov	r2, r4
 8003af0:	4631      	mov	r1, r6
 8003af2:	4826      	ldr	r0, [pc, #152]	; (8003b8c <main+0x8fc>)
 8003af4:	f001 ff52 	bl	800599c <HAL_DAC_SetValue>
		UserInput();
 8003af8:	f7fe feba 	bl	8002870 <UserInput>
		HAL_Delay(100);
 8003afc:	2064      	movs	r0, #100	; 0x64
 8003afe:	f000 fc97 	bl	8004430 <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8003b02:	e7f9      	b.n	8003af8 <main+0x868>
 8003b04:	f3af 8000 	nop.w
 8003b08:	829e1bf8 	.word	0x829e1bf8
 8003b0c:	3feffff8 	.word	0x3feffff8
 8003b10:	3f7fdf3b 	.word	0x3f7fdf3b
 8003b14:	2400e064 	.word	0x2400e064
 8003b18:	3f7ffcb9 	.word	0x3f7ffcb9
 8003b1c:	2400adfc 	.word	0x2400adfc
 8003b20:	001e0002 	.word	0x001e0002
 8003b24:	2400adf4 	.word	0x2400adf4
 8003b28:	3949539c 	.word	0x3949539c
 8003b2c:	3ca3d70a 	.word	0x3ca3d70a
 8003b30:	2400f0e0 	.word	0x2400f0e0
 8003b34:	4af42400 	.word	0x4af42400
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	01012e00 	.word	0x01012e00
 8003b40:	3b800000 	.word	0x3b800000
 8003b44:	2400939c 	.word	0x2400939c
 8003b48:	240093a4 	.word	0x240093a4
 8003b4c:	240061cc 	.word	0x240061cc
 8003b50:	240019c4 	.word	0x240019c4
 8003b54:	240000ec 	.word	0x240000ec
 8003b58:	2400ae08 	.word	0x2400ae08
 8003b5c:	24009c2c 	.word	0x24009c2c
 8003b60:	240093a8 	.word	0x240093a8
 8003b64:	24003df0 	.word	0x24003df0
 8003b68:	240059c8 	.word	0x240059c8
 8003b6c:	2400d060 	.word	0x2400d060
 8003b70:	24005110 	.word	0x24005110
 8003b74:	240040dc 	.word	0x240040dc
 8003b78:	2400e8e0 	.word	0x2400e8e0
 8003b7c:	24008ae4 	.word	0x24008ae4
 8003b80:	2400e87c 	.word	0x2400e87c
 8003b84:	24009d90 	.word	0x24009d90
 8003b88:	2400cf08 	.word	0x2400cf08
 8003b8c:	24003e40 	.word	0x24003e40
 8003b90:	240082e0 	.word	0x240082e0
 8003b94:	2400d058 	.word	0x2400d058

08003b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	4c14      	ldr	r4, [pc, #80]	; (8003bec <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003b9c:	2102      	movs	r1, #2
{
 8003b9e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003ba0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003ba6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003bb0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003bba:	f001 fdbd 	bl	8005738 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003bbe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003bc2:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003bcc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003bd8:	f000 fc42 	bl	8004460 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8003bdc:	f000 fc54 	bl	8004488 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003be0:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003be2:	b002      	add	sp, #8
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003be8:	f000 bc44 	b.w	8004474 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8003bec:	58024400 	.word	0x58024400

08003bf0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003bf0:	4951      	ldr	r1, [pc, #324]	; (8003d38 <HAL_ADC_MspInit+0x148>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf2:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003bf4:	6802      	ldr	r2, [r0, #0]
{
 8003bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hadc->Instance==ADC1)
 8003bfa:	428a      	cmp	r2, r1
{
 8003bfc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	9308      	str	r3, [sp, #32]
 8003c04:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8003c08:	d02d      	beq.n	8003c66 <HAL_ADC_MspInit+0x76>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_ADC_MspInit+0x14c>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d002      	beq.n	8003c16 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003c10:	b00b      	add	sp, #44	; 0x2c
 8003c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_ADC_MspInit+0x150>)
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c1c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c20:	d079      	beq.n	8003d16 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c22:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c26:	2602      	movs	r6, #2
 8003c28:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2e:	a904      	add	r1, sp, #16
 8003c30:	4845      	ldr	r0, [pc, #276]	; (8003d48 <HAL_ADC_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	f044 0402 	orr.w	r4, r4, #2
 8003c36:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8003c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c48:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4c:	f003 fa94 	bl	8007178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c50:	462a      	mov	r2, r5
 8003c52:	4629      	mov	r1, r5
 8003c54:	2012      	movs	r0, #18
 8003c56:	f001 fd6f 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003c5a:	2012      	movs	r0, #18
 8003c5c:	f001 fda6 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 8003c60:	b00b      	add	sp, #44	; 0x2c
 8003c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c66:	4a36      	ldr	r2, [pc, #216]	; (8003d40 <HAL_ADC_MspInit+0x150>)
 8003c68:	4604      	mov	r4, r0
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c6e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c72:	d042      	beq.n	8003cfa <HAL_ADC_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c74:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c78:	f04f 0802 	mov.w	r8, #2
 8003c7c:	f04f 0903 	mov.w	r9, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	a904      	add	r1, sp, #16
 8003c86:	4830      	ldr	r0, [pc, #192]	; (8003d48 <HAL_ADC_MspInit+0x158>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c88:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8c:	f042 0202 	orr.w	r2, r2, #2
    hdma_adc1.Instance = DMA1_Stream0;
 8003c90:	4d2e      	ldr	r5, [pc, #184]	; (8003d4c <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ca4:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca8:	f003 fa66 	bl	8007178 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_ADC_MspInit+0x160>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003cae:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003cb2:	f04f 0c09 	mov.w	ip, #9
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Stream0;
 8003cbe:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003cc4:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cc6:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc8:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cca:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ccc:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003cce:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cd2:	e9c5 7105 	strd	r7, r1, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003cd6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cda:	f002 f87d 	bl	8005dd8 <HAL_DMA_Init>
 8003cde:	bb40      	cbnz	r0, 8003d32 <HAL_ADC_MspInit+0x142>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ce4:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ce6:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ce8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003cea:	f001 fd25 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003cee:	2012      	movs	r0, #18
 8003cf0:	f001 fd5c 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 8003cf4:	b00b      	add	sp, #44	; 0x2c
 8003cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_ADC_MspInit+0x154>)
 8003cfc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	9b00      	ldr	r3, [sp, #0]
 8003d14:	e7ae      	b.n	8003c74 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_ADC_MspInit+0x154>)
 8003d18:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	9302      	str	r3, [sp, #8]
 8003d2e:	9b02      	ldr	r3, [sp, #8]
 8003d30:	e777      	b.n	8003c22 <HAL_ADC_MspInit+0x32>
      Error_Handler();
 8003d32:	f7ff f9b1 	bl	8003098 <Error_Handler>
 8003d36:	e7d3      	b.n	8003ce0 <HAL_ADC_MspInit+0xf0>
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40022100 	.word	0x40022100
 8003d40:	2400067c 	.word	0x2400067c
 8003d44:	58024400 	.word	0x58024400
 8003d48:	58020400 	.word	0x58020400
 8003d4c:	24009bb0 	.word	0x24009bb0
 8003d50:	40020010 	.word	0x40020010

08003d54 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_DAC_MspInit+0xc4>)
 8003d56:	6802      	ldr	r2, [r0, #0]
{
 8003d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hdac->Instance==DAC1)
 8003d5c:	429a      	cmp	r2, r3
{
 8003d5e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	9403      	str	r4, [sp, #12]
 8003d66:	9402      	str	r4, [sp, #8]
 8003d68:	9406      	str	r4, [sp, #24]
 8003d6a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hdac->Instance==DAC1)
 8003d6e:	d002      	beq.n	8003d76 <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003d70:	b009      	add	sp, #36	; 0x24
 8003d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_DAC_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d78:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003d7c:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d80:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003d82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003d86:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	4825      	ldr	r0, [pc, #148]	; (8003e20 <HAL_DAC_MspInit+0xcc>)
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d8a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003d8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003d92:	4e24      	ldr	r6, [pc, #144]	; (8003e24 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003d94:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003d98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003d9c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003da0:	9200      	str	r2, [sp, #0]
 8003da2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003dbe:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc2:	f003 f9d9 	bl	8007178 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dc8:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003dca:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003dd6:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ddc:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003dde:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003de0:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de2:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003de6:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003de8:	e9c6 7104 	strd	r7, r1, [r6, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003dec:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003df0:	f001 fff2 	bl	8005dd8 <HAL_DMA_Init>
 8003df4:	b960      	cbnz	r0, 8003e10 <HAL_DAC_MspInit+0xbc>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003dfa:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003dfc:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003dfe:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003e00:	f001 fc9a 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e04:	2036      	movs	r0, #54	; 0x36
 8003e06:	f001 fcd1 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 8003e0a:	b009      	add	sp, #36	; 0x24
 8003e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8003e10:	f7ff f942 	bl	8003098 <Error_Handler>
 8003e14:	e7ef      	b.n	8003df6 <HAL_DAC_MspInit+0xa2>
 8003e16:	bf00      	nop
 8003e18:	40007400 	.word	0x40007400
 8003e1c:	58024400 	.word	0x58024400
 8003e20:	58020000 	.word	0x58020000
 8003e24:	24005920 	.word	0x24005920
 8003e28:	40020028 	.word	0x40020028

08003e2c <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2e:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003e30:	6801      	ldr	r1, [r0, #0]
{
 8003e32:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlptim->Instance==LPTIM2)
 8003e34:	4291      	cmp	r1, r2
{
 8003e36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e40:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003e42:	d001      	beq.n	8003e48 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003e44:	b009      	add	sp, #36	; 0x24
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003e4a:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e50:	2502      	movs	r5, #2
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003e52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e56:	a902      	add	r1, sp, #8
 8003e58:	4812      	ldr	r0, [pc, #72]	; (8003ea4 <HAL_LPTIM_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e5a:	2700      	movs	r7, #0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003e64:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003e68:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003e6c:	9200      	str	r2, [sp, #0]
 8003e6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e74:	f042 0202 	orr.w	r2, r2, #2
 8003e78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003e80:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e82:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003e90:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	f003 f970 	bl	8007178 <HAL_GPIO_Init>
}
 8003e98:	b009      	add	sp, #36	; 0x24
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9c:	58002400 	.word	0x58002400
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	58020400 	.word	0x58020400

08003ea8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003ea8:	6803      	ldr	r3, [r0, #0]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_TIM_Base_MspInit+0xac>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01c      	beq.n	8003ef4 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003eba:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_TIM_Base_MspInit+0xb0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d031      	beq.n	8003f24 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003ec0:	b004      	add	sp, #16
 8003ec2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2104      	movs	r1, #4
 8003eca:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ecc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003ed0:	f044 0401 	orr.w	r4, r4, #1
 8003ed4:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003ee4:	f001 fc28 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ee8:	201c      	movs	r0, #28
}
 8003eea:	b004      	add	sp, #16
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ef0:	f001 bc5c 	b.w	80057ac <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003efc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003f00:	f044 0410 	orr.w	r4, r4, #16
 8003f04:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	9302      	str	r3, [sp, #8]
 8003f12:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003f14:	f001 fc10 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f18:	2036      	movs	r0, #54	; 0x36
}
 8003f1a:	b004      	add	sp, #16
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f20:	f001 bc44 	b.w	80057ac <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2101      	movs	r1, #1
 8003f2a:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f2c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003f30:	f044 0420 	orr.w	r4, r4, #32
 8003f34:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8003f44:	f001 fbf8 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f48:	2037      	movs	r0, #55	; 0x37
}
 8003f4a:	b004      	add	sp, #16
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f50:	f001 bc2c 	b.w	80057ac <HAL_NVIC_EnableIRQ>
 8003f54:	40001000 	.word	0x40001000
 8003f58:	40001400 	.word	0x40001400
 8003f5c:	58024400 	.word	0x58024400

08003f60 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_TIM_Encoder_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f62:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003f64:	6801      	ldr	r1, [r0, #0]
{
 8003f66:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_encoder->Instance==TIM4)
 8003f68:	4291      	cmp	r1, r2
{
 8003f6a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f70:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f74:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f78:	b009      	add	sp, #36	; 0x24
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_TIM_Encoder_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f7e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f80:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8003f84:	2502      	movs	r5, #2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f8a:	a902      	add	r1, sp, #8
 8003f8c:	4812      	ldr	r0, [pc, #72]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f8e:	2700      	movs	r7, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f90:	f042 0204 	orr.w	r2, r2, #4
 8003f94:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003f98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003f9c:	f002 0204 	and.w	r2, r2, #4
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fa8:	f042 0208 	orr.w	r2, r2, #8
 8003fac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fb4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fb6:	2601      	movs	r6, #1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fc0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003fc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc8:	f003 f8d6 	bl	8007178 <HAL_GPIO_Init>
}
 8003fcc:	b009      	add	sp, #36	; 0x24
 8003fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	58020c00 	.word	0x58020c00

08003fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	2400      	movs	r4, #0
{
 8003fe2:	b0b8      	sub	sp, #224	; 0xe0
 8003fe4:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fe6:	22bc      	movs	r2, #188	; 0xbc
 8003fe8:	4621      	mov	r1, r4
 8003fea:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	9408      	str	r4, [sp, #32]
 8003fee:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003ff2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ff6:	f00a fc37 	bl	800e868 <memset>
  if(huart->Instance==USART3)
 8003ffa:	682a      	ldr	r2, [r5, #0]
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_UART_MspInit+0xe0>)
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d002      	beq.n	8004008 <HAL_UART_MspInit+0x2c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004002:	b038      	add	sp, #224	; 0xe0
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004008:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800400a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800400c:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800400e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004010:	f004 ff7a 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
 8004014:	2800      	cmp	r0, #0
 8004016:	d14d      	bne.n	80040b4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800401a:	2400      	movs	r4, #0
 800401c:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800401e:	f04f 0807 	mov.w	r8, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8004022:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004026:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800402a:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 800402e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004032:	4824      	ldr	r0, [pc, #144]	; (80040c4 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004034:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004038:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800403c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004040:	9201      	str	r2, [sp, #4]
 8004042:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004044:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004048:	f042 0202 	orr.w	r2, r2, #2
 800404c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004050:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004054:	f002 0202 	and.w	r2, r2, #2
 8004058:	9202      	str	r2, [sp, #8]
 800405a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800405c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004060:	f042 0208 	orr.w	r2, r2, #8
 8004064:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800406c:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	9303      	str	r3, [sp, #12]
 8004076:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004078:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800407c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004080:	f003 f87a 	bl	8007178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004084:	2302      	movs	r3, #2
 8004086:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800408a:	a904      	add	r1, sp, #16
 800408c:	480e      	ldr	r0, [pc, #56]	; (80040c8 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800408e:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004096:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800409a:	f003 f86d 	bl	8007178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2101      	movs	r1, #1
 80040a2:	2027      	movs	r0, #39	; 0x27
 80040a4:	f001 fb48 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040a8:	2027      	movs	r0, #39	; 0x27
 80040aa:	f001 fb7f 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 80040ae:	b038      	add	sp, #224	; 0xe0
 80040b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 80040b4:	f7fe fff0 	bl	8003098 <Error_Handler>
 80040b8:	e7ae      	b.n	8004018 <HAL_UART_MspInit+0x3c>
 80040ba:	bf00      	nop
 80040bc:	40004800 	.word	0x40004800
 80040c0:	58024400 	.word	0x58024400
 80040c4:	58020400 	.word	0x58020400
 80040c8:	58020c00 	.word	0x58020c00

080040cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <HardFault_Handler>
 80040d2:	bf00      	nop

080040d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <MemManage_Handler>
 80040d6:	bf00      	nop

080040d8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <BusFault_Handler>
 80040da:	bf00      	nop

080040dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <UsageFault_Handler>
 80040de:	bf00      	nop

080040e0 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 80040e0:	f000 b93c 	b.w	800435c <ADC3_IRQHandler>

080040e4 <DebugMon_Handler>:
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <PendSV_Handler>:
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ec:	f000 b98e 	b.w	800440c <HAL_IncTick>

080040f0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <DMA1_Stream0_IRQHandler+0x8>)
 80040f2:	f002 bce3 	b.w	8006abc <HAL_DMA_IRQHandler>
 80040f6:	bf00      	nop
 80040f8:	24009bb0 	.word	0x24009bb0

080040fc <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <DMA1_Stream1_IRQHandler+0x8>)
 80040fe:	f002 bcdd 	b.w	8006abc <HAL_DMA_IRQHandler>
 8004102:	bf00      	nop
 8004104:	24005920 	.word	0x24005920

08004108 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004108:	4804      	ldr	r0, [pc, #16]	; (800411c <ADC_IRQHandler+0x14>)
{
 800410a:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 800410c:	f000 f9de 	bl	80044cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8004116:	f000 b9d9 	b.w	80044cc <HAL_ADC_IRQHandler>
 800411a:	bf00      	nop
 800411c:	24008ae4 	.word	0x24008ae4
 8004120:	24003ee4 	.word	0x24003ee4

08004124 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <TIM2_IRQHandler+0x8>)
 8004126:	f006 bb53 	b.w	800a7d0 <HAL_TIM_IRQHandler>
 800412a:	bf00      	nop
 800412c:	2400cf08 	.word	0x2400cf08

08004130 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004130:	4801      	ldr	r0, [pc, #4]	; (8004138 <USART3_IRQHandler+0x8>)
 8004132:	f006 bc77 	b.w	800aa24 <HAL_UART_IRQHandler>
 8004136:	bf00      	nop
 8004138:	24003e54 	.word	0x24003e54

0800413c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 800413c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004140:	f003 b958 	b.w	80073f4 <HAL_GPIO_EXTI_IRQHandler>

08004144 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8004144:	4804      	ldr	r0, [pc, #16]	; (8004158 <TIM6_DAC_IRQHandler+0x14>)
{
 8004146:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8004148:	f001 fc5e 	bl	8005a08 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800414e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8004152:	f006 bb3d 	b.w	800a7d0 <HAL_TIM_IRQHandler>
 8004156:	bf00      	nop
 8004158:	24003e40 	.word	0x24003e40
 800415c:	24009d90 	.word	0x24009d90

08004160 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <TIM7_IRQHandler+0x8>)
 8004162:	f006 bb35 	b.w	800a7d0 <HAL_TIM_IRQHandler>
 8004166:	bf00      	nop
 8004168:	2400e87c 	.word	0x2400e87c

0800416c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <OTG_FS_IRQHandler+0x8>)
 800416e:	f003 ba7b 	b.w	8007668 <HAL_PCD_IRQHandler>
 8004172:	bf00      	nop
 8004174:	240109c0 	.word	0x240109c0

08004178 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004178:	2001      	movs	r0, #1
 800417a:	4770      	bx	lr

0800417c <_kill>:

int _kill(int pid, int sig)
{
 800417c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800417e:	f00a fb3b 	bl	800e7f8 <__errno>
 8004182:	2216      	movs	r2, #22
 8004184:	4603      	mov	r3, r0
	return -1;
}
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bd08      	pop	{r3, pc}
 800418e:	bf00      	nop

08004190 <_exit>:

void _exit (int status)
{
 8004190:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004192:	f00a fb31 	bl	800e7f8 <__errno>
 8004196:	2316      	movs	r3, #22
 8004198:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800419a:	e7fe      	b.n	800419a <_exit+0xa>

0800419c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800419c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	1e16      	subs	r6, r2, #0
 80041a0:	dd07      	ble.n	80041b2 <_read+0x16>
 80041a2:	460c      	mov	r4, r1
 80041a4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80041a6:	f3af 8000 	nop.w
 80041aa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ae:	42a5      	cmp	r5, r4
 80041b0:	d1f9      	bne.n	80041a6 <_read+0xa>
	}

return len;
}
 80041b2:	4630      	mov	r0, r6
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	bf00      	nop

080041b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041b8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ba:	1e16      	subs	r6, r2, #0
 80041bc:	dd07      	ble.n	80041ce <_write+0x16>
 80041be:	460c      	mov	r4, r1
 80041c0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80041c2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80041c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ca:	42ac      	cmp	r4, r5
 80041cc:	d1f9      	bne.n	80041c2 <_write+0xa>
	}
	return len;
}
 80041ce:	4630      	mov	r0, r6
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	bf00      	nop

080041d4 <_close>:

int _close(int file)
{
	return -1;
}
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80041dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80041e0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80041e2:	604b      	str	r3, [r1, #4]
}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80041e8:	2001      	movs	r0, #1
 80041ea:	4770      	bx	lr

080041ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80041ec:	2000      	movs	r0, #0
 80041ee:	4770      	bx	lr

080041f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f2:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <_sbrk+0x38>)
{
 80041f4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f6:	490d      	ldr	r1, [pc, #52]	; (800422c <_sbrk+0x3c>)
 80041f8:	480d      	ldr	r0, [pc, #52]	; (8004230 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80041fa:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041fc:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 80041fe:	b12a      	cbz	r2, 800420c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004200:	4413      	add	r3, r2
 8004202:	428b      	cmp	r3, r1
 8004204:	d808      	bhi.n	8004218 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004206:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8004208:	6023      	str	r3, [r4, #0]
}
 800420a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800420c:	4809      	ldr	r0, [pc, #36]	; (8004234 <_sbrk+0x44>)
 800420e:	4602      	mov	r2, r0
 8004210:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004212:	4413      	add	r3, r2
 8004214:	428b      	cmp	r3, r1
 8004216:	d9f6      	bls.n	8004206 <_sbrk+0x16>
    errno = ENOMEM;
 8004218:	f00a faee 	bl	800e7f8 <__errno>
 800421c:	230c      	movs	r3, #12
    return (void *)-1;
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8004222:	6003      	str	r3, [r0, #0]
}
 8004224:	4610      	mov	r0, r2
 8004226:	bd10      	pop	{r4, pc}
 8004228:	24000680 	.word	0x24000680
 800422c:	24080000 	.word	0x24080000
 8004230:	00000400 	.word	0x00000400
 8004234:	24010dd8 	.word	0x24010dd8

08004238 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004238:	4929      	ldr	r1, [pc, #164]	; (80042e0 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800423a:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800423c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8004244:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	2b06      	cmp	r3, #6
 8004252:	d805      	bhi.n	8004260 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	f023 030f 	bic.w	r3, r3, #15
 800425a:	f043 0307 	orr.w	r3, r3, #7
 800425e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004262:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8004266:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004268:	481e      	ldr	r0, [pc, #120]	; (80042e4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800426a:	f041 0101 	orr.w	r1, r1, #1
 800426e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004270:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	400a      	ands	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	071b      	lsls	r3, r3, #28
 800427c:	d505      	bpl.n	800428a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800427e:	6803      	ldr	r3, [r0, #0]
 8004280:	f023 030f 	bic.w	r3, r3, #15
 8004284:	f043 0307 	orr.w	r3, r3, #7
 8004288:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <SystemInit+0xb0>)
 800428c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800428e:	4918      	ldr	r1, [pc, #96]	; (80042f0 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8004290:	4c18      	ldr	r4, [pc, #96]	; (80042f4 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8004292:	4819      	ldr	r0, [pc, #100]	; (80042f8 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8004294:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004296:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004298:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800429a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800429c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800429e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80042a2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80042a6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80042aa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80042ac:	4c13      	ldr	r4, [pc, #76]	; (80042fc <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80042ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80042b2:	4913      	ldr	r1, [pc, #76]	; (8004300 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80042b4:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	4019      	ands	r1, r3
 80042bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80042c0:	d202      	bcs.n	80042c8 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <SystemInit+0xcc>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042c8:	490f      	ldr	r1, [pc, #60]	; (8004308 <SystemInit+0xd0>)
 80042ca:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <SystemInit+0xa8>)
 80042d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042d4:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80042d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	52002000 	.word	0x52002000
 80042e8:	58024400 	.word	0x58024400
 80042ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80042f0:	01010280 	.word	0x01010280
 80042f4:	02020200 	.word	0x02020200
 80042f8:	01ff0000 	.word	0x01ff0000
 80042fc:	5c001000 	.word	0x5c001000
 8004300:	ffff0000 	.word	0xffff0000
 8004304:	51008108 	.word	0x51008108
 8004308:	52004000 	.word	0x52004000

0800430c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800430c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004344 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004310:	f7ff ff92 	bl	8004238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004316:	e003      	b.n	8004320 <LoopCopyDataInit>

08004318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800431a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800431c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800431e:	3104      	adds	r1, #4

08004320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004320:	480a      	ldr	r0, [pc, #40]	; (800434c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004328:	d3f6      	bcc.n	8004318 <CopyDataInit>
  ldr  r2, =_sbss
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800432c:	e002      	b.n	8004334 <LoopFillZerobss>

0800432e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800432e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004330:	f842 3b04 	str.w	r3, [r2], #4

08004334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004338:	d3f9      	bcc.n	800432e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800433a:	f00a fa63 	bl	800e804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433e:	f7fe ffa7 	bl	8003290 <main>
  bx  lr    
 8004342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004344:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004348:	0801cf60 	.word	0x0801cf60
  ldr  r0, =_sdata
 800434c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004350:	2400054c 	.word	0x2400054c
  ldr  r2, =_sbss
 8004354:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 8004358:	24010dd8 	.word	0x24010dd8

0800435c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC3_IRQHandler>
	...

08004360 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_InitTick+0x40>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b90b      	cbnz	r3, 800436a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8004366:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004368:	4770      	bx	lr
{
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800436e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <HAL_InitTick+0x44>)
 8004374:	fbb0 f3f3 	udiv	r3, r0, r3
 8004378:	6810      	ldr	r0, [r2, #0]
 800437a:	fbb0 f0f3 	udiv	r0, r0, r3
 800437e:	f001 fa23 	bl	80057c8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004382:	2c0f      	cmp	r4, #15
 8004384:	d800      	bhi.n	8004388 <HAL_InitTick+0x28>
 8004386:	b108      	cbz	r0, 800438c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8004388:	2001      	movs	r0, #1
}
 800438a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	4621      	mov	r1, r4
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f001 f9d0 	bl	8005738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_InitTick+0x48>)
 800439a:	2000      	movs	r0, #0
 800439c:	601c      	str	r4, [r3, #0]
}
 800439e:	bd10      	pop	{r4, pc}
 80043a0:	240001f4 	.word	0x240001f4
 80043a4:	240001ec 	.word	0x240001ec
 80043a8:	240001f8 	.word	0x240001f8

080043ac <HAL_Init>:
{
 80043ac:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ae:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043b0:	4c12      	ldr	r4, [pc, #72]	; (80043fc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b2:	f001 f9ad 	bl	8005710 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043b6:	4d12      	ldr	r5, [pc, #72]	; (8004400 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043b8:	f004 fa14 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_Init+0x58>)
 80043be:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043c0:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043c2:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043c6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ca:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043ce:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d0:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043d2:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 80043d6:	4c0c      	ldr	r4, [pc, #48]	; (8004408 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043dc:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80043e2:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e4:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043e6:	f7ff ffbb 	bl	8004360 <HAL_InitTick>
 80043ea:	b110      	cbz	r0, 80043f2 <HAL_Init+0x46>
    return HAL_ERROR;
 80043ec:	2401      	movs	r4, #1
}
 80043ee:	4620      	mov	r0, r4
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	4604      	mov	r4, r0
  HAL_MspInit();
 80043f4:	f7ff fbd0 	bl	8003b98 <HAL_MspInit>
}
 80043f8:	4620      	mov	r0, r4
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	080189ac 	.word	0x080189ac
 8004400:	240001f0 	.word	0x240001f0
 8004404:	58024400 	.word	0x58024400
 8004408:	240001ec 	.word	0x240001ec

0800440c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800440c:	4a03      	ldr	r2, [pc, #12]	; (800441c <HAL_IncTick+0x10>)
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_IncTick+0x14>)
 8004410:	6811      	ldr	r1, [r2, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	440b      	add	r3, r1
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	240059bc 	.word	0x240059bc
 8004420:	240001f4 	.word	0x240001f4

08004424 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <HAL_GetTick+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	240059bc 	.word	0x240059bc

08004430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004434:	f7ff fff6 	bl	8004424 <HAL_GetTick>
 8004438:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443a:	1c63      	adds	r3, r4, #1
 800443c:	d002      	beq.n	8004444 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_Delay+0x20>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004444:	f7ff ffee 	bl	8004424 <HAL_GetTick>
 8004448:	1b43      	subs	r3, r0, r5
 800444a:	42a3      	cmp	r3, r4
 800444c:	d3fa      	bcc.n	8004444 <HAL_Delay+0x14>
  {
  }
}
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	240001f4 	.word	0x240001f4

08004454 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8004454:	4b01      	ldr	r3, [pc, #4]	; (800445c <HAL_GetREVID+0x8>)
 8004456:	6818      	ldr	r0, [r3, #0]
}
 8004458:	0c00      	lsrs	r0, r0, #16
 800445a:	4770      	bx	lr
 800445c:	5c001000 	.word	0x5c001000

08004460 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8004460:	4a03      	ldr	r2, [pc, #12]	; (8004470 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	4318      	orrs	r0, r3
 800446a:	6010      	str	r0, [r2, #0]
}
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	58003c00 	.word	0x58003c00

08004474 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	4318      	orrs	r0, r3
 800447e:	6010      	str	r0, [r2, #0]
}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58003c00 	.word	0x58003c00

08004488 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8004488:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 800448c:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800448e:	461d      	mov	r5, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004496:	f7ff ffc5 	bl	8004424 <HAL_GetTick>
 800449a:	4604      	mov	r4, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800449c:	e004      	b.n	80044a8 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800449e:	f7ff ffc1 	bl	8004424 <HAL_GetTick>
 80044a2:	1b00      	subs	r0, r0, r4
 80044a4:	280a      	cmp	r0, #10
 80044a6:	d804      	bhi.n	80044b2 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	071b      	lsls	r3, r3, #28
 80044ac:	d5f7      	bpl.n	800449e <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80044ae:	2000      	movs	r0, #0
}
 80044b0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80044b2:	2003      	movs	r0, #3
}
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
 80044b6:	bf00      	nop
 80044b8:	58003c00 	.word	0x58003c00

080044bc <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80044be:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044c0:	f7fd ffee 	bl	80024a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044c4:	bd08      	pop	{r3, pc}
 80044c6:	bf00      	nop

080044c8 <HAL_ADC_ErrorCallback>:
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <HAL_ADC_IRQHandler>:
{
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ce:	4a9a      	ldr	r2, [pc, #616]	; (8004738 <HAL_ADC_IRQHandler+0x26c>)
{
 80044d0:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80044d2:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d4:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80044d6:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80044d8:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044da:	f000 8095 	beq.w	8004608 <HAL_ADC_IRQHandler+0x13c>
 80044de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f000 8090 	beq.w	8004608 <HAL_ADC_IRQHandler+0x13c>
 80044e8:	4a94      	ldr	r2, [pc, #592]	; (800473c <HAL_ADC_IRQHandler+0x270>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044ea:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80044ec:	07a9      	lsls	r1, r5, #30
 80044ee:	f007 071f 	and.w	r7, r7, #31
 80044f2:	d502      	bpl.n	80044fa <HAL_ADC_IRQHandler+0x2e>
 80044f4:	07b2      	lsls	r2, r6, #30
 80044f6:	f100 80a9 	bmi.w	800464c <HAL_ADC_IRQHandler+0x180>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044fa:	0769      	lsls	r1, r5, #29
 80044fc:	d579      	bpl.n	80045f2 <HAL_ADC_IRQHandler+0x126>
 80044fe:	0772      	lsls	r2, r6, #29
 8004500:	d577      	bpl.n	80045f2 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004502:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004504:	06d2      	lsls	r2, r2, #27
 8004506:	d403      	bmi.n	8004510 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004508:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004516:	d11c      	bne.n	8004552 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004518:	4a89      	ldr	r2, [pc, #548]	; (8004740 <HAL_ADC_IRQHandler+0x274>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f000 80e7 	beq.w	80046ee <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004520:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004522:	0490      	lsls	r0, r2, #18
 8004524:	d415      	bmi.n	8004552 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	0711      	lsls	r1, r2, #28
 800452a:	d512      	bpl.n	8004552 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	0752      	lsls	r2, r2, #29
 8004530:	f100 80ed 	bmi.w	800470e <HAL_ADC_IRQHandler+0x242>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	f022 020c 	bic.w	r2, r2, #12
 800453a:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800453c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800453e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004542:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004544:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004546:	04db      	lsls	r3, r3, #19
 8004548:	d403      	bmi.n	8004552 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800454a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004552:	4620      	mov	r0, r4
 8004554:	f7fd ff86 	bl	8002464 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	220c      	movs	r2, #12
 800455c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800455e:	06a8      	lsls	r0, r5, #26
 8004560:	d54d      	bpl.n	80045fe <HAL_ADC_IRQHandler+0x132>
 8004562:	06b1      	lsls	r1, r6, #26
 8004564:	d54b      	bpl.n	80045fe <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004566:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004568:	06d1      	lsls	r1, r2, #27
 800456a:	d403      	bmi.n	8004574 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800456c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800456e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004572:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004574:	4972      	ldr	r1, [pc, #456]	; (8004740 <HAL_ADC_IRQHandler+0x274>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004578:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800457a:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800457c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004580:	d072      	beq.n	8004668 <HAL_ADC_IRQHandler+0x19c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004582:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004584:	b9d2      	cbnz	r2, 80045bc <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004586:	018a      	lsls	r2, r1, #6
 8004588:	f100 80a9 	bmi.w	80046de <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	0650      	lsls	r0, r2, #25
 8004590:	d514      	bpl.n	80045bc <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004592:	0289      	lsls	r1, r1, #10
 8004594:	d412      	bmi.n	80045bc <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	0712      	lsls	r2, r2, #28
 800459a:	f100 80c3 	bmi.w	8004724 <HAL_ADC_IRQHandler+0x258>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80045a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ac:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80045ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045b0:	05d8      	lsls	r0, r3, #23
 80045b2:	d403      	bmi.n	80045bc <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80045bc:	4620      	mov	r0, r4
 80045be:	f001 f835 	bl	800562c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	2260      	movs	r2, #96	; 0x60
 80045c6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80045c8:	0629      	lsls	r1, r5, #24
 80045ca:	d501      	bpl.n	80045d0 <HAL_ADC_IRQHandler+0x104>
 80045cc:	0632      	lsls	r2, r6, #24
 80045ce:	d45f      	bmi.n	8004690 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80045d0:	05e8      	lsls	r0, r5, #23
 80045d2:	d501      	bpl.n	80045d8 <HAL_ADC_IRQHandler+0x10c>
 80045d4:	05f1      	lsls	r1, r6, #23
 80045d6:	d466      	bmi.n	80046a6 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80045d8:	05aa      	lsls	r2, r5, #22
 80045da:	d501      	bpl.n	80045e0 <HAL_ADC_IRQHandler+0x114>
 80045dc:	05b0      	lsls	r0, r6, #22
 80045de:	d44b      	bmi.n	8004678 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80045e0:	06e9      	lsls	r1, r5, #27
 80045e2:	d501      	bpl.n	80045e8 <HAL_ADC_IRQHandler+0x11c>
 80045e4:	06f2      	lsls	r2, r6, #27
 80045e6:	d411      	bmi.n	800460c <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80045e8:	0568      	lsls	r0, r5, #21
 80045ea:	d501      	bpl.n	80045f0 <HAL_ADC_IRQHandler+0x124>
 80045ec:	0571      	lsls	r1, r6, #21
 80045ee:	d466      	bmi.n	80046be <HAL_ADC_IRQHandler+0x1f2>
}
 80045f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045f2:	0728      	lsls	r0, r5, #28
 80045f4:	d5b3      	bpl.n	800455e <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045f6:	0731      	lsls	r1, r6, #28
 80045f8:	d483      	bmi.n	8004502 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045fa:	06a8      	lsls	r0, r5, #26
 80045fc:	d4b1      	bmi.n	8004562 <HAL_ADC_IRQHandler+0x96>
 80045fe:	066a      	lsls	r2, r5, #25
 8004600:	d5e2      	bpl.n	80045c8 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004602:	0670      	lsls	r0, r6, #25
 8004604:	d5e0      	bpl.n	80045c8 <HAL_ADC_IRQHandler+0xfc>
 8004606:	e7ae      	b.n	8004566 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004608:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_ADC_IRQHandler+0x278>)
 800460a:	e76e      	b.n	80044ea <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800460c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800460e:	b172      	cbz	r2, 800462e <HAL_ADC_IRQHandler+0x162>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004610:	2f00      	cmp	r7, #0
 8004612:	d071      	beq.n	80046f8 <HAL_ADC_IRQHandler+0x22c>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_ADC_IRQHandler+0x26c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f000 8082 	beq.w	8004720 <HAL_ADC_IRQHandler+0x254>
 800461c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004620:	4293      	cmp	r3, r2
 8004622:	d07d      	beq.n	8004720 <HAL_ADC_IRQHandler+0x254>
 8004624:	4a45      	ldr	r2, [pc, #276]	; (800473c <HAL_ADC_IRQHandler+0x270>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004626:	6892      	ldr	r2, [r2, #8]
 8004628:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800462c:	d00b      	beq.n	8004646 <HAL_ADC_IRQHandler+0x17a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800462e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8004630:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004636:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8004640:	f7ff ff42 	bl	80044c8 <HAL_ADC_ErrorCallback>
 8004644:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004646:	2210      	movs	r2, #16
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e7cd      	b.n	80045e8 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800464c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800464e:	06d8      	lsls	r0, r3, #27
 8004650:	d403      	bmi.n	800465a <HAL_ADC_IRQHandler+0x18e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004652:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004658:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800465a:	4620      	mov	r0, r4
 800465c:	f000 ffee 	bl	800563c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	2202      	movs	r2, #2
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e748      	b.n	80044fa <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004668:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800466a:	2901      	cmp	r1, #1
 800466c:	d989      	bls.n	8004582 <HAL_ADC_IRQHandler+0xb6>
 800466e:	2f00      	cmp	r7, #0
 8004670:	d087      	beq.n	8004582 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004672:	4931      	ldr	r1, [pc, #196]	; (8004738 <HAL_ADC_IRQHandler+0x26c>)
 8004674:	68c9      	ldr	r1, [r1, #12]
 8004676:	e785      	b.n	8004584 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004678:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800467a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004682:	f000 ffd9 	bl	8005638 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e7a7      	b.n	80045e0 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004690:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004692:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800469a:	f7fd ff43 	bl	8002524 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e794      	b.n	80045d0 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046a8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ae:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046b0:	f000 ffc0 	bl	8005634 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e78c      	b.n	80045d8 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80046be:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046c4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80046c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ca:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80046cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046d4:	6019      	str	r1, [r3, #0]
}
 80046d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046da:	f000 bfa9 	b.w	8005630 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046de:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80046e2:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80046e6:	4302      	orrs	r2, r0
 80046e8:	f47f af68 	bne.w	80045bc <HAL_ADC_IRQHandler+0xf0>
 80046ec:	e74e      	b.n	800458c <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ee:	2f09      	cmp	r7, #9
 80046f0:	d906      	bls.n	8004700 <HAL_ADC_IRQHandler+0x234>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80046f2:	4a11      	ldr	r2, [pc, #68]	; (8004738 <HAL_ADC_IRQHandler+0x26c>)
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	e714      	b.n	8004522 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	0797      	lsls	r7, r2, #30
 80046fc:	d0a3      	beq.n	8004646 <HAL_ADC_IRQHandler+0x17a>
 80046fe:	e796      	b.n	800462e <HAL_ADC_IRQHandler+0x162>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004700:	f240 2221 	movw	r2, #545	; 0x221
 8004704:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004706:	07d2      	lsls	r2, r2, #31
 8004708:	f53f af0a 	bmi.w	8004520 <HAL_ADC_IRQHandler+0x54>
 800470c:	e7f1      	b.n	80046f2 <HAL_ADC_IRQHandler+0x226>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004710:	f043 0310 	orr.w	r3, r3, #16
 8004714:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	65a3      	str	r3, [r4, #88]	; 0x58
 800471e:	e718      	b.n	8004552 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <HAL_ADC_IRQHandler+0x278>)
 8004722:	e780      	b.n	8004626 <HAL_ADC_IRQHandler+0x15a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004724:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004726:	f043 0310 	orr.w	r3, r3, #16
 800472a:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	65a3      	str	r3, [r4, #88]	; 0x58
 8004734:	e742      	b.n	80045bc <HAL_ADC_IRQHandler+0xf0>
 8004736:	bf00      	nop
 8004738:	40022000 	.word	0x40022000
 800473c:	58026300 	.word	0x58026300
 8004740:	40022100 	.word	0x40022100
 8004744:	40022300 	.word	0x40022300

08004748 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004748:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800474a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8004752:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004754:	d11d      	bne.n	8004792 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004756:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800475e:	680a      	ldr	r2, [r1, #0]
 8004760:	f012 0f08 	tst.w	r2, #8
 8004764:	68ca      	ldr	r2, [r1, #12]
 8004766:	d01b      	beq.n	80047a0 <ADC_DMAConvCplt+0x58>
 8004768:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800476c:	d10d      	bne.n	800478a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800476e:	68ca      	ldr	r2, [r1, #12]
 8004770:	0494      	lsls	r4, r2, #18
 8004772:	d40a      	bmi.n	800478a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	04d1      	lsls	r1, r2, #19
 8004780:	d403      	bmi.n	800478a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fe6a 	bl	8002464 <HAL_ADC_ConvCpltCallback>
}
 8004790:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004792:	06d2      	lsls	r2, r2, #27
 8004794:	d40a      	bmi.n	80047ac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80047a0:	0790      	lsls	r0, r2, #30
 80047a2:	d0e7      	beq.n	8004774 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd fe5d 	bl	8002464 <HAL_ADC_ConvCpltCallback>
 80047aa:	e7f1      	b.n	8004790 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fe8b 	bl	80044c8 <HAL_ADC_ErrorCallback>
}
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80047b6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047b8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80047ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047be:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047c8:	f7ff fe7e 	bl	80044c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047cc:	bd08      	pop	{r3, pc}
 80047ce:	bf00      	nop

080047d0 <HAL_ADC_ConfigChannel>:
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80047d2:	2200      	movs	r2, #0
{
 80047d4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80047d6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80047d8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80047dc:	2a01      	cmp	r2, #1
 80047de:	f000 813a 	beq.w	8004a56 <HAL_ADC_ConfigChannel+0x286>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047e6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80047e8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ec:	6894      	ldr	r4, [r2, #8]
 80047ee:	0766      	lsls	r6, r4, #29
 80047f0:	f100 8099 	bmi.w	8004926 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80047f4:	680c      	ldr	r4, [r1, #0]
 80047f6:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	f040 809e 	bne.w	800493c <HAL_ADC_ConfigChannel+0x16c>
 8004800:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8004804:	fa00 f00c 	lsl.w	r0, r0, ip
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004808:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800480a:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800480c:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800480e:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8004810:	4034      	ands	r4, r6
 8004812:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004814:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004818:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 800481c:	40a6      	lsls	r6, r4
 800481e:	61d0      	str	r0, [r2, #28]
 8004820:	fa0c f404 	lsl.w	r4, ip, r4
 8004824:	5978      	ldr	r0, [r7, r5]
 8004826:	ea20 0006 	bic.w	r0, r0, r6
 800482a:	4320      	orrs	r0, r4
 800482c:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800482e:	6890      	ldr	r0, [r2, #8]
 8004830:	0745      	lsls	r5, r0, #29
 8004832:	f100 8081 	bmi.w	8004938 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004836:	6895      	ldr	r5, [r2, #8]
 8004838:	f015 0508 	ands.w	r5, r5, #8
 800483c:	d157      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x11e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800483e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004840:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004844:	2007      	movs	r0, #7
 8004846:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004848:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800484c:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004850:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8004854:	fa00 fe04 	lsl.w	lr, r0, r4
 8004858:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800485c:	4fc4      	ldr	r7, [pc, #784]	; (8004b70 <HAL_ADC_ConfigChannel+0x3a0>)
 800485e:	f85c 0006 	ldr.w	r0, [ip, r6]
 8004862:	ea20 000e 	bic.w	r0, r0, lr
 8004866:	4320      	orrs	r0, r4
 8004868:	f84c 0006 	str.w	r0, [ip, r6]
 800486c:	6838      	ldr	r0, [r7, #0]
 800486e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004872:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004876:	f000 8098 	beq.w	80049aa <HAL_ADC_ConfigChannel+0x1da>
 800487a:	68d0      	ldr	r0, [r2, #12]
 800487c:	68d6      	ldr	r6, [r2, #12]
 800487e:	f010 0f10 	tst.w	r0, #16
 8004882:	6948      	ldr	r0, [r1, #20]
 8004884:	f040 8107 	bne.w	8004a96 <HAL_ADC_ConfigChannel+0x2c6>
 8004888:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800488c:	0076      	lsls	r6, r6, #1
 800488e:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004892:	690f      	ldr	r7, [r1, #16]
 8004894:	2f04      	cmp	r7, #4
 8004896:	f000 80e1 	beq.w	8004a5c <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800489a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 800489e:	6808      	ldr	r0, [r1, #0]
 80048a0:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80048a4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80048a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80048ac:	ea40 000c 	orr.w	r0, r0, ip
 80048b0:	4330      	orrs	r0, r6
 80048b2:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048b6:	7e4f      	ldrb	r7, [r1, #25]
 80048b8:	690e      	ldr	r6, [r1, #16]
 80048ba:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048bc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80048c0:	bf0c      	ite	eq
 80048c2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80048c6:	2700      	movne	r7, #0
 80048c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80048cc:	4338      	orrs	r0, r7
 80048ce:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048d2:	7e0c      	ldrb	r4, [r1, #24]
 80048d4:	6908      	ldr	r0, [r1, #16]
 80048d6:	2c01      	cmp	r4, #1
 80048d8:	d104      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x114>
 80048da:	f000 001f 	and.w	r0, r0, #31
 80048de:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80048e2:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048e4:	6910      	ldr	r0, [r2, #16]
 80048e6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80048ea:	4305      	orrs	r5, r0
 80048ec:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048ee:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f0:	07c4      	lsls	r4, r0, #31
 80048f2:	d416      	bmi.n	8004922 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048f4:	68ce      	ldr	r6, [r1, #12]
 80048f6:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80048f8:	f006 0718 	and.w	r7, r6, #24
 80048fc:	4c9d      	ldr	r4, [pc, #628]	; (8004b74 <HAL_ADC_ConfigChannel+0x3a4>)
 80048fe:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8004902:	40fc      	lsrs	r4, r7
 8004904:	f3c0 0713 	ubfx	r7, r0, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004908:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8004b98 <HAL_ADC_ConfigChannel+0x3c8>
 800490c:	4004      	ands	r4, r0
 800490e:	ea25 0507 	bic.w	r5, r5, r7
 8004912:	4566      	cmp	r6, ip
 8004914:	ea44 0405 	orr.w	r4, r4, r5
 8004918:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 800491c:	d04d      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800491e:	2800      	cmp	r0, #0
 8004920:	db15      	blt.n	800494e <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004922:	2000      	movs	r0, #0
 8004924:	e003      	b.n	800492e <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004928:	f042 0220 	orr.w	r2, r2, #32
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004934:	b003      	add	sp, #12
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004938:	6890      	ldr	r0, [r2, #8]
 800493a:	e7d8      	b.n	80048ee <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004940:	b115      	cbz	r5, 8004948 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004942:	fab5 f585 	clz	r5, r5
 8004946:	40a8      	lsls	r0, r5
 8004948:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800494c:	e75c      	b.n	8004808 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800494e:	498a      	ldr	r1, [pc, #552]	; (8004b78 <HAL_ADC_ConfigChannel+0x3a8>)
 8004950:	428a      	cmp	r2, r1
 8004952:	f000 80c6 	beq.w	8004ae2 <HAL_ADC_ConfigChannel+0x312>
 8004956:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800495a:	428a      	cmp	r2, r1
 800495c:	f000 80c1 	beq.w	8004ae2 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004960:	4e86      	ldr	r6, [pc, #536]	; (8004b7c <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004962:	4d87      	ldr	r5, [pc, #540]	; (8004b80 <HAL_ADC_ConfigChannel+0x3b0>)
 8004964:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004966:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004968:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800496c:	43e4      	mvns	r4, r4
 800496e:	f004 0401 	and.w	r4, r4, #1
 8004972:	2c00      	cmp	r4, #0
 8004974:	f000 80c3 	beq.w	8004afe <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004978:	4c82      	ldr	r4, [pc, #520]	; (8004b84 <HAL_ADC_ConfigChannel+0x3b4>)
 800497a:	42a0      	cmp	r0, r4
 800497c:	f000 810e 	beq.w	8004b9c <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004980:	4c81      	ldr	r4, [pc, #516]	; (8004b88 <HAL_ADC_ConfigChannel+0x3b8>)
 8004982:	42a0      	cmp	r0, r4
 8004984:	f000 812d 	beq.w	8004be2 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004988:	4c80      	ldr	r4, [pc, #512]	; (8004b8c <HAL_ADC_ConfigChannel+0x3bc>)
 800498a:	42a0      	cmp	r0, r4
 800498c:	d1c9      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 800498e:	0249      	lsls	r1, r1, #9
 8004990:	d4c7      	bmi.n	8004922 <HAL_ADC_ConfigChannel+0x152>
 8004992:	497a      	ldr	r1, [pc, #488]	; (8004b7c <HAL_ADC_ConfigChannel+0x3ac>)
 8004994:	428a      	cmp	r2, r1
 8004996:	d1c4      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004998:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499a:	2000      	movs	r0, #0
 800499c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80049a0:	4332      	orrs	r2, r6
 80049a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80049a6:	60aa      	str	r2, [r5, #8]
}
 80049a8:	e7c1      	b.n	800492e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049aa:	68d6      	ldr	r6, [r2, #12]
 80049ac:	6948      	ldr	r0, [r1, #20]
 80049ae:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80049b2:	0076      	lsls	r6, r6, #1
 80049b4:	fa00 f606 	lsl.w	r6, r0, r6
 80049b8:	e76b      	b.n	8004892 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	d071      	beq.n	8004aa2 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	f000 80af 	beq.w	8004b26 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80049c8:	fab4 f484 	clz	r4, r4
 80049cc:	3401      	adds	r4, #1
 80049ce:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d2:	2c09      	cmp	r4, #9
 80049d4:	f240 80a7 	bls.w	8004b26 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049dc:	2d00      	cmp	r5, #0
 80049de:	f000 8114 	beq.w	8004c0a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80049e2:	fab5 f585 	clz	r5, r5
 80049e6:	3501      	adds	r5, #1
 80049e8:	06ad      	lsls	r5, r5, #26
 80049ea:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	f000 8107 	beq.w	8004c06 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80049f8:	2601      	movs	r6, #1
 80049fa:	fab4 f484 	clz	r4, r4
 80049fe:	4434      	add	r4, r6
 8004a00:	f004 041f 	and.w	r4, r4, #31
 8004a04:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a08:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f000 80f7 	beq.w	8004c02 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8004a14:	fab0 f480 	clz	r4, r0
 8004a18:	3401      	adds	r4, #1
 8004a1a:	f004 041f 	and.w	r4, r4, #31
 8004a1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004a22:	f1a4 001e 	sub.w	r0, r4, #30
 8004a26:	0500      	lsls	r0, r0, #20
 8004a28:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a2c:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8004a2e:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a32:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004a36:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a38:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8004a3a:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a3e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004a42:	fa0c fc00 	lsl.w	ip, ip, r0
 8004a46:	4086      	lsls	r6, r0
 8004a48:	597c      	ldr	r4, [r7, r5]
 8004a4a:	ea24 000c 	bic.w	r0, r4, ip
 8004a4e:	4330      	orrs	r0, r6
 8004a50:	5178      	str	r0, [r7, r5]
 8004a52:	6808      	ldr	r0, [r1, #0]
}
 8004a54:	e763      	b.n	800491e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8004a56:	2002      	movs	r0, #2
}
 8004a58:	b003      	add	sp, #12
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a5c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004a5e:	680d      	ldr	r5, [r1, #0]
 8004a60:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004a64:	06ac      	lsls	r4, r5, #26
 8004a66:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8004a6a:	d030      	beq.n	8004ace <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a6c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004a6e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004a72:	4284      	cmp	r4, r0
 8004a74:	d026      	beq.n	8004ac4 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a76:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004a78:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004a7c:	4284      	cmp	r4, r0
 8004a7e:	d02b      	beq.n	8004ad8 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a80:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004a82:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004a86:	4284      	cmp	r4, r0
 8004a88:	f47f af31 	bne.w	80048ee <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a8c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004a8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a92:	66d0      	str	r0, [r2, #108]	; 0x6c
 8004a94:	e72b      	b.n	80048ee <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a96:	0876      	lsrs	r6, r6, #1
 8004a98:	f006 0608 	and.w	r6, r6, #8
 8004a9c:	fa00 f606 	lsl.w	r6, r0, r6
 8004aa0:	e6f7      	b.n	8004892 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aa2:	0e80      	lsrs	r0, r0, #26
 8004aa4:	1c44      	adds	r4, r0, #1
 8004aa6:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aaa:	2e09      	cmp	r6, #9
 8004aac:	d82d      	bhi.n	8004b0a <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aae:	06a5      	lsls	r5, r4, #26
 8004ab0:	2401      	movs	r4, #1
 8004ab2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004ab6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004aba:	fa04 f606 	lsl.w	r6, r4, r6
 8004abe:	0500      	lsls	r0, r0, #20
 8004ac0:	4335      	orrs	r5, r6
 8004ac2:	e7b3      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ac4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004ac6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004aca:	6650      	str	r0, [r2, #100]	; 0x64
 8004acc:	e7d3      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ace:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004ad0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ad4:	6610      	str	r0, [r2, #96]	; 0x60
 8004ad6:	e7c9      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004ad8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004ada:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ade:	6690      	str	r0, [r2, #104]	; 0x68
 8004ae0:	e7ce      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ae2:	492b      	ldr	r1, [pc, #172]	; (8004b90 <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ae4:	4e24      	ldr	r6, [pc, #144]	; (8004b78 <HAL_ADC_ConfigChannel+0x3a8>)
 8004ae6:	4c2b      	ldr	r4, [pc, #172]	; (8004b94 <HAL_ADC_ConfigChannel+0x3c4>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ae8:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004aea:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aec:	68b7      	ldr	r7, [r6, #8]
 8004aee:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004af0:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004af4:	433c      	orrs	r4, r7
 8004af6:	43e4      	mvns	r4, r4
 8004af8:	f004 0401 	and.w	r4, r4, #1
 8004afc:	e739      	b.n	8004972 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004afe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004b00:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b02:	f042 0220 	orr.w	r2, r2, #32
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004b08:	e711      	b.n	800492e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b0a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004b0e:	2701      	movs	r7, #1
 8004b10:	06a5      	lsls	r5, r4, #26
 8004b12:	381e      	subs	r0, #30
 8004b14:	fa07 f606 	lsl.w	r6, r7, r6
 8004b18:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004b1c:	0500      	lsls	r0, r0, #20
 8004b1e:	4335      	orrs	r5, r6
 8004b20:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004b24:	e782      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b26:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d075      	beq.n	8004c1a <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8004b2e:	fab5 f585 	clz	r5, r5
 8004b32:	3501      	adds	r5, #1
 8004b34:	06ad      	lsls	r5, r5, #26
 8004b36:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d069      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004b42:	2601      	movs	r6, #1
 8004b44:	fab4 f484 	clz	r4, r4
 8004b48:	4434      	add	r4, r6
 8004b4a:	f004 041f 	and.w	r4, r4, #31
 8004b4e:	fa06 f404 	lsl.w	r4, r6, r4
 8004b52:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d059      	beq.n	8004c10 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8004b5c:	fab0 f480 	clz	r4, r0
 8004b60:	3401      	adds	r4, #1
 8004b62:	f004 041f 	and.w	r4, r4, #31
 8004b66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004b6a:	0520      	lsls	r0, r4, #20
 8004b6c:	e75e      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x25c>
 8004b6e:	bf00      	nop
 8004b70:	5c001000 	.word	0x5c001000
 8004b74:	000fffff 	.word	0x000fffff
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	58026000 	.word	0x58026000
 8004b80:	58026300 	.word	0x58026300
 8004b84:	cb840000 	.word	0xcb840000
 8004b88:	c7520000 	.word	0xc7520000
 8004b8c:	cfb80000 	.word	0xcfb80000
 8004b90:	40022300 	.word	0x40022300
 8004b94:	40022100 	.word	0x40022100
 8004b98:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b9c:	0208      	lsls	r0, r1, #8
 8004b9e:	f53f aec0 	bmi.w	8004922 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ba2:	491f      	ldr	r1, [pc, #124]	; (8004c20 <HAL_ADC_ConfigChannel+0x450>)
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	f47f aebc 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <HAL_ADC_ConfigChannel+0x454>)
 8004bac:	481e      	ldr	r0, [pc, #120]	; (8004c28 <HAL_ADC_ConfigChannel+0x458>)
 8004bae:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004bb0:	68a9      	ldr	r1, [r5, #8]
 8004bb2:	0992      	lsrs	r2, r2, #6
 8004bb4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004bb8:	fba0 0202 	umull	r0, r2, r0, r2
 8004bbc:	4331      	orrs	r1, r6
 8004bbe:	0992      	lsrs	r2, r2, #6
 8004bc0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004bc4:	3201      	adds	r2, #1
 8004bc6:	60a9      	str	r1, [r5, #8]
 8004bc8:	0052      	lsls	r2, r2, #1
 8004bca:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004bcc:	9a01      	ldr	r2, [sp, #4]
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	f43f aea7 	beq.w	8004922 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8004bd4:	9a01      	ldr	r2, [sp, #4]
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004bda:	9a01      	ldr	r2, [sp, #4]
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d1f9      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x404>
 8004be0:	e69f      	b.n	8004922 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8004be6:	f47f ae9c 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bea:	490d      	ldr	r1, [pc, #52]	; (8004c20 <HAL_ADC_ConfigChannel+0x450>)
 8004bec:	428a      	cmp	r2, r1
 8004bee:	f47f ae98 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x152>
 8004bf2:	68aa      	ldr	r2, [r5, #8]
 8004bf4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004bf8:	4332      	orrs	r2, r6
 8004bfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004bfe:	60aa      	str	r2, [r5, #8]
}
 8004c00:	e695      	b.n	800492e <HAL_ADC_ConfigChannel+0x15e>
 8004c02:	480a      	ldr	r0, [pc, #40]	; (8004c2c <HAL_ADC_ConfigChannel+0x45c>)
 8004c04:	e712      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x25c>
 8004c06:	2402      	movs	r4, #2
 8004c08:	e6fe      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x238>
 8004c0a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004c0e:	e6ee      	b.n	80049ee <HAL_ADC_ConfigChannel+0x21e>
 8004c10:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004c14:	e70a      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x25c>
 8004c16:	2402      	movs	r4, #2
 8004c18:	e79b      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x382>
 8004c1a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004c1e:	e78c      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x36a>
 8004c20:	58026000 	.word	0x58026000
 8004c24:	240001ec 	.word	0x240001ec
 8004c28:	053e2d63 	.word	0x053e2d63
 8004c2c:	fe500000 	.word	0xfe500000

08004c30 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8004c30:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8004c34:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004c36:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8004c38:	2a01      	cmp	r2, #1
 8004c3a:	f000 80e8 	beq.w	8004e0e <HAL_ADC_AnalogWDGConfig+0x1de>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c3e:	681a      	ldr	r2, [r3, #0]
{
 8004c40:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8004c42:	2401      	movs	r4, #1
 8004c44:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c48:	6894      	ldr	r4, [r2, #8]
 8004c4a:	0765      	lsls	r5, r4, #29
 8004c4c:	d42a      	bmi.n	8004ca4 <HAL_ADC_AnalogWDGConfig+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c4e:	6894      	ldr	r4, [r2, #8]
 8004c50:	0724      	lsls	r4, r4, #28
 8004c52:	d428      	bmi.n	8004ca6 <HAL_ADC_AnalogWDGConfig+0x76>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004c54:	680c      	ldr	r4, [r1, #0]
 8004c56:	4dc5      	ldr	r5, [pc, #788]	; (8004f6c <HAL_ADC_AnalogWDGConfig+0x33c>)
 8004c58:	42ac      	cmp	r4, r5
 8004c5a:	f000 8094 	beq.w	8004d86 <HAL_ADC_AnalogWDGConfig+0x156>
      switch (AnalogWDGConfig->WatchdogMode)
 8004c5e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004c62:	d030      	beq.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
 8004c64:	d829      	bhi.n	8004cba <HAL_ADC_AnalogWDGConfig+0x8a>
 8004c66:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
 8004c6c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c70:	d029      	beq.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
 8004c72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004c76:	d026      	beq.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004c78:	f004 0c01 	and.w	ip, r4, #1
  MODIFY_REG(*preg,
 8004c7c:	4ebc      	ldr	r6, [pc, #752]	; (8004f70 <HAL_ADC_AnalogWDGConfig+0x340>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004c7e:	f3c4 5501 	ubfx	r5, r4, #20, #2
 8004c82:	f102 000c 	add.w	r0, r2, #12
 8004c86:	ea4f 07cc 	mov.w	r7, ip, lsl #3
  MODIFY_REG(*preg,
 8004c8a:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004c8c:	eb07 040c 	add.w	r4, r7, ip
 8004c90:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  MODIFY_REG(*preg,
 8004c94:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004c98:	ea25 0506 	bic.w	r5, r5, r6
 8004c9c:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8004ca0:	680c      	ldr	r4, [r1, #0]
}
 8004ca2:	e023      	b.n	8004cec <HAL_ADC_AnalogWDGConfig+0xbc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ca4:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004ca8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004caa:	f042 0220 	orr.w	r2, r2, #32
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8004cb8:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004cba:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004cbe:	d002      	beq.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
 8004cc0:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004cc4:	d1d8      	bne.n	8004c78 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004cc6:	48ab      	ldr	r0, [pc, #684]	; (8004f74 <HAL_ADC_AnalogWDGConfig+0x344>)
 8004cc8:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004cca:	6888      	ldr	r0, [r1, #8]
 8004ccc:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004cd0:	f000 80d7 	beq.w	8004e82 <HAL_ADC_AnalogWDGConfig+0x252>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	f040 80eb 	bne.w	8004eb0 <HAL_ADC_AnalogWDGConfig+0x280>
 8004cda:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004cde:	2501      	movs	r5, #1
 8004ce0:	4085      	lsls	r5, r0
 8004ce2:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8004ce6:	4328      	orrs	r0, r5
 8004ce8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004cec:	48a2      	ldr	r0, [pc, #648]	; (8004f78 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004cee:	6800      	ldr	r0, [r0, #0]
 8004cf0:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004cf4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004cf8:	68d0      	ldr	r0, [r2, #12]
 8004cfa:	f000 80b0 	beq.w	8004e5e <HAL_ADC_AnalogWDGConfig+0x22e>
 8004cfe:	f010 0f10 	tst.w	r0, #16
 8004d02:	690d      	ldr	r5, [r1, #16]
 8004d04:	68d0      	ldr	r0, [r2, #12]
 8004d06:	f040 80b1 	bne.w	8004e6c <HAL_ADC_AnalogWDGConfig+0x23c>
 8004d0a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004d0e:	0040      	lsls	r0, r0, #1
 8004d10:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004d14:	4d98      	ldr	r5, [pc, #608]	; (8004f78 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004d16:	682d      	ldr	r5, [r5, #0]
 8004d18:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
 8004d1c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8004d20:	f000 8096 	beq.w	8004e50 <HAL_ADC_AnalogWDGConfig+0x220>
 8004d24:	68d5      	ldr	r5, [r2, #12]
 8004d26:	68d6      	ldr	r6, [r2, #12]
 8004d28:	f015 0f10 	tst.w	r5, #16
 8004d2c:	694d      	ldr	r5, [r1, #20]
 8004d2e:	f040 80a3 	bne.w	8004e78 <HAL_ADC_AnalogWDGConfig+0x248>
 8004d32:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004d36:	0076      	lsls	r6, r6, #1
 8004d38:	40b5      	lsls	r5, r6
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004d3a:	4e8e      	ldr	r6, [pc, #568]	; (8004f74 <HAL_ADC_AnalogWDGConfig+0x344>)
 8004d3c:	42b4      	cmp	r4, r6
 8004d3e:	d068      	beq.n	8004e12 <HAL_ADC_AnalogWDGConfig+0x1e2>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004d40:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004d44:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004d48:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004d4c:	4325      	orrs	r5, r4
 8004d4e:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004d52:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8004d56:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004d5a:	4320      	orrs	r0, r4
 8004d5c:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004d60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004d62:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004d66:	6558      	str	r0, [r3, #84]	; 0x54
 8004d68:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004d6a:	7b09      	ldrb	r1, [r1, #12]
 8004d6c:	2901      	cmp	r1, #1
 8004d6e:	f000 8099 	beq.w	8004ea4 <HAL_ADC_AnalogWDGConfig+0x274>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d72:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d74:	2000      	movs	r0, #0
 8004d76:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004d7a:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004d82:	bcf0      	pop	{r4, r5, r6, r7}
 8004d84:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004d86:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004d8a:	f000 8109 	beq.w	8004fa0 <HAL_ADC_AnalogWDGConfig+0x370>
 8004d8e:	d82b      	bhi.n	8004de8 <HAL_ADC_AnalogWDGConfig+0x1b8>
 8004d90:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004d94:	f000 80f9 	beq.w	8004f8a <HAL_ADC_AnalogWDGConfig+0x35a>
 8004d98:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004d9c:	d119      	bne.n	8004dd2 <HAL_ADC_AnalogWDGConfig+0x1a2>
  MODIFY_REG(*preg,
 8004d9e:	68d4      	ldr	r4, [r2, #12]
 8004da0:	4876      	ldr	r0, [pc, #472]	; (8004f7c <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004da2:	4020      	ands	r0, r4
 8004da4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8004da8:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004daa:	4873      	ldr	r0, [pc, #460]	; (8004f78 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004dac:	6800      	ldr	r0, [r0, #0]
 8004dae:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004db2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004db6:	68d0      	ldr	r0, [r2, #12]
 8004db8:	f000 8083 	beq.w	8004ec2 <HAL_ADC_AnalogWDGConfig+0x292>
 8004dbc:	f010 0f10 	tst.w	r0, #16
 8004dc0:	690d      	ldr	r5, [r1, #16]
 8004dc2:	68d0      	ldr	r0, [r2, #12]
 8004dc4:	f040 80b9 	bne.w	8004f3a <HAL_ADC_AnalogWDGConfig+0x30a>
 8004dc8:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004dcc:	0040      	lsls	r0, r0, #1
 8004dce:	4085      	lsls	r5, r0
 8004dd0:	e07c      	b.n	8004ecc <HAL_ADC_AnalogWDGConfig+0x29c>
      switch (AnalogWDGConfig->WatchdogMode)
 8004dd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004dd6:	f040 80d3 	bne.w	8004f80 <HAL_ADC_AnalogWDGConfig+0x350>
 8004dda:	68d4      	ldr	r4, [r2, #12]
 8004ddc:	4867      	ldr	r0, [pc, #412]	; (8004f7c <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004dde:	4020      	ands	r0, r4
 8004de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004de4:	60d0      	str	r0, [r2, #12]
}
 8004de6:	e7e0      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
 8004de8:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004dec:	f000 80e3 	beq.w	8004fb6 <HAL_ADC_AnalogWDGConfig+0x386>
 8004df0:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004df4:	f040 80c4 	bne.w	8004f80 <HAL_ADC_AnalogWDGConfig+0x350>
  MODIFY_REG(*preg,
 8004df8:	68d5      	ldr	r5, [r2, #12]
 8004dfa:	6888      	ldr	r0, [r1, #8]
 8004dfc:	4c5f      	ldr	r4, [pc, #380]	; (8004f7c <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004dfe:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004e02:	402c      	ands	r4, r5
 8004e04:	4320      	orrs	r0, r4
 8004e06:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8004e0a:	60d0      	str	r0, [r2, #12]
}
 8004e0c:	e7cd      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
  __HAL_LOCK(hadc);
 8004e0e:	2002      	movs	r0, #2
}
 8004e10:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004e12:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004e16:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004e1a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004e1e:	4325      	orrs	r5, r4
 8004e20:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004e24:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8004e28:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004e2c:	4320      	orrs	r0, r4
 8004e2e:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e32:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e34:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8004e38:	6558      	str	r0, [r3, #84]	; 0x54
 8004e3a:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004e3c:	7b09      	ldrb	r1, [r1, #12]
 8004e3e:	2901      	cmp	r1, #1
 8004e40:	f000 808d 	beq.w	8004f5e <HAL_ADC_AnalogWDGConfig+0x32e>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004e44:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e46:	2000      	movs	r0, #0
 8004e48:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004e4c:	6051      	str	r1, [r2, #4]
}
 8004e4e:	e72f      	b.n	8004cb0 <HAL_ADC_AnalogWDGConfig+0x80>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004e50:	68d6      	ldr	r6, [r2, #12]
 8004e52:	694d      	ldr	r5, [r1, #20]
 8004e54:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004e58:	0076      	lsls	r6, r6, #1
 8004e5a:	40b5      	lsls	r5, r6
 8004e5c:	e76d      	b.n	8004d3a <HAL_ADC_AnalogWDGConfig+0x10a>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004e5e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004e62:	690d      	ldr	r5, [r1, #16]
 8004e64:	0040      	lsls	r0, r0, #1
 8004e66:	fa05 f000 	lsl.w	r0, r5, r0
 8004e6a:	e753      	b.n	8004d14 <HAL_ADC_AnalogWDGConfig+0xe4>
 8004e6c:	0840      	lsrs	r0, r0, #1
 8004e6e:	f000 0008 	and.w	r0, r0, #8
 8004e72:	fa05 f000 	lsl.w	r0, r5, r0
 8004e76:	e74d      	b.n	8004d14 <HAL_ADC_AnalogWDGConfig+0xe4>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004e78:	0876      	lsrs	r6, r6, #1
 8004e7a:	f006 0608 	and.w	r6, r6, #8
 8004e7e:	40b5      	lsls	r5, r6
 8004e80:	e75b      	b.n	8004d3a <HAL_ADC_AnalogWDGConfig+0x10a>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	d064      	beq.n	8004f50 <HAL_ADC_AnalogWDGConfig+0x320>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f000 809a 	beq.w	8004fc4 <HAL_ADC_AnalogWDGConfig+0x394>
  return __builtin_clz(value);
 8004e90:	fab0 f080 	clz	r0, r0
 8004e94:	2501      	movs	r5, #1
 8004e96:	4085      	lsls	r5, r0
 8004e98:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8004e9c:	4328      	orrs	r0, r5
 8004e9e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8004ea2:	e723      	b.n	8004cec <HAL_ADC_AnalogWDGConfig+0xbc>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004ea4:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004eac:	6051      	str	r1, [r2, #4]
}
 8004eae:	e6ff      	b.n	8004cb0 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d050      	beq.n	8004f5a <HAL_ADC_AnalogWDGConfig+0x32a>
  return __builtin_clz(value);
 8004eb8:	fab0 f080 	clz	r0, r0
 8004ebc:	2501      	movs	r5, #1
 8004ebe:	4085      	lsls	r5, r0
 8004ec0:	e70f      	b.n	8004ce2 <HAL_ADC_AnalogWDGConfig+0xb2>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004ec2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004ec6:	690d      	ldr	r5, [r1, #16]
 8004ec8:	0040      	lsls	r0, r0, #1
 8004eca:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004ecc:	482a      	ldr	r0, [pc, #168]	; (8004f78 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004ece:	6800      	ldr	r0, [r0, #0]
 8004ed0:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004ed4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004ed8:	68d0      	ldr	r0, [r2, #12]
 8004eda:	d00a      	beq.n	8004ef2 <HAL_ADC_AnalogWDGConfig+0x2c2>
 8004edc:	f010 0f10 	tst.w	r0, #16
 8004ee0:	694c      	ldr	r4, [r1, #20]
 8004ee2:	68d0      	ldr	r0, [r2, #12]
 8004ee4:	d12e      	bne.n	8004f44 <HAL_ADC_AnalogWDGConfig+0x314>
 8004ee6:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004eea:	0040      	lsls	r0, r0, #1
 8004eec:	fa04 f000 	lsl.w	r0, r4, r0
 8004ef0:	e005      	b.n	8004efe <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004ef2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004ef6:	694c      	ldr	r4, [r1, #20]
 8004ef8:	0040      	lsls	r0, r0, #1
 8004efa:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004efe:	6a14      	ldr	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004f00:	2680      	movs	r6, #128	; 0x80
 8004f02:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004f06:	4304      	orrs	r4, r0
 8004f08:	6214      	str	r4, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004f0a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004f0c:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8004f10:	4328      	orrs	r0, r5
 8004f12:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f14:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f16:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004f1a:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	6016      	str	r6, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004f20:	7b09      	ldrb	r1, [r1, #12]
 8004f22:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004f24:	6851      	ldr	r1, [r2, #4]
 8004f26:	bf0c      	ite	eq
 8004f28:	4331      	orreq	r1, r6
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004f2a:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8004f2e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004f36:	bcf0      	pop	{r4, r5, r6, r7}
 8004f38:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004f3a:	0840      	lsrs	r0, r0, #1
 8004f3c:	f000 0008 	and.w	r0, r0, #8
 8004f40:	4085      	lsls	r5, r0
 8004f42:	e7c3      	b.n	8004ecc <HAL_ADC_AnalogWDGConfig+0x29c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004f44:	0840      	lsrs	r0, r0, #1
 8004f46:	f000 0008 	and.w	r0, r0, #8
 8004f4a:	fa04 f000 	lsl.w	r0, r4, r0
 8004f4e:	e7d6      	b.n	8004efe <HAL_ADC_AnalogWDGConfig+0x2ce>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004f50:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004f54:	2501      	movs	r5, #1
 8004f56:	4085      	lsls	r5, r0
 8004f58:	e79e      	b.n	8004e98 <HAL_ADC_AnalogWDGConfig+0x268>
 8004f5a:	2501      	movs	r5, #1
 8004f5c:	e6c1      	b.n	8004ce2 <HAL_ADC_AnalogWDGConfig+0xb2>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004f5e:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004f66:	6051      	str	r1, [r2, #4]
}
 8004f68:	e6a2      	b.n	8004cb0 <HAL_ADC_AnalogWDGConfig+0x80>
 8004f6a:	bf00      	nop
 8004f6c:	7dc00000 	.word	0x7dc00000
 8004f70:	7dcfffff 	.word	0x7dcfffff
 8004f74:	001fffff 	.word	0x001fffff
 8004f78:	5c001000 	.word	0x5c001000
 8004f7c:	823fffff 	.word	0x823fffff
  MODIFY_REG(*preg,
 8004f80:	68d4      	ldr	r4, [r2, #12]
 8004f82:	4811      	ldr	r0, [pc, #68]	; (8004fc8 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004f84:	4020      	ands	r0, r4
 8004f86:	60d0      	str	r0, [r2, #12]
}
 8004f88:	e70f      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004f8a:	68d5      	ldr	r5, [r2, #12]
 8004f8c:	6888      	ldr	r0, [r1, #8]
 8004f8e:	4c0e      	ldr	r4, [pc, #56]	; (8004fc8 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004f90:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004f94:	402c      	ands	r4, r5
 8004f96:	4320      	orrs	r0, r4
 8004f98:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8004f9c:	60d0      	str	r0, [r2, #12]
}
 8004f9e:	e704      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004fa0:	68d5      	ldr	r5, [r2, #12]
 8004fa2:	6888      	ldr	r0, [r1, #8]
 8004fa4:	4c08      	ldr	r4, [pc, #32]	; (8004fc8 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004fa6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004faa:	402c      	ands	r4, r5
 8004fac:	4320      	orrs	r0, r4
 8004fae:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8004fb2:	60d0      	str	r0, [r2, #12]
}
 8004fb4:	e6f9      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004fb6:	68d4      	ldr	r4, [r2, #12]
 8004fb8:	4803      	ldr	r0, [pc, #12]	; (8004fc8 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004fba:	4020      	ands	r0, r4
 8004fbc:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8004fc0:	60d0      	str	r0, [r2, #12]
}
 8004fc2:	e6f2      	b.n	8004daa <HAL_ADC_AnalogWDGConfig+0x17a>
 8004fc4:	2501      	movs	r5, #1
 8004fc6:	e767      	b.n	8004e98 <HAL_ADC_AnalogWDGConfig+0x268>
 8004fc8:	823fffff 	.word	0x823fffff

08004fcc <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fcc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	07d1      	lsls	r1, r2, #31
 8004fd2:	d501      	bpl.n	8004fd8 <ADC_Enable+0xc>
  return HAL_OK;
 8004fd4:	2000      	movs	r0, #0
}
 8004fd6:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <ADC_Enable+0x94>)
 8004fdc:	4211      	tst	r1, r2
{
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004fe2:	d008      	beq.n	8004ff6 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe4:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8004fe6:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff0:	4303      	orrs	r3, r0
 8004ff2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <ADC_Enable+0x98>)
 8004ffa:	400a      	ands	r2, r1
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005002:	f7ff fa0f 	bl	8004424 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	4a17      	ldr	r2, [pc, #92]	; (8005068 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800500a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800500c:	4293      	cmp	r3, r2
 800500e:	d01f      	beq.n	8005050 <ADC_Enable+0x84>
 8005010:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005014:	4293      	cmp	r3, r2
 8005016:	d01b      	beq.n	8005050 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <ADC_Enable+0xa0>)
 800501a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	07d6      	lsls	r6, r2, #31
 8005020:	d414      	bmi.n	800504c <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8005022:	4e10      	ldr	r6, [pc, #64]	; (8005064 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005024:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005026:	07d0      	lsls	r0, r2, #31
 8005028:	d404      	bmi.n	8005034 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4032      	ands	r2, r6
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005034:	f7ff f9f6 	bl	8004424 <HAL_GetTick>
 8005038:	1b43      	subs	r3, r0, r5
 800503a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800503c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800503e:	d902      	bls.n	8005046 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	07d1      	lsls	r1, r2, #31
 8005044:	d5ce      	bpl.n	8004fe4 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	07d2      	lsls	r2, r2, #31
 800504a:	d5eb      	bpl.n	8005024 <ADC_Enable+0x58>
  return HAL_OK;
 800504c:	2000      	movs	r0, #0
}
 800504e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005050:	4a07      	ldr	r2, [pc, #28]	; (8005070 <ADC_Enable+0xa4>)
 8005052:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005054:	06d2      	lsls	r2, r2, #27
 8005056:	d0e1      	beq.n	800501c <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005058:	4a06      	ldr	r2, [pc, #24]	; (8005074 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800505a:	4293      	cmp	r3, r2
 800505c:	d1de      	bne.n	800501c <ADC_Enable+0x50>
 800505e:	e7f5      	b.n	800504c <ADC_Enable+0x80>
 8005060:	8000003f 	.word	0x8000003f
 8005064:	7fffffc0 	.word	0x7fffffc0
 8005068:	40022000 	.word	0x40022000
 800506c:	58026300 	.word	0x58026300
 8005070:	40022300 	.word	0x40022300
 8005074:	40022100 	.word	0x40022100

08005078 <ADC_Disable>:
{
 8005078:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800507a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	0795      	lsls	r5, r2, #30
 8005080:	d502      	bpl.n	8005088 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005082:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8005084:	2000      	movs	r0, #0
}
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800508a:	07d4      	lsls	r4, r2, #31
 800508c:	d529      	bpl.n	80050e2 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	4604      	mov	r4, r0
 8005092:	f002 020d 	and.w	r2, r2, #13
 8005096:	2a01      	cmp	r2, #1
 8005098:	d008      	beq.n	80050ac <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800509a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800509c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800509e:	f043 0310 	orr.w	r3, r3, #16
 80050a2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050a6:	4303      	orrs	r3, r0
 80050a8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80050ac:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050ae:	2103      	movs	r1, #3
 80050b0:	4a0d      	ldr	r2, [pc, #52]	; (80050e8 <ADC_Disable+0x70>)
 80050b2:	4002      	ands	r2, r0
 80050b4:	f042 0202 	orr.w	r2, r2, #2
 80050b8:	609a      	str	r2, [r3, #8]
 80050ba:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80050bc:	f7ff f9b2 	bl	8004424 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050c0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80050c2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d50b      	bpl.n	80050e2 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050ca:	f7ff f9ab 	bl	8004424 <HAL_GetTick>
 80050ce:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050d0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050d2:	2802      	cmp	r0, #2
 80050d4:	d902      	bls.n	80050dc <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	07d2      	lsls	r2, r2, #31
 80050da:	d4de      	bmi.n	800509a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	07db      	lsls	r3, r3, #31
 80050e0:	d4f3      	bmi.n	80050ca <ADC_Disable+0x52>
  return HAL_OK;
 80050e2:	2000      	movs	r0, #0
}
 80050e4:	bd38      	pop	{r3, r4, r5, pc}
 80050e6:	bf00      	nop
 80050e8:	7fffffc0 	.word	0x7fffffc0

080050ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050ee:	4a5a      	ldr	r2, [pc, #360]	; (8005258 <ADC_ConfigureBoostMode+0x16c>)
{
 80050f0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d029      	beq.n	800514c <ADC_ConfigureBoostMode+0x60>
 80050f8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d025      	beq.n	800514c <ADC_ConfigureBoostMode+0x60>
 8005100:	4b56      	ldr	r3, [pc, #344]	; (800525c <ADC_ConfigureBoostMode+0x170>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b333      	cbz	r3, 800515e <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005110:	f003 fd32 	bl	8008b78 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005114:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005116:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800511c:	f000 808b 	beq.w	8005236 <ADC_ConfigureBoostMode+0x14a>
 8005120:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005124:	d06f      	beq.n	8005206 <ADC_ConfigureBoostMode+0x11a>
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	f000 8084 	beq.w	8005236 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800512e:	f7ff f991 	bl	8004454 <HAL_GetREVID>
 8005132:	f241 0303 	movw	r3, #4099	; 0x1003
 8005136:	4298      	cmp	r0, r3
 8005138:	d84e      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 800513a:	4b49      	ldr	r3, [pc, #292]	; (8005260 <ADC_ConfigureBoostMode+0x174>)
 800513c:	429d      	cmp	r5, r3
 800513e:	d92d      	bls.n	800519c <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	6893      	ldr	r3, [r2, #8]
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800514a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <ADC_ConfigureBoostMode+0x178>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1d8      	bne.n	8005110 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800515e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005162:	f004 fe3d 	bl	8009de0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005166:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005168:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800516a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800516e:	d06c      	beq.n	800524a <ADC_ConfigureBoostMode+0x15e>
 8005170:	d808      	bhi.n	8005184 <ADC_ConfigureBoostMode+0x98>
 8005172:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005176:	d050      	beq.n	800521a <ADC_ConfigureBoostMode+0x12e>
 8005178:	d916      	bls.n	80051a8 <ADC_ConfigureBoostMode+0xbc>
 800517a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517e:	d1d6      	bne.n	800512e <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8005180:	0945      	lsrs	r5, r0, #5
        break;
 8005182:	e7d4      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8005184:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005188:	d045      	beq.n	8005216 <ADC_ConfigureBoostMode+0x12a>
 800518a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800518e:	d1ce      	bne.n	800512e <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005190:	f7ff f960 	bl	8004454 <HAL_GetREVID>
 8005194:	f241 0303 	movw	r3, #4099	; 0x1003
 8005198:	4298      	cmp	r0, r3
 800519a:	d840      	bhi.n	800521e <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	6893      	ldr	r3, [r2, #8]
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	6093      	str	r3, [r2, #8]
}
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ac:	d006      	beq.n	80051bc <ADC_ConfigureBoostMode+0xd0>
 80051ae:	d90a      	bls.n	80051c6 <ADC_ConfigureBoostMode+0xda>
 80051b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051b4:	d002      	beq.n	80051bc <ADC_ConfigureBoostMode+0xd0>
 80051b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051ba:	d1b8      	bne.n	800512e <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80051bc:	0c9b      	lsrs	r3, r3, #18
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80051c4:	e7b3      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80051c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051ca:	d0f7      	beq.n	80051bc <ADC_ConfigureBoostMode+0xd0>
 80051cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80051d4:	d0f2      	beq.n	80051bc <ADC_ConfigureBoostMode+0xd0>
 80051d6:	e7aa      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 80051d8:	4b23      	ldr	r3, [pc, #140]	; (8005268 <ADC_ConfigureBoostMode+0x17c>)
 80051da:	429d      	cmp	r5, r3
 80051dc:	d805      	bhi.n	80051ea <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	6893      	ldr	r3, [r2, #8]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	6093      	str	r3, [r2, #8]
}
 80051e8:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <ADC_ConfigureBoostMode+0x180>)
 80051ec:	429d      	cmp	r5, r3
 80051ee:	d91a      	bls.n	8005226 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 80051f0:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051f2:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 80051f4:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051f6:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 80051f8:	d829      	bhi.n	800524e <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005202:	6093      	str	r3, [r2, #8]
}
 8005204:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8005206:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005208:	f7ff f924 	bl	8004454 <HAL_GetREVID>
 800520c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005210:	4298      	cmp	r0, r3
 8005212:	d8e1      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0xec>
 8005214:	e791      	b.n	800513a <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8005216:	09c5      	lsrs	r5, r0, #7
        break;
 8005218:	e789      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 800521a:	0905      	lsrs	r5, r0, #4
        break;
 800521c:	e787      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <ADC_ConfigureBoostMode+0x17c>)
 8005220:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8005224:	d2db      	bcs.n	80051de <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	6093      	str	r3, [r2, #8]
}
 8005234:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800523c:	f7ff f90a 	bl	8004454 <HAL_GetREVID>
 8005240:	f241 0303 	movw	r3, #4099	; 0x1003
 8005244:	4298      	cmp	r0, r3
 8005246:	d8c7      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0xec>
 8005248:	e777      	b.n	800513a <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 800524a:	0985      	lsrs	r5, r0, #6
        break;
 800524c:	e76f      	b.n	800512e <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800524e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005252:	6093      	str	r3, [r2, #8]
}
 8005254:	bd38      	pop	{r3, r4, r5, pc}
 8005256:	bf00      	nop
 8005258:	40022000 	.word	0x40022000
 800525c:	58026300 	.word	0x58026300
 8005260:	01312d00 	.word	0x01312d00
 8005264:	40022300 	.word	0x40022300
 8005268:	00bebc21 	.word	0x00bebc21
 800526c:	017d7841 	.word	0x017d7841
 8005270:	02faf081 	.word	0x02faf081

08005274 <HAL_ADC_Init>:
{
 8005274:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8005276:	2300      	movs	r3, #0
{
 8005278:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800527a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800527c:	2800      	cmp	r0, #0
 800527e:	f000 80d0 	beq.w	8005422 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005282:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005284:	4604      	mov	r4, r0
 8005286:	2d00      	cmp	r5, #0
 8005288:	f000 80ba 	beq.w	8005400 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800528c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800528e:	6893      	ldr	r3, [r2, #8]
 8005290:	009d      	lsls	r5, r3, #2
 8005292:	d503      	bpl.n	800529c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005294:	6891      	ldr	r1, [r2, #8]
 8005296:	4b71      	ldr	r3, [pc, #452]	; (800545c <HAL_ADC_Init+0x1e8>)
 8005298:	400b      	ands	r3, r1
 800529a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800529c:	6893      	ldr	r3, [r2, #8]
 800529e:	00d8      	lsls	r0, r3, #3
 80052a0:	d416      	bmi.n	80052d0 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a2:	4b6f      	ldr	r3, [pc, #444]	; (8005460 <HAL_ADC_Init+0x1ec>)
 80052a4:	4d6f      	ldr	r5, [pc, #444]	; (8005464 <HAL_ADC_Init+0x1f0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80052a8:	6890      	ldr	r0, [r2, #8]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	496e      	ldr	r1, [pc, #440]	; (8005468 <HAL_ADC_Init+0x1f4>)
 80052ae:	fba5 5303 	umull	r5, r3, r5, r3
 80052b2:	4001      	ands	r1, r0
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80052ba:	3301      	adds	r3, #1
 80052bc:	6091      	str	r1, [r2, #8]
 80052be:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	b12b      	cbz	r3, 80052d0 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f9      	bne.n	80052c4 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052d0:	6893      	ldr	r3, [r2, #8]
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	d424      	bmi.n	8005320 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80052d8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052da:	f043 0310 	orr.w	r3, r3, #16
 80052de:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052e2:	432b      	orrs	r3, r5
 80052e4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052e6:	6893      	ldr	r3, [r2, #8]
 80052e8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052ee:	d11d      	bne.n	800532c <HAL_ADC_Init+0xb8>
 80052f0:	06db      	lsls	r3, r3, #27
 80052f2:	d41b      	bmi.n	800532c <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 80052f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005300:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005302:	07de      	lsls	r6, r3, #31
 8005304:	d428      	bmi.n	8005358 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_ADC_Init+0x1f8>)
 8005308:	429a      	cmp	r2, r3
 800530a:	d017      	beq.n	800533c <HAL_ADC_Init+0xc8>
 800530c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005310:	429a      	cmp	r2, r3
 8005312:	d013      	beq.n	800533c <HAL_ADC_Init+0xc8>
 8005314:	4b56      	ldr	r3, [pc, #344]	; (8005470 <HAL_ADC_Init+0x1fc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	d41d      	bmi.n	8005358 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800531c:	4a55      	ldr	r2, [pc, #340]	; (8005474 <HAL_ADC_Init+0x200>)
 800531e:	e015      	b.n	800534c <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005320:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005322:	2500      	movs	r5, #0
 8005324:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005328:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800532a:	d0e1      	beq.n	80052f0 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800532e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005330:	f043 0310 	orr.w	r3, r3, #16
}
 8005334:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005336:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005338:	b002      	add	sp, #8
 800533a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800533c:	4a4b      	ldr	r2, [pc, #300]	; (800546c <HAL_ADC_Init+0x1f8>)
 800533e:	4b4e      	ldr	r3, [pc, #312]	; (8005478 <HAL_ADC_Init+0x204>)
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005344:	4313      	orrs	r3, r2
 8005346:	07d8      	lsls	r0, r3, #31
 8005348:	d406      	bmi.n	8005358 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800534a:	4a4c      	ldr	r2, [pc, #304]	; (800547c <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800534c:	6893      	ldr	r3, [r2, #8]
 800534e:	6861      	ldr	r1, [r4, #4]
 8005350:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005354:	430b      	orrs	r3, r1
 8005356:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005358:	f7ff f87c 	bl	8004454 <HAL_GetREVID>
 800535c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005360:	68a1      	ldr	r1, [r4, #8]
 8005362:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005364:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005366:	d851      	bhi.n	800540c <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005368:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800536a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800536c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800536e:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8005372:	4302      	orrs	r2, r0
 8005374:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005376:	2b01      	cmp	r3, #1
 8005378:	d103      	bne.n	8005382 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800537a:	6a23      	ldr	r3, [r4, #32]
 800537c:	3b01      	subs	r3, #1
 800537e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005384:	b123      	cbz	r3, 8005390 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005386:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800538a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800538c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800538e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	493b      	ldr	r1, [pc, #236]	; (8005480 <HAL_ADC_Init+0x20c>)
 8005394:	68d8      	ldr	r0, [r3, #12]
 8005396:	4001      	ands	r1, r0
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053a2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053a4:	d11c      	bne.n	80053e0 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053a6:	0712      	lsls	r2, r2, #28
 80053a8:	d41a      	bmi.n	80053e0 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	4a35      	ldr	r2, [pc, #212]	; (8005484 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053ae:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053b0:	400a      	ands	r2, r1
 80053b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053b4:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80053b8:	430a      	orrs	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80053bc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80053c0:	2a01      	cmp	r2, #1
 80053c2:	d03a      	beq.n	800543a <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80053cc:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80053ce:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80053d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80053d6:	430a      	orrs	r2, r1
 80053d8:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80053da:	f7ff fe87 	bl	80050ec <ADC_ConfigureBoostMode>
 80053de:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053e0:	68e2      	ldr	r2, [r4, #12]
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	d021      	beq.n	800542a <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e8:	f022 020f 	bic.w	r2, r2, #15
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80053f0:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	6563      	str	r3, [r4, #84]	; 0x54
}
 80053fc:	b002      	add	sp, #8
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8005400:	f7fe fbf6 	bl	8003bf0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005404:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8005406:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800540a:	e73f      	b.n	800528c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800540c:	2910      	cmp	r1, #16
 800540e:	d1ab      	bne.n	8005368 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005410:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005412:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005416:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800541a:	430a      	orrs	r2, r1
 800541c:	f042 021c 	orr.w	r2, r2, #28
 8005420:	e7a9      	b.n	8005376 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8005422:	2501      	movs	r5, #1
}
 8005424:	4628      	mov	r0, r5
 8005426:	b002      	add	sp, #8
 8005428:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800542a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800542c:	69a2      	ldr	r2, [r4, #24]
 800542e:	f021 010f 	bic.w	r1, r1, #15
 8005432:	3a01      	subs	r2, #1
 8005434:	430a      	orrs	r2, r1
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
 8005438:	e7d9      	b.n	80053ee <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800543a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800543e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8005440:	3901      	subs	r1, #1
 8005442:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005444:	4332      	orrs	r2, r6
 8005446:	691e      	ldr	r6, [r3, #16]
 8005448:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800544c:	490e      	ldr	r1, [pc, #56]	; (8005488 <HAL_ADC_Init+0x214>)
 800544e:	4302      	orrs	r2, r0
 8005450:	4031      	ands	r1, r6
 8005452:	430a      	orrs	r2, r1
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	e7b7      	b.n	80053cc <HAL_ADC_Init+0x158>
 800545c:	5fffffc0 	.word	0x5fffffc0
 8005460:	240001ec 	.word	0x240001ec
 8005464:	053e2d63 	.word	0x053e2d63
 8005468:	6fffffc0 	.word	0x6fffffc0
 800546c:	40022000 	.word	0x40022000
 8005470:	58026000 	.word	0x58026000
 8005474:	58026300 	.word	0x58026300
 8005478:	40022100 	.word	0x40022100
 800547c:	40022300 	.word	0x40022300
 8005480:	fff0c003 	.word	0xfff0c003
 8005484:	ffffbffc 	.word	0xffffbffc
 8005488:	fc00f81e 	.word	0xfc00f81e

0800548c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005490:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
{
 8005494:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005496:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 8005498:	2901      	cmp	r1, #1
  __IO uint32_t wait_loop_index = 0UL;
 800549a:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 800549c:	d03e      	beq.n	800551c <HAL_ADCEx_Calibration_Start+0x90>
 800549e:	2301      	movs	r3, #1
 80054a0:	4604      	mov	r4, r0
 80054a2:	4617      	mov	r7, r2
 80054a4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80054a8:	f7ff fde6 	bl	8005078 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 80054ae:	b9e0      	cbnz	r0, 80054ea <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 80054b0:	4e1c      	ldr	r6, [pc, #112]	; (8005524 <HAL_ADCEx_Calibration_Start+0x98>)
  MODIFY_REG(ADCx->CR,
 80054b2:	f007 4280 	and.w	r2, r7, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
    ADC_STATE_CLR_SET(hadc->State,
 80054bc:	401e      	ands	r6, r3
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <HAL_ADCEx_Calibration_Start+0x9c>)

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80054c0:	4f1a      	ldr	r7, [pc, #104]	; (800552c <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 80054c2:	f046 0602 	orr.w	r6, r6, #2
 80054c6:	6566      	str	r6, [r4, #84]	; 0x54
 80054c8:	688e      	ldr	r6, [r1, #8]
 80054ca:	4033      	ands	r3, r6
 80054cc:	4313      	orrs	r3, r2
 80054ce:	432b      	orrs	r3, r5
 80054d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054d6:	688b      	ldr	r3, [r1, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db0e      	blt.n	80054fa <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6563      	str	r3, [r4, #84]	; 0x54
 80054e8:	e002      	b.n	80054f0 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ea:	f043 0310 	orr.w	r3, r3, #16
 80054ee:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054f0:	2300      	movs	r3, #0
 80054f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80054f6:	b003      	add	sp, #12
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	3301      	adds	r3, #1
 80054fe:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005500:	9b01      	ldr	r3, [sp, #4]
 8005502:	42bb      	cmp	r3, r7
 8005504:	d3e7      	bcc.n	80054d6 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8005506:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005508:	2200      	movs	r2, #0
        return HAL_ERROR;
 800550a:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800550c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8005510:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8005514:	f043 0310 	orr.w	r3, r3, #16
 8005518:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800551a:	e7ec      	b.n	80054f6 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 800551c:	2002      	movs	r0, #2
}
 800551e:	b003      	add	sp, #12
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005522:	bf00      	nop
 8005524:	ffffeefd 	.word	0xffffeefd
 8005528:	3ffeffc0 	.word	0x3ffeffc0
 800552c:	25c3f800 	.word	0x25c3f800

08005530 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005534:	f8d0 9000 	ldr.w	r9, [r0]
{
 8005538:	b09b      	sub	sp, #108	; 0x6c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800553a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800553e:	f015 0504 	ands.w	r5, r5, #4
 8005542:	d116      	bne.n	8005572 <HAL_ADCEx_MultiModeStart_DMA+0x42>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005544:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005548:	4604      	mov	r4, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d011      	beq.n	8005572 <HAL_ADCEx_MultiModeStart_DMA+0x42>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800554e:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
    __HAL_LOCK(hadc);
 8005550:	2601      	movs	r6, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005552:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005554:	4599      	cmp	r9, r3
    __HAL_LOCK(hadc);
 8005556:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800555a:	9517      	str	r5, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800555c:	d00d      	beq.n	800557a <HAL_ADCEx_MultiModeStart_DMA+0x4a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800555e:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8005560:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 8005562:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005566:	f043 0320 	orr.w	r3, r3, #32
 800556a:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 800556c:	b01b      	add	sp, #108	; 0x6c
 800556e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005572:	2002      	movs	r0, #2
}
 8005574:	b01b      	add	sp, #108	; 0x6c
 8005576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800557a:	4d24      	ldr	r5, [pc, #144]	; (800560c <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
 800557c:	460f      	mov	r7, r1
 800557e:	4690      	mov	r8, r2
 8005580:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8005582:	f7ff fd23 	bl	8004fcc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005586:	b128      	cbz	r0, 8005594 <HAL_ADCEx_MultiModeStart_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8005588:	2300      	movs	r3, #0
 800558a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800558e:	b01b      	add	sp, #108	; 0x6c
 8005590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8005594:	a801      	add	r0, sp, #4
 8005596:	f7ff fd19 	bl	8004fcc <ADC_Enable>
 800559a:	4603      	mov	r3, r0
    if (tmp_hal_status == HAL_OK)
 800559c:	2800      	cmp	r0, #0
 800559e:	d1f3      	bne.n	8005588 <HAL_ADCEx_MultiModeStart_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 80055a0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 80055a6:	400a      	ands	r2, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055a8:	4e1a      	ldr	r6, [pc, #104]	; (8005614 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055aa:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005620 <HAL_ADCEx_MultiModeStart_DMA+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 80055ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80055b2:	4919      	ldr	r1, [pc, #100]	; (8005618 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      ADC_STATE_CLR_SET(hadc->State,
 80055b4:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80055b6:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055b8:	63c6      	str	r6, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055ba:	6826      	ldr	r6, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055bc:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055c0:	454e      	cmp	r6, r9
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80055c2:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055c4:	d01c      	beq.n	8005600 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80055c6:	42ae      	cmp	r6, r5
 80055c8:	d01a      	beq.n	8005600 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80055ca:	f8df c058 	ldr.w	ip, [pc, #88]	; 8005624 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055ce:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80055d0:	2500      	movs	r5, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80055d2:	4643      	mov	r3, r8
 80055d4:	463a      	mov	r2, r7
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055d6:	6031      	str	r1, [r6, #0]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80055d8:	f10c 010c 	add.w	r1, ip, #12
      __HAL_UNLOCK(hadc);
 80055dc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055e0:	6875      	ldr	r5, [r6, #4]
 80055e2:	f045 0510 	orr.w	r5, r5, #16
 80055e6:	6075      	str	r5, [r6, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80055e8:	f000 fe70 	bl	80062cc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80055ec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 80055f0:	6891      	ldr	r1, [r2, #8]
 80055f2:	400b      	ands	r3, r1
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	6093      	str	r3, [r2, #8]
}
 80055fa:	b01b      	add	sp, #108	; 0x6c
 80055fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005600:	f8df c024 	ldr.w	ip, [pc, #36]	; 8005628 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8005604:	e7e3      	b.n	80055ce <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8005606:	bf00      	nop
 8005608:	40022000 	.word	0x40022000
 800560c:	40022100 	.word	0x40022100
 8005610:	fffff0fe 	.word	0xfffff0fe
 8005614:	08004749 	.word	0x08004749
 8005618:	080047b5 	.word	0x080047b5
 800561c:	7fffffc0 	.word	0x7fffffc0
 8005620:	080044bd 	.word	0x080044bd
 8005624:	58026300 	.word	0x58026300
 8005628:	40022300 	.word	0x40022300

0800562c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop

08005638 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop

0800563c <HAL_ADCEx_EndOfSamplingCallback>:
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005640:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005642:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8005646:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005648:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800564a:	2a01      	cmp	r2, #1
 800564c:	d04d      	beq.n	80056ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800564e:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005650:	4c2b      	ldr	r4, [pc, #172]	; (8005700 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005652:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005654:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005656:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005658:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800565a:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 800565c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005660:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005662:	d008      	beq.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005664:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800566a:	f041 0120 	orr.w	r1, r1, #32
 800566e:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005670:	b01a      	add	sp, #104	; 0x68
 8005672:	bcf0      	pop	{r4, r5, r6, r7}
 8005674:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005676:	4c23      	ldr	r4, [pc, #140]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005678:	68a2      	ldr	r2, [r4, #8]
 800567a:	0752      	lsls	r2, r2, #29
 800567c:	d50b      	bpl.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800567e:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005682:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005684:	f042 0220 	orr.w	r2, r2, #32
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005690:	b01a      	add	sp, #104	; 0x68
 8005692:	bcf0      	pop	{r4, r5, r6, r7}
 8005694:	4770      	bx	lr
 8005696:	68a8      	ldr	r0, [r5, #8]
 8005698:	f010 0004 	ands.w	r0, r0, #4
 800569c:	d1f0      	bne.n	8005680 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800569e:	b1c6      	cbz	r6, 80056d2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80056a0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800570c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80056a4:	684f      	ldr	r7, [r1, #4]
 80056a6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80056aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80056ae:	433a      	orrs	r2, r7
 80056b0:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056b4:	68ad      	ldr	r5, [r5, #8]
 80056b6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056b8:	432a      	orrs	r2, r5
 80056ba:	07d4      	lsls	r4, r2, #31
 80056bc:	d413      	bmi.n	80056e6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80056be:	688a      	ldr	r2, [r1, #8]
 80056c0:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80056c4:	4910      	ldr	r1, [pc, #64]	; (8005708 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80056c6:	4316      	orrs	r6, r2
 80056c8:	4021      	ands	r1, r4
 80056ca:	430e      	orrs	r6, r1
 80056cc:	f8cc 6008 	str.w	r6, [ip, #8]
 80056d0:	e7db      	b.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80056d2:	490e      	ldr	r1, [pc, #56]	; (800570c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80056d4:	688a      	ldr	r2, [r1, #8]
 80056d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80056da:	608a      	str	r2, [r1, #8]
 80056dc:	68a8      	ldr	r0, [r5, #8]
 80056de:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e0:	4302      	orrs	r2, r0
 80056e2:	07d0      	lsls	r0, r2, #31
 80056e4:	d505      	bpl.n	80056f2 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e6:	2000      	movs	r0, #0
 80056e8:	e7cf      	b.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80056ea:	2002      	movs	r0, #2
}
 80056ec:	b01a      	add	sp, #104	; 0x68
 80056ee:	bcf0      	pop	{r4, r5, r6, r7}
 80056f0:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056f2:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f4:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056f6:	4a04      	ldr	r2, [pc, #16]	; (8005708 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80056f8:	4022      	ands	r2, r4
 80056fa:	608a      	str	r2, [r1, #8]
 80056fc:	e7c5      	b.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80056fe:	bf00      	nop
 8005700:	40022000 	.word	0x40022000
 8005704:	40022100 	.word	0x40022100
 8005708:	fffff0e0 	.word	0xfffff0e0
 800570c:	40022300 	.word	0x40022300

08005710 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005710:	4907      	ldr	r1, [pc, #28]	; (8005730 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005712:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005716:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005718:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800571c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800571e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005722:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005724:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005728:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800572a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800572c:	60cb      	str	r3, [r1, #12]
 800572e:	4770      	bx	lr
 8005730:	e000ed00 	.word	0xe000ed00
 8005734:	05fa0000 	.word	0x05fa0000

08005738 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_NVIC_SetPriority+0x68>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005740:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005742:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005746:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005748:	2d04      	cmp	r5, #4
 800574a:	bf28      	it	cs
 800574c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800574e:	2c06      	cmp	r4, #6
 8005750:	d919      	bls.n	8005786 <HAL_NVIC_SetPriority+0x4e>
 8005752:	3b03      	subs	r3, #3
 8005754:	f04f 34ff 	mov.w	r4, #4294967295
 8005758:	409c      	lsls	r4, r3
 800575a:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800575e:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005762:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005764:	fa04 f405 	lsl.w	r4, r4, r5
 8005768:	ea21 0104 	bic.w	r1, r1, r4
 800576c:	fa01 f103 	lsl.w	r1, r1, r3
 8005770:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005774:	db0a      	blt.n	800578c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005776:	0109      	lsls	r1, r1, #4
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <HAL_NVIC_SetPriority+0x6c>)
 800577a:	b2c9      	uxtb	r1, r1
 800577c:	4403      	add	r3, r0
 800577e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005782:	bc30      	pop	{r4, r5}
 8005784:	4770      	bx	lr
 8005786:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005788:	4613      	mov	r3, r2
 800578a:	e7e8      	b.n	800575e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578c:	f000 000f 	and.w	r0, r0, #15
 8005790:	0109      	lsls	r1, r1, #4
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_NVIC_SetPriority+0x70>)
 8005794:	b2c9      	uxtb	r1, r1
 8005796:	4403      	add	r3, r0
 8005798:	7619      	strb	r1, [r3, #24]
 800579a:	bc30      	pop	{r4, r5}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000ed00 	.word	0xe000ed00
 80057a4:	e000e100 	.word	0xe000e100
 80057a8:	e000ecfc 	.word	0xe000ecfc

080057ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80057ac:	2800      	cmp	r0, #0
 80057ae:	db07      	blt.n	80057c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b0:	2301      	movs	r3, #1
 80057b2:	f000 011f 	and.w	r1, r0, #31
 80057b6:	4a03      	ldr	r2, [pc, #12]	; (80057c4 <HAL_NVIC_EnableIRQ+0x18>)
 80057b8:	0940      	lsrs	r0, r0, #5
 80057ba:	408b      	lsls	r3, r1
 80057bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000e100 	.word	0xe000e100

080057c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c8:	3801      	subs	r0, #1
 80057ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80057ce:	d20d      	bcs.n	80057ec <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d4:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d8:	25f0      	movs	r5, #240	; 0xf0
 80057da:	4c06      	ldr	r4, [pc, #24]	; (80057f4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057dc:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057de:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80057e8:	bc30      	pop	{r4, r5}
 80057ea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80057ec:	2001      	movs	r0, #1
 80057ee:	4770      	bx	lr
 80057f0:	e000e010 	.word	0xe000e010
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80057f8:	b188      	cbz	r0, 800581e <HAL_DAC_Init+0x26>
{
 80057fa:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80057fc:	7903      	ldrb	r3, [r0, #4]
 80057fe:	4604      	mov	r4, r0
 8005800:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005804:	b13b      	cbz	r3, 8005816 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005806:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005808:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800580a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800580c:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800580e:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005810:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005812:	7122      	strb	r2, [r4, #4]
}
 8005814:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005816:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005818:	f7fe fa9c 	bl	8003d54 <HAL_DAC_MspInit>
 800581c:	e7f3      	b.n	8005806 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800581e:	2001      	movs	r0, #1
}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005824:	7942      	ldrb	r2, [r0, #5]
 8005826:	2a01      	cmp	r2, #1
 8005828:	d026      	beq.n	8005878 <HAL_DAC_Start+0x54>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800582a:	4603      	mov	r3, r0

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800582c:	2201      	movs	r2, #1
 800582e:	6800      	ldr	r0, [r0, #0]
{
 8005830:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8005832:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8005834:	f001 0510 	and.w	r5, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8005838:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800583a:	40aa      	lsls	r2, r5
 800583c:	6806      	ldr	r6, [r0, #0]
 800583e:	4332      	orrs	r2, r6
 8005840:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005842:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8005844:	b971      	cbnz	r1, 8005864 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005846:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 800584a:	42a2      	cmp	r2, r4
 800584c:	d103      	bne.n	8005856 <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800584e:	6842      	ldr	r2, [r0, #4]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005856:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005858:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 800585a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800585c:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 800585e:	715a      	strb	r2, [r3, #5]
}
 8005860:	bc70      	pop	{r4, r5, r6}
 8005862:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005864:	40ac      	lsls	r4, r5
 8005866:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 800586a:	42a2      	cmp	r2, r4
 800586c:	d1f3      	bne.n	8005856 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800586e:	6842      	ldr	r2, [r0, #4]
 8005870:	f042 0202 	orr.w	r2, r2, #2
 8005874:	6042      	str	r2, [r0, #4]
 8005876:	e7ee      	b.n	8005856 <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8005878:	2002      	movs	r0, #2
}
 800587a:	4770      	bx	lr

0800587c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005880:	7940      	ldrb	r0, [r0, #5]
{
 8005882:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 8005884:	2801      	cmp	r0, #1
 8005886:	d057      	beq.n	8005938 <HAL_DAC_Start_DMA+0xbc>
 8005888:	460d      	mov	r5, r1
 800588a:	2001      	movs	r0, #1
 800588c:	4611      	mov	r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800588e:	2202      	movs	r2, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005890:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hdac);
 8005892:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005894:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8005896:	bb4d      	cbnz	r5, 80058ec <HAL_DAC_Start_DMA+0x70>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005898:	683a      	ldr	r2, [r7, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800589a:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800589c:	68a0      	ldr	r0, [r4, #8]
 800589e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005984 <HAL_DAC_Start_DMA+0x108>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80058a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80058a6:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8005988 <HAL_DAC_Start_DMA+0x10c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80058aa:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80058ae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800598c <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80058b2:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80058b6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80058ba:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 80058bc:	d044      	beq.n	8005948 <HAL_DAC_Start_DMA+0xcc>
 80058be:	2e08      	cmp	r6, #8
 80058c0:	d03f      	beq.n	8005942 <HAL_DAC_Start_DMA+0xc6>
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	d03a      	beq.n	800593c <HAL_DAC_Start_DMA+0xc0>
 80058c6:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80058c8:	683e      	ldr	r6, [r7, #0]
 80058ca:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 80058ce:	603e      	str	r6, [r7, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80058d0:	f000 fcfc 	bl	80062cc <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80058d4:	2300      	movs	r3, #0
 80058d6:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80058d8:	bb48      	cbnz	r0, 800592e <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f005 0110 	and.w	r1, r5, #16
 80058e0:	2501      	movs	r5, #1
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	408d      	lsls	r5, r1
 80058e6:	4315      	orrs	r5, r2
 80058e8:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058ec:	683a      	ldr	r2, [r7, #0]
    switch (Alignment)
 80058ee:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058f0:	68e0      	ldr	r0, [r4, #12]
 80058f2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005990 <HAL_DAC_Start_DMA+0x114>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80058fa:	f8df e098 	ldr.w	lr, [pc, #152]	; 8005994 <HAL_DAC_Start_DMA+0x118>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058fe:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005902:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005998 <HAL_DAC_Start_DMA+0x11c>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005906:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800590a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800590e:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 8005910:	d02f      	beq.n	8005972 <HAL_DAC_Start_DMA+0xf6>
 8005912:	2e08      	cmp	r6, #8
 8005914:	d024      	beq.n	8005960 <HAL_DAC_Start_DMA+0xe4>
 8005916:	b1d6      	cbz	r6, 800594e <HAL_DAC_Start_DMA+0xd2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005918:	683e      	ldr	r6, [r7, #0]
    switch (Alignment)
 800591a:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800591c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005920:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005922:	f000 fcd3 	bl	80062cc <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8005926:	2300      	movs	r3, #0
 8005928:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800592a:	2800      	cmp	r0, #0
 800592c:	d0d5      	beq.n	80058da <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	f043 0304 	orr.w	r3, r3, #4
 8005934:	6123      	str	r3, [r4, #16]
}
 8005936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8005938:	2002      	movs	r0, #2
}
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800593c:	f107 0208 	add.w	r2, r7, #8
        break;
 8005940:	e7c2      	b.n	80058c8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005942:	f107 0210 	add.w	r2, r7, #16
        break;
 8005946:	e7bf      	b.n	80058c8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005948:	f107 020c 	add.w	r2, r7, #12
        break;
 800594c:	e7bc      	b.n	80058c8 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800594e:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005950:	f107 0214 	add.w	r2, r7, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005954:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005958:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800595a:	f000 fcb7 	bl	80062cc <HAL_DMA_Start_IT>
 800595e:	e7e2      	b.n	8005926 <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005960:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005962:	f107 021c 	add.w	r2, r7, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005966:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800596a:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800596c:	f000 fcae 	bl	80062cc <HAL_DMA_Start_IT>
 8005970:	e7d9      	b.n	8005926 <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005972:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005974:	f107 0218 	add.w	r2, r7, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005978:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800597c:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800597e:	f000 fca5 	bl	80062cc <HAL_DMA_Start_IT>
 8005982:	e7d0      	b.n	8005926 <HAL_DAC_Start_DMA+0xaa>
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059dd 	.word	0x080059dd
 800598c:	080059ed 	.word	0x080059ed
 8005990:	08005bc9 	.word	0x08005bc9
 8005994:	08005bdd 	.word	0x08005bdd
 8005998:	08005bed 	.word	0x08005bed

0800599c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800599c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800599e:	6800      	ldr	r0, [r0, #0]
{
 80059a0:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80059a2:	2400      	movs	r4, #0
 80059a4:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80059a6:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80059a8:	b951      	cbnz	r1, 80059c0 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80059aa:	9901      	ldr	r1, [sp, #4]
 80059ac:	3108      	adds	r1, #8
 80059ae:	440a      	add	r2, r1
 80059b0:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80059b2:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80059b4:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	b003      	add	sp, #12
 80059ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059be:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80059c0:	9901      	ldr	r1, [sp, #4]
 80059c2:	3114      	adds	r1, #20
 80059c4:	440a      	add	r2, r1
 80059c6:	9201      	str	r2, [sp, #4]
 80059c8:	e7f3      	b.n	80059b2 <HAL_DAC_SetValue+0x16>
 80059ca:	bf00      	nop

080059cc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80059cc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ce:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7fc fd83 	bl	80024dc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059d6:	2301      	movs	r3, #1
 80059d8:	7123      	strb	r3, [r4, #4]
}
 80059da:	bd10      	pop	{r4, pc}

080059dc <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80059dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80059de:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80059e0:	f7fc fd8e 	bl	8002500 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80059e4:	bd08      	pop	{r3, pc}
 80059e6:	bf00      	nop

080059e8 <HAL_DAC_ErrorCallbackCh1>:
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80059ec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ee:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059f0:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80059f2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80059fa:	f7ff fff5 	bl	80059e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059fe:	2301      	movs	r3, #1
 8005a00:	7123      	strb	r3, [r4, #4]
}
 8005a02:	bd10      	pop	{r4, pc}

08005a04 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005a08:	6803      	ldr	r3, [r0, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	0491      	lsls	r1, r2, #18
{
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005a12:	d502      	bpl.n	8005a1a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a16:	0492      	lsls	r2, r2, #18
 8005a18:	d418      	bmi.n	8005a4c <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	0091      	lsls	r1, r2, #2
 8005a1e:	d502      	bpl.n	8005a26 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	d400      	bmi.n	8005a28 <HAL_DAC_IRQHandler+0x20>
}
 8005a26:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a28:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005a2a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005a2e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a30:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005a32:	6922      	ldr	r2, [r4, #16]
 8005a34:	f042 0202 	orr.w	r2, r2, #2
 8005a38:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005a3a:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8005a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a46:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005a48:	f000 b8dc 	b.w	8005c04 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a4c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a52:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005a54:	6902      	ldr	r2, [r0, #16]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005a5c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a64:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005a66:	f7ff ffcd 	bl	8005a04 <HAL_DAC_DMAUnderrunCallbackCh1>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	e7d5      	b.n	8005a1a <HAL_DAC_IRQHandler+0x12>
 8005a6e:	bf00      	nop

08005a70 <HAL_DAC_ConfigChannel>:
{
 8005a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8005a74:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005a76:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f000 8095 	beq.w	8005ba8 <HAL_DAC_ConfigChannel+0x138>
 8005a7e:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a80:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8005a82:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a84:	2f04      	cmp	r7, #4
 8005a86:	4606      	mov	r6, r0
 8005a88:	460c      	mov	r4, r1
  __HAL_LOCK(hdac);
 8005a8a:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a8c:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a8e:	d04a      	beq.n	8005b26 <HAL_DAC_ConfigChannel+0xb6>
 8005a90:	f005 0210 	and.w	r2, r5, #16
 8005a94:	6801      	ldr	r1, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a9c:	251f      	movs	r5, #31
    tmpreg1 = hdac->Instance->CCR;
 8005a9e:	6b88      	ldr	r0, [r1, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aa0:	6963      	ldr	r3, [r4, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005aa2:	4095      	lsls	r5, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aa4:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005aa6:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aaa:	4303      	orrs	r3, r0
    hdac->Instance->CCR = tmpreg1;
 8005aac:	638b      	str	r3, [r1, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005aae:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005ab0:	68e5      	ldr	r5, [r4, #12]
  tmpreg1 = hdac->Instance->MCR;
 8005ab2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ab4:	4090      	lsls	r0, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005ab6:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ab8:	ea23 0000 	bic.w	r0, r3, r0
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005abc:	d02e      	beq.n	8005b1c <HAL_DAC_ConfigChannel+0xac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005abe:	2d02      	cmp	r5, #2
 8005ac0:	68a5      	ldr	r5, [r4, #8]
 8005ac2:	d02e      	beq.n	8005b22 <HAL_DAC_ConfigChannel+0xb2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ac4:	fab5 f385 	clz	r3, r5
 8005ac8:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005aca:	432b      	orrs	r3, r5
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005acc:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ad0:	6865      	ldr	r5, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ad2:	f640 74fe 	movw	r4, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005ad6:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ad8:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005adc:	fa04 f702 	lsl.w	r7, r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ae0:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ae2:	4093      	lsls	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ae4:	24c0      	movs	r4, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 8005ae6:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005aea:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aee:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005af0:	4094      	lsls	r4, r2
  return HAL_OK;
 8005af2:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8005af4:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	ea23 0308 	bic.w	r3, r3, r8
 8005afc:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8005afe:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b00:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b04:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8005b06:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b08:	680a      	ldr	r2, [r1, #0]
 8005b0a:	ea22 0204 	bic.w	r2, r2, r4
 8005b0e:	600a      	str	r2, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005b10:	f886 e004 	strb.w	lr, [r6, #4]
  __HAL_UNLOCK(hdac);
 8005b14:	f886 c005 	strb.w	ip, [r6, #5]
}
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	68a5      	ldr	r5, [r4, #8]
    connectOnChip = 0x00000000UL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e7d3      	b.n	8005aca <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7d1      	b.n	8005aca <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8005b26:	f7fe fc7d 	bl	8004424 <HAL_GetTick>
 8005b2a:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005b2c:	b9c5      	cbnz	r5, 8005b60 <HAL_DAC_ConfigChannel+0xf0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b2e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005bc0 <HAL_DAC_ConfigChannel+0x150>
 8005b32:	e004      	b.n	8005b3e <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b34:	f7fe fc76 	bl	8004424 <HAL_GetTick>
 8005b38:	1bc3      	subs	r3, r0, r7
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d837      	bhi.n	8005bae <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b3e:	6833      	ldr	r3, [r6, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	ea13 0f08 	tst.w	r3, r8
 8005b46:	d1f5      	bne.n	8005b34 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8005b48:	2001      	movs	r0, #1
 8005b4a:	f7fe fc71 	bl	8004430 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b4e:	6831      	ldr	r1, [r6, #0]
 8005b50:	69a3      	ldr	r3, [r4, #24]
 8005b52:	640b      	str	r3, [r1, #64]	; 0x40
 8005b54:	e00e      	b.n	8005b74 <HAL_DAC_ConfigChannel+0x104>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b56:	f7fe fc65 	bl	8004424 <HAL_GetTick>
 8005b5a:	1bc3      	subs	r3, r0, r7
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d826      	bhi.n	8005bae <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dbf6      	blt.n	8005b56 <HAL_DAC_ConfigChannel+0xe6>
      HAL_Delay(1U);
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f7fe fc61 	bl	8004430 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b6e:	6831      	ldr	r1, [r6, #0]
 8005b70:	69a3      	ldr	r3, [r4, #24]
 8005b72:	644b      	str	r3, [r1, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b74:	f005 0210 	and.w	r2, r5, #16
 8005b78:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8005b7c:	6c88      	ldr	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b7e:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b80:	69e7      	ldr	r7, [r4, #28]
 8005b82:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b86:	fa03 f502 	lsl.w	r5, r3, r2
 8005b8a:	6a23      	ldr	r3, [r4, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b8c:	4097      	lsls	r7, r2
 8005b8e:	ea20 000c 	bic.w	r0, r0, ip
 8005b92:	4338      	orrs	r0, r7
 8005b94:	6827      	ldr	r7, [r4, #0]
 8005b96:	6488      	str	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b98:	fa03 f002 	lsl.w	r0, r3, r2
 8005b9c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005b9e:	ea23 0305 	bic.w	r3, r3, r5
 8005ba2:	4303      	orrs	r3, r0
 8005ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ba6:	e776      	b.n	8005a96 <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8005ba8:	2002      	movs	r0, #2
}
 8005baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bae:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bb0:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bb2:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8005bb6:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bb8:	6133      	str	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bba:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8005bbc:	e7ac      	b.n	8005b18 <HAL_DAC_ConfigChannel+0xa8>
 8005bbe:	bf00      	nop
 8005bc0:	20008000 	.word	0x20008000

08005bc4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop

08005bc8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bca:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fff9 	bl	8005bc4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	7123      	strb	r3, [r4, #4]
}
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005bdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005bde:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005be0:	f7ff fffa 	bl	8005bd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005be4:	bd08      	pop	{r3, pc}
 8005be6:	bf00      	nop

08005be8 <HAL_DACEx_ErrorCallbackCh2>:
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop

08005bec <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005bec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bee:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bf0:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005bf2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005bfa:	f7ff fff5 	bl	8005be8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	7123      	strb	r3, [r4, #4]
}
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c08:	6802      	ldr	r2, [r0, #0]
 8005c0a:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <DMA_CalcBaseAndBitshift+0xd8>)
 8005c0c:	4935      	ldr	r1, [pc, #212]	; (8005ce4 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8005c0e:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c10:	4c35      	ldr	r4, [pc, #212]	; (8005ce8 <DMA_CalcBaseAndBitshift+0xe0>)
 8005c12:	4d36      	ldr	r5, [pc, #216]	; (8005cec <DMA_CalcBaseAndBitshift+0xe4>)
 8005c14:	42a2      	cmp	r2, r4
 8005c16:	bf18      	it	ne
 8005c18:	429a      	cmpne	r2, r3
 8005c1a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	428a      	cmp	r2, r1
 8005c26:	bf08      	it	eq
 8005c28:	f043 0301 	orreq.w	r3, r3, #1
 8005c2c:	3148      	adds	r1, #72	; 0x48
 8005c2e:	42aa      	cmp	r2, r5
 8005c30:	bf08      	it	eq
 8005c32:	f043 0301 	orreq.w	r3, r3, #1
 8005c36:	3548      	adds	r5, #72	; 0x48
 8005c38:	42a2      	cmp	r2, r4
 8005c3a:	bf08      	it	eq
 8005c3c:	f043 0301 	orreq.w	r3, r3, #1
 8005c40:	3448      	adds	r4, #72	; 0x48
 8005c42:	428a      	cmp	r2, r1
 8005c44:	bf08      	it	eq
 8005c46:	f043 0301 	orreq.w	r3, r3, #1
 8005c4a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005c4e:	42aa      	cmp	r2, r5
 8005c50:	bf08      	it	eq
 8005c52:	f043 0301 	orreq.w	r3, r3, #1
 8005c56:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005c5a:	42a2      	cmp	r2, r4
 8005c5c:	bf08      	it	eq
 8005c5e:	f043 0301 	orreq.w	r3, r3, #1
 8005c62:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005c66:	428a      	cmp	r2, r1
 8005c68:	bf08      	it	eq
 8005c6a:	f043 0301 	orreq.w	r3, r3, #1
 8005c6e:	3148      	adds	r1, #72	; 0x48
 8005c70:	42aa      	cmp	r2, r5
 8005c72:	bf08      	it	eq
 8005c74:	f043 0301 	orreq.w	r3, r3, #1
 8005c78:	3548      	adds	r5, #72	; 0x48
 8005c7a:	42a2      	cmp	r2, r4
 8005c7c:	bf08      	it	eq
 8005c7e:	f043 0301 	orreq.w	r3, r3, #1
 8005c82:	3448      	adds	r4, #72	; 0x48
 8005c84:	428a      	cmp	r2, r1
 8005c86:	bf08      	it	eq
 8005c88:	f043 0301 	orreq.w	r3, r3, #1
 8005c8c:	3148      	adds	r1, #72	; 0x48
 8005c8e:	42aa      	cmp	r2, r5
 8005c90:	bf08      	it	eq
 8005c92:	f043 0301 	orreq.w	r3, r3, #1
 8005c96:	42a2      	cmp	r2, r4
 8005c98:	bf08      	it	eq
 8005c9a:	f043 0301 	orreq.w	r3, r3, #1
 8005c9e:	428a      	cmp	r2, r1
 8005ca0:	bf08      	it	eq
 8005ca2:	f043 0301 	orreq.w	r3, r3, #1
 8005ca6:	b913      	cbnz	r3, 8005cae <DMA_CalcBaseAndBitshift+0xa6>
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <DMA_CalcBaseAndBitshift+0xe8>)
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d113      	bne.n	8005cd6 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cae:	b2d3      	uxtb	r3, r2
 8005cb0:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cb2:	4c11      	ldr	r4, [pc, #68]	; (8005cf8 <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cb4:	3b10      	subs	r3, #16
 8005cb6:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8005cba:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cbe:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cc2:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cc6:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cc8:	bf88      	it	hi
 8005cca:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ccc:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cce:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bc30      	pop	{r4, r5}
 8005cd4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cd6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8005cda:	6583      	str	r3, [r0, #88]	; 0x58
 8005cdc:	e7f8      	b.n	8005cd0 <DMA_CalcBaseAndBitshift+0xc8>
 8005cde:	bf00      	nop
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020028 	.word	0x40020028
 8005cec:	40020058 	.word	0x40020058
 8005cf0:	400204b8 	.word	0x400204b8
 8005cf4:	aaaaaaab 	.word	0xaaaaaaab
 8005cf8:	080189bc 	.word	0x080189bc
 8005cfc:	fffffc00 	.word	0xfffffc00

08005d00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d00:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8005d04:	4929      	ldr	r1, [pc, #164]	; (8005dac <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8005d06:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d08:	4d29      	ldr	r5, [pc, #164]	; (8005db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8005d0a:	4c2a      	ldr	r4, [pc, #168]	; (8005db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	bf18      	it	ne
 8005d10:	4293      	cmpne	r3, r2
 8005d12:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8005d16:	bf0c      	ite	eq
 8005d18:	2201      	moveq	r2, #1
 8005d1a:	2200      	movne	r2, #0
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	bf08      	it	eq
 8005d20:	f042 0201 	orreq.w	r2, r2, #1
 8005d24:	343c      	adds	r4, #60	; 0x3c
 8005d26:	428b      	cmp	r3, r1
 8005d28:	bf08      	it	eq
 8005d2a:	f042 0201 	orreq.w	r2, r2, #1
 8005d2e:	313c      	adds	r1, #60	; 0x3c
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	bf08      	it	eq
 8005d34:	f042 0201 	orreq.w	r2, r2, #1
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	bf08      	it	eq
 8005d3c:	f042 0201 	orreq.w	r2, r2, #1
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf08      	it	eq
 8005d44:	f042 0201 	orreq.w	r2, r2, #1
 8005d48:	b912      	cbnz	r2, 8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d113      	bne.n	8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4d1a      	ldr	r5, [pc, #104]	; (8005dbc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d54:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d56:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d58:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d5a:	4c1a      	ldr	r4, [pc, #104]	; (8005dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d5c:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d60:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d62:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d66:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d6a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d70:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d72:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d74:	bc30      	pop	{r4, r5}
 8005d76:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d78:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d7a:	4913      	ldr	r1, [pc, #76]	; (8005dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d7c:	4c13      	ldr	r4, [pc, #76]	; (8005dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d7e:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d80:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d82:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d84:	fba4 2302 	umull	r2, r3, r4, r2
 8005d88:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d8c:	d800      	bhi.n	8005d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 8005d8e:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d92:	f003 051f 	and.w	r5, r3, #31
 8005d96:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d98:	4c0e      	ldr	r4, [pc, #56]	; (8005dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d9a:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d9c:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d9e:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005da0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005da2:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005da4:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005da6:	e7e5      	b.n	8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 8005da8:	58025408 	.word	0x58025408
 8005dac:	58025444 	.word	0x58025444
 8005db0:	5802541c 	.word	0x5802541c
 8005db4:	58025430 	.word	0x58025430
 8005db8:	58025494 	.word	0x58025494
 8005dbc:	cccccccd 	.word	0xcccccccd
 8005dc0:	16009600 	.word	0x16009600
 8005dc4:	58025880 	.word	0x58025880
 8005dc8:	bffdfbf0 	.word	0xbffdfbf0
 8005dcc:	aaaaaaab 	.word	0xaaaaaaab
 8005dd0:	10008200 	.word	0x10008200
 8005dd4:	40020880 	.word	0x40020880

08005dd8 <HAL_DMA_Init>:
{
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005ddc:	f7fe fb22 	bl	8004424 <HAL_GetTick>
  if(hdma == NULL)
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	f000 818a 	beq.w	80060fa <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4605      	mov	r5, r0
 8005dea:	4a95      	ldr	r2, [pc, #596]	; (8006040 <HAL_DMA_Init+0x268>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d049      	beq.n	8005e84 <HAL_DMA_Init+0xac>
 8005df0:	3218      	adds	r2, #24
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d046      	beq.n	8005e84 <HAL_DMA_Init+0xac>
 8005df6:	3230      	adds	r2, #48	; 0x30
 8005df8:	4892      	ldr	r0, [pc, #584]	; (8006044 <HAL_DMA_Init+0x26c>)
 8005dfa:	4993      	ldr	r1, [pc, #588]	; (8006048 <HAL_DMA_Init+0x270>)
 8005dfc:	4283      	cmp	r3, r0
 8005dfe:	bf18      	it	ne
 8005e00:	4293      	cmpne	r3, r2
 8005e02:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005e06:	bf0c      	ite	eq
 8005e08:	2201      	moveq	r2, #1
 8005e0a:	2200      	movne	r2, #0
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf08      	it	eq
 8005e10:	f042 0201 	orreq.w	r2, r2, #1
 8005e14:	3130      	adds	r1, #48	; 0x30
 8005e16:	4283      	cmp	r3, r0
 8005e18:	bf08      	it	eq
 8005e1a:	f042 0201 	orreq.w	r2, r2, #1
 8005e1e:	3030      	adds	r0, #48	; 0x30
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf08      	it	eq
 8005e24:	f042 0201 	orreq.w	r2, r2, #1
 8005e28:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	bf08      	it	eq
 8005e30:	f042 0201 	orreq.w	r2, r2, #1
 8005e34:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	bf08      	it	eq
 8005e3c:	f042 0201 	orreq.w	r2, r2, #1
 8005e40:	3130      	adds	r1, #48	; 0x30
 8005e42:	4283      	cmp	r3, r0
 8005e44:	bf08      	it	eq
 8005e46:	f042 0201 	orreq.w	r2, r2, #1
 8005e4a:	3030      	adds	r0, #48	; 0x30
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf08      	it	eq
 8005e50:	f042 0201 	orreq.w	r2, r2, #1
 8005e54:	3130      	adds	r1, #48	; 0x30
 8005e56:	4283      	cmp	r3, r0
 8005e58:	bf08      	it	eq
 8005e5a:	f042 0201 	orreq.w	r2, r2, #1
 8005e5e:	3030      	adds	r0, #48	; 0x30
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf08      	it	eq
 8005e64:	f042 0201 	orreq.w	r2, r2, #1
 8005e68:	3130      	adds	r1, #48	; 0x30
 8005e6a:	4283      	cmp	r3, r0
 8005e6c:	bf08      	it	eq
 8005e6e:	f042 0201 	orreq.w	r2, r2, #1
 8005e72:	428b      	cmp	r3, r1
 8005e74:	bf08      	it	eq
 8005e76:	f042 0201 	orreq.w	r2, r2, #1
 8005e7a:	b91a      	cbnz	r2, 8005e84 <HAL_DMA_Init+0xac>
 8005e7c:	4a73      	ldr	r2, [pc, #460]	; (800604c <HAL_DMA_Init+0x274>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	f040 81a1 	bne.w	80061c6 <HAL_DMA_Init+0x3ee>
    __HAL_UNLOCK(hdma);
 8005e84:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e86:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8005e88:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e8c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e006      	b.n	8005ea8 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e9a:	f7fe fac3 	bl	8004424 <HAL_GetTick>
 8005e9e:	1b43      	subs	r3, r0, r5
 8005ea0:	2b05      	cmp	r3, #5
 8005ea2:	f200 8111 	bhi.w	80060c8 <HAL_DMA_Init+0x2f0>
 8005ea6:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	07d0      	lsls	r0, r2, #31
 8005eac:	d4f5      	bmi.n	8005e9a <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 8005eae:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eb2:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8005eb4:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005eb6:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb8:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ec0:	4e63      	ldr	r6, [pc, #396]	; (8006050 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ec2:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec6:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ec8:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eca:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ecc:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ece:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ed0:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ed2:	4960      	ldr	r1, [pc, #384]	; (8006054 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 8005ed4:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ed8:	4e5f      	ldr	r6, [pc, #380]	; (8006058 <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eda:	f000 8110 	beq.w	80060fe <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ede:	6836      	ldr	r6, [r6, #0]
 8005ee0:	4031      	ands	r1, r6
 8005ee2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005ee6:	f080 80c3 	bcs.w	8006070 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005eea:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005eec:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005eee:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005ef2:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ef4:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff fe86 	bl	8005c08 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005efc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005efe:	233f      	movs	r3, #63	; 0x3f
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	4093      	lsls	r3, r2
 8005f06:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <HAL_DMA_Init+0x268>)
 8005f0c:	4953      	ldr	r1, [pc, #332]	; (800605c <HAL_DMA_Init+0x284>)
 8005f0e:	4d4d      	ldr	r5, [pc, #308]	; (8006044 <HAL_DMA_Init+0x26c>)
 8005f10:	428a      	cmp	r2, r1
 8005f12:	bf18      	it	ne
 8005f14:	429a      	cmpne	r2, r3
 8005f16:	4852      	ldr	r0, [pc, #328]	; (8006060 <HAL_DMA_Init+0x288>)
 8005f18:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	42aa      	cmp	r2, r5
 8005f24:	bf08      	it	eq
 8005f26:	f043 0301 	orreq.w	r3, r3, #1
 8005f2a:	3548      	adds	r5, #72	; 0x48
 8005f2c:	4282      	cmp	r2, r0
 8005f2e:	bf08      	it	eq
 8005f30:	f043 0301 	orreq.w	r3, r3, #1
 8005f34:	3048      	adds	r0, #72	; 0x48
 8005f36:	428a      	cmp	r2, r1
 8005f38:	bf08      	it	eq
 8005f3a:	f043 0301 	orreq.w	r3, r3, #1
 8005f3e:	3148      	adds	r1, #72	; 0x48
 8005f40:	42aa      	cmp	r2, r5
 8005f42:	bf08      	it	eq
 8005f44:	f043 0301 	orreq.w	r3, r3, #1
 8005f48:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005f4c:	4282      	cmp	r2, r0
 8005f4e:	bf08      	it	eq
 8005f50:	f043 0301 	orreq.w	r3, r3, #1
 8005f54:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8005f58:	428a      	cmp	r2, r1
 8005f5a:	bf08      	it	eq
 8005f5c:	f043 0301 	orreq.w	r3, r3, #1
 8005f60:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005f64:	42aa      	cmp	r2, r5
 8005f66:	bf08      	it	eq
 8005f68:	f043 0301 	orreq.w	r3, r3, #1
 8005f6c:	3548      	adds	r5, #72	; 0x48
 8005f6e:	4282      	cmp	r2, r0
 8005f70:	bf08      	it	eq
 8005f72:	f043 0301 	orreq.w	r3, r3, #1
 8005f76:	3048      	adds	r0, #72	; 0x48
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	bf08      	it	eq
 8005f7c:	f043 0301 	orreq.w	r3, r3, #1
 8005f80:	3148      	adds	r1, #72	; 0x48
 8005f82:	42aa      	cmp	r2, r5
 8005f84:	bf08      	it	eq
 8005f86:	f043 0301 	orreq.w	r3, r3, #1
 8005f8a:	3548      	adds	r5, #72	; 0x48
 8005f8c:	4282      	cmp	r2, r0
 8005f8e:	bf08      	it	eq
 8005f90:	f043 0301 	orreq.w	r3, r3, #1
 8005f94:	3048      	adds	r0, #72	; 0x48
 8005f96:	428a      	cmp	r2, r1
 8005f98:	bf08      	it	eq
 8005f9a:	f043 0301 	orreq.w	r3, r3, #1
 8005f9e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005fa2:	42aa      	cmp	r2, r5
 8005fa4:	bf08      	it	eq
 8005fa6:	f043 0301 	orreq.w	r3, r3, #1
 8005faa:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8005fae:	4d2d      	ldr	r5, [pc, #180]	; (8006064 <HAL_DMA_Init+0x28c>)
 8005fb0:	4282      	cmp	r2, r0
 8005fb2:	bf08      	it	eq
 8005fb4:	f043 0301 	orreq.w	r3, r3, #1
 8005fb8:	482b      	ldr	r0, [pc, #172]	; (8006068 <HAL_DMA_Init+0x290>)
 8005fba:	428a      	cmp	r2, r1
 8005fbc:	bf08      	it	eq
 8005fbe:	f043 0301 	orreq.w	r3, r3, #1
 8005fc2:	313c      	adds	r1, #60	; 0x3c
 8005fc4:	42aa      	cmp	r2, r5
 8005fc6:	bf08      	it	eq
 8005fc8:	f043 0301 	orreq.w	r3, r3, #1
 8005fcc:	353c      	adds	r5, #60	; 0x3c
 8005fce:	4282      	cmp	r2, r0
 8005fd0:	bf08      	it	eq
 8005fd2:	f043 0301 	orreq.w	r3, r3, #1
 8005fd6:	303c      	adds	r0, #60	; 0x3c
 8005fd8:	428a      	cmp	r2, r1
 8005fda:	bf08      	it	eq
 8005fdc:	f043 0301 	orreq.w	r3, r3, #1
 8005fe0:	313c      	adds	r1, #60	; 0x3c
 8005fe2:	42aa      	cmp	r2, r5
 8005fe4:	bf08      	it	eq
 8005fe6:	f043 0301 	orreq.w	r3, r3, #1
 8005fea:	4282      	cmp	r2, r0
 8005fec:	bf08      	it	eq
 8005fee:	f043 0301 	orreq.w	r3, r3, #1
 8005ff2:	428a      	cmp	r2, r1
 8005ff4:	bf08      	it	eq
 8005ff6:	f043 0301 	orreq.w	r3, r3, #1
 8005ffa:	b913      	cbnz	r3, 8006002 <HAL_DMA_Init+0x22a>
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_DMA_Init+0x294>)
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d118      	bne.n	8006034 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006002:	4620      	mov	r0, r4
 8006004:	f7ff fe7c 	bl	8005d00 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006008:	68a3      	ldr	r3, [r4, #8]
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d069      	beq.n	80060e2 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800600e:	6863      	ldr	r3, [r4, #4]
 8006010:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006012:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006014:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006016:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800601a:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800601c:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800601e:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006020:	d866      	bhi.n	80060f0 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006022:	1e50      	subs	r0, r2, #1
 8006024:	2807      	cmp	r0, #7
 8006026:	d97c      	bls.n	8006122 <HAL_DMA_Init+0x34a>
 8006028:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800602a:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800602e:	2000      	movs	r0, #0
 8006030:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006032:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006034:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006036:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006038:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800603a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	40020010 	.word	0x40020010
 8006044:	40020040 	.word	0x40020040
 8006048:	40020070 	.word	0x40020070
 800604c:	400204b8 	.word	0x400204b8
 8006050:	fe10803f 	.word	0xfe10803f
 8006054:	ffff0000 	.word	0xffff0000
 8006058:	5c001000 	.word	0x5c001000
 800605c:	40020028 	.word	0x40020028
 8006060:	40020058 	.word	0x40020058
 8006064:	5802541c 	.word	0x5802541c
 8006068:	58025430 	.word	0x58025430
 800606c:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 8006076:	2e1f      	cmp	r6, #31
 8006078:	d92d      	bls.n	80060d6 <HAL_DMA_Init+0x2fe>
 800607a:	394f      	subs	r1, #79	; 0x4f
 800607c:	2903      	cmp	r1, #3
 800607e:	d801      	bhi.n	8006084 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8006080:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006084:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006086:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006088:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800608a:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800608e:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006092:	f47f af2f 	bne.w	8005ef4 <HAL_DMA_Init+0x11c>
 8006096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8006098:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800609a:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800609c:	2e00      	cmp	r6, #0
 800609e:	f43f af29 	beq.w	8005ef4 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d173      	bne.n	800618e <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 80060a6:	2a01      	cmp	r2, #1
 80060a8:	f000 8088 	beq.w	80061bc <HAL_DMA_Init+0x3e4>
 80060ac:	f032 0202 	bics.w	r2, r2, #2
 80060b0:	f47f af20 	bne.w	8005ef4 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060b4:	01f2      	lsls	r2, r6, #7
 80060b6:	f57f af1d 	bpl.w	8005ef4 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 80060ba:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060bc:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80060be:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060c0:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80060c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80060c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060c8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80060ca:	2303      	movs	r3, #3
        return HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ce:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80060d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80060d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80060d6:	4970      	ldr	r1, [pc, #448]	; (8006298 <HAL_DMA_Init+0x4c0>)
 80060d8:	fa21 f606 	lsr.w	r6, r1, r6
 80060dc:	07f1      	lsls	r1, r6, #31
 80060de:	d5d1      	bpl.n	8006084 <HAL_DMA_Init+0x2ac>
 80060e0:	e7ce      	b.n	8006080 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060e2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060e4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80060e6:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060ea:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060ec:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ee:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80060f0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80060f2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80060f6:	6763      	str	r3, [r4, #116]	; 0x74
 80060f8:	e79c      	b.n	8006034 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 80060fa:	2001      	movs	r0, #1
}
 80060fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80060fe:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006102:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006104:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006106:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800610a:	ea46 0707 	orr.w	r7, r6, r7
 800610e:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006112:	d2ad      	bcs.n	8006070 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006114:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006116:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006118:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800611c:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006120:	e7ba      	b.n	8006098 <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	4b5d      	ldr	r3, [pc, #372]	; (800629c <HAL_DMA_Init+0x4c4>)
 8006126:	4e5e      	ldr	r6, [pc, #376]	; (80062a0 <HAL_DMA_Init+0x4c8>)
 8006128:	4d5e      	ldr	r5, [pc, #376]	; (80062a4 <HAL_DMA_Init+0x4cc>)
 800612a:	42b1      	cmp	r1, r6
 800612c:	bf18      	it	ne
 800612e:	4299      	cmpne	r1, r3
 8006130:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	42a9      	cmp	r1, r5
 800613c:	bf08      	it	eq
 800613e:	f043 0301 	orreq.w	r3, r3, #1
 8006142:	3528      	adds	r5, #40	; 0x28
 8006144:	42b1      	cmp	r1, r6
 8006146:	bf08      	it	eq
 8006148:	f043 0301 	orreq.w	r3, r3, #1
 800614c:	3628      	adds	r6, #40	; 0x28
 800614e:	42a9      	cmp	r1, r5
 8006150:	bf08      	it	eq
 8006152:	f043 0301 	orreq.w	r3, r3, #1
 8006156:	3528      	adds	r5, #40	; 0x28
 8006158:	42b1      	cmp	r1, r6
 800615a:	bf08      	it	eq
 800615c:	f043 0301 	orreq.w	r3, r3, #1
 8006160:	42a9      	cmp	r1, r5
 8006162:	bf08      	it	eq
 8006164:	f043 0301 	orreq.w	r3, r3, #1
 8006168:	b93b      	cbnz	r3, 800617a <HAL_DMA_Init+0x3a2>
 800616a:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <HAL_DMA_Init+0x4d0>)
 800616c:	4299      	cmp	r1, r3
 800616e:	d004      	beq.n	800617a <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006170:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006172:	494f      	ldr	r1, [pc, #316]	; (80062b0 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006178:	e003      	b.n	8006182 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800617a:	4b4e      	ldr	r3, [pc, #312]	; (80062b4 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800617c:	494e      	ldr	r1, [pc, #312]	; (80062b8 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006182:	2201      	movs	r2, #1
 8006184:	4082      	lsls	r2, r0
 8006186:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800618a:	6762      	str	r2, [r4, #116]	; 0x74
 800618c:	e74f      	b.n	800602e <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800618e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006192:	d004      	beq.n	800619e <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 8006194:	2a02      	cmp	r2, #2
 8006196:	d990      	bls.n	80060ba <HAL_DMA_Init+0x2e2>
 8006198:	2a03      	cmp	r2, #3
 800619a:	d08b      	beq.n	80060b4 <HAL_DMA_Init+0x2dc>
 800619c:	e6aa      	b.n	8005ef4 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 800619e:	2a03      	cmp	r2, #3
 80061a0:	f63f aea8 	bhi.w	8005ef4 <HAL_DMA_Init+0x11c>
 80061a4:	a001      	add	r0, pc, #4	; (adr r0, 80061ac <HAL_DMA_Init+0x3d4>)
 80061a6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080060bb 	.word	0x080060bb
 80061b0:	080060b5 	.word	0x080060b5
 80061b4:	080060bb 	.word	0x080060bb
 80061b8:	080061bd 	.word	0x080061bd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061bc:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 80061c0:	f47f ae98 	bne.w	8005ef4 <HAL_DMA_Init+0x11c>
 80061c4:	e779      	b.n	80060ba <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061c6:	4a35      	ldr	r2, [pc, #212]	; (800629c <HAL_DMA_Init+0x4c4>)
 80061c8:	4935      	ldr	r1, [pc, #212]	; (80062a0 <HAL_DMA_Init+0x4c8>)
 80061ca:	4836      	ldr	r0, [pc, #216]	; (80062a4 <HAL_DMA_Init+0x4cc>)
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf18      	it	ne
 80061d0:	4293      	cmpne	r3, r2
 80061d2:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80061d6:	4d39      	ldr	r5, [pc, #228]	; (80062bc <HAL_DMA_Init+0x4e4>)
 80061d8:	bf0c      	ite	eq
 80061da:	2201      	moveq	r2, #1
 80061dc:	2200      	movne	r2, #0
 80061de:	4283      	cmp	r3, r0
 80061e0:	bf08      	it	eq
 80061e2:	f042 0201 	orreq.w	r2, r2, #1
 80061e6:	303c      	adds	r0, #60	; 0x3c
 80061e8:	428b      	cmp	r3, r1
 80061ea:	bf08      	it	eq
 80061ec:	f042 0201 	orreq.w	r2, r2, #1
 80061f0:	313c      	adds	r1, #60	; 0x3c
 80061f2:	42ab      	cmp	r3, r5
 80061f4:	bf08      	it	eq
 80061f6:	f042 0201 	orreq.w	r2, r2, #1
 80061fa:	4283      	cmp	r3, r0
 80061fc:	bf08      	it	eq
 80061fe:	f042 0201 	orreq.w	r2, r2, #1
 8006202:	428b      	cmp	r3, r1
 8006204:	bf08      	it	eq
 8006206:	f042 0201 	orreq.w	r2, r2, #1
 800620a:	b912      	cbnz	r2, 8006212 <HAL_DMA_Init+0x43a>
 800620c:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <HAL_DMA_Init+0x4d0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d13a      	bne.n	8006288 <HAL_DMA_Init+0x4b0>
    __HAL_UNLOCK(hdma);
 8006212:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006214:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006216:	4f2a      	ldr	r7, [pc, #168]	; (80062c0 <HAL_DMA_Init+0x4e8>)
    __HAL_UNLOCK(hdma);
 8006218:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800621c:	68a2      	ldr	r2, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 800621e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006222:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006224:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006226:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800622a:	d02b      	beq.n	8006284 <HAL_DMA_Init+0x4ac>
 800622c:	2a80      	cmp	r2, #128	; 0x80
 800622e:	bf0c      	ite	eq
 8006230:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8006234:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006236:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006238:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800623a:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800623c:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800623e:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006240:	f8df c084 	ldr.w	ip, [pc, #132]	; 80062c8 <HAL_DMA_Init+0x4f0>
 8006244:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006248:	69a6      	ldr	r6, [r4, #24]
 800624a:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800624e:	69e5      	ldr	r5, [r4, #28]
 8006250:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006254:	4e1b      	ldr	r6, [pc, #108]	; (80062c4 <HAL_DMA_Init+0x4ec>)
 8006256:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800625a:	441e      	add	r6, r3
 800625c:	6a25      	ldr	r5, [r4, #32]
 800625e:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8006262:	fbac 6506 	umull	r6, r5, ip, r6
 8006266:	433a      	orrs	r2, r7
 8006268:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800626a:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800626c:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800626e:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006270:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006272:	f7ff fcc9 	bl	8005c08 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006278:	2301      	movs	r3, #1
 800627a:	f002 021f 	and.w	r2, r2, #31
 800627e:	4093      	lsls	r3, r2
 8006280:	6043      	str	r3, [r0, #4]
 8006282:	e641      	b.n	8005f08 <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006284:	2110      	movs	r1, #16
 8006286:	e7d6      	b.n	8006236 <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006288:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800628a:	2303      	movs	r3, #3
    return HAL_ERROR;
 800628c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800628e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006290:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006296:	bf00      	nop
 8006298:	c3c0003f 	.word	0xc3c0003f
 800629c:	58025408 	.word	0x58025408
 80062a0:	5802541c 	.word	0x5802541c
 80062a4:	58025430 	.word	0x58025430
 80062a8:	58025494 	.word	0x58025494
 80062ac:	1000823f 	.word	0x1000823f
 80062b0:	40020940 	.word	0x40020940
 80062b4:	1600963f 	.word	0x1600963f
 80062b8:	58025940 	.word	0x58025940
 80062bc:	58025458 	.word	0x58025458
 80062c0:	fffe000f 	.word	0xfffe000f
 80062c4:	a7fdabf8 	.word	0xa7fdabf8
 80062c8:	cccccccd 	.word	0xcccccccd

080062cc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f000 818a 	beq.w	80065e6 <HAL_DMA_Start_IT+0x31a>
{
 80062d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80062d8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80062dc:	2801      	cmp	r0, #1
 80062de:	f000 8184 	beq.w	80065ea <HAL_DMA_Start_IT+0x31e>
 80062e2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80062e4:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 80062e8:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 80062ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80062ee:	d007      	beq.n	8006300 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80062f4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062f6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80062f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8006300:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8006302:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 8006306:	4858      	ldr	r0, [pc, #352]	; (8006468 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006308:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 800630a:	4e58      	ldr	r6, [pc, #352]	; (800646c <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800630c:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006310:	42b5      	cmp	r5, r6
 8006312:	bf18      	it	ne
 8006314:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 8006316:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8006474 <HAL_DMA_Start_IT+0x1a8>
 800631a:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800631e:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8006320:	bf0c      	ite	eq
 8006322:	2001      	moveq	r0, #1
 8006324:	2000      	movne	r0, #0
 8006326:	4f52      	ldr	r7, [pc, #328]	; (8006470 <HAL_DMA_Start_IT+0x1a4>)
 8006328:	4565      	cmp	r5, ip
 800632a:	bf08      	it	eq
 800632c:	f040 0001 	orreq.w	r0, r0, #1
 8006330:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006334:	42b5      	cmp	r5, r6
 8006336:	bf08      	it	eq
 8006338:	f040 0001 	orreq.w	r0, r0, #1
 800633c:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8006340:	4565      	cmp	r5, ip
 8006342:	bf08      	it	eq
 8006344:	f040 0001 	orreq.w	r0, r0, #1
 8006348:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 800634c:	42bd      	cmp	r5, r7
 800634e:	bf08      	it	eq
 8006350:	f040 0001 	orreq.w	r0, r0, #1
 8006354:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8006358:	42b5      	cmp	r5, r6
 800635a:	bf08      	it	eq
 800635c:	f040 0001 	orreq.w	r0, r0, #1
 8006360:	3648      	adds	r6, #72	; 0x48
 8006362:	4565      	cmp	r5, ip
 8006364:	bf08      	it	eq
 8006366:	f040 0001 	orreq.w	r0, r0, #1
 800636a:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800636e:	42bd      	cmp	r5, r7
 8006370:	bf08      	it	eq
 8006372:	f040 0001 	orreq.w	r0, r0, #1
 8006376:	3748      	adds	r7, #72	; 0x48
 8006378:	42b5      	cmp	r5, r6
 800637a:	bf08      	it	eq
 800637c:	f040 0001 	orreq.w	r0, r0, #1
 8006380:	3648      	adds	r6, #72	; 0x48
 8006382:	4565      	cmp	r5, ip
 8006384:	bf08      	it	eq
 8006386:	f040 0001 	orreq.w	r0, r0, #1
 800638a:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800638e:	42bd      	cmp	r5, r7
 8006390:	bf08      	it	eq
 8006392:	f040 0001 	orreq.w	r0, r0, #1
 8006396:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 800639a:	42b5      	cmp	r5, r6
 800639c:	bf08      	it	eq
 800639e:	f040 0001 	orreq.w	r0, r0, #1
 80063a2:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 80063a6:	4565      	cmp	r5, ip
 80063a8:	bf14      	ite	ne
 80063aa:	4682      	movne	sl, r0
 80063ac:	f040 0a01 	orreq.w	sl, r0, #1
 80063b0:	42b5      	cmp	r5, r6
 80063b2:	bf18      	it	ne
 80063b4:	42bd      	cmpne	r5, r7
 80063b6:	bf0c      	ite	eq
 80063b8:	2601      	moveq	r6, #1
 80063ba:	2600      	movne	r6, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_DMA_Start_IT+0xf8>
 80063be:	f1ba 0f00 	cmp.w	sl, #0
 80063c2:	d059      	beq.n	8006478 <HAL_DMA_Start_IT+0x1ac>
 80063c4:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c6:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80063ca:	f027 0701 	bic.w	r7, r7, #1
 80063ce:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d0:	2e00      	cmp	r6, #0
 80063d2:	f000 8084 	beq.w	80064de <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063d6:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80063d8:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 80063dc:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80063de:	f1be 0f00 	cmp.w	lr, #0
 80063e2:	d002      	beq.n	80063ea <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063e4:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 80063e8:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063ea:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80063ec:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063f0:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063f4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063f8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063fc:	fa09 f707 	lsl.w	r7, r9, r7
 8006400:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006404:	682f      	ldr	r7, [r5, #0]
 8006406:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800640a:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800640c:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800640e:	f000 80ef 	beq.w	80065f0 <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006412:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006414:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006416:	b91e      	cbnz	r6, 8006420 <HAL_DMA_Start_IT+0x154>
 8006418:	f1ba 0f00 	cmp.w	sl, #0
 800641c:	f000 80ee 	beq.w	80065fc <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006420:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006422:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006424:	f023 031e 	bic.w	r3, r3, #30
 8006428:	f043 0316 	orr.w	r3, r3, #22
 800642c:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800642e:	b11a      	cbz	r2, 8006438 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	f043 0308 	orr.w	r3, r3, #8
 8006436:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006438:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	03d2      	lsls	r2, r2, #15
 800643e:	d503      	bpl.n	8006448 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006446:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8006448:	f1be 0f00 	cmp.w	lr, #0
 800644c:	d005      	beq.n	800645a <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800644e:	f8de 3000 	ldr.w	r3, [lr]
 8006452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006456:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800645a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	602b      	str	r3, [r5, #0]
}
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	40020040 	.word	0x40020040
 800646c:	40020058 	.word	0x40020058
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006478:	4f65      	ldr	r7, [pc, #404]	; (8006610 <HAL_DMA_Start_IT+0x344>)
 800647a:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8006618 <HAL_DMA_Start_IT+0x34c>
 800647e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800661c <HAL_DMA_Start_IT+0x350>
 8006482:	4575      	cmp	r5, lr
 8006484:	bf18      	it	ne
 8006486:	42bd      	cmpne	r5, r7
 8006488:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 800648c:	bf0c      	ite	eq
 800648e:	2701      	moveq	r7, #1
 8006490:	2700      	movne	r7, #0
 8006492:	4565      	cmp	r5, ip
 8006494:	bf08      	it	eq
 8006496:	f047 0701 	orreq.w	r7, r7, #1
 800649a:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800649e:	4575      	cmp	r5, lr
 80064a0:	bf08      	it	eq
 80064a2:	f047 0701 	orreq.w	r7, r7, #1
 80064a6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80064aa:	4565      	cmp	r5, ip
 80064ac:	bf08      	it	eq
 80064ae:	f047 0701 	orreq.w	r7, r7, #1
 80064b2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80064b6:	4575      	cmp	r5, lr
 80064b8:	bf08      	it	eq
 80064ba:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80064be:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064c2:	4565      	cmp	r5, ip
 80064c4:	bf08      	it	eq
 80064c6:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80064ca:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ce:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80064d2:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064d6:	b917      	cbnz	r7, 80064de <HAL_DMA_Start_IT+0x212>
 80064d8:	4f4e      	ldr	r7, [pc, #312]	; (8006614 <HAL_DMA_Start_IT+0x348>)
 80064da:	42bd      	cmp	r5, r7
 80064dc:	d10d      	bne.n	80064fa <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064de:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80064e0:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 80064e4:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80064e6:	f1be 0f00 	cmp.w	lr, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ec:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 80064f0:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f2:	f1ba 0f00 	cmp.w	sl, #0
 80064f6:	f47f af78 	bne.w	80063ea <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064fa:	4f47      	ldr	r7, [pc, #284]	; (8006618 <HAL_DMA_Start_IT+0x34c>)
 80064fc:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8006610 <HAL_DMA_Start_IT+0x344>
 8006500:	f8df e118 	ldr.w	lr, [pc, #280]	; 800661c <HAL_DMA_Start_IT+0x350>
 8006504:	4545      	cmp	r5, r8
 8006506:	bf18      	it	ne
 8006508:	42bd      	cmpne	r5, r7
 800650a:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800650e:	bf0c      	ite	eq
 8006510:	2701      	moveq	r7, #1
 8006512:	2700      	movne	r7, #0
 8006514:	4575      	cmp	r5, lr
 8006516:	bf08      	it	eq
 8006518:	f047 0701 	orreq.w	r7, r7, #1
 800651c:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006520:	4545      	cmp	r5, r8
 8006522:	bf08      	it	eq
 8006524:	f047 0701 	orreq.w	r7, r7, #1
 8006528:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800652c:	4575      	cmp	r5, lr
 800652e:	bf08      	it	eq
 8006530:	f047 0701 	orreq.w	r7, r7, #1
 8006534:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006538:	4545      	cmp	r5, r8
 800653a:	bf08      	it	eq
 800653c:	f047 0701 	orreq.w	r7, r7, #1
 8006540:	4575      	cmp	r5, lr
 8006542:	bf08      	it	eq
 8006544:	f047 0701 	orreq.w	r7, r7, #1
 8006548:	b917      	cbnz	r7, 8006550 <HAL_DMA_Start_IT+0x284>
 800654a:	4f32      	ldr	r7, [pc, #200]	; (8006614 <HAL_DMA_Start_IT+0x348>)
 800654c:	42bd      	cmp	r5, r7
 800654e:	d155      	bne.n	80065fc <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006550:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8006552:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006556:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800655a:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800655e:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006562:	fa0e f707 	lsl.w	r7, lr, r7
 8006566:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800656a:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800656c:	d043      	beq.n	80065f6 <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800656e:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006570:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006572:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006574:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006576:	f023 030e 	bic.w	r3, r3, #14
 800657a:	f043 030a 	orr.w	r3, r3, #10
 800657e:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006580:	2a00      	cmp	r2, #0
 8006582:	d02d      	beq.n	80065e0 <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800658c:	4b20      	ldr	r3, [pc, #128]	; (8006610 <HAL_DMA_Start_IT+0x344>)
 800658e:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_DMA_Start_IT+0x34c>)
 8006590:	4922      	ldr	r1, [pc, #136]	; (800661c <HAL_DMA_Start_IT+0x350>)
 8006592:	4295      	cmp	r5, r2
 8006594:	bf18      	it	ne
 8006596:	429d      	cmpne	r5, r3
 8006598:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	428d      	cmp	r5, r1
 80065a4:	bf08      	it	eq
 80065a6:	f043 0301 	orreq.w	r3, r3, #1
 80065aa:	3128      	adds	r1, #40	; 0x28
 80065ac:	4295      	cmp	r5, r2
 80065ae:	bf08      	it	eq
 80065b0:	f043 0301 	orreq.w	r3, r3, #1
 80065b4:	3228      	adds	r2, #40	; 0x28
 80065b6:	428d      	cmp	r5, r1
 80065b8:	bf08      	it	eq
 80065ba:	f043 0301 	orreq.w	r3, r3, #1
 80065be:	3128      	adds	r1, #40	; 0x28
 80065c0:	4295      	cmp	r5, r2
 80065c2:	bf08      	it	eq
 80065c4:	f043 0301 	orreq.w	r3, r3, #1
 80065c8:	3228      	adds	r2, #40	; 0x28
 80065ca:	428d      	cmp	r5, r1
 80065cc:	bf08      	it	eq
 80065ce:	f043 0301 	orreq.w	r3, r3, #1
 80065d2:	4295      	cmp	r5, r2
 80065d4:	bf08      	it	eq
 80065d6:	f043 0301 	orreq.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f43f af3d 	beq.w	800645a <HAL_DMA_Start_IT+0x18e>
 80065e0:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 80065e4:	e728      	b.n	8006438 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
}
 80065e8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80065ea:	2002      	movs	r0, #2
}
 80065ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065f0:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065f2:	60e9      	str	r1, [r5, #12]
 80065f4:	e70f      	b.n	8006416 <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80065f6:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80065f8:	60e9      	str	r1, [r5, #12]
 80065fa:	e7ba      	b.n	8006572 <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065fc:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80065fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006600:	f023 030e 	bic.w	r3, r3, #14
 8006604:	f043 030a 	orr.w	r3, r3, #10
 8006608:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800660a:	2a00      	cmp	r2, #0
 800660c:	d1ba      	bne.n	8006584 <HAL_DMA_Start_IT+0x2b8>
 800660e:	e7bd      	b.n	800658c <HAL_DMA_Start_IT+0x2c0>
 8006610:	5802541c 	.word	0x5802541c
 8006614:	58025494 	.word	0x58025494
 8006618:	58025408 	.word	0x58025408
 800661c:	58025430 	.word	0x58025430

08006620 <HAL_DMA_Abort>:
{
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006624:	f7fd fefe 	bl	8004424 <HAL_GetTick>
  if(hdma == NULL)
 8006628:	2d00      	cmp	r5, #0
 800662a:	f000 8129 	beq.w	8006880 <HAL_DMA_Abort+0x260>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800662e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8006632:	2b02      	cmp	r3, #2
 8006634:	f040 80e2 	bne.w	80067fc <HAL_DMA_Abort+0x1dc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006638:	682c      	ldr	r4, [r5, #0]
 800663a:	4606      	mov	r6, r0
 800663c:	4b91      	ldr	r3, [pc, #580]	; (8006884 <HAL_DMA_Abort+0x264>)
 800663e:	4992      	ldr	r1, [pc, #584]	; (8006888 <HAL_DMA_Abort+0x268>)
 8006640:	4a92      	ldr	r2, [pc, #584]	; (800688c <HAL_DMA_Abort+0x26c>)
 8006642:	428c      	cmp	r4, r1
 8006644:	bf18      	it	ne
 8006646:	429c      	cmpne	r4, r3
 8006648:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800664c:	4890      	ldr	r0, [pc, #576]	; (8006890 <HAL_DMA_Abort+0x270>)
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	4294      	cmp	r4, r2
 8006656:	bf08      	it	eq
 8006658:	f043 0301 	orreq.w	r3, r3, #1
 800665c:	3248      	adds	r2, #72	; 0x48
 800665e:	428c      	cmp	r4, r1
 8006660:	bf08      	it	eq
 8006662:	f043 0301 	orreq.w	r3, r3, #1
 8006666:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800666a:	4284      	cmp	r4, r0
 800666c:	bf08      	it	eq
 800666e:	f043 0301 	orreq.w	r3, r3, #1
 8006672:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8006676:	4294      	cmp	r4, r2
 8006678:	bf08      	it	eq
 800667a:	f043 0301 	orreq.w	r3, r3, #1
 800667e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8006682:	428c      	cmp	r4, r1
 8006684:	bf08      	it	eq
 8006686:	f043 0301 	orreq.w	r3, r3, #1
 800668a:	3148      	adds	r1, #72	; 0x48
 800668c:	4284      	cmp	r4, r0
 800668e:	bf08      	it	eq
 8006690:	f043 0301 	orreq.w	r3, r3, #1
 8006694:	3048      	adds	r0, #72	; 0x48
 8006696:	4294      	cmp	r4, r2
 8006698:	bf08      	it	eq
 800669a:	f043 0301 	orreq.w	r3, r3, #1
 800669e:	3248      	adds	r2, #72	; 0x48
 80066a0:	428c      	cmp	r4, r1
 80066a2:	bf08      	it	eq
 80066a4:	f043 0301 	orreq.w	r3, r3, #1
 80066a8:	3148      	adds	r1, #72	; 0x48
 80066aa:	4284      	cmp	r4, r0
 80066ac:	bf08      	it	eq
 80066ae:	f043 0301 	orreq.w	r3, r3, #1
 80066b2:	3048      	adds	r0, #72	; 0x48
 80066b4:	4294      	cmp	r4, r2
 80066b6:	bf08      	it	eq
 80066b8:	f043 0301 	orreq.w	r3, r3, #1
 80066bc:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80066c0:	428c      	cmp	r4, r1
 80066c2:	bf08      	it	eq
 80066c4:	f043 0301 	orreq.w	r3, r3, #1
 80066c8:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 80066cc:	4284      	cmp	r4, r0
 80066ce:	bf08      	it	eq
 80066d0:	f043 0301 	orreq.w	r3, r3, #1
 80066d4:	428c      	cmp	r4, r1
 80066d6:	bf18      	it	ne
 80066d8:	4294      	cmpne	r4, r2
 80066da:	bf0c      	ite	eq
 80066dc:	2201      	moveq	r2, #1
 80066de:	2200      	movne	r2, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_DMA_Abort+0xc8>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8091 	beq.w	800680a <HAL_DMA_Abort+0x1ea>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	f021 011e 	bic.w	r1, r1, #30
 80066ee:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066f0:	6961      	ldr	r1, [r4, #20]
 80066f2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066f6:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f000 80b1 	beq.w	8006860 <HAL_DMA_Abort+0x240>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006700:	6813      	ldr	r3, [r2, #0]
 8006702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	e005      	b.n	800671e <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006712:	f7fd fe87 	bl	8004424 <HAL_GetTick>
 8006716:	1b83      	subs	r3, r0, r6
 8006718:	2b05      	cmp	r3, #5
 800671a:	f200 80a7 	bhi.w	800686c <HAL_DMA_Abort+0x24c>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	07db      	lsls	r3, r3, #31
 8006722:	d4f6      	bmi.n	8006712 <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006724:	682a      	ldr	r2, [r5, #0]
 8006726:	4b57      	ldr	r3, [pc, #348]	; (8006884 <HAL_DMA_Abort+0x264>)
 8006728:	4957      	ldr	r1, [pc, #348]	; (8006888 <HAL_DMA_Abort+0x268>)
 800672a:	4c58      	ldr	r4, [pc, #352]	; (800688c <HAL_DMA_Abort+0x26c>)
 800672c:	428a      	cmp	r2, r1
 800672e:	bf18      	it	ne
 8006730:	429a      	cmpne	r2, r3
 8006732:	4858      	ldr	r0, [pc, #352]	; (8006894 <HAL_DMA_Abort+0x274>)
 8006734:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	42a2      	cmp	r2, r4
 8006740:	bf08      	it	eq
 8006742:	f043 0301 	orreq.w	r3, r3, #1
 8006746:	3448      	adds	r4, #72	; 0x48
 8006748:	4282      	cmp	r2, r0
 800674a:	bf08      	it	eq
 800674c:	f043 0301 	orreq.w	r3, r3, #1
 8006750:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8006754:	428a      	cmp	r2, r1
 8006756:	bf08      	it	eq
 8006758:	f043 0301 	orreq.w	r3, r3, #1
 800675c:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8006760:	42a2      	cmp	r2, r4
 8006762:	bf08      	it	eq
 8006764:	f043 0301 	orreq.w	r3, r3, #1
 8006768:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800676c:	4282      	cmp	r2, r0
 800676e:	bf08      	it	eq
 8006770:	f043 0301 	orreq.w	r3, r3, #1
 8006774:	3048      	adds	r0, #72	; 0x48
 8006776:	428a      	cmp	r2, r1
 8006778:	bf08      	it	eq
 800677a:	f043 0301 	orreq.w	r3, r3, #1
 800677e:	3148      	adds	r1, #72	; 0x48
 8006780:	42a2      	cmp	r2, r4
 8006782:	bf08      	it	eq
 8006784:	f043 0301 	orreq.w	r3, r3, #1
 8006788:	3448      	adds	r4, #72	; 0x48
 800678a:	4282      	cmp	r2, r0
 800678c:	bf08      	it	eq
 800678e:	f043 0301 	orreq.w	r3, r3, #1
 8006792:	3048      	adds	r0, #72	; 0x48
 8006794:	428a      	cmp	r2, r1
 8006796:	bf08      	it	eq
 8006798:	f043 0301 	orreq.w	r3, r3, #1
 800679c:	3148      	adds	r1, #72	; 0x48
 800679e:	42a2      	cmp	r2, r4
 80067a0:	bf08      	it	eq
 80067a2:	f043 0301 	orreq.w	r3, r3, #1
 80067a6:	4282      	cmp	r2, r0
 80067a8:	bf08      	it	eq
 80067aa:	f043 0301 	orreq.w	r3, r3, #1
 80067ae:	428a      	cmp	r2, r1
 80067b0:	bf08      	it	eq
 80067b2:	f043 0301 	orreq.w	r3, r3, #1
 80067b6:	b933      	cbnz	r3, 80067c6 <HAL_DMA_Abort+0x1a6>
 80067b8:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <HAL_DMA_Abort+0x278>)
 80067be:	429a      	cmp	r2, r3
 80067c0:	bf18      	it	ne
 80067c2:	428a      	cmpne	r2, r1
 80067c4:	d172      	bne.n	80068ac <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80067c8:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067ca:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067cc:	f002 021f 	and.w	r2, r2, #31
 80067d0:	4093      	lsls	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80067d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067d6:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 80067da:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80067dc:	b133      	cbz	r3, 80067ec <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067de:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067e0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80067e2:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ea:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80067ec:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80067ee:	2201      	movs	r2, #1
  return HAL_OK;
 80067f0:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80067f2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80067f6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067fc:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80067fe:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006800:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006802:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006804:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8006808:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <HAL_DMA_Abort+0x27c>)
 800680c:	4924      	ldr	r1, [pc, #144]	; (80068a0 <HAL_DMA_Abort+0x280>)
 800680e:	4825      	ldr	r0, [pc, #148]	; (80068a4 <HAL_DMA_Abort+0x284>)
 8006810:	428c      	cmp	r4, r1
 8006812:	bf18      	it	ne
 8006814:	4294      	cmpne	r4, r2
 8006816:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800681a:	bf0c      	ite	eq
 800681c:	2201      	moveq	r2, #1
 800681e:	2200      	movne	r2, #0
 8006820:	4284      	cmp	r4, r0
 8006822:	bf08      	it	eq
 8006824:	f042 0201 	orreq.w	r2, r2, #1
 8006828:	3028      	adds	r0, #40	; 0x28
 800682a:	428c      	cmp	r4, r1
 800682c:	bf08      	it	eq
 800682e:	f042 0201 	orreq.w	r2, r2, #1
 8006832:	3128      	adds	r1, #40	; 0x28
 8006834:	4284      	cmp	r4, r0
 8006836:	bf08      	it	eq
 8006838:	f042 0201 	orreq.w	r2, r2, #1
 800683c:	3028      	adds	r0, #40	; 0x28
 800683e:	428c      	cmp	r4, r1
 8006840:	bf08      	it	eq
 8006842:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006846:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006848:	4284      	cmp	r4, r0
 800684a:	bf08      	it	eq
 800684c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006850:	f021 010e 	bic.w	r1, r1, #14
 8006854:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006856:	b91a      	cbnz	r2, 8006860 <HAL_DMA_Abort+0x240>
 8006858:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <HAL_DMA_Abort+0x288>)
 800685a:	4294      	cmp	r4, r2
 800685c:	f47f af54 	bne.w	8006708 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006860:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006862:	680a      	ldr	r2, [r1, #0]
 8006864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006868:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800686a:	e74d      	b.n	8006708 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800686c:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800686e:	2303      	movs	r3, #3
        __HAL_UNLOCK(hdma);
 8006870:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006872:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006874:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006876:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800687a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800687e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006880:	2001      	movs	r0, #1
}
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	40020058 	.word	0x40020058
 8006888:	40020040 	.word	0x40020040
 800688c:	40020070 	.word	0x40020070
 8006890:	400200a0 	.word	0x400200a0
 8006894:	40020088 	.word	0x40020088
 8006898:	40020028 	.word	0x40020028
 800689c:	5802541c 	.word	0x5802541c
 80068a0:	58025408 	.word	0x58025408
 80068a4:	58025430 	.word	0x58025430
 80068a8:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ac:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80068b0:	4b18      	ldr	r3, [pc, #96]	; (8006914 <HAL_DMA_Abort+0x2f4>)
 80068b2:	4819      	ldr	r0, [pc, #100]	; (8006918 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068b4:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068b6:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80068ba:	42a2      	cmp	r2, r4
 80068bc:	bf18      	it	ne
 80068be:	429a      	cmpne	r2, r3
 80068c0:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	4282      	cmp	r2, r0
 80068cc:	bf08      	it	eq
 80068ce:	f043 0301 	orreq.w	r3, r3, #1
 80068d2:	3028      	adds	r0, #40	; 0x28
 80068d4:	42a2      	cmp	r2, r4
 80068d6:	bf08      	it	eq
 80068d8:	f043 0301 	orreq.w	r3, r3, #1
 80068dc:	3428      	adds	r4, #40	; 0x28
 80068de:	4282      	cmp	r2, r0
 80068e0:	bf08      	it	eq
 80068e2:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068e6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068e8:	42a2      	cmp	r2, r4
 80068ea:	bf08      	it	eq
 80068ec:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068f0:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068f4:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068f6:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068f8:	42a2      	cmp	r2, r4
 80068fa:	bf08      	it	eq
 80068fc:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006900:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006902:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f af65 	bne.w	80067d4 <HAL_DMA_Abort+0x1b4>
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <HAL_DMA_Abort+0x2fc>)
 800690c:	429a      	cmp	r2, r3
 800690e:	f43f af61 	beq.w	80067d4 <HAL_DMA_Abort+0x1b4>
 8006912:	e76b      	b.n	80067ec <HAL_DMA_Abort+0x1cc>
 8006914:	5802541c 	.word	0x5802541c
 8006918:	58025430 	.word	0x58025430
 800691c:	58025494 	.word	0x58025494

08006920 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8006920:	2800      	cmp	r0, #0
 8006922:	d060      	beq.n	80069e6 <HAL_DMA_Abort_IT+0xc6>
{
 8006924:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006926:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800692a:	4603      	mov	r3, r0
 800692c:	2a02      	cmp	r2, #2
 800692e:	d156      	bne.n	80069de <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006930:	6801      	ldr	r1, [r0, #0]
 8006932:	4a59      	ldr	r2, [pc, #356]	; (8006a98 <HAL_DMA_Abort_IT+0x178>)
 8006934:	4291      	cmp	r1, r2
 8006936:	d049      	beq.n	80069cc <HAL_DMA_Abort_IT+0xac>
 8006938:	3218      	adds	r2, #24
 800693a:	4291      	cmp	r1, r2
 800693c:	d046      	beq.n	80069cc <HAL_DMA_Abort_IT+0xac>
 800693e:	3230      	adds	r2, #48	; 0x30
 8006940:	4856      	ldr	r0, [pc, #344]	; (8006a9c <HAL_DMA_Abort_IT+0x17c>)
 8006942:	4c57      	ldr	r4, [pc, #348]	; (8006aa0 <HAL_DMA_Abort_IT+0x180>)
 8006944:	4281      	cmp	r1, r0
 8006946:	bf18      	it	ne
 8006948:	4291      	cmpne	r1, r2
 800694a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800694e:	4d55      	ldr	r5, [pc, #340]	; (8006aa4 <HAL_DMA_Abort_IT+0x184>)
 8006950:	bf0c      	ite	eq
 8006952:	2201      	moveq	r2, #1
 8006954:	2200      	movne	r2, #0
 8006956:	42a1      	cmp	r1, r4
 8006958:	bf08      	it	eq
 800695a:	f042 0201 	orreq.w	r2, r2, #1
 800695e:	3448      	adds	r4, #72	; 0x48
 8006960:	4281      	cmp	r1, r0
 8006962:	bf08      	it	eq
 8006964:	f042 0201 	orreq.w	r2, r2, #1
 8006968:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800696c:	42a9      	cmp	r1, r5
 800696e:	bf08      	it	eq
 8006970:	f042 0201 	orreq.w	r2, r2, #1
 8006974:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8006978:	42a1      	cmp	r1, r4
 800697a:	bf08      	it	eq
 800697c:	f042 0201 	orreq.w	r2, r2, #1
 8006980:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8006984:	4281      	cmp	r1, r0
 8006986:	bf08      	it	eq
 8006988:	f042 0201 	orreq.w	r2, r2, #1
 800698c:	3048      	adds	r0, #72	; 0x48
 800698e:	42a9      	cmp	r1, r5
 8006990:	bf08      	it	eq
 8006992:	f042 0201 	orreq.w	r2, r2, #1
 8006996:	3548      	adds	r5, #72	; 0x48
 8006998:	42a1      	cmp	r1, r4
 800699a:	bf08      	it	eq
 800699c:	f042 0201 	orreq.w	r2, r2, #1
 80069a0:	3448      	adds	r4, #72	; 0x48
 80069a2:	4281      	cmp	r1, r0
 80069a4:	bf08      	it	eq
 80069a6:	f042 0201 	orreq.w	r2, r2, #1
 80069aa:	3048      	adds	r0, #72	; 0x48
 80069ac:	42a9      	cmp	r1, r5
 80069ae:	bf08      	it	eq
 80069b0:	f042 0201 	orreq.w	r2, r2, #1
 80069b4:	42a1      	cmp	r1, r4
 80069b6:	bf08      	it	eq
 80069b8:	f042 0201 	orreq.w	r2, r2, #1
 80069bc:	4281      	cmp	r1, r0
 80069be:	bf08      	it	eq
 80069c0:	f042 0201 	orreq.w	r2, r2, #1
 80069c4:	b912      	cbnz	r2, 80069cc <HAL_DMA_Abort_IT+0xac>
 80069c6:	4a38      	ldr	r2, [pc, #224]	; (8006aa8 <HAL_DMA_Abort_IT+0x188>)
 80069c8:	4291      	cmp	r1, r2
 80069ca:	d10e      	bne.n	80069ea <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80069cc:	2204      	movs	r2, #4
  return HAL_OK;
 80069ce:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80069d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	f023 0301 	bic.w	r3, r3, #1
 80069da:	600b      	str	r3, [r1, #0]
}
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069de:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80069e0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80069e6:	2001      	movs	r0, #1
}
 80069e8:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ea:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80069ee:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <HAL_DMA_Abort_IT+0x18c>)
 80069f0:	482f      	ldr	r0, [pc, #188]	; (8006ab0 <HAL_DMA_Abort_IT+0x190>)
 80069f2:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80069f6:	4d2f      	ldr	r5, [pc, #188]	; (8006ab4 <HAL_DMA_Abort_IT+0x194>)
 80069f8:	42a1      	cmp	r1, r4
 80069fa:	bf18      	it	ne
 80069fc:	4291      	cmpne	r1, r2
 80069fe:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8006a02:	bf0c      	ite	eq
 8006a04:	2201      	moveq	r2, #1
 8006a06:	2200      	movne	r2, #0
 8006a08:	4281      	cmp	r1, r0
 8006a0a:	bf08      	it	eq
 8006a0c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a10:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a12:	42a9      	cmp	r1, r5
 8006a14:	bf08      	it	eq
 8006a16:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a1a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a1e:	3528      	adds	r5, #40	; 0x28
 8006a20:	42a1      	cmp	r1, r4
 8006a22:	bf08      	it	eq
 8006a24:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a28:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a2a:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8006a2c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a2e:	42a9      	cmp	r1, r5
 8006a30:	bf08      	it	eq
 8006a32:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8006a36:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a3a:	42a1      	cmp	r1, r4
 8006a3c:	bf08      	it	eq
 8006a3e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8006a42:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a44:	b912      	cbnz	r2, 8006a4c <HAL_DMA_Abort_IT+0x12c>
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <HAL_DMA_Abort_IT+0x198>)
 8006a48:	4291      	cmp	r1, r2
 8006a4a:	d117      	bne.n	8006a7c <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a4c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a4e:	2101      	movs	r1, #1
 8006a50:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a52:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a54:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a58:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a5e:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a60:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a62:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 8006a64:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a68:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a6a:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006a6c:	b132      	cbz	r2, 8006a7c <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a6e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a70:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006a72:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a74:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006a78:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a7a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8006a7c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8006a7e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8006a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8006a82:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8006a86:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8006a8a:	b11a      	cbz	r2, 8006a94 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4790      	blx	r2
  return HAL_OK;
 8006a90:	4620      	mov	r0, r4
}
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8006a94:	4610      	mov	r0, r2
}
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	40020010 	.word	0x40020010
 8006a9c:	40020040 	.word	0x40020040
 8006aa0:	40020070 	.word	0x40020070
 8006aa4:	400200a0 	.word	0x400200a0
 8006aa8:	400204b8 	.word	0x400204b8
 8006aac:	5802541c 	.word	0x5802541c
 8006ab0:	58025430 	.word	0x58025430
 8006ab4:	58025444 	.word	0x58025444
 8006ab8:	58025494 	.word	0x58025494

08006abc <HAL_DMA_IRQHandler>:
{
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ac0:	4a9f      	ldr	r2, [pc, #636]	; (8006d40 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 8006ac2:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ac4:	4e9f      	ldr	r6, [pc, #636]	; (8006d44 <HAL_DMA_IRQHandler+0x288>)
{
 8006ac6:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ac8:	6803      	ldr	r3, [r0, #0]
{
 8006aca:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006acc:	499e      	ldr	r1, [pc, #632]	; (8006d48 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ace:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bf18      	it	ne
 8006ad4:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 8006ad6:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ad8:	bf08      	it	eq
 8006ada:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8006adc:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 8006ade:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ae0:	bf18      	it	ne
 8006ae2:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8006ae4:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ae6:	d04a      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xc2>
 8006ae8:	3230      	adds	r2, #48	; 0x30
 8006aea:	f8df e268 	ldr.w	lr, [pc, #616]	; 8006d54 <HAL_DMA_IRQHandler+0x298>
 8006aee:	4897      	ldr	r0, [pc, #604]	; (8006d4c <HAL_DMA_IRQHandler+0x290>)
 8006af0:	4573      	cmp	r3, lr
 8006af2:	bf18      	it	ne
 8006af4:	4293      	cmpne	r3, r2
 8006af6:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 8006afa:	bf0c      	ite	eq
 8006afc:	2201      	moveq	r2, #1
 8006afe:	2200      	movne	r2, #0
 8006b00:	4283      	cmp	r3, r0
 8006b02:	bf08      	it	eq
 8006b04:	f042 0201 	orreq.w	r2, r2, #1
 8006b08:	3030      	adds	r0, #48	; 0x30
 8006b0a:	4573      	cmp	r3, lr
 8006b0c:	bf08      	it	eq
 8006b0e:	f042 0201 	orreq.w	r2, r2, #1
 8006b12:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006b16:	4283      	cmp	r3, r0
 8006b18:	bf08      	it	eq
 8006b1a:	f042 0201 	orreq.w	r2, r2, #1
 8006b1e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006b22:	4573      	cmp	r3, lr
 8006b24:	bf08      	it	eq
 8006b26:	f042 0201 	orreq.w	r2, r2, #1
 8006b2a:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8006b2e:	4283      	cmp	r3, r0
 8006b30:	bf08      	it	eq
 8006b32:	f042 0201 	orreq.w	r2, r2, #1
 8006b36:	3030      	adds	r0, #48	; 0x30
 8006b38:	4573      	cmp	r3, lr
 8006b3a:	bf08      	it	eq
 8006b3c:	f042 0201 	orreq.w	r2, r2, #1
 8006b40:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006b44:	4283      	cmp	r3, r0
 8006b46:	bf08      	it	eq
 8006b48:	f042 0201 	orreq.w	r2, r2, #1
 8006b4c:	3030      	adds	r0, #48	; 0x30
 8006b4e:	4573      	cmp	r3, lr
 8006b50:	bf08      	it	eq
 8006b52:	f042 0201 	orreq.w	r2, r2, #1
 8006b56:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006b5a:	4283      	cmp	r3, r0
 8006b5c:	bf08      	it	eq
 8006b5e:	f042 0201 	orreq.w	r2, r2, #1
 8006b62:	3030      	adds	r0, #48	; 0x30
 8006b64:	4573      	cmp	r3, lr
 8006b66:	bf08      	it	eq
 8006b68:	f042 0201 	orreq.w	r2, r2, #1
 8006b6c:	4283      	cmp	r3, r0
 8006b6e:	bf08      	it	eq
 8006b70:	f042 0201 	orreq.w	r2, r2, #1
 8006b74:	b91a      	cbnz	r2, 8006b7e <HAL_DMA_IRQHandler+0xc2>
 8006b76:	4a76      	ldr	r2, [pc, #472]	; (8006d50 <HAL_DMA_IRQHandler+0x294>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	f040 820b 	bne.w	8006f94 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b7e:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8006b82:	2208      	movs	r2, #8
 8006b84:	f001 0c1f 	and.w	ip, r1, #31
 8006b88:	fa02 f20c 	lsl.w	r2, r2, ip
 8006b8c:	4217      	tst	r7, r2
 8006b8e:	f040 818d 	bne.w	8006eac <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b92:	fa27 f20c 	lsr.w	r2, r7, ip
 8006b96:	07d2      	lsls	r2, r2, #31
 8006b98:	d50c      	bpl.n	8006bb4 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	0610      	lsls	r0, r2, #24
 8006b9e:	d509      	bpl.n	8006bb4 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	fa02 f20c 	lsl.w	r2, r2, ip
 8006ba6:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006bac:	f042 0202 	orr.w	r2, r2, #2
 8006bb0:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb4:	f04f 0e04 	mov.w	lr, #4
 8006bb8:	fa0e f00c 	lsl.w	r0, lr, ip
 8006bbc:	4238      	tst	r0, r7
 8006bbe:	d05b      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d14f      	bne.n	8006c64 <HAL_DMA_IRQHandler+0x1a8>
 8006bc4:	4a63      	ldr	r2, [pc, #396]	; (8006d54 <HAL_DMA_IRQHandler+0x298>)
 8006bc6:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8006d58 <HAL_DMA_IRQHandler+0x29c>
 8006bca:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8006d4c <HAL_DMA_IRQHandler+0x290>
 8006bce:	454b      	cmp	r3, r9
 8006bd0:	bf18      	it	ne
 8006bd2:	4293      	cmpne	r3, r2
 8006bd4:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006bd8:	bf0c      	ite	eq
 8006bda:	2201      	moveq	r2, #1
 8006bdc:	2200      	movne	r2, #0
 8006bde:	4543      	cmp	r3, r8
 8006be0:	bf08      	it	eq
 8006be2:	f042 0201 	orreq.w	r2, r2, #1
 8006be6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006bea:	454b      	cmp	r3, r9
 8006bec:	bf08      	it	eq
 8006bee:	f042 0201 	orreq.w	r2, r2, #1
 8006bf2:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006bf6:	4543      	cmp	r3, r8
 8006bf8:	bf08      	it	eq
 8006bfa:	f042 0201 	orreq.w	r2, r2, #1
 8006bfe:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006c02:	454b      	cmp	r3, r9
 8006c04:	bf08      	it	eq
 8006c06:	f042 0201 	orreq.w	r2, r2, #1
 8006c0a:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8006c0e:	4543      	cmp	r3, r8
 8006c10:	bf08      	it	eq
 8006c12:	f042 0201 	orreq.w	r2, r2, #1
 8006c16:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c1a:	454b      	cmp	r3, r9
 8006c1c:	bf08      	it	eq
 8006c1e:	f042 0201 	orreq.w	r2, r2, #1
 8006c22:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006c26:	4543      	cmp	r3, r8
 8006c28:	bf08      	it	eq
 8006c2a:	f042 0201 	orreq.w	r2, r2, #1
 8006c2e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c32:	454b      	cmp	r3, r9
 8006c34:	bf08      	it	eq
 8006c36:	f042 0201 	orreq.w	r2, r2, #1
 8006c3a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006c3e:	4543      	cmp	r3, r8
 8006c40:	bf08      	it	eq
 8006c42:	f042 0201 	orreq.w	r2, r2, #1
 8006c46:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c4a:	454b      	cmp	r3, r9
 8006c4c:	bf08      	it	eq
 8006c4e:	f042 0201 	orreq.w	r2, r2, #1
 8006c52:	4543      	cmp	r3, r8
 8006c54:	bf08      	it	eq
 8006c56:	f042 0201 	orreq.w	r2, r2, #1
 8006c5a:	b91a      	cbnz	r2, 8006c64 <HAL_DMA_IRQHandler+0x1a8>
 8006c5c:	4a3c      	ldr	r2, [pc, #240]	; (8006d50 <HAL_DMA_IRQHandler+0x294>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	f040 822f 	bne.w	80070c2 <HAL_DMA_IRQHandler+0x606>
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	0792      	lsls	r2, r2, #30
 8006c68:	d506      	bpl.n	8006c78 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c6a:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c6c:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006c70:	f042 0204 	orr.w	r2, r2, #4
 8006c74:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c78:	2210      	movs	r2, #16
 8006c7a:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006c7e:	ea1c 0f07 	tst.w	ip, r7
 8006c82:	d06f      	beq.n	8006d64 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	d146      	bne.n	8006d16 <HAL_DMA_IRQHandler+0x25a>
 8006c88:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <HAL_DMA_IRQHandler+0x298>)
 8006c8a:	4833      	ldr	r0, [pc, #204]	; (8006d58 <HAL_DMA_IRQHandler+0x29c>)
 8006c8c:	4e2f      	ldr	r6, [pc, #188]	; (8006d4c <HAL_DMA_IRQHandler+0x290>)
 8006c8e:	4283      	cmp	r3, r0
 8006c90:	bf18      	it	ne
 8006c92:	4293      	cmpne	r3, r2
 8006c94:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006c98:	bf0c      	ite	eq
 8006c9a:	2201      	moveq	r2, #1
 8006c9c:	2200      	movne	r2, #0
 8006c9e:	42b3      	cmp	r3, r6
 8006ca0:	bf08      	it	eq
 8006ca2:	f042 0201 	orreq.w	r2, r2, #1
 8006ca6:	3630      	adds	r6, #48	; 0x30
 8006ca8:	4283      	cmp	r3, r0
 8006caa:	bf08      	it	eq
 8006cac:	f042 0201 	orreq.w	r2, r2, #1
 8006cb0:	3030      	adds	r0, #48	; 0x30
 8006cb2:	42b3      	cmp	r3, r6
 8006cb4:	bf08      	it	eq
 8006cb6:	f042 0201 	orreq.w	r2, r2, #1
 8006cba:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8006cbe:	4283      	cmp	r3, r0
 8006cc0:	bf08      	it	eq
 8006cc2:	f042 0201 	orreq.w	r2, r2, #1
 8006cc6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006cca:	42b3      	cmp	r3, r6
 8006ccc:	bf08      	it	eq
 8006cce:	f042 0201 	orreq.w	r2, r2, #1
 8006cd2:	3630      	adds	r6, #48	; 0x30
 8006cd4:	4283      	cmp	r3, r0
 8006cd6:	bf08      	it	eq
 8006cd8:	f042 0201 	orreq.w	r2, r2, #1
 8006cdc:	3030      	adds	r0, #48	; 0x30
 8006cde:	42b3      	cmp	r3, r6
 8006ce0:	bf08      	it	eq
 8006ce2:	f042 0201 	orreq.w	r2, r2, #1
 8006ce6:	3630      	adds	r6, #48	; 0x30
 8006ce8:	4283      	cmp	r3, r0
 8006cea:	bf08      	it	eq
 8006cec:	f042 0201 	orreq.w	r2, r2, #1
 8006cf0:	3030      	adds	r0, #48	; 0x30
 8006cf2:	42b3      	cmp	r3, r6
 8006cf4:	bf08      	it	eq
 8006cf6:	f042 0201 	orreq.w	r2, r2, #1
 8006cfa:	3630      	adds	r6, #48	; 0x30
 8006cfc:	4283      	cmp	r3, r0
 8006cfe:	bf08      	it	eq
 8006d00:	f042 0201 	orreq.w	r2, r2, #1
 8006d04:	42b3      	cmp	r3, r6
 8006d06:	bf08      	it	eq
 8006d08:	f042 0201 	orreq.w	r2, r2, #1
 8006d0c:	b91a      	cbnz	r2, 8006d16 <HAL_DMA_IRQHandler+0x25a>
 8006d0e:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <HAL_DMA_IRQHandler+0x294>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	f040 81de 	bne.w	80070d2 <HAL_DMA_IRQHandler+0x616>
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8006d1c:	b312      	cbz	r2, 8006d64 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d1e:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	0352      	lsls	r2, r2, #13
 8006d26:	f100 818b 	bmi.w	8007040 <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	05d6      	lsls	r6, r2, #23
 8006d2e:	d403      	bmi.n	8006d38 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	f022 0208 	bic.w	r2, r2, #8
 8006d36:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006d38:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006d3c:	b193      	cbz	r3, 8006d64 <HAL_DMA_IRQHandler+0x2a8>
 8006d3e:	e00d      	b.n	8006d5c <HAL_DMA_IRQHandler+0x2a0>
 8006d40:	40020028 	.word	0x40020028
 8006d44:	40020010 	.word	0x40020010
 8006d48:	240001ec 	.word	0x240001ec
 8006d4c:	40020070 	.word	0x40020070
 8006d50:	400204b8 	.word	0x400204b8
 8006d54:	40020040 	.word	0x40020040
 8006d58:	40020058 	.word	0x40020058
            hdma->XferHalfCpltCallback(hdma);
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	4798      	blx	r3
 8006d60:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d64:	f001 011f 	and.w	r1, r1, #31
 8006d68:	2620      	movs	r6, #32
 8006d6a:	408e      	lsls	r6, r1
 8006d6c:	423e      	tst	r6, r7
 8006d6e:	d06a      	beq.n	8006e46 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d70:	f8da 2000 	ldr.w	r2, [sl]
 8006d74:	4ba7      	ldr	r3, [pc, #668]	; (8007014 <HAL_DMA_IRQHandler+0x558>)
 8006d76:	48a8      	ldr	r0, [pc, #672]	; (8007018 <HAL_DMA_IRQHandler+0x55c>)
 8006d78:	4fa8      	ldr	r7, [pc, #672]	; (800701c <HAL_DMA_IRQHandler+0x560>)
 8006d7a:	4282      	cmp	r2, r0
 8006d7c:	bf18      	it	ne
 8006d7e:	429a      	cmpne	r2, r3
 8006d80:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	42ba      	cmp	r2, r7
 8006d8c:	bf08      	it	eq
 8006d8e:	f043 0301 	orreq.w	r3, r3, #1
 8006d92:	3730      	adds	r7, #48	; 0x30
 8006d94:	4282      	cmp	r2, r0
 8006d96:	bf08      	it	eq
 8006d98:	f043 0301 	orreq.w	r3, r3, #1
 8006d9c:	3030      	adds	r0, #48	; 0x30
 8006d9e:	42ba      	cmp	r2, r7
 8006da0:	bf08      	it	eq
 8006da2:	f043 0301 	orreq.w	r3, r3, #1
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	4282      	cmp	r2, r0
 8006daa:	bf08      	it	eq
 8006dac:	f043 0301 	orreq.w	r3, r3, #1
 8006db0:	3030      	adds	r0, #48	; 0x30
 8006db2:	42ba      	cmp	r2, r7
 8006db4:	bf08      	it	eq
 8006db6:	f043 0301 	orreq.w	r3, r3, #1
 8006dba:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8006dbe:	4282      	cmp	r2, r0
 8006dc0:	bf08      	it	eq
 8006dc2:	f043 0301 	orreq.w	r3, r3, #1
 8006dc6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006dca:	42ba      	cmp	r2, r7
 8006dcc:	bf08      	it	eq
 8006dce:	f043 0301 	orreq.w	r3, r3, #1
 8006dd2:	3730      	adds	r7, #48	; 0x30
 8006dd4:	4282      	cmp	r2, r0
 8006dd6:	bf08      	it	eq
 8006dd8:	f043 0301 	orreq.w	r3, r3, #1
 8006ddc:	3030      	adds	r0, #48	; 0x30
 8006dde:	42ba      	cmp	r2, r7
 8006de0:	bf08      	it	eq
 8006de2:	f043 0301 	orreq.w	r3, r3, #1
 8006de6:	3730      	adds	r7, #48	; 0x30
 8006de8:	4282      	cmp	r2, r0
 8006dea:	bf08      	it	eq
 8006dec:	f043 0301 	orreq.w	r3, r3, #1
 8006df0:	3030      	adds	r0, #48	; 0x30
 8006df2:	42ba      	cmp	r2, r7
 8006df4:	bf08      	it	eq
 8006df6:	f043 0301 	orreq.w	r3, r3, #1
 8006dfa:	3730      	adds	r7, #48	; 0x30
 8006dfc:	4282      	cmp	r2, r0
 8006dfe:	bf08      	it	eq
 8006e00:	f043 0301 	orreq.w	r3, r3, #1
 8006e04:	42ba      	cmp	r2, r7
 8006e06:	bf08      	it	eq
 8006e08:	f043 0301 	orreq.w	r3, r3, #1
 8006e0c:	b91b      	cbnz	r3, 8006e16 <HAL_DMA_IRQHandler+0x35a>
 8006e0e:	4b84      	ldr	r3, [pc, #528]	; (8007020 <HAL_DMA_IRQHandler+0x564>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	f040 8173 	bne.w	80070fc <HAL_DMA_IRQHandler+0x640>
 8006e16:	6813      	ldr	r3, [r2, #0]
 8006e18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e1c:	b19b      	cbz	r3, 8006e46 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e1e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e20:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8006e24:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e26:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e28:	f000 8114 	beq.w	8007054 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e30:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e32:	f000 812d 	beq.w	8007090 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e36:	031c      	lsls	r4, r3, #12
 8006e38:	f140 8138 	bpl.w	80070ac <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 8006e3c:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006e40:	b10b      	cbz	r3, 8006e46 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 8006e42:	4650      	mov	r0, sl
 8006e44:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e46:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80df 	beq.w	800700e <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e50:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006e54:	07d8      	lsls	r0, r3, #31
 8006e56:	d51f      	bpl.n	8006e98 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 8006e58:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e5c:	2404      	movs	r4, #4
 8006e5e:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e6a:	4b6e      	ldr	r3, [pc, #440]	; (8007024 <HAL_DMA_IRQHandler+0x568>)
 8006e6c:	fba3 3505 	umull	r3, r5, r3, r5
 8006e70:	0aad      	lsrs	r5, r5, #10
 8006e72:	e002      	b.n	8006e7a <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e74:	6813      	ldr	r3, [r2, #0]
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	d504      	bpl.n	8006e84 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	42ab      	cmp	r3, r5
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	d9f7      	bls.n	8006e74 <HAL_DMA_IRQHandler+0x3b8>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e88:	bf4c      	ite	mi
 8006e8a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8006e8c:	2301      	movpl	r3, #1
 8006e8e:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8006e92:	2300      	movs	r3, #0
 8006e94:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8006e98:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80b6 	beq.w	800700e <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 8006ea2:	4650      	mov	r0, sl
}
 8006ea4:	b002      	add	sp, #8
 8006ea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 8006eaa:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	0740      	lsls	r0, r0, #29
 8006eb0:	d50a      	bpl.n	8006ec8 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	f020 0004 	bic.w	r0, r0, #4
 8006eb8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eba:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ebc:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ec8:	fa27 f20c 	lsr.w	r2, r7, ip
 8006ecc:	07d2      	lsls	r2, r2, #31
 8006ece:	f57f ae71 	bpl.w	8006bb4 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ed2:	4a55      	ldr	r2, [pc, #340]	; (8007028 <HAL_DMA_IRQHandler+0x56c>)
 8006ed4:	4851      	ldr	r0, [pc, #324]	; (800701c <HAL_DMA_IRQHandler+0x560>)
 8006ed6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800703c <HAL_DMA_IRQHandler+0x580>
 8006eda:	4283      	cmp	r3, r0
 8006edc:	bf18      	it	ne
 8006ede:	4293      	cmpne	r3, r2
 8006ee0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2201      	moveq	r2, #1
 8006ee8:	2200      	movne	r2, #0
 8006eea:	4543      	cmp	r3, r8
 8006eec:	bf08      	it	eq
 8006eee:	f042 0201 	orreq.w	r2, r2, #1
 8006ef2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006ef6:	4283      	cmp	r3, r0
 8006ef8:	bf08      	it	eq
 8006efa:	f042 0201 	orreq.w	r2, r2, #1
 8006efe:	3030      	adds	r0, #48	; 0x30
 8006f00:	4543      	cmp	r3, r8
 8006f02:	bf08      	it	eq
 8006f04:	f042 0201 	orreq.w	r2, r2, #1
 8006f08:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006f0c:	4283      	cmp	r3, r0
 8006f0e:	bf08      	it	eq
 8006f10:	f042 0201 	orreq.w	r2, r2, #1
 8006f14:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006f18:	4543      	cmp	r3, r8
 8006f1a:	bf08      	it	eq
 8006f1c:	f042 0201 	orreq.w	r2, r2, #1
 8006f20:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006f24:	4283      	cmp	r3, r0
 8006f26:	bf08      	it	eq
 8006f28:	f042 0201 	orreq.w	r2, r2, #1
 8006f2c:	3030      	adds	r0, #48	; 0x30
 8006f2e:	4543      	cmp	r3, r8
 8006f30:	bf08      	it	eq
 8006f32:	f042 0201 	orreq.w	r2, r2, #1
 8006f36:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	bf08      	it	eq
 8006f3e:	f042 0201 	orreq.w	r2, r2, #1
 8006f42:	3030      	adds	r0, #48	; 0x30
 8006f44:	4543      	cmp	r3, r8
 8006f46:	bf08      	it	eq
 8006f48:	f042 0201 	orreq.w	r2, r2, #1
 8006f4c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006f50:	4283      	cmp	r3, r0
 8006f52:	bf08      	it	eq
 8006f54:	f042 0201 	orreq.w	r2, r2, #1
 8006f58:	3030      	adds	r0, #48	; 0x30
 8006f5a:	4543      	cmp	r3, r8
 8006f5c:	bf08      	it	eq
 8006f5e:	f042 0201 	orreq.w	r2, r2, #1
 8006f62:	4283      	cmp	r3, r0
 8006f64:	bf08      	it	eq
 8006f66:	f042 0201 	orreq.w	r2, r2, #1
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	f47f ae15 	bne.w	8006b9a <HAL_DMA_IRQHandler+0xde>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	f47f ae12 	bne.w	8006b9a <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f76:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006f78:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f7a:	fa02 f20c 	lsl.w	r2, r2, ip
 8006f7e:	423a      	tst	r2, r7
 8006f80:	f040 809f 	bne.w	80070c2 <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f84:	2210      	movs	r2, #16
 8006f86:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006f8a:	ea17 0f0c 	tst.w	r7, ip
 8006f8e:	f43f aee9 	beq.w	8006d64 <HAL_DMA_IRQHandler+0x2a8>
 8006f92:	e679      	b.n	8006c88 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f94:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_DMA_IRQHandler+0x570>)
 8006f96:	4e26      	ldr	r6, [pc, #152]	; (8007030 <HAL_DMA_IRQHandler+0x574>)
 8006f98:	4d26      	ldr	r5, [pc, #152]	; (8007034 <HAL_DMA_IRQHandler+0x578>)
 8006f9a:	42b3      	cmp	r3, r6
 8006f9c:	bf18      	it	ne
 8006f9e:	4293      	cmpne	r3, r2
 8006fa0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2201      	moveq	r2, #1
 8006fa8:	2200      	movne	r2, #0
 8006faa:	42ab      	cmp	r3, r5
 8006fac:	bf08      	it	eq
 8006fae:	f042 0201 	orreq.w	r2, r2, #1
 8006fb2:	3528      	adds	r5, #40	; 0x28
 8006fb4:	42b3      	cmp	r3, r6
 8006fb6:	bf08      	it	eq
 8006fb8:	f042 0201 	orreq.w	r2, r2, #1
 8006fbc:	3628      	adds	r6, #40	; 0x28
 8006fbe:	42ab      	cmp	r3, r5
 8006fc0:	bf08      	it	eq
 8006fc2:	f042 0201 	orreq.w	r2, r2, #1
 8006fc6:	3528      	adds	r5, #40	; 0x28
 8006fc8:	42b3      	cmp	r3, r6
 8006fca:	bf08      	it	eq
 8006fcc:	f042 0201 	orreq.w	r2, r2, #1
 8006fd0:	42ab      	cmp	r3, r5
 8006fd2:	bf08      	it	eq
 8006fd4:	f042 0201 	orreq.w	r2, r2, #1
 8006fd8:	b912      	cbnz	r2, 8006fe0 <HAL_DMA_IRQHandler+0x524>
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_DMA_IRQHandler+0x57c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d116      	bne.n	800700e <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fe0:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8006fe4:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fe6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fe8:	f005 051f 	and.w	r5, r5, #31
 8006fec:	40ae      	lsls	r6, r5
 8006fee:	420e      	tst	r6, r1
 8006ff0:	d073      	beq.n	80070da <HAL_DMA_IRQHandler+0x61e>
 8006ff2:	0757      	lsls	r7, r2, #29
 8006ff4:	d571      	bpl.n	80070da <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff6:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ff8:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffa:	f140 809f 	bpl.w	800713c <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ffe:	03d1      	lsls	r1, r2, #15
 8007000:	f100 80a2 	bmi.w	8007148 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007004:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f af4a 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
}
 800700e:	b002      	add	sp, #8
 8007010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007014:	40020010 	.word	0x40020010
 8007018:	40020028 	.word	0x40020028
 800701c:	40020040 	.word	0x40020040
 8007020:	400204b8 	.word	0x400204b8
 8007024:	1b4e81b5 	.word	0x1b4e81b5
 8007028:	40020058 	.word	0x40020058
 800702c:	58025408 	.word	0x58025408
 8007030:	5802541c 	.word	0x5802541c
 8007034:	58025430 	.word	0x58025430
 8007038:	58025494 	.word	0x58025494
 800703c:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	031b      	lsls	r3, r3, #12
 8007044:	f57f ae78 	bpl.w	8006d38 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007048:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f ae85 	bne.w	8006d5c <HAL_DMA_IRQHandler+0x2a0>
 8007052:	e687      	b.n	8006d64 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007054:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007058:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800705c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800705e:	6953      	ldr	r3, [r2, #20]
 8007060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007064:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007066:	b33d      	cbz	r5, 80070b8 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007068:	6813      	ldr	r3, [r2, #0]
 800706a:	f023 0308 	bic.w	r3, r3, #8
 800706e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007070:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8007072:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8007074:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007076:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800707a:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800707e:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8007080:	f88a 5035 	strb.w	r5, [sl, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8007084:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8007088:	2b00      	cmp	r3, #0
 800708a:	f47f af0a 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
 800708e:	e7be      	b.n	800700e <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007090:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007094:	f47f aed2 	bne.w	8006e3c <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007098:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800709a:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800709c:	f021 0110 	bic.w	r1, r1, #16
 80070a0:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 80070a2:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80070a6:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80070aa:	e6c7      	b.n	8006e3c <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 80070ac:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f47f aec6 	bne.w	8006e42 <HAL_DMA_IRQHandler+0x386>
 80070b6:	e6c6      	b.n	8006e46 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070b8:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1d3      	bne.n	8007068 <HAL_DMA_IRQHandler+0x5ac>
 80070c0:	e7d6      	b.n	8007070 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c2:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070c4:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c6:	fa02 fc0c 	lsl.w	ip, r2, ip
 80070ca:	ea17 0f0c 	tst.w	r7, ip
 80070ce:	f43f ae49 	beq.w	8006d64 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80070d8:	e620      	b.n	8006d1c <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80070da:	2602      	movs	r6, #2
 80070dc:	40ae      	lsls	r6, r5
 80070de:	420e      	tst	r6, r1
 80070e0:	d010      	beq.n	8007104 <HAL_DMA_IRQHandler+0x648>
 80070e2:	0797      	lsls	r7, r2, #30
 80070e4:	d50e      	bpl.n	8007104 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80070e6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070e8:	0414      	lsls	r4, r2, #16
 80070ea:	d533      	bpl.n	8007154 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070ec:	03d0      	lsls	r0, r2, #15
 80070ee:	d43d      	bmi.n	800716c <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 80070f0:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f47f aed4 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
 80070fa:	e788      	b.n	800700e <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80070fc:	6813      	ldr	r3, [r2, #0]
 80070fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007102:	e68b      	b.n	8006e1c <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007104:	2608      	movs	r6, #8
 8007106:	40ae      	lsls	r6, r5
 8007108:	420e      	tst	r6, r1
 800710a:	d080      	beq.n	800700e <HAL_DMA_IRQHandler+0x552>
 800710c:	0711      	lsls	r1, r2, #28
 800710e:	f57f af7e 	bpl.w	800700e <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007112:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007114:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8007116:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007118:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800711c:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007120:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8007122:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007126:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007128:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800712c:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007130:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f aeb4 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
 800713a:	e768      	b.n	800700e <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800713c:	0692      	lsls	r2, r2, #26
 800713e:	d403      	bmi.n	8007148 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	f022 0204 	bic.w	r2, r2, #4
 8007146:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007148:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	f47f aea8 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
 8007152:	e75c      	b.n	800700e <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007154:	f012 0220 	ands.w	r2, r2, #32
 8007158:	d108      	bne.n	800716c <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800715a:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800715c:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800715e:	f021 010a 	bic.w	r1, r1, #10
 8007162:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8007164:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007168:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800716c:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	f47f ae96 	bne.w	8006ea2 <HAL_DMA_IRQHandler+0x3e6>
 8007176:	e74a      	b.n	800700e <HAL_DMA_IRQHandler+0x552>

08007178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800717c:	680d      	ldr	r5, [r1, #0]
{
 800717e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007180:	2d00      	cmp	r5, #0
 8007182:	f000 80a3 	beq.w	80072cc <HAL_GPIO_Init+0x154>
  uint32_t position = 0x00U;
 8007186:	2300      	movs	r3, #0
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 8007188:	f8df b24c 	ldr.w	fp, [pc, #588]	; 80073d8 <HAL_GPIO_Init+0x260>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800718c:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800718e:	2201      	movs	r2, #1
 8007190:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007192:	ea12 0a05 	ands.w	sl, r2, r5
 8007196:	f000 8094 	beq.w	80072c2 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	684f      	ldr	r7, [r1, #4]
 800719e:	f007 0c03 	and.w	ip, r7, #3
 80071a2:	f10c 34ff 	add.w	r4, ip, #4294967295
 80071a6:	2c01      	cmp	r4, #1
 80071a8:	ea4f 0443 	mov.w	r4, r3, lsl #1
 80071ac:	f240 8091 	bls.w	80072d2 <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071b0:	f1bc 0f03 	cmp.w	ip, #3
 80071b4:	f040 80d0 	bne.w	8007358 <HAL_GPIO_Init+0x1e0>
 80071b8:	fa0c f404 	lsl.w	r4, ip, r4
 80071bc:	43e6      	mvns	r6, r4
      temp = GPIOx->MODER;
 80071be:	6802      	ldr	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071c0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071c4:	ea06 0602 	and.w	r6, r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071c8:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 80071cc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071ce:	d078      	beq.n	80072c2 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d0:	4a7b      	ldr	r2, [pc, #492]	; (80073c0 <HAL_GPIO_Init+0x248>)
 80071d2:	f023 0e03 	bic.w	lr, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071d6:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d8:	f8d2 60f4 	ldr.w	r6, [r2, #244]	; 0xf4
 80071dc:	4611      	mov	r1, r2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071de:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e2:	f046 0c02 	orr.w	ip, r6, #2
 80071e6:	4e77      	ldr	r6, [pc, #476]	; (80073c4 <HAL_GPIO_Init+0x24c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071e8:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ea:	f8c1 c0f4 	str.w	ip, [r1, #244]	; 0xf4
 80071ee:	4476      	add	r6, lr
 80071f0:	f8d1 c0f4 	ldr.w	ip, [r1, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071f4:	f5a1 4188 	sub.w	r1, r1, #17408	; 0x4400
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071f8:	4094      	lsls	r4, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071fa:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071fe:	4288      	cmp	r0, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007200:	f8cd c00c 	str.w	ip, [sp, #12]
 8007204:	f8dd c00c 	ldr.w	ip, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007208:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800720c:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007210:	d02e      	beq.n	8007270 <HAL_GPIO_Init+0xf8>
 8007212:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007216:	4288      	cmp	r0, r1
 8007218:	f000 80a8 	beq.w	800736c <HAL_GPIO_Init+0x1f4>
 800721c:	496a      	ldr	r1, [pc, #424]	; (80073c8 <HAL_GPIO_Init+0x250>)
 800721e:	4288      	cmp	r0, r1
 8007220:	f000 80aa 	beq.w	8007378 <HAL_GPIO_Init+0x200>
 8007224:	4969      	ldr	r1, [pc, #420]	; (80073cc <HAL_GPIO_Init+0x254>)
 8007226:	4288      	cmp	r0, r1
 8007228:	f000 809a 	beq.w	8007360 <HAL_GPIO_Init+0x1e8>
 800722c:	4968      	ldr	r1, [pc, #416]	; (80073d0 <HAL_GPIO_Init+0x258>)
 800722e:	4288      	cmp	r0, r1
 8007230:	f000 80ae 	beq.w	8007390 <HAL_GPIO_Init+0x218>
 8007234:	4967      	ldr	r1, [pc, #412]	; (80073d4 <HAL_GPIO_Init+0x25c>)
 8007236:	4288      	cmp	r0, r1
 8007238:	f000 80b0 	beq.w	800739c <HAL_GPIO_Init+0x224>
 800723c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80073dc <HAL_GPIO_Init+0x264>
 8007240:	4560      	cmp	r0, ip
 8007242:	f000 809f 	beq.w	8007384 <HAL_GPIO_Init+0x20c>
 8007246:	f8df c198 	ldr.w	ip, [pc, #408]	; 80073e0 <HAL_GPIO_Init+0x268>
 800724a:	4560      	cmp	r0, ip
 800724c:	f000 80ac 	beq.w	80073a8 <HAL_GPIO_Init+0x230>
 8007250:	f8df c190 	ldr.w	ip, [pc, #400]	; 80073e4 <HAL_GPIO_Init+0x26c>
 8007254:	4560      	cmp	r0, ip
 8007256:	f000 80ad 	beq.w	80073b4 <HAL_GPIO_Init+0x23c>
 800725a:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80073e8 <HAL_GPIO_Init+0x270>
 800725e:	4560      	cmp	r0, ip
 8007260:	bf0c      	ite	eq
 8007262:	f04f 0c09 	moveq.w	ip, #9
 8007266:	f04f 0c0a 	movne.w	ip, #10
 800726a:	fa0c f202 	lsl.w	r2, ip, r2
 800726e:	4314      	orrs	r4, r2
        temp = EXTI->RTSR1;
 8007270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007274:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8007276:	ea6f 060a 	mvn.w	r6, sl
        temp = EXTI->RTSR1;
 800727a:	6814      	ldr	r4, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800727c:	02fa      	lsls	r2, r7, #11
        EXTI->RTSR1 = temp;
 800727e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007282:	bf54      	ite	pl
 8007284:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007286:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800728a:	02b9      	lsls	r1, r7, #10
        EXTI->RTSR1 = temp;
 800728c:	6014      	str	r4, [r2, #0]
        temp = EXTI->FTSR1;
 800728e:	6854      	ldr	r4, [r2, #4]
        EXTI->FTSR1 = temp;
 8007290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007294:	bf54      	ite	pl
 8007296:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007298:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR1 = temp;
 800729c:	6054      	str	r4, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800729e:	03ba      	lsls	r2, r7, #14
        temp = EXTI_CurrentCPU->EMR1;
 80072a0:	f8db 4004 	ldr.w	r4, [fp, #4]
        temp &= ~(iocurrent);
 80072a4:	bf54      	ite	pl
 80072a6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80072a8:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072ac:	03f9      	lsls	r1, r7, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80072ae:	f8cb 4004 	str.w	r4, [fp, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80072b2:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 80072b6:	bf54      	ite	pl
 80072b8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80072ba:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80072be:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 80072c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072c4:	fa35 f203 	lsrs.w	r2, r5, r3
 80072c8:	f47f af61 	bne.w	800718e <HAL_GPIO_Init+0x16>
  }
}
 80072cc:	b005      	add	sp, #20
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072d2:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR;
 80072d4:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072d8:	68c9      	ldr	r1, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072da:	f3c7 1e00 	ubfx	lr, r7, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072de:	40a6      	lsls	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072e0:	fa01 f904 	lsl.w	r9, r1, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072e4:	fa0e fe03 	lsl.w	lr, lr, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072e8:	ea28 0806 	bic.w	r8, r8, r6
 80072ec:	43f6      	mvns	r6, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072ee:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 80072f2:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80072f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072fa:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072fe:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->OTYPER = temp;
 8007302:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8007304:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007306:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800730a:	ea02 0e06 	and.w	lr, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800730e:	9a01      	ldr	r2, [sp, #4]
 8007310:	6892      	ldr	r2, [r2, #8]
 8007312:	fa02 f204 	lsl.w	r2, r2, r4
 8007316:	ea42 020e 	orr.w	r2, r2, lr
      GPIOx->PUPDR = temp;
 800731a:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800731c:	d002      	beq.n	8007324 <HAL_GPIO_Init+0x1ac>
 800731e:	fa0c f404 	lsl.w	r4, ip, r4
 8007322:	e74c      	b.n	80071be <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8007324:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007326:	f003 0e07 	and.w	lr, r3, #7
 800732a:	f04f 080f 	mov.w	r8, #15
 800732e:	fa0c f404 	lsl.w	r4, ip, r4
 8007332:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007336:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800733a:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800733c:	fa08 f80e 	lsl.w	r8, r8, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007340:	6912      	ldr	r2, [r2, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007342:	f8dc 9020 	ldr.w	r9, [ip, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007346:	fa02 f20e 	lsl.w	r2, r2, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800734a:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800734e:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->AFR[position >> 3U] = temp;
 8007352:	f8cc 2020 	str.w	r2, [ip, #32]
 8007356:	e732      	b.n	80071be <HAL_GPIO_Init+0x46>
 8007358:	2603      	movs	r6, #3
 800735a:	40a6      	lsls	r6, r4
 800735c:	43f6      	mvns	r6, r6
 800735e:	e7d1      	b.n	8007304 <HAL_GPIO_Init+0x18c>
 8007360:	f04f 0c03 	mov.w	ip, #3
 8007364:	fa0c f202 	lsl.w	r2, ip, r2
 8007368:	4314      	orrs	r4, r2
 800736a:	e781      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 800736c:	f04f 0c01 	mov.w	ip, #1
 8007370:	fa0c f202 	lsl.w	r2, ip, r2
 8007374:	4314      	orrs	r4, r2
 8007376:	e77b      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 8007378:	f04f 0c02 	mov.w	ip, #2
 800737c:	fa0c f202 	lsl.w	r2, ip, r2
 8007380:	4314      	orrs	r4, r2
 8007382:	e775      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 8007384:	f04f 0c06 	mov.w	ip, #6
 8007388:	fa0c f202 	lsl.w	r2, ip, r2
 800738c:	4314      	orrs	r4, r2
 800738e:	e76f      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 8007390:	f04f 0c04 	mov.w	ip, #4
 8007394:	fa0c f202 	lsl.w	r2, ip, r2
 8007398:	4314      	orrs	r4, r2
 800739a:	e769      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 800739c:	f04f 0c05 	mov.w	ip, #5
 80073a0:	fa0c f202 	lsl.w	r2, ip, r2
 80073a4:	4314      	orrs	r4, r2
 80073a6:	e763      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 80073a8:	f04f 0c07 	mov.w	ip, #7
 80073ac:	fa0c f202 	lsl.w	r2, ip, r2
 80073b0:	4314      	orrs	r4, r2
 80073b2:	e75d      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 80073b4:	f04f 0c08 	mov.w	ip, #8
 80073b8:	fa0c f202 	lsl.w	r2, ip, r2
 80073bc:	4314      	orrs	r4, r2
 80073be:	e757      	b.n	8007270 <HAL_GPIO_Init+0xf8>
 80073c0:	58024400 	.word	0x58024400
 80073c4:	58000400 	.word	0x58000400
 80073c8:	58020800 	.word	0x58020800
 80073cc:	58020c00 	.word	0x58020c00
 80073d0:	58021000 	.word	0x58021000
 80073d4:	58021400 	.word	0x58021400
 80073d8:	58000080 	.word	0x58000080
 80073dc:	58021800 	.word	0x58021800
 80073e0:	58021c00 	.word	0x58021c00
 80073e4:	58022000 	.word	0x58022000
 80073e8:	58022400 	.word	0x58022400

080073ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073ec:	b902      	cbnz	r2, 80073f0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073ee:	0409      	lsls	r1, r1, #16
 80073f0:	6181      	str	r1, [r0, #24]
  }
}
 80073f2:	4770      	bx	lr

080073f4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80073f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80073fc:	4201      	tst	r1, r0
 80073fe:	d100      	bne.n	8007402 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8007400:	4770      	bx	lr
{
 8007402:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007404:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007408:	f7f9 fe5e 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800740c:	bd08      	pop	{r3, pc}
 800740e:	bf00      	nop

08007410 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007410:	2800      	cmp	r0, #0
 8007412:	d061      	beq.n	80074d8 <HAL_LPTIM_Init+0xc8>
{
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007416:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800741a:	4604      	mov	r4, r0
 800741c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007420:	2b00      	cmp	r3, #0
 8007422:	d054      	beq.n	80074ce <HAL_LPTIM_Init+0xbe>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007424:	2302      	movs	r3, #2
 8007426:	6aa5      	ldr	r5, [r4, #40]	; 0x28

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007428:	e9d4 1700 	ldrd	r1, r7, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800742c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007430:	2f01      	cmp	r7, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8007432:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007434:	d03f      	beq.n	80074b6 <HAL_LPTIM_Init+0xa6>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007436:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800743a:	d03c      	beq.n	80074b6 <HAL_LPTIM_Init+0xa6>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800743c:	6962      	ldr	r2, [r4, #20]
 800743e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007442:	429a      	cmp	r2, r3
 8007444:	d003      	beq.n	800744e <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007446:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800744a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800744e:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8007450:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007452:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007454:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80074f8 <HAL_LPTIM_Init+0xe8>
              hlptim->Init.Clock.Prescaler |
 8007458:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800745a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800745c:	ea0c 0c00 	and.w	ip, ip, r0
              hlptim->Init.OutputPolarity  |
 8007460:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 8007462:	432b      	orrs	r3, r5
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007464:	ea43 030c 	orr.w	r3, r3, ip
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007468:	b1ef      	cbz	r7, 80074a6 <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800746a:	2f01      	cmp	r7, #1
 800746c:	d11f      	bne.n	80074ae <HAL_LPTIM_Init+0x9e>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800746e:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8007472:	4328      	orrs	r0, r5
 8007474:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007476:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800747a:	4282      	cmp	r2, r0
 800747c:	d004      	beq.n	8007488 <HAL_LPTIM_Init+0x78>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 800747e:	e9d4 5006 	ldrd	r5, r0, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007482:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 8007484:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007486:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007488:	4a18      	ldr	r2, [pc, #96]	; (80074ec <HAL_LPTIM_Init+0xdc>)
  hlptim->Instance->CFGR = tmpcfgr;
 800748a:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800748c:	4291      	cmp	r1, r2
 800748e:	d015      	beq.n	80074bc <HAL_LPTIM_Init+0xac>
 8007490:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <HAL_LPTIM_Init+0xe0>)
 8007492:	4299      	cmp	r1, r3
 8007494:	d012      	beq.n	80074bc <HAL_LPTIM_Init+0xac>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007496:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <HAL_LPTIM_Init+0xe4>)
 8007498:	4299      	cmp	r1, r3
 800749a:	d01f      	beq.n	80074dc <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800749c:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800749e:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80074a0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80074a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80074a6:	69e0      	ldr	r0, [r4, #28]
 80074a8:	6926      	ldr	r6, [r4, #16]
 80074aa:	4330      	orrs	r0, r6
 80074ac:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80074ae:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 80074b2:	d1e0      	bne.n	8007476 <HAL_LPTIM_Init+0x66>
 80074b4:	e7db      	b.n	800746e <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80074b6:	f020 001e 	bic.w	r0, r0, #30
 80074ba:	e7bf      	b.n	800743c <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80074bc:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80074c0:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80074c2:	4313      	orrs	r3, r2
 80074c4:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80074ce:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80074d2:	f7fc fcab 	bl	8003e2c <HAL_LPTIM_MspInit>
 80074d6:	e7a5      	b.n	8007424 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80074d8:	2001      	movs	r0, #1
}
 80074da:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80074dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80074de:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80074e0:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80074e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40002400 	.word	0x40002400
 80074f0:	58002400 	.word	0x58002400
 80074f4:	58002800 	.word	0x58002800
 80074f8:	ff19f1fe 	.word	0xff19f1fe

080074fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fe:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007500:	2800      	cmp	r0, #0
 8007502:	f000 8088 	beq.w	8007616 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007506:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800750a:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800750c:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800750e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007512:	2b00      	cmp	r3, #0
 8007514:	d079      	beq.n	800760a <HAL_PCD_Init+0x10e>
 8007516:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007518:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800751a:	462e      	mov	r6, r5
 800751c:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800751e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007524:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007526:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800752a:	bf08      	it	eq
 800752c:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800752e:	f004 f9bb 	bl	800b8a8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007532:	f856 eb10 	ldr.w	lr, [r6], #16
 8007536:	46b4      	mov	ip, r6
 8007538:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800753c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007544:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8007548:	e884 0003 	stmia.w	r4, {r0, r1}
 800754c:	4670      	mov	r0, lr
 800754e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007552:	f004 f89b 	bl	800b68c <USB_CoreInit>
 8007556:	4604      	mov	r4, r0
 8007558:	b130      	cbz	r0, 8007568 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800755a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800755c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800755e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007560:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8007564:	b00b      	add	sp, #44	; 0x2c
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007568:	4601      	mov	r1, r0
 800756a:	6828      	ldr	r0, [r5, #0]
 800756c:	f004 f9a4 	bl	800b8b8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007570:	6868      	ldr	r0, [r5, #4]
 8007572:	b358      	cbz	r0, 80075cc <HAL_PCD_Init+0xd0>
 8007574:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007576:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800757a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800757c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007580:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8007584:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800758c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007590:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8007594:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007598:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800759a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800759e:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075a0:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075a4:	d3ea      	bcc.n	800757c <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80075a6:	2200      	movs	r2, #0
 80075a8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ac:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80075ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80075b2:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075b6:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80075b8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075bc:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075be:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075c6:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ca:	d3ed      	bcc.n	80075a8 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075cc:	466c      	mov	r4, sp
 80075ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80075d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80075d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80075da:	e884 0003 	stmia.w	r4, {r0, r1}
 80075de:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80075e2:	6828      	ldr	r0, [r5, #0]
 80075e4:	f004 f99e 	bl	800b924 <USB_DevInit>
 80075e8:	4604      	mov	r4, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1b5      	bne.n	800755a <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80075ee:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80075f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80075f2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80075f6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80075f8:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80075fc:	d00f      	beq.n	800761e <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 80075fe:	6828      	ldr	r0, [r5, #0]
 8007600:	f004 fdea 	bl	800c1d8 <USB_DevDisconnect>
}
 8007604:	4620      	mov	r0, r4
 8007606:	b00b      	add	sp, #44	; 0x2c
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800760a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800760e:	f005 fe43 	bl	800d298 <HAL_PCD_MspInit>
 8007612:	6828      	ldr	r0, [r5, #0]
 8007614:	e780      	b.n	8007518 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8007616:	2401      	movs	r4, #1
}
 8007618:	4620      	mov	r0, r4
 800761a:	b00b      	add	sp, #44	; 0x2c
 800761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fcd4 	bl	8007fcc <HAL_PCDEx_ActivateLPM>
 8007624:	e7eb      	b.n	80075fe <HAL_PCD_Init+0x102>
 8007626:	bf00      	nop

08007628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007628:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800762a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800762e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007630:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007632:	2b01      	cmp	r3, #1
 8007634:	d016      	beq.n	8007664 <HAL_PCD_Start+0x3c>
 8007636:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800763a:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 800763c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007640:	d008      	beq.n	8007654 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8007642:	f004 f929 	bl	800b898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	f004 fdb6 	bl	800c1b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800764c:	2000      	movs	r0, #0
 800764e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8007652:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007654:	69a3      	ldr	r3, [r4, #24]
 8007656:	4293      	cmp	r3, r2
 8007658:	d0f3      	beq.n	8007642 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800765a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800765c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007660:	6383      	str	r3, [r0, #56]	; 0x38
 8007662:	e7ee      	b.n	8007642 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8007664:	2002      	movs	r0, #2
}
 8007666:	bd10      	pop	{r4, pc}

08007668 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800766c:	6806      	ldr	r6, [r0, #0]
{
 800766e:	b087      	sub	sp, #28
 8007670:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007672:	4630      	mov	r0, r6
 8007674:	f004 fdf0 	bl	800c258 <USB_GetMode>
 8007678:	b110      	cbz	r0, 8007680 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800767a:	b007      	add	sp, #28
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007680:	4683      	mov	fp, r0
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	f004 fdb8 	bl	800c1f8 <USB_ReadInterrupts>
 8007688:	2800      	cmp	r0, #0
 800768a:	d0f6      	beq.n	800767a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	f004 fdb3 	bl	800c1f8 <USB_ReadInterrupts>
 8007692:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007696:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007698:	d003      	beq.n	80076a2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800769a:	6943      	ldr	r3, [r0, #20]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80076a2:	f004 fda9 	bl	800c1f8 <USB_ReadInterrupts>
 80076a6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076aa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80076ac:	d012      	beq.n	80076d4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076ae:	6983      	ldr	r3, [r0, #24]
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80076b6:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80076b8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80076bc:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	f000 8271 	beq.w	8007ba8 <HAL_PCD_IRQHandler+0x540>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80076c6:	2b06      	cmp	r3, #6
 80076c8:	f000 81c2 	beq.w	8007a50 <HAL_PCD_IRQHandler+0x3e8>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076cc:	6983      	ldr	r3, [r0, #24]
 80076ce:	f043 0310 	orr.w	r3, r3, #16
 80076d2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80076d4:	f004 fd90 	bl	800c1f8 <USB_ReadInterrupts>
 80076d8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076dc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80076de:	f040 80dc 	bne.w	800789a <HAL_PCD_IRQHandler+0x232>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076e2:	f004 fd89 	bl	800c1f8 <USB_ReadInterrupts>
 80076e6:	0342      	lsls	r2, r0, #13
 80076e8:	d478      	bmi.n	80077dc <HAL_PCD_IRQHandler+0x174>
 80076ea:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076ee:	4640      	mov	r0, r8
 80076f0:	f004 fd82 	bl	800c1f8 <USB_ReadInterrupts>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	db5d      	blt.n	80077b4 <HAL_PCD_IRQHandler+0x14c>
 80076f8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076fa:	f004 fd7d 	bl	800c1f8 <USB_ReadInterrupts>
 80076fe:	0500      	lsls	r0, r0, #20
 8007700:	d44d      	bmi.n	800779e <HAL_PCD_IRQHandler+0x136>
 8007702:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007704:	f004 fd78 	bl	800c1f8 <USB_ReadInterrupts>
 8007708:	0102      	lsls	r2, r0, #4
 800770a:	d514      	bpl.n	8007736 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	6953      	ldr	r3, [r2, #20]
 8007710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007714:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8007716:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 8182 	bne.w	8007a24 <HAL_PCD_IRQHandler+0x3bc>
        hpcd->LPM_State = LPM_L1;
 8007720:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007722:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8007724:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007728:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800772a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800772e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007732:	f000 fc61 	bl	8007ff8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007736:	6820      	ldr	r0, [r4, #0]
 8007738:	f004 fd5e 	bl	800c1f8 <USB_ReadInterrupts>
 800773c:	04c3      	lsls	r3, r0, #19
 800773e:	f100 8126 	bmi.w	800798e <HAL_PCD_IRQHandler+0x326>
 8007742:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007744:	f004 fd58 	bl	800c1f8 <USB_ReadInterrupts>
 8007748:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800774c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800774e:	f040 8107 	bne.w	8007960 <HAL_PCD_IRQHandler+0x2f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007752:	f004 fd51 	bl	800c1f8 <USB_ReadInterrupts>
 8007756:	0707      	lsls	r7, r0, #28
 8007758:	f100 80f9 	bmi.w	800794e <HAL_PCD_IRQHandler+0x2e6>
 800775c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800775e:	f004 fd4b 	bl	800c1f8 <USB_ReadInterrupts>
 8007762:	02c6      	lsls	r6, r0, #11
 8007764:	f100 80e9 	bmi.w	800793a <HAL_PCD_IRQHandler+0x2d2>
 8007768:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800776a:	f004 fd45 	bl	800c1f8 <USB_ReadInterrupts>
 800776e:	0285      	lsls	r5, r0, #10
 8007770:	f100 80d9 	bmi.w	8007926 <HAL_PCD_IRQHandler+0x2be>
 8007774:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007776:	f004 fd3f 	bl	800c1f8 <USB_ReadInterrupts>
 800777a:	0040      	lsls	r0, r0, #1
 800777c:	f100 80ca 	bmi.w	8007914 <HAL_PCD_IRQHandler+0x2ac>
 8007780:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007782:	f004 fd39 	bl	800c1f8 <USB_ReadInterrupts>
 8007786:	0741      	lsls	r1, r0, #29
 8007788:	f57f af77 	bpl.w	800767a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007790:	076a      	lsls	r2, r5, #29
 8007792:	f100 822a 	bmi.w	8007bea <HAL_PCD_IRQHandler+0x582>
      hpcd->Instance->GOTGINT |= temp;
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	432a      	orrs	r2, r5
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	e76d      	b.n	800767a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800779e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80077a2:	07d9      	lsls	r1, r3, #31
 80077a4:	f100 821d 	bmi.w	8007be2 <HAL_PCD_IRQHandler+0x57a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	6943      	ldr	r3, [r0, #20]
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	6143      	str	r3, [r0, #20]
 80077b2:	e7a7      	b.n	8007704 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077b4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80077c0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f000 813c 	beq.w	8007a42 <HAL_PCD_IRQHandler+0x3da>
        HAL_PCD_ResumeCallback(hpcd);
 80077ca:	4620      	mov	r0, r4
 80077cc:	f005 fe10 	bl	800d3f0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80077d0:	6820      	ldr	r0, [r4, #0]
 80077d2:	6943      	ldr	r3, [r0, #20]
 80077d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d8:	6143      	str	r3, [r0, #20]
 80077da:	e78e      	b.n	80076fa <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	f004 fd17 	bl	800c210 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80077e2:	f8d4 8000 	ldr.w	r8, [r4]
 80077e6:	4681      	mov	r9, r0
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d080      	beq.n	80076ee <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 80077ec:	f04f 0a00 	mov.w	sl, #0
 80077f0:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80077f4:	4625      	mov	r5, r4
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077f6:	f8cd b010 	str.w	fp, [sp, #16]
 80077fa:	4657      	mov	r7, sl
 80077fc:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8007800:	e007      	b.n	8007812 <HAL_PCD_IRQHandler+0x1aa>
      while (ep_intr != 0U)
 8007802:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8007806:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 800780a:	f105 051c 	add.w	r5, r5, #28
 800780e:	f000 8134 	beq.w	8007a7a <HAL_PCD_IRQHandler+0x412>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007812:	f019 0f01 	tst.w	r9, #1
 8007816:	d0f4      	beq.n	8007802 <HAL_PCD_IRQHandler+0x19a>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007818:	fa5f fa87 	uxtb.w	sl, r7
 800781c:	4640      	mov	r0, r8
 800781e:	4651      	mov	r1, sl
 8007820:	f004 fd08 	bl	800c234 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007824:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007826:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007828:	d519      	bpl.n	800785e <HAL_PCD_IRQHandler+0x1f6>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800782a:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800782e:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007830:	f007 010f 	and.w	r1, r7, #15
 8007834:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007836:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800783a:	fa0c f101 	lsl.w	r1, ip, r1
 800783e:	eb02 1247 	add.w	r2, r2, r7, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007842:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800784a:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800784e:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 8007852:	f000 81cf 	beq.w	8007bf4 <HAL_PCD_IRQHandler+0x58c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007856:	4651      	mov	r1, sl
 8007858:	4620      	mov	r0, r4
 800785a:	f005 fd8d 	bl	800d378 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800785e:	0730      	lsls	r0, r6, #28
 8007860:	d504      	bpl.n	800786c <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007862:	9b02      	ldr	r3, [sp, #8]
 8007864:	2208      	movs	r2, #8
 8007866:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 800786a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800786c:	06f1      	lsls	r1, r6, #27
 800786e:	d504      	bpl.n	800787a <HAL_PCD_IRQHandler+0x212>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	2210      	movs	r2, #16
 8007874:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8007878:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800787a:	0672      	lsls	r2, r6, #25
 800787c:	d504      	bpl.n	8007888 <HAL_PCD_IRQHandler+0x220>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800787e:	9b02      	ldr	r3, [sp, #8]
 8007880:	2240      	movs	r2, #64	; 0x40
 8007882:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8007886:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007888:	07b3      	lsls	r3, r6, #30
 800788a:	f100 8183 	bmi.w	8007b94 <HAL_PCD_IRQHandler+0x52c>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800788e:	0636      	lsls	r6, r6, #24
 8007890:	f100 8133 	bmi.w	8007afa <HAL_PCD_IRQHandler+0x492>
 8007894:	f8d4 8000 	ldr.w	r8, [r4]
 8007898:	e7b3      	b.n	8007802 <HAL_PCD_IRQHandler+0x19a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800789a:	f004 fcb1 	bl	800c200 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800789e:	4605      	mov	r5, r0
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	f43f af1d 	beq.w	80076e2 <HAL_PCD_IRQHandler+0x7a>
 80078a8:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 80078ac:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 80078b0:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078b2:	9602      	str	r6, [sp, #8]
 80078b4:	469a      	mov	sl, r3
 80078b6:	e006      	b.n	80078c6 <HAL_PCD_IRQHandler+0x25e>
      while (ep_intr != 0U)
 80078b8:	086d      	lsrs	r5, r5, #1
        epnum++;
 80078ba:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 80078be:	f109 091c 	add.w	r9, r9, #28
 80078c2:	f000 80d8 	beq.w	8007a76 <HAL_PCD_IRQHandler+0x40e>
        if ((ep_intr & 0x1U) != 0U)
 80078c6:	07ee      	lsls	r6, r5, #31
 80078c8:	d5f6      	bpl.n	80078b8 <HAL_PCD_IRQHandler+0x250>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078ca:	b2fe      	uxtb	r6, r7
 80078cc:	4631      	mov	r1, r6
 80078ce:	f004 fca7 	bl	800c220 <USB_ReadDevOutEPInterrupt>
 80078d2:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078d4:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80078d6:	f018 0f01 	tst.w	r8, #1
 80078da:	f040 80ed 	bne.w	8007ab8 <HAL_PCD_IRQHandler+0x450>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80078de:	f018 0f08 	tst.w	r8, #8
 80078e2:	f040 80cd 	bne.w	8007a80 <HAL_PCD_IRQHandler+0x418>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80078e6:	f018 0f10 	tst.w	r8, #16
 80078ea:	d003      	beq.n	80078f4 <HAL_PCD_IRQHandler+0x28c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80078ec:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 80078f0:	2210      	movs	r2, #16
 80078f2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078f4:	f018 0f20 	tst.w	r8, #32
 80078f8:	d003      	beq.n	8007902 <HAL_PCD_IRQHandler+0x29a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078fa:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 80078fe:	2220      	movs	r2, #32
 8007900:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007902:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8007906:	d0d7      	beq.n	80078b8 <HAL_PCD_IRQHandler+0x250>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007908:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800790c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007910:	609a      	str	r2, [r3, #8]
 8007912:	e7d1      	b.n	80078b8 <HAL_PCD_IRQHandler+0x250>
      HAL_PCD_ConnectCallback(hpcd);
 8007914:	4620      	mov	r0, r4
 8007916:	f005 fd77 	bl	800d408 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	6943      	ldr	r3, [r0, #20]
 800791e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007922:	6143      	str	r3, [r0, #20]
 8007924:	e72d      	b.n	8007782 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007926:	4620      	mov	r0, r4
 8007928:	2100      	movs	r1, #0
 800792a:	f005 fd65 	bl	800d3f8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	6943      	ldr	r3, [r0, #20]
 8007932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007936:	6143      	str	r3, [r0, #20]
 8007938:	e71d      	b.n	8007776 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800793a:	4620      	mov	r0, r4
 800793c:	2100      	movs	r1, #0
 800793e:	f005 fd5f 	bl	800d400 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007942:	6820      	ldr	r0, [r4, #0]
 8007944:	6943      	ldr	r3, [r0, #20]
 8007946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794a:	6143      	str	r3, [r0, #20]
 800794c:	e70d      	b.n	800776a <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 800794e:	4620      	mov	r0, r4
 8007950:	f005 fd1c 	bl	800d38c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	6943      	ldr	r3, [r0, #20]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	6143      	str	r3, [r0, #20]
 800795e:	e6fe      	b.n	800775e <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007960:	f004 fc7e 	bl	800c260 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	f004 f909 	bl	800bb7c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800796a:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800796c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800796e:	f001 f903 	bl	8008b78 <HAL_RCC_GetHCLKFreq>
 8007972:	7b22      	ldrb	r2, [r4, #12]
 8007974:	4601      	mov	r1, r0
 8007976:	4628      	mov	r0, r5
 8007978:	f003 ff12 	bl	800b7a0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800797c:	4620      	mov	r0, r4
 800797e:	f005 fd09 	bl	800d394 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007982:	6820      	ldr	r0, [r4, #0]
 8007984:	6943      	ldr	r3, [r0, #20]
 8007986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800798a:	6143      	str	r3, [r0, #20]
 800798c:	e6e1      	b.n	8007752 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800798e:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007992:	2110      	movs	r1, #16
 8007994:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007996:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800799a:	f023 0301 	bic.w	r3, r3, #1
 800799e:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079a0:	f004 f8c4 	bl	800bb2c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079a4:	6867      	ldr	r7, [r4, #4]
 80079a6:	b1e7      	cbz	r7, 80079e2 <HAL_PCD_IRQHandler+0x37a>
 80079a8:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079ac:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80079b0:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079b2:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079ba:	45bb      	cmp	fp, r7
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80079c0:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80079c4:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079c8:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80079cc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80079d0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80079d4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80079d8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80079dc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079e0:	d1e6      	bne.n	80079b0 <HAL_PCD_IRQHandler+0x348>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80079e2:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80079e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80079e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80079ea:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80079ec:	b9f2      	cbnz	r2, 8007a2c <HAL_PCD_IRQHandler+0x3c4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079ee:	696a      	ldr	r2, [r5, #20]
 80079f0:	f242 032b 	movw	r3, #8235	; 0x202b
 80079f4:	4313      	orrs	r3, r2
 80079f6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079f8:	692b      	ldr	r3, [r5, #16]
 80079fa:	f043 030b 	orr.w	r3, r3, #11
 80079fe:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a00:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a04:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a08:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a0e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a10:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a14:	f004 fc3a 	bl	800c28c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	6943      	ldr	r3, [r0, #20]
 8007a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a20:	6143      	str	r3, [r0, #20]
 8007a22:	e68f      	b.n	8007744 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8007a24:	4620      	mov	r0, r4
 8007a26:	f005 fccb 	bl	800d3c0 <HAL_PCD_SuspendCallback>
 8007a2a:	e684      	b.n	8007736 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a2c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8007a30:	f043 030b 	orr.w	r3, r3, #11
 8007a34:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a38:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007a3a:	f043 030b 	orr.w	r3, r3, #11
 8007a3e:	646b      	str	r3, [r5, #68]	; 0x44
 8007a40:	e7de      	b.n	8007a00 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L0;
 8007a42:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a44:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8007a46:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a4a:	f000 fad5 	bl	8007ff8 <HAL_PCDEx_LPM_Callback>
 8007a4e:	e6bf      	b.n	80077d0 <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a50:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a54:	2208      	movs	r2, #8
 8007a56:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f004 fb16 	bl	800c08c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a60:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8007a64:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8007a6e:	440b      	add	r3, r1
 8007a70:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8007a74:	e62a      	b.n	80076cc <HAL_PCD_IRQHandler+0x64>
 8007a76:	9e02      	ldr	r6, [sp, #8]
 8007a78:	e633      	b.n	80076e2 <HAL_PCD_IRQHandler+0x7a>
 8007a7a:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 8007a7e:	e636      	b.n	80076ee <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a80:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 8007a84:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a86:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a8a:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a92:	488b      	ldr	r0, [pc, #556]	; (8007cc0 <HAL_PCD_IRQHandler+0x658>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a94:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a96:	4282      	cmp	r2, r0
 8007a98:	f240 80bd 	bls.w	8007c16 <HAL_PCD_IRQHandler+0x5ae>
 8007a9c:	0409      	lsls	r1, r1, #16
 8007a9e:	d502      	bpl.n	8007aa6 <HAL_PCD_IRQHandler+0x43e>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007aa4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f005 fc56 	bl	800d358 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007aac:	6921      	ldr	r1, [r4, #16]
 8007aae:	2901      	cmp	r1, #1
 8007ab0:	f000 80d5 	beq.w	8007c5e <HAL_PCD_IRQHandler+0x5f6>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	e716      	b.n	80078e6 <HAL_PCD_IRQHandler+0x27e>
  if (hpcd->Init.dma_enable == 1U)
 8007ab8:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007abc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ac6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8007aca:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ace:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ad0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ad2:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8007ad6:	f000 80a3 	beq.w	8007c20 <HAL_PCD_IRQHandler+0x5b8>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ada:	497a      	ldr	r1, [pc, #488]	; (8007cc4 <HAL_PCD_IRQHandler+0x65c>)
 8007adc:	428b      	cmp	r3, r1
 8007ade:	f000 80ae 	beq.w	8007c3e <HAL_PCD_IRQHandler+0x5d6>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ae2:	b927      	cbnz	r7, 8007aee <HAL_PCD_IRQHandler+0x486>
 8007ae4:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	f000 80e3 	beq.w	8007cb4 <HAL_PCD_IRQHandler+0x64c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aee:	4620      	mov	r0, r4
 8007af0:	4631      	mov	r1, r6
 8007af2:	f005 fc37 	bl	800d364 <HAL_PCD_DataOutStageCallback>
 8007af6:	6820      	ldr	r0, [r4, #0]
 8007af8:	e6f1      	b.n	80078de <HAL_PCD_IRQHandler+0x276>
  if (ep->xfer_count > ep->xfer_len)
 8007afa:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007afe:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8007b02:	428b      	cmp	r3, r1
 8007b04:	f63f ae7d 	bhi.w	8007802 <HAL_PCD_IRQHandler+0x19a>
  len = ep->xfer_len - ep->xfer_count;
 8007b08:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 8007b0a:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b0c:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 8007b14:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b16:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
  len32b = (len + 3U) / 4U;
 8007b1a:	bf28      	it	cs
 8007b1c:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b1e:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 8007b22:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b24:	b280      	uxth	r0, r0
 8007b26:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 8007b2a:	d21b      	bcs.n	8007b64 <HAL_PCD_IRQHandler+0x4fc>
 8007b2c:	e022      	b.n	8007b74 <HAL_PCD_IRQHandler+0x50c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b2e:	b1f9      	cbz	r1, 8007b70 <HAL_PCD_IRQHandler+0x508>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b30:	f894 c010 	ldrb.w	ip, [r4, #16]
 8007b34:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 8007b38:	f8cd c000 	str.w	ip, [sp]
 8007b3c:	429e      	cmp	r6, r3
 8007b3e:	bf28      	it	cs
 8007b40:	461e      	movcs	r6, r3
 8007b42:	b2b3      	uxth	r3, r6
 8007b44:	f004 fa8c 	bl	800c060 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b48:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 8007b4c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8007b4e:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 8007b50:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b52:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8007b54:	4431      	add	r1, r6
    ep->xfer_count += len;
 8007b56:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b58:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8007b5c:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8007b5e:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b60:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8007b62:	d305      	bcc.n	8007b70 <HAL_PCD_IRQHandler+0x508>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b64:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 8007b66:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b6e:	d3de      	bcc.n	8007b2e <HAL_PCD_IRQHandler+0x4c6>
 8007b70:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8007b74:	428b      	cmp	r3, r1
 8007b76:	f4ff ae44 	bcc.w	8007802 <HAL_PCD_IRQHandler+0x19a>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b7a:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b7c:	f007 010f 	and.w	r1, r7, #15
 8007b80:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b82:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b86:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b8a:	ea22 0201 	bic.w	r2, r2, r1
 8007b8e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8007b92:	e636      	b.n	8007802 <HAL_PCD_IRQHandler+0x19a>
            (void)USB_FlushTxFifo(USBx, epnum);
 8007b94:	4639      	mov	r1, r7
 8007b96:	9803      	ldr	r0, [sp, #12]
 8007b98:	f003 ffc8 	bl	800bb2c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8007ba4:	609a      	str	r2, [r3, #8]
 8007ba6:	e672      	b.n	800788e <HAL_PCD_IRQHandler+0x226>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ba8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007bac:	421d      	tst	r5, r3
 8007bae:	f43f ad8d 	beq.w	80076cc <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bb2:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8007bb6:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8007bba:	4630      	mov	r0, r6
 8007bbc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007bc0:	4615      	mov	r5, r2
 8007bc2:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8007bc6:	f004 fa61 	bl	800c08c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bca:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bd2:	442a      	add	r2, r5
 8007bd4:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bd6:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bd8:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bdc:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 8007be0:	e574      	b.n	80076cc <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8007be2:	4620      	mov	r0, r4
 8007be4:	f005 fbec 	bl	800d3c0 <HAL_PCD_SuspendCallback>
 8007be8:	e5de      	b.n	80077a8 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8007bea:	4620      	mov	r0, r4
 8007bec:	f005 fc10 	bl	800d410 <HAL_PCD_DisconnectCallback>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	e5d0      	b.n	8007796 <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007bf4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8007bf8:	4413      	add	r3, r2
 8007bfa:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	f47f ae2a 	bne.w	8007856 <HAL_PCD_IRQHandler+0x1ee>
 8007c02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f ae26 	bne.w	8007856 <HAL_PCD_IRQHandler+0x1ee>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c0a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	f004 fb3c 	bl	800c28c <USB_EP0_OutStart>
 8007c14:	e61f      	b.n	8007856 <HAL_PCD_IRQHandler+0x1ee>
  HAL_PCD_SetupStageCallback(hpcd);
 8007c16:	4620      	mov	r0, r4
 8007c18:	f005 fb9e 	bl	800d358 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	e662      	b.n	80078e6 <HAL_PCD_IRQHandler+0x27e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c20:	f01e 0f08 	tst.w	lr, #8
 8007c24:	d015      	beq.n	8007c52 <HAL_PCD_IRQHandler+0x5ea>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c26:	4926      	ldr	r1, [pc, #152]	; (8007cc0 <HAL_PCD_IRQHandler+0x658>)
 8007c28:	428b      	cmp	r3, r1
 8007c2a:	f67f ae58 	bls.w	80078de <HAL_PCD_IRQHandler+0x276>
 8007c2e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007c32:	f43f ae54 	beq.w	80078de <HAL_PCD_IRQHandler+0x276>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	6093      	str	r3, [r2, #8]
 8007c3c:	e64f      	b.n	80078de <HAL_PCD_IRQHandler+0x276>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c3e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007c42:	d1f8      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x5ce>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c44:	f01e 0f20 	tst.w	lr, #32
 8007c48:	f43f af51 	beq.w	8007aee <HAL_PCD_IRQHandler+0x486>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c4c:	2120      	movs	r1, #32
 8007c4e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c50:	e74d      	b.n	8007aee <HAL_PCD_IRQHandler+0x486>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c52:	f01e 0f20 	tst.w	lr, #32
 8007c56:	d008      	beq.n	8007c6a <HAL_PCD_IRQHandler+0x602>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c58:	2320      	movs	r3, #32
 8007c5a:	6093      	str	r3, [r2, #8]
 8007c5c:	e63f      	b.n	80078de <HAL_PCD_IRQHandler+0x276>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c5e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007c62:	6820      	ldr	r0, [r4, #0]
 8007c64:	f004 fb12 	bl	800c28c <USB_EP0_OutStart>
 8007c68:	e724      	b.n	8007ab4 <HAL_PCD_IRQHandler+0x44c>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c6a:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8007c6e:	f47f ae36 	bne.w	80078de <HAL_PCD_IRQHandler+0x276>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c72:	4913      	ldr	r1, [pc, #76]	; (8007cc0 <HAL_PCD_IRQHandler+0x658>)
 8007c74:	428b      	cmp	r3, r1
 8007c76:	d902      	bls.n	8007c7e <HAL_PCD_IRQHandler+0x616>
 8007c78:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007c7c:	d1db      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x5ce>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c7e:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8007c80:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c84:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c88:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c8c:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 8007c8e:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c90:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 8007c94:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c98:	2f00      	cmp	r7, #0
 8007c9a:	f47f af28 	bne.w	8007aee <HAL_PCD_IRQHandler+0x486>
 8007c9e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	f47f af23 	bne.w	8007aee <HAL_PCD_IRQHandler+0x486>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ca8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007cac:	2101      	movs	r1, #1
 8007cae:	f004 faed 	bl	800c28c <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007cb2:	e71c      	b.n	8007aee <HAL_PCD_IRQHandler+0x486>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007cb4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f004 fae7 	bl	800c28c <USB_EP0_OutStart>
 8007cbe:	e716      	b.n	8007aee <HAL_PCD_IRQHandler+0x486>
 8007cc0:	4f54300a 	.word	0x4f54300a
 8007cc4:	4f54310a 	.word	0x4f54310a

08007cc8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007cc8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007ccc:	2a01      	cmp	r2, #1
 8007cce:	d00d      	beq.n	8007cec <HAL_PCD_SetAddress+0x24>
 8007cd0:	2201      	movs	r2, #1
{
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8007cd6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cda:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007cdc:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ce0:	f004 fa58 	bl	800c194 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007cea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007cec:	2002      	movs	r0, #2
}
 8007cee:	4770      	bx	lr

08007cf0 <HAL_PCD_EP_Open>:
{
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007cf6:	0609      	lsls	r1, r1, #24
{
 8007cf8:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cfa:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8007cfe:	d422      	bmi.n	8007d46 <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 8007d00:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d04:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8007d08:	2700      	movs	r7, #0
 8007d0a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d0e:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8007d12:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8007d16:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d18:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8007d1a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007d1c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007d1e:	b100      	cbz	r0, 8007d22 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8007d20:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d101      	bne.n	8007d2a <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007d2a:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d015      	beq.n	8007d5e <HAL_PCD_EP_Open+0x6e>
 8007d32:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d34:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8007d36:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d3a:	f003 ff2b 	bl	800bb94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 8007d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8007d46:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007d4a:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d4c:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8007d50:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d54:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8007d58:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 8007d5c:	e7db      	b.n	8007d16 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8007d5e:	2002      	movs	r0, #2
}
 8007d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007d64:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d68:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d6c:	f04f 011c 	mov.w	r1, #28
{
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007d74:	d119      	bne.n	8007daa <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d76:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007d7a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007d7e:	2000      	movs	r0, #0
 8007d80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d84:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007d88:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d8c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007d8e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d018      	beq.n	8007dc8 <HAL_PCD_EP_Close+0x64>
 8007d96:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d98:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007d9a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d9e:	f003 ff41 	bl	800bc24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007da2:	2000      	movs	r0, #0
 8007da4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007da8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007daa:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007dae:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007db2:	2001      	movs	r0, #1
 8007db4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007db8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007dba:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007dbe:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007dc0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d1e6      	bne.n	8007d96 <HAL_PCD_EP_Close+0x32>
 8007dc8:	2002      	movs	r0, #2
}
 8007dca:	bd10      	pop	{r4, pc}

08007dcc <HAL_PCD_EP_Receive>:
{
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8007dd2:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dd4:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007dd6:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dda:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007dde:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007de2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8007de6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8007dea:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dee:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8007df2:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8007df6:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8007dfa:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dfc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007dfe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007e00:	bf08      	it	eq
 8007e02:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e06:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e08:	b91d      	cbnz	r5, 8007e12 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e0a:	f004 f881 	bl	800bf10 <USB_EP0StartXfer>
}
 8007e0e:	2000      	movs	r0, #0
 8007e10:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e12:	f003 ff69 	bl	800bce8 <USB_EPStartXfer>
}
 8007e16:	2000      	movs	r0, #0
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	bf00      	nop

08007e1c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e1c:	f001 010f 	and.w	r1, r1, #15
 8007e20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007e24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007e28:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <HAL_PCD_EP_Transmit>:
{
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8007e36:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8007e38:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e3a:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007e3c:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e40:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007e44:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e48:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8007e4a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8007e4c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007e52:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8007e54:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007e58:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e5a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007e5c:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8007e5e:	bf08      	it	eq
 8007e60:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e62:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e64:	b91d      	cbnz	r5, 8007e6e <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e66:	f004 f853 	bl	800bf10 <USB_EP0StartXfer>
}
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e6e:	f003 ff3b 	bl	800bce8 <USB_EPStartXfer>
}
 8007e72:	2000      	movs	r0, #0
 8007e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e76:	bf00      	nop

08007e78 <HAL_PCD_EP_SetStall>:
{
 8007e78:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e7a:	6843      	ldr	r3, [r0, #4]
 8007e7c:	f001 050f 	and.w	r5, r1, #15
 8007e80:	429d      	cmp	r5, r3
 8007e82:	d833      	bhi.n	8007eec <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8007e84:	060b      	lsls	r3, r1, #24
 8007e86:	4604      	mov	r4, r0
 8007e88:	d41c      	bmi.n	8007ec4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8007e8a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007e8e:	201c      	movs	r0, #28
    ep->is_in = 0U;
 8007e90:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007e92:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8007e96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8007e9a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007e9e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007ea2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ea4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007ea6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007ea8:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d01b      	beq.n	8007ee8 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007eb0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007eb2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007eb6:	f004 f90d 	bl	800c0d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007eba:	b1cd      	cbz	r5, 8007ef0 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec4:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8007ec6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007eca:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ecc:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007ed0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ed4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007eda:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007edc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007ede:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007ee0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d1e3      	bne.n	8007eb0 <HAL_PCD_EP_SetStall+0x38>
 8007ee8:	2002      	movs	r0, #2
}
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007eec:	2001      	movs	r0, #1
}
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ef0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007ef4:	7c21      	ldrb	r1, [r4, #16]
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	f004 f9c8 	bl	800c28c <USB_EP0_OutStart>
 8007efc:	e7de      	b.n	8007ebc <HAL_PCD_EP_SetStall+0x44>
 8007efe:	bf00      	nop

08007f00 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f00:	6842      	ldr	r2, [r0, #4]
{
 8007f02:	b538      	push	{r3, r4, r5, lr}
 8007f04:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d832      	bhi.n	8007f72 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8007f0c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007f10:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f12:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 8007f16:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007f1a:	d119      	bne.n	8007f50 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f1c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007f20:	2000      	movs	r0, #0
 8007f22:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007f26:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f28:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007f2c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f30:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007f32:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007f34:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d018      	beq.n	8007f6e <HAL_PCD_EP_ClrStall+0x6e>
 8007f3c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007f40:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f44:	f004 f8fa 	bl	800c13c <USB_EPClearStall>
  return HAL_OK;
 8007f48:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007f4a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f50:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007f54:	2001      	movs	r0, #1
 8007f56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007f5a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f5c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007f5e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f62:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007f64:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007f66:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d1e6      	bne.n	8007f3c <HAL_PCD_EP_ClrStall+0x3c>
 8007f6e:	2002      	movs	r0, #2
}
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f72:	2001      	movs	r0, #1
}
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
 8007f76:	bf00      	nop

08007f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f78:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f7a:	6805      	ldr	r5, [r0, #0]
 8007f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8007f7e:	b929      	cbnz	r1, 8007f8c <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007f84:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f86:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8007f88:	bc30      	pop	{r4, r5}
 8007f8a:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f8c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007f8e:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f90:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007f94:	d00b      	beq.n	8007fae <HAL_PCDEx_SetTxFiFo+0x36>
 8007f96:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f98:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8007f9c:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f9e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007fa2:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007fa4:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8007fa6:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007fa8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007fac:	d3f4      	bcc.n	8007f98 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007fae:	3440      	adds	r4, #64	; 0x40
 8007fb0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007fb4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007fb8:	6060      	str	r0, [r4, #4]
}
 8007fba:	2000      	movs	r0, #0
 8007fbc:	bc30      	pop	{r4, r5}
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007fc0:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8007fc2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop

08007fcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fcc:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fce:	4909      	ldr	r1, [pc, #36]	; (8007ff4 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8007fd0:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fd2:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 8007fd4:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 8007fd6:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 8007fd8:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 8007fdc:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fde:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 8007fe0:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fe4:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8007fe8:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007fec:	4319      	orrs	r1, r3
}
 8007fee:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007ff0:	6551      	str	r1, [r2, #84]	; 0x54
}
 8007ff2:	4770      	bx	lr
 8007ff4:	10000003 	.word	0x10000003

08007ff8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ffc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ffe:	4b11      	ldr	r3, [pc, #68]	; (8008044 <HAL_PWREx_ConfigSupply+0x48>)
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	0752      	lsls	r2, r2, #29
 8008004:	d406      	bmi.n	8008014 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800800c:	1a18      	subs	r0, r3, r0
 800800e:	bf18      	it	ne
 8008010:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008012:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008014:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008016:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008018:	f022 0207 	bic.w	r2, r2, #7
 800801c:	4310      	orrs	r0, r2
 800801e:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8008020:	f7fc fa00 	bl	8004424 <HAL_GetTick>
 8008024:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008026:	e005      	b.n	8008034 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008028:	f7fc f9fc 	bl	8004424 <HAL_GetTick>
 800802c:	1b00      	subs	r0, r0, r4
 800802e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008032:	d804      	bhi.n	800803e <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008034:	686b      	ldr	r3, [r5, #4]
 8008036:	049b      	lsls	r3, r3, #18
 8008038:	d5f6      	bpl.n	8008028 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 800803a:	2000      	movs	r0, #0
}
 800803c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800803e:	2001      	movs	r0, #1
}
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	bf00      	nop
 8008044:	58024800 	.word	0x58024800

08008048 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008048:	4a02      	ldr	r2, [pc, #8]	; (8008054 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800804a:	68d3      	ldr	r3, [r2, #12]
 800804c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008050:	60d3      	str	r3, [r2, #12]
}
 8008052:	4770      	bx	lr
 8008054:	58024800 	.word	0x58024800

08008058 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008058:	4b3b      	ldr	r3, [pc, #236]	; (8008148 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800805a:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800805c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800805e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008062:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008066:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800806a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 800806c:	d038      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800806e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008072:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008076:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800807a:	fb01 f105 	mul.w	r1, r1, r5
 800807e:	2a01      	cmp	r2, #1
 8008080:	ee07 1a90 	vmov	s15, r1
 8008084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8008088:	d002      	beq.n	8008090 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800808a:	2a02      	cmp	r2, #2
 800808c:	d04e      	beq.n	800812c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800808e:	b34a      	cbz	r2, 80080e4 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008090:	ee07 0a90 	vmov	s15, r0
 8008094:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800814c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8008098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80080a2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8008150 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80080a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080aa:	ee06 3a90 	vmov	s13, r3
 80080ae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80080b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80080b6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80080ba:	eee7 6a25 	vfma.f32	s13, s14, s11
 80080be:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80080ca:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080dc:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80080e0:	bc30      	pop	{r4, r5}
 80080e2:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	0692      	lsls	r2, r2, #26
 80080e8:	d527      	bpl.n	800813a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ea:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080ec:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080f0:	4a18      	ldr	r2, [pc, #96]	; (8008154 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080f2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080f6:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008100:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008102:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008150 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee06 2a10 	vmov	s12, r2
 800810e:	ee06 3a90 	vmov	s13, r3
 8008112:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8008116:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800811a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800811e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008122:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008126:	ee66 6a26 	vmul.f32	s13, s12, s13
 800812a:	e7ca      	b.n	80080c2 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800812c:	ee07 0a90 	vmov	s15, r0
 8008130:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008158 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8008134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008138:	e7b0      	b.n	800809c <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800813a:	ee07 0a90 	vmov	s15, r0
 800813e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800815c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8008142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008146:	e7a9      	b.n	800809c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8008148:	58024400 	.word	0x58024400
 800814c:	4a742400 	.word	0x4a742400
 8008150:	39000000 	.word	0x39000000
 8008154:	03d09000 	.word	0x03d09000
 8008158:	4bbebc20 	.word	0x4bbebc20
 800815c:	4c742400 	.word	0x4c742400

08008160 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8008160:	2800      	cmp	r0, #0
 8008162:	f000 81f8 	beq.w	8008556 <HAL_RCC_OscConfig+0x3f6>
{
 8008166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008168:	6803      	ldr	r3, [r0, #0]
 800816a:	4604      	mov	r4, r0
 800816c:	07d9      	lsls	r1, r3, #31
 800816e:	d52e      	bpl.n	80081ce <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008170:	49a7      	ldr	r1, [pc, #668]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 8008172:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008174:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008176:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800817a:	2a10      	cmp	r2, #16
 800817c:	f000 810d 	beq.w	800839a <HAL_RCC_OscConfig+0x23a>
 8008180:	2a18      	cmp	r2, #24
 8008182:	f000 8105 	beq.w	8008390 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818c:	f000 8130 	beq.w	80083f0 <HAL_RCC_OscConfig+0x290>
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 816e 	beq.w	8008472 <HAL_RCC_OscConfig+0x312>
 8008196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800819a:	4b9d      	ldr	r3, [pc, #628]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	f000 827a 	beq.w	8008696 <HAL_RCC_OscConfig+0x536>
 80081a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80081b0:	f7fc f938 	bl	8004424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b4:	4e96      	ldr	r6, [pc, #600]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80081b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b8:	e005      	b.n	80081c6 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081ba:	f7fc f933 	bl	8004424 <HAL_GetTick>
 80081be:	1b40      	subs	r0, r0, r5
 80081c0:	2864      	cmp	r0, #100	; 0x64
 80081c2:	f200 8154 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081c6:	6833      	ldr	r3, [r6, #0]
 80081c8:	039b      	lsls	r3, r3, #14
 80081ca:	d5f6      	bpl.n	80081ba <HAL_RCC_OscConfig+0x5a>
 80081cc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ce:	0798      	lsls	r0, r3, #30
 80081d0:	f100 808e 	bmi.w	80082f0 <HAL_RCC_OscConfig+0x190>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081d4:	06d9      	lsls	r1, r3, #27
 80081d6:	d534      	bpl.n	8008242 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081d8:	4a8d      	ldr	r2, [pc, #564]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80081da:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081de:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	f000 80e9 	beq.w	80083ba <HAL_RCC_OscConfig+0x25a>
 80081e8:	2b18      	cmp	r3, #24
 80081ea:	f000 80e1 	beq.w	80083b0 <HAL_RCC_OscConfig+0x250>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80081ee:	69e3      	ldr	r3, [r4, #28]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 817b 	beq.w	80084ec <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_CSI_ENABLE();
 80081f6:	4b86      	ldr	r3, [pc, #536]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80081f8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081fa:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80081fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008200:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008202:	f7fc f90f 	bl	8004424 <HAL_GetTick>
 8008206:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008208:	e005      	b.n	8008216 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800820a:	f7fc f90b 	bl	8004424 <HAL_GetTick>
 800820e:	1b40      	subs	r0, r0, r5
 8008210:	2802      	cmp	r0, #2
 8008212:	f200 812c 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008216:	6833      	ldr	r3, [r6, #0]
 8008218:	05db      	lsls	r3, r3, #23
 800821a:	d5f6      	bpl.n	800820a <HAL_RCC_OscConfig+0xaa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800821c:	f7fc f91a 	bl	8004454 <HAL_GetREVID>
 8008220:	f241 0303 	movw	r3, #4099	; 0x1003
 8008224:	4298      	cmp	r0, r3
 8008226:	f200 8258 	bhi.w	80086da <HAL_RCC_OscConfig+0x57a>
 800822a:	6a22      	ldr	r2, [r4, #32]
 800822c:	6873      	ldr	r3, [r6, #4]
 800822e:	2a20      	cmp	r2, #32
 8008230:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008234:	bf0c      	ite	eq
 8008236:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800823a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800823e:	6073      	str	r3, [r6, #4]
 8008240:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008242:	071d      	lsls	r5, r3, #28
 8008244:	d517      	bpl.n	8008276 <HAL_RCC_OscConfig+0x116>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008246:	6963      	ldr	r3, [r4, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8129 	beq.w	80084a0 <HAL_RCC_OscConfig+0x340>
      __HAL_RCC_LSI_ENABLE();
 800824e:	4b70      	ldr	r3, [pc, #448]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 8008250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008252:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800825a:	f7fc f8e3 	bl	8004424 <HAL_GetTick>
 800825e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008260:	e005      	b.n	800826e <HAL_RCC_OscConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008262:	f7fc f8df 	bl	8004424 <HAL_GetTick>
 8008266:	1b40      	subs	r0, r0, r5
 8008268:	2802      	cmp	r0, #2
 800826a:	f200 8100 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800826e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008270:	0798      	lsls	r0, r3, #30
 8008272:	d5f6      	bpl.n	8008262 <HAL_RCC_OscConfig+0x102>
 8008274:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008276:	069a      	lsls	r2, r3, #26
 8008278:	d517      	bpl.n	80082aa <HAL_RCC_OscConfig+0x14a>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800827a:	69a3      	ldr	r3, [r4, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8122 	beq.w	80084c6 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_HSI48_ENABLE();
 8008282:	4b63      	ldr	r3, [pc, #396]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 8008284:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008286:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800828c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800828e:	f7fc f8c9 	bl	8004424 <HAL_GetTick>
 8008292:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008294:	e005      	b.n	80082a2 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008296:	f7fc f8c5 	bl	8004424 <HAL_GetTick>
 800829a:	1b40      	subs	r0, r0, r5
 800829c:	2802      	cmp	r0, #2
 800829e:	f200 80e6 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082a2:	6833      	ldr	r3, [r6, #0]
 80082a4:	049f      	lsls	r7, r3, #18
 80082a6:	d5f6      	bpl.n	8008296 <HAL_RCC_OscConfig+0x136>
 80082a8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082aa:	0759      	lsls	r1, r3, #29
 80082ac:	f100 80a6 	bmi.w	80083fc <HAL_RCC_OscConfig+0x29c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082b2:	b1d8      	cbz	r0, 80082ec <HAL_RCC_OscConfig+0x18c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082b4:	4b56      	ldr	r3, [pc, #344]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80082bc:	2a18      	cmp	r2, #24
 80082be:	f000 81bc 	beq.w	800863a <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 80082c2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082c4:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082c6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80082c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80082cc:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ce:	f000 814e 	beq.w	800856e <HAL_RCC_OscConfig+0x40e>
        tickstart = HAL_GetTick();
 80082d2:	f7fc f8a7 	bl	8004424 <HAL_GetTick>
 80082d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082d8:	e005      	b.n	80082e6 <HAL_RCC_OscConfig+0x186>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082da:	f7fc f8a3 	bl	8004424 <HAL_GetTick>
 80082de:	1b00      	subs	r0, r0, r4
 80082e0:	2802      	cmp	r0, #2
 80082e2:	f200 80c4 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	019b      	lsls	r3, r3, #6
 80082ea:	d4f6      	bmi.n	80082da <HAL_RCC_OscConfig+0x17a>
  return HAL_OK;
 80082ec:	2000      	movs	r0, #0
}
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f0:	4a47      	ldr	r2, [pc, #284]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80082f2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80082f6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80082fa:	d12e      	bne.n	800835a <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082fc:	4b44      	ldr	r3, [pc, #272]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80082fe:	68e1      	ldr	r1, [r4, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	075a      	lsls	r2, r3, #29
 8008304:	d501      	bpl.n	800830a <HAL_RCC_OscConfig+0x1aa>
 8008306:	2900      	cmp	r1, #0
 8008308:	d050      	beq.n	80083ac <HAL_RCC_OscConfig+0x24c>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800830a:	4a41      	ldr	r2, [pc, #260]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 800830c:	6813      	ldr	r3, [r2, #0]
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800830e:	4616      	mov	r6, r2
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008310:	f023 0319 	bic.w	r3, r3, #25
 8008314:	430b      	orrs	r3, r1
 8008316:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8008318:	f7fc f884 	bl	8004424 <HAL_GetTick>
 800831c:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800831e:	e005      	b.n	800832c <HAL_RCC_OscConfig+0x1cc>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008320:	f7fc f880 	bl	8004424 <HAL_GetTick>
 8008324:	1b40      	subs	r0, r0, r5
 8008326:	2802      	cmp	r0, #2
 8008328:	f200 80a1 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	075b      	lsls	r3, r3, #29
 8008330:	d5f6      	bpl.n	8008320 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008332:	f7fc f88f 	bl	8004454 <HAL_GetREVID>
 8008336:	f241 0303 	movw	r3, #4099	; 0x1003
 800833a:	4298      	cmp	r0, r3
 800833c:	f200 8102 	bhi.w	8008544 <HAL_RCC_OscConfig+0x3e4>
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	6873      	ldr	r3, [r6, #4]
 8008344:	2a40      	cmp	r2, #64	; 0x40
 8008346:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800834a:	bf0c      	ite	eq
 800834c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008350:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008354:	6073      	str	r3, [r6, #4]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	e73c      	b.n	80081d4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800835a:	2b18      	cmp	r3, #24
 800835c:	f000 80ee 	beq.w	800853c <HAL_RCC_OscConfig+0x3dc>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008360:	68e2      	ldr	r2, [r4, #12]
 8008362:	2a00      	cmp	r2, #0
 8008364:	f000 80d6 	beq.w	8008514 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008368:	4929      	ldr	r1, [pc, #164]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 800836a:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800836c:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800836e:	f023 0319 	bic.w	r3, r3, #25
 8008372:	4313      	orrs	r3, r2
 8008374:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008376:	f7fc f855 	bl	8004424 <HAL_GetTick>
 800837a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800837c:	e004      	b.n	8008388 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800837e:	f7fc f851 	bl	8004424 <HAL_GetTick>
 8008382:	1b40      	subs	r0, r0, r5
 8008384:	2802      	cmp	r0, #2
 8008386:	d872      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	075f      	lsls	r7, r3, #29
 800838c:	d5f7      	bpl.n	800837e <HAL_RCC_OscConfig+0x21e>
 800838e:	e7d0      	b.n	8008332 <HAL_RCC_OscConfig+0x1d2>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008390:	f001 0103 	and.w	r1, r1, #3
 8008394:	2902      	cmp	r1, #2
 8008396:	f47f aef6 	bne.w	8008186 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839a:	4a1d      	ldr	r2, [pc, #116]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	0392      	lsls	r2, r2, #14
 80083a0:	f57f af15 	bpl.w	80081ce <HAL_RCC_OscConfig+0x6e>
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	f47f af11 	bne.w	80081ce <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80083ac:	2001      	movs	r0, #1
}
 80083ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80083b0:	f002 0203 	and.w	r2, r2, #3
 80083b4:	2a01      	cmp	r2, #1
 80083b6:	f47f af1a 	bne.w	80081ee <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	05da      	lsls	r2, r3, #23
 80083c0:	d502      	bpl.n	80083c8 <HAL_RCC_OscConfig+0x268>
 80083c2:	69e3      	ldr	r3, [r4, #28]
 80083c4:	2b80      	cmp	r3, #128	; 0x80
 80083c6:	d1f1      	bne.n	80083ac <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c8:	f7fc f844 	bl	8004454 <HAL_GetREVID>
 80083cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80083d0:	4298      	cmp	r0, r3
 80083d2:	f200 80c2 	bhi.w	800855a <HAL_RCC_OscConfig+0x3fa>
 80083d6:	6a22      	ldr	r2, [r4, #32]
 80083d8:	2a20      	cmp	r2, #32
 80083da:	f000 8193 	beq.w	8008704 <HAL_RCC_OscConfig+0x5a4>
 80083de:	490c      	ldr	r1, [pc, #48]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80083e0:	684b      	ldr	r3, [r1, #4]
 80083e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083e6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80083ea:	604b      	str	r3, [r1, #4]
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	e728      	b.n	8008242 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f0:	4a07      	ldr	r2, [pc, #28]	; (8008410 <HAL_RCC_OscConfig+0x2b0>)
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083fa:	e6d9      	b.n	80081b0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <HAL_RCC_OscConfig+0x2b4>)
 80083fe:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008400:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8008402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008406:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008408:	f7fc f80c 	bl	8004424 <HAL_GetTick>
 800840c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0x2c2>
 8008410:	58024400 	.word	0x58024400
 8008414:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008418:	f7fc f804 	bl	8004424 <HAL_GetTick>
 800841c:	1b40      	subs	r0, r0, r5
 800841e:	2864      	cmp	r0, #100	; 0x64
 8008420:	d825      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008422:	6833      	ldr	r3, [r6, #0]
 8008424:	05da      	lsls	r2, r3, #23
 8008426:	d5f7      	bpl.n	8008418 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008428:	68a3      	ldr	r3, [r4, #8]
 800842a:	2b01      	cmp	r3, #1
 800842c:	f000 815e 	beq.w	80086ec <HAL_RCC_OscConfig+0x58c>
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8138 	beq.w	80086a6 <HAL_RCC_OscConfig+0x546>
 8008436:	2b05      	cmp	r3, #5
 8008438:	4baf      	ldr	r3, [pc, #700]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 800843a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800843c:	f000 816b 	beq.w	8008716 <HAL_RCC_OscConfig+0x5b6>
 8008440:	f022 0201 	bic.w	r2, r2, #1
 8008444:	671a      	str	r2, [r3, #112]	; 0x70
 8008446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008448:	f022 0204 	bic.w	r2, r2, #4
 800844c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800844e:	f7fb ffe9 	bl	8004424 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008452:	4ea9      	ldr	r6, [pc, #676]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008454:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008458:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800845a:	e004      	b.n	8008466 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800845c:	f7fb ffe2 	bl	8004424 <HAL_GetTick>
 8008460:	1b40      	subs	r0, r0, r5
 8008462:	42b8      	cmp	r0, r7
 8008464:	d803      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008466:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008468:	079b      	lsls	r3, r3, #30
 800846a:	d5f7      	bpl.n	800845c <HAL_RCC_OscConfig+0x2fc>
 800846c:	e720      	b.n	80082b0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800846e:	2003      	movs	r0, #3
}
 8008470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008472:	4ba1      	ldr	r3, [pc, #644]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 8008474:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008476:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008478:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008484:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008486:	f7fb ffcd 	bl	8004424 <HAL_GetTick>
 800848a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800848c:	e004      	b.n	8008498 <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800848e:	f7fb ffc9 	bl	8004424 <HAL_GetTick>
 8008492:	1b40      	subs	r0, r0, r5
 8008494:	2864      	cmp	r0, #100	; 0x64
 8008496:	d8ea      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008498:	6833      	ldr	r3, [r6, #0]
 800849a:	039f      	lsls	r7, r3, #14
 800849c:	d4f7      	bmi.n	800848e <HAL_RCC_OscConfig+0x32e>
 800849e:	e695      	b.n	80081cc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80084a0:	4b95      	ldr	r3, [pc, #596]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 80084a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084a4:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80084ac:	f7fb ffba 	bl	8004424 <HAL_GetTick>
 80084b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084b2:	e004      	b.n	80084be <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b4:	f7fb ffb6 	bl	8004424 <HAL_GetTick>
 80084b8:	1b40      	subs	r0, r0, r5
 80084ba:	2802      	cmp	r0, #2
 80084bc:	d8d7      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084be:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80084c0:	0799      	lsls	r1, r3, #30
 80084c2:	d4f7      	bmi.n	80084b4 <HAL_RCC_OscConfig+0x354>
 80084c4:	e6d6      	b.n	8008274 <HAL_RCC_OscConfig+0x114>
      __HAL_RCC_HSI48_DISABLE();
 80084c6:	4b8c      	ldr	r3, [pc, #560]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 80084c8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084ca:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80084cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80084d2:	f7fb ffa7 	bl	8004424 <HAL_GetTick>
 80084d6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084d8:	e004      	b.n	80084e4 <HAL_RCC_OscConfig+0x384>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084da:	f7fb ffa3 	bl	8004424 <HAL_GetTick>
 80084de:	1b40      	subs	r0, r0, r5
 80084e0:	2802      	cmp	r0, #2
 80084e2:	d8c4      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	0498      	lsls	r0, r3, #18
 80084e8:	d4f7      	bmi.n	80084da <HAL_RCC_OscConfig+0x37a>
 80084ea:	e6dd      	b.n	80082a8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_DISABLE();
 80084ec:	4b82      	ldr	r3, [pc, #520]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 80084ee:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084f0:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80084f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084f8:	f7fb ff94 	bl	8004424 <HAL_GetTick>
 80084fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084fe:	e004      	b.n	800850a <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008500:	f7fb ff90 	bl	8004424 <HAL_GetTick>
 8008504:	1b40      	subs	r0, r0, r5
 8008506:	2802      	cmp	r0, #2
 8008508:	d8b1      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800850a:	6833      	ldr	r3, [r6, #0]
 800850c:	05df      	lsls	r7, r3, #23
 800850e:	d4f7      	bmi.n	8008500 <HAL_RCC_OscConfig+0x3a0>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	e696      	b.n	8008242 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8008514:	4b78      	ldr	r3, [pc, #480]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 8008516:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008518:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008520:	f7fb ff80 	bl	8004424 <HAL_GetTick>
 8008524:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008526:	e004      	b.n	8008532 <HAL_RCC_OscConfig+0x3d2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008528:	f7fb ff7c 	bl	8004424 <HAL_GetTick>
 800852c:	1b40      	subs	r0, r0, r5
 800852e:	2802      	cmp	r0, #2
 8008530:	d89d      	bhi.n	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008532:	6833      	ldr	r3, [r6, #0]
 8008534:	0758      	lsls	r0, r3, #29
 8008536:	d4f7      	bmi.n	8008528 <HAL_RCC_OscConfig+0x3c8>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	e64b      	b.n	80081d4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800853c:	0791      	lsls	r1, r2, #30
 800853e:	f47f af0f 	bne.w	8008360 <HAL_RCC_OscConfig+0x200>
 8008542:	e6db      	b.n	80082fc <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008544:	6873      	ldr	r3, [r6, #4]
 8008546:	6922      	ldr	r2, [r4, #16]
 8008548:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800854c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008550:	6073      	str	r3, [r6, #4]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	e63e      	b.n	80081d4 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8008556:	2001      	movs	r0, #1
}
 8008558:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800855a:	4a67      	ldr	r2, [pc, #412]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 800855c:	6a21      	ldr	r1, [r4, #32]
 800855e:	68d3      	ldr	r3, [r2, #12]
 8008560:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008564:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008568:	60d3      	str	r3, [r2, #12]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	e669      	b.n	8008242 <HAL_RCC_OscConfig+0xe2>
        tickstart = HAL_GetTick();
 800856e:	f7fb ff59 	bl	8004424 <HAL_GetTick>
 8008572:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008574:	e005      	b.n	8008582 <HAL_RCC_OscConfig+0x422>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008576:	f7fb ff55 	bl	8004424 <HAL_GetTick>
 800857a:	1b80      	subs	r0, r0, r6
 800857c:	2802      	cmp	r0, #2
 800857e:	f63f af76 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	0199      	lsls	r1, r3, #6
 8008586:	d4f6      	bmi.n	8008576 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008588:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800858a:	4b5c      	ldr	r3, [pc, #368]	; (80086fc <HAL_RCC_OscConfig+0x59c>)
 800858c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800858e:	4013      	ands	r3, r2
 8008590:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008592:	495b      	ldr	r1, [pc, #364]	; (8008700 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008594:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008596:	4e58      	ldr	r6, [pc, #352]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008598:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800859c:	62ab      	str	r3, [r5, #40]	; 0x28
 800859e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80085a0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80085a4:	3f01      	subs	r7, #1
 80085a6:	1e50      	subs	r0, r2, #1
 80085a8:	3b01      	subs	r3, #1
 80085aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80085ac:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80085b0:	025b      	lsls	r3, r3, #9
 80085b2:	0400      	lsls	r0, r0, #16
 80085b4:	3a01      	subs	r2, #1
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80085bc:	0612      	lsls	r2, r2, #24
 80085be:	4303      	orrs	r3, r0
 80085c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80085c4:	433b      	orrs	r3, r7
 80085c6:	4313      	orrs	r3, r2
 80085c8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80085ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085d2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80085d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80085d6:	4011      	ands	r1, r2
 80085d8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80085dc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085e2:	f023 030c 	bic.w	r3, r3, #12
 80085e6:	4313      	orrs	r3, r2
 80085e8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80085ee:	f023 0302 	bic.w	r3, r3, #2
 80085f2:	4313      	orrs	r3, r2
 80085f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008604:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800860c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800860e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800861e:	f7fb ff01 	bl	8004424 <HAL_GetTick>
 8008622:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008624:	e005      	b.n	8008632 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008626:	f7fb fefd 	bl	8004424 <HAL_GetTick>
 800862a:	1b00      	subs	r0, r0, r4
 800862c:	2802      	cmp	r0, #2
 800862e:	f63f af1e 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008632:	6833      	ldr	r3, [r6, #0]
 8008634:	019a      	lsls	r2, r3, #6
 8008636:	d5f6      	bpl.n	8008626 <HAL_RCC_OscConfig+0x4c6>
 8008638:	e658      	b.n	80082ec <HAL_RCC_OscConfig+0x18c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800863a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800863c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800863e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008640:	f43f ae55 	beq.w	80082ee <HAL_RCC_OscConfig+0x18e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008644:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008648:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800864a:	428b      	cmp	r3, r1
 800864c:	f47f aeae 	bne.w	80083ac <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008650:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008656:	429a      	cmp	r2, r3
 8008658:	f47f aea8 	bne.w	80083ac <HAL_RCC_OscConfig+0x24c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800865c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800865e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8008662:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	f47f aea1 	bne.w	80083ac <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800866a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800866c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008670:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008672:	429a      	cmp	r2, r3
 8008674:	f47f ae9a 	bne.w	80083ac <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800867a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800867e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008680:	429a      	cmp	r2, r3
 8008682:	f47f ae93 	bne.w	80083ac <HAL_RCC_OscConfig+0x24c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008686:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008688:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800868c:	3801      	subs	r0, #1
  return HAL_OK;
 800868e:	1a28      	subs	r0, r5, r0
 8008690:	bf18      	it	ne
 8008692:	2001      	movne	r0, #1
}
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008696:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e584      	b.n	80081b0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086a8:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086ae:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086b0:	f022 0201 	bic.w	r2, r2, #1
 80086b4:	671a      	str	r2, [r3, #112]	; 0x70
 80086b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086b8:	f022 0204 	bic.w	r2, r2, #4
 80086bc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80086be:	f7fb feb1 	bl	8004424 <HAL_GetTick>
 80086c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086c4:	e005      	b.n	80086d2 <HAL_RCC_OscConfig+0x572>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c6:	f7fb fead 	bl	8004424 <HAL_GetTick>
 80086ca:	1b40      	subs	r0, r0, r5
 80086cc:	42b8      	cmp	r0, r7
 80086ce:	f63f aece 	bhi.w	800846e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086d2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80086d4:	0798      	lsls	r0, r3, #30
 80086d6:	d4f6      	bmi.n	80086c6 <HAL_RCC_OscConfig+0x566>
 80086d8:	e5ea      	b.n	80082b0 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086da:	68f3      	ldr	r3, [r6, #12]
 80086dc:	6a22      	ldr	r2, [r4, #32]
 80086de:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80086e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80086e6:	60f3      	str	r3, [r6, #12]
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	e5aa      	b.n	8008242 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ec:	4a02      	ldr	r2, [pc, #8]	; (80086f8 <HAL_RCC_OscConfig+0x598>)
 80086ee:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80086f0:	f043 0301 	orr.w	r3, r3, #1
 80086f4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086f6:	e6aa      	b.n	800844e <HAL_RCC_OscConfig+0x2ee>
 80086f8:	58024400 	.word	0x58024400
 80086fc:	fffffc0c 	.word	0xfffffc0c
 8008700:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008704:	4a08      	ldr	r2, [pc, #32]	; (8008728 <HAL_RCC_OscConfig+0x5c8>)
 8008706:	6853      	ldr	r3, [r2, #4]
 8008708:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800870c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008710:	6053      	str	r3, [r2, #4]
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	e595      	b.n	8008242 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008716:	f042 0204 	orr.w	r2, r2, #4
 800871a:	671a      	str	r2, [r3, #112]	; 0x70
 800871c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	671a      	str	r2, [r3, #112]	; 0x70
 8008724:	e693      	b.n	800844e <HAL_RCC_OscConfig+0x2ee>
 8008726:	bf00      	nop
 8008728:	58024400 	.word	0x58024400

0800872c <HAL_RCC_MCOConfig>:
{
 800872c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008730:	460d      	mov	r5, r1
 8008732:	b088      	sub	sp, #32
 8008734:	4614      	mov	r4, r2
  if(RCC_MCOx == RCC_MCO1)
 8008736:	bb28      	cbnz	r0, 8008784 <HAL_RCC_MCOConfig+0x58>
    MCO1_CLK_ENABLE();
 8008738:	4e27      	ldr	r6, [pc, #156]	; (80087d8 <HAL_RCC_MCOConfig+0xac>)
 800873a:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 800873c:	f44f 7880 	mov.w	r8, #256	; 0x100
 8008740:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
 8008744:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008748:	a902      	add	r1, sp, #8
 800874a:	4824      	ldr	r0, [pc, #144]	; (80087dc <HAL_RCC_MCOConfig+0xb0>)
    MCO1_CLK_ENABLE();
 800874c:	f042 0201 	orr.w	r2, r2, #1
 8008750:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8008754:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008758:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
 800875a:	f002 0201 	and.w	r2, r2, #1
 800875e:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008760:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
 8008762:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008764:	2303      	movs	r3, #3
 8008766:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800876a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800876e:	f7fe fd03 	bl	8007178 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008772:	6932      	ldr	r2, [r6, #16]
 8008774:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 8008778:	432a      	orrs	r2, r5
 800877a:	4322      	orrs	r2, r4
 800877c:	6132      	str	r2, [r6, #16]
}
 800877e:	b008      	add	sp, #32
 8008780:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
 8008784:	4e14      	ldr	r6, [pc, #80]	; (80087d8 <HAL_RCC_MCOConfig+0xac>)
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008786:	f44f 7000 	mov.w	r0, #512	; 0x200
 800878a:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800878c:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 800878e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008792:	f04f 0800 	mov.w	r8, #0
 8008796:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
 800879a:	f043 0304 	orr.w	r3, r3, #4
 800879e:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80087a2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80087a6:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
 80087a8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80087ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
 80087b0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80087b2:	a902      	add	r1, sp, #8
 80087b4:	480a      	ldr	r0, [pc, #40]	; (80087e0 <HAL_RCC_MCOConfig+0xb4>)
    MCO2_CLK_ENABLE();
 80087b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80087b8:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80087bc:	f7fe fcdc 	bl	8007178 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80087c0:	6933      	ldr	r3, [r6, #16]
 80087c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80087c6:	ea43 0105 	orr.w	r1, r3, r5
 80087ca:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80087ce:	6131      	str	r1, [r6, #16]
}
 80087d0:	b008      	add	sp, #32
 80087d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
 80087dc:	58020000 	.word	0x58020000
 80087e0:	58020800 	.word	0x58020800

080087e4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087e4:	4a47      	ldr	r2, [pc, #284]	; (8008904 <HAL_RCC_GetSysClockFreq+0x120>)
 80087e6:	6913      	ldr	r3, [r2, #16]
 80087e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d004      	beq.n	80087fa <HAL_RCC_GetSysClockFreq+0x16>
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	d00d      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
 80087f4:	b11b      	cbz	r3, 80087fe <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80087f6:	4844      	ldr	r0, [pc, #272]	; (8008908 <HAL_RCC_GetSysClockFreq+0x124>)
 80087f8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087fa:	4844      	ldr	r0, [pc, #272]	; (800890c <HAL_RCC_GetSysClockFreq+0x128>)
 80087fc:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087fe:	6813      	ldr	r3, [r2, #0]
 8008800:	0699      	lsls	r1, r3, #26
 8008802:	d54a      	bpl.n	800889a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008804:	6813      	ldr	r3, [r2, #0]
 8008806:	4842      	ldr	r0, [pc, #264]	; (8008910 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008808:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800880c:	40d8      	lsrs	r0, r3
 800880e:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008810:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008812:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008814:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8008818:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800881c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008820:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008822:	d038      	beq.n	8008896 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008824:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008828:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800882c:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008830:	fb01 f105 	mul.w	r1, r1, r5
 8008834:	2b01      	cmp	r3, #1
 8008836:	ee07 1a90 	vmov	s15, r1
 800883a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800883e:	d002      	beq.n	8008846 <HAL_RCC_GetSysClockFreq+0x62>
 8008840:	2b02      	cmp	r3, #2
 8008842:	d02c      	beq.n	800889e <HAL_RCC_GetSysClockFreq+0xba>
 8008844:	b393      	cbz	r3, 80088ac <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008846:	ee07 0a90 	vmov	s15, r0
 800884a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008914 <HAL_RCC_GetSysClockFreq+0x130>
 800884e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008852:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008854:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008858:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008918 <HAL_RCC_GetSysClockFreq+0x134>
 800885c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008860:	ee06 3a90 	vmov	s13, r3
 8008864:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008868:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800886c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008870:	eee7 6a25 	vfma.f32	s13, s14, s11
 8008874:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008878:	4b22      	ldr	r3, [pc, #136]	; (8008904 <HAL_RCC_GetSysClockFreq+0x120>)
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008880:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800888a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008892:	ee17 0a90 	vmov	r0, s15
}
 8008896:	bc30      	pop	{r4, r5}
 8008898:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800889a:	481d      	ldr	r0, [pc, #116]	; (8008910 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800889c:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800889e:	ee07 0a90 	vmov	s15, r0
 80088a2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800891c <HAL_RCC_GetSysClockFreq+0x138>
 80088a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088aa:	e7d2      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ac:	6813      	ldr	r3, [r2, #0]
 80088ae:	069b      	lsls	r3, r3, #26
 80088b0:	d520      	bpl.n	80088f4 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b2:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088b4:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b8:	4915      	ldr	r1, [pc, #84]	; (8008910 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ba:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088be:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088c8:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ca:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008918 <HAL_RCC_GetSysClockFreq+0x134>
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee06 1a10 	vmov	s12, r1
 80088d6:	ee06 3a90 	vmov	s13, r3
 80088da:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80088de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80088e2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80088e6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80088ea:	eee7 6a05 	vfma.f32	s13, s14, s10
 80088ee:	ee66 6a26 	vmul.f32	s13, s12, s13
 80088f2:	e7c1      	b.n	8008878 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088f4:	ee07 0a90 	vmov	s15, r0
 80088f8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008920 <HAL_RCC_GetSysClockFreq+0x13c>
 80088fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008900:	e7a7      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x6e>
 8008902:	bf00      	nop
 8008904:	58024400 	.word	0x58024400
 8008908:	003d0900 	.word	0x003d0900
 800890c:	017d7840 	.word	0x017d7840
 8008910:	03d09000 	.word	0x03d09000
 8008914:	4a742400 	.word	0x4a742400
 8008918:	39000000 	.word	0x39000000
 800891c:	4bbebc20 	.word	0x4bbebc20
 8008920:	4c742400 	.word	0x4c742400

08008924 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008924:	2800      	cmp	r0, #0
 8008926:	f000 810e 	beq.w	8008b46 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800892a:	4a8d      	ldr	r2, [pc, #564]	; (8008b60 <HAL_RCC_ClockConfig+0x23c>)
 800892c:	6813      	ldr	r3, [r2, #0]
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	428b      	cmp	r3, r1
{
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800893c:	d20c      	bcs.n	8008958 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	f023 030f 	bic.w	r3, r3, #15
 8008944:	430b      	orrs	r3, r1
 8008946:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	428b      	cmp	r3, r1
 8008950:	d002      	beq.n	8008958 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008952:	2001      	movs	r0, #1
}
 8008954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	075f      	lsls	r7, r3, #29
 800895c:	d50b      	bpl.n	8008976 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800895e:	4981      	ldr	r1, [pc, #516]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008960:	6920      	ldr	r0, [r4, #16]
 8008962:	698a      	ldr	r2, [r1, #24]
 8008964:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008968:	4290      	cmp	r0, r2
 800896a:	d904      	bls.n	8008976 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800896c:	698a      	ldr	r2, [r1, #24]
 800896e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008972:	4302      	orrs	r2, r0
 8008974:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008976:	071e      	lsls	r6, r3, #28
 8008978:	d50b      	bpl.n	8008992 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800897a:	497a      	ldr	r1, [pc, #488]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 800897c:	6960      	ldr	r0, [r4, #20]
 800897e:	69ca      	ldr	r2, [r1, #28]
 8008980:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008984:	4290      	cmp	r0, r2
 8008986:	d904      	bls.n	8008992 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008988:	69ca      	ldr	r2, [r1, #28]
 800898a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800898e:	4302      	orrs	r2, r0
 8008990:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008992:	06d8      	lsls	r0, r3, #27
 8008994:	d50b      	bpl.n	80089ae <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008996:	4973      	ldr	r1, [pc, #460]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008998:	69a0      	ldr	r0, [r4, #24]
 800899a:	69ca      	ldr	r2, [r1, #28]
 800899c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80089a0:	4290      	cmp	r0, r2
 80089a2:	d904      	bls.n	80089ae <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089a4:	69ca      	ldr	r2, [r1, #28]
 80089a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089aa:	4302      	orrs	r2, r0
 80089ac:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089ae:	0699      	lsls	r1, r3, #26
 80089b0:	d50b      	bpl.n	80089ca <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089b2:	496c      	ldr	r1, [pc, #432]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 80089b4:	69e0      	ldr	r0, [r4, #28]
 80089b6:	6a0a      	ldr	r2, [r1, #32]
 80089b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80089bc:	4290      	cmp	r0, r2
 80089be:	d904      	bls.n	80089ca <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80089c0:	6a0a      	ldr	r2, [r1, #32]
 80089c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089c6:	4302      	orrs	r2, r0
 80089c8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ca:	079a      	lsls	r2, r3, #30
 80089cc:	f140 80ad 	bpl.w	8008b2a <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089d0:	4864      	ldr	r0, [pc, #400]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 80089d2:	68e1      	ldr	r1, [r4, #12]
 80089d4:	6982      	ldr	r2, [r0, #24]
 80089d6:	f002 020f 	and.w	r2, r2, #15
 80089da:	4291      	cmp	r1, r2
 80089dc:	d904      	bls.n	80089e8 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089de:	6982      	ldr	r2, [r0, #24]
 80089e0:	f022 020f 	bic.w	r2, r2, #15
 80089e4:	430a      	orrs	r2, r1
 80089e6:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089e8:	07d8      	lsls	r0, r3, #31
 80089ea:	d531      	bpl.n	8008a50 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ec:	4a5d      	ldr	r2, [pc, #372]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 80089ee:	68a1      	ldr	r1, [r4, #8]
 80089f0:	6993      	ldr	r3, [r2, #24]
 80089f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089f6:	430b      	orrs	r3, r1
 80089f8:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fa:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089fc:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fe:	2902      	cmp	r1, #2
 8008a00:	f000 80a3 	beq.w	8008b4a <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a04:	2903      	cmp	r1, #3
 8008a06:	f000 809a 	beq.w	8008b3e <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a0a:	2901      	cmp	r1, #1
 8008a0c:	f000 80a3 	beq.w	8008b56 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a10:	0758      	lsls	r0, r3, #29
 8008a12:	d59e      	bpl.n	8008952 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a14:	4a53      	ldr	r2, [pc, #332]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a16:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a1a:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a1c:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a1e:	f023 0307 	bic.w	r3, r3, #7
 8008a22:	430b      	orrs	r3, r1
 8008a24:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8008a26:	f7fb fcfd 	bl	8004424 <HAL_GetTick>
 8008a2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2c:	e005      	b.n	8008a3a <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a2e:	f7fb fcf9 	bl	8004424 <HAL_GetTick>
 8008a32:	1b80      	subs	r0, r0, r6
 8008a34:	4540      	cmp	r0, r8
 8008a36:	f200 808c 	bhi.w	8008b52 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a42:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a46:	d1f2      	bne.n	8008a2e <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	0799      	lsls	r1, r3, #30
 8008a4c:	d506      	bpl.n	8008a5c <HAL_RCC_ClockConfig+0x138>
 8008a4e:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a50:	4844      	ldr	r0, [pc, #272]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008a52:	6982      	ldr	r2, [r0, #24]
 8008a54:	f002 020f 	and.w	r2, r2, #15
 8008a58:	428a      	cmp	r2, r1
 8008a5a:	d86a      	bhi.n	8008b32 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a5c:	4940      	ldr	r1, [pc, #256]	; (8008b60 <HAL_RCC_ClockConfig+0x23c>)
 8008a5e:	680a      	ldr	r2, [r1, #0]
 8008a60:	f002 020f 	and.w	r2, r2, #15
 8008a64:	42aa      	cmp	r2, r5
 8008a66:	d90a      	bls.n	8008a7e <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a68:	680a      	ldr	r2, [r1, #0]
 8008a6a:	f022 020f 	bic.w	r2, r2, #15
 8008a6e:	432a      	orrs	r2, r5
 8008a70:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a72:	680a      	ldr	r2, [r1, #0]
 8008a74:	f002 020f 	and.w	r2, r2, #15
 8008a78:	42aa      	cmp	r2, r5
 8008a7a:	f47f af6a 	bne.w	8008952 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a7e:	075a      	lsls	r2, r3, #29
 8008a80:	d50b      	bpl.n	8008a9a <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a82:	4938      	ldr	r1, [pc, #224]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008a84:	6920      	ldr	r0, [r4, #16]
 8008a86:	698a      	ldr	r2, [r1, #24]
 8008a88:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a8c:	4290      	cmp	r0, r2
 8008a8e:	d204      	bcs.n	8008a9a <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a90:	698a      	ldr	r2, [r1, #24]
 8008a92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a96:	4302      	orrs	r2, r0
 8008a98:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a9a:	071f      	lsls	r7, r3, #28
 8008a9c:	d50b      	bpl.n	8008ab6 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a9e:	4931      	ldr	r1, [pc, #196]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008aa0:	6960      	ldr	r0, [r4, #20]
 8008aa2:	69ca      	ldr	r2, [r1, #28]
 8008aa4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008aa8:	4290      	cmp	r0, r2
 8008aaa:	d204      	bcs.n	8008ab6 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aac:	69ca      	ldr	r2, [r1, #28]
 8008aae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ab2:	4302      	orrs	r2, r0
 8008ab4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab6:	06de      	lsls	r6, r3, #27
 8008ab8:	d50b      	bpl.n	8008ad2 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008aba:	492a      	ldr	r1, [pc, #168]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008abc:	69a0      	ldr	r0, [r4, #24]
 8008abe:	69ca      	ldr	r2, [r1, #28]
 8008ac0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008ac4:	4290      	cmp	r0, r2
 8008ac6:	d204      	bcs.n	8008ad2 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ac8:	69ca      	ldr	r2, [r1, #28]
 8008aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ace:	4302      	orrs	r2, r0
 8008ad0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ad2:	069d      	lsls	r5, r3, #26
 8008ad4:	d50b      	bpl.n	8008aee <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ad6:	4a23      	ldr	r2, [pc, #140]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008ad8:	69e1      	ldr	r1, [r4, #28]
 8008ada:	6a13      	ldr	r3, [r2, #32]
 8008adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d204      	bcs.n	8008aee <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ae4:	6a13      	ldr	r3, [r2, #32]
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	430b      	orrs	r3, r1
 8008aec:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008aee:	f7ff fe79 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008af4:	4602      	mov	r2, r0
 8008af6:	481c      	ldr	r0, [pc, #112]	; (8008b68 <HAL_RCC_ClockConfig+0x244>)
 8008af8:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008afa:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008afc:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008b00:	4d1a      	ldr	r5, [pc, #104]	; (8008b6c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	4c1a      	ldr	r4, [pc, #104]	; (8008b70 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b08:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b0a:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b0c:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008b10:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b12:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8008b16:	4d17      	ldr	r5, [pc, #92]	; (8008b74 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b18:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b1a:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008b1e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b20:	6023      	str	r3, [r4, #0]
}
 8008b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008b26:	f7fb bc1b 	b.w	8004360 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b2a:	07da      	lsls	r2, r3, #31
 8008b2c:	f53f af5e 	bmi.w	80089ec <HAL_RCC_ClockConfig+0xc8>
 8008b30:	e794      	b.n	8008a5c <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b32:	6982      	ldr	r2, [r0, #24]
 8008b34:	f022 020f 	bic.w	r2, r2, #15
 8008b38:	4311      	orrs	r1, r2
 8008b3a:	6181      	str	r1, [r0, #24]
 8008b3c:	e78e      	b.n	8008a5c <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b3e:	019f      	lsls	r7, r3, #6
 8008b40:	f53f af68 	bmi.w	8008a14 <HAL_RCC_ClockConfig+0xf0>
 8008b44:	e705      	b.n	8008952 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008b46:	2001      	movs	r0, #1
}
 8008b48:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b4a:	039b      	lsls	r3, r3, #14
 8008b4c:	f53f af62 	bmi.w	8008a14 <HAL_RCC_ClockConfig+0xf0>
 8008b50:	e6ff      	b.n	8008952 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008b52:	2003      	movs	r0, #3
 8008b54:	e6fe      	b.n	8008954 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b56:	05de      	lsls	r6, r3, #23
 8008b58:	f53f af5c 	bmi.w	8008a14 <HAL_RCC_ClockConfig+0xf0>
 8008b5c:	e6f9      	b.n	8008952 <HAL_RCC_ClockConfig+0x2e>
 8008b5e:	bf00      	nop
 8008b60:	52002000 	.word	0x52002000
 8008b64:	58024400 	.word	0x58024400
 8008b68:	080189ac 	.word	0x080189ac
 8008b6c:	240001f8 	.word	0x240001f8
 8008b70:	240001f0 	.word	0x240001f0
 8008b74:	240001ec 	.word	0x240001ec

08008b78 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b78:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b7a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b7c:	6913      	ldr	r3, [r2, #16]
 8008b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d01a      	beq.n	8008bbc <HAL_RCC_GetHCLKFreq+0x44>
 8008b86:	2b18      	cmp	r3, #24
 8008b88:	d023      	beq.n	8008bd2 <HAL_RCC_GetHCLKFreq+0x5a>
 8008b8a:	b1cb      	cbz	r3, 8008bc0 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8008b8c:	4814      	ldr	r0, [pc, #80]	; (8008be0 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b8e:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x64>)
 8008b90:	4914      	ldr	r1, [pc, #80]	; (8008be4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8008b92:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b94:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b96:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b9a:	4c13      	ldr	r4, [pc, #76]	; (8008be8 <HAL_RCC_GetHCLKFreq+0x70>)
 8008b9c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ba0:	4d12      	ldr	r5, [pc, #72]	; (8008bec <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ba2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ba4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ba6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008baa:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bae:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bb2:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8008bb6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bb8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bbc:	480c      	ldr	r0, [pc, #48]	; (8008bf0 <HAL_RCC_GetHCLKFreq+0x78>)
 8008bbe:	e7e6      	b.n	8008b8e <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc0:	6813      	ldr	r3, [r2, #0]
 8008bc2:	069b      	lsls	r3, r3, #26
 8008bc4:	d508      	bpl.n	8008bd8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	480a      	ldr	r0, [pc, #40]	; (8008bf4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008bca:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008bce:	40d0      	lsrs	r0, r2
 8008bd0:	e7dd      	b.n	8008b8e <HAL_RCC_GetHCLKFreq+0x16>
 8008bd2:	f7ff fa41 	bl	8008058 <HAL_RCC_GetSysClockFreq.part.0>
 8008bd6:	e7da      	b.n	8008b8e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bd8:	4806      	ldr	r0, [pc, #24]	; (8008bf4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008bda:	e7d8      	b.n	8008b8e <HAL_RCC_GetHCLKFreq+0x16>
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	080189ac 	.word	0x080189ac
 8008be8:	240001f0 	.word	0x240001f0
 8008bec:	240001ec 	.word	0x240001ec
 8008bf0:	017d7840 	.word	0x017d7840
 8008bf4:	03d09000 	.word	0x03d09000

08008bf8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bf8:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bfa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bfc:	6913      	ldr	r3, [r2, #16]
 8008bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d021      	beq.n	8008c4a <HAL_RCC_GetPCLK1Freq+0x52>
 8008c06:	2b18      	cmp	r3, #24
 8008c08:	d02a      	beq.n	8008c60 <HAL_RCC_GetPCLK1Freq+0x68>
 8008c0a:	b303      	cbz	r3, 8008c4e <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008c0c:	4818      	ldr	r0, [pc, #96]	; (8008c70 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c0e:	4a17      	ldr	r2, [pc, #92]	; (8008c6c <HAL_RCC_GetPCLK1Freq+0x74>)
 8008c10:	4918      	ldr	r1, [pc, #96]	; (8008c74 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8008c12:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c14:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c16:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8008c1a:	4d17      	ldr	r5, [pc, #92]	; (8008c78 <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c1c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c20:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c22:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c24:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c28:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c2c:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2e:	4c13      	ldr	r4, [pc, #76]	; (8008c7c <HAL_RCC_GetPCLK1Freq+0x84>)
 8008c30:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008c34:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c36:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c38:	69d2      	ldr	r2, [r2, #28]
 8008c3a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8008c3e:	5c88      	ldrb	r0, [r1, r2]
 8008c40:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c44:	fa23 f000 	lsr.w	r0, r3, r0
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c4a:	480d      	ldr	r0, [pc, #52]	; (8008c80 <HAL_RCC_GetPCLK1Freq+0x88>)
 8008c4c:	e7df      	b.n	8008c0e <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	069b      	lsls	r3, r3, #26
 8008c52:	d508      	bpl.n	8008c66 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	480b      	ldr	r0, [pc, #44]	; (8008c84 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008c58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c5c:	40d8      	lsrs	r0, r3
 8008c5e:	e7d6      	b.n	8008c0e <HAL_RCC_GetPCLK1Freq+0x16>
 8008c60:	f7ff f9fa 	bl	8008058 <HAL_RCC_GetSysClockFreq.part.0>
 8008c64:	e7d3      	b.n	8008c0e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c66:	4807      	ldr	r0, [pc, #28]	; (8008c84 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008c68:	e7d1      	b.n	8008c0e <HAL_RCC_GetPCLK1Freq+0x16>
 8008c6a:	bf00      	nop
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	003d0900 	.word	0x003d0900
 8008c74:	080189ac 	.word	0x080189ac
 8008c78:	240001ec 	.word	0x240001ec
 8008c7c:	240001f0 	.word	0x240001f0
 8008c80:	017d7840 	.word	0x017d7840
 8008c84:	03d09000 	.word	0x03d09000

08008c88 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c88:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c8a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c8c:	6913      	ldr	r3, [r2, #16]
 8008c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d021      	beq.n	8008cda <HAL_RCC_GetPCLK2Freq+0x52>
 8008c96:	2b18      	cmp	r3, #24
 8008c98:	d02a      	beq.n	8008cf0 <HAL_RCC_GetPCLK2Freq+0x68>
 8008c9a:	b303      	cbz	r3, 8008cde <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008c9c:	4818      	ldr	r0, [pc, #96]	; (8008d00 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <HAL_RCC_GetPCLK2Freq+0x74>)
 8008ca0:	4918      	ldr	r1, [pc, #96]	; (8008d04 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008ca2:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ca4:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ca6:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8008caa:	4d17      	ldr	r5, [pc, #92]	; (8008d08 <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cac:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cb0:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cb2:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cb4:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cb8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cbc:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cbe:	4c13      	ldr	r4, [pc, #76]	; (8008d0c <HAL_RCC_GetPCLK2Freq+0x84>)
 8008cc0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008cc4:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cc6:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cc8:	69d2      	ldr	r2, [r2, #28]
 8008cca:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008cce:	5c88      	ldrb	r0, [r1, r2]
 8008cd0:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cd4:	fa23 f000 	lsr.w	r0, r3, r0
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cda:	480d      	ldr	r0, [pc, #52]	; (8008d10 <HAL_RCC_GetPCLK2Freq+0x88>)
 8008cdc:	e7df      	b.n	8008c9e <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	069b      	lsls	r3, r3, #26
 8008ce2:	d508      	bpl.n	8008cf6 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce4:	6813      	ldr	r3, [r2, #0]
 8008ce6:	480b      	ldr	r0, [pc, #44]	; (8008d14 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008ce8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008cec:	40d8      	lsrs	r0, r3
 8008cee:	e7d6      	b.n	8008c9e <HAL_RCC_GetPCLK2Freq+0x16>
 8008cf0:	f7ff f9b2 	bl	8008058 <HAL_RCC_GetSysClockFreq.part.0>
 8008cf4:	e7d3      	b.n	8008c9e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cf6:	4807      	ldr	r0, [pc, #28]	; (8008d14 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008cf8:	e7d1      	b.n	8008c9e <HAL_RCC_GetPCLK2Freq+0x16>
 8008cfa:	bf00      	nop
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	003d0900 	.word	0x003d0900
 8008d04:	080189ac 	.word	0x080189ac
 8008d08:	240001ec 	.word	0x240001ec
 8008d0c:	240001f0 	.word	0x240001f0
 8008d10:	017d7840 	.word	0x017d7840
 8008d14:	03d09000 	.word	0x03d09000

08008d18 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d18:	4a3b      	ldr	r2, [pc, #236]	; (8008e08 <RCCEx_PLL2_Config+0xf0>)
{
 8008d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d069      	beq.n	8008dfa <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d2c:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8008d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d32:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008d34:	f7fb fb76 	bl	8004424 <HAL_GetTick>
 8008d38:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3a:	e004      	b.n	8008d46 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d3c:	f7fb fb72 	bl	8004424 <HAL_GetTick>
 8008d40:	1b43      	subs	r3, r0, r5
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d857      	bhi.n	8008df6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	011a      	lsls	r2, r3, #4
 8008d4a:	d4f7      	bmi.n	8008d3c <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d4e:	6832      	ldr	r2, [r6, #0]
 8008d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d54:	492d      	ldr	r1, [pc, #180]	; (8008e0c <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d56:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d5c:	6875      	ldr	r5, [r6, #4]
 8008d5e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008d62:	3d01      	subs	r5, #1
 8008d64:	1e50      	subs	r0, r2, #1
 8008d66:	3b01      	subs	r3, #1
 8008d68:	6932      	ldr	r2, [r6, #16]
 8008d6a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008d6e:	025b      	lsls	r3, r3, #9
 8008d70:	0400      	lsls	r0, r0, #16
 8008d72:	3a01      	subs	r2, #1
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008d7a:	0612      	lsls	r2, r2, #24
 8008d7c:	4303      	orrs	r3, r0
 8008d7e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d82:	432b      	orrs	r3, r5
 8008d84:	4313      	orrs	r3, r2
 8008d86:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d8a:	6972      	ldr	r2, [r6, #20]
 8008d8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d90:	4313      	orrs	r3, r2
 8008d92:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d96:	69b2      	ldr	r2, [r6, #24]
 8008d98:	f023 0320 	bic.w	r3, r3, #32
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008da2:	f023 0310 	bic.w	r3, r3, #16
 8008da6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008da8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008daa:	69f3      	ldr	r3, [r6, #28]
 8008dac:	4011      	ands	r1, r2
 8008dae:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008db2:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008db6:	f043 0310 	orr.w	r3, r3, #16
 8008dba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008dbe:	b1f7      	cbz	r7, 8008dfe <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008dc0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dc2:	bf0c      	ite	eq
 8008dc4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dc8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <RCCEx_PLL2_Config+0xf0>)
 8008dd0:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dd2:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008dd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008dd8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008dda:	f7fb fb23 	bl	8004424 <HAL_GetTick>
 8008dde:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008de0:	e004      	b.n	8008dec <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008de2:	f7fb fb1f 	bl	8004424 <HAL_GetTick>
 8008de6:	1b00      	subs	r0, r0, r4
 8008de8:	2802      	cmp	r0, #2
 8008dea:	d804      	bhi.n	8008df6 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	d5f7      	bpl.n	8008de2 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008df2:	2000      	movs	r0, #0
}
 8008df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008df6:	2003      	movs	r0, #3
}
 8008df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008dfa:	2001      	movs	r0, #1
}
 8008dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e04:	e7e3      	b.n	8008dce <RCCEx_PLL2_Config+0xb6>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	ffff0007 	.word	0xffff0007

08008e10 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e10:	4a3b      	ldr	r2, [pc, #236]	; (8008f00 <RCCEx_PLL3_Config+0xf0>)
{
 8008e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e14:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d069      	beq.n	8008ef2 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	4606      	mov	r6, r0
 8008e22:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e24:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e2a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008e2c:	f7fb fafa 	bl	8004424 <HAL_GetTick>
 8008e30:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e32:	e004      	b.n	8008e3e <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e34:	f7fb faf6 	bl	8004424 <HAL_GetTick>
 8008e38:	1b43      	subs	r3, r0, r5
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d857      	bhi.n	8008eee <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	009a      	lsls	r2, r3, #2
 8008e42:	d4f7      	bmi.n	8008e34 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e46:	6832      	ldr	r2, [r6, #0]
 8008e48:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e4c:	492d      	ldr	r1, [pc, #180]	; (8008f04 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e4e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008e52:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e54:	6875      	ldr	r5, [r6, #4]
 8008e56:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008e5a:	3d01      	subs	r5, #1
 8008e5c:	1e50      	subs	r0, r2, #1
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	6932      	ldr	r2, [r6, #16]
 8008e62:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008e66:	025b      	lsls	r3, r3, #9
 8008e68:	0400      	lsls	r0, r0, #16
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008e72:	0612      	lsls	r2, r2, #24
 8008e74:	4303      	orrs	r3, r0
 8008e76:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e7a:	432b      	orrs	r3, r5
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e82:	6972      	ldr	r2, [r6, #20]
 8008e84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e8e:	69b2      	ldr	r2, [r6, #24]
 8008e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e94:	4313      	orrs	r3, r2
 8008e96:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ea0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008ea2:	69f3      	ldr	r3, [r6, #28]
 8008ea4:	4011      	ands	r1, r2
 8008ea6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008eaa:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008eb6:	b1f7      	cbz	r7, 8008ef6 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008eb8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008eba:	bf0c      	ite	eq
 8008ebc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ec0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ec6:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <RCCEx_PLL3_Config+0xf0>)
 8008ec8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eca:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008ecc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008ed0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008ed2:	f7fb faa7 	bl	8004424 <HAL_GetTick>
 8008ed6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ed8:	e004      	b.n	8008ee4 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008eda:	f7fb faa3 	bl	8004424 <HAL_GetTick>
 8008ede:	1b00      	subs	r0, r0, r4
 8008ee0:	2802      	cmp	r0, #2
 8008ee2:	d804      	bhi.n	8008eee <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	d5f7      	bpl.n	8008eda <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008eea:	2000      	movs	r0, #0
}
 8008eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008eee:	2003      	movs	r0, #3
}
 8008ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008ef2:	2001      	movs	r0, #1
}
 8008ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ef6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008efc:	e7e3      	b.n	8008ec6 <RCCEx_PLL3_Config+0xb6>
 8008efe:	bf00      	nop
 8008f00:	58024400 	.word	0x58024400
 8008f04:	ffff0007 	.word	0xffff0007

08008f08 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f0c:	6803      	ldr	r3, [r0, #0]
{
 8008f0e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f10:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008f14:	d01c      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f16:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008f18:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008f1c:	f000 84ba 	beq.w	8009894 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008f20:	d823      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	f000 83dc 	beq.w	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8008f28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008f2c:	d120      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f2e:	2102      	movs	r1, #2
 8008f30:	3004      	adds	r0, #4
 8008f32:	f7ff fef1 	bl	8008d18 <RCCEx_PLL2_Config>
 8008f36:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	f040 849f 	bne.w	800987c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8008f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f40:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f42:	48ab      	ldr	r0, [pc, #684]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008f44:	2600      	movs	r6, #0
 8008f46:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008f48:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f50:	05dd      	lsls	r5, r3, #23
 8008f52:	d511      	bpl.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008f56:	2a04      	cmp	r2, #4
 8008f58:	f200 851c 	bhi.w	8009994 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8008f5c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f60:	0476046f 	.word	0x0476046f
 8008f64:	02d40486 	.word	0x02d40486
 8008f68:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f6a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008f6e:	d0e8      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f70:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f72:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f76:	d4ed      	bmi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f78:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f7a:	0598      	lsls	r0, r3, #22
 8008f7c:	d51b      	bpl.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008f7e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008f80:	2a80      	cmp	r2, #128	; 0x80
 8008f82:	f000 8453 	beq.w	800982c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008f86:	f200 80ec 	bhi.w	8009162 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	f000 83a2 	beq.w	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8008f90:	2a40      	cmp	r2, #64	; 0x40
 8008f92:	f040 80ed 	bne.w	8009170 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f96:	2100      	movs	r1, #0
 8008f98:	1d20      	adds	r0, r4, #4
 8008f9a:	f7ff febd 	bl	8008d18 <RCCEx_PLL2_Config>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	f040 8386 	bne.w	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fa8:	4991      	ldr	r1, [pc, #580]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008fae:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008fb2:	4302      	orrs	r2, r0
 8008fb4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fb6:	0559      	lsls	r1, r3, #21
 8008fb8:	d51f      	bpl.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008fba:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8008fbe:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008fc2:	f000 844a 	beq.w	800985a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008fc6:	f200 80d6 	bhi.w	8009176 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	f000 837c 	beq.w	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008fd0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008fd4:	f040 80d7 	bne.w	8009186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fd8:	2100      	movs	r1, #0
 8008fda:	1d20      	adds	r0, r4, #4
 8008fdc:	f7ff fe9c 	bl	8008d18 <RCCEx_PLL2_Config>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	f040 8367 	bne.w	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fea:	4981      	ldr	r1, [pc, #516]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008fec:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008ff0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008ff2:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008ff6:	4302      	orrs	r2, r0
 8008ff8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ffa:	051a      	lsls	r2, r3, #20
 8008ffc:	d51f      	bpl.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ffe:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8009002:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8009006:	f000 843c 	beq.w	8009882 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800900a:	f200 80bf 	bhi.w	800918c <HAL_RCCEx_PeriphCLKConfig+0x284>
 800900e:	2a00      	cmp	r2, #0
 8009010:	f000 836c 	beq.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009014:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009018:	f040 80c0 	bne.w	800919c <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800901c:	2100      	movs	r1, #0
 800901e:	1d20      	adds	r0, r4, #4
 8009020:	f7ff fe7a 	bl	8008d18 <RCCEx_PLL2_Config>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009028:	2d00      	cmp	r5, #0
 800902a:	f040 833f 	bne.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800902e:	4970      	ldr	r1, [pc, #448]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009030:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8009034:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009036:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800903a:	4302      	orrs	r2, r0
 800903c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800903e:	019f      	lsls	r7, r3, #6
 8009040:	d518      	bpl.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8009042:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009044:	2a20      	cmp	r2, #32
 8009046:	f000 8392 	beq.w	800976e <HAL_RCCEx_PeriphCLKConfig+0x866>
 800904a:	f200 80aa 	bhi.w	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800904e:	b13a      	cbz	r2, 8009060 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8009050:	2a10      	cmp	r2, #16
 8009052:	f040 80a9 	bne.w	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009056:	4966      	ldr	r1, [pc, #408]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009058:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800905a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800905e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009060:	2d00      	cmp	r5, #0
 8009062:	f040 8366 	bne.w	8009732 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009066:	4962      	ldr	r1, [pc, #392]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009068:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800906a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800906c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009070:	4302      	orrs	r2, r0
 8009072:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009074:	04d8      	lsls	r0, r3, #19
 8009076:	d51d      	bpl.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009078:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800907a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800907e:	f000 83cd 	beq.w	800981c <HAL_RCCEx_PeriphCLKConfig+0x914>
 8009082:	f200 8094 	bhi.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009086:	2a00      	cmp	r2, #0
 8009088:	f000 8318 	beq.w	80096bc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800908c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009090:	f040 8095 	bne.w	80091be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009094:	2100      	movs	r1, #0
 8009096:	1d20      	adds	r0, r4, #4
 8009098:	f7ff fe3e 	bl	8008d18 <RCCEx_PLL2_Config>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	f040 8305 	bne.w	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090a6:	4952      	ldr	r1, [pc, #328]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80090a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80090aa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80090ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80090b0:	4302      	orrs	r2, r0
 80090b2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090b4:	0499      	lsls	r1, r3, #18
 80090b6:	d51a      	bpl.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80090b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80090ba:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80090be:	f000 8398 	beq.w	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 80090c2:	d87f      	bhi.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80090c4:	b14a      	cbz	r2, 80090da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80090c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80090ca:	f040 8083 	bne.w	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090ce:	2101      	movs	r1, #1
 80090d0:	1d20      	adds	r0, r4, #4
 80090d2:	f7ff fe21 	bl	8008d18 <RCCEx_PLL2_Config>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090da:	2d00      	cmp	r5, #0
 80090dc:	f040 832b 	bne.w	8009736 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090e0:	4943      	ldr	r1, [pc, #268]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80090e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80090e4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80090e6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80090ea:	4302      	orrs	r2, r0
 80090ec:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090ee:	045a      	lsls	r2, r3, #17
 80090f0:	d51b      	bpl.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 80090f2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80090f6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80090fa:	f000 834a 	beq.w	8009792 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 80090fe:	d86c      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009100:	b142      	cbz	r2, 8009114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8009102:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009106:	d170      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009108:	2101      	movs	r1, #1
 800910a:	1d20      	adds	r0, r4, #4
 800910c:	f7ff fe04 	bl	8008d18 <RCCEx_PLL2_Config>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009114:	2d00      	cmp	r5, #0
 8009116:	f040 8302 	bne.w	800971e <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800911a:	4935      	ldr	r1, [pc, #212]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800911c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8009120:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009122:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009126:	4302      	orrs	r2, r0
 8009128:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800912a:	041f      	lsls	r7, r3, #16
 800912c:	d50d      	bpl.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 800912e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009130:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009134:	f000 834b 	beq.w	80097ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8009138:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800913c:	f000 81f0 	beq.w	8009520 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8009140:	2a00      	cmp	r2, #0
 8009142:	f000 81f3 	beq.w	800952c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009146:	2601      	movs	r6, #1
 8009148:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800914a:	01d8      	lsls	r0, r3, #7
 800914c:	d55c      	bpl.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800914e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009150:	2a03      	cmp	r2, #3
 8009152:	f200 8425 	bhi.w	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 8009156:	e8df f012 	tbh	[pc, r2, lsl #1]
 800915a:	0053      	.short	0x0053
 800915c:	004d0313 	.word	0x004d0313
 8009160:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 8009162:	2ac0      	cmp	r2, #192	; 0xc0
 8009164:	f43f af1d 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8009168:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800916c:	f43f af19 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8009170:	2601      	movs	r6, #1
 8009172:	4635      	mov	r5, r6
 8009174:	e71f      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009176:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800917a:	f43f af33 	beq.w	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800917e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009182:	f43f af2f 	beq.w	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009186:	2601      	movs	r6, #1
 8009188:	4635      	mov	r5, r6
 800918a:	e736      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 800918c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009190:	f43f af4a 	beq.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009194:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009198:	f43f af46 	beq.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800919c:	2601      	movs	r6, #1
 800919e:	4635      	mov	r5, r6
 80091a0:	e74d      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80091a2:	2a30      	cmp	r2, #48	; 0x30
 80091a4:	f43f af5c 	beq.w	8009060 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80091a8:	2601      	movs	r6, #1
 80091aa:	4635      	mov	r5, r6
 80091ac:	e762      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80091ae:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80091b2:	f43f af75 	beq.w	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80091b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80091ba:	f43f af71 	beq.w	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80091be:	2601      	movs	r6, #1
 80091c0:	4635      	mov	r5, r6
 80091c2:	e777      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 80091c4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80091c8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80091cc:	d085      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80091ce:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80091d2:	d082      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80091d4:	2601      	movs	r6, #1
 80091d6:	4635      	mov	r5, r6
 80091d8:	e789      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80091da:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80091de:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80091e2:	d097      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80091e4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80091e8:	d094      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80091ea:	2601      	movs	r6, #1
 80091ec:	4635      	mov	r5, r6
 80091ee:	e79c      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x222>
 80091f0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091f4:	2102      	movs	r1, #2
 80091f6:	1d20      	adds	r0, r4, #4
 80091f8:	f7ff fd8e 	bl	8008d18 <RCCEx_PLL2_Config>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009200:	2d00      	cmp	r5, #0
 8009202:	f000 828e 	beq.w	8009722 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009206:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009208:	0259      	lsls	r1, r3, #9
 800920a:	f100 8208 	bmi.w	800961e <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800920e:	07df      	lsls	r7, r3, #31
 8009210:	d539      	bpl.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009212:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009214:	2a28      	cmp	r2, #40	; 0x28
 8009216:	f200 8174 	bhi.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800921a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800921e:	0030      	.short	0x0030
 8009220:	01720172 	.word	0x01720172
 8009224:	01720172 	.word	0x01720172
 8009228:	01720172 	.word	0x01720172
 800922c:	03580172 	.word	0x03580172
 8009230:	01720172 	.word	0x01720172
 8009234:	01720172 	.word	0x01720172
 8009238:	01720172 	.word	0x01720172
 800923c:	00290172 	.word	0x00290172
 8009240:	01720172 	.word	0x01720172
 8009244:	01720172 	.word	0x01720172
 8009248:	01720172 	.word	0x01720172
 800924c:	00300172 	.word	0x00300172
 8009250:	01720172 	.word	0x01720172
 8009254:	01720172 	.word	0x01720172
 8009258:	01720172 	.word	0x01720172
 800925c:	00300172 	.word	0x00300172
 8009260:	01720172 	.word	0x01720172
 8009264:	01720172 	.word	0x01720172
 8009268:	01720172 	.word	0x01720172
 800926c:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009270:	2101      	movs	r1, #1
 8009272:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009276:	f7ff fdcb 	bl	8008e10 <RCCEx_PLL3_Config>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800927e:	2d00      	cmp	r5, #0
 8009280:	f000 826b 	beq.w	800975a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009284:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009286:	0798      	lsls	r0, r3, #30
 8009288:	d516      	bpl.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800928a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800928c:	2a05      	cmp	r2, #5
 800928e:	f200 8384 	bhi.w	800999a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009292:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009296:	000d      	.short	0x000d
 8009298:	00060308 	.word	0x00060308
 800929c:	000d000d 	.word	0x000d000d
 80092a0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092a2:	2101      	movs	r1, #1
 80092a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092a8:	f7ff fdb2 	bl	8008e10 <RCCEx_PLL3_Config>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	f000 822c 	beq.w	800970e <HAL_RCCEx_PeriphCLKConfig+0x806>
 80092b6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092b8:	0759      	lsls	r1, r3, #29
 80092ba:	d517      	bpl.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80092c0:	2a05      	cmp	r2, #5
 80092c2:	f200 8370 	bhi.w	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 80092c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80092ca:	000d      	.short	0x000d
 80092cc:	000602f8 	.word	0x000602f8
 80092d0:	000d000d 	.word	0x000d000d
 80092d4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092d6:	2101      	movs	r1, #1
 80092d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092dc:	f7ff fd98 	bl	8008e10 <RCCEx_PLL3_Config>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092e4:	2d00      	cmp	r5, #0
 80092e6:	f000 8209 	beq.w	80096fc <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80092ea:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092ec:	069a      	lsls	r2, r3, #26
 80092ee:	d51d      	bpl.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80092f0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80092f4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80092f8:	f000 8271 	beq.w	80097de <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80092fc:	f200 8121 	bhi.w	8009542 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8009300:	b14a      	cbz	r2, 8009316 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009302:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009306:	f040 8126 	bne.w	8009556 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800930a:	2100      	movs	r1, #0
 800930c:	1d20      	adds	r0, r4, #4
 800930e:	f7ff fd03 	bl	8008d18 <RCCEx_PLL2_Config>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009316:	2d00      	cmp	r5, #0
 8009318:	f040 8213 	bne.w	8009742 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800931c:	49b9      	ldr	r1, [pc, #740]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800931e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009322:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009324:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009328:	4302      	orrs	r2, r0
 800932a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800932c:	065f      	lsls	r7, r3, #25
 800932e:	d51d      	bpl.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009330:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8009334:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009338:	f000 823f 	beq.w	80097ba <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800933c:	f200 8129 	bhi.w	8009592 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8009340:	b14a      	cbz	r2, 8009356 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009342:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009346:	f040 812e 	bne.w	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800934a:	2100      	movs	r1, #0
 800934c:	1d20      	adds	r0, r4, #4
 800934e:	f7ff fce3 	bl	8008d18 <RCCEx_PLL2_Config>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009356:	2d00      	cmp	r5, #0
 8009358:	f040 81ef 	bne.w	800973a <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800935c:	49a9      	ldr	r1, [pc, #676]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800935e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8009362:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009364:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009368:	4302      	orrs	r2, r0
 800936a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800936c:	0618      	lsls	r0, r3, #24
 800936e:	d51d      	bpl.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009370:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009374:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009378:	f000 8215 	beq.w	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800937c:	f200 80fc 	bhi.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8009380:	b14a      	cbz	r2, 8009396 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8009382:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009386:	f040 8101 	bne.w	800958c <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800938a:	2100      	movs	r1, #0
 800938c:	1d20      	adds	r0, r4, #4
 800938e:	f7ff fcc3 	bl	8008d18 <RCCEx_PLL2_Config>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009396:	2d00      	cmp	r5, #0
 8009398:	f040 81d1 	bne.w	800973e <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800939c:	4999      	ldr	r1, [pc, #612]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800939e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80093a2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80093a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80093a8:	4302      	orrs	r2, r0
 80093aa:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80093ac:	0719      	lsls	r1, r3, #28
 80093ae:	d50b      	bpl.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80093b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80093b4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80093b8:	f000 8225 	beq.w	8009806 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093bc:	4891      	ldr	r0, [pc, #580]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80093be:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80093c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80093c4:	430a      	orrs	r2, r1
 80093c6:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093c8:	06da      	lsls	r2, r3, #27
 80093ca:	d50b      	bpl.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80093cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80093d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80093d4:	f000 82b2 	beq.w	800993c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093d8:	488a      	ldr	r0, [pc, #552]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80093da:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80093dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093e0:	430a      	orrs	r2, r1
 80093e2:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093e4:	031f      	lsls	r7, r3, #12
 80093e6:	d50e      	bpl.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 80093e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80093ec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80093f0:	f000 80f2 	beq.w	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80093f4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80093f8:	f000 80f5 	beq.w	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80093fc:	2900      	cmp	r1, #0
 80093fe:	f000 828b 	beq.w	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8009402:	2601      	movs	r6, #1
 8009404:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009406:	0358      	lsls	r0, r3, #13
 8009408:	d50f      	bpl.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 800940a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800940e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009412:	f000 80cb 	beq.w	80095ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8009416:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800941a:	f000 80ce 	beq.w	80095ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800941e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009422:	f000 8282 	beq.w	800992a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8009426:	2601      	movs	r6, #1
 8009428:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800942a:	03d9      	lsls	r1, r3, #15
 800942c:	d517      	bpl.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 800942e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009430:	2a00      	cmp	r2, #0
 8009432:	f000 825f 	beq.w	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8009436:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800943a:	f040 8132 	bne.w	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800943e:	2102      	movs	r1, #2
 8009440:	1d20      	adds	r0, r4, #4
 8009442:	f7ff fc69 	bl	8008d18 <RCCEx_PLL2_Config>
 8009446:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	2d00      	cmp	r5, #0
 800944c:	f040 818d 	bne.w	800976a <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009450:	496c      	ldr	r1, [pc, #432]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009452:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009454:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009456:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800945a:	4302      	orrs	r2, r0
 800945c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800945e:	009a      	lsls	r2, r3, #2
 8009460:	f100 80d2 	bmi.w	8009608 <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009464:	039f      	lsls	r7, r3, #14
 8009466:	d43f      	bmi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8009468:	1e30      	subs	r0, r6, #0
 800946a:	bf18      	it	ne
 800946c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800946e:	02de      	lsls	r6, r3, #11
 8009470:	d506      	bpl.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009472:	4964      	ldr	r1, [pc, #400]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009474:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009476:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009478:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800947c:	432a      	orrs	r2, r5
 800947e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009480:	00dd      	lsls	r5, r3, #3
 8009482:	d507      	bpl.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009484:	495f      	ldr	r1, [pc, #380]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009486:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800948a:	690a      	ldr	r2, [r1, #16]
 800948c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009490:	432a      	orrs	r2, r5
 8009492:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009494:	0299      	lsls	r1, r3, #10
 8009496:	d506      	bpl.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009498:	495a      	ldr	r1, [pc, #360]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800949a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800949c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800949e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80094a2:	432a      	orrs	r2, r5
 80094a4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094a6:	005a      	lsls	r2, r3, #1
 80094a8:	d509      	bpl.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094aa:	4a56      	ldr	r2, [pc, #344]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80094ac:	6911      	ldr	r1, [r2, #16]
 80094ae:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80094b2:	6111      	str	r1, [r2, #16]
 80094b4:	6911      	ldr	r1, [r2, #16]
 80094b6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80094ba:	4329      	orrs	r1, r5
 80094bc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da06      	bge.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094c2:	4950      	ldr	r1, [pc, #320]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80094c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80094c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80094c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094cc:	432a      	orrs	r2, r5
 80094ce:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	d507      	bpl.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094d4:	4a4b      	ldr	r2, [pc, #300]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80094d6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80094da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80094dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80094e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80094e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80094ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80094ee:	f000 820a 	beq.w	8009906 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80094f2:	d933      	bls.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x654>
 80094f4:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80094f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80094fc:	d030      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80094fe:	2001      	movs	r0, #1
 8009500:	e7b5      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009502:	2601      	movs	r6, #1
 8009504:	4635      	mov	r5, r6
 8009506:	e6be      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009508:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800950a:	2d00      	cmp	r5, #0
 800950c:	f040 80cc 	bne.w	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009510:	493c      	ldr	r1, [pc, #240]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009514:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009516:	f022 0207 	bic.w	r2, r2, #7
 800951a:	4302      	orrs	r2, r0
 800951c:	650a      	str	r2, [r1, #80]	; 0x50
 800951e:	e52c      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009520:	2101      	movs	r1, #1
 8009522:	1d20      	adds	r0, r4, #4
 8009524:	f7ff fbf8 	bl	8008d18 <RCCEx_PLL2_Config>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800952c:	2d00      	cmp	r5, #0
 800952e:	f040 80e3 	bne.w	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009532:	4934      	ldr	r1, [pc, #208]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009534:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009536:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800953c:	4302      	orrs	r2, r0
 800953e:	650a      	str	r2, [r1, #80]	; 0x50
 8009540:	e603      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009542:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009546:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800954a:	f43f aee4 	beq.w	8009316 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800954e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009552:	f43f aee0 	beq.w	8009316 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009556:	2601      	movs	r6, #1
 8009558:	4635      	mov	r5, r6
 800955a:	e6e7      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 800955c:	2a00      	cmp	r2, #0
 800955e:	d1ce      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 8009560:	2d00      	cmp	r5, #0
 8009562:	d1cc      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009564:	4d27      	ldr	r5, [pc, #156]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009566:	1e30      	subs	r0, r6, #0
 8009568:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800956a:	bf18      	it	ne
 800956c:	2001      	movne	r0, #1
 800956e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009572:	430a      	orrs	r2, r1
 8009574:	656a      	str	r2, [r5, #84]	; 0x54
 8009576:	e77a      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009578:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800957c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009580:	f43f af09 	beq.w	8009396 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8009584:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009588:	f43f af05 	beq.w	8009396 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800958c:	2601      	movs	r6, #1
 800958e:	4635      	mov	r5, r6
 8009590:	e70c      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009592:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009596:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800959a:	f43f aedc 	beq.w	8009356 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800959e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80095a2:	f43f aed8 	beq.w	8009356 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80095a6:	2601      	movs	r6, #1
 80095a8:	4635      	mov	r5, r6
 80095aa:	e6df      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095ac:	2101      	movs	r1, #1
 80095ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095b2:	f7ff fc2d 	bl	8008e10 <RCCEx_PLL3_Config>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	f040 80c8 	bne.w	8009750 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095c0:	4910      	ldr	r1, [pc, #64]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80095c2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80095c6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80095c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80095cc:	4302      	orrs	r2, r0
 80095ce:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80095d0:	03d9      	lsls	r1, r3, #15
 80095d2:	f57f af44 	bpl.w	800945e <HAL_RCCEx_PeriphCLKConfig+0x556>
 80095d6:	e72a      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095d8:	2102      	movs	r1, #2
 80095da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095de:	f7ff fc17 	bl	8008e10 <RCCEx_PLL3_Config>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	f040 80ad 	bne.w	8009746 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095ec:	4905      	ldr	r1, [pc, #20]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80095ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80095f2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80095f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80095f8:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095fa:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095fc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095fe:	f57f af14 	bpl.w	800942a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009602:	e702      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009604:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009608:	2102      	movs	r1, #2
 800960a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800960e:	f7ff fbff 	bl	8008e10 <RCCEx_PLL3_Config>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	2800      	cmp	r0, #0
 8009616:	f43f af25 	beq.w	8009464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 800961a:	2601      	movs	r6, #1
 800961c:	e722      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800961e:	4bb3      	ldr	r3, [pc, #716]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8009620:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009622:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009628:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800962a:	f7fa fefb 	bl	8004424 <HAL_GetTick>
 800962e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009630:	e005      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009632:	f7fa fef7 	bl	8004424 <HAL_GetTick>
 8009636:	1bc0      	subs	r0, r0, r7
 8009638:	2864      	cmp	r0, #100	; 0x64
 800963a:	f200 8152 	bhi.w	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800963e:	f8d8 3000 	ldr.w	r3, [r8]
 8009642:	05da      	lsls	r2, r3, #23
 8009644:	d5f5      	bpl.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 8009646:	2d00      	cmp	r5, #0
 8009648:	f040 81a1 	bne.w	800998e <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800964c:	4aa8      	ldr	r2, [pc, #672]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800964e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009652:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009654:	4059      	eors	r1, r3
 8009656:	f411 7f40 	tst.w	r1, #768	; 0x300
 800965a:	d00b      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800965c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800965e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009660:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009664:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009668:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800966a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800966c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009670:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009672:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009678:	f000 816b 	beq.w	8009952 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800967c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009680:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009684:	f000 8179 	beq.w	800997a <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8009688:	4999      	ldr	r1, [pc, #612]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800968a:	690a      	ldr	r2, [r1, #16]
 800968c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009690:	610a      	str	r2, [r1, #16]
 8009692:	4a97      	ldr	r2, [pc, #604]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009698:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800969a:	430b      	orrs	r3, r1
 800969c:	6713      	str	r3, [r2, #112]	; 0x70
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	e5b5      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 80096a2:	2601      	movs	r6, #1
 80096a4:	4635      	mov	r5, r6
 80096a6:	e6da      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x556>
 80096a8:	462e      	mov	r6, r5
 80096aa:	e466      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80096ac:	462e      	mov	r6, r5
 80096ae:	e4c6      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80096b0:	462e      	mov	r6, r5
 80096b2:	e4ff      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80096b4:	462e      	mov	r6, r5
 80096b6:	e47e      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xae>
 80096b8:	462e      	mov	r6, r5
 80096ba:	e49e      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096bc:	498c      	ldr	r1, [pc, #560]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096c4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80096c6:	e4eb      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c8:	4989      	ldr	r1, [pc, #548]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096d0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80096d2:	e487      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4986      	ldr	r1, [pc, #536]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096dc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80096de:	e460      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e0:	4883      	ldr	r0, [pc, #524]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80096e4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80096e8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80096ea:	e42a      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ec:	4980      	ldr	r1, [pc, #512]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096f4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80096f6:	e497      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80096f8:	462e      	mov	r6, r5
 80096fa:	e526      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096fc:	497c      	ldr	r1, [pc, #496]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80096fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8009702:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009704:	f022 0207 	bic.w	r2, r2, #7
 8009708:	4302      	orrs	r2, r0
 800970a:	658a      	str	r2, [r1, #88]	; 0x58
 800970c:	e5ee      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800970e:	4978      	ldr	r1, [pc, #480]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009710:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009712:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009714:	f022 0207 	bic.w	r2, r2, #7
 8009718:	4302      	orrs	r2, r0
 800971a:	654a      	str	r2, [r1, #84]	; 0x54
 800971c:	e5cc      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800971e:	462e      	mov	r6, r5
 8009720:	e503      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009722:	4973      	ldr	r1, [pc, #460]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009724:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009726:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009728:	f022 0203 	bic.w	r2, r2, #3
 800972c:	4302      	orrs	r2, r0
 800972e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8009730:	e56a      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009732:	462e      	mov	r6, r5
 8009734:	e49e      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009736:	462e      	mov	r6, r5
 8009738:	e4d9      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800973a:	462e      	mov	r6, r5
 800973c:	e616      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800973e:	462e      	mov	r6, r5
 8009740:	e634      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009742:	462e      	mov	r6, r5
 8009744:	e5f2      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009746:	0358      	lsls	r0, r3, #13
 8009748:	462e      	mov	r6, r5
 800974a:	f57f ae6e 	bpl.w	800942a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800974e:	e65c      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009750:	03d9      	lsls	r1, r3, #15
 8009752:	462e      	mov	r6, r5
 8009754:	f57f ae83 	bpl.w	800945e <HAL_RCCEx_PeriphCLKConfig+0x556>
 8009758:	e669      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800975a:	4965      	ldr	r1, [pc, #404]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800975c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800975e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009760:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8009764:	4302      	orrs	r2, r0
 8009766:	654a      	str	r2, [r1, #84]	; 0x54
 8009768:	e58d      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800976a:	462e      	mov	r6, r5
 800976c:	e677      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800976e:	2102      	movs	r1, #2
 8009770:	1d20      	adds	r0, r4, #4
 8009772:	f7ff fad1 	bl	8008d18 <RCCEx_PLL2_Config>
 8009776:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	2d00      	cmp	r5, #0
 800977c:	d1d9      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800977e:	e472      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009780:	495b      	ldr	r1, [pc, #364]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009782:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009784:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009788:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800978a:	2d00      	cmp	r5, #0
 800978c:	f47f ad3b 	bne.w	8009206 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8009790:	e7c7      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009792:	2101      	movs	r1, #1
 8009794:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009798:	f7ff fb3a 	bl	8008e10 <RCCEx_PLL3_Config>
 800979c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	d1bc      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80097a4:	e4b9      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097a6:	2102      	movs	r1, #2
 80097a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097ac:	f7ff fb30 	bl	8008e10 <RCCEx_PLL3_Config>
 80097b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	d1c2      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x836>
 80097b8:	e5f0      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097ba:	2102      	movs	r1, #2
 80097bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097c0:	f7ff fb26 	bl	8008e10 <RCCEx_PLL3_Config>
 80097c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	d1b6      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80097cc:	e5c6      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ce:	4948      	ldr	r1, [pc, #288]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80097d0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80097d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80097d6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d18d      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80097dc:	e6a9      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097de:	2102      	movs	r1, #2
 80097e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097e4:	f7ff fb14 	bl	8008e10 <RCCEx_PLL3_Config>
 80097e8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	2d00      	cmp	r5, #0
 80097ee:	d1a8      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80097f0:	e594      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097f2:	2101      	movs	r1, #1
 80097f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097f8:	f7ff fb0a 	bl	8008e10 <RCCEx_PLL3_Config>
 80097fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	2d00      	cmp	r5, #0
 8009802:	d198      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8009804:	e46c      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009806:	2102      	movs	r1, #2
 8009808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800980c:	f7ff fb00 	bl	8008e10 <RCCEx_PLL3_Config>
 8009810:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009814:	b100      	cbz	r0, 8009818 <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 8009816:	2601      	movs	r6, #1
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	e5cf      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800981c:	2100      	movs	r1, #0
 800981e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009822:	f7ff faf5 	bl	8008e10 <RCCEx_PLL3_Config>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	4605      	mov	r5, r0
      break;
 800982a:	e439      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800982c:	2100      	movs	r1, #0
 800982e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009832:	f7ff faed 	bl	8008e10 <RCCEx_PLL3_Config>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	4605      	mov	r5, r0
      break;
 800983a:	f7ff bbb2 	b.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983e:	492c      	ldr	r1, [pc, #176]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8009840:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009842:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009844:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009848:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800984a:	e65e      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800984c:	2100      	movs	r1, #0
 800984e:	1d20      	adds	r0, r4, #4
 8009850:	f7ff fa62 	bl	8008d18 <RCCEx_PLL2_Config>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	4605      	mov	r5, r0
      break;
 8009858:	e657      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800985a:	2100      	movs	r1, #0
 800985c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009860:	f7ff fad6 	bl	8008e10 <RCCEx_PLL3_Config>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	4605      	mov	r5, r0
      break;
 8009868:	f7ff bbbc 	b.w	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800986c:	2100      	movs	r1, #0
 800986e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009872:	f7ff facd 	bl	8008e10 <RCCEx_PLL3_Config>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4605      	mov	r5, r0
      break;
 800987a:	e646      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x602>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	f7ff bb67 	b.w	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009882:	2100      	movs	r1, #0
 8009884:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009888:	f7ff fac2 	bl	8008e10 <RCCEx_PLL3_Config>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	4605      	mov	r5, r0
      break;
 8009890:	f7ff bbca 	b.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009894:	2102      	movs	r1, #2
 8009896:	3024      	adds	r0, #36	; 0x24
 8009898:	f7ff faba 	bl	8008e10 <RCCEx_PLL3_Config>
 800989c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800989e:	2e00      	cmp	r6, #0
 80098a0:	f43f ab4d 	beq.w	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x36>
 80098a4:	e7ea      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098a6:	2101      	movs	r1, #1
 80098a8:	1d20      	adds	r0, r4, #4
 80098aa:	f7ff fa35 	bl	8008d18 <RCCEx_PLL2_Config>
 80098ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	f47f acff 	bne.w	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80098b8:	e729      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098ba:	2101      	movs	r1, #1
 80098bc:	1d20      	adds	r0, r4, #4
 80098be:	f7ff fa2b 	bl	8008d18 <RCCEx_PLL2_Config>
 80098c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	f47f ad0f 	bne.w	80092ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80098cc:	e716      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098ce:	2101      	movs	r1, #1
 80098d0:	1d20      	adds	r0, r4, #4
 80098d2:	f7ff fa21 	bl	8008d18 <RCCEx_PLL2_Config>
 80098d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	2d00      	cmp	r5, #0
 80098dc:	f47f acd2 	bne.w	8009284 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80098e0:	e73b      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 80098e2:	2603      	movs	r6, #3
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	4635      	mov	r5, r6
 80098e8:	e491      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x306>
 80098ea:	bf00      	nop
 80098ec:	58024800 	.word	0x58024800
 80098f0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f4:	492d      	ldr	r1, [pc, #180]	; (80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80098f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80098fc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80098fe:	2d00      	cmp	r5, #0
 8009900:	f47f af33 	bne.w	800976a <HAL_RCCEx_PeriphCLKConfig+0x862>
 8009904:	e5a4      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009906:	4829      	ldr	r0, [pc, #164]	; (80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009908:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800990a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800990e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009910:	2d00      	cmp	r5, #0
 8009912:	f47f adf4 	bne.w	80094fe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8009916:	e625      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009918:	1d20      	adds	r0, r4, #4
 800991a:	f7ff f9fd 	bl	8008d18 <RCCEx_PLL2_Config>
 800991e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	2d00      	cmp	r5, #0
 8009924:	f47f af0f 	bne.w	8009746 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8009928:	e660      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992a:	4920      	ldr	r1, [pc, #128]	; (80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800992c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800992e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009932:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009934:	2d00      	cmp	r5, #0
 8009936:	f47f af0b 	bne.w	8009750 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800993a:	e641      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800993c:	2102      	movs	r1, #2
 800993e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009942:	f7ff fa65 	bl	8008e10 <RCCEx_PLL3_Config>
 8009946:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800994a:	b100      	cbz	r0, 800994e <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 800994c:	2601      	movs	r6, #1
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	e542      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 8009952:	f7fa fd67 	bl	8004424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009956:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800995a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800995e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009960:	e004      	b.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009962:	f7fa fd5f 	bl	8004424 <HAL_GetTick>
 8009966:	1bc0      	subs	r0, r0, r7
 8009968:	4548      	cmp	r0, r9
 800996a:	d8ba      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800996c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009970:	079b      	lsls	r3, r3, #30
 8009972:	d5f6      	bpl.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8009974:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009978:	e680      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800997a:	480c      	ldr	r0, [pc, #48]	; (80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800997c:	4a0c      	ldr	r2, [pc, #48]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800997e:	6901      	ldr	r1, [r0, #16]
 8009980:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009984:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8009988:	430a      	orrs	r2, r1
 800998a:	6102      	str	r2, [r0, #16]
 800998c:	e681      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800998e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009990:	462e      	mov	r6, r5
 8009992:	e43c      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009994:	2601      	movs	r6, #1
 8009996:	f7ff baef 	b.w	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800999a:	2601      	movs	r6, #1
 800999c:	4635      	mov	r5, r6
 800999e:	e48b      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 80099a0:	2601      	movs	r6, #1
 80099a2:	4635      	mov	r5, r6
 80099a4:	e430      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80099a6:	2601      	movs	r6, #1
 80099a8:	4635      	mov	r5, r6
 80099aa:	e49f      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80099ac:	58024400 	.word	0x58024400
 80099b0:	00ffffcf 	.word	0x00ffffcf

080099b4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80099b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099b6:	f7ff f8df 	bl	8008b78 <HAL_RCC_GetHCLKFreq>
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80099bc:	4a05      	ldr	r2, [pc, #20]	; (80099d4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80099c4:	5cd3      	ldrb	r3, [r2, r3]
 80099c6:	f003 031f 	and.w	r3, r3, #31
}
 80099ca:	40d8      	lsrs	r0, r3
 80099cc:	bd08      	pop	{r3, pc}
 80099ce:	bf00      	nop
 80099d0:	58024400 	.word	0x58024400
 80099d4:	080189ac 	.word	0x080189ac

080099d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099d8:	4b4f      	ldr	r3, [pc, #316]	; (8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 80099da:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099de:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 80099e2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099e6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099ea:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 80099ec:	d05c      	beq.n	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099ee:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099f2:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099f6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099fa:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80099fe:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a00:	ee07 4a90 	vmov	s15, r4
 8009a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009a08:	d003      	beq.n	8009a12 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8009a0a:	2902      	cmp	r1, #2
 8009a0c:	d075      	beq.n	8009afa <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	d04f      	beq.n	8009ab2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a12:	ee07 2a90 	vmov	s15, r2
 8009a16:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a20:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009a24:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	ee06 3a90 	vmov	s13, r3
 8009a30:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009a34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a38:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009a3c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009a40:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a44:	4a34      	ldr	r2, [pc, #208]	; (8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8009a46:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009a50:	ee07 3a10 	vmov	s14, r3
 8009a54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009a58:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a5a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a66:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a6a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a6c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009a70:	ee07 3a10 	vmov	s14, r3
 8009a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a78:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a84:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a88:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009a8a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a96:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009aa2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009aa6:	4770      	bx	lr
 8009aa8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009aaa:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009aae:	6082      	str	r2, [r0, #8]
}
 8009ab0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	0689      	lsls	r1, r1, #26
 8009ab6:	d527      	bpl.n	8009b08 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab8:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009aba:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009abe:	4a19      	ldr	r2, [pc, #100]	; (8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ac4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ace:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ad0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad8:	ee06 2a10 	vmov	s12, r2
 8009adc:	ee06 3a90 	vmov	s13, r3
 8009ae0:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009ae4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ae8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009aec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009af0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009af4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009af8:	e7a4      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009afa:	ee07 2a90 	vmov	s15, r2
 8009afe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8009b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b06:	e78a      	b.n	8009a1e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b08:	ee07 2a90 	vmov	s15, r2
 8009b0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8009b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b14:	e783      	b.n	8009a1e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8009b16:	bf00      	nop
 8009b18:	58024400 	.word	0x58024400
 8009b1c:	4a742400 	.word	0x4a742400
 8009b20:	39000000 	.word	0x39000000
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	4bbebc20 	.word	0x4bbebc20
 8009b2c:	4c742400 	.word	0x4c742400

08009b30 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b30:	4b4f      	ldr	r3, [pc, #316]	; (8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8009b32:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b34:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b38:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8009b3a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b3e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b42:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009b44:	d05c      	beq.n	8009c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b46:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b4a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b4e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b52:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009b56:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b58:	ee07 4a90 	vmov	s15, r4
 8009b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009b60:	d003      	beq.n	8009b6a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009b62:	2902      	cmp	r1, #2
 8009b64:	d075      	beq.n	8009c52 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d04f      	beq.n	8009c0a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b6a:	ee07 2a90 	vmov	s15, r2
 8009b6e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009c74 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009b7c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b84:	ee06 3a90 	vmov	s13, r3
 8009b88:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009b8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b90:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009b94:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009b98:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b9c:	4a34      	ldr	r2, [pc, #208]	; (8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8009b9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009ba2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ba4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ba8:	ee07 3a10 	vmov	s14, r3
 8009bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009bb0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009bb2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbe:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009bc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009bc4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009bc8:	ee07 3a10 	vmov	s14, r3
 8009bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bd0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bdc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009be0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009be2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bee:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009bfa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009bfe:	4770      	bx	lr
 8009c00:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c02:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c06:	6082      	str	r2, [r0, #8]
}
 8009c08:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c0a:	6819      	ldr	r1, [r3, #0]
 8009c0c:	0689      	lsls	r1, r1, #26
 8009c0e:	d527      	bpl.n	8009c60 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c10:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c12:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c16:	4a19      	ldr	r2, [pc, #100]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c18:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c1c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c26:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c28:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c30:	ee06 2a10 	vmov	s12, r2
 8009c34:	ee06 3a90 	vmov	s13, r3
 8009c38:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009c3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c40:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009c44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009c48:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009c4c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009c50:	e7a4      	b.n	8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c52:	ee07 2a90 	vmov	s15, r2
 8009c56:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8009c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c5e:	e78a      	b.n	8009b76 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c60:	ee07 2a90 	vmov	s15, r2
 8009c64:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8009c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c6c:	e783      	b.n	8009b76 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8009c6e:	bf00      	nop
 8009c70:	58024400 	.word	0x58024400
 8009c74:	4a742400 	.word	0x4a742400
 8009c78:	39000000 	.word	0x39000000
 8009c7c:	03d09000 	.word	0x03d09000
 8009c80:	4bbebc20 	.word	0x4bbebc20
 8009c84:	4c742400 	.word	0x4c742400

08009c88 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c88:	4b4f      	ldr	r3, [pc, #316]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8009c8a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c8e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c90:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009c92:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c96:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c9a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009c9c:	d05c      	beq.n	8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c9e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ca2:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ca6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009caa:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009cae:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009cb0:	ee07 4a90 	vmov	s15, r4
 8009cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009cb8:	d07e      	beq.n	8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009cba:	2902      	cmp	r1, #2
 8009cbc:	d075      	beq.n	8009daa <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d04f      	beq.n	8009d62 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cc2:	ee07 2a90 	vmov	s15, r2
 8009cc6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009cd4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cdc:	ee06 3a90 	vmov	s13, r3
 8009ce0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009ce4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ce8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009cec:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009cf0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009cf4:	4a34      	ldr	r2, [pc, #208]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8009cf6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009cfc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009d00:	ee07 3a10 	vmov	s14, r3
 8009d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009d08:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009d0a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d16:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009d1c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009d20:	ee07 3a10 	vmov	s14, r3
 8009d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d34:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009d3a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009d52:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009d56:	4770      	bx	lr
 8009d58:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d5a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d5e:	6082      	str	r2, [r0, #8]
}
 8009d60:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	0689      	lsls	r1, r1, #26
 8009d66:	d5ac      	bpl.n	8009cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d68:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d6a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d6e:	4a19      	ldr	r2, [pc, #100]	; (8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d70:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d74:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d7e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d80:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d88:	ee06 2a10 	vmov	s12, r2
 8009d8c:	ee06 3a90 	vmov	s13, r3
 8009d90:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009d94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009d98:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009d9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009da0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009da4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009da8:	e7a4      	b.n	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009daa:	ee07 2a90 	vmov	s15, r2
 8009dae:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8009db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009db6:	e78a      	b.n	8009cce <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db8:	ee07 2a90 	vmov	s15, r2
 8009dbc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8009dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc4:	e783      	b.n	8009cce <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
 8009dcc:	4c742400 	.word	0x4c742400
 8009dd0:	39000000 	.word	0x39000000
 8009dd4:	03d09000 	.word	0x03d09000
 8009dd8:	4bbebc20 	.word	0x4bbebc20
 8009ddc:	4a742400 	.word	0x4a742400

08009de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009de0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009de4:	b500      	push	{lr}
 8009de6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009de8:	d077      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009dea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009dee:	d02e      	beq.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009df0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009df4:	f000 80cf 	beq.w	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009df8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009dfc:	f000 8080 	beq.w	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e00:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009e04:	d05a      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009e06:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009e0a:	f000 8105 	beq.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e0e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009e12:	f000 8110 	beq.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e16:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009e1a:	f000 80e2 	beq.w	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009e22:	d13a      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009e24:	4ba9      	ldr	r3, [pc, #676]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e30:	f000 808e 	beq.w	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e38:	f000 812e 	beq.w	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009e3c:	bb6b      	cbnz	r3, 8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e3e:	4aa3      	ldr	r2, [pc, #652]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009e40:	4ba3      	ldr	r3, [pc, #652]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e42:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009e44:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009e48:	bf18      	it	ne
 8009e4a:	4618      	movne	r0, r3
 8009e4c:	e042      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009e4e:	4a9f      	ldr	r2, [pc, #636]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e50:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009e56:	2b80      	cmp	r3, #128	; 0x80
 8009e58:	f000 8098 	beq.w	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009e5c:	d921      	bls.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8009e60:	d037      	beq.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	d118      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e6a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e70:	0749      	lsls	r1, r1, #29
 8009e72:	d502      	bpl.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 80ae 	beq.w	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e7a:	4a94      	ldr	r2, [pc, #592]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e7c:	6812      	ldr	r2, [r2, #0]
 8009e7e:	05d0      	lsls	r0, r2, #23
 8009e80:	d503      	bpl.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e86:	f000 80fb 	beq.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e8a:	4a90      	ldr	r2, [pc, #576]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e8c:	6812      	ldr	r2, [r2, #0]
 8009e8e:	0391      	lsls	r1, r2, #14
 8009e90:	d503      	bpl.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e96:	f000 80bd 	beq.w	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009e9a:	2000      	movs	r0, #0
}
 8009e9c:	b005      	add	sp, #20
 8009e9e:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04b      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d1f7      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eaa:	6810      	ldr	r0, [r2, #0]
 8009eac:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009eb0:	d010      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb2:	a801      	add	r0, sp, #4
 8009eb4:	f7ff fd90 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eb8:	9801      	ldr	r0, [sp, #4]
 8009eba:	e00b      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009ebc:	4a83      	ldr	r2, [pc, #524]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ebe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ec0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ec8:	d060      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009eca:	d936      	bls.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ed0:	d178      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ed2:	4880      	ldr	r0, [pc, #512]	; (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009ed4:	b005      	add	sp, #20
 8009ed6:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009eda:	4b7c      	ldr	r3, [pc, #496]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d8d9      	bhi.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009ee6:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f51 	.word	0x08009f51
 8009ef0:	08009f75 	.word	0x08009f75
 8009ef4:	08009f61 	.word	0x08009f61
 8009ef8:	08009ed3 	.word	0x08009ed3
 8009efc:	08009f5d 	.word	0x08009f5d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009f00:	4a72      	ldr	r2, [pc, #456]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f02:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f04:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f0c:	d03e      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009f0e:	d937      	bls.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009f10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f14:	d0dd      	beq.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f1a:	d1be      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f1e:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f24:	0752      	lsls	r2, r2, #29
 8009f26:	d5a8      	bpl.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1a6      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f2c:	4b67      	ldr	r3, [pc, #412]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f2e:	486a      	ldr	r0, [pc, #424]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009f36:	40d8      	lsrs	r0, r3
 8009f38:	e7cc      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d146      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f3e:	6810      	ldr	r0, [r2, #0]
 8009f40:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009f44:	d0c6      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f46:	a801      	add	r0, sp, #4
 8009f48:	f7ff fe9e 	bl	8009c88 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f4c:	9802      	ldr	r0, [sp, #8]
 8009f4e:	e7c1      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f50:	4b5e      	ldr	r3, [pc, #376]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009f58:	d0bc      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f5a:	e7f4      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f5c:	4a5b      	ldr	r2, [pc, #364]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f5e:	e783      	b.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f60:	4b5a      	ldr	r3, [pc, #360]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009f68:	d0b4      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f6a:	a801      	add	r0, sp, #4
 8009f6c:	f7ff fde0 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	e7af      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f74:	4b55      	ldr	r3, [pc, #340]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009f7c:	d0aa      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f7e:	e798      	b.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0dc      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f88:	d08f      	beq.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009f8a:	e786      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f8c:	6810      	ldr	r0, [r2, #0]
 8009f8e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009f92:	d09f      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f94:	e7e9      	b.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009f96:	4a4d      	ldr	r2, [pc, #308]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009f98:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f9a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fa2:	d0f3      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009fa4:	d806      	bhi.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0c9      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fae:	f43f af7c 	beq.w	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009fb2:	e772      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009fb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fb8:	d08b      	beq.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fbe:	f43f af53 	beq.w	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009fc2:	e76a      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fc8:	d0a8      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009fca:	e766      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd0:	f43f af6b 	beq.w	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009fd4:	e761      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	483f      	ldr	r0, [pc, #252]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009fde:	40d8      	lsrs	r0, r3
 8009fe0:	e778      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009fe2:	4a3a      	ldr	r2, [pc, #232]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009fe4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fe6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009fea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fee:	d066      	beq.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009ff0:	d82f      	bhi.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff6:	d04f      	beq.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ffc:	d131      	bne.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ffe:	4b33      	ldr	r3, [pc, #204]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a006:	f43f af65 	beq.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a00a:	a801      	add	r0, sp, #4
 800a00c:	f7ff fd90 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a010:	9802      	ldr	r0, [sp, #8]
 800a012:	e75f      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 800a014:	482e      	ldr	r0, [pc, #184]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a016:	e75d      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a018:	4a2c      	ldr	r2, [pc, #176]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a01a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a01c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a024:	d02e      	beq.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800a026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a02a:	f43f af77 	beq.w	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f47f af33 	bne.w	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a034:	e739      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a036:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800a03a:	03d2      	lsls	r2, r2, #15
 800a03c:	d589      	bpl.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a044:	f43f af46 	beq.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a048:	a801      	add	r0, sp, #4
 800a04a:	f7ff fcc5 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a04e:	9803      	ldr	r0, [sp, #12]
 800a050:	e740      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800a052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a056:	d02a      	beq.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800a058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a05c:	f43f aeef 	beq.w	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800a060:	e71b      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800a062:	2b00      	cmp	r3, #0
 800a064:	f47f af19 	bne.w	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a068:	f7fe fd86 	bl	8008b78 <HAL_RCC_GetHCLKFreq>
 800a06c:	4b17      	ldr	r3, [pc, #92]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a06e:	4a1b      	ldr	r2, [pc, #108]	; (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a076:	5cd3      	ldrb	r3, [r2, r3]
 800a078:	f003 031f 	and.w	r3, r3, #31
 800a07c:	40d8      	lsrs	r0, r3
          break;
 800a07e:	e729      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 800a080:	4817      	ldr	r0, [pc, #92]	; (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a082:	e727      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a084:	6810      	ldr	r0, [r2, #0]
 800a086:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a08a:	f43f af23 	beq.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08e:	a801      	add	r0, sp, #4
 800a090:	f7ff fd4e 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a094:	9803      	ldr	r0, [sp, #12]
 800a096:	e71d      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a098:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a0a0:	f43f af18 	beq.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a4:	a801      	add	r0, sp, #4
 800a0a6:	f7ff fc97 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0aa:	9802      	ldr	r0, [sp, #8]
 800a0ac:	e712      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0ae:	4a07      	ldr	r2, [pc, #28]	; (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 800a0b0:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0b2:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800a0b4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a0b8:	bf18      	it	ne
 800a0ba:	4618      	movne	r0, r3
 800a0bc:	e70a      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0be:	6810      	ldr	r0, [r2, #0]
 800a0c0:	f010 0004 	ands.w	r0, r0, #4
 800a0c4:	f43f af06 	beq.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a0c8:	e730      	b.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a0ca:	bf00      	nop
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	017d7840 	.word	0x017d7840
 800a0d4:	00bb8000 	.word	0x00bb8000
 800a0d8:	03d09000 	.word	0x03d09000
 800a0dc:	080189ac 	.word	0x080189ac
 800a0e0:	003d0900 	.word	0x003d0900

0800a0e4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f000 809c 	beq.w	800a222 <HAL_TIM_Base_Init+0x13e>
{
 800a0ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d075      	beq.n	800a1e6 <HAL_TIM_Base_Init+0x102>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fa:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0fe:	494a      	ldr	r1, [pc, #296]	; (800a228 <HAL_TIM_Base_Init+0x144>)
 800a100:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a108:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800a10c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a10e:	fab1 f181 	clz	r1, r1
 800a112:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800a116:	d026      	beq.n	800a166 <HAL_TIM_Base_Init+0x82>
 800a118:	bb29      	cbnz	r1, 800a166 <HAL_TIM_Base_Init+0x82>
 800a11a:	4844      	ldr	r0, [pc, #272]	; (800a22c <HAL_TIM_Base_Init+0x148>)
 800a11c:	4282      	cmp	r2, r0
 800a11e:	d022      	beq.n	800a166 <HAL_TIM_Base_Init+0x82>
 800a120:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a124:	4282      	cmp	r2, r0
 800a126:	d01e      	beq.n	800a166 <HAL_TIM_Base_Init+0x82>
 800a128:	4f41      	ldr	r7, [pc, #260]	; (800a230 <HAL_TIM_Base_Init+0x14c>)
 800a12a:	4d42      	ldr	r5, [pc, #264]	; (800a234 <HAL_TIM_Base_Init+0x150>)
 800a12c:	1bd7      	subs	r7, r2, r7
 800a12e:	42aa      	cmp	r2, r5
 800a130:	fab7 f787 	clz	r7, r7
 800a134:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800a138:	d05a      	beq.n	800a1f0 <HAL_TIM_Base_Init+0x10c>
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	d158      	bne.n	800a1f0 <HAL_TIM_Base_Init+0x10c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a13e:	483e      	ldr	r0, [pc, #248]	; (800a238 <HAL_TIM_Base_Init+0x154>)
 800a140:	493e      	ldr	r1, [pc, #248]	; (800a23c <HAL_TIM_Base_Init+0x158>)
 800a142:	428a      	cmp	r2, r1
 800a144:	bf18      	it	ne
 800a146:	4282      	cmpne	r2, r0
 800a148:	d05d      	beq.n	800a206 <HAL_TIM_Base_Init+0x122>
 800a14a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a14e:	428a      	cmp	r2, r1
 800a150:	d059      	beq.n	800a206 <HAL_TIM_Base_Init+0x122>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a152:	69a1      	ldr	r1, [r4, #24]
 800a154:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a158:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a15a:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a15c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a15e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a160:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a162:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a164:	e023      	b.n	800a1ae <HAL_TIM_Base_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a166:	4f32      	ldr	r7, [pc, #200]	; (800a230 <HAL_TIM_Base_Init+0x14c>)
 800a168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a16c:	68a5      	ldr	r5, [r4, #8]
 800a16e:	1bd7      	subs	r7, r2, r7
 800a170:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a172:	fab7 f787 	clz	r7, r7
 800a176:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a178:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a17e:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a180:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a182:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a184:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a18a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800a18c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a18e:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a190:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a192:	b951      	cbnz	r1, 800a1aa <HAL_TIM_Base_Init+0xc6>
 800a194:	b94f      	cbnz	r7, 800a1aa <HAL_TIM_Base_Init+0xc6>
 800a196:	4928      	ldr	r1, [pc, #160]	; (800a238 <HAL_TIM_Base_Init+0x154>)
 800a198:	4b28      	ldr	r3, [pc, #160]	; (800a23c <HAL_TIM_Base_Init+0x158>)
 800a19a:	429a      	cmp	r2, r3
 800a19c:	bf18      	it	ne
 800a19e:	428a      	cmpne	r2, r1
 800a1a0:	d003      	beq.n	800a1aa <HAL_TIM_Base_Init+0xc6>
 800a1a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d101      	bne.n	800a1ae <HAL_TIM_Base_Init+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1aa:	6963      	ldr	r3, [r4, #20]
 800a1ac:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1ae:	2301      	movs	r3, #1
  return HAL_OK;
 800a1b0:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800a1b2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a1bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a1c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a1c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a1d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a1dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a1e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800a1e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a1ea:	f7f9 fe5d 	bl	8003ea8 <HAL_TIM_Base_MspInit>
 800a1ee:	e784      	b.n	800a0fa <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1f0:	4810      	ldr	r0, [pc, #64]	; (800a234 <HAL_TIM_Base_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a1f6:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1f8:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800a1fa:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1fe:	d0bb      	beq.n	800a178 <HAL_TIM_Base_Init+0x94>
 800a200:	2f00      	cmp	r7, #0
 800a202:	d1b9      	bne.n	800a178 <HAL_TIM_Base_Init+0x94>
 800a204:	e79b      	b.n	800a13e <HAL_TIM_Base_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a206:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a20c:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a20e:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a210:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a212:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a218:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800a21a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a21c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a21e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a220:	e7b9      	b.n	800a196 <HAL_TIM_Base_Init+0xb2>
    return HAL_ERROR;
 800a222:	2001      	movs	r0, #1
}
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	40010000 	.word	0x40010000
 800a22c:	40000400 	.word	0x40000400
 800a230:	40010400 	.word	0x40010400
 800a234:	40000c00 	.word	0x40000c00
 800a238:	40014000 	.word	0x40014000
 800a23c:	40014400 	.word	0x40014400

0800a240 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a240:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a244:	2b01      	cmp	r3, #1
 800a246:	d13e      	bne.n	800a2c6 <HAL_TIM_Base_Start+0x86>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a248:	6802      	ldr	r2, [r0, #0]
 800a24a:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <HAL_TIM_Base_Start+0x9c>)
 800a24c:	4924      	ldr	r1, [pc, #144]	; (800a2e0 <HAL_TIM_Base_Start+0xa0>)
 800a24e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a252:	bf18      	it	ne
 800a254:	429a      	cmpne	r2, r3
{
 800a256:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a258:	bf0c      	ite	eq
 800a25a:	2301      	moveq	r3, #1
 800a25c:	2300      	movne	r3, #0
 800a25e:	4c21      	ldr	r4, [pc, #132]	; (800a2e4 <HAL_TIM_Base_Start+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a260:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a262:	42a2      	cmp	r2, r4
 800a264:	bf08      	it	eq
 800a266:	f043 0301 	orreq.w	r3, r3, #1
 800a26a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  htim->State = HAL_TIM_STATE_BUSY;
 800a26e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a272:	428a      	cmp	r2, r1
 800a274:	bf08      	it	eq
 800a276:	f043 0301 	orreq.w	r3, r3, #1
 800a27a:	481b      	ldr	r0, [pc, #108]	; (800a2e8 <HAL_TIM_Base_Start+0xa8>)
 800a27c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a280:	42a2      	cmp	r2, r4
 800a282:	bf08      	it	eq
 800a284:	f043 0301 	orreq.w	r3, r3, #1
 800a288:	4282      	cmp	r2, r0
 800a28a:	bf08      	it	eq
 800a28c:	f043 0301 	orreq.w	r3, r3, #1
 800a290:	428a      	cmp	r2, r1
 800a292:	bf08      	it	eq
 800a294:	f043 0301 	orreq.w	r3, r3, #1
 800a298:	b933      	cbnz	r3, 800a2a8 <HAL_TIM_Base_Start+0x68>
 800a29a:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800a29e:	1a10      	subs	r0, r2, r0
 800a2a0:	fab0 f080 	clz	r0, r0
 800a2a4:	0940      	lsrs	r0, r0, #5
 800a2a6:	b198      	cbz	r0, 800a2d0 <HAL_TIM_Base_Start+0x90>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2a8:	6891      	ldr	r1, [r2, #8]
 800a2aa:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <HAL_TIM_Base_Start+0xac>)
 800a2ac:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	d00b      	beq.n	800a2ca <HAL_TIM_Base_Start+0x8a>
 800a2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b6:	d008      	beq.n	800a2ca <HAL_TIM_Base_Start+0x8a>
      __HAL_TIM_ENABLE(htim);
 800a2b8:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a2ba:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6013      	str	r3, [r2, #0]
}
 800a2c2:	bc30      	pop	{r4, r5}
 800a2c4:	4770      	bx	lr
    return HAL_ERROR;
 800a2c6:	2001      	movs	r0, #1
}
 800a2c8:	4770      	bx	lr
  return HAL_OK;
 800a2ca:	2000      	movs	r0, #0
}
 800a2cc:	bc30      	pop	{r4, r5}
 800a2ce:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a2d0:	6813      	ldr	r3, [r2, #0]
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e7f3      	b.n	800a2c2 <HAL_TIM_Base_Start+0x82>
 800a2da:	bf00      	nop
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40000800 	.word	0x40000800
 800a2e4:	40000400 	.word	0x40000400
 800a2e8:	40010400 	.word	0x40010400
 800a2ec:	00010007 	.word	0x00010007

0800a2f0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a2f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d141      	bne.n	800a37c <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2f8:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2fa:	4b25      	ldr	r3, [pc, #148]	; (800a390 <HAL_TIM_Base_Start_IT+0xa0>)
 800a2fc:	4925      	ldr	r1, [pc, #148]	; (800a394 <HAL_TIM_Base_Start_IT+0xa4>)
 800a2fe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a302:	bf18      	it	ne
 800a304:	429a      	cmpne	r2, r3
{
 800a306:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a308:	bf0c      	ite	eq
 800a30a:	2301      	moveq	r3, #1
 800a30c:	2300      	movne	r3, #0
 800a30e:	4c22      	ldr	r4, [pc, #136]	; (800a398 <HAL_TIM_Base_Start_IT+0xa8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a312:	42a2      	cmp	r2, r4
 800a314:	bf08      	it	eq
 800a316:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a31a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a31e:	4d1f      	ldr	r5, [pc, #124]	; (800a39c <HAL_TIM_Base_Start_IT+0xac>)
 800a320:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800a324:	428a      	cmp	r2, r1
 800a326:	bf08      	it	eq
 800a328:	f043 0301 	orreq.w	r3, r3, #1
 800a32c:	481c      	ldr	r0, [pc, #112]	; (800a3a0 <HAL_TIM_Base_Start_IT+0xb0>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a32e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a330:	42aa      	cmp	r2, r5
 800a332:	bf08      	it	eq
 800a334:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a338:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33c:	42a2      	cmp	r2, r4
 800a33e:	bf08      	it	eq
 800a340:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a344:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a346:	4282      	cmp	r2, r0
 800a348:	bf08      	it	eq
 800a34a:	f043 0301 	orreq.w	r3, r3, #1
 800a34e:	b933      	cbnz	r3, 800a35e <HAL_TIM_Base_Start_IT+0x6e>
 800a350:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800a354:	1a10      	subs	r0, r2, r0
 800a356:	fab0 f080 	clz	r0, r0
 800a35a:	0940      	lsrs	r0, r0, #5
 800a35c:	b198      	cbz	r0, 800a386 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a35e:	6891      	ldr	r1, [r2, #8]
 800a360:	4b10      	ldr	r3, [pc, #64]	; (800a3a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a362:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a364:	2b06      	cmp	r3, #6
 800a366:	d00b      	beq.n	800a380 <HAL_TIM_Base_Start_IT+0x90>
 800a368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36c:	d008      	beq.n	800a380 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800a36e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a370:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	6013      	str	r3, [r2, #0]
}
 800a378:	bc30      	pop	{r4, r5}
 800a37a:	4770      	bx	lr
    return HAL_ERROR;
 800a37c:	2001      	movs	r0, #1
}
 800a37e:	4770      	bx	lr
  return HAL_OK;
 800a380:	2000      	movs	r0, #0
}
 800a382:	bc30      	pop	{r4, r5}
 800a384:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a386:	6813      	ldr	r3, [r2, #0]
 800a388:	f043 0301 	orr.w	r3, r3, #1
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	e7f3      	b.n	800a378 <HAL_TIM_Base_Start_IT+0x88>
 800a390:	40010000 	.word	0x40010000
 800a394:	40000800 	.word	0x40000800
 800a398:	40000400 	.word	0x40000400
 800a39c:	40000c00 	.word	0x40000c00
 800a3a0:	40001800 	.word	0x40001800
 800a3a4:	00010007 	.word	0x00010007

0800a3a8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f000 80cf 	beq.w	800a54c <HAL_TIM_Encoder_Init+0x1a4>
{
 800a3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a3b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 80a5 	beq.w	800a50e <HAL_TIM_Encoder_Init+0x166>
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	4a61      	ldr	r2, [pc, #388]	; (800a550 <HAL_TIM_Encoder_Init+0x1a8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a3ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d2:	4960      	ldr	r1, [pc, #384]	; (800a554 <HAL_TIM_Encoder_Init+0x1ac>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3d4:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3d6:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3da:	ea02 0200 	and.w	r2, r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3de:	fab1 f181 	clz	r1, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3e2:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3e4:	ea4f 1151 	mov.w	r1, r1, lsr #5
  tmpcr1 = TIMx->CR1;
 800a3e8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3ea:	d02b      	beq.n	800a444 <HAL_TIM_Encoder_Init+0x9c>
 800a3ec:	bb51      	cbnz	r1, 800a444 <HAL_TIM_Encoder_Init+0x9c>
 800a3ee:	485a      	ldr	r0, [pc, #360]	; (800a558 <HAL_TIM_Encoder_Init+0x1b0>)
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	d027      	beq.n	800a444 <HAL_TIM_Encoder_Init+0x9c>
 800a3f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a3f8:	4283      	cmp	r3, r0
 800a3fa:	d023      	beq.n	800a444 <HAL_TIM_Encoder_Init+0x9c>
 800a3fc:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800a400:	4e56      	ldr	r6, [pc, #344]	; (800a55c <HAL_TIM_Encoder_Init+0x1b4>)
 800a402:	eba3 0c00 	sub.w	ip, r3, r0
 800a406:	42b3      	cmp	r3, r6
 800a408:	fabc fc8c 	clz	ip, ip
 800a40c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a410:	f000 8082 	beq.w	800a518 <HAL_TIM_Encoder_Init+0x170>
 800a414:	f1bc 0f00 	cmp.w	ip, #0
 800a418:	d17e      	bne.n	800a518 <HAL_TIM_Encoder_Init+0x170>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a41a:	4851      	ldr	r0, [pc, #324]	; (800a560 <HAL_TIM_Encoder_Init+0x1b8>)
 800a41c:	4951      	ldr	r1, [pc, #324]	; (800a564 <HAL_TIM_Encoder_Init+0x1bc>)
 800a41e:	428b      	cmp	r3, r1
 800a420:	bf18      	it	ne
 800a422:	4283      	cmpne	r3, r0
 800a424:	f000 8084 	beq.w	800a530 <HAL_TIM_Encoder_Init+0x188>
 800a428:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a42c:	428b      	cmp	r3, r1
 800a42e:	d07f      	beq.n	800a530 <HAL_TIM_Encoder_Init+0x188>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a430:	69a1      	ldr	r1, [r4, #24]
 800a432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a436:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a438:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800a43a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a43c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a43e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a440:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a442:	e027      	b.n	800a494 <HAL_TIM_Encoder_Init+0xec>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a444:	4848      	ldr	r0, [pc, #288]	; (800a568 <HAL_TIM_Encoder_Init+0x1c0>)
 800a446:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a44a:	68a6      	ldr	r6, [r4, #8]
 800a44c:	eba3 0c00 	sub.w	ip, r3, r0
 800a450:	4332      	orrs	r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a452:	fabc fc8c 	clz	ip, ip
 800a456:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a45a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a460:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	4332      	orrs	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a464:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a466:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a46c:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a46e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a470:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a472:	629e      	str	r6, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a474:	b961      	cbnz	r1, 800a490 <HAL_TIM_Encoder_Init+0xe8>
 800a476:	f1bc 0f00 	cmp.w	ip, #0
 800a47a:	d109      	bne.n	800a490 <HAL_TIM_Encoder_Init+0xe8>
 800a47c:	4938      	ldr	r1, [pc, #224]	; (800a560 <HAL_TIM_Encoder_Init+0x1b8>)
 800a47e:	4a39      	ldr	r2, [pc, #228]	; (800a564 <HAL_TIM_Encoder_Init+0x1bc>)
 800a480:	4293      	cmp	r3, r2
 800a482:	bf18      	it	ne
 800a484:	428b      	cmpne	r3, r1
 800a486:	d003      	beq.n	800a490 <HAL_TIM_Encoder_Init+0xe8>
 800a488:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d101      	bne.n	800a494 <HAL_TIM_Encoder_Init+0xec>
    TIMx->RCR = Structure->RepetitionCounter;
 800a490:	6962      	ldr	r2, [r4, #20]
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a494:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800a496:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a498:	69af      	ldr	r7, [r5, #24]
  return HAL_OK;
 800a49a:	2000      	movs	r0, #0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a49c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4a0:	68aa      	ldr	r2, [r5, #8]
  TIMx->EGR = TIM_EGR_UG;
 800a4a2:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4a4:	ea42 2907 	orr.w	r9, r2, r7, lsl #8
  tmpsmcr = htim->Instance->SMCR;
 800a4a8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4ac:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 = htim->Instance->CCMR1;
 800a4ae:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4b0:	4f2e      	ldr	r7, [pc, #184]	; (800a56c <HAL_TIM_Encoder_Init+0x1c4>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4b2:	ea4e 2202 	orr.w	r2, lr, r2, lsl #8
 800a4b6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4ba:	400f      	ands	r7, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4bc:	68e9      	ldr	r1, [r5, #12]
  tmpsmcr |= sConfig->EncoderMode;
 800a4be:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4c2:	4311      	orrs	r1, r2
  tmpccer = htim->Instance->CCER;
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4c6:	ea49 0707 	orr.w	r7, r9, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a4ca:	f8d5 9014 	ldr.w	r9, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a4ce:	f022 08aa 	bic.w	r8, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a4d2:	686a      	ldr	r2, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4d4:	4d26      	ldr	r5, [pc, #152]	; (800a570 <HAL_TIM_Encoder_Init+0x1c8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4d6:	ea41 310a 	orr.w	r1, r1, sl, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a4da:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800a4de:	ea4c 0c0e 	orr.w	ip, ip, lr
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4e2:	403d      	ands	r5, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a4e4:	ea42 0208 	orr.w	r2, r2, r8
  htim->Instance->SMCR = tmpsmcr;
 800a4e8:	f8c3 c008 	str.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4ec:	4329      	orrs	r1, r5
  htim->Instance->CCMR1 = tmpccmr1;
 800a4ee:	6199      	str	r1, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800a4f0:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4f2:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4f6:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4fa:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4fe:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a502:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a506:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    htim->Lock = HAL_UNLOCKED;
 800a50e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800a512:	f7f9 fd25 	bl	8003f60 <HAL_TIM_Encoder_MspInit>
 800a516:	e755      	b.n	800a3c4 <HAL_TIM_Encoder_Init+0x1c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a518:	4810      	ldr	r0, [pc, #64]	; (800a55c <HAL_TIM_Encoder_Init+0x1b4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a51a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a51e:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a520:	4283      	cmp	r3, r0
    tmpcr1 |= Structure->CounterMode;
 800a522:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a526:	d098      	beq.n	800a45a <HAL_TIM_Encoder_Init+0xb2>
 800a528:	f1bc 0f00 	cmp.w	ip, #0
 800a52c:	d195      	bne.n	800a45a <HAL_TIM_Encoder_Init+0xb2>
 800a52e:	e774      	b.n	800a41a <HAL_TIM_Encoder_Init+0x72>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a530:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a532:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a536:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a538:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a53a:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a53c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a53e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a542:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a544:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a546:	62de      	str	r6, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a548:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a54a:	e797      	b.n	800a47c <HAL_TIM_Encoder_Init+0xd4>
    return HAL_ERROR;
 800a54c:	2001      	movs	r0, #1
}
 800a54e:	4770      	bx	lr
 800a550:	fffebff8 	.word	0xfffebff8
 800a554:	40010000 	.word	0x40010000
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000c00 	.word	0x40000c00
 800a560:	40014000 	.word	0x40014000
 800a564:	40014400 	.word	0x40014400
 800a568:	40010400 	.word	0x40010400
 800a56c:	fffffcfc 	.word	0xfffffcfc
 800a570:	ffff0303 	.word	0xffff0303

0800a574 <HAL_TIM_Encoder_Start>:
{
 800a574:	b430      	push	{r4, r5}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a576:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a57a:	f890 403f 	ldrb.w	r4, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a57e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a582:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a584:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a588:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800a58a:	b9c1      	cbnz	r1, 800a5be <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d13d      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
 800a590:	2a01      	cmp	r2, #1
 800a592:	d13b      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a594:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a596:	2302      	movs	r3, #2
 800a598:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a59c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5a0:	6a13      	ldr	r3, [r2, #32]
 800a5a2:	f023 0301 	bic.w	r3, r3, #1
 800a5a6:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5a8:	6a13      	ldr	r3, [r2, #32]
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800a5b0:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a5b2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
}
 800a5b8:	bc30      	pop	{r4, r5}
  __HAL_TIM_ENABLE(htim);
 800a5ba:	6013      	str	r3, [r2, #0]
}
 800a5bc:	4770      	bx	lr
  else if (Channel == TIM_CHANNEL_2)
 800a5be:	2904      	cmp	r1, #4
 800a5c0:	b2e4      	uxtb	r4, r4
 800a5c2:	b2ed      	uxtb	r5, r5
 800a5c4:	d025      	beq.n	800a612 <HAL_TIM_Encoder_Start+0x9e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d120      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
 800a5ca:	2c01      	cmp	r4, #1
 800a5cc:	d11e      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5ce:	2a01      	cmp	r2, #1
 800a5d0:	d11c      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
 800a5d2:	2d01      	cmp	r5, #1
 800a5d4:	d11a      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5d6:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a5d8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5de:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5e2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5e6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a5ea:	6a13      	ldr	r3, [r2, #32]
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5f2:	6a13      	ldr	r3, [r2, #32]
 800a5f4:	f043 0301 	orr.w	r3, r3, #1
 800a5f8:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800a5fa:	6a13      	ldr	r3, [r2, #32]
 800a5fc:	f023 0310 	bic.w	r3, r3, #16
 800a600:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a602:	6a13      	ldr	r3, [r2, #32]
 800a604:	f043 0310 	orr.w	r3, r3, #16
 800a608:	6213      	str	r3, [r2, #32]
}
 800a60a:	e7d1      	b.n	800a5b0 <HAL_TIM_Encoder_Start+0x3c>
      return HAL_ERROR;
 800a60c:	2001      	movs	r0, #1
}
 800a60e:	bc30      	pop	{r4, r5}
 800a610:	4770      	bx	lr
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a612:	2c01      	cmp	r4, #1
 800a614:	d1fa      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
 800a616:	2d01      	cmp	r5, #1
 800a618:	d1f8      	bne.n	800a60c <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a61a:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a61c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a61e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a622:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a626:	e7e8      	b.n	800a5fa <HAL_TIM_Encoder_Start+0x86>

0800a628 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a628:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	f000 8081 	beq.w	800a734 <HAL_TIM_ConfigClockSource+0x10c>
 800a632:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a634:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800a636:	2001      	movs	r0, #1
{
 800a638:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 800a63a:	6815      	ldr	r5, [r2, #0]
  __HAL_LOCK(htim);
 800a63c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a644:	4c5a      	ldr	r4, [pc, #360]	; (800a7b0 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800a646:	68ae      	ldr	r6, [r5, #8]
  switch (sClockSourceConfig->ClockSource)
 800a648:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a64a:	4034      	ands	r4, r6
  switch (sClockSourceConfig->ClockSource)
 800a64c:	2b70      	cmp	r3, #112	; 0x70
  htim->Instance->SMCR = tmpsmcr;
 800a64e:	60ac      	str	r4, [r5, #8]
  switch (sClockSourceConfig->ClockSource)
 800a650:	f000 809c 	beq.w	800a78c <HAL_TIM_ConfigClockSource+0x164>
 800a654:	d825      	bhi.n	800a6a2 <HAL_TIM_ConfigClockSource+0x7a>
 800a656:	2b50      	cmp	r3, #80	; 0x50
 800a658:	d06e      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x110>
 800a65a:	d939      	bls.n	800a6d0 <HAL_TIM_ConfigClockSource+0xa8>
 800a65c:	2b60      	cmp	r3, #96	; 0x60
 800a65e:	d118      	bne.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a660:	6a2b      	ldr	r3, [r5, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a662:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a664:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a666:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a66a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a66c:	622b      	str	r3, [r5, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a66e:	69ac      	ldr	r4, [r5, #24]
  tmpccer = TIMx->CCER;
 800a670:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a672:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpsmcr &= ~TIM_SMCR_TS;
 800a676:	4b4f      	ldr	r3, [pc, #316]	; (800a7b4 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a678:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a67c:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a680:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a684:	61ac      	str	r4, [r5, #24]
  TIMx->CCER = tmpccer;
 800a686:	6229      	str	r1, [r5, #32]
  tmpsmcr = TIMx->SMCR;
 800a688:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a68a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a68c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a690:	60ab      	str	r3, [r5, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a692:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a694:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a696:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a69a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a69e:	bcf0      	pop	{r4, r5, r6, r7}
 800a6a0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a6:	d060      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0x142>
 800a6a8:	d933      	bls.n	800a712 <HAL_TIM_ConfigClockSource+0xea>
 800a6aa:	4943      	ldr	r1, [pc, #268]	; (800a7b8 <HAL_TIM_ConfigClockSource+0x190>)
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	d006      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
 800a6b0:	d929      	bls.n	800a706 <HAL_TIM_ConfigClockSource+0xde>
 800a6b2:	4942      	ldr	r1, [pc, #264]	; (800a7bc <HAL_TIM_ConfigClockSource+0x194>)
 800a6b4:	428b      	cmp	r3, r1
 800a6b6:	d002      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
 800a6b8:	3110      	adds	r1, #16
 800a6ba:	428b      	cmp	r3, r1
 800a6bc:	d1e9      	bne.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800a6be:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c0:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6c2:	493c      	ldr	r1, [pc, #240]	; (800a7b4 <HAL_TIM_ConfigClockSource+0x18c>)
 800a6c4:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800a6cc:	60ab      	str	r3, [r5, #8]
}
 800a6ce:	e7e0      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a6d0:	2b40      	cmp	r3, #64	; 0x40
 800a6d2:	d123      	bne.n	800a71c <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800a6d4:	6a2e      	ldr	r6, [r5, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6d8:	6a2b      	ldr	r3, [r5, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6da:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6dc:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6e4:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a6e6:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e8:	622b      	str	r3, [r5, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6ea:	69a9      	ldr	r1, [r5, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6ec:	4b31      	ldr	r3, [pc, #196]	; (800a7b4 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ee:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6f2:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a6f6:	61a9      	str	r1, [r5, #24]
  TIMx->CCER = tmpccer;
 800a6f8:	622c      	str	r4, [r5, #32]
  tmpsmcr = TIMx->SMCR;
 800a6fa:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6fc:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6fe:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a702:	60ab      	str	r3, [r5, #8]
}
 800a704:	e7c5      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a706:	f023 0110 	bic.w	r1, r3, #16
 800a70a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a70e:	d1c0      	bne.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
 800a710:	e7d5      	b.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800a712:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800a716:	bf18      	it	ne
 800a718:	2001      	movne	r0, #1
 800a71a:	e7ba      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a71c:	d8b9      	bhi.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
 800a71e:	2b20      	cmp	r3, #32
 800a720:	d0cd      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
 800a722:	d903      	bls.n	800a72c <HAL_TIM_ConfigClockSource+0x104>
 800a724:	2b30      	cmp	r3, #48	; 0x30
 800a726:	d0ca      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
 800a728:	2001      	movs	r0, #1
 800a72a:	e7b2      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
 800a72c:	f033 0110 	bics.w	r1, r3, #16
 800a730:	d1af      	bne.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
 800a732:	e7c4      	b.n	800a6be <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800a734:	2002      	movs	r0, #2
}
 800a736:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800a738:	6a2e      	ldr	r6, [r5, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a73a:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a73c:	6a2b      	ldr	r3, [r5, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73e:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a740:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a744:	f023 0301 	bic.w	r3, r3, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a748:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a74a:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a74c:	622b      	str	r3, [r5, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a74e:	69a9      	ldr	r1, [r5, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a750:	4b18      	ldr	r3, [pc, #96]	; (800a7b4 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a752:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a756:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a75a:	61a9      	str	r1, [r5, #24]
  TIMx->CCER = tmpccer;
 800a75c:	622c      	str	r4, [r5, #32]
  tmpsmcr = TIMx->SMCR;
 800a75e:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a760:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a762:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a766:	60ab      	str	r3, [r5, #8]
}
 800a768:	e793      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a76a:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a76c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a76e:	684e      	ldr	r6, [r1, #4]
 800a770:	68cc      	ldr	r4, [r1, #12]
 800a772:	4333      	orrs	r3, r6
  tmpsmcr = TIMx->SMCR;
 800a774:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a776:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a77a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a77e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a780:	60ab      	str	r3, [r5, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a782:	68ab      	ldr	r3, [r5, #8]
 800a784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a788:	60ab      	str	r3, [r5, #8]
      break;
 800a78a:	e782      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a78c:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a78e:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a790:	684e      	ldr	r6, [r1, #4]
 800a792:	68cc      	ldr	r4, [r1, #12]
 800a794:	4333      	orrs	r3, r6
  tmpsmcr = TIMx->SMCR;
 800a796:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a798:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a79c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7a0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a7a2:	60ab      	str	r3, [r5, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a7a4:	68ab      	ldr	r3, [r5, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a7aa:	60ab      	str	r3, [r5, #8]
      break;
 800a7ac:	e771      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x6a>
 800a7ae:	bf00      	nop
 800a7b0:	ffce0088 	.word	0xffce0088
 800a7b4:	ffcfff8f 	.word	0xffcfff8f
 800a7b8:	00100020 	.word	0x00100020
 800a7bc:	00100030 	.word	0x00100030

0800a7c0 <HAL_TIM_OC_DelayElapsedCallback>:
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop

0800a7c4 <HAL_TIM_IC_CaptureCallback>:
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop

0800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop

0800a7cc <HAL_TIM_TriggerCallback>:
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop

0800a7d0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7d0:	6803      	ldr	r3, [r0, #0]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	0791      	lsls	r1, r2, #30
{
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7da:	d502      	bpl.n	800a7e2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	0792      	lsls	r2, r2, #30
 800a7e0:	d468      	bmi.n	800a8b4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	0752      	lsls	r2, r2, #29
 800a7e6:	d502      	bpl.n	800a7ee <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7e8:	68da      	ldr	r2, [r3, #12]
 800a7ea:	0750      	lsls	r0, r2, #29
 800a7ec:	d44f      	bmi.n	800a88e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	0711      	lsls	r1, r2, #28
 800a7f2:	d502      	bpl.n	800a7fa <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	0712      	lsls	r2, r2, #28
 800a7f8:	d437      	bmi.n	800a86a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	06d0      	lsls	r0, r2, #27
 800a7fe:	d502      	bpl.n	800a806 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	06d1      	lsls	r1, r2, #27
 800a804:	d41e      	bmi.n	800a844 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	07d2      	lsls	r2, r2, #31
 800a80a:	d502      	bpl.n	800a812 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a80c:	68da      	ldr	r2, [r3, #12]
 800a80e:	07d0      	lsls	r0, r2, #31
 800a810:	d469      	bmi.n	800a8e6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	0611      	lsls	r1, r2, #24
 800a816:	d502      	bpl.n	800a81e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a818:	68da      	ldr	r2, [r3, #12]
 800a81a:	0612      	lsls	r2, r2, #24
 800a81c:	d46b      	bmi.n	800a8f6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	05d0      	lsls	r0, r2, #23
 800a822:	d502      	bpl.n	800a82a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	0611      	lsls	r1, r2, #24
 800a828:	d46d      	bmi.n	800a906 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a82a:	691a      	ldr	r2, [r3, #16]
 800a82c:	0652      	lsls	r2, r2, #25
 800a82e:	d502      	bpl.n	800a836 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	0650      	lsls	r0, r2, #25
 800a834:	d46f      	bmi.n	800a916 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a836:	691a      	ldr	r2, [r3, #16]
 800a838:	0691      	lsls	r1, r2, #26
 800a83a:	d502      	bpl.n	800a842 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	0692      	lsls	r2, r2, #26
 800a840:	d449      	bmi.n	800a8d6 <HAL_TIM_IRQHandler+0x106>
}
 800a842:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a844:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a848:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a84a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a84c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a84e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a856:	d16f      	bne.n	800a938 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a858:	f7ff ffb2 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7ff ffb3 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a862:	2200      	movs	r2, #0
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	7722      	strb	r2, [r4, #28]
 800a868:	e7cd      	b.n	800a806 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a86a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a86e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a870:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a872:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a874:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	079b      	lsls	r3, r3, #30
 800a87a:	d15a      	bne.n	800a932 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87c:	f7ff ffa0 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a880:	4620      	mov	r0, r4
 800a882:	f7ff ffa1 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a886:	2200      	movs	r2, #0
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	7722      	strb	r2, [r4, #28]
 800a88c:	e7b5      	b.n	800a7fa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a88e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a892:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a894:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a896:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a898:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a8a0:	d144      	bne.n	800a92c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a2:	f7ff ff8d 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff ff8e 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	7722      	strb	r2, [r4, #28]
 800a8b2:	e79c      	b.n	800a7ee <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8b4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8b8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8ba:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8bc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	0799      	lsls	r1, r3, #30
 800a8c2:	d130      	bne.n	800a926 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c4:	f7ff ff7c 	bl	800a7c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7ff ff7d 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	7722      	strb	r2, [r4, #28]
 800a8d4:	e785      	b.n	800a7e2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a8da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8dc:	611a      	str	r2, [r3, #16]
}
 800a8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a8e2:	f000 b889 	b.w	800a9f8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8e6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8ee:	f7f6 f91b 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	e78d      	b.n	800a812 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a8fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a8fe:	f000 f87d 	bl	800a9fc <HAL_TIMEx_BreakCallback>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	e78b      	b.n	800a81e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a906:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a90a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a90c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a90e:	f000 f877 	bl	800aa00 <HAL_TIMEx_Break2Callback>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	e789      	b.n	800a82a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a916:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a91a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a91c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a91e:	f7ff ff55 	bl	800a7cc <HAL_TIM_TriggerCallback>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	e787      	b.n	800a836 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a926:	f7ff ff4d 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a92a:	e7d0      	b.n	800a8ce <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a92c:	f7ff ff4a 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a930:	e7bc      	b.n	800a8ac <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a932:	f7ff ff47 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a936:	e7a6      	b.n	800a886 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a938:	f7ff ff44 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a93c:	e791      	b.n	800a862 <HAL_TIM_IRQHandler+0x92>
 800a93e:	bf00      	nop

0800a940 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a940:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d048      	beq.n	800a9da <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a948:	4602      	mov	r2, r0
 800a94a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a94c:	6813      	ldr	r3, [r2, #0]
{
 800a94e:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a950:	4d23      	ldr	r5, [pc, #140]	; (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a952:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a956:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a958:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a95a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a95c:	d026      	beq.n	800a9ac <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800a95e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a962:	42ab      	cmp	r3, r5
 800a964:	d022      	beq.n	800a9ac <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a966:	4d1f      	ldr	r5, [pc, #124]	; (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a968:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a96c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a96e:	42ab      	cmp	r3, r5
 800a970:	bf18      	it	ne
 800a972:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a976:	4f1c      	ldr	r7, [pc, #112]	; (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a978:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a97c:	4e1b      	ldr	r6, [pc, #108]	; (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800a97e:	bf0c      	ite	eq
 800a980:	2501      	moveq	r5, #1
 800a982:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 800a984:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a986:	42bb      	cmp	r3, r7
 800a988:	bf08      	it	eq
 800a98a:	f045 0501 	orreq.w	r5, r5, #1
 800a98e:	42b3      	cmp	r3, r6
 800a990:	bf14      	ite	ne
 800a992:	4628      	movne	r0, r5
 800a994:	f045 0001 	orreq.w	r0, r5, #1
 800a998:	4d15      	ldr	r5, [pc, #84]	; (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a99a:	42ab      	cmp	r3, r5
 800a99c:	bf08      	it	eq
 800a99e:	f040 0001 	orreq.w	r0, r0, #1
 800a9a2:	b960      	cbnz	r0, 800a9be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a9a4:	4813      	ldr	r0, [pc, #76]	; (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a9a6:	4283      	cmp	r3, r0
 800a9a8:	d009      	beq.n	800a9be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a9aa:	e00d      	b.n	800a9c8 <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9ac:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9b0:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9b4:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9b6:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9ba:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a9bc:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9be:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9c4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9c6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a9c8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a9ca:	2101      	movs	r1, #1

  return HAL_OK;
 800a9cc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a9ce:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a9d2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a9d6:	bcf0      	pop	{r4, r5, r6, r7}
 800a9d8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a9da:	2002      	movs	r0, #2
}
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40000800 	.word	0x40000800
 800a9ec:	40000c00 	.word	0x40000c00
 800a9f0:	40001800 	.word	0x40001800
 800a9f4:	40014000 	.word	0x40014000

0800a9f8 <HAL_TIMEx_CommutCallback>:
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop

0800a9fc <HAL_TIMEx_BreakCallback>:
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop

0800aa00 <HAL_TIMEx_Break2Callback>:
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop

0800aa04 <HAL_UART_TxCpltCallback>:
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop

0800aa08 <HAL_UART_ErrorCallback>:
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop

0800aa0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa16:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa1a:	f7ff fff5 	bl	800aa08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa1e:	bd08      	pop	{r3, pc}

0800aa20 <HAL_UARTEx_RxEventCallback>:
}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop

0800aa24 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa24:	6803      	ldr	r3, [r0, #0]
{
 800aa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa2a:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa2c:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa30:	681d      	ldr	r5, [r3, #0]
{
 800aa32:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800aa34:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa36:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800aa38:	f000 811b 	beq.w	800ac72 <HAL_UART_IRQHandler+0x24e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa3c:	48b2      	ldr	r0, [pc, #712]	; (800ad08 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa3e:	4eb3      	ldr	r6, [pc, #716]	; (800ad0c <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa40:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa42:	402e      	ands	r6, r5
 800aa44:	4306      	orrs	r6, r0
 800aa46:	f040 8087 	bne.w	800ab58 <HAL_UART_IRQHandler+0x134>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa4a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800aa4c:	2801      	cmp	r0, #1
 800aa4e:	d023      	beq.n	800aa98 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa50:	02d7      	lsls	r7, r2, #11
 800aa52:	d502      	bpl.n	800aa5a <HAL_UART_IRQHandler+0x36>
 800aa54:	024e      	lsls	r6, r1, #9
 800aa56:	f100 8134 	bmi.w	800acc2 <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa5a:	0610      	lsls	r0, r2, #24
 800aa5c:	d506      	bpl.n	800aa6c <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa5e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa62:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa66:	4301      	orrs	r1, r0
 800aa68:	f040 8123 	bne.w	800acb2 <HAL_UART_IRQHandler+0x28e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa6c:	0657      	lsls	r7, r2, #25
 800aa6e:	d565      	bpl.n	800ab3c <HAL_UART_IRQHandler+0x118>
 800aa70:	066e      	lsls	r6, r5, #25
 800aa72:	d563      	bpl.n	800ab3c <HAL_UART_IRQHandler+0x118>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa74:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	e843 2100 	strex	r1, r2, [r3]
 800aa80:	2900      	cmp	r1, #0
 800aa82:	d1f7      	bne.n	800aa74 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa84:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa86:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa88:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800aa8a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800aa8e:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800aa90:	f7ff ffb8 	bl	800aa04 <HAL_UART_TxCpltCallback>
}
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa98:	06d6      	lsls	r6, r2, #27
 800aa9a:	d5d9      	bpl.n	800aa50 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa9c:	06e8      	lsls	r0, r5, #27
 800aa9e:	d5d7      	bpl.n	800aa50 <HAL_UART_IRQHandler+0x2c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	0652      	lsls	r2, r2, #25
 800aaa8:	f140 8136 	bpl.w	800ad18 <HAL_UART_IRQHandler+0x2f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aaac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aaae:	6801      	ldr	r1, [r0, #0]
 800aab0:	684a      	ldr	r2, [r1, #4]
 800aab2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	d0ed      	beq.n	800aa94 <HAL_UART_IRQHandler+0x70>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aab8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800aabc:	4291      	cmp	r1, r2
 800aabe:	d9e9      	bls.n	800aa94 <HAL_UART_IRQHandler+0x70>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aac0:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800aac2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aac6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800aaca:	d02f      	beq.n	800ab2c <HAL_UART_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	e843 2100 	strex	r1, r2, [r3]
 800aad8:	2900      	cmp	r1, #0
 800aada:	d1f7      	bne.n	800aacc <HAL_UART_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	f103 0208 	add.w	r2, r3, #8
 800aae0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	f103 0508 	add.w	r5, r3, #8
 800aaec:	e845 2100 	strex	r1, r2, [r5]
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d1f3      	bne.n	800aadc <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	f103 0208 	add.w	r2, r3, #8
 800aaf8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aafc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	f103 0508 	add.w	r5, r3, #8
 800ab04:	e845 2100 	strex	r1, r2, [r5]
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	d1f3      	bne.n	800aaf4 <HAL_UART_IRQHandler+0xd0>
          huart->RxState = HAL_UART_STATE_READY;
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab12:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	e843 2100 	strex	r1, r2, [r3]
 800ab20:	2900      	cmp	r1, #0
 800ab22:	d1f7      	bne.n	800ab14 <HAL_UART_IRQHandler+0xf0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab24:	f7fb fd7c 	bl	8006620 <HAL_DMA_Abort>
 800ab28:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab2c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ab30:	4620      	mov	r0, r4
 800ab32:	1ac9      	subs	r1, r1, r3
 800ab34:	b289      	uxth	r1, r1
 800ab36:	f7ff ff73 	bl	800aa20 <HAL_UARTEx_RxEventCallback>
 800ab3a:	e7ab      	b.n	800aa94 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab3c:	0210      	lsls	r0, r2, #8
 800ab3e:	d502      	bpl.n	800ab46 <HAL_UART_IRQHandler+0x122>
 800ab40:	0069      	lsls	r1, r5, #1
 800ab42:	f100 80db 	bmi.w	800acfc <HAL_UART_IRQHandler+0x2d8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab46:	01d3      	lsls	r3, r2, #7
 800ab48:	d5a4      	bpl.n	800aa94 <HAL_UART_IRQHandler+0x70>
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	daa2      	bge.n	800aa94 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab4e:	4620      	mov	r0, r4
}
 800ab50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab54:	f000 bcfc 	b.w	800b550 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab58:	07d6      	lsls	r6, r2, #31
 800ab5a:	d509      	bpl.n	800ab70 <HAL_UART_IRQHandler+0x14c>
 800ab5c:	05ef      	lsls	r7, r5, #23
 800ab5e:	d507      	bpl.n	800ab70 <HAL_UART_IRQHandler+0x14c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab60:	2601      	movs	r6, #1
 800ab62:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab64:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ab68:	f046 0601 	orr.w	r6, r6, #1
 800ab6c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab70:	0796      	lsls	r6, r2, #30
 800ab72:	f140 808f 	bpl.w	800ac94 <HAL_UART_IRQHandler+0x270>
 800ab76:	07cf      	lsls	r7, r1, #31
 800ab78:	d50a      	bpl.n	800ab90 <HAL_UART_IRQHandler+0x16c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab7a:	2602      	movs	r6, #2
 800ab7c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab7e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ab82:	f046 0604 	orr.w	r6, r6, #4
 800ab86:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab8a:	0756      	lsls	r6, r2, #29
 800ab8c:	f100 8088 	bmi.w	800aca0 <HAL_UART_IRQHandler+0x27c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab90:	0717      	lsls	r7, r2, #28
 800ab92:	d50b      	bpl.n	800abac <HAL_UART_IRQHandler+0x188>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab94:	f005 0620 	and.w	r6, r5, #32
 800ab98:	4330      	orrs	r0, r6
 800ab9a:	d007      	beq.n	800abac <HAL_UART_IRQHandler+0x188>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab9c:	2008      	movs	r0, #8
 800ab9e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aba0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800aba4:	f040 0008 	orr.w	r0, r0, #8
 800aba8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abac:	0516      	lsls	r6, r2, #20
 800abae:	d50a      	bpl.n	800abc6 <HAL_UART_IRQHandler+0x1a2>
 800abb0:	0168      	lsls	r0, r5, #5
 800abb2:	d508      	bpl.n	800abc6 <HAL_UART_IRQHandler+0x1a2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800abb8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800abbe:	f040 0020 	orr.w	r0, r0, #32
 800abc2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800abca:	2800      	cmp	r0, #0
 800abcc:	f43f af62 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abd0:	0692      	lsls	r2, r2, #26
 800abd2:	d50b      	bpl.n	800abec <HAL_UART_IRQHandler+0x1c8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abd4:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abd8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800abdc:	ea55 0201 	orrs.w	r2, r5, r1
 800abe0:	d004      	beq.n	800abec <HAL_UART_IRQHandler+0x1c8>
        if (huart->RxISR != NULL)
 800abe2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800abe4:	b112      	cbz	r2, 800abec <HAL_UART_IRQHandler+0x1c8>
          huart->RxISR(huart);
 800abe6:	4620      	mov	r0, r4
 800abe8:	4790      	blx	r2
 800abea:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800abec:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf0:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abf2:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800abfa:	4315      	orrs	r5, r2
 800abfc:	f000 80c0 	beq.w	800ad80 <HAL_UART_IRQHandler+0x35c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	e843 2100 	strex	r1, r2, [r3]
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d1f7      	bne.n	800ac00 <HAL_UART_IRQHandler+0x1dc>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac10:	483f      	ldr	r0, [pc, #252]	; (800ad10 <HAL_UART_IRQHandler+0x2ec>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	f103 0208 	add.w	r2, r3, #8
 800ac16:	e852 2f00 	ldrex	r2, [r2]
 800ac1a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	f103 0508 	add.w	r5, r3, #8
 800ac20:	e845 2100 	strex	r1, r2, [r5]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d1f4      	bne.n	800ac12 <HAL_UART_IRQHandler+0x1ee>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800ac2a:	2a01      	cmp	r2, #1
 800ac2c:	d051      	beq.n	800acd2 <HAL_UART_IRQHandler+0x2ae>
  huart->RxState = HAL_UART_STATE_READY;
 800ac2e:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac30:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800ac32:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac36:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac38:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800ac3a:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3c:	064f      	lsls	r7, r1, #25
 800ac3e:	d559      	bpl.n	800acf4 <HAL_UART_IRQHandler+0x2d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	f103 0208 	add.w	r2, r3, #8
 800ac44:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	f103 0008 	add.w	r0, r3, #8
 800ac50:	e840 2100 	strex	r1, r2, [r0]
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d1f3      	bne.n	800ac40 <HAL_UART_IRQHandler+0x21c>
          if (huart->hdmarx != NULL)
 800ac58:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d04a      	beq.n	800acf4 <HAL_UART_IRQHandler+0x2d0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac5e:	4b2d      	ldr	r3, [pc, #180]	; (800ad14 <HAL_UART_IRQHandler+0x2f0>)
 800ac60:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac62:	f7fb fe5d 	bl	8006920 <HAL_DMA_Abort_IT>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f43f af14 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ac6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ac70:	e00d      	b.n	800ac8e <HAL_UART_IRQHandler+0x26a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac72:	0697      	lsls	r7, r2, #26
 800ac74:	f57f aee9 	bpl.w	800aa4a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac78:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac7c:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800ac80:	433e      	orrs	r6, r7
 800ac82:	f43f aee2 	beq.w	800aa4a <HAL_UART_IRQHandler+0x26>
      if (huart->RxISR != NULL)
 800ac86:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f43f af03 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
}
 800ac8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac92:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac94:	0757      	lsls	r7, r2, #29
 800ac96:	f57f af7b 	bpl.w	800ab90 <HAL_UART_IRQHandler+0x16c>
 800ac9a:	07ce      	lsls	r6, r1, #31
 800ac9c:	f57f af78 	bpl.w	800ab90 <HAL_UART_IRQHandler+0x16c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aca0:	2604      	movs	r6, #4
 800aca2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aca4:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800aca8:	f046 0602 	orr.w	r6, r6, #2
 800acac:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800acb0:	e76e      	b.n	800ab90 <HAL_UART_IRQHandler+0x16c>
    if (huart->TxISR != NULL)
 800acb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f43f aeed 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 800acba:	4620      	mov	r0, r4
}
 800acbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800acc0:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800acc6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acc8:	621a      	str	r2, [r3, #32]
}
 800acca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800acce:	f000 bc3d 	b.w	800b54c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acd6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	e843 2100 	strex	r1, r2, [r3]
 800acde:	2900      	cmp	r1, #0
 800ace0:	d0a5      	beq.n	800ac2e <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	e853 2f00 	ldrex	r2, [r3]
 800ace6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acea:	e843 2100 	strex	r1, r2, [r3]
 800acee:	2900      	cmp	r1, #0
 800acf0:	d1ef      	bne.n	800acd2 <HAL_UART_IRQHandler+0x2ae>
 800acf2:	e79c      	b.n	800ac2e <HAL_UART_IRQHandler+0x20a>
            HAL_UART_ErrorCallback(huart);
 800acf4:	4620      	mov	r0, r4
 800acf6:	f7ff fe87 	bl	800aa08 <HAL_UART_ErrorCallback>
 800acfa:	e6cb      	b.n	800aa94 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800acfc:	4620      	mov	r0, r4
}
 800acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad02:	f000 bc27 	b.w	800b554 <HAL_UARTEx_TxFifoEmptyCallback>
 800ad06:	bf00      	nop
 800ad08:	10000001 	.word	0x10000001
 800ad0c:	04000120 	.word	0x04000120
 800ad10:	effffffe 	.word	0xeffffffe
 800ad14:	0800aa0d 	.word	0x0800aa0d
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad18:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800ad1c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800ad20:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad24:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800ad26:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad28:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	f43f aeb2 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
 800ad30:	2900      	cmp	r1, #0
 800ad32:	f43f aeaf 	beq.w	800aa94 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	e843 2000 	strex	r0, r2, [r3]
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d1f7      	bne.n	800ad36 <HAL_UART_IRQHandler+0x312>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad46:	4d11      	ldr	r5, [pc, #68]	; (800ad8c <HAL_UART_IRQHandler+0x368>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	f103 0208 	add.w	r2, r3, #8
 800ad4c:	e852 2f00 	ldrex	r2, [r2]
 800ad50:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	f103 0608 	add.w	r6, r3, #8
 800ad56:	e846 2000 	strex	r0, r2, [r6]
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d1f4      	bne.n	800ad48 <HAL_UART_IRQHandler+0x324>
        huart->RxState = HAL_UART_STATE_READY;
 800ad5e:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ad60:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800ad62:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad66:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad6c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad70:	e843 2000 	strex	r0, r2, [r3]
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1f7      	bne.n	800ad68 <HAL_UART_IRQHandler+0x344>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7ff fe51 	bl	800aa20 <HAL_UARTEx_RxEventCallback>
 800ad7e:	e689      	b.n	800aa94 <HAL_UART_IRQHandler+0x70>
        HAL_UART_ErrorCallback(huart);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7ff fe41 	bl	800aa08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad86:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800ad8a:	e683      	b.n	800aa94 <HAL_UART_IRQHandler+0x70>
 800ad8c:	effffffe 	.word	0xeffffffe

0800ad90 <UART_SetConfig>:
{
 800ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad92:	6883      	ldr	r3, [r0, #8]
{
 800ad94:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad96:	49c9      	ldr	r1, [pc, #804]	; (800b0bc <UART_SetConfig+0x32c>)
{
 800ad98:	b087      	sub	sp, #28
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad9a:	68e7      	ldr	r7, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad9c:	4dc8      	ldr	r5, [pc, #800]	; (800b0c0 <UART_SetConfig+0x330>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad9e:	e9d0 2604 	ldrd	r2, r6, [r0, #16]
 800ada2:	431a      	orrs	r2, r3
  if (UART_INSTANCE_LOWPOWER(huart))
 800ada4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ada6:	69c0      	ldr	r0, [r0, #28]
 800ada8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adaa:	681e      	ldr	r6, [r3, #0]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adac:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adae:	ea01 0106 	and.w	r1, r1, r6
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adb2:	ea42 0200 	orr.w	r2, r2, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adb6:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adb8:	ea42 0201 	orr.w	r2, r2, r1
 800adbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800adc4:	ea42 0207 	orr.w	r2, r2, r7
 800adc8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adca:	f000 80e1 	beq.w	800af90 <UART_SetConfig+0x200>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adce:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800add0:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add2:	49bc      	ldr	r1, [pc, #752]	; (800b0c4 <UART_SetConfig+0x334>)
    tmpreg |= huart->Init.OneBitSampling;
 800add4:	4332      	orrs	r2, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 800add6:	4ebc      	ldr	r6, [pc, #752]	; (800b0c8 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add8:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adda:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800addc:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adde:	ea42 0201 	orr.w	r2, r2, r1
 800ade2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ade4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade6:	f022 020f 	bic.w	r2, r2, #15
 800adea:	ea42 0205 	orr.w	r2, r2, r5
 800adee:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adf0:	d023      	beq.n	800ae3a <UART_SetConfig+0xaa>
 800adf2:	4ab6      	ldr	r2, [pc, #728]	; (800b0cc <UART_SetConfig+0x33c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d075      	beq.n	800aee4 <UART_SetConfig+0x154>
 800adf8:	4ab5      	ldr	r2, [pc, #724]	; (800b0d0 <UART_SetConfig+0x340>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	f000 81bc 	beq.w	800b178 <UART_SetConfig+0x3e8>
 800ae00:	4ab4      	ldr	r2, [pc, #720]	; (800b0d4 <UART_SetConfig+0x344>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	f000 81e8 	beq.w	800b1d8 <UART_SetConfig+0x448>
 800ae08:	4ab3      	ldr	r2, [pc, #716]	; (800b0d8 <UART_SetConfig+0x348>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	f000 81a4 	beq.w	800b158 <UART_SetConfig+0x3c8>
 800ae10:	4ab2      	ldr	r2, [pc, #712]	; (800b0dc <UART_SetConfig+0x34c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	f000 81ea 	beq.w	800b1ec <UART_SetConfig+0x45c>
 800ae18:	4ab1      	ldr	r2, [pc, #708]	; (800b0e0 <UART_SetConfig+0x350>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	f000 8235 	beq.w	800b28a <UART_SetConfig+0x4fa>
 800ae20:	4ab0      	ldr	r2, [pc, #704]	; (800b0e4 <UART_SetConfig+0x354>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	f000 8227 	beq.w	800b276 <UART_SetConfig+0x4e6>
        ret = HAL_ERROR;
 800ae28:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800ae2a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800ae2e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800ae30:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ae32:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 800ae36:	b007      	add	sp, #28
 800ae38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae3a:	4bab      	ldr	r3, [pc, #684]	; (800b0e8 <UART_SetConfig+0x358>)
 800ae3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae42:	2b28      	cmp	r3, #40	; 0x28
 800ae44:	d8f0      	bhi.n	800ae28 <UART_SetConfig+0x98>
 800ae46:	4aa9      	ldr	r2, [pc, #676]	; (800b0ec <UART_SetConfig+0x35c>)
 800ae48:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ae4e:	d054      	beq.n	800aefa <UART_SetConfig+0x16a>
    switch (clocksource)
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	f200 818b 	bhi.w	800b16c <UART_SetConfig+0x3dc>
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d8e6      	bhi.n	800ae28 <UART_SetConfig+0x98>
 800ae5a:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <UART_SetConfig+0xd0>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800b0b7 	.word	0x0800b0b7
 800ae64:	0800b0b1 	.word	0x0800b0b1
 800ae68:	0800ae29 	.word	0x0800ae29
 800ae6c:	0800ae29 	.word	0x0800ae29
 800ae70:	0800b0a1 	.word	0x0800b0a1
 800ae74:	0800ae29 	.word	0x0800ae29
 800ae78:	0800ae29 	.word	0x0800ae29
 800ae7c:	0800ae29 	.word	0x0800ae29
 800ae80:	0800b093 	.word	0x0800b093
 800ae84:	0800ae29 	.word	0x0800ae29
 800ae88:	0800ae29 	.word	0x0800ae29
 800ae8c:	0800ae29 	.word	0x0800ae29
 800ae90:	0800ae29 	.word	0x0800ae29
 800ae94:	0800ae29 	.word	0x0800ae29
 800ae98:	0800ae29 	.word	0x0800ae29
 800ae9c:	0800ae29 	.word	0x0800ae29
 800aea0:	0800b07d 	.word	0x0800b07d
 800aea4:	0800ae29 	.word	0x0800ae29
 800aea8:	0800ae29 	.word	0x0800ae29
 800aeac:	0800ae29 	.word	0x0800ae29
 800aeb0:	0800ae29 	.word	0x0800ae29
 800aeb4:	0800ae29 	.word	0x0800ae29
 800aeb8:	0800ae29 	.word	0x0800ae29
 800aebc:	0800ae29 	.word	0x0800ae29
 800aec0:	0800ae29 	.word	0x0800ae29
 800aec4:	0800ae29 	.word	0x0800ae29
 800aec8:	0800ae29 	.word	0x0800ae29
 800aecc:	0800ae29 	.word	0x0800ae29
 800aed0:	0800ae29 	.word	0x0800ae29
 800aed4:	0800ae29 	.word	0x0800ae29
 800aed8:	0800ae29 	.word	0x0800ae29
 800aedc:	0800ae29 	.word	0x0800ae29
 800aee0:	0800b051 	.word	0x0800b051
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aee4:	4b80      	ldr	r3, [pc, #512]	; (800b0e8 <UART_SetConfig+0x358>)
 800aee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	2b05      	cmp	r3, #5
 800aeee:	d89b      	bhi.n	800ae28 <UART_SetConfig+0x98>
 800aef0:	4a7f      	ldr	r2, [pc, #508]	; (800b0f0 <UART_SetConfig+0x360>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800aef6:	5cd3      	ldrb	r3, [r2, r3]
 800aef8:	d1aa      	bne.n	800ae50 <UART_SetConfig+0xc0>
    switch (clocksource)
 800aefa:	2b20      	cmp	r3, #32
 800aefc:	f200 8169 	bhi.w	800b1d2 <UART_SetConfig+0x442>
 800af00:	2b20      	cmp	r3, #32
 800af02:	d891      	bhi.n	800ae28 <UART_SetConfig+0x98>
 800af04:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <UART_SetConfig+0x17c>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800b26d 	.word	0x0800b26d
 800af10:	0800b25d 	.word	0x0800b25d
 800af14:	0800ae29 	.word	0x0800ae29
 800af18:	0800ae29 	.word	0x0800ae29
 800af1c:	0800b263 	.word	0x0800b263
 800af20:	0800ae29 	.word	0x0800ae29
 800af24:	0800ae29 	.word	0x0800ae29
 800af28:	0800ae29 	.word	0x0800ae29
 800af2c:	0800b24b 	.word	0x0800b24b
 800af30:	0800ae29 	.word	0x0800ae29
 800af34:	0800ae29 	.word	0x0800ae29
 800af38:	0800ae29 	.word	0x0800ae29
 800af3c:	0800ae29 	.word	0x0800ae29
 800af40:	0800ae29 	.word	0x0800ae29
 800af44:	0800ae29 	.word	0x0800ae29
 800af48:	0800ae29 	.word	0x0800ae29
 800af4c:	0800b237 	.word	0x0800b237
 800af50:	0800ae29 	.word	0x0800ae29
 800af54:	0800ae29 	.word	0x0800ae29
 800af58:	0800ae29 	.word	0x0800ae29
 800af5c:	0800ae29 	.word	0x0800ae29
 800af60:	0800ae29 	.word	0x0800ae29
 800af64:	0800ae29 	.word	0x0800ae29
 800af68:	0800ae29 	.word	0x0800ae29
 800af6c:	0800ae29 	.word	0x0800ae29
 800af70:	0800ae29 	.word	0x0800ae29
 800af74:	0800ae29 	.word	0x0800ae29
 800af78:	0800ae29 	.word	0x0800ae29
 800af7c:	0800ae29 	.word	0x0800ae29
 800af80:	0800ae29 	.word	0x0800ae29
 800af84:	0800ae29 	.word	0x0800ae29
 800af88:	0800ae29 	.word	0x0800ae29
 800af8c:	0800b199 	.word	0x0800b199
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af90:	6899      	ldr	r1, [r3, #8]
 800af92:	4a4c      	ldr	r2, [pc, #304]	; (800b0c4 <UART_SetConfig+0x334>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af94:	4854      	ldr	r0, [pc, #336]	; (800b0e8 <UART_SetConfig+0x358>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af96:	400a      	ands	r2, r1
 800af98:	4332      	orrs	r2, r6
 800af9a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800afa0:	f022 020f 	bic.w	r2, r2, #15
 800afa4:	430a      	orrs	r2, r1
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afa8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800afaa:	f003 0307 	and.w	r3, r3, #7
 800afae:	2b05      	cmp	r3, #5
 800afb0:	f63f af3a 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800afb4:	4a4f      	ldr	r2, [pc, #316]	; (800b0f4 <UART_SetConfig+0x364>)
 800afb6:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800afb8:	2b20      	cmp	r3, #32
 800afba:	f200 80e7 	bhi.w	800b18c <UART_SetConfig+0x3fc>
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	f67f af32 	bls.w	800ae28 <UART_SetConfig+0x98>
 800afc4:	3b02      	subs	r3, #2
 800afc6:	2b1e      	cmp	r3, #30
 800afc8:	f63f af2e 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800afcc:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <UART_SetConfig+0x244>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800b231 	.word	0x0800b231
 800afd8:	0800ae29 	.word	0x0800ae29
 800afdc:	0800b227 	.word	0x0800b227
 800afe0:	0800ae29 	.word	0x0800ae29
 800afe4:	0800ae29 	.word	0x0800ae29
 800afe8:	0800ae29 	.word	0x0800ae29
 800afec:	0800b215 	.word	0x0800b215
 800aff0:	0800ae29 	.word	0x0800ae29
 800aff4:	0800ae29 	.word	0x0800ae29
 800aff8:	0800ae29 	.word	0x0800ae29
 800affc:	0800ae29 	.word	0x0800ae29
 800b000:	0800ae29 	.word	0x0800ae29
 800b004:	0800ae29 	.word	0x0800ae29
 800b008:	0800ae29 	.word	0x0800ae29
 800b00c:	0800b201 	.word	0x0800b201
 800b010:	0800ae29 	.word	0x0800ae29
 800b014:	0800ae29 	.word	0x0800ae29
 800b018:	0800ae29 	.word	0x0800ae29
 800b01c:	0800ae29 	.word	0x0800ae29
 800b020:	0800ae29 	.word	0x0800ae29
 800b024:	0800ae29 	.word	0x0800ae29
 800b028:	0800ae29 	.word	0x0800ae29
 800b02c:	0800ae29 	.word	0x0800ae29
 800b030:	0800ae29 	.word	0x0800ae29
 800b034:	0800ae29 	.word	0x0800ae29
 800b038:	0800ae29 	.word	0x0800ae29
 800b03c:	0800ae29 	.word	0x0800ae29
 800b040:	0800ae29 	.word	0x0800ae29
 800b044:	0800ae29 	.word	0x0800ae29
 800b048:	0800ae29 	.word	0x0800ae29
 800b04c:	0800b105 	.word	0x0800b105
        pclk = (uint32_t) CSI_VALUE;
 800b050:	4829      	ldr	r0, [pc, #164]	; (800b0f8 <UART_SetConfig+0x368>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b052:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <UART_SetConfig+0x36c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b054:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b058:	6862      	ldr	r2, [r4, #4]
 800b05a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800b05e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b062:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b066:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b06a:	f1a3 0210 	sub.w	r2, r3, #16
 800b06e:	428a      	cmp	r2, r1
 800b070:	f63f aeda 	bhi.w	800ae28 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	2000      	movs	r0, #0
 800b078:	60d3      	str	r3, [r2, #12]
 800b07a:	e6d6      	b.n	800ae2a <UART_SetConfig+0x9a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b07c:	4b1a      	ldr	r3, [pc, #104]	; (800b0e8 <UART_SetConfig+0x358>)
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	f140 80f6 	bpl.w	800b272 <UART_SetConfig+0x4e2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	481d      	ldr	r0, [pc, #116]	; (800b100 <UART_SetConfig+0x370>)
 800b08a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b08e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b090:	e7df      	b.n	800b052 <UART_SetConfig+0x2c2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	a803      	add	r0, sp, #12
 800b094:	f7fe fd4c 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b098:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b09a:	b938      	cbnz	r0, 800b0ac <UART_SetConfig+0x31c>
          pclk = (uint32_t) HSI_VALUE;
 800b09c:	2000      	movs	r0, #0
 800b09e:	e6c4      	b.n	800ae2a <UART_SetConfig+0x9a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a0:	4668      	mov	r0, sp
 800b0a2:	f7fe fc99 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0a6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d0f7      	beq.n	800b09c <UART_SetConfig+0x30c>
 800b0ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b0ae:	e7d0      	b.n	800b052 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0b0:	f7fd fdea 	bl	8008c88 <HAL_RCC_GetPCLK2Freq>
        break;
 800b0b4:	e7f1      	b.n	800b09a <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0b6:	f7fd fd9f 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
        break;
 800b0ba:	e7ee      	b.n	800b09a <UART_SetConfig+0x30a>
 800b0bc:	cfff69f3 	.word	0xcfff69f3
 800b0c0:	58000c00 	.word	0x58000c00
 800b0c4:	11fff4ff 	.word	0x11fff4ff
 800b0c8:	40011000 	.word	0x40011000
 800b0cc:	40004400 	.word	0x40004400
 800b0d0:	40004800 	.word	0x40004800
 800b0d4:	40004c00 	.word	0x40004c00
 800b0d8:	40005000 	.word	0x40005000
 800b0dc:	40011400 	.word	0x40011400
 800b0e0:	40007800 	.word	0x40007800
 800b0e4:	40007c00 	.word	0x40007c00
 800b0e8:	58024400 	.word	0x58024400
 800b0ec:	080189c4 	.word	0x080189c4
 800b0f0:	080189f0 	.word	0x080189f0
 800b0f4:	080189f8 	.word	0x080189f8
 800b0f8:	003d0900 	.word	0x003d0900
 800b0fc:	08018a00 	.word	0x08018a00
 800b100:	03d09000 	.word	0x03d09000
        pclk = (uint32_t) CSI_VALUE;
 800b104:	4868      	ldr	r0, [pc, #416]	; (800b2a8 <UART_SetConfig+0x518>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b106:	4b69      	ldr	r3, [pc, #420]	; (800b2ac <UART_SetConfig+0x51c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b108:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b10a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b10e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b112:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b116:	4299      	cmp	r1, r3
 800b118:	f63f ae86 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b11c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b120:	f63f ae82 	bhi.w	800ae28 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b124:	2300      	movs	r3, #0
 800b126:	2100      	movs	r1, #0
 800b128:	f7f5 f932 	bl	8000390 <__aeabi_uldivmod>
 800b12c:	462a      	mov	r2, r5
 800b12e:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800b132:	2300      	movs	r3, #0
 800b134:	020f      	lsls	r7, r1, #8
 800b136:	0206      	lsls	r6, r0, #8
 800b138:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800b13c:	eb16 000c 	adds.w	r0, r6, ip
 800b140:	f147 0100 	adc.w	r1, r7, #0
 800b144:	f7f5 f924 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b148:	4a59      	ldr	r2, [pc, #356]	; (800b2b0 <UART_SetConfig+0x520>)
 800b14a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b14e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b150:	4291      	cmp	r1, r2
 800b152:	f63f ae69 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b156:	e78d      	b.n	800b074 <UART_SetConfig+0x2e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b158:	4b56      	ldr	r3, [pc, #344]	; (800b2b4 <UART_SetConfig+0x524>)
 800b15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15c:	f003 0307 	and.w	r3, r3, #7
 800b160:	2b05      	cmp	r3, #5
 800b162:	f63f ae61 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b166:	4a54      	ldr	r2, [pc, #336]	; (800b2b8 <UART_SetConfig+0x528>)
 800b168:	5cd3      	ldrb	r3, [r2, r3]
 800b16a:	e66e      	b.n	800ae4a <UART_SetConfig+0xba>
    switch (clocksource)
 800b16c:	2b40      	cmp	r3, #64	; 0x40
 800b16e:	f47f ae5b 	bne.w	800ae28 <UART_SetConfig+0x98>
 800b172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b176:	e76c      	b.n	800b052 <UART_SetConfig+0x2c2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b178:	4b4e      	ldr	r3, [pc, #312]	; (800b2b4 <UART_SetConfig+0x524>)
 800b17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17c:	f003 0307 	and.w	r3, r3, #7
 800b180:	2b05      	cmp	r3, #5
 800b182:	f63f ae51 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b186:	4a4d      	ldr	r2, [pc, #308]	; (800b2bc <UART_SetConfig+0x52c>)
 800b188:	5cd3      	ldrb	r3, [r2, r3]
 800b18a:	e65e      	b.n	800ae4a <UART_SetConfig+0xba>
    switch (clocksource)
 800b18c:	2b40      	cmp	r3, #64	; 0x40
 800b18e:	f47f ae4b 	bne.w	800ae28 <UART_SetConfig+0x98>
 800b192:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b196:	e7b6      	b.n	800b106 <UART_SetConfig+0x376>
        pclk = (uint32_t) CSI_VALUE;
 800b198:	4843      	ldr	r0, [pc, #268]	; (800b2a8 <UART_SetConfig+0x518>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19a:	4b44      	ldr	r3, [pc, #272]	; (800b2ac <UART_SetConfig+0x51c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b19c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1a0:	6862      	ldr	r2, [r4, #4]
 800b1a2:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800b1a6:	0853      	lsrs	r3, r2, #1
 800b1a8:	fbb0 f0f5 	udiv	r0, r0, r5
 800b1ac:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b1b0:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1b4:	f1a0 0310 	sub.w	r3, r0, #16
 800b1b8:	428b      	cmp	r3, r1
 800b1ba:	f63f ae35 	bhi.w	800ae28 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1be:	f020 020f 	bic.w	r2, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1c2:	f3c0 0342 	ubfx	r3, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800b1c6:	6821      	ldr	r1, [r4, #0]
 800b1c8:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ca:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60cb      	str	r3, [r1, #12]
 800b1d0:	e62b      	b.n	800ae2a <UART_SetConfig+0x9a>
    switch (clocksource)
 800b1d2:	2b40      	cmp	r3, #64	; 0x40
 800b1d4:	d0e1      	beq.n	800b19a <UART_SetConfig+0x40a>
 800b1d6:	e627      	b.n	800ae28 <UART_SetConfig+0x98>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1d8:	4b36      	ldr	r3, [pc, #216]	; (800b2b4 <UART_SetConfig+0x524>)
 800b1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1dc:	f003 0307 	and.w	r3, r3, #7
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	f63f ae21 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b1e6:	4a36      	ldr	r2, [pc, #216]	; (800b2c0 <UART_SetConfig+0x530>)
 800b1e8:	5cd3      	ldrb	r3, [r2, r3]
 800b1ea:	e62e      	b.n	800ae4a <UART_SetConfig+0xba>
 800b1ec:	4b31      	ldr	r3, [pc, #196]	; (800b2b4 <UART_SetConfig+0x524>)
 800b1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1f4:	2b28      	cmp	r3, #40	; 0x28
 800b1f6:	f63f ae17 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b1fa:	4a32      	ldr	r2, [pc, #200]	; (800b2c4 <UART_SetConfig+0x534>)
 800b1fc:	5cd3      	ldrb	r3, [r2, r3]
 800b1fe:	e624      	b.n	800ae4a <UART_SetConfig+0xba>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b200:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <UART_SetConfig+0x524>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	0690      	lsls	r0, r2, #26
 800b206:	d54a      	bpl.n	800b29e <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	482f      	ldr	r0, [pc, #188]	; (800b2c8 <UART_SetConfig+0x538>)
 800b20c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b210:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b212:	e778      	b.n	800b106 <UART_SetConfig+0x376>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b214:	a803      	add	r0, sp, #12
 800b216:	f7fe fc8b 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b21a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f43f af3d 	beq.w	800b09c <UART_SetConfig+0x30c>
 800b222:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b224:	e76f      	b.n	800b106 <UART_SetConfig+0x376>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b226:	4668      	mov	r0, sp
 800b228:	f7fe fbd6 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b22c:	9801      	ldr	r0, [sp, #4]
        break;
 800b22e:	e7f5      	b.n	800b21c <UART_SetConfig+0x48c>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b230:	f7fe fbc0 	bl	80099b4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800b234:	e7f2      	b.n	800b21c <UART_SetConfig+0x48c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b236:	4b1f      	ldr	r3, [pc, #124]	; (800b2b4 <UART_SetConfig+0x524>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	0691      	lsls	r1, r2, #26
 800b23c:	d531      	bpl.n	800b2a2 <UART_SetConfig+0x512>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4821      	ldr	r0, [pc, #132]	; (800b2c8 <UART_SetConfig+0x538>)
 800b242:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b246:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b248:	e7a7      	b.n	800b19a <UART_SetConfig+0x40a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b24a:	a803      	add	r0, sp, #12
 800b24c:	f7fe fc70 	bl	8009b30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b250:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b252:	2800      	cmp	r0, #0
 800b254:	f43f af22 	beq.w	800b09c <UART_SetConfig+0x30c>
 800b258:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b25a:	e79e      	b.n	800b19a <UART_SetConfig+0x40a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b25c:	f7fd fd14 	bl	8008c88 <HAL_RCC_GetPCLK2Freq>
        break;
 800b260:	e7f7      	b.n	800b252 <UART_SetConfig+0x4c2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b262:	4668      	mov	r0, sp
 800b264:	f7fe fbb8 	bl	80099d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b268:	9801      	ldr	r0, [sp, #4]
        break;
 800b26a:	e7f2      	b.n	800b252 <UART_SetConfig+0x4c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26c:	f7fd fcc4 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
        break;
 800b270:	e7ef      	b.n	800b252 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800b272:	4815      	ldr	r0, [pc, #84]	; (800b2c8 <UART_SetConfig+0x538>)
 800b274:	e6ed      	b.n	800b052 <UART_SetConfig+0x2c2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b276:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <UART_SetConfig+0x524>)
 800b278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	2b05      	cmp	r3, #5
 800b280:	f63f add2 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <UART_SetConfig+0x53c>)
 800b286:	5cd3      	ldrb	r3, [r2, r3]
 800b288:	e5df      	b.n	800ae4a <UART_SetConfig+0xba>
 800b28a:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <UART_SetConfig+0x524>)
 800b28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b05      	cmp	r3, #5
 800b294:	f63f adc8 	bhi.w	800ae28 <UART_SetConfig+0x98>
 800b298:	4a0d      	ldr	r2, [pc, #52]	; (800b2d0 <UART_SetConfig+0x540>)
 800b29a:	5cd3      	ldrb	r3, [r2, r3]
 800b29c:	e5d5      	b.n	800ae4a <UART_SetConfig+0xba>
          pclk = (uint32_t) HSI_VALUE;
 800b29e:	480a      	ldr	r0, [pc, #40]	; (800b2c8 <UART_SetConfig+0x538>)
 800b2a0:	e731      	b.n	800b106 <UART_SetConfig+0x376>
          pclk = (uint32_t) HSI_VALUE;
 800b2a2:	4809      	ldr	r0, [pc, #36]	; (800b2c8 <UART_SetConfig+0x538>)
 800b2a4:	e779      	b.n	800b19a <UART_SetConfig+0x40a>
 800b2a6:	bf00      	nop
 800b2a8:	003d0900 	.word	0x003d0900
 800b2ac:	08018a00 	.word	0x08018a00
 800b2b0:	000ffcff 	.word	0x000ffcff
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	080189f0 	.word	0x080189f0
 800b2bc:	080189f0 	.word	0x080189f0
 800b2c0:	080189f0 	.word	0x080189f0
 800b2c4:	080189c4 	.word	0x080189c4
 800b2c8:	03d09000 	.word	0x03d09000
 800b2cc:	080189f0 	.word	0x080189f0
 800b2d0:	080189f0 	.word	0x080189f0

0800b2d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2d6:	07da      	lsls	r2, r3, #31
{
 800b2d8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2da:	d506      	bpl.n	800b2ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2dc:	6801      	ldr	r1, [r0, #0]
 800b2de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b2e0:	684a      	ldr	r2, [r1, #4]
 800b2e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b2e6:	4322      	orrs	r2, r4
 800b2e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2ea:	079c      	lsls	r4, r3, #30
 800b2ec:	d506      	bpl.n	800b2fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ee:	6801      	ldr	r1, [r0, #0]
 800b2f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b2f2:	684a      	ldr	r2, [r1, #4]
 800b2f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b2f8:	4322      	orrs	r2, r4
 800b2fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2fc:	0759      	lsls	r1, r3, #29
 800b2fe:	d506      	bpl.n	800b30e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b300:	6801      	ldr	r1, [r0, #0]
 800b302:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b304:	684a      	ldr	r2, [r1, #4]
 800b306:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b30a:	4322      	orrs	r2, r4
 800b30c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b30e:	071a      	lsls	r2, r3, #28
 800b310:	d506      	bpl.n	800b320 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b312:	6801      	ldr	r1, [r0, #0]
 800b314:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b316:	684a      	ldr	r2, [r1, #4]
 800b318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b31c:	4322      	orrs	r2, r4
 800b31e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b320:	06dc      	lsls	r4, r3, #27
 800b322:	d506      	bpl.n	800b332 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b324:	6801      	ldr	r1, [r0, #0]
 800b326:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b328:	688a      	ldr	r2, [r1, #8]
 800b32a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b32e:	4322      	orrs	r2, r4
 800b330:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b332:	0699      	lsls	r1, r3, #26
 800b334:	d506      	bpl.n	800b344 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b336:	6801      	ldr	r1, [r0, #0]
 800b338:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b33a:	688a      	ldr	r2, [r1, #8]
 800b33c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b340:	4322      	orrs	r2, r4
 800b342:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b344:	065a      	lsls	r2, r3, #25
 800b346:	d50a      	bpl.n	800b35e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b348:	6801      	ldr	r1, [r0, #0]
 800b34a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b34c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b34e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b352:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b356:	ea42 0204 	orr.w	r2, r2, r4
 800b35a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b35c:	d00b      	beq.n	800b376 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b35e:	061b      	lsls	r3, r3, #24
 800b360:	d506      	bpl.n	800b370 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b362:	6802      	ldr	r2, [r0, #0]
 800b364:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b366:	6853      	ldr	r3, [r2, #4]
 800b368:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6053      	str	r3, [r2, #4]
}
 800b370:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b374:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b376:	684a      	ldr	r2, [r1, #4]
 800b378:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b37a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b37e:	4322      	orrs	r2, r4
 800b380:	604a      	str	r2, [r1, #4]
 800b382:	e7ec      	b.n	800b35e <UART_AdvFeatureConfig+0x8a>

0800b384 <UART_WaitOnFlagUntilTimeout>:
{
 800b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b38c:	4607      	mov	r7, r0
 800b38e:	460e      	mov	r6, r1
 800b390:	4615      	mov	r5, r2
 800b392:	4699      	mov	r9, r3
 800b394:	6804      	ldr	r4, [r0, #0]
 800b396:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b39a:	d10a      	bne.n	800b3b2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b39c:	69e3      	ldr	r3, [r4, #28]
 800b39e:	ea36 0303 	bics.w	r3, r6, r3
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2301      	moveq	r3, #1
 800b3a6:	2300      	movne	r3, #0
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	d0f7      	beq.n	800b39c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800b3ac:	2000      	movs	r0, #0
}
 800b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3b2:	69e3      	ldr	r3, [r4, #28]
 800b3b4:	ea36 0303 	bics.w	r3, r6, r3
 800b3b8:	bf0c      	ite	eq
 800b3ba:	2301      	moveq	r3, #1
 800b3bc:	2300      	movne	r3, #0
 800b3be:	42ab      	cmp	r3, r5
 800b3c0:	d1f4      	bne.n	800b3ac <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3c2:	f7f9 f82f 	bl	8004424 <HAL_GetTick>
 800b3c6:	eba0 0009 	sub.w	r0, r0, r9
 800b3ca:	4540      	cmp	r0, r8
 800b3cc:	d833      	bhi.n	800b436 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3ce:	f1b8 0f00 	cmp.w	r8, #0
 800b3d2:	d030      	beq.n	800b436 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3d4:	683c      	ldr	r4, [r7, #0]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	4622      	mov	r2, r4
 800b3da:	0759      	lsls	r1, r3, #29
 800b3dc:	d5db      	bpl.n	800b396 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3de:	69e3      	ldr	r3, [r4, #28]
 800b3e0:	051b      	lsls	r3, r3, #20
 800b3e2:	d5d8      	bpl.n	800b396 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3e8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ea:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b3ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	e844 3100 	strex	r1, r3, [r4]
 800b3f6:	b139      	cbz	r1, 800b408 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	e852 3f00 	ldrex	r3, [r2]
 800b3fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	e842 3100 	strex	r1, r3, [r2]
 800b404:	2900      	cmp	r1, #0
 800b406:	d1f7      	bne.n	800b3f8 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b408:	f102 0308 	add.w	r3, r2, #8
 800b40c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b410:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b414:	f102 0008 	add.w	r0, r2, #8
 800b418:	e840 3100 	strex	r1, r3, [r0]
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d1f3      	bne.n	800b408 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800b420:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800b422:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800b424:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800b428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b42c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b434:	e7bb      	b.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x2a>
 800b436:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b43c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b440:	e842 3100 	strex	r1, r3, [r2]
 800b444:	2900      	cmp	r1, #0
 800b446:	d1f7      	bne.n	800b438 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	f102 0308 	add.w	r3, r2, #8
 800b44c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b450:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	f102 0008 	add.w	r0, r2, #8
 800b458:	e840 3100 	strex	r1, r3, [r0]
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d1f3      	bne.n	800b448 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800b460:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800b462:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800b464:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800b468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b46c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800b470:	e79d      	b.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x2a>
 800b472:	bf00      	nop

0800b474 <HAL_UART_Init>:
  if (huart == NULL)
 800b474:	2800      	cmp	r0, #0
 800b476:	d066      	beq.n	800b546 <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b478:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	4604      	mov	r4, r0
 800b480:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800b482:	2b00      	cmp	r3, #0
 800b484:	d04c      	beq.n	800b520 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800b486:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b488:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b48a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800b48c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b490:	6813      	ldr	r3, [r2, #0]
 800b492:	f023 0301 	bic.w	r3, r3, #1
 800b496:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b498:	f7ff fc7a 	bl	800ad90 <UART_SetConfig>
 800b49c:	2801      	cmp	r0, #1
 800b49e:	d03c      	beq.n	800b51a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d135      	bne.n	800b512 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4a6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a8:	2600      	movs	r6, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4aa:	6859      	ldr	r1, [r3, #4]
 800b4ac:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800b4b0:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4b2:	6899      	ldr	r1, [r3, #8]
 800b4b4:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800b4b8:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b4ba:	6819      	ldr	r1, [r3, #0]
 800b4bc:	f041 0101 	orr.w	r1, r1, #1
 800b4c0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b4c6:	f7f8 ffad 	bl	8004424 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b4cc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	0712      	lsls	r2, r2, #28
 800b4d2:	d40e      	bmi.n	800b4f2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	075b      	lsls	r3, r3, #29
 800b4d8:	d427      	bmi.n	800b52a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b4dc:	2220      	movs	r2, #32
  return HAL_OK;
 800b4de:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b4e0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b4e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b4e8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ec:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800b4ee:	b002      	add	sp, #8
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4f2:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800b4f6:	4632      	mov	r2, r6
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4fe:	9000      	str	r0, [sp, #0]
 800b500:	4620      	mov	r0, r4
 800b502:	f7ff ff3f 	bl	800b384 <UART_WaitOnFlagUntilTimeout>
 800b506:	b9e0      	cbnz	r0, 800b542 <HAL_UART_Init+0xce>
 800b508:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	075b      	lsls	r3, r3, #29
 800b50e:	d40c      	bmi.n	800b52a <HAL_UART_Init+0xb6>
 800b510:	e7e3      	b.n	800b4da <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800b512:	4620      	mov	r0, r4
 800b514:	f7ff fede 	bl	800b2d4 <UART_AdvFeatureConfig>
 800b518:	e7c5      	b.n	800b4a6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800b51a:	2001      	movs	r0, #1
}
 800b51c:	b002      	add	sp, #8
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b520:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b524:	f7f8 fd5a 	bl	8003fdc <HAL_UART_MspInit>
 800b528:	e7ad      	b.n	800b486 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b52a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800b52e:	462b      	mov	r3, r5
 800b530:	2200      	movs	r2, #0
 800b532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b536:	9000      	str	r0, [sp, #0]
 800b538:	4620      	mov	r0, r4
 800b53a:	f7ff ff23 	bl	800b384 <UART_WaitOnFlagUntilTimeout>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d0cb      	beq.n	800b4da <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800b542:	2003      	movs	r0, #3
 800b544:	e7d3      	b.n	800b4ee <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800b546:	2001      	movs	r0, #1
}
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop

0800b550 <HAL_UARTEx_RxFifoFullCallback>:
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop

0800b554 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop

0800b558 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b558:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b55c:	2a01      	cmp	r2, #1
 800b55e:	d017      	beq.n	800b590 <HAL_UARTEx_DisableFifoMode+0x38>
 800b560:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800b562:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b564:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b566:	681a      	ldr	r2, [r3, #0]
{
 800b568:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 800b56a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800b56e:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b570:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800b572:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 800b574:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b576:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800b57a:	f025 0501 	bic.w	r5, r5, #1
 800b57e:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b580:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b582:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800b584:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800b588:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 800b58c:	bc70      	pop	{r4, r5, r6}
 800b58e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b590:	2002      	movs	r0, #2
}
 800b592:	4770      	bx	lr

0800b594 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b594:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b598:	2a01      	cmp	r2, #1
 800b59a:	d033      	beq.n	800b604 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800b59c:	4603      	mov	r3, r0
 800b59e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5a0:	681a      	ldr	r2, [r3, #0]
{
 800b5a2:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800b5a4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5a8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5aa:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5ac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b5ae:	f020 0001 	bic.w	r0, r0, #1
 800b5b2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5b4:	6890      	ldr	r0, [r2, #8]
 800b5b6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b5ba:	4301      	orrs	r1, r0
 800b5bc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5be:	b1f5      	cbz	r5, 800b5fe <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5c0:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5c2:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5c4:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5c8:	480f      	ldr	r0, [pc, #60]	; (800b608 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ca:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5cc:	4f0f      	ldr	r7, [pc, #60]	; (800b60c <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5ce:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d0:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5d2:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5d4:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d6:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5d8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5da:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5de:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800b5e2:	2520      	movs	r5, #32
 800b5e4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ee:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b5f0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b5f2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b5f6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b5fa:	bcf0      	pop	{r4, r5, r6, r7}
 800b5fc:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800b5fe:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b600:	4608      	mov	r0, r1
 800b602:	e7ee      	b.n	800b5e2 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800b604:	2002      	movs	r0, #2
}
 800b606:	4770      	bx	lr
 800b608:	08018a20 	.word	0x08018a20
 800b60c:	08018a18 	.word	0x08018a18

0800b610 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b610:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b614:	2a01      	cmp	r2, #1
 800b616:	d033      	beq.n	800b680 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 800b618:	4603      	mov	r3, r0
 800b61a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b61c:	681a      	ldr	r2, [r3, #0]
{
 800b61e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800b620:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b624:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b626:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b628:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b62a:	f020 0001 	bic.w	r0, r0, #1
 800b62e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b630:	6890      	ldr	r0, [r2, #8]
 800b632:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800b636:	4301      	orrs	r1, r0
 800b638:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b63a:	b1f5      	cbz	r5, 800b67a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b63c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b63e:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b640:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b644:	480f      	ldr	r0, [pc, #60]	; (800b684 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b646:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b648:	4f0f      	ldr	r7, [pc, #60]	; (800b688 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b64a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b64c:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b64e:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b650:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b652:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b654:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b656:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b65a:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800b65e:	2520      	movs	r5, #32
 800b660:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b664:	2100      	movs	r1, #0
 800b666:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b66a:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b66c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b66e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b672:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b676:	bcf0      	pop	{r4, r5, r6, r7}
 800b678:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800b67a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b67c:	4608      	mov	r0, r1
 800b67e:	e7ee      	b.n	800b65e <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800b680:	2002      	movs	r0, #2
}
 800b682:	4770      	bx	lr
 800b684:	08018a20 	.word	0x08018a20
 800b688:	08018a18 	.word	0x08018a18

0800b68c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b68c:	b084      	sub	sp, #16
 800b68e:	b470      	push	{r4, r5, r6}
 800b690:	b083      	sub	sp, #12
 800b692:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b694:	9e0c      	ldr	r6, [sp, #48]	; 0x30
{
 800b696:	ad07      	add	r5, sp, #28
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b698:	2e01      	cmp	r6, #1
{
 800b69a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b69e:	d132      	bne.n	800b706 <USB_CoreInit+0x7a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6a0:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6a2:	4b3c      	ldr	r3, [pc, #240]	; (800b794 <USB_CoreInit+0x108>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b6a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6aa:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800b6ac:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6ae:	68c2      	ldr	r2, [r0, #12]
 800b6b0:	ea03 0302 	and.w	r3, r3, r2
 800b6b4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6b6:	68c3      	ldr	r3, [r0, #12]
 800b6b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b6bc:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b6be:	d063      	beq.n	800b788 <USB_CoreInit+0xfc>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800b6c0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6c2:	4a35      	ldr	r2, [pc, #212]	; (800b798 <USB_CoreInit+0x10c>)
  __IO uint32_t count = 0U;
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	e002      	b.n	800b6ce <USB_CoreInit+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	db33      	blt.n	800b736 <USB_CoreInit+0xaa>
    if (++count > 200000U)
 800b6ce:	9b00      	ldr	r3, [sp, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	d9f7      	bls.n	800b6c8 <USB_CoreInit+0x3c>
      return HAL_TIMEOUT;
 800b6d8:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10e      	bne.n	800b6fe <USB_CoreInit+0x72>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b6e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b6e2:	4b2e      	ldr	r3, [pc, #184]	; (800b79c <USB_CoreInit+0x110>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b6e4:	b292      	uxth	r2, r2
 800b6e6:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b6e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6ee:	68a3      	ldr	r3, [r4, #8]
 800b6f0:	f043 0306 	orr.w	r3, r3, #6
 800b6f4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	f043 0320 	orr.w	r3, r3, #32
 800b6fc:	60a3      	str	r3, [r4, #8]
}
 800b6fe:	b003      	add	sp, #12
 800b700:	bc70      	pop	{r4, r5, r6}
 800b702:	b004      	add	sp, #16
 800b704:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b706:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b708:	2100      	movs	r1, #0
    if (++count > 200000U)
 800b70a:	4a23      	ldr	r2, [pc, #140]	; (800b798 <USB_CoreInit+0x10c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b710:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b712:	9101      	str	r1, [sp, #4]
 800b714:	e002      	b.n	800b71c <USB_CoreInit+0x90>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	db23      	blt.n	800b764 <USB_CoreInit+0xd8>
    if (++count > 200000U)
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	3301      	adds	r3, #1
 800b720:	4293      	cmp	r3, r2
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	d9f7      	bls.n	800b716 <USB_CoreInit+0x8a>
      return HAL_TIMEOUT;
 800b726:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800b728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b72a:	b9b3      	cbnz	r3, 800b75a <USB_CoreInit+0xce>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b72c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b72e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b732:	63a3      	str	r3, [r4, #56]	; 0x38
 800b734:	e7d1      	b.n	800b6da <USB_CoreInit+0x4e>

  /* Core Soft Reset */
  count = 0U;
 800b736:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800b738:	4a17      	ldr	r2, [pc, #92]	; (800b798 <USB_CoreInit+0x10c>)
  count = 0U;
 800b73a:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	f043 0301 	orr.w	r3, r3, #1
 800b742:	6123      	str	r3, [r4, #16]
 800b744:	e003      	b.n	800b74e <USB_CoreInit+0xc2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b746:	6920      	ldr	r0, [r4, #16]
 800b748:	f010 0001 	ands.w	r0, r0, #1
 800b74c:	d0c5      	beq.n	800b6da <USB_CoreInit+0x4e>
    if (++count > 200000U)
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	3301      	adds	r3, #1
 800b752:	4293      	cmp	r3, r2
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	d9f6      	bls.n	800b746 <USB_CoreInit+0xba>
 800b758:	e7be      	b.n	800b6d8 <USB_CoreInit+0x4c>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b75a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b75c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b760:	63a3      	str	r3, [r4, #56]	; 0x38
 800b762:	e7ba      	b.n	800b6da <USB_CoreInit+0x4e>
  count = 0U;
 800b764:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b766:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <USB_CoreInit+0x10c>)
  count = 0U;
 800b768:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	f043 0301 	orr.w	r3, r3, #1
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	e003      	b.n	800b77c <USB_CoreInit+0xf0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b774:	6920      	ldr	r0, [r4, #16]
 800b776:	f010 0001 	ands.w	r0, r0, #1
 800b77a:	d0d5      	beq.n	800b728 <USB_CoreInit+0x9c>
    if (++count > 200000U)
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	3301      	adds	r3, #1
 800b780:	4293      	cmp	r3, r2
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	d9f6      	bls.n	800b774 <USB_CoreInit+0xe8>
 800b786:	e7ce      	b.n	800b726 <USB_CoreInit+0x9a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b788:	68c3      	ldr	r3, [r0, #12]
 800b78a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b78e:	60c3      	str	r3, [r0, #12]
 800b790:	e796      	b.n	800b6c0 <USB_CoreInit+0x34>
 800b792:	bf00      	nop
 800b794:	ffbdffbf 	.word	0xffbdffbf
 800b798:	00030d40 	.word	0x00030d40
 800b79c:	03ee0000 	.word	0x03ee0000

0800b7a0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800b7a0:	2a02      	cmp	r2, #2
{
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800b7a6:	d00c      	beq.n	800b7c2 <USB_SetTurnaroundTime+0x22>
 800b7a8:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7ac:	68d9      	ldr	r1, [r3, #12]
}
 800b7ae:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7b0:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800b7b4:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	4322      	orrs	r2, r4
}
 800b7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7be:	60da      	str	r2, [r3, #12]
}
 800b7c0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b7c2:	4a23      	ldr	r2, [pc, #140]	; (800b850 <USB_SetTurnaroundTime+0xb0>)
 800b7c4:	4823      	ldr	r0, [pc, #140]	; (800b854 <USB_SetTurnaroundTime+0xb4>)
 800b7c6:	440a      	add	r2, r1
 800b7c8:	4282      	cmp	r2, r0
 800b7ca:	d92c      	bls.n	800b826 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b7cc:	4a22      	ldr	r2, [pc, #136]	; (800b858 <USB_SetTurnaroundTime+0xb8>)
 800b7ce:	4823      	ldr	r0, [pc, #140]	; (800b85c <USB_SetTurnaroundTime+0xbc>)
 800b7d0:	440a      	add	r2, r1
 800b7d2:	4282      	cmp	r2, r0
 800b7d4:	d92a      	bls.n	800b82c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b7d6:	4a22      	ldr	r2, [pc, #136]	; (800b860 <USB_SetTurnaroundTime+0xc0>)
 800b7d8:	4822      	ldr	r0, [pc, #136]	; (800b864 <USB_SetTurnaroundTime+0xc4>)
 800b7da:	440a      	add	r2, r1
 800b7dc:	4282      	cmp	r2, r0
 800b7de:	d928      	bls.n	800b832 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7e0:	4a21      	ldr	r2, [pc, #132]	; (800b868 <USB_SetTurnaroundTime+0xc8>)
 800b7e2:	4822      	ldr	r0, [pc, #136]	; (800b86c <USB_SetTurnaroundTime+0xcc>)
 800b7e4:	440a      	add	r2, r1
 800b7e6:	4282      	cmp	r2, r0
 800b7e8:	d326      	bcc.n	800b838 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7ea:	4a21      	ldr	r2, [pc, #132]	; (800b870 <USB_SetTurnaroundTime+0xd0>)
 800b7ec:	4821      	ldr	r0, [pc, #132]	; (800b874 <USB_SetTurnaroundTime+0xd4>)
 800b7ee:	440a      	add	r2, r1
 800b7f0:	4282      	cmp	r2, r0
 800b7f2:	d924      	bls.n	800b83e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7f4:	4a20      	ldr	r2, [pc, #128]	; (800b878 <USB_SetTurnaroundTime+0xd8>)
 800b7f6:	4821      	ldr	r0, [pc, #132]	; (800b87c <USB_SetTurnaroundTime+0xdc>)
 800b7f8:	440a      	add	r2, r1
 800b7fa:	4282      	cmp	r2, r0
 800b7fc:	d322      	bcc.n	800b844 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7fe:	4a20      	ldr	r2, [pc, #128]	; (800b880 <USB_SetTurnaroundTime+0xe0>)
 800b800:	4820      	ldr	r0, [pc, #128]	; (800b884 <USB_SetTurnaroundTime+0xe4>)
 800b802:	440a      	add	r2, r1
 800b804:	4282      	cmp	r2, r0
 800b806:	d3cf      	bcc.n	800b7a8 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b808:	4a1f      	ldr	r2, [pc, #124]	; (800b888 <USB_SetTurnaroundTime+0xe8>)
 800b80a:	4820      	ldr	r0, [pc, #128]	; (800b88c <USB_SetTurnaroundTime+0xec>)
 800b80c:	440a      	add	r2, r1
 800b80e:	4282      	cmp	r2, r0
 800b810:	d31b      	bcc.n	800b84a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b812:	4a1f      	ldr	r2, [pc, #124]	; (800b890 <USB_SetTurnaroundTime+0xf0>)
 800b814:	4c1f      	ldr	r4, [pc, #124]	; (800b894 <USB_SetTurnaroundTime+0xf4>)
 800b816:	440a      	add	r2, r1
 800b818:	42a2      	cmp	r2, r4
 800b81a:	bf34      	ite	cc
 800b81c:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 800b820:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 800b824:	e7c2      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b826:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800b82a:	e7bf      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b82c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800b830:	e7bc      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b832:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800b836:	e7b9      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b838:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800b83c:	e7b6      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b83e:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800b842:	e7b3      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b844:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800b848:	e7b0      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b84a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800b84e:	e7ad      	b.n	800b7ac <USB_SetTurnaroundTime+0xc>
 800b850:	ff275340 	.word	0xff275340
 800b854:	000c34ff 	.word	0x000c34ff
 800b858:	ff1b1e40 	.word	0xff1b1e40
 800b85c:	000f423f 	.word	0x000f423f
 800b860:	ff0bdc00 	.word	0xff0bdc00
 800b864:	00124f7f 	.word	0x00124f7f
 800b868:	fef98c80 	.word	0xfef98c80
 800b86c:	0013d620 	.word	0x0013d620
 800b870:	fee5b660 	.word	0xfee5b660
 800b874:	0016e35f 	.word	0x0016e35f
 800b878:	feced300 	.word	0xfeced300
 800b87c:	001b7740 	.word	0x001b7740
 800b880:	feb35bc0 	.word	0xfeb35bc0
 800b884:	002191c0 	.word	0x002191c0
 800b888:	fe91ca00 	.word	0xfe91ca00
 800b88c:	00387520 	.word	0x00387520
 800b890:	fe5954e0 	.word	0xfe5954e0
 800b894:	00419ce0 	.word	0x00419ce0

0800b898 <USB_EnableGlobalInt>:
{
 800b898:	4603      	mov	r3, r0
}
 800b89a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b89c:	689a      	ldr	r2, [r3, #8]
 800b89e:	f042 0201 	orr.w	r2, r2, #1
 800b8a2:	609a      	str	r2, [r3, #8]
}
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop

0800b8a8 <USB_DisableGlobalInt>:
{
 800b8a8:	4603      	mov	r3, r0
}
 800b8aa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8ac:	689a      	ldr	r2, [r3, #8]
 800b8ae:	f022 0201 	bic.w	r2, r2, #1
 800b8b2:	609a      	str	r2, [r3, #8]
}
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop

0800b8b8 <USB_SetCurrentMode>:
{
 800b8b8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8ba:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b8bc:	2901      	cmp	r1, #1
{
 800b8be:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b8c4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b8c6:	d017      	beq.n	800b8f8 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800b8c8:	b9a1      	cbnz	r1, 800b8f4 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8ca:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b8cc:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8d2:	60c3      	str	r3, [r0, #12]
 800b8d4:	e001      	b.n	800b8da <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b8d6:	2c32      	cmp	r4, #50	; 0x32
 800b8d8:	d00c      	beq.n	800b8f4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b8da:	2001      	movs	r0, #1
      ms++;
 800b8dc:	4404      	add	r4, r0
      HAL_Delay(1U);
 800b8de:	f7f8 fda7 	bl	8004430 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800b8e2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b8e4:	07db      	lsls	r3, r3, #31
 800b8e6:	d4f6      	bmi.n	800b8d6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800b8e8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800b8ec:	fab0 f080 	clz	r0, r0
 800b8f0:	0940      	lsrs	r0, r0, #5
}
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b8f4:	2001      	movs	r0, #1
}
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8f8:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b8fa:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b900:	60c3      	str	r3, [r0, #12]
 800b902:	e001      	b.n	800b908 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b904:	2c32      	cmp	r4, #50	; 0x32
 800b906:	d0f5      	beq.n	800b8f4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b908:	2001      	movs	r0, #1
      ms++;
 800b90a:	4404      	add	r4, r0
      HAL_Delay(1U);
 800b90c:	f7f8 fd90 	bl	8004430 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800b910:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b912:	07da      	lsls	r2, r3, #31
 800b914:	d5f6      	bpl.n	800b904 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800b916:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800b91a:	fab0 f080 	clz	r0, r0
 800b91e:	0940      	lsrs	r0, r0, #5
 800b920:	e7e7      	b.n	800b8f2 <USB_SetCurrentMode+0x3a>
 800b922:	bf00      	nop

0800b924 <USB_DevInit>:
{
 800b924:	b084      	sub	sp, #16
 800b926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b92a:	b083      	sub	sp, #12
    USBx->DIEPTXF[i] = 0U;
 800b92c:	2500      	movs	r5, #0
{
 800b92e:	ae0b      	add	r6, sp, #44	; 0x2c
 800b930:	9c15      	ldr	r4, [sp, #84]	; 0x54
    USBx->DIEPTXF[i] = 0U;
 800b932:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
 800b936:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
 800b93a:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
 800b93e:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
 800b942:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
 800b946:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
 800b94a:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
 800b94e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
 800b952:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
 800b956:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
 800b95a:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
 800b95e:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
 800b962:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
 800b966:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
 800b96a:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
{
 800b96e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 800b972:	2c00      	cmp	r4, #0
 800b974:	f040 80a2 	bne.w	800babc <USB_DevInit+0x198>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b978:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800b97c:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	606b      	str	r3, [r5, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b986:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b98c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b98e:	6803      	ldr	r3, [r0, #0]
 800b990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b994:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b996:	6803      	ldr	r3, [r0, #0]
 800b998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99c:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800b99e:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  USBx_PCGCCTL = 0U;
 800b9a2:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a6:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9a8:	682a      	ldr	r2, [r5, #0]
 800b9aa:	602a      	str	r2, [r5, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9ac:	f000 80ae 	beq.w	800bb0c <USB_DevInit+0x1e8>
  USBx_DEVICE->DCFG |= speed;
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	f043 0303 	orr.w	r3, r3, #3
 800b9b6:	602b      	str	r3, [r5, #0]
  __IO uint32_t count = 0U;
 800b9b8:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b9ba:	4a59      	ldr	r2, [pc, #356]	; (800bb20 <USB_DevInit+0x1fc>)
  __IO uint32_t count = 0U;
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	e003      	b.n	800b9c8 <USB_DevInit+0xa4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9c0:	6903      	ldr	r3, [r0, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f2c0 8090 	blt.w	800bae8 <USB_DevInit+0x1c4>
    if (++count > 200000U)
 800b9c8:	9b00      	ldr	r3, [sp, #0]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	d9f6      	bls.n	800b9c0 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 800b9d2:	2601      	movs	r6, #1
  __IO uint32_t count = 0U;
 800b9d4:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b9d6:	4a52      	ldr	r2, [pc, #328]	; (800bb20 <USB_DevInit+0x1fc>)
  __IO uint32_t count = 0U;
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	e002      	b.n	800b9e2 <USB_DevInit+0xbe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9dc:	6903      	ldr	r3, [r0, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	db73      	blt.n	800baca <USB_DevInit+0x1a6>
    if (++count > 200000U)
 800b9e2:	9b01      	ldr	r3, [sp, #4]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	d9f7      	bls.n	800b9dc <USB_DevInit+0xb8>
    ret = HAL_ERROR;
 800b9ec:	2601      	movs	r6, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	612a      	str	r2, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9f2:	616a      	str	r2, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9f4:	61ea      	str	r2, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9f6:	b1e9      	cbz	r1, 800ba34 <USB_DevInit+0x110>
 800b9f8:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b9fc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba00:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba04:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba06:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ba0a:	e009      	b.n	800ba20 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba0c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba10:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba12:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba16:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba1a:	3320      	adds	r3, #32
 800ba1c:	428a      	cmp	r2, r1
 800ba1e:	d02e      	beq.n	800ba7e <USB_DevInit+0x15a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba20:	681f      	ldr	r7, [r3, #0]
 800ba22:	2f00      	cmp	r7, #0
 800ba24:	daf2      	bge.n	800ba0c <USB_DevInit+0xe8>
      if (i == 0U)
 800ba26:	b112      	cbz	r2, 800ba2e <USB_DevInit+0x10a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba28:	f8c3 8000 	str.w	r8, [r3]
 800ba2c:	e7f0      	b.n	800ba10 <USB_DevInit+0xec>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba2e:	f8c3 9000 	str.w	r9, [r3]
 800ba32:	e7ed      	b.n	800ba10 <USB_DevInit+0xec>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba34:	692b      	ldr	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 800ba36:	2700      	movs	r7, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba38:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800ba3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba42:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 800ba44:	6187      	str	r7, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba46:	6141      	str	r1, [r0, #20]
  if (cfg.dma_enable == 0U)
 800ba48:	b91a      	cbnz	r2, 800ba52 <USB_DevInit+0x12e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba4a:	6983      	ldr	r3, [r0, #24]
 800ba4c:	f043 0310 	orr.w	r3, r3, #16
 800ba50:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba52:	6981      	ldr	r1, [r0, #24]
 800ba54:	4b33      	ldr	r3, [pc, #204]	; (800bb24 <USB_DevInit+0x200>)
  if (cfg.Sof_enable != 0U)
 800ba56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba58:	430b      	orrs	r3, r1
 800ba5a:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800ba5c:	b11a      	cbz	r2, 800ba66 <USB_DevInit+0x142>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba5e:	6983      	ldr	r3, [r0, #24]
 800ba60:	f043 0308 	orr.w	r3, r3, #8
 800ba64:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ba66:	2c01      	cmp	r4, #1
 800ba68:	d103      	bne.n	800ba72 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba6a:	6982      	ldr	r2, [r0, #24]
 800ba6c:	4b2e      	ldr	r3, [pc, #184]	; (800bb28 <USB_DevInit+0x204>)
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	6183      	str	r3, [r0, #24]
}
 800ba72:	4630      	mov	r0, r6
 800ba74:	b003      	add	sp, #12
 800ba76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba7a:	b004      	add	sp, #16
 800ba7c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ba84:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba88:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba8c:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba8e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ba92:	e009      	b.n	800baa8 <USB_DevInit+0x184>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba94:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba98:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba9a:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba9e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baa2:	3320      	adds	r3, #32
 800baa4:	428a      	cmp	r2, r1
 800baa6:	d0c5      	beq.n	800ba34 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baa8:	681f      	ldr	r7, [r3, #0]
 800baaa:	2f00      	cmp	r7, #0
 800baac:	daf2      	bge.n	800ba94 <USB_DevInit+0x170>
      if (i == 0U)
 800baae:	b112      	cbz	r2, 800bab6 <USB_DevInit+0x192>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bab0:	f8c3 8000 	str.w	r8, [r3]
 800bab4:	e7f0      	b.n	800ba98 <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bab6:	f8c3 9000 	str.w	r9, [r3]
 800baba:	e7ed      	b.n	800ba98 <USB_DevInit+0x174>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800babc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800babe:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800bac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bac6:	6383      	str	r3, [r0, #56]	; 0x38
 800bac8:	e769      	b.n	800b99e <USB_DevInit+0x7a>
  count = 0U;
 800baca:	2700      	movs	r7, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bacc:	2310      	movs	r3, #16
    if (++count > 200000U)
 800bace:	4a14      	ldr	r2, [pc, #80]	; (800bb20 <USB_DevInit+0x1fc>)
  count = 0U;
 800bad0:	9701      	str	r7, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bad2:	6103      	str	r3, [r0, #16]
 800bad4:	e002      	b.n	800badc <USB_DevInit+0x1b8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bad6:	6903      	ldr	r3, [r0, #16]
 800bad8:	06db      	lsls	r3, r3, #27
 800bada:	d588      	bpl.n	800b9ee <USB_DevInit+0xca>
    if (++count > 200000U)
 800badc:	9b01      	ldr	r3, [sp, #4]
 800bade:	3301      	adds	r3, #1
 800bae0:	4293      	cmp	r3, r2
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	d9f7      	bls.n	800bad6 <USB_DevInit+0x1b2>
 800bae6:	e781      	b.n	800b9ec <USB_DevInit+0xc8>
  count = 0U;
 800bae8:	2600      	movs	r6, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800baea:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (++count > 200000U)
 800baee:	4a0c      	ldr	r2, [pc, #48]	; (800bb20 <USB_DevInit+0x1fc>)
  count = 0U;
 800baf0:	9600      	str	r6, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800baf2:	6103      	str	r3, [r0, #16]
 800baf4:	e004      	b.n	800bb00 <USB_DevInit+0x1dc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800baf6:	6906      	ldr	r6, [r0, #16]
 800baf8:	f016 0620 	ands.w	r6, r6, #32
 800bafc:	f43f af6a 	beq.w	800b9d4 <USB_DevInit+0xb0>
    if (++count > 200000U)
 800bb00:	9b00      	ldr	r3, [sp, #0]
 800bb02:	3301      	adds	r3, #1
 800bb04:	4293      	cmp	r3, r2
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	d9f5      	bls.n	800baf6 <USB_DevInit+0x1d2>
 800bb0a:	e762      	b.n	800b9d2 <USB_DevInit+0xae>
    if (cfg.speed == USBD_HS_SPEED)
 800bb0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb0e:	b913      	cbnz	r3, 800bb16 <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 800bb14:	e750      	b.n	800b9b8 <USB_DevInit+0x94>
  USBx_DEVICE->DCFG |= speed;
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	f043 0301 	orr.w	r3, r3, #1
 800bb1c:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 800bb1e:	e74b      	b.n	800b9b8 <USB_DevInit+0x94>
 800bb20:	00030d40 	.word	0x00030d40
 800bb24:	803c3800 	.word	0x803c3800
 800bb28:	40000004 	.word	0x40000004

0800bb2c <USB_FlushTxFifo>:
{
 800bb2c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800bb2e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bb30:	4a11      	ldr	r2, [pc, #68]	; (800bb78 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	e002      	b.n	800bb3c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb36:	6903      	ldr	r3, [r0, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	db07      	blt.n	800bb4c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	4293      	cmp	r3, r2
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	d9f7      	bls.n	800bb36 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800bb46:	2003      	movs	r0, #3
}
 800bb48:	b002      	add	sp, #8
 800bb4a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb4c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800bb4e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bb50:	4a09      	ldr	r2, [pc, #36]	; (800bb78 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb52:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800bb56:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb58:	6101      	str	r1, [r0, #16]
 800bb5a:	e003      	b.n	800bb64 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb5c:	6903      	ldr	r3, [r0, #16]
 800bb5e:	f013 0320 	ands.w	r3, r3, #32
 800bb62:	d005      	beq.n	800bb70 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	3301      	adds	r3, #1
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	d9f6      	bls.n	800bb5c <USB_FlushTxFifo+0x30>
 800bb6e:	e7ea      	b.n	800bb46 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800bb70:	4618      	mov	r0, r3
}
 800bb72:	b002      	add	sp, #8
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	00030d40 	.word	0x00030d40

0800bb7c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb7c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb80:	f013 0006 	ands.w	r0, r3, #6
 800bb84:	d004      	beq.n	800bb90 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb86:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800bb8a:	bf14      	ite	ne
 800bb8c:	2002      	movne	r0, #2
 800bb8e:	200f      	moveq	r0, #15
}
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop

0800bb94 <USB_ActivateEndpoint>:
{
 800bb94:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800bb96:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bb98:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d01f      	beq.n	800bbde <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb9e:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800bba2:	f002 050f 	and.w	r5, r2, #15
 800bba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bbaa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bbae:	69e2      	ldr	r2, [r4, #28]
 800bbb0:	40ab      	lsls	r3, r5
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bbb6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	d40c      	bmi.n	800bbd8 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbbe:	688b      	ldr	r3, [r1, #8]
 800bbc0:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800bbc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bbc8:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbca:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <USB_ActivateEndpoint+0x8c>)
 800bbcc:	4323      	orrs	r3, r4
 800bbce:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800bbd8:	2000      	movs	r0, #0
 800bbda:	bc70      	pop	{r4, r5, r6}
 800bbdc:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bbde:	f002 040f 	and.w	r4, r2, #15
 800bbe2:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800bbe6:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbea:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bbee:	40a3      	lsls	r3, r4
 800bbf0:	4333      	orrs	r3, r6
 800bbf2:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbf4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bbf8:	041c      	lsls	r4, r3, #16
 800bbfa:	d4ed      	bmi.n	800bbd8 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbfc:	688b      	ldr	r3, [r1, #8]
 800bbfe:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800bc02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc06:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc08:	4905      	ldr	r1, [pc, #20]	; (800bc20 <USB_ActivateEndpoint+0x8c>)
 800bc0a:	432b      	orrs	r3, r5
 800bc0c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800bc10:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800bc14:	4311      	orrs	r1, r2
}
 800bc16:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc18:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4770      	bx	lr
 800bc20:	10008000 	.word	0x10008000

0800bc24 <USB_DeactivateEndpoint>:
{
 800bc24:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800bc26:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bc28:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bc2a:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc2c:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800bc30:	d02b      	beq.n	800bc8a <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc32:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	db1a      	blt.n	800bc70 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc3e:	f003 030f 	and.w	r3, r3, #15
 800bc42:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800bc46:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc4a:	4925      	ldr	r1, [pc, #148]	; (800bce0 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc4c:	ea24 0403 	bic.w	r4, r4, r3
 800bc50:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc54:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800bc58:	ea22 0303 	bic.w	r3, r2, r3
 800bc5c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bc60:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc62:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800bc66:	4019      	ands	r1, r3
 800bc68:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 800bc6c:	bc30      	pop	{r4, r5}
 800bc6e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc70:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800bc74:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bc78:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bc7c:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800bc80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bc84:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 800bc88:	e7d7      	b.n	800bc3a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc8a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	da0b      	bge.n	800bcaa <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bc92:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800bc96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bc9a:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bc9e:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800bca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bca6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f003 030f 	and.w	r3, r3, #15
 800bcb0:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800bcb4:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bcb8:	490a      	ldr	r1, [pc, #40]	; (800bce4 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bcba:	ea24 0403 	bic.w	r4, r4, r3
 800bcbe:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bcc2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800bcc6:	ea22 0303 	bic.w	r3, r2, r3
 800bcca:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bcce:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bcd0:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800bcd4:	4019      	ands	r1, r3
 800bcd6:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800bcda:	bc30      	pop	{r4, r5}
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	eff37800 	.word	0xeff37800
 800bce4:	ec337800 	.word	0xec337800

0800bce8 <USB_EPStartXfer>:
{
 800bce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800bcec:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bcee:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800bcf0:	2d01      	cmp	r5, #1
 800bcf2:	d054      	beq.n	800bd9e <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcf4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800bcf8:	4f82      	ldr	r7, [pc, #520]	; (800bf04 <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 800bcfa:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcfc:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 800bd00:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd04:	4e80      	ldr	r6, [pc, #512]	; (800bf08 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd06:	ea0c 0707 	and.w	r7, ip, r7
 800bd0a:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd0c:	691f      	ldr	r7, [r3, #16]
 800bd0e:	403e      	ands	r6, r7
 800bd10:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 800bd12:	b395      	cbz	r5, 800bd7a <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd14:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 800bd16:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd18:	4f7c      	ldr	r7, [pc, #496]	; (800bf0c <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd1a:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd1c:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd20:	f105 35ff 	add.w	r5, r5, #4294967295
 800bd24:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd28:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd2c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd30:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd34:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd38:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd3c:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd3e:	691d      	ldr	r5, [r3, #16]
 800bd40:	ea46 0605 	orr.w	r6, r6, r5
 800bd44:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800bd46:	d025      	beq.n	800bd94 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 800bd48:	78cb      	ldrb	r3, [r1, #3]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d10c      	bne.n	800bd68 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd4e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bd52:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bd56:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800bd5a:	bf0c      	ite	eq
 800bd5c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bd60:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800bd64:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd68:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800bd6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd70:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800bd74:	2000      	movs	r0, #0
 800bd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd7a:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800bd7c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd7e:	691e      	ldr	r6, [r3, #16]
 800bd80:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800bd84:	ea45 0506 	orr.w	r5, r5, r6
 800bd88:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd8a:	691d      	ldr	r5, [r3, #16]
 800bd8c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800bd90:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800bd92:	d1d9      	bne.n	800bd48 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd94:	68ca      	ldr	r2, [r1, #12]
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d0d6      	beq.n	800bd48 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd9a:	615a      	str	r2, [r3, #20]
 800bd9c:	e7d4      	b.n	800bd48 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 800bd9e:	694e      	ldr	r6, [r1, #20]
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	d040      	beq.n	800be26 <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bda4:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bda8:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdac:	f8df a154 	ldr.w	sl, [pc, #340]	; 800bf04 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bdb0:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdb4:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bdb8:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdbc:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 800bdc0:	ea09 0a0a 	and.w	sl, r9, sl
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bdc4:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdc8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800bf08 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdcc:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdd0:	f8d3 a010 	ldr.w	sl, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bdd4:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdd8:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bddc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800bf0c <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bde0:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bde4:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 800bde8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800bdec:	ea4c 0c08 	orr.w	ip, ip, r8
 800bdf0:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bdf4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800bdf8:	ea47 070c 	orr.w	r7, r7, ip
 800bdfc:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 800bdfe:	78cf      	ldrb	r7, [r1, #3]
 800be00:	2f01      	cmp	r7, #1
 800be02:	d04e      	beq.n	800bea2 <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 800be04:	2a01      	cmp	r2, #1
 800be06:	d068      	beq.n	800beda <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be08:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be0c:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be14:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be16:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be1a:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800be1e:	4325      	orrs	r5, r4
 800be20:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 800be24:	e7a6      	b.n	800bd74 <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be26:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800be2a:	4f37      	ldr	r7, [pc, #220]	; (800bf08 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be2c:	4d35      	ldr	r5, [pc, #212]	; (800bf04 <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 800be2e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be30:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 800be34:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 800be38:	ea0e 0707 	and.w	r7, lr, r7
 800be3c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be3e:	691f      	ldr	r7, [r3, #16]
 800be40:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800be44:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be46:	691f      	ldr	r7, [r3, #16]
 800be48:	ea05 0507 	and.w	r5, r5, r7
 800be4c:	611d      	str	r5, [r3, #16]
 800be4e:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 800be50:	d038      	beq.n	800bec4 <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be52:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800be56:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be58:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800be5c:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800be60:	d188      	bne.n	800bd74 <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be62:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800be66:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be6a:	681d      	ldr	r5, [r3, #0]
 800be6c:	bf0c      	ite	eq
 800be6e:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be72:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800be76:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 800be78:	2a00      	cmp	r2, #0
 800be7a:	f47f af7b 	bne.w	800bd74 <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800be7e:	b2b6      	uxth	r6, r6
 800be80:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 800be82:	08b6      	lsrs	r6, r6, #2
 800be84:	f43f af76 	beq.w	800bd74 <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800be88:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be8a:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800be8e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800be92:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800be96:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800be9a:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be9c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800be9e:	d1fa      	bne.n	800be96 <USB_EPStartXfer+0x1ae>
 800bea0:	e768      	b.n	800bd74 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bea2:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 800bea4:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bea6:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800beaa:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800beac:	691d      	ldr	r5, [r3, #16]
 800beae:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800beb2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800beb4:	d016      	beq.n	800bee4 <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800beb6:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 800beba:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800bebe:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bec2:	e7ce      	b.n	800be62 <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 800bec4:	690a      	ldr	r2, [r1, #16]
 800bec6:	b95a      	cbnz	r2, 800bee0 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 800bec8:	2f01      	cmp	r7, #1
 800beca:	d00e      	beq.n	800beea <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800becc:	681a      	ldr	r2, [r3, #0]
}
 800bece:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bed0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800bed4:	601a      	str	r2, [r3, #0]
}
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800beda:	690a      	ldr	r2, [r1, #16]
 800bedc:	2a00      	cmp	r2, #0
 800bede:	d0f5      	beq.n	800becc <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bee0:	615a      	str	r2, [r3, #20]
 800bee2:	e7f1      	b.n	800bec8 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 800bee4:	690a      	ldr	r2, [r1, #16]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d1fa      	bne.n	800bee0 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800beea:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800beee:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	bf0c      	ite	eq
 800bef6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800befa:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	e7e4      	b.n	800becc <USB_EPStartXfer+0x1e4>
 800bf02:	bf00      	nop
 800bf04:	fff80000 	.word	0xfff80000
 800bf08:	e007ffff 	.word	0xe007ffff
 800bf0c:	1ff80000 	.word	0x1ff80000

0800bf10 <USB_EP0StartXfer>:
{
 800bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800bf14:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bf16:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bf18:	2c01      	cmp	r4, #1
 800bf1a:	d02a      	beq.n	800bf72 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf1c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800bf20:	4d4d      	ldr	r5, [pc, #308]	; (800c058 <USB_EP0StartXfer+0x148>)
    if (ep->xfer_len > 0U)
 800bf22:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf24:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 800bf28:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf2c:	4c4b      	ldr	r4, [pc, #300]	; (800c05c <USB_EP0StartXfer+0x14c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf2e:	403d      	ands	r5, r7
 800bf30:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf32:	691d      	ldr	r5, [r3, #16]
 800bf34:	402c      	ands	r4, r5
 800bf36:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800bf38:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 800bf3a:	b106      	cbz	r6, 800bf3e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800bf3c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf3e:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bf40:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800bf44:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf46:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800bf4a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bf4c:	691d      	ldr	r5, [r3, #16]
 800bf4e:	ea44 0405 	orr.w	r4, r4, r5
 800bf52:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800bf54:	d008      	beq.n	800bf68 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf56:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bf5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf5e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800bf62:	2000      	movs	r0, #0
 800bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800bf68:	68ca      	ldr	r2, [r1, #12]
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	d0f3      	beq.n	800bf56 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bf6e:	615a      	str	r2, [r3, #20]
 800bf70:	e7f1      	b.n	800bf56 <USB_EP0StartXfer+0x46>
    if (ep->xfer_len == 0U)
 800bf72:	694d      	ldr	r5, [r1, #20]
 800bf74:	b3ad      	cbz	r5, 800bfe2 <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf76:	eb00 1e43 	add.w	lr, r0, r3, lsl #5
 800bf7a:	4f37      	ldr	r7, [pc, #220]	; (800c058 <USB_EP0StartXfer+0x148>)
      if (ep->xfer_len > ep->maxpacket)
 800bf7c:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf80:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 800bf84:	f50e 6410 	add.w	r4, lr, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf88:	4e34      	ldr	r6, [pc, #208]	; (800c05c <USB_EP0StartXfer+0x14c>)
      if (ep->xfer_len > ep->maxpacket)
 800bf8a:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf8c:	ea08 0707 	and.w	r7, r8, r7
 800bf90:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf92:	6927      	ldr	r7, [r4, #16]
 800bf94:	ea06 0607 	and.w	r6, r6, r7
 800bf98:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf9a:	6926      	ldr	r6, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800bf9c:	d94a      	bls.n	800c034 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf9e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800bfa2:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfa6:	f3cc 0512 	ubfx	r5, ip, #0, #19
    if (dma == 1U)
 800bfaa:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfac:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfae:	6926      	ldr	r6, [r4, #16]
 800bfb0:	ea45 0506 	orr.w	r5, r5, r6
 800bfb4:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800bfb6:	d033      	beq.n	800c020 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfb8:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800bfbc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800bfc0:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800bfc4:	f1bc 0f00 	cmp.w	ip, #0
 800bfc8:	d0cb      	beq.n	800bf62 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bfca:	f003 010f 	and.w	r1, r3, #15
 800bfce:	2301      	movs	r3, #1
 800bfd0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800bfd4:	408b      	lsls	r3, r1
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfe2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800bfe6:	4e1d      	ldr	r6, [pc, #116]	; (800c05c <USB_EP0StartXfer+0x14c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bfe8:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
    if (dma == 1U)
 800bfec:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfee:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800bff2:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 800bff6:	ea06 0603 	and.w	r6, r6, r3
 800bffa:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bffc:	6926      	ldr	r6, [r4, #16]
 800bffe:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800c002:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	ea05 0503 	and.w	r5, r5, r3
 800c00a:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800c00c:	d008      	beq.n	800c020 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c00e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c016:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c01a:	2000      	movs	r0, #0
 800c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800c020:	690b      	ldr	r3, [r1, #16]
 800c022:	b103      	cbz	r3, 800c026 <USB_EP0StartXfer+0x116>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c024:	6163      	str	r3, [r4, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c026:	6823      	ldr	r3, [r4, #0]
}
 800c028:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c02a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c02e:	6023      	str	r3, [r4, #0]
}
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c034:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c038:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800c03c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c03e:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c040:	6926      	ldr	r6, [r4, #16]
 800c042:	ea45 0506 	orr.w	r5, r5, r6
 800c046:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800c048:	d0ea      	beq.n	800c020 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c04a:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800c04e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800c052:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800c056:	e7b8      	b.n	800bfca <USB_EP0StartXfer+0xba>
 800c058:	fff80000 	.word	0xfff80000
 800c05c:	e007ffff 	.word	0xe007ffff

0800c060 <USB_WritePacket>:
{
 800c060:	b410      	push	{r4}
 800c062:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800c066:	b964      	cbnz	r4, 800c082 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800c068:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800c06a:	089b      	lsrs	r3, r3, #2
 800c06c:	d009      	beq.n	800c082 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c06e:	3201      	adds	r2, #1
 800c070:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c074:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800c078:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800c07c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c07e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800c080:	d1fa      	bne.n	800c078 <USB_WritePacket+0x18>
}
 800c082:	2000      	movs	r0, #0
 800c084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop

0800c08c <USB_ReadPacket>:
{
 800c08c:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 800c08e:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800c090:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 800c094:	d00b      	beq.n	800c0ae <USB_ReadPacket+0x22>
 800c096:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800c09a:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800c09c:	2300      	movs	r3, #0
 800c09e:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c0a0:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 800c0a2:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c0a4:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800c0a8:	d1f9      	bne.n	800c09e <USB_ReadPacket+0x12>
 800c0aa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 800c0ae:	b177      	cbz	r7, 800c0ce <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0b0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800c0b4:	3f01      	subs	r7, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0b6:	6803      	ldr	r3, [r0, #0]
      remaining_bytes--;
 800c0b8:	b2bf      	uxth	r7, r7
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0ba:	700b      	strb	r3, [r1, #0]
    } while (remaining_bytes != 0U);
 800c0bc:	b12f      	cbz	r7, 800c0ca <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0be:	0a1a      	lsrs	r2, r3, #8
    } while (remaining_bytes != 0U);
 800c0c0:	2f01      	cmp	r7, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0c2:	704a      	strb	r2, [r1, #1]
    } while (remaining_bytes != 0U);
 800c0c4:	d001      	beq.n	800c0ca <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0c6:	0c1b      	lsrs	r3, r3, #16
 800c0c8:	708b      	strb	r3, [r1, #2]
    } while (remaining_bytes != 0U);
 800c0ca:	3701      	adds	r7, #1
 800c0cc:	4439      	add	r1, r7
}
 800c0ce:	4608      	mov	r0, r1
 800c0d0:	bcf0      	pop	{r4, r5, r6, r7}
 800c0d2:	4770      	bx	lr

0800c0d4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800c0d4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800c0d6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800c0d8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800c0de:	d00c      	beq.n	800c0fa <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0e0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800c0e4:	b10b      	cbz	r3, 800c0ea <USB_EPSetStall+0x16>
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	da14      	bge.n	800c114 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c0ea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c0ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0fa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	db00      	blt.n	800c104 <USB_EPSetStall+0x30>
 800c102:	b973      	cbnz	r3, 800c122 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c104:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c10c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c110:	2000      	movs	r0, #0
 800c112:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c114:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c11c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800c120:	e7e3      	b.n	800c0ea <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c122:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c12a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c12e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c136:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800c13a:	e7e9      	b.n	800c110 <USB_EPSetStall+0x3c>

0800c13c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800c13c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800c13e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800c140:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c142:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800c146:	d013      	beq.n	800c170 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c148:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c14c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c150:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c154:	78cb      	ldrb	r3, [r1, #3]
 800c156:	3b02      	subs	r3, #2
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d901      	bls.n	800c160 <USB_EPClearStall+0x24>
}
 800c15c:	2000      	movs	r0, #0
 800c15e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c160:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c168:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c16c:	2000      	movs	r0, #0
 800c16e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c170:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c178:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c17c:	78cb      	ldrb	r3, [r1, #3]
 800c17e:	3b02      	subs	r3, #2
 800c180:	2b01      	cmp	r3, #1
 800c182:	d8eb      	bhi.n	800c15c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c184:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c18c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c190:	2000      	movs	r0, #0
 800c192:	4770      	bx	lr

0800c194 <USB_SetDevAddress>:
{
 800c194:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c196:	0109      	lsls	r1, r1, #4
}
 800c198:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c19a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c19e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c1a2:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800c1a6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c1aa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800c1ae:	4311      	orrs	r1, r2
 800c1b0:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop

0800c1b8 <USB_DevConnect>:
{
 800c1b8:	4603      	mov	r3, r0
}
 800c1ba:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1bc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c1c0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1c4:	f022 0203 	bic.w	r2, r2, #3
 800c1c8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c1cc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c1d0:	f023 0302 	bic.w	r3, r3, #2
 800c1d4:	604b      	str	r3, [r1, #4]
}
 800c1d6:	4770      	bx	lr

0800c1d8 <USB_DevDisconnect>:
{
 800c1d8:	4603      	mov	r3, r0
}
 800c1da:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1dc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1e0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1e4:	f022 0203 	bic.w	r2, r2, #3
 800c1e8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	604b      	str	r3, [r1, #4]
}
 800c1f6:	4770      	bx	lr

0800c1f8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800c1f8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c1fa:	6980      	ldr	r0, [r0, #24]
}
 800c1fc:	4010      	ands	r0, r2
 800c1fe:	4770      	bx	lr

0800c200 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c200:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800c204:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c208:	69c0      	ldr	r0, [r0, #28]
 800c20a:	4018      	ands	r0, r3
}
 800c20c:	0c00      	lsrs	r0, r0, #16
 800c20e:	4770      	bx	lr

0800c210 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c210:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800c214:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c218:	69c0      	ldr	r0, [r0, #28]
 800c21a:	4018      	ands	r0, r3
}
 800c21c:	b280      	uxth	r0, r0
 800c21e:	4770      	bx	lr

0800c220 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c220:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c224:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c228:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c22c:	6940      	ldr	r0, [r0, #20]
}
 800c22e:	4010      	ands	r0, r2
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop

0800c234 <USB_ReadDevInEPInterrupt>:
{
 800c234:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 800c236:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c23a:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c23e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c242:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c246:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c248:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c24c:	01db      	lsls	r3, r3, #7
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	4323      	orrs	r3, r4
}
 800c252:	bc30      	pop	{r4, r5}
 800c254:	4018      	ands	r0, r3
 800c256:	4770      	bx	lr

0800c258 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800c258:	6940      	ldr	r0, [r0, #20]
}
 800c25a:	f000 0001 	and.w	r0, r0, #1
 800c25e:	4770      	bx	lr

0800c260 <USB_ActivateSetup>:
{
 800c260:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c262:	4a09      	ldr	r2, [pc, #36]	; (800c288 <USB_ActivateSetup+0x28>)
}
 800c264:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c266:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800c26a:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c26c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800c270:	4022      	ands	r2, r4
}
 800c272:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c276:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c27a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c282:	604b      	str	r3, [r1, #4]
}
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	fffff800 	.word	0xfffff800

0800c28c <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c28c:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <USB_EP0_OutStart+0x54>)
{
 800c28e:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c290:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c292:	429c      	cmp	r4, r3
 800c294:	d81a      	bhi.n	800c2cc <USB_EP0_OutStart+0x40>
 800c296:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c29a:	2300      	movs	r3, #0
  if (dma == 1U)
 800c29c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c29e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2a0:	6903      	ldr	r3, [r0, #16]
 800c2a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2a6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c2a8:	6903      	ldr	r3, [r0, #16]
 800c2aa:	f043 0318 	orr.w	r3, r3, #24
 800c2ae:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c2b0:	6903      	ldr	r3, [r0, #16]
 800c2b2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c2b6:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800c2b8:	d104      	bne.n	800c2c4 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c2ba:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c2bc:	6803      	ldr	r3, [r0, #0]
 800c2be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c2c2:	6003      	str	r3, [r0, #0]
}
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ca:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c2d0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dae0      	bge.n	800c29a <USB_EP0_OutStart+0xe>
}
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	4f54300a 	.word	0x4f54300a

0800c2e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2e6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c2ea:	b194      	cbz	r4, 800c312 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2ec:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c2f0:	b16b      	cbz	r3, 800c30e <USBD_CDC_EP0_RxReady+0x2a>
 800c2f2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c2f6:	28ff      	cmp	r0, #255	; 0xff
 800c2f8:	d009      	beq.n	800c30e <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c302:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c304:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800c306:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800c308:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800c30c:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800c30e:	2000      	movs	r0, #0
}
 800c310:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c312:	2003      	movs	r0, #3
}
 800c314:	bd10      	pop	{r4, pc}
 800c316:	bf00      	nop

0800c318 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c318:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c31a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c31e:	801a      	strh	r2, [r3, #0]
}
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	24000234 	.word	0x24000234

0800c328 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c328:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c32a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800c32c:	4801      	ldr	r0, [pc, #4]	; (800c334 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c32e:	801a      	strh	r2, [r3, #0]
}
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	24000278 	.word	0x24000278

0800c338 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c338:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c33a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c33c:	4801      	ldr	r0, [pc, #4]	; (800c344 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c33e:	801a      	strh	r2, [r3, #0]
}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	240002c8 	.word	0x240002c8

0800c348 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c348:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c34a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800c34c:	4801      	ldr	r0, [pc, #4]	; (800c354 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c34e:	801a      	strh	r2, [r3, #0]
}
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	240002bc 	.word	0x240002bc

0800c358 <USBD_CDC_DataOut>:
{
 800c358:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c35a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800c35e:	b175      	cbz	r5, 800c37e <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c360:	4604      	mov	r4, r0
 800c362:	f001 f915 	bl	800d590 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c366:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c36a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c36e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c378:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c37a:	2000      	movs	r0, #0
}
 800c37c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c37e:	2003      	movs	r0, #3
}
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	bf00      	nop

0800c384 <USBD_CDC_DataIn>:
{
 800c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800c386:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800c38a:	b367      	cbz	r7, 800c3e6 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c38c:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800c390:	4605      	mov	r5, r0
 800c392:	460a      	mov	r2, r1
 800c394:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c398:	69b3      	ldr	r3, [r6, #24]
 800c39a:	b96b      	cbnz	r3, 800c3b8 <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c39c:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800c3a0:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c3a2:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800c3a4:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c3a8:	b1db      	cbz	r3, 800c3e2 <USBD_CDC_DataIn+0x5e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3aa:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800c3ae:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800c3b2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c3b4:	4620      	mov	r0, r4
}
 800c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3b8:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800c3bc:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800c3c0:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800c3c4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800c3c8:	fbb3 f4fc 	udiv	r4, r3, ip
 800c3cc:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c3d0:	2c00      	cmp	r4, #0
 800c3d2:	d1e3      	bne.n	800c39c <USBD_CDC_DataIn+0x18>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3d4:	4623      	mov	r3, r4
 800c3d6:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800c3d8:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3da:	f001 f8bd 	bl	800d558 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800c3de:	4620      	mov	r0, r4
}
 800c3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 800c3e2:	4618      	mov	r0, r3
}
 800c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800c3e6:	2003      	movs	r0, #3
}
 800c3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ea:	bf00      	nop

0800c3ec <USBD_CDC_Setup>:
{
 800c3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800c3f0:	2300      	movs	r3, #0
{
 800c3f2:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3f4:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c3f8:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800c3fc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800c400:	2f00      	cmp	r7, #0
 800c402:	d067      	beq.n	800c4d4 <USBD_CDC_Setup+0xe8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c404:	780e      	ldrb	r6, [r1, #0]
 800c406:	4680      	mov	r8, r0
 800c408:	460c      	mov	r4, r1
 800c40a:	f016 0560 	ands.w	r5, r6, #96	; 0x60
 800c40e:	d01e      	beq.n	800c44e <USBD_CDC_Setup+0x62>
 800c410:	2d20      	cmp	r5, #32
 800c412:	d008      	beq.n	800c426 <USBD_CDC_Setup+0x3a>
          ret = USBD_FAIL;
 800c414:	2503      	movs	r5, #3
          USBD_CtlError(pdev, req);
 800c416:	4621      	mov	r1, r4
 800c418:	4640      	mov	r0, r8
 800c41a:	f000 fd4f 	bl	800cebc <USBD_CtlError>
}
 800c41e:	4628      	mov	r0, r5
 800c420:	b002      	add	sp, #8
 800c422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 800c426:	88ca      	ldrh	r2, [r1, #6]
 800c428:	b382      	cbz	r2, 800c48c <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800c42a:	0631      	lsls	r1, r6, #24
 800c42c:	d557      	bpl.n	800c4de <USBD_CDC_Setup+0xf2>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c42e:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
 800c432:	4639      	mov	r1, r7
 800c434:	7860      	ldrb	r0, [r4, #1]
 800c436:	68ae      	ldr	r6, [r5, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800c438:	461d      	mov	r5, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c43a:	47b0      	blx	r6
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c43c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c43e:	4639      	mov	r1, r7
 800c440:	4640      	mov	r0, r8
 800c442:	2a07      	cmp	r2, #7
 800c444:	bf28      	it	cs
 800c446:	2207      	movcs	r2, #7
 800c448:	f000 fd6a 	bl	800cf20 <USBD_CtlSendData>
 800c44c:	e7e7      	b.n	800c41e <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800c44e:	784b      	ldrb	r3, [r1, #1]
 800c450:	2b0b      	cmp	r3, #11
 800c452:	d8df      	bhi.n	800c414 <USBD_CDC_Setup+0x28>
 800c454:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <USBD_CDC_Setup+0x70>)
 800c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45a:	bf00      	nop
 800c45c:	0800c4bf 	.word	0x0800c4bf
 800c460:	0800c41f 	.word	0x0800c41f
 800c464:	0800c415 	.word	0x0800c415
 800c468:	0800c415 	.word	0x0800c415
 800c46c:	0800c415 	.word	0x0800c415
 800c470:	0800c415 	.word	0x0800c415
 800c474:	0800c415 	.word	0x0800c415
 800c478:	0800c415 	.word	0x0800c415
 800c47c:	0800c415 	.word	0x0800c415
 800c480:	0800c415 	.word	0x0800c415
 800c484:	0800c4ab 	.word	0x0800c4ab
 800c488:	0800c4a1 	.word	0x0800c4a1
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c48c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800c490:	4615      	mov	r5, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c492:	7848      	ldrb	r0, [r1, #1]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	4798      	blx	r3
}
 800c498:	4628      	mov	r0, r5
 800c49a:	b002      	add	sp, #8
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c4a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d0ba      	beq.n	800c41e <USBD_CDC_Setup+0x32>
 800c4a8:	e7b4      	b.n	800c414 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d1b0      	bne.n	800c414 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f10d 0105 	add.w	r1, sp, #5
 800c4b8:	f000 fd32 	bl	800cf20 <USBD_CtlSendData>
 800c4bc:	e7af      	b.n	800c41e <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4be:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c4c2:	2a03      	cmp	r2, #3
 800c4c4:	d1a6      	bne.n	800c414 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800c4cc:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c4ce:	f000 fd27 	bl	800cf20 <USBD_CtlSendData>
 800c4d2:	e7a4      	b.n	800c41e <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800c4d4:	2503      	movs	r5, #3
}
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	b002      	add	sp, #8
 800c4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 800c4de:	7864      	ldrb	r4, [r4, #1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c4e0:	4639      	mov	r1, r7
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c4e2:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e6:	461d      	mov	r5, r3
          hcdc->CmdOpCode = req->bRequest;
 800c4e8:	f887 4200 	strb.w	r4, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c4ec:	f000 fd30 	bl	800cf50 <USBD_CtlPrepareRx>
 800c4f0:	e795      	b.n	800c41e <USBD_CDC_Setup+0x32>
 800c4f2:	bf00      	nop

0800c4f4 <USBD_CDC_DeInit>:
{
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c4f8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c4fa:	2181      	movs	r1, #129	; 0x81
 800c4fc:	f000 ffe0 	bl	800d4c0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c500:	2101      	movs	r1, #1
 800c502:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c504:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c506:	f000 ffdb 	bl	800d4c0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c50a:	4620      	mov	r0, r4
 800c50c:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c50e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c512:	f000 ffd5 	bl	800d4c0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800c516:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c51a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800c51c:	b14b      	cbz	r3, 800c532 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c51e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c526:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c52a:	f001 f839 	bl	800d5a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c52e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c532:	2000      	movs	r0, #0
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	bf00      	nop

0800c538 <USBD_CDC_Init>:
{
 800c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c53e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c542:	f001 f829 	bl	800d598 <USBD_static_malloc>
  if (hcdc == NULL)
 800c546:	4605      	mov	r5, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d04d      	beq.n	800c5e8 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c54c:	7c23      	ldrb	r3, [r4, #16]
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c54e:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800c550:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c554:	b38b      	cbz	r3, 800c5ba <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c556:	2340      	movs	r3, #64	; 0x40
 800c558:	2181      	movs	r1, #129	; 0x81
 800c55a:	2202      	movs	r2, #2
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 ff9d 	bl	800d49c <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c562:	4631      	mov	r1, r6
 800c564:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c566:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c568:	2202      	movs	r2, #2
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 ff96 	bl	800d49c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c570:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c572:	2203      	movs	r2, #3
 800c574:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c576:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c57a:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c57c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c580:	2308      	movs	r3, #8
 800c582:	f000 ff8b 	bl	800d49c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c586:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c58a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800c58e:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c590:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c598:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800c59c:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a0:	7c26      	ldrb	r6, [r4, #16]
 800c5a2:	b9b6      	cbnz	r6, 800c5d2 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5a4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c5a8:	4641      	mov	r1, r8
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5b0:	f000 ffe0 	bl	800d574 <USBD_LL_PrepareReceive>
}
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5be:	2181      	movs	r1, #129	; 0x81
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 ff6a 	bl	800d49c <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c5ce:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c5d0:	e7ca      	b.n	800c568 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 800c5d2:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c5d8:	4641      	mov	r1, r8
 800c5da:	4620      	mov	r0, r4
 800c5dc:	2340      	movs	r3, #64	; 0x40
 800c5de:	f000 ffc9 	bl	800d574 <USBD_LL_PrepareReceive>
}
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800c5e8:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800c5ea:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5f4 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800c5f4:	b119      	cbz	r1, 800c5fe <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800c5f6:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c5fe:	2003      	movs	r0, #3
}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop

0800c604 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c604:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c608:	b12b      	cbz	r3, 800c616 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800c60a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c60c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c610:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800c614:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c616:	2003      	movs	r0, #3
}
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop

0800c61c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c61c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c620:	b11b      	cbz	r3, 800c62a <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800c622:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c624:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800c628:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c62a:	2003      	movs	r0, #3
}
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop

0800c630 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c630:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c632:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800c636:	b18d      	cbz	r5, 800c65c <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800c638:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c63c:	b10c      	cbz	r4, 800c642 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c63e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800c640:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c642:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    hcdc->TxState = 1U;
 800c646:	2101      	movs	r1, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c648:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    hcdc->TxState = 1U;
 800c64c:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c650:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c652:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c654:	f000 ff80 	bl	800d558 <USBD_LL_Transmit>
    ret = USBD_OK;
 800c658:	4620      	mov	r0, r4
}
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c65c:	2003      	movs	r0, #3
}
 800c65e:	bd38      	pop	{r3, r4, r5, pc}

0800c660 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c660:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c664:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800c666:	b18a      	cbz	r2, 800c68c <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c668:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c66a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c66e:	b134      	cbz	r4, 800c67e <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c670:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c672:	2340      	movs	r3, #64	; 0x40
 800c674:	2101      	movs	r1, #1
 800c676:	f000 ff7d 	bl	800d574 <USBD_LL_PrepareReceive>
}
 800c67a:	4620      	mov	r0, r4
 800c67c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c67e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c682:	2101      	movs	r1, #1
 800c684:	f000 ff76 	bl	800d574 <USBD_LL_PrepareReceive>
}
 800c688:	4620      	mov	r0, r4
 800c68a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c68c:	2403      	movs	r4, #3
}
 800c68e:	4620      	mov	r0, r4
 800c690:	bd10      	pop	{r4, pc}
 800c692:	bf00      	nop

0800c694 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c694:	b178      	cbz	r0, 800c6b6 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c69c:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c6a0:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c6a4:	b109      	cbz	r1, 800c6aa <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c6a6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6aa:	2301      	movs	r3, #1
  pdev->id = id;
 800c6ac:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6b2:	f000 beb1 	b.w	800d418 <USBD_LL_Init>

  return ret;
}
 800c6b6:	2003      	movs	r0, #3
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop

0800c6bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6bc:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800c6be:	2400      	movs	r4, #0
{
 800c6c0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800c6c2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800c6c6:	b181      	cbz	r1, 800c6ea <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c6c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c6ca:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800c6cc:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c6d0:	b143      	cbz	r3, 800c6e4 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c6d2:	f10d 0006 	add.w	r0, sp, #6
 800c6d6:	4798      	blx	r3
 800c6d8:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c6da:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c6dc:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800c6e0:	b003      	add	sp, #12
 800c6e2:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800c6e4:	4618      	mov	r0, r3
}
 800c6e6:	b003      	add	sp, #12
 800c6e8:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800c6ea:	2003      	movs	r0, #3
}
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bd30      	pop	{r4, r5, pc}

0800c6f0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6f0:	f000 bec6 	b.w	800d480 <USBD_LL_Start>

0800c6f4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c6f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c6f8:	b10b      	cbz	r3, 800c6fe <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4718      	bx	r3
  }

  return ret;
}
 800c6fe:	2003      	movs	r0, #3
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop

0800c704 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c704:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c706:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c70a:	b10b      	cbz	r3, 800c710 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c710:	2000      	movs	r0, #0
 800c712:	bd08      	pop	{r3, pc}

0800c714 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c714:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c716:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800c71a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c71c:	4628      	mov	r0, r5
 800c71e:	f000 fbb9 	bl	800ce94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800c722:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800c726:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800c728:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800c72c:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800c730:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c734:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800c736:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800c73a:	d009      	beq.n	800c750 <USBD_LL_SetupStage+0x3c>
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d013      	beq.n	800c768 <USBD_LL_SetupStage+0x54>
 800c740:	b163      	cbz	r3, 800c75c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c742:	4620      	mov	r0, r4
 800c744:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c74c:	f000 bec6 	b.w	800d4dc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
}
 800c754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c758:	f000 bac8 	b.w	800ccec <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c75c:	4629      	mov	r1, r5
 800c75e:	4620      	mov	r0, r4
}
 800c760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c764:	f000 b924 	b.w	800c9b0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c768:	4629      	mov	r1, r5
 800c76a:	4620      	mov	r0, r4
}
 800c76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c770:	f000 baf4 	b.w	800cd5c <USBD_StdEPReq>

0800c774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c774:	b570      	push	{r4, r5, r6, lr}
 800c776:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c778:	b929      	cbnz	r1, 800c786 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c77a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d00d      	beq.n	800c79e <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800c782:	2000      	movs	r0, #0
 800c784:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c786:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d1f9      	bne.n	800c782 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800c78e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d0f4      	beq.n	800c782 <USBD_LL_DataOutStage+0xe>
}
 800c798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c79c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c79e:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800c7a2:	42ab      	cmp	r3, r5
 800c7a4:	d808      	bhi.n	800c7b8 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7aa:	2b03      	cmp	r3, #3
 800c7ac:	d00f      	beq.n	800c7ce <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 fbe6 	bl	800cf80 <USBD_CtlSendStatus>
}
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c7b8:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	462a      	mov	r2, r5
 800c7be:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800c7c0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7c4:	bf28      	it	cs
 800c7c6:	461a      	movcs	r2, r3
 800c7c8:	f000 fbd0 	bl	800cf6c <USBD_CtlContinueRx>
 800c7cc:	e7d9      	b.n	800c782 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c7ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0ea      	beq.n	800c7ae <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800c7d8:	4798      	blx	r3
 800c7da:	e7e8      	b.n	800c7ae <USBD_LL_DataOutStage+0x3a>

0800c7dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c7e0:	b949      	cbnz	r1, 800c7f6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7e2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d011      	beq.n	800c80e <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c7ea:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d022      	beq.n	800c838 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d1f9      	bne.n	800c7f2 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800c7fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0f4      	beq.n	800c7f2 <USBD_LL_DataInStage+0x16>
}
 800c808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c80c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c80e:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800c812:	460d      	mov	r5, r1
 800c814:	42b3      	cmp	r3, r6
 800c816:	d814      	bhi.n	800c842 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800c818:	d020      	beq.n	800c85c <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c81a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d029      	beq.n	800c876 <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c822:	2180      	movs	r1, #128	; 0x80
 800c824:	4620      	mov	r0, r4
 800c826:	f000 fe59 	bl	800d4dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 fbb4 	bl	800cf98 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c830:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c834:	2b01      	cmp	r3, #1
 800c836:	d1dc      	bne.n	800c7f2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800c83c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c840:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c842:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c844:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c846:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c848:	461a      	mov	r2, r3
 800c84a:	f000 fb77 	bl	800cf3c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c84e:	462b      	mov	r3, r5
 800c850:	462a      	mov	r2, r5
 800c852:	4629      	mov	r1, r5
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fe8d 	bl	800d574 <USBD_LL_PrepareReceive>
 800c85a:	e7c6      	b.n	800c7ea <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800c85c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c85e:	4293      	cmp	r3, r2
 800c860:	d8db      	bhi.n	800c81a <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800c862:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800c866:	429a      	cmp	r2, r3
 800c868:	d2d7      	bcs.n	800c81a <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c86a:	460a      	mov	r2, r1
 800c86c:	f000 fb66 	bl	800cf3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c870:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800c874:	e7eb      	b.n	800c84e <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c876:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0d0      	beq.n	800c822 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800c880:	4620      	mov	r0, r4
 800c882:	4798      	blx	r3
 800c884:	e7cd      	b.n	800c822 <USBD_LL_DataInStage+0x46>
 800c886:	bf00      	nop

0800c888 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c888:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c88a:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c88c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c890:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c894:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c896:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c89a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c89e:	b1eb      	cbz	r3, 800c8dc <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c8a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c8a8:	b112      	cbz	r2, 800c8b0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	b103      	cbz	r3, 800c8b0 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8ae:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8b0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8b2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8b4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	f000 fdee 	bl	800d49c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2180      	movs	r1, #128	; 0x80
 800c8c6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8c8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8cc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8d0:	f000 fde4 	bl	800d49c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800c8d4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8d6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8d8:	6225      	str	r5, [r4, #32]
}
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c8dc:	2003      	movs	r0, #3
}
 800c8de:	4770      	bx	lr

0800c8e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8e0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800c8e2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c8e4:	7419      	strb	r1, [r3, #16]
}
 800c8e6:	4770      	bx	lr

0800c8e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8e8:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8ea:	2104      	movs	r1, #4

  return USBD_OK;
}
 800c8ec:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800c8ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c8f2:	b2d2      	uxtb	r2, r2
 800c8f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8f8:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop

0800c900 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c900:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c904:	2b04      	cmp	r3, #4
 800c906:	d104      	bne.n	800c912 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c908:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800c912:	2000      	movs	r0, #0
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop

0800c918 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800c918:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c91c:	b15a      	cbz	r2, 800c936 <USBD_LL_SOF+0x1e>
{
 800c91e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c920:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c924:	2b03      	cmp	r3, #3
 800c926:	d001      	beq.n	800c92c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800c928:	2000      	movs	r0, #0
}
 800c92a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c92c:	69d3      	ldr	r3, [r2, #28]
 800c92e:	b123      	cbz	r3, 800c93a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800c930:	4798      	blx	r3
  return USBD_OK;
 800c932:	2000      	movs	r0, #0
}
 800c934:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c936:	2003      	movs	r0, #3
}
 800c938:	4770      	bx	lr
  return USBD_OK;
 800c93a:	4618      	mov	r0, r3
}
 800c93c:	bd08      	pop	{r3, pc}
 800c93e:	bf00      	nop

0800c940 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c940:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c944:	b15a      	cbz	r2, 800c95e <USBD_LL_IsoINIncomplete+0x1e>
{
 800c946:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c948:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d001      	beq.n	800c954 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c950:	2000      	movs	r0, #0
}
 800c952:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c954:	6a13      	ldr	r3, [r2, #32]
 800c956:	b123      	cbz	r3, 800c962 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c958:	4798      	blx	r3
  return USBD_OK;
 800c95a:	2000      	movs	r0, #0
}
 800c95c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c95e:	2003      	movs	r0, #3
}
 800c960:	4770      	bx	lr
  return USBD_OK;
 800c962:	4618      	mov	r0, r3
}
 800c964:	bd08      	pop	{r3, pc}
 800c966:	bf00      	nop

0800c968 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c968:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c96c:	b15a      	cbz	r2, 800c986 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800c96e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c970:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c974:	2b03      	cmp	r3, #3
 800c976:	d001      	beq.n	800c97c <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c978:	2000      	movs	r0, #0
}
 800c97a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c97c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c97e:	b123      	cbz	r3, 800c98a <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c980:	4798      	blx	r3
  return USBD_OK;
 800c982:	2000      	movs	r0, #0
}
 800c984:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c986:	2003      	movs	r0, #3
}
 800c988:	4770      	bx	lr
  return USBD_OK;
 800c98a:	4618      	mov	r0, r3
}
 800c98c:	bd08      	pop	{r3, pc}
 800c98e:	bf00      	nop

0800c990 <USBD_LL_DevConnected>:
 800c990:	2000      	movs	r0, #0
 800c992:	4770      	bx	lr

0800c994 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c994:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800c996:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c99a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800c99e:	b12a      	cbz	r2, 800c9ac <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9a0:	6852      	ldr	r2, [r2, #4]
 800c9a2:	7901      	ldrb	r1, [r0, #4]
{
 800c9a4:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9a6:	4790      	blx	r2
  }

  return USBD_OK;
}
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	bd08      	pop	{r3, pc}
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	4770      	bx	lr

0800c9b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	780c      	ldrb	r4, [r1, #0]
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	460e      	mov	r6, r1
 800c9b8:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ba:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c9be:	2c20      	cmp	r4, #32
 800c9c0:	d00e      	beq.n	800c9e0 <USBD_StdDevReq+0x30>
 800c9c2:	2c40      	cmp	r4, #64	; 0x40
 800c9c4:	d00c      	beq.n	800c9e0 <USBD_StdDevReq+0x30>
 800c9c6:	b1ac      	cbz	r4, 800c9f4 <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9c8:	2180      	movs	r1, #128	; 0x80
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 fd86 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c9d4:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9d6:	f000 fd81 	bl	800d4dc <USBD_LL_StallEP>
}
 800c9da:	4620      	mov	r0, r4
 800c9dc:	b002      	add	sp, #8
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9e0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	4798      	blx	r3
 800c9ec:	4604      	mov	r4, r0
}
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	b002      	add	sp, #8
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800c9f4:	784b      	ldrb	r3, [r1, #1]
 800c9f6:	2b09      	cmp	r3, #9
 800c9f8:	d8e6      	bhi.n	800c9c8 <USBD_StdDevReq+0x18>
 800c9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <USBD_StdDevReq+0x50>)
 800c9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca00:	0800ca61 	.word	0x0800ca61
 800ca04:	0800ca8f 	.word	0x0800ca8f
 800ca08:	0800c9c9 	.word	0x0800c9c9
 800ca0c:	0800caab 	.word	0x0800caab
 800ca10:	0800c9c9 	.word	0x0800c9c9
 800ca14:	0800cabd 	.word	0x0800cabd
 800ca18:	0800caf5 	.word	0x0800caf5
 800ca1c:	0800c9c9 	.word	0x0800c9c9
 800ca20:	0800cb11 	.word	0x0800cb11
 800ca24:	0800ca29 	.word	0x0800ca29
  cfgidx = (uint8_t)(req->wValue);
 800ca28:	7889      	ldrb	r1, [r1, #2]
 800ca2a:	4eaf      	ldr	r6, [pc, #700]	; (800cce8 <USBD_StdDevReq+0x338>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca2c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800ca2e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca30:	f200 813d 	bhi.w	800ccae <USBD_StdDevReq+0x2fe>
  switch (pdev->dev_state)
 800ca34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	f000 8125 	beq.w	800cc8a <USBD_StdDevReq+0x2da>
 800ca40:	2a03      	cmp	r2, #3
 800ca42:	f000 80ff 	beq.w	800cc44 <USBD_StdDevReq+0x294>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca46:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800ca48:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca4a:	f000 fd47 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca4e:	2100      	movs	r1, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	f000 fd43 	bl	800d4dc <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca56:	7831      	ldrb	r1, [r6, #0]
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f7ff fe53 	bl	800c704 <USBD_ClrClassConfig>
      break;
 800ca5e:	e7bc      	b.n	800c9da <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ca60:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ca64:	3a01      	subs	r2, #1
 800ca66:	2a02      	cmp	r2, #2
 800ca68:	d86a      	bhi.n	800cb40 <USBD_StdDevReq+0x190>
      if (req->wLength != 0x2U)
 800ca6a:	88ca      	ldrh	r2, [r1, #6]
 800ca6c:	2a02      	cmp	r2, #2
 800ca6e:	d167      	bne.n	800cb40 <USBD_StdDevReq+0x190>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca70:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800ca72:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca76:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ca78:	b10a      	cbz	r2, 800ca7e <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca7a:	2203      	movs	r2, #3
 800ca7c:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f105 010c 	add.w	r1, r5, #12
 800ca84:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800ca86:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca88:	f000 fa4a 	bl	800cf20 <USBD_CtlSendData>
      break;
 800ca8c:	e7a5      	b.n	800c9da <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ca8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca92:	3b01      	subs	r3, #1
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d853      	bhi.n	800cb40 <USBD_StdDevReq+0x190>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca98:	884b      	ldrh	r3, [r1, #2]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d19d      	bne.n	800c9da <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800caa4:	f000 fa6c 	bl	800cf80 <USBD_CtlSendStatus>
 800caa8:	e797      	b.n	800c9da <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caaa:	884b      	ldrh	r3, [r1, #2]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d194      	bne.n	800c9da <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800cab0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 fa63 	bl	800cf80 <USBD_CtlSendStatus>
 800caba:	e78e      	b.n	800c9da <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cabc:	888b      	ldrh	r3, [r1, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d13e      	bne.n	800cb40 <USBD_StdDevReq+0x190>
 800cac2:	88cb      	ldrh	r3, [r1, #6]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d13b      	bne.n	800cb40 <USBD_StdDevReq+0x190>
 800cac8:	884e      	ldrh	r6, [r1, #2]
 800caca:	2e7f      	cmp	r6, #127	; 0x7f
 800cacc:	d838      	bhi.n	800cb40 <USBD_StdDevReq+0x190>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cace:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d034      	beq.n	800cb40 <USBD_StdDevReq+0x190>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cad6:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800cad8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cadc:	f000 fd2e 	bl	800d53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cae0:	4628      	mov	r0, r5
 800cae2:	f000 fa4d 	bl	800cf80 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	f040 80cb 	bne.w	800cc82 <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800caec:	2301      	movs	r3, #1
 800caee:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800caf2:	e772      	b.n	800c9da <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 800caf4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800caf6:	2100      	movs	r1, #0
 800caf8:	0a13      	lsrs	r3, r2, #8
 800cafa:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800cafe:	3b01      	subs	r3, #1
 800cb00:	2b06      	cmp	r3, #6
 800cb02:	d81d      	bhi.n	800cb40 <USBD_StdDevReq+0x190>
 800cb04:	e8df f003 	tbb	[pc, r3]
 800cb08:	1c4d606d 	.word	0x1c4d606d
 800cb0c:	431c      	.short	0x431c
 800cb0e:	27          	.byte	0x27
 800cb0f:	00          	.byte	0x00
  if (req->wLength != 1U)
 800cb10:	88ca      	ldrh	r2, [r1, #6]
 800cb12:	2a01      	cmp	r2, #1
 800cb14:	d114      	bne.n	800cb40 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800cb16:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800cb1a:	2902      	cmp	r1, #2
 800cb1c:	b2cb      	uxtb	r3, r1
 800cb1e:	f200 808a 	bhi.w	800cc36 <USBD_StdDevReq+0x286>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f43f af50 	beq.w	800c9c8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb30:	f000 f9f6 	bl	800cf20 <USBD_CtlSendData>
        break;
 800cb34:	e751      	b.n	800c9da <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d15d      	bne.n	800cbfc <USBD_StdDevReq+0x24c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb40:	2180      	movs	r1, #128	; 0x80
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 fcca 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb48:	4628      	mov	r0, r5
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f000 fcc6 	bl	800d4dc <USBD_LL_StallEP>
}
 800cb50:	4620      	mov	r0, r4
 800cb52:	b002      	add	sp, #8
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb56:	7c03      	ldrb	r3, [r0, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f1      	bne.n	800cb40 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cb60:	f10d 0006 	add.w	r0, sp, #6
 800cb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb68:	2307      	movs	r3, #7
 800cb6a:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800cb6c:	88f2      	ldrh	r2, [r6, #6]
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	d0a0      	beq.n	800cab4 <USBD_StdDevReq+0x104>
    if (len != 0U)
 800cb72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0e2      	beq.n	800cb40 <USBD_StdDevReq+0x190>
      len = MIN(len, req->wLength);
 800cb7a:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb7c:	4601      	mov	r1, r0
 800cb7e:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800cb80:	bf28      	it	cs
 800cb82:	461a      	movcs	r2, r3
 800cb84:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb88:	f000 f9ca 	bl	800cf20 <USBD_CtlSendData>
 800cb8c:	e725      	b.n	800c9da <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb8e:	7c03      	ldrb	r3, [r0, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1d5      	bne.n	800cb40 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb94:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cb98:	f10d 0006 	add.w	r0, sp, #6
 800cb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9e:	4798      	blx	r3
  if (err != 0U)
 800cba0:	e7e4      	b.n	800cb6c <USBD_StdDevReq+0x1bc>
      switch ((uint8_t)(req->wValue))
 800cba2:	b2d2      	uxtb	r2, r2
 800cba4:	2a05      	cmp	r2, #5
 800cba6:	d8cb      	bhi.n	800cb40 <USBD_StdDevReq+0x190>
 800cba8:	a301      	add	r3, pc, #4	; (adr r3, 800cbb0 <USBD_StdDevReq+0x200>)
 800cbaa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800cbae:	bf00      	nop
 800cbb0:	0800cb37 	.word	0x0800cb37
 800cbb4:	0800cc2b 	.word	0x0800cc2b
 800cbb8:	0800cc1f 	.word	0x0800cc1f
 800cbbc:	0800cc13 	.word	0x0800cc13
 800cbc0:	0800cc07 	.word	0x0800cc07
 800cbc4:	0800cbf3 	.word	0x0800cbf3
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbc8:	7c03      	ldrb	r3, [r0, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f040 8083 	bne.w	800ccd6 <USBD_StdDevReq+0x326>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cbd0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cbd4:	f10d 0006 	add.w	r0, sp, #6
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbda:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cbe0:	e7c4      	b.n	800cb6c <USBD_StdDevReq+0x1bc>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbe2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbe6:	f10d 0106 	add.w	r1, sp, #6
 800cbea:	7c00      	ldrb	r0, [r0, #16]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4798      	blx	r3
  if (err != 0U)
 800cbf0:	e7bc      	b.n	800cb6c <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbf2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0a1      	beq.n	800cb40 <USBD_StdDevReq+0x190>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbfc:	f10d 0106 	add.w	r1, sp, #6
 800cc00:	7c28      	ldrb	r0, [r5, #16]
 800cc02:	4798      	blx	r3
  if (err != 0U)
 800cc04:	e7b2      	b.n	800cb6c <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f5      	bne.n	800cbfc <USBD_StdDevReq+0x24c>
 800cc10:	e796      	b.n	800cb40 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1ef      	bne.n	800cbfc <USBD_StdDevReq+0x24c>
 800cc1c:	e790      	b.n	800cb40 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e9      	bne.n	800cbfc <USBD_StdDevReq+0x24c>
 800cc28:	e78a      	b.n	800cb40 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e3      	bne.n	800cbfc <USBD_StdDevReq+0x24c>
 800cc34:	e784      	b.n	800cb40 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800cc36:	2b03      	cmp	r3, #3
 800cc38:	f47f aec6 	bne.w	800c9c8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc3c:	1d01      	adds	r1, r0, #4
 800cc3e:	f000 f96f 	bl	800cf20 <USBD_CtlSendData>
        break;
 800cc42:	e6ca      	b.n	800c9da <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d03b      	beq.n	800ccc0 <USBD_StdDevReq+0x310>
      else if (cfgidx != pdev->dev_config)
 800cc48:	6841      	ldr	r1, [r0, #4]
 800cc4a:	2901      	cmp	r1, #1
 800cc4c:	f43f af32 	beq.w	800cab4 <USBD_StdDevReq+0x104>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc50:	b2c9      	uxtb	r1, r1
 800cc52:	f7ff fd57 	bl	800c704 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc56:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc58:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800cc5a:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc5c:	f7ff fd4a 	bl	800c6f4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cc60:	4606      	mov	r6, r0
 800cc62:	2800      	cmp	r0, #0
 800cc64:	f43f af26 	beq.w	800cab4 <USBD_StdDevReq+0x104>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc68:	2180      	movs	r1, #128	; 0x80
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f000 fc36 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc70:	2100      	movs	r1, #0
 800cc72:	4628      	mov	r0, r5
 800cc74:	4634      	mov	r4, r6
 800cc76:	f000 fc31 	bl	800d4dc <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc7a:	7929      	ldrb	r1, [r5, #4]
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7ff fd41 	bl	800c704 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc82:	2302      	movs	r3, #2
 800cc84:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cc88:	e6a7      	b.n	800c9da <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800cc8a:	2900      	cmp	r1, #0
 800cc8c:	f43f af12 	beq.w	800cab4 <USBD_StdDevReq+0x104>
        pdev->dev_config = cfgidx;
 800cc90:	2101      	movs	r1, #1
 800cc92:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc94:	f7ff fd2e 	bl	800c6f4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cc98:	4604      	mov	r4, r0
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f47f af50 	bne.w	800cb40 <USBD_StdDevReq+0x190>
          (void)USBD_CtlSendStatus(pdev);
 800cca0:	4628      	mov	r0, r5
 800cca2:	f000 f96d 	bl	800cf80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cca6:	2303      	movs	r3, #3
 800cca8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ccac:	e695      	b.n	800c9da <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccae:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ccb0:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccb2:	f000 fc13 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	2100      	movs	r1, #0
 800ccba:	f000 fc0f 	bl	800d4dc <USBD_LL_StallEP>
    return USBD_FAIL;
 800ccbe:	e68c      	b.n	800c9da <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccc0:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800ccc2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccc4:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccca:	f7ff fd1b 	bl	800c704 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 f956 	bl	800cf80 <USBD_CtlSendStatus>
 800ccd4:	e681      	b.n	800c9da <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ccd6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ccda:	f10d 0006 	add.w	r0, sp, #6
 800ccde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cce2:	2302      	movs	r3, #2
 800cce4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cce6:	e741      	b.n	800cb6c <USBD_StdDevReq+0x1bc>
 800cce8:	24000684 	.word	0x24000684

0800ccec <USBD_StdItfReq>:
{
 800ccec:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccee:	780b      	ldrb	r3, [r1, #0]
{
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccf4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800ccf8:	2a40      	cmp	r2, #64	; 0x40
 800ccfa:	d00b      	beq.n	800cd14 <USBD_StdItfReq+0x28>
 800ccfc:	065b      	lsls	r3, r3, #25
 800ccfe:	d509      	bpl.n	800cd14 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800cd00:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd02:	2180      	movs	r1, #128	; 0x80
 800cd04:	f000 fbea 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	f000 fbe6 	bl	800d4dc <USBD_LL_StallEP>
}
 800cd10:	4628      	mov	r0, r5
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800cd14:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d812      	bhi.n	800cd44 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd1e:	792b      	ldrb	r3, [r5, #4]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d80f      	bhi.n	800cd44 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd24:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd30:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd32:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1eb      	bne.n	800cd10 <USBD_StdItfReq+0x24>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1e9      	bne.n	800cd10 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 f91f 	bl	800cf80 <USBD_CtlSendStatus>
 800cd42:	e7e5      	b.n	800cd10 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd44:	2180      	movs	r1, #128	; 0x80
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 fbc8 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800cd50:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd52:	f000 fbc3 	bl	800d4dc <USBD_LL_StallEP>
}
 800cd56:	4628      	mov	r0, r5
 800cd58:	bd38      	pop	{r3, r4, r5, pc}
 800cd5a:	bf00      	nop

0800cd5c <USBD_StdEPReq>:
{
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	780b      	ldrb	r3, [r1, #0]
 800cd60:	460d      	mov	r5, r1
 800cd62:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd68:	2b20      	cmp	r3, #32
 800cd6a:	d01b      	beq.n	800cda4 <USBD_StdEPReq+0x48>
 800cd6c:	2b40      	cmp	r3, #64	; 0x40
 800cd6e:	d019      	beq.n	800cda4 <USBD_StdEPReq+0x48>
 800cd70:	b303      	cbz	r3, 800cdb4 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd72:	2180      	movs	r1, #128	; 0x80
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 fbb1 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	f000 fbad 	bl	800d4dc <USBD_LL_StallEP>
}
 800cd82:	2000      	movs	r0, #0
 800cd84:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800cd86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	d04e      	beq.n	800ce2e <USBD_StdEPReq+0xd2>
 800cd90:	2a03      	cmp	r2, #3
 800cd92:	d1ee      	bne.n	800cd72 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd94:	886b      	ldrh	r3, [r5, #2]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1f3      	bne.n	800cd82 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd9a:	064e      	lsls	r6, r1, #25
 800cd9c:	d172      	bne.n	800ce84 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f000 f8ee 	bl	800cf80 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cda4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800cda8:	4629      	mov	r1, r5
 800cdaa:	4620      	mov	r0, r4
 800cdac:	689b      	ldr	r3, [r3, #8]
}
 800cdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cdb2:	4718      	bx	r3
      switch (req->bRequest)
 800cdb4:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800cdb6:	888a      	ldrh	r2, [r1, #4]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800cdbc:	d0e3      	beq.n	800cd86 <USBD_StdEPReq+0x2a>
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d024      	beq.n	800ce0c <USBD_StdEPReq+0xb0>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1d5      	bne.n	800cd72 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800cdc6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	b2d8      	uxtb	r0, r3
 800cdce:	d037      	beq.n	800ce40 <USBD_StdEPReq+0xe4>
 800cdd0:	2803      	cmp	r0, #3
 800cdd2:	d1ce      	bne.n	800cd72 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cdd4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800cdd8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cdda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cdde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800cde2:	d43e      	bmi.n	800ce62 <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cde4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d0c2      	beq.n	800cd72 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cdf0:	2514      	movs	r5, #20
 800cdf2:	fb05 4503 	mla	r5, r5, r3, r4
 800cdf6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d13c      	bne.n	800ce78 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800cdfe:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce00:	4629      	mov	r1, r5
 800ce02:	4620      	mov	r0, r4
 800ce04:	2202      	movs	r2, #2
 800ce06:	f000 f88b 	bl	800cf20 <USBD_CtlSendData>
              break;
 800ce0a:	e7ba      	b.n	800cd82 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800ce0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	b2da      	uxtb	r2, r3
 800ce14:	d00b      	beq.n	800ce2e <USBD_StdEPReq+0xd2>
 800ce16:	2a03      	cmp	r2, #3
 800ce18:	d1ab      	bne.n	800cd72 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce1a:	886b      	ldrh	r3, [r5, #2]
 800ce1c:	b91b      	cbnz	r3, 800ce26 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce1e:	064a      	lsls	r2, r1, #25
 800ce20:	d001      	beq.n	800ce26 <USBD_StdEPReq+0xca>
 800ce22:	88eb      	ldrh	r3, [r5, #6]
 800ce24:	b39b      	cbz	r3, 800ce8e <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f8aa 	bl	800cf80 <USBD_CtlSendStatus>
              break;
 800ce2c:	e7a9      	b.n	800cd82 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce2e:	064b      	lsls	r3, r1, #25
 800ce30:	d09f      	beq.n	800cd72 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce32:	f000 fb53 	bl	800d4dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce36:	4620      	mov	r0, r4
 800ce38:	2180      	movs	r1, #128	; 0x80
 800ce3a:	f000 fb4f 	bl	800d4dc <USBD_LL_StallEP>
 800ce3e:	e7a0      	b.n	800cd82 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce40:	0648      	lsls	r0, r1, #25
 800ce42:	d196      	bne.n	800cd72 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce44:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800ce46:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce50:	bf4c      	ite	mi
 800ce52:	f104 0114 	addmi.w	r1, r4, #20
 800ce56:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800ce5a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce5c:	f000 f860 	bl	800cf20 <USBD_CtlSendData>
              break;
 800ce60:	e78f      	b.n	800cd82 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d084      	beq.n	800cd72 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce68:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800ce6c:	1c5d      	adds	r5, r3, #1
 800ce6e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ce72:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ce76:	e7c0      	b.n	800cdfa <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f000 fb4b 	bl	800d514 <USBD_LL_IsStallEP>
 800ce7e:	b120      	cbz	r0, 800ce8a <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e7bc      	b.n	800cdfe <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce84:	f000 fb38 	bl	800d4f8 <USBD_LL_ClearStallEP>
 800ce88:	e789      	b.n	800cd9e <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800ce8a:	6028      	str	r0, [r5, #0]
 800ce8c:	e7b8      	b.n	800ce00 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce8e:	f000 fb25 	bl	800d4dc <USBD_LL_StallEP>
 800ce92:	e7c8      	b.n	800ce26 <USBD_StdEPReq+0xca>

0800ce94 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ce94:	780b      	ldrb	r3, [r1, #0]
 800ce96:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce98:	784b      	ldrb	r3, [r1, #1]
 800ce9a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce9c:	78ca      	ldrb	r2, [r1, #3]
 800ce9e:	788b      	ldrb	r3, [r1, #2]
 800cea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800cea4:	8043      	strh	r3, [r0, #2]
 800cea6:	794a      	ldrb	r2, [r1, #5]
 800cea8:	790b      	ldrb	r3, [r1, #4]
 800ceaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ceae:	8083      	strh	r3, [r0, #4]
 800ceb0:	79ca      	ldrb	r2, [r1, #7]
 800ceb2:	798b      	ldrb	r3, [r1, #6]
 800ceb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800ceb8:	80c3      	strh	r3, [r0, #6]
}
 800ceba:	4770      	bx	lr

0800cebc <USBD_CtlError>:
{
 800cebc:	b510      	push	{r4, lr}
 800cebe:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cec0:	2180      	movs	r1, #128	; 0x80
 800cec2:	f000 fb0b 	bl	800d4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cec6:	2100      	movs	r1, #0
 800cec8:	4620      	mov	r0, r4
}
 800ceca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800cece:	f000 bb05 	b.w	800d4dc <USBD_LL_StallEP>
 800ced2:	bf00      	nop

0800ced4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800ced4:	b308      	cbz	r0, 800cf1a <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ced6:	7803      	ldrb	r3, [r0, #0]
{
 800ced8:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 800ceda:	b1fb      	cbz	r3, 800cf1c <USBD_GetString+0x48>
 800cedc:	4604      	mov	r4, r0
 800cede:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800cee2:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 800cee4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2d00      	cmp	r5, #0
 800ceec:	d1f9      	bne.n	800cee2 <USBD_GetString+0xe>
 800ceee:	3301      	adds	r3, #1
 800cef0:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cef2:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cef4:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800cef6:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cef8:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800cefa:	7804      	ldrb	r4, [r0, #0]
 800cefc:	b15c      	cbz	r4, 800cf16 <USBD_GetString+0x42>
  idx++;
 800cefe:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800cf00:	2500      	movs	r5, #0
    idx++;
 800cf02:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800cf04:	54cc      	strb	r4, [r1, r3]
    idx++;
 800cf06:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800cf08:	b2d2      	uxtb	r2, r2
    idx++;
 800cf0a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800cf0c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800cf0e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800cf12:	2c00      	cmp	r4, #0
 800cf14:	d1f5      	bne.n	800cf02 <USBD_GetString+0x2e>
}
 800cf16:	bc70      	pop	{r4, r5, r6}
 800cf18:	4770      	bx	lr
 800cf1a:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e7e8      	b.n	800cef2 <USBD_GetString+0x1e>

0800cf20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf24:	2502      	movs	r5, #2
{
 800cf26:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf28:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf2a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800cf2e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf32:	f000 fb11 	bl	800d558 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cf36:	2000      	movs	r0, #0
 800cf38:	bd38      	pop	{r3, r4, r5, pc}
 800cf3a:	bf00      	nop

0800cf3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf3c:	b510      	push	{r4, lr}
 800cf3e:	460c      	mov	r4, r1
 800cf40:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf42:	2100      	movs	r1, #0
 800cf44:	4622      	mov	r2, r4
 800cf46:	f000 fb07 	bl	800d558 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop

0800cf50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf54:	2503      	movs	r5, #3
{
 800cf56:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf58:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf5a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800cf5e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf62:	f000 fb07 	bl	800d574 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cf66:	2000      	movs	r0, #0
 800cf68:	bd38      	pop	{r3, r4, r5, pc}
 800cf6a:	bf00      	nop

0800cf6c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	460c      	mov	r4, r1
 800cf70:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf72:	2100      	movs	r1, #0
 800cf74:	4622      	mov	r2, r4
 800cf76:	f000 fafd 	bl	800d574 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	bf00      	nop

0800cf80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf80:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf82:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf84:	2504      	movs	r5, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf86:	461a      	mov	r2, r3
 800cf88:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf8a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf8e:	f000 fae3 	bl	800d558 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cf92:	2000      	movs	r0, #0
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop

0800cf98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf98:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf9a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf9c:	2505      	movs	r5, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfa2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfa6:	f000 fae5 	bl	800d574 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cfaa:	2000      	movs	r0, #0
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	bf00      	nop

0800cfb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	4919      	ldr	r1, [pc, #100]	; (800d01c <MX_USB_DEVICE_Init+0x6c>)
 800cfb6:	481a      	ldr	r0, [pc, #104]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cfb8:	f7ff fb6c 	bl	800c694 <USBD_Init>
 800cfbc:	b988      	cbnz	r0, 800cfe2 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfbe:	4919      	ldr	r1, [pc, #100]	; (800d024 <MX_USB_DEVICE_Init+0x74>)
 800cfc0:	4817      	ldr	r0, [pc, #92]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cfc2:	f7ff fb7b 	bl	800c6bc <USBD_RegisterClass>
 800cfc6:	b9a0      	cbnz	r0, 800cff2 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cfc8:	4917      	ldr	r1, [pc, #92]	; (800d028 <MX_USB_DEVICE_Init+0x78>)
 800cfca:	4815      	ldr	r0, [pc, #84]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cfcc:	f7ff fb12 	bl	800c5f4 <USBD_CDC_RegisterInterface>
 800cfd0:	b9b8      	cbnz	r0, 800d002 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cfd2:	4813      	ldr	r0, [pc, #76]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cfd4:	f7ff fb8c 	bl	800c6f0 <USBD_Start>
 800cfd8:	b9d0      	cbnz	r0, 800d010 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cfda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800cfde:	f7fb b833 	b.w	8008048 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800cfe2:	f7f6 f859 	bl	8003098 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfe6:	490f      	ldr	r1, [pc, #60]	; (800d024 <MX_USB_DEVICE_Init+0x74>)
 800cfe8:	480d      	ldr	r0, [pc, #52]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cfea:	f7ff fb67 	bl	800c6bc <USBD_RegisterClass>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d0ea      	beq.n	800cfc8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800cff2:	f7f6 f851 	bl	8003098 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cff6:	490c      	ldr	r1, [pc, #48]	; (800d028 <MX_USB_DEVICE_Init+0x78>)
 800cff8:	4809      	ldr	r0, [pc, #36]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800cffa:	f7ff fafb 	bl	800c5f4 <USBD_CDC_RegisterInterface>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d0e7      	beq.n	800cfd2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800d002:	f7f6 f849 	bl	8003098 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d006:	4806      	ldr	r0, [pc, #24]	; (800d020 <MX_USB_DEVICE_Init+0x70>)
 800d008:	f7ff fb72 	bl	800c6f0 <USBD_Start>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d0e4      	beq.n	800cfda <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800d010:	f7f6 f842 	bl	8003098 <Error_Handler>
}
 800d014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800d018:	f7fb b816 	b.w	8008048 <HAL_PWREx_EnableUSBVoltageDetector>
 800d01c:	24000328 	.word	0x24000328
 800d020:	2400f4f0 	.word	0x2400f4f0
 800d024:	240001fc 	.word	0x240001fc
 800d028:	2400030c 	.word	0x2400030c

0800d02c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800d02c:	2000      	movs	r0, #0
 800d02e:	4770      	bx	lr

0800d030 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800d030:	2000      	movs	r0, #0
 800d032:	4770      	bx	lr

0800d034 <CDC_Receive_FS>:
{
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d038:	4e08      	ldr	r6, [pc, #32]	; (800d05c <CDC_Receive_FS+0x28>)
{
 800d03a:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d03c:	4630      	mov	r0, r6
 800d03e:	4621      	mov	r1, r4
 800d040:	f7ff faec 	bl	800c61c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800d044:	4630      	mov	r0, r6
 800d046:	f7ff fb0b 	bl	800c660 <USBD_CDC_ReceivePacket>
 800d04a:	682a      	ldr	r2, [r5, #0]
 800d04c:	4b04      	ldr	r3, [pc, #16]	; (800d060 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800d04e:	4621      	mov	r1, r4
 800d050:	4804      	ldr	r0, [pc, #16]	; (800d064 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800d052:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800d054:	f001 fbfa 	bl	800e84c <memcpy>
}
 800d058:	2000      	movs	r0, #0
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	2400f4f0 	.word	0x2400f4f0
 800d060:	240009b0 	.word	0x240009b0
 800d064:	240008b0 	.word	0x240008b0

0800d068 <CDC_Init_FS>:
{
 800d068:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d06a:	4c06      	ldr	r4, [pc, #24]	; (800d084 <CDC_Init_FS+0x1c>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	4906      	ldr	r1, [pc, #24]	; (800d088 <CDC_Init_FS+0x20>)
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff fac7 	bl	800c604 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d076:	4620      	mov	r0, r4
 800d078:	4904      	ldr	r1, [pc, #16]	; (800d08c <CDC_Init_FS+0x24>)
 800d07a:	f7ff facf 	bl	800c61c <USBD_CDC_SetRxBuffer>
}
 800d07e:	2000      	movs	r0, #0
 800d080:	bd10      	pop	{r4, pc}
 800d082:	bf00      	nop
 800d084:	2400f4f0 	.word	0x2400f4f0
 800d088:	2400ffc0 	.word	0x2400ffc0
 800d08c:	2400f7c0 	.word	0x2400f7c0

0800d090 <CDC_Control_FS>:
  switch(cmd)
 800d090:	2820      	cmp	r0, #32
 800d092:	d00a      	beq.n	800d0aa <CDC_Control_FS+0x1a>
 800d094:	2821      	cmp	r0, #33	; 0x21
 800d096:	d106      	bne.n	800d0a6 <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800d098:	4b0a      	ldr	r3, [pc, #40]	; (800d0c4 <CDC_Control_FS+0x34>)
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	889a      	ldrh	r2, [r3, #4]
 800d09e:	799b      	ldrb	r3, [r3, #6]
 800d0a0:	6008      	str	r0, [r1, #0]
 800d0a2:	808a      	strh	r2, [r1, #4]
 800d0a4:	718b      	strb	r3, [r1, #6]
}
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	4770      	bx	lr
{
 800d0aa:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d0ac:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <CDC_Control_FS+0x34>)
 800d0ae:	6808      	ldr	r0, [r1, #0]
 800d0b0:	888c      	ldrh	r4, [r1, #4]
 800d0b2:	798a      	ldrb	r2, [r1, #6]
 800d0b4:	6018      	str	r0, [r3, #0]
}
 800d0b6:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d0b8:	809c      	strh	r4, [r3, #4]
 800d0ba:	719a      	strb	r2, [r3, #6]
}
 800d0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	24000320 	.word	0x24000320

0800d0c8 <CDC_Transmit_FS>:
{
 800d0c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0ca:	4c09      	ldr	r4, [pc, #36]	; (800d0f0 <CDC_Transmit_FS+0x28>)
 800d0cc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800d0d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0d4:	b10b      	cbz	r3, 800d0da <CDC_Transmit_FS+0x12>
}
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0da:	460a      	mov	r2, r1
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f7ff fa90 	bl	800c604 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0e4:	4620      	mov	r0, r4
}
 800d0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0ea:	f7ff baa1 	b.w	800c630 <USBD_CDC_TransmitPacket>
 800d0ee:	bf00      	nop
 800d0f0:	2400f4f0 	.word	0x2400f4f0

0800d0f4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0f4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800d0f6:	4801      	ldr	r0, [pc, #4]	; (800d0fc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0f8:	800b      	strh	r3, [r1, #0]
}
 800d0fa:	4770      	bx	lr
 800d0fc:	24000344 	.word	0x24000344

0800d100 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d100:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800d102:	4801      	ldr	r0, [pc, #4]	; (800d108 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800d104:	800b      	strh	r3, [r1, #0]
}
 800d106:	4770      	bx	lr
 800d108:	24000358 	.word	0x24000358

0800d10c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d10c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d10e:	4c04      	ldr	r4, [pc, #16]	; (800d120 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800d110:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d112:	4804      	ldr	r0, [pc, #16]	; (800d124 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d114:	4621      	mov	r1, r4
 800d116:	f7ff fedd 	bl	800ced4 <USBD_GetString>
  return USBD_StrDesc;
}
 800d11a:	4620      	mov	r0, r4
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	bf00      	nop
 800d120:	240107c0 	.word	0x240107c0
 800d124:	08018a28 	.word	0x08018a28

0800d128 <USBD_FS_ProductStrDescriptor>:
{
 800d128:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d12a:	4c04      	ldr	r4, [pc, #16]	; (800d13c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800d12c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d12e:	4804      	ldr	r0, [pc, #16]	; (800d140 <USBD_FS_ProductStrDescriptor+0x18>)
 800d130:	4621      	mov	r1, r4
 800d132:	f7ff fecf 	bl	800ced4 <USBD_GetString>
}
 800d136:	4620      	mov	r0, r4
 800d138:	bd10      	pop	{r4, pc}
 800d13a:	bf00      	nop
 800d13c:	240107c0 	.word	0x240107c0
 800d140:	08018a3c 	.word	0x08018a3c

0800d144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d144:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d146:	4c04      	ldr	r4, [pc, #16]	; (800d158 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800d148:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d14a:	4804      	ldr	r0, [pc, #16]	; (800d15c <USBD_FS_ConfigStrDescriptor+0x18>)
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7ff fec1 	bl	800ced4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d152:	4620      	mov	r0, r4
 800d154:	bd10      	pop	{r4, pc}
 800d156:	bf00      	nop
 800d158:	240107c0 	.word	0x240107c0
 800d15c:	08018a54 	.word	0x08018a54

0800d160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d160:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d162:	4c04      	ldr	r4, [pc, #16]	; (800d174 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800d164:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d166:	4804      	ldr	r0, [pc, #16]	; (800d178 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800d168:	4621      	mov	r1, r4
 800d16a:	f7ff feb3 	bl	800ced4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d16e:	4620      	mov	r0, r4
 800d170:	bd10      	pop	{r4, pc}
 800d172:	bf00      	nop
 800d174:	240107c0 	.word	0x240107c0
 800d178:	08018a60 	.word	0x08018a60

0800d17c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d17c:	4a42      	ldr	r2, [pc, #264]	; (800d288 <USBD_FS_SerialStrDescriptor+0x10c>)
  *length = USB_SIZ_STRING_SERIAL;
 800d17e:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d180:	4b42      	ldr	r3, [pc, #264]	; (800d28c <USBD_FS_SerialStrDescriptor+0x110>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d182:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800d184:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800d186:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800d188:	18d3      	adds	r3, r2, r3
 800d18a:	d101      	bne.n	800d190 <USBD_FS_SerialStrDescriptor+0x14>
}
 800d18c:	4840      	ldr	r0, [pc, #256]	; (800d290 <USBD_FS_SerialStrDescriptor+0x114>)
 800d18e:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800d190:	0f1a      	lsrs	r2, r3, #28
 800d192:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d196:	493f      	ldr	r1, [pc, #252]	; (800d294 <USBD_FS_SerialStrDescriptor+0x118>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d198:	bf2c      	ite	cs
 800d19a:	f102 0037 	addcs.w	r0, r2, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d19e:	f102 0030 	addcc.w	r0, r2, #48	; 0x30
 800d1a2:	4a3b      	ldr	r2, [pc, #236]	; (800d290 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1a4:	6809      	ldr	r1, [r1, #0]
{
 800d1a6:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1a8:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800d1aa:	f3c3 6003 	ubfx	r0, r3, #24, #4
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800d1ae:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800d1b0:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d1b2:	70d4      	strb	r4, [r2, #3]
 800d1b4:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1b8:	bf8c      	ite	hi
 800d1ba:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1bc:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d1be:	7154      	strb	r4, [r2, #5]
 800d1c0:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1c2:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800d1c4:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800d1c8:	71d4      	strb	r4, [r2, #7]
 800d1ca:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800d1cc:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d1ce:	7254      	strb	r4, [r2, #9]
 800d1d0:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1d4:	bf8c      	ite	hi
 800d1d6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1d8:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d1da:	72d4      	strb	r4, [r2, #11]
 800d1dc:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1de:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800d1e0:	f3c3 4003 	ubfx	r0, r3, #16, #4
    pbuf[2 * idx + 1] = 0;
 800d1e4:	7354      	strb	r4, [r2, #13]
    if (((value >> 28)) < 0xA)
 800d1e6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1e8:	bf8c      	ite	hi
 800d1ea:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1ec:	3030      	addls	r0, #48	; 0x30
 800d1ee:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800d1f0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800d1f4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1f6:	bf8c      	ite	hi
 800d1f8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1fa:	3030      	addls	r0, #48	; 0x30
 800d1fc:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800d1fe:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800d202:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d204:	bf8c      	ite	hi
 800d206:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d208:	3030      	addls	r0, #48	; 0x30
 800d20a:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800d20c:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800d210:	f003 030f 	and.w	r3, r3, #15
 800d214:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d216:	bf8c      	ite	hi
 800d218:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d21a:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800d21c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d21e:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800d220:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d224:	bf94      	ite	ls
 800d226:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d228:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800d22a:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800d22e:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d230:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d232:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800d236:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d23a:	bf2c      	ite	cs
 800d23c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d23e:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d240:	7450      	strb	r0, [r2, #17]
 800d242:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d244:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d246:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800d24a:	74d0      	strb	r0, [r2, #19]
 800d24c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d24e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800d250:	7550      	strb	r0, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d252:	bf8c      	ite	hi
 800d254:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d256:	3330      	addls	r3, #48	; 0x30
}
 800d258:	480d      	ldr	r0, [pc, #52]	; (800d290 <USBD_FS_SerialStrDescriptor+0x114>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800d25a:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d25c:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800d260:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d262:	bf8c      	ite	hi
 800d264:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d266:	3330      	addls	r3, #48	; 0x30
 800d268:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d26a:	f3c1 4303 	ubfx	r3, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800d26e:	2100      	movs	r1, #0
    if (((value >> 28)) < 0xA)
 800d270:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800d272:	75d1      	strb	r1, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800d274:	bf94      	ite	ls
 800d276:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d278:	3337      	addhi	r3, #55	; 0x37
 800d27a:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	7653      	strb	r3, [r2, #25]
}
 800d280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	1ff1e800 	.word	0x1ff1e800
 800d28c:	1ff1e808 	.word	0x1ff1e808
 800d290:	2400035c 	.word	0x2400035c
 800d294:	1ff1e804 	.word	0x1ff1e804

0800d298 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d298:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 800d29c:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d29e:	2100      	movs	r1, #0
{
 800d2a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2a2:	22bc      	movs	r2, #188	; 0xbc
 800d2a4:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2a6:	9106      	str	r1, [sp, #24]
 800d2a8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800d2ac:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2b0:	f001 fada 	bl	800e868 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d2b4:	6822      	ldr	r2, [r4, #0]
 800d2b6:	4b25      	ldr	r3, [pc, #148]	; (800d34c <HAL_PCD_MspInit+0xb4>)
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d002      	beq.n	800d2c2 <HAL_PCD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d2bc:	b036      	add	sp, #216	; 0xd8
 800d2be:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d2c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d2c6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d2ca:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d2cc:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d2ce:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d2d0:	f7fb fe1a 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
 800d2d4:	bbb0      	cbnz	r0, 800d344 <HAL_PCD_MspInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2d6:	4c1e      	ldr	r4, [pc, #120]	; (800d350 <HAL_PCD_MspInit+0xb8>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800d2d8:	f7fa feb6 	bl	8008048 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2dc:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d2e0:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2e6:	2702      	movs	r7, #2
 800d2e8:	f04f 0800 	mov.w	r8, #0
 800d2ec:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2f0:	f043 0301 	orr.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2f4:	a902      	add	r1, sp, #8
 800d2f6:	4817      	ldr	r0, [pc, #92]	; (800d354 <HAL_PCD_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d2fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d300:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d302:	f003 0301 	and.w	r3, r3, #1
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d30a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d30e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d312:	f7f9 ff31 	bl	8007178 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d316:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d31a:	2200      	movs	r2, #0
 800d31c:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d31e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d322:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d324:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800d328:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d32c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d334:	f7f8 fa00 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d338:	2065      	movs	r0, #101	; 0x65
 800d33a:	f7f8 fa37 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 800d33e:	b036      	add	sp, #216	; 0xd8
 800d340:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
      Error_Handler();
 800d344:	f7f5 fea8 	bl	8003098 <Error_Handler>
 800d348:	e7c5      	b.n	800d2d6 <HAL_PCD_MspInit+0x3e>
 800d34a:	bf00      	nop
 800d34c:	40080000 	.word	0x40080000
 800d350:	58024400 	.word	0x58024400
 800d354:	58020000 	.word	0x58020000

0800d358 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d358:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800d35c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d360:	f7ff b9d8 	b.w	800c714 <USBD_LL_SetupStage>

0800d364 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d364:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d368:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d36c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d370:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d374:	f7ff b9fe 	b.w	800c774 <USBD_LL_DataOutStage>

0800d378 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d378:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d37c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d380:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d386:	f7ff ba29 	b.w	800c7dc <USBD_LL_DataInStage>
 800d38a:	bf00      	nop

0800d38c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d38c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d390:	f7ff bac2 	b.w	800c918 <USBD_LL_SOF>

0800d394 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d394:	68c1      	ldr	r1, [r0, #12]
{
 800d396:	b510      	push	{r4, lr}
 800d398:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d39a:	b111      	cbz	r1, 800d3a2 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d39c:	2902      	cmp	r1, #2
 800d39e:	d10a      	bne.n	800d3b6 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800d3a0:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3a2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800d3a6:	f7ff fa9b 	bl	800c8e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3aa:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800d3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3b2:	f7ff ba69 	b.w	800c888 <USBD_LL_Reset>
    Error_Handler();
 800d3b6:	f7f5 fe6f 	bl	8003098 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	e7f1      	b.n	800d3a2 <HAL_PCD_ResetCallback+0xe>
 800d3be:	bf00      	nop

0800d3c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d3c8:	f7ff fa8e 	bl	800c8e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3cc:	6822      	ldr	r2, [r4, #0]
 800d3ce:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d3d2:	f043 0301 	orr.w	r3, r3, #1
 800d3d6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3da:	6a23      	ldr	r3, [r4, #32]
 800d3dc:	b123      	cbz	r3, 800d3e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3de:	4a03      	ldr	r2, [pc, #12]	; (800d3ec <HAL_PCD_SuspendCallback+0x2c>)
 800d3e0:	6913      	ldr	r3, [r2, #16]
 800d3e2:	f043 0306 	orr.w	r3, r3, #6
 800d3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	bf00      	nop
 800d3ec:	e000ed00 	.word	0xe000ed00

0800d3f0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d3f4:	f7ff ba84 	b.w	800c900 <USBD_LL_Resume>

0800d3f8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d3fc:	f7ff bab4 	b.w	800c968 <USBD_LL_IsoOUTIncomplete>

0800d400 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d400:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d404:	f7ff ba9c 	b.w	800c940 <USBD_LL_IsoINIncomplete>

0800d408 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d408:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d40c:	f7ff bac0 	b.w	800c990 <USBD_LL_DevConnected>

0800d410 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d410:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d414:	f7ff babe 	b.w	800c994 <USBD_LL_DevDisconnected>

0800d418 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d418:	7802      	ldrb	r2, [r0, #0]
 800d41a:	b10a      	cbz	r2, 800d420 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800d41c:	2000      	movs	r0, #0
 800d41e:	4770      	bx	lr
{
 800d420:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800d422:	4b15      	ldr	r3, [pc, #84]	; (800d478 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d424:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d426:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d428:	4d14      	ldr	r5, [pc, #80]	; (800d47c <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800d42a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d42e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d432:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d434:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d436:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d438:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d43a:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d43e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d442:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d446:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d44a:	f7fa f857 	bl	80074fc <HAL_PCD_Init>
 800d44e:	b978      	cbnz	r0, 800d470 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d450:	2180      	movs	r1, #128	; 0x80
 800d452:	4809      	ldr	r0, [pc, #36]	; (800d478 <USBD_LL_Init+0x60>)
 800d454:	f7fa fdb4 	bl	8007fc0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d458:	2240      	movs	r2, #64	; 0x40
 800d45a:	2100      	movs	r1, #0
 800d45c:	4806      	ldr	r0, [pc, #24]	; (800d478 <USBD_LL_Init+0x60>)
 800d45e:	f7fa fd8b 	bl	8007f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d462:	2280      	movs	r2, #128	; 0x80
 800d464:	2101      	movs	r1, #1
 800d466:	4804      	ldr	r0, [pc, #16]	; (800d478 <USBD_LL_Init+0x60>)
 800d468:	f7fa fd86 	bl	8007f78 <HAL_PCDEx_SetTxFiFo>
}
 800d46c:	2000      	movs	r0, #0
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800d470:	f7f5 fe12 	bl	8003098 <Error_Handler>
 800d474:	e7ec      	b.n	800d450 <USBD_LL_Init+0x38>
 800d476:	bf00      	nop
 800d478:	240109c0 	.word	0x240109c0
 800d47c:	40080000 	.word	0x40080000

0800d480 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d480:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d484:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d486:	f7fa f8cf 	bl	8007628 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d48a:	2803      	cmp	r0, #3
 800d48c:	d802      	bhi.n	800d494 <USBD_LL_Start+0x14>
 800d48e:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_LL_Start+0x18>)
 800d490:	5c18      	ldrb	r0, [r3, r0]
}
 800d492:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d494:	2003      	movs	r0, #3
}
 800d496:	bd08      	pop	{r3, pc}
 800d498:	08018a70 	.word	0x08018a70

0800d49c <USBD_LL_OpenEP>:
{
 800d49c:	b510      	push	{r4, lr}
 800d49e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d4a4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4a6:	4623      	mov	r3, r4
 800d4a8:	f7fa fc22 	bl	8007cf0 <HAL_PCD_EP_Open>
  switch (hal_status)
 800d4ac:	2803      	cmp	r0, #3
 800d4ae:	d802      	bhi.n	800d4b6 <USBD_LL_OpenEP+0x1a>
 800d4b0:	4b02      	ldr	r3, [pc, #8]	; (800d4bc <USBD_LL_OpenEP+0x20>)
 800d4b2:	5c18      	ldrb	r0, [r3, r0]
}
 800d4b4:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4b6:	2003      	movs	r0, #3
}
 800d4b8:	bd10      	pop	{r4, pc}
 800d4ba:	bf00      	nop
 800d4bc:	08018a70 	.word	0x08018a70

0800d4c0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4c0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d4c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4c6:	f7fa fc4d 	bl	8007d64 <HAL_PCD_EP_Close>
  switch (hal_status)
 800d4ca:	2803      	cmp	r0, #3
 800d4cc:	d802      	bhi.n	800d4d4 <USBD_LL_CloseEP+0x14>
 800d4ce:	4b02      	ldr	r3, [pc, #8]	; (800d4d8 <USBD_LL_CloseEP+0x18>)
 800d4d0:	5c18      	ldrb	r0, [r3, r0]
}
 800d4d2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4d4:	2003      	movs	r0, #3
}
 800d4d6:	bd08      	pop	{r3, pc}
 800d4d8:	08018a70 	.word	0x08018a70

0800d4dc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4dc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d4e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4e2:	f7fa fcc9 	bl	8007e78 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d4e6:	2803      	cmp	r0, #3
 800d4e8:	d802      	bhi.n	800d4f0 <USBD_LL_StallEP+0x14>
 800d4ea:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <USBD_LL_StallEP+0x18>)
 800d4ec:	5c18      	ldrb	r0, [r3, r0]
}
 800d4ee:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4f0:	2003      	movs	r0, #3
}
 800d4f2:	bd08      	pop	{r3, pc}
 800d4f4:	08018a70 	.word	0x08018a70

0800d4f8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4f8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d4fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4fe:	f7fa fcff 	bl	8007f00 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d502:	2803      	cmp	r0, #3
 800d504:	d802      	bhi.n	800d50c <USBD_LL_ClearStallEP+0x14>
 800d506:	4b02      	ldr	r3, [pc, #8]	; (800d510 <USBD_LL_ClearStallEP+0x18>)
 800d508:	5c18      	ldrb	r0, [r3, r0]
}
 800d50a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d50c:	2003      	movs	r0, #3
}
 800d50e:	bd08      	pop	{r3, pc}
 800d510:	08018a70 	.word	0x08018a70

0800d514 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d514:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d516:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d51a:	d406      	bmi.n	800d52a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d51c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d520:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d524:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800d528:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d52a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d52e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d532:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d536:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800d53a:	4770      	bx	lr

0800d53c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d53c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d540:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d542:	f7fa fbc1 	bl	8007cc8 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d546:	2803      	cmp	r0, #3
 800d548:	d802      	bhi.n	800d550 <USBD_LL_SetUSBAddress+0x14>
 800d54a:	4b02      	ldr	r3, [pc, #8]	; (800d554 <USBD_LL_SetUSBAddress+0x18>)
 800d54c:	5c18      	ldrb	r0, [r3, r0]
}
 800d54e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d550:	2003      	movs	r0, #3
}
 800d552:	bd08      	pop	{r3, pc}
 800d554:	08018a70 	.word	0x08018a70

0800d558 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d558:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d55c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d55e:	f7fa fc67 	bl	8007e30 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d562:	2803      	cmp	r0, #3
 800d564:	d802      	bhi.n	800d56c <USBD_LL_Transmit+0x14>
 800d566:	4b02      	ldr	r3, [pc, #8]	; (800d570 <USBD_LL_Transmit+0x18>)
 800d568:	5c18      	ldrb	r0, [r3, r0]
}
 800d56a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d56c:	2003      	movs	r0, #3
}
 800d56e:	bd08      	pop	{r3, pc}
 800d570:	08018a70 	.word	0x08018a70

0800d574 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d574:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d578:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d57a:	f7fa fc27 	bl	8007dcc <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d57e:	2803      	cmp	r0, #3
 800d580:	d802      	bhi.n	800d588 <USBD_LL_PrepareReceive+0x14>
 800d582:	4b02      	ldr	r3, [pc, #8]	; (800d58c <USBD_LL_PrepareReceive+0x18>)
 800d584:	5c18      	ldrb	r0, [r3, r0]
}
 800d586:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d588:	2003      	movs	r0, #3
}
 800d58a:	bd08      	pop	{r3, pc}
 800d58c:	08018a70 	.word	0x08018a70

0800d590 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d590:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d594:	f7fa bc42 	b.w	8007e1c <HAL_PCD_EP_GetRxCount>

0800d598 <USBD_static_malloc>:
}
 800d598:	4800      	ldr	r0, [pc, #0]	; (800d59c <USBD_static_malloc+0x4>)
 800d59a:	4770      	bx	lr
 800d59c:	24000688 	.word	0x24000688

0800d5a0 <USBD_static_free>:
}
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop

0800d5a4 <arm_cfft_radix8by2_f32>:
 800d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a8:	4607      	mov	r7, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	ed2d 8b06 	vpush	{d8-d10}
 800d5b0:	f8b7 c000 	ldrh.w	ip, [r7]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d5ba:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d5be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d5c2:	f000 80ac 	beq.w	800d71e <arm_cfft_radix8by2_f32+0x17a>
 800d5c6:	008c      	lsls	r4, r1, #2
 800d5c8:	f100 0310 	add.w	r3, r0, #16
 800d5cc:	3210      	adds	r2, #16
 800d5ce:	f108 0610 	add.w	r6, r8, #16
 800d5d2:	3410      	adds	r4, #16
 800d5d4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d5d8:	1905      	adds	r5, r0, r4
 800d5da:	4444      	add	r4, r8
 800d5dc:	ed16 7a04 	vldr	s14, [r6, #-16]
 800d5e0:	3310      	adds	r3, #16
 800d5e2:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800d5e6:	3510      	adds	r5, #16
 800d5e8:	ed56 0a03 	vldr	s1, [r6, #-12]
 800d5ec:	3210      	adds	r2, #16
 800d5ee:	ee74 9a87 	vadd.f32	s19, s9, s14
 800d5f2:	ed56 7a02 	vldr	s15, [r6, #-8]
 800d5f6:	ed56 2a01 	vldr	s5, [r6, #-4]
 800d5fa:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d5fe:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d602:	3610      	adds	r6, #16
 800d604:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d608:	3410      	adds	r4, #16
 800d60a:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800d60e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800d612:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800d616:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800d61a:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800d61e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800d622:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800d626:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d62a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800d62e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d632:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800d636:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d63a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800d63e:	ee77 aa20 	vadd.f32	s21, s14, s1
 800d642:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800d646:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d64a:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d64e:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d652:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800d656:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d65a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800d65e:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d662:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800d666:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d66a:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800d66e:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800d672:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d676:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800d67a:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d67e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800d682:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d686:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800d68a:	4563      	cmp	r3, ip
 800d68c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800d690:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d694:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d698:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d69c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d6a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d6a4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d6a8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d6ac:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d6b0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d6b4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d6b8:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d6bc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d6c0:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800d6c4:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800d6c8:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800d6cc:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800d6d0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800d6d4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800d6d8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d6dc:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d6e0:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d6e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d6e8:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d6ec:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d6f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d6f4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d6f8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d6fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d700:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d704:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d708:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800d70c:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800d710:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800d714:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800d718:	f47f af60 	bne.w	800d5dc <arm_cfft_radix8by2_f32+0x38>
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	b28c      	uxth	r4, r1
 800d720:	2302      	movs	r3, #2
 800d722:	4621      	mov	r1, r4
 800d724:	f000 fda6 	bl	800e274 <arm_radix8_butterfly_f32>
 800d728:	4621      	mov	r1, r4
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	4640      	mov	r0, r8
 800d72e:	2302      	movs	r3, #2
 800d730:	ecbd 8b06 	vpop	{d8-d10}
 800d734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d738:	f000 bd9c 	b.w	800e274 <arm_radix8_butterfly_f32>

0800d73c <arm_cfft_radix8by4_f32>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	ed2d 8b04 	vpush	{d8-d9}
 800d744:	8804      	ldrh	r4, [r0, #0]
 800d746:	b08d      	sub	sp, #52	; 0x34
 800d748:	6842      	ldr	r2, [r0, #4]
 800d74a:	460d      	mov	r5, r1
 800d74c:	0864      	lsrs	r4, r4, #1
 800d74e:	edd1 7a00 	vldr	s15, [r1]
 800d752:	edd1 5a01 	vldr	s11, [r1, #4]
 800d756:	00a3      	lsls	r3, r4, #2
 800d758:	18ce      	adds	r6, r1, r3
 800d75a:	18f7      	adds	r7, r6, r3
 800d75c:	ed96 7a00 	vldr	s14, [r6]
 800d760:	ed96 4a01 	vldr	s8, [r6, #4]
 800d764:	ed97 6a00 	vldr	s12, [r7]
 800d768:	edd7 4a01 	vldr	s9, [r7, #4]
 800d76c:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d770:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d774:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d778:	ee77 2a26 	vadd.f32	s5, s14, s13
 800d77c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d780:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d784:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d788:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d78c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d790:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d794:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d798:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d79c:	0860      	lsrs	r0, r4, #1
 800d79e:	f102 0408 	add.w	r4, r2, #8
 800d7a2:	9405      	str	r4, [sp, #20]
 800d7a4:	f102 0410 	add.w	r4, r2, #16
 800d7a8:	9009      	str	r0, [sp, #36]	; 0x24
 800d7aa:	f1a0 0902 	sub.w	r9, r0, #2
 800d7ae:	9403      	str	r4, [sp, #12]
 800d7b0:	18fc      	adds	r4, r7, r3
 800d7b2:	f102 0018 	add.w	r0, r2, #24
 800d7b6:	ed94 5a00 	vldr	s10, [r4]
 800d7ba:	ed94 3a01 	vldr	s6, [r4, #4]
 800d7be:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d7c2:	9004      	str	r0, [sp, #16]
 800d7c4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d7ce:	9408      	str	r4, [sp, #32]
 800d7d0:	ee12 ca90 	vmov	ip, s5
 800d7d4:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d7d8:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d7dc:	f845 cb08 	str.w	ip, [r5], #8
 800d7e0:	ee13 ca90 	vmov	ip, s7
 800d7e4:	ed96 2a01 	vldr	s4, [r6, #4]
 800d7e8:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d7ec:	edd4 2a01 	vldr	s5, [r4, #4]
 800d7f0:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d7f4:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d7f8:	9500      	str	r5, [sp, #0]
 800d7fa:	460d      	mov	r5, r1
 800d7fc:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d800:	ed81 6a01 	vstr	s12, [r1, #4]
 800d804:	4631      	mov	r1, r6
 800d806:	f841 cb08 	str.w	ip, [r1], #8
 800d80a:	ee16 ca90 	vmov	ip, s13
 800d80e:	9106      	str	r1, [sp, #24]
 800d810:	4639      	mov	r1, r7
 800d812:	edc6 4a01 	vstr	s9, [r6, #4]
 800d816:	f841 cb08 	str.w	ip, [r1], #8
 800d81a:	9102      	str	r1, [sp, #8]
 800d81c:	ee17 1a90 	vmov	r1, s15
 800d820:	edc7 5a01 	vstr	s11, [r7, #4]
 800d824:	f840 1b08 	str.w	r1, [r0], #8
 800d828:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800d82c:	9001      	str	r0, [sp, #4]
 800d82e:	ed84 7a01 	vstr	s14, [r4, #4]
 800d832:	9107      	str	r1, [sp, #28]
 800d834:	f000 8135 	beq.w	800daa2 <arm_cfft_radix8by4_f32+0x366>
 800d838:	3b0c      	subs	r3, #12
 800d83a:	f102 0920 	add.w	r9, r2, #32
 800d83e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800d842:	4622      	mov	r2, r4
 800d844:	468b      	mov	fp, r1
 800d846:	f105 0e10 	add.w	lr, r5, #16
 800d84a:	4423      	add	r3, r4
 800d84c:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d850:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d854:	f106 0010 	add.w	r0, r6, #16
 800d858:	f1a7 010c 	sub.w	r1, r7, #12
 800d85c:	f107 0510 	add.w	r5, r7, #16
 800d860:	3c0c      	subs	r4, #12
 800d862:	3210      	adds	r2, #16
 800d864:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d868:	f1bb 0b01 	subs.w	fp, fp, #1
 800d86c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d870:	f1ac 0c08 	sub.w	ip, ip, #8
 800d874:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d878:	f10e 0e08 	add.w	lr, lr, #8
 800d87c:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d880:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d884:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d88c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d890:	f10a 0a08 	add.w	sl, sl, #8
 800d894:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d898:	ed10 3a01 	vldr	s6, [r0, #-4]
 800d89c:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d8a0:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d8a4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d8a8:	f100 0008 	add.w	r0, r0, #8
 800d8ac:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d8b0:	f1a1 0108 	sub.w	r1, r1, #8
 800d8b4:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d8b8:	f109 0910 	add.w	r9, r9, #16
 800d8bc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d8c0:	f105 0508 	add.w	r5, r5, #8
 800d8c4:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d8c8:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d8cc:	ed50 5a03 	vldr	s11, [r0, #-12]
 800d8d0:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d8d4:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d8d8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d8dc:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d8e0:	f1a4 0408 	sub.w	r4, r4, #8
 800d8e4:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d8e8:	f108 0818 	add.w	r8, r8, #24
 800d8ec:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d8f0:	f102 0208 	add.w	r2, r2, #8
 800d8f4:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d8f8:	f1a3 0308 	sub.w	r3, r3, #8
 800d8fc:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d900:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d904:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d908:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d90c:	ed94 4a04 	vldr	s8, [r4, #16]
 800d910:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d914:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d918:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d91c:	edd1 7a04 	vldr	s15, [r1, #16]
 800d920:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d924:	ed93 8a04 	vldr	s16, [r3, #16]
 800d928:	edd4 5a03 	vldr	s11, [r4, #12]
 800d92c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d930:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d934:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d938:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d93c:	ed91 1a03 	vldr	s2, [r1, #12]
 800d940:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d944:	edd3 2a03 	vldr	s5, [r3, #12]
 800d948:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d94c:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d950:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d954:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d958:	edcc 0a04 	vstr	s1, [ip, #16]
 800d95c:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d960:	edd1 6a03 	vldr	s13, [r1, #12]
 800d964:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d968:	ed93 9a03 	vldr	s18, [r3, #12]
 800d96c:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d970:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d974:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d978:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d97c:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d980:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d984:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d988:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d98c:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d990:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800d994:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800d998:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d99c:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d9a0:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d9a4:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d9a8:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d9ac:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d9b0:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d9b4:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d9b8:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d9bc:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d9c0:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d9c4:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d9c8:	ed00 5a03 	vstr	s10, [r0, #-12]
 800d9cc:	ed00 1a04 	vstr	s2, [r0, #-16]
 800d9d0:	ed81 4a04 	vstr	s8, [r1, #16]
 800d9d4:	edc1 5a03 	vstr	s11, [r1, #12]
 800d9d8:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800d9dc:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800d9e0:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d9e4:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d9e8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d9ec:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d9f0:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d9f4:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d9f8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d9fc:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800da00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800da04:	ee34 5a22 	vadd.f32	s10, s8, s5
 800da08:	ee36 6a61 	vsub.f32	s12, s12, s3
 800da0c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800da10:	ed05 5a04 	vstr	s10, [r5, #-16]
 800da14:	ed05 6a03 	vstr	s12, [r5, #-12]
 800da18:	edc4 5a04 	vstr	s11, [r4, #16]
 800da1c:	edc4 6a03 	vstr	s13, [r4, #12]
 800da20:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800da24:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800da28:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800da2c:	ee67 5a27 	vmul.f32	s11, s14, s15
 800da30:	ee63 6a27 	vmul.f32	s13, s6, s15
 800da34:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800da38:	ee27 7a22 	vmul.f32	s14, s14, s5
 800da3c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800da40:	ee23 3a22 	vmul.f32	s6, s6, s5
 800da44:	ee22 2a22 	vmul.f32	s4, s4, s5
 800da48:	ee36 6a25 	vadd.f32	s12, s12, s11
 800da4c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800da50:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800da54:	ee77 7a83 	vadd.f32	s15, s15, s6
 800da58:	ed02 6a04 	vstr	s12, [r2, #-16]
 800da5c:	ed02 7a03 	vstr	s14, [r2, #-12]
 800da60:	ed83 2a04 	vstr	s4, [r3, #16]
 800da64:	edc3 7a03 	vstr	s15, [r3, #12]
 800da68:	f47f aefc 	bne.w	800d864 <arm_cfft_radix8by4_f32+0x128>
 800da6c:	9907      	ldr	r1, [sp, #28]
 800da6e:	9803      	ldr	r0, [sp, #12]
 800da70:	00cb      	lsls	r3, r1, #3
 800da72:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800da76:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800da7a:	9103      	str	r1, [sp, #12]
 800da7c:	9900      	ldr	r1, [sp, #0]
 800da7e:	4419      	add	r1, r3
 800da80:	9100      	str	r1, [sp, #0]
 800da82:	9905      	ldr	r1, [sp, #20]
 800da84:	4419      	add	r1, r3
 800da86:	9105      	str	r1, [sp, #20]
 800da88:	9906      	ldr	r1, [sp, #24]
 800da8a:	4419      	add	r1, r3
 800da8c:	9106      	str	r1, [sp, #24]
 800da8e:	9902      	ldr	r1, [sp, #8]
 800da90:	4419      	add	r1, r3
 800da92:	9102      	str	r1, [sp, #8]
 800da94:	9901      	ldr	r1, [sp, #4]
 800da96:	4419      	add	r1, r3
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da9e:	9101      	str	r1, [sp, #4]
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	9902      	ldr	r1, [sp, #8]
 800daa6:	ed93 7a00 	vldr	s14, [r3]
 800daaa:	edd1 7a00 	vldr	s15, [r1]
 800daae:	9a06      	ldr	r2, [sp, #24]
 800dab0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800dab4:	9d01      	ldr	r5, [sp, #4]
 800dab6:	edd2 6a00 	vldr	s13, [r2]
 800daba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dabe:	9b02      	ldr	r3, [sp, #8]
 800dac0:	ee76 3a86 	vadd.f32	s7, s13, s12
 800dac4:	ed95 3a00 	vldr	s6, [r5]
 800dac8:	ed93 5a01 	vldr	s10, [r3, #4]
 800dacc:	ee36 6a66 	vsub.f32	s12, s12, s13
 800dad0:	9b00      	ldr	r3, [sp, #0]
 800dad2:	ee73 3a83 	vadd.f32	s7, s7, s6
 800dad6:	edd5 2a01 	vldr	s5, [r5, #4]
 800dada:	ed93 4a01 	vldr	s8, [r3, #4]
 800dade:	ee36 6a43 	vsub.f32	s12, s12, s6
 800dae2:	9b00      	ldr	r3, [sp, #0]
 800dae4:	ee74 5a05 	vadd.f32	s11, s8, s10
 800dae8:	edd2 7a01 	vldr	s15, [r2, #4]
 800daec:	edc3 3a00 	vstr	s7, [r3]
 800daf0:	ee34 4a45 	vsub.f32	s8, s8, s10
 800daf4:	edd2 3a01 	vldr	s7, [r2, #4]
 800daf8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800dafc:	ed95 2a01 	vldr	s4, [r5, #4]
 800db00:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800db04:	9d05      	ldr	r5, [sp, #20]
 800db06:	ee34 5a66 	vsub.f32	s10, s8, s13
 800db0a:	9b00      	ldr	r3, [sp, #0]
 800db0c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800db10:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800db14:	ee73 3a82 	vadd.f32	s7, s7, s4
 800db18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db1a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800db1e:	4621      	mov	r1, r4
 800db20:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800db24:	edc3 3a01 	vstr	s7, [r3, #4]
 800db28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db2c:	edd5 3a00 	vldr	s7, [r5]
 800db30:	ee76 6a84 	vadd.f32	s13, s13, s8
 800db34:	ed95 7a01 	vldr	s14, [r5, #4]
 800db38:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800db3c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800db40:	2304      	movs	r3, #4
 800db42:	ee64 4a87 	vmul.f32	s9, s9, s14
 800db46:	ee25 7a07 	vmul.f32	s14, s10, s14
 800db4a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800db4e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800db52:	ee34 7a07 	vadd.f32	s14, s8, s14
 800db56:	ee35 5a64 	vsub.f32	s10, s10, s9
 800db5a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800db5e:	ed82 7a00 	vstr	s14, [r2]
 800db62:	ed82 5a01 	vstr	s10, [r2, #4]
 800db66:	9a03      	ldr	r2, [sp, #12]
 800db68:	edd2 4a01 	vldr	s9, [r2, #4]
 800db6c:	ed92 7a00 	vldr	s14, [r2]
 800db70:	9a02      	ldr	r2, [sp, #8]
 800db72:	ee26 5a07 	vmul.f32	s10, s12, s14
 800db76:	ee26 6a24 	vmul.f32	s12, s12, s9
 800db7a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800db7e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800db82:	ee37 6a46 	vsub.f32	s12, s14, s12
 800db86:	ee75 5a25 	vadd.f32	s11, s10, s11
 800db8a:	edc2 5a00 	vstr	s11, [r2]
 800db8e:	ed82 6a01 	vstr	s12, [r2, #4]
 800db92:	9a04      	ldr	r2, [sp, #16]
 800db94:	9d01      	ldr	r5, [sp, #4]
 800db96:	edd2 5a01 	vldr	s11, [r2, #4]
 800db9a:	ed92 7a00 	vldr	s14, [r2]
 800db9e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dba2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dba6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dbaa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dbae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbb2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dbb6:	edc5 7a01 	vstr	s15, [r5, #4]
 800dbba:	edc5 6a00 	vstr	s13, [r5]
 800dbbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800dbc0:	686a      	ldr	r2, [r5, #4]
 800dbc2:	f000 fb57 	bl	800e274 <arm_radix8_butterfly_f32>
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4621      	mov	r1, r4
 800dbca:	686a      	ldr	r2, [r5, #4]
 800dbcc:	2304      	movs	r3, #4
 800dbce:	f000 fb51 	bl	800e274 <arm_radix8_butterfly_f32>
 800dbd2:	4638      	mov	r0, r7
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	686a      	ldr	r2, [r5, #4]
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f000 fb4b 	bl	800e274 <arm_radix8_butterfly_f32>
 800dbde:	4621      	mov	r1, r4
 800dbe0:	686a      	ldr	r2, [r5, #4]
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	9808      	ldr	r0, [sp, #32]
 800dbe6:	b00d      	add	sp, #52	; 0x34
 800dbe8:	ecbd 8b04 	vpop	{d8-d9}
 800dbec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	f000 bb40 	b.w	800e274 <arm_radix8_butterfly_f32>

0800dbf4 <arm_cfft_f32>:
 800dbf4:	2a01      	cmp	r2, #1
 800dbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	4617      	mov	r7, r2
 800dbfe:	460c      	mov	r4, r1
 800dc00:	4698      	mov	r8, r3
 800dc02:	8805      	ldrh	r5, [r0, #0]
 800dc04:	d055      	beq.n	800dcb2 <arm_cfft_f32+0xbe>
 800dc06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800dc0a:	d061      	beq.n	800dcd0 <arm_cfft_f32+0xdc>
 800dc0c:	d916      	bls.n	800dc3c <arm_cfft_f32+0x48>
 800dc0e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800dc12:	d01a      	beq.n	800dc4a <arm_cfft_f32+0x56>
 800dc14:	d946      	bls.n	800dca4 <arm_cfft_f32+0xb0>
 800dc16:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800dc1a:	d059      	beq.n	800dcd0 <arm_cfft_f32+0xdc>
 800dc1c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800dc20:	d105      	bne.n	800dc2e <arm_cfft_f32+0x3a>
 800dc22:	2301      	movs	r3, #1
 800dc24:	6872      	ldr	r2, [r6, #4]
 800dc26:	4629      	mov	r1, r5
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fb23 	bl	800e274 <arm_radix8_butterfly_f32>
 800dc2e:	f1b8 0f00 	cmp.w	r8, #0
 800dc32:	d111      	bne.n	800dc58 <arm_cfft_f32+0x64>
 800dc34:	2f01      	cmp	r7, #1
 800dc36:	d016      	beq.n	800dc66 <arm_cfft_f32+0x72>
 800dc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc3c:	2d20      	cmp	r5, #32
 800dc3e:	d047      	beq.n	800dcd0 <arm_cfft_f32+0xdc>
 800dc40:	d934      	bls.n	800dcac <arm_cfft_f32+0xb8>
 800dc42:	2d40      	cmp	r5, #64	; 0x40
 800dc44:	d0ed      	beq.n	800dc22 <arm_cfft_f32+0x2e>
 800dc46:	2d80      	cmp	r5, #128	; 0x80
 800dc48:	d1f1      	bne.n	800dc2e <arm_cfft_f32+0x3a>
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7ff fca9 	bl	800d5a4 <arm_cfft_radix8by2_f32>
 800dc52:	f1b8 0f00 	cmp.w	r8, #0
 800dc56:	d0ed      	beq.n	800dc34 <arm_cfft_f32+0x40>
 800dc58:	68b2      	ldr	r2, [r6, #8]
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	89b1      	ldrh	r1, [r6, #12]
 800dc5e:	f000 f83f 	bl	800dce0 <arm_bitreversal_32>
 800dc62:	2f01      	cmp	r7, #1
 800dc64:	d1e8      	bne.n	800dc38 <arm_cfft_f32+0x44>
 800dc66:	ee07 5a90 	vmov	s15, r5
 800dc6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dc76:	2d00      	cmp	r5, #0
 800dc78:	d0de      	beq.n	800dc38 <arm_cfft_f32+0x44>
 800dc7a:	f104 0108 	add.w	r1, r4, #8
 800dc7e:	2300      	movs	r3, #0
 800dc80:	ed11 7a02 	vldr	s14, [r1, #-8]
 800dc84:	3301      	adds	r3, #1
 800dc86:	ed51 7a01 	vldr	s15, [r1, #-4]
 800dc8a:	3108      	adds	r1, #8
 800dc8c:	429d      	cmp	r5, r3
 800dc8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc92:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dc96:	ed01 7a04 	vstr	s14, [r1, #-16]
 800dc9a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800dc9e:	d1ef      	bne.n	800dc80 <arm_cfft_f32+0x8c>
 800dca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800dca8:	d0bb      	beq.n	800dc22 <arm_cfft_f32+0x2e>
 800dcaa:	e7c0      	b.n	800dc2e <arm_cfft_f32+0x3a>
 800dcac:	2d10      	cmp	r5, #16
 800dcae:	d0cc      	beq.n	800dc4a <arm_cfft_f32+0x56>
 800dcb0:	e7bd      	b.n	800dc2e <arm_cfft_f32+0x3a>
 800dcb2:	b195      	cbz	r5, 800dcda <arm_cfft_f32+0xe6>
 800dcb4:	f101 030c 	add.w	r3, r1, #12
 800dcb8:	2200      	movs	r2, #0
 800dcba:	ed53 7a02 	vldr	s15, [r3, #-8]
 800dcbe:	3201      	adds	r2, #1
 800dcc0:	3308      	adds	r3, #8
 800dcc2:	eef1 7a67 	vneg.f32	s15, s15
 800dcc6:	4295      	cmp	r5, r2
 800dcc8:	ed43 7a04 	vstr	s15, [r3, #-16]
 800dccc:	d1f5      	bne.n	800dcba <arm_cfft_f32+0xc6>
 800dcce:	e79a      	b.n	800dc06 <arm_cfft_f32+0x12>
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7ff fd32 	bl	800d73c <arm_cfft_radix8by4_f32>
 800dcd8:	e7a9      	b.n	800dc2e <arm_cfft_f32+0x3a>
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0ac      	beq.n	800dc38 <arm_cfft_f32+0x44>
 800dcde:	e7bb      	b.n	800dc58 <arm_cfft_f32+0x64>

0800dce0 <arm_bitreversal_32>:
 800dce0:	b321      	cbz	r1, 800dd2c <arm_bitreversal_32+0x4c>
 800dce2:	f102 0c02 	add.w	ip, r2, #2
 800dce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcea:	4690      	mov	r8, r2
 800dcec:	2500      	movs	r5, #0
 800dcee:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800dcf2:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800dcf6:	3502      	adds	r5, #2
 800dcf8:	08a4      	lsrs	r4, r4, #2
 800dcfa:	089b      	lsrs	r3, r3, #2
 800dcfc:	428d      	cmp	r5, r1
 800dcfe:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800dd02:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800dd06:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800dd0a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800dd0e:	f107 0704 	add.w	r7, r7, #4
 800dd12:	f106 0604 	add.w	r6, r6, #4
 800dd16:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800dd1a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800dd1e:	59c4      	ldr	r4, [r0, r7]
 800dd20:	5983      	ldr	r3, [r0, r6]
 800dd22:	51c3      	str	r3, [r0, r7]
 800dd24:	5184      	str	r4, [r0, r6]
 800dd26:	d3e2      	bcc.n	800dcee <arm_bitreversal_32+0xe>
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop

0800dd30 <arm_fir_decimate_init_f32>:
 800dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd34:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800dd38:	fbbc f4f2 	udiv	r4, ip, r2
 800dd3c:	fb02 c414 	mls	r4, r2, r4, ip
 800dd40:	b99c      	cbnz	r4, 800dd6a <arm_fir_decimate_init_f32+0x3a>
 800dd42:	460f      	mov	r7, r1
 800dd44:	4616      	mov	r6, r2
 800dd46:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	443a      	add	r2, r7
 800dd4e:	8069      	strh	r1, [r5, #2]
 800dd50:	6043      	str	r3, [r0, #4]
 800dd52:	4621      	mov	r1, r4
 800dd54:	4462      	add	r2, ip
 800dd56:	4640      	mov	r0, r8
 800dd58:	0092      	lsls	r2, r2, #2
 800dd5a:	f000 fd85 	bl	800e868 <memset>
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f8c5 8008 	str.w	r8, [r5, #8]
 800dd64:	702e      	strb	r6, [r5, #0]
 800dd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6a:	f06f 0001 	mvn.w	r0, #1
 800dd6e:	e7fa      	b.n	800dd66 <arm_fir_decimate_init_f32+0x36>

0800dd70 <arm_fir_decimate_f32>:
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	4605      	mov	r5, r0
 800dd76:	b08d      	sub	sp, #52	; 0x34
 800dd78:	4694      	mov	ip, r2
 800dd7a:	782c      	ldrb	r4, [r5, #0]
 800dd7c:	886f      	ldrh	r7, [r5, #2]
 800dd7e:	9001      	str	r0, [sp, #4]
 800dd80:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800dd84:	68ae      	ldr	r6, [r5, #8]
 800dd86:	4438      	add	r0, r7
 800dd88:	686d      	ldr	r5, [r5, #4]
 800dd8a:	9207      	str	r2, [sp, #28]
 800dd8c:	970a      	str	r7, [sp, #40]	; 0x28
 800dd8e:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800dd92:	9508      	str	r5, [sp, #32]
 800dd94:	fbb3 f3f4 	udiv	r3, r3, r4
 800dd98:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd9a:	089b      	lsrs	r3, r3, #2
 800dd9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd9e:	f000 80ef 	beq.w	800df80 <arm_fir_decimate_f32+0x210>
 800dda2:	08ba      	lsrs	r2, r7, #2
 800dda4:	462b      	mov	r3, r5
 800dda6:	3510      	adds	r5, #16
 800dda8:	f007 0703 	and.w	r7, r7, #3
 800ddac:	9205      	str	r2, [sp, #20]
 800ddae:	0112      	lsls	r2, r2, #4
 800ddb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddb2:	f10c 0910 	add.w	r9, ip, #16
 800ddb6:	4413      	add	r3, r2
 800ddb8:	9100      	str	r1, [sp, #0]
 800ddba:	eb05 0e02 	add.w	lr, r5, r2
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	9503      	str	r5, [sp, #12]
 800ddc2:	9704      	str	r7, [sp, #16]
 800ddc4:	9002      	str	r0, [sp, #8]
 800ddc6:	9306      	str	r3, [sp, #24]
 800ddc8:	00a4      	lsls	r4, r4, #2
 800ddca:	4658      	mov	r0, fp
 800ddcc:	9a00      	ldr	r2, [sp, #0]
 800ddce:	4623      	mov	r3, r4
 800ddd0:	f852 5b04 	ldr.w	r5, [r2], #4
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	f840 5b04 	str.w	r5, [r0], #4
 800ddda:	d1f9      	bne.n	800ddd0 <arm_fir_decimate_f32+0x60>
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	00a4      	lsls	r4, r4, #2
 800dde0:	eddf 0abe 	vldr	s1, [pc, #760]	; 800e0dc <arm_fir_decimate_f32+0x36c>
 800dde4:	f893 8000 	ldrb.w	r8, [r3]
 800dde8:	44a3      	add	fp, r4
 800ddea:	9b00      	ldr	r3, [sp, #0]
 800ddec:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800ddf0:	4423      	add	r3, r4
 800ddf2:	eb06 0708 	add.w	r7, r6, r8
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	eb07 0c08 	add.w	ip, r7, r8
 800ddfc:	9b05      	ldr	r3, [sp, #20]
 800ddfe:	eb0c 0a08 	add.w	sl, ip, r8
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 815c 	beq.w	800e0c0 <arm_fir_decimate_f32+0x350>
 800de08:	eef0 4a60 	vmov.f32	s9, s1
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	eef0 7a60 	vmov.f32	s15, s1
 800de12:	f106 0510 	add.w	r5, r6, #16
 800de16:	eeb0 7a60 	vmov.f32	s14, s1
 800de1a:	f107 0410 	add.w	r4, r7, #16
 800de1e:	f10c 0010 	add.w	r0, ip, #16
 800de22:	f10a 0210 	add.w	r2, sl, #16
 800de26:	ed53 5a04 	vldr	s11, [r3, #-16]
 800de2a:	3310      	adds	r3, #16
 800de2c:	ed12 5a04 	vldr	s10, [r2, #-16]
 800de30:	3510      	adds	r5, #16
 800de32:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800de36:	3410      	adds	r4, #16
 800de38:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800de3c:	3010      	adds	r0, #16
 800de3e:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800de42:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800de46:	ee25 1a81 	vmul.f32	s2, s11, s2
 800de4a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800de4e:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800de52:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800de56:	ee65 5a85 	vmul.f32	s11, s11, s10
 800de5a:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800de5e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800de62:	ee36 7a87 	vadd.f32	s14, s13, s14
 800de66:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800de6a:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800de6e:	ee26 2a02 	vmul.f32	s4, s12, s4
 800de72:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800de76:	ee31 1a27 	vadd.f32	s2, s2, s15
 800de7a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800de7e:	ee66 7a22 	vmul.f32	s15, s12, s5
 800de82:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800de86:	ee26 3a03 	vmul.f32	s6, s12, s6
 800de8a:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800de8e:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800de92:	ed52 0a02 	vldr	s1, [r2, #-8]
 800de96:	ee26 6a05 	vmul.f32	s12, s12, s10
 800de9a:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800de9e:	ee72 2a07 	vadd.f32	s5, s4, s14
 800dea2:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800dea6:	ee77 7a81 	vadd.f32	s15, s15, s2
 800deaa:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800deae:	ee33 3a21 	vadd.f32	s6, s6, s3
 800deb2:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800deb6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800deba:	ed52 1a01 	vldr	s3, [r2, #-4]
 800debe:	ee26 4a84 	vmul.f32	s8, s13, s8
 800dec2:	459e      	cmp	lr, r3
 800dec4:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800dec8:	f102 0210 	add.w	r2, r2, #16
 800decc:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800ded0:	ee36 6a25 	vadd.f32	s12, s12, s11
 800ded4:	ee25 7a07 	vmul.f32	s14, s10, s14
 800ded8:	ee34 4a27 	vadd.f32	s8, s8, s15
 800dedc:	ee74 4a83 	vadd.f32	s9, s9, s6
 800dee0:	ee65 7a01 	vmul.f32	s15, s10, s2
 800dee4:	ee25 3a02 	vmul.f32	s6, s10, s4
 800dee8:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800deec:	ee76 6a86 	vadd.f32	s13, s13, s12
 800def0:	ee25 5a21 	vmul.f32	s10, s10, s3
 800def4:	ee37 7a23 	vadd.f32	s14, s14, s7
 800def8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800defc:	ee73 4a24 	vadd.f32	s9, s6, s9
 800df00:	ee75 0a26 	vadd.f32	s1, s10, s13
 800df04:	d18f      	bne.n	800de26 <arm_fir_decimate_f32+0xb6>
 800df06:	440e      	add	r6, r1
 800df08:	440f      	add	r7, r1
 800df0a:	448c      	add	ip, r1
 800df0c:	eb0a 0001 	add.w	r0, sl, r1
 800df10:	9a06      	ldr	r2, [sp, #24]
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	b1db      	cbz	r3, 800df4e <arm_fir_decimate_f32+0x1de>
 800df16:	ecb2 5a01 	vldmia	r2!, {s10}
 800df1a:	3b01      	subs	r3, #1
 800df1c:	ecf6 2a01 	vldmia	r6!, {s5}
 800df20:	ecf7 3a01 	vldmia	r7!, {s7}
 800df24:	ecbc 4a01 	vldmia	ip!, {s8}
 800df28:	ee65 2a22 	vmul.f32	s5, s10, s5
 800df2c:	ecf0 6a01 	vldmia	r0!, {s13}
 800df30:	ee65 3a23 	vmul.f32	s7, s10, s7
 800df34:	ee25 4a04 	vmul.f32	s8, s10, s8
 800df38:	ee25 5a26 	vmul.f32	s10, s10, s13
 800df3c:	ee37 7a22 	vadd.f32	s14, s14, s5
 800df40:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800df44:	ee74 4a84 	vadd.f32	s9, s9, s8
 800df48:	ee70 0a85 	vadd.f32	s1, s1, s10
 800df4c:	d1e3      	bne.n	800df16 <arm_fir_decimate_f32+0x1a6>
 800df4e:	9b02      	ldr	r3, [sp, #8]
 800df50:	eb0a 0608 	add.w	r6, sl, r8
 800df54:	ed09 7a04 	vstr	s14, [r9, #-16]
 800df58:	f109 0910 	add.w	r9, r9, #16
 800df5c:	3b01      	subs	r3, #1
 800df5e:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800df62:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800df66:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800df6a:	9302      	str	r3, [sp, #8]
 800df6c:	d002      	beq.n	800df74 <arm_fir_decimate_f32+0x204>
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	781c      	ldrb	r4, [r3, #0]
 800df72:	e729      	b.n	800ddc8 <arm_fir_decimate_f32+0x58>
 800df74:	9b07      	ldr	r3, [sp, #28]
 800df76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df78:	9900      	ldr	r1, [sp, #0]
 800df7a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df82:	f013 0803 	ands.w	r8, r3, #3
 800df86:	d067      	beq.n	800e058 <arm_fir_decimate_f32+0x2e8>
 800df88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8a:	9808      	ldr	r0, [sp, #32]
 800df8c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800df90:	9d07      	ldr	r5, [sp, #28]
 800df92:	4602      	mov	r2, r0
 800df94:	f003 0703 	and.w	r7, r3, #3
 800df98:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800df9c:	f8cd e000 	str.w	lr, [sp]
 800dfa0:	3210      	adds	r2, #16
 800dfa2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800dfa6:	eb00 090c 	add.w	r9, r0, ip
 800dfaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dfae:	eb02 040c 	add.w	r4, r2, ip
 800dfb2:	46aa      	mov	sl, r5
 800dfb4:	9203      	str	r2, [sp, #12]
 800dfb6:	f89e 5000 	ldrb.w	r5, [lr]
 800dfba:	4658      	mov	r0, fp
 800dfbc:	460a      	mov	r2, r1
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	ecf2 7a01 	vldmia	r2!, {s15}
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	ece0 7a01 	vstmia	r0!, {s15}
 800dfca:	d1f9      	bne.n	800dfc0 <arm_fir_decimate_f32+0x250>
 800dfcc:	00ad      	lsls	r5, r5, #2
 800dfce:	9b00      	ldr	r3, [sp, #0]
 800dfd0:	4429      	add	r1, r5
 800dfd2:	44ab      	add	fp, r5
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d07c      	beq.n	800e0d2 <arm_fir_decimate_f32+0x362>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	f106 0210 	add.w	r2, r6, #16
 800dfde:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800e0dc <arm_fir_decimate_f32+0x36c>
 800dfe2:	ed13 7a04 	vldr	s14, [r3, #-16]
 800dfe6:	3310      	adds	r3, #16
 800dfe8:	ed52 6a04 	vldr	s13, [r2, #-16]
 800dfec:	3210      	adds	r2, #16
 800dfee:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800dff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dff6:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800dffa:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800dffe:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e002:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800e006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e00a:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800e00e:	ee26 7a85 	vmul.f32	s14, s13, s10
 800e012:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800e016:	429c      	cmp	r4, r3
 800e018:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e01c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e020:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e028:	d1db      	bne.n	800dfe2 <arm_fir_decimate_f32+0x272>
 800e02a:	eb06 000c 	add.w	r0, r6, ip
 800e02e:	464a      	mov	r2, r9
 800e030:	b157      	cbz	r7, 800e048 <arm_fir_decimate_f32+0x2d8>
 800e032:	463b      	mov	r3, r7
 800e034:	ecb2 7a01 	vldmia	r2!, {s14}
 800e038:	3b01      	subs	r3, #1
 800e03a:	ecf0 6a01 	vldmia	r0!, {s13}
 800e03e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e042:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e046:	d1f5      	bne.n	800e034 <arm_fir_decimate_f32+0x2c4>
 800e048:	f89e 3000 	ldrb.w	r3, [lr]
 800e04c:	ecea 7a01 	vstmia	sl!, {s15}
 800e050:	45c2      	cmp	sl, r8
 800e052:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800e056:	d1ae      	bne.n	800dfb6 <arm_fir_decimate_f32+0x246>
 800e058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e05a:	1e5c      	subs	r4, r3, #1
 800e05c:	9b01      	ldr	r3, [sp, #4]
 800e05e:	08a5      	lsrs	r5, r4, #2
 800e060:	689f      	ldr	r7, [r3, #8]
 800e062:	d01d      	beq.n	800e0a0 <arm_fir_decimate_f32+0x330>
 800e064:	f106 0210 	add.w	r2, r6, #16
 800e068:	f107 0310 	add.w	r3, r7, #16
 800e06c:	4629      	mov	r1, r5
 800e06e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800e072:	3901      	subs	r1, #1
 800e074:	f102 0210 	add.w	r2, r2, #16
 800e078:	f103 0310 	add.w	r3, r3, #16
 800e07c:	f843 0c20 	str.w	r0, [r3, #-32]
 800e080:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800e084:	f843 0c1c 	str.w	r0, [r3, #-28]
 800e088:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800e08c:	f843 0c18 	str.w	r0, [r3, #-24]
 800e090:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800e094:	f843 0c14 	str.w	r0, [r3, #-20]
 800e098:	d1e9      	bne.n	800e06e <arm_fir_decimate_f32+0x2fe>
 800e09a:	012d      	lsls	r5, r5, #4
 800e09c:	442e      	add	r6, r5
 800e09e:	442f      	add	r7, r5
 800e0a0:	f014 0403 	ands.w	r4, r4, #3
 800e0a4:	d009      	beq.n	800e0ba <arm_fir_decimate_f32+0x34a>
 800e0a6:	6833      	ldr	r3, [r6, #0]
 800e0a8:	3c01      	subs	r4, #1
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	d005      	beq.n	800e0ba <arm_fir_decimate_f32+0x34a>
 800e0ae:	6873      	ldr	r3, [r6, #4]
 800e0b0:	2c01      	cmp	r4, #1
 800e0b2:	607b      	str	r3, [r7, #4]
 800e0b4:	d001      	beq.n	800e0ba <arm_fir_decimate_f32+0x34a>
 800e0b6:	68b3      	ldr	r3, [r6, #8]
 800e0b8:	60bb      	str	r3, [r7, #8]
 800e0ba:	b00d      	add	sp, #52	; 0x34
 800e0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	9a08      	ldr	r2, [sp, #32]
 800e0c4:	eef0 4a60 	vmov.f32	s9, s1
 800e0c8:	eef0 7a60 	vmov.f32	s15, s1
 800e0cc:	eeb0 7a60 	vmov.f32	s14, s1
 800e0d0:	e71f      	b.n	800df12 <arm_fir_decimate_f32+0x1a2>
 800e0d2:	9a08      	ldr	r2, [sp, #32]
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	eddf 7a01 	vldr	s15, [pc, #4]	; 800e0dc <arm_fir_decimate_f32+0x36c>
 800e0da:	e7a9      	b.n	800e030 <arm_fir_decimate_f32+0x2c0>
 800e0dc:	00000000 	.word	0x00000000

0800e0e0 <arm_cmplx_mult_cmplx_f32>:
 800e0e0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800e0e4:	b4f0      	push	{r4, r5, r6, r7}
 800e0e6:	d073      	beq.n	800e1d0 <arm_cmplx_mult_cmplx_f32+0xf0>
 800e0e8:	f100 0620 	add.w	r6, r0, #32
 800e0ec:	f101 0520 	add.w	r5, r1, #32
 800e0f0:	f102 0420 	add.w	r4, r2, #32
 800e0f4:	4667      	mov	r7, ip
 800e0f6:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800e0fa:	3f01      	subs	r7, #1
 800e0fc:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800e100:	f105 0520 	add.w	r5, r5, #32
 800e104:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800e108:	f106 0620 	add.w	r6, r6, #32
 800e10c:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800e110:	f104 0420 	add.w	r4, r4, #32
 800e114:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e118:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e11c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e120:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e124:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e128:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e12c:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800e130:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800e134:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800e138:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800e13c:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800e140:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800e144:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e148:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e14c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e150:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e154:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e158:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e15c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800e160:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800e164:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800e168:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800e16c:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800e170:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800e174:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e178:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e17c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e180:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e184:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e188:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e18c:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800e190:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800e194:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800e198:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800e19c:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800e1a0:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800e1a4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e1a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e1ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e1b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e1b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e1bc:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800e1c0:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800e1c4:	d197      	bne.n	800e0f6 <arm_cmplx_mult_cmplx_f32+0x16>
 800e1c6:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800e1ca:	4420      	add	r0, r4
 800e1cc:	4421      	add	r1, r4
 800e1ce:	4422      	add	r2, r4
 800e1d0:	f013 0303 	ands.w	r3, r3, #3
 800e1d4:	d04b      	beq.n	800e26e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e1d6:	edd0 5a00 	vldr	s11, [r0]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	edd1 7a00 	vldr	s15, [r1]
 800e1e0:	edd0 6a01 	vldr	s13, [r0, #4]
 800e1e4:	ed91 7a01 	vldr	s14, [r1, #4]
 800e1e8:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800e1ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1f0:	ee67 6a26 	vmul.f32	s13, s14, s13
 800e1f4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e1f8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e200:	edc2 6a00 	vstr	s13, [r2]
 800e204:	edc2 7a01 	vstr	s15, [r2, #4]
 800e208:	d031      	beq.n	800e26e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e20a:	edd0 7a02 	vldr	s15, [r0, #8]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	ed91 7a02 	vldr	s14, [r1, #8]
 800e214:	edd0 6a03 	vldr	s13, [r0, #12]
 800e218:	edd1 5a03 	vldr	s11, [r1, #12]
 800e21c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e220:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e224:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e228:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e230:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e234:	edc2 7a03 	vstr	s15, [r2, #12]
 800e238:	edc2 6a02 	vstr	s13, [r2, #8]
 800e23c:	d017      	beq.n	800e26e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e23e:	edd0 7a04 	vldr	s15, [r0, #16]
 800e242:	ed91 7a04 	vldr	s14, [r1, #16]
 800e246:	edd0 6a05 	vldr	s13, [r0, #20]
 800e24a:	edd1 5a05 	vldr	s11, [r1, #20]
 800e24e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e252:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e256:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e25a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e25e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e262:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e266:	edc2 7a05 	vstr	s15, [r2, #20]
 800e26a:	edc2 6a04 	vstr	s13, [r2, #16]
 800e26e:	bcf0      	pop	{r4, r5, r6, r7}
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop

0800e274 <arm_radix8_butterfly_f32>:
 800e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	ed2d 8b10 	vpush	{d8-d15}
 800e27c:	b095      	sub	sp, #84	; 0x54
 800e27e:	468a      	mov	sl, r1
 800e280:	468b      	mov	fp, r1
 800e282:	eddf 8abb 	vldr	s17, [pc, #748]	; 800e570 <arm_radix8_butterfly_f32+0x2fc>
 800e286:	9012      	str	r0, [sp, #72]	; 0x48
 800e288:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e28c:	4603      	mov	r3, r0
 800e28e:	3304      	adds	r3, #4
 800e290:	9313      	str	r3, [sp, #76]	; 0x4c
 800e292:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800e296:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e29c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800e2a0:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e2a4:	920f      	str	r2, [sp, #60]	; 0x3c
 800e2a6:	9303      	str	r3, [sp, #12]
 800e2a8:	0153      	lsls	r3, r2, #5
 800e2aa:	0114      	lsls	r4, r2, #4
 800e2ac:	eba9 0002 	sub.w	r0, r9, r2
 800e2b0:	18ce      	adds	r6, r1, r3
 800e2b2:	9302      	str	r3, [sp, #8]
 800e2b4:	0097      	lsls	r7, r2, #2
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	eb06 0509 	add.w	r5, r6, r9
 800e2bc:	9004      	str	r0, [sp, #16]
 800e2be:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800e2c2:	1bd2      	subs	r2, r2, r7
 800e2c4:	eb05 0109 	add.w	r1, r5, r9
 800e2c8:	441f      	add	r7, r3
 800e2ca:	9405      	str	r4, [sp, #20]
 800e2cc:	f109 0004 	add.w	r0, r9, #4
 800e2d0:	9101      	str	r1, [sp, #4]
 800e2d2:	1d21      	adds	r1, r4, #4
 800e2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2d6:	f04f 0e00 	mov.w	lr, #0
 800e2da:	9c01      	ldr	r4, [sp, #4]
 800e2dc:	4418      	add	r0, r3
 800e2de:	4419      	add	r1, r3
 800e2e0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	00fc      	lsls	r4, r7, #3
 800e2e8:	18d7      	adds	r7, r2, r3
 800e2ea:	9b04      	ldr	r3, [sp, #16]
 800e2ec:	9406      	str	r4, [sp, #24]
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	9c01      	ldr	r4, [sp, #4]
 800e2f2:	9307      	str	r3, [sp, #28]
 800e2f4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e2f8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	9b03      	ldr	r3, [sp, #12]
 800e300:	edd6 6a00 	vldr	s13, [r6]
 800e304:	44de      	add	lr, fp
 800e306:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800e30a:	ed94 7a00 	vldr	s14, [r4]
 800e30e:	45f2      	cmp	sl, lr
 800e310:	ed10 6a01 	vldr	s12, [r0, #-4]
 800e314:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800e318:	edd5 2a00 	vldr	s5, [r5]
 800e31c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e320:	edd7 3a00 	vldr	s7, [r7]
 800e324:	ed11 5a01 	vldr	s10, [r1, #-4]
 800e328:	ee36 3a22 	vadd.f32	s6, s12, s5
 800e32c:	edd2 6a00 	vldr	s13, [r2]
 800e330:	ee75 5a07 	vadd.f32	s11, s10, s14
 800e334:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800e338:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800e33c:	ee72 4a25 	vadd.f32	s9, s4, s11
 800e340:	ee73 3a04 	vadd.f32	s7, s6, s8
 800e344:	ee35 5a47 	vsub.f32	s10, s10, s14
 800e348:	ee36 7a62 	vsub.f32	s14, s12, s5
 800e34c:	ee32 2a65 	vsub.f32	s4, s4, s11
 800e350:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800e354:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800e358:	ee37 6a66 	vsub.f32	s12, s14, s13
 800e35c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800e360:	ee33 3a44 	vsub.f32	s6, s6, s8
 800e364:	edc6 4a00 	vstr	s9, [r6]
 800e368:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e36c:	ed97 4a01 	vldr	s8, [r7, #4]
 800e370:	ee66 6a28 	vmul.f32	s13, s12, s17
 800e374:	edd0 5a00 	vldr	s11, [r0]
 800e378:	ed95 6a01 	vldr	s12, [r5, #4]
 800e37c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800e380:	edd2 3a01 	vldr	s7, [r2, #4]
 800e384:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800e388:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800e38c:	ed96 1a01 	vldr	s2, [r6, #4]
 800e390:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800e394:	edd4 0a01 	vldr	s1, [r4, #4]
 800e398:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e39c:	eddc 6a00 	vldr	s13, [ip]
 800e3a0:	ee75 5a86 	vadd.f32	s11, s11, s12
 800e3a4:	ed91 6a00 	vldr	s12, [r1]
 800e3a8:	ee73 3a84 	vadd.f32	s7, s7, s8
 800e3ac:	ee74 1a80 	vadd.f32	s3, s9, s0
 800e3b0:	ee36 4a81 	vadd.f32	s8, s13, s2
 800e3b4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e3b8:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800e3bc:	ee36 1a20 	vadd.f32	s2, s12, s1
 800e3c0:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800e3c4:	ee36 6a60 	vsub.f32	s12, s12, s1
 800e3c8:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e3cc:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800e3d0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800e3d4:	ee74 3a01 	vadd.f32	s7, s8, s2
 800e3d8:	ee34 4a41 	vsub.f32	s8, s8, s2
 800e3dc:	ee36 1a21 	vadd.f32	s2, s12, s3
 800e3e0:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800e3e4:	ee36 6a61 	vsub.f32	s12, s12, s3
 800e3e8:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800e3ec:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800e3f0:	ed8c 0a00 	vstr	s0, [ip]
 800e3f4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800e3f8:	449c      	add	ip, r3
 800e3fa:	ee75 4a07 	vadd.f32	s9, s10, s14
 800e3fe:	edc6 3a01 	vstr	s7, [r6, #4]
 800e402:	ee35 7a47 	vsub.f32	s14, s10, s14
 800e406:	441e      	add	r6, r3
 800e408:	ee32 5a25 	vadd.f32	s10, s4, s11
 800e40c:	ee72 5a65 	vsub.f32	s11, s4, s11
 800e410:	ee72 3a81 	vadd.f32	s7, s5, s2
 800e414:	ed01 5a01 	vstr	s10, [r1, #-4]
 800e418:	ee34 2a43 	vsub.f32	s4, s8, s6
 800e41c:	edc4 5a00 	vstr	s11, [r4]
 800e420:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e424:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800e428:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e42c:	ed81 2a00 	vstr	s4, [r1]
 800e430:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800e434:	4419      	add	r1, r3
 800e436:	ee33 4a04 	vadd.f32	s8, s6, s8
 800e43a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800e43e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800e442:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e446:	ed84 4a01 	vstr	s8, [r4, #4]
 800e44a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e44e:	441c      	add	r4, r3
 800e450:	edc7 2a00 	vstr	s5, [r7]
 800e454:	ed85 5a00 	vstr	s10, [r5]
 800e458:	edc2 7a00 	vstr	s15, [r2]
 800e45c:	edc0 5a00 	vstr	s11, [r0]
 800e460:	4418      	add	r0, r3
 800e462:	edc7 4a01 	vstr	s9, [r7, #4]
 800e466:	441f      	add	r7, r3
 800e468:	ed85 6a01 	vstr	s12, [r5, #4]
 800e46c:	441d      	add	r5, r3
 800e46e:	ed82 7a01 	vstr	s14, [r2, #4]
 800e472:	441a      	add	r2, r3
 800e474:	f63f af44 	bhi.w	800e300 <arm_radix8_butterfly_f32+0x8c>
 800e478:	469c      	mov	ip, r3
 800e47a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e47c:	2b07      	cmp	r3, #7
 800e47e:	f240 81b6 	bls.w	800e7ee <arm_radix8_butterfly_f32+0x57a>
 800e482:	9a02      	ldr	r2, [sp, #8]
 800e484:	f109 0608 	add.w	r6, r9, #8
 800e488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e48a:	f108 0408 	add.w	r4, r8, #8
 800e48e:	3208      	adds	r2, #8
 800e490:	9f06      	ldr	r7, [sp, #24]
 800e492:	9d04      	ldr	r5, [sp, #16]
 800e494:	189a      	adds	r2, r3, r2
 800e496:	3708      	adds	r7, #8
 800e498:	3508      	adds	r5, #8
 800e49a:	9807      	ldr	r0, [sp, #28]
 800e49c:	920c      	str	r2, [sp, #48]	; 0x30
 800e49e:	199a      	adds	r2, r3, r6
 800e4a0:	9905      	ldr	r1, [sp, #20]
 800e4a2:	3008      	adds	r0, #8
 800e4a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e4a6:	19da      	adds	r2, r3, r7
 800e4a8:	310c      	adds	r1, #12
 800e4aa:	920a      	str	r2, [sp, #40]	; 0x28
 800e4ac:	195a      	adds	r2, r3, r5
 800e4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b0:	191a      	adds	r2, r3, r4
 800e4b2:	9208      	str	r2, [sp, #32]
 800e4b4:	181a      	adds	r2, r3, r0
 800e4b6:	9207      	str	r2, [sp, #28]
 800e4b8:	185a      	adds	r2, r3, r1
 800e4ba:	330c      	adds	r3, #12
 800e4bc:	9205      	str	r2, [sp, #20]
 800e4be:	9306      	str	r3, [sp, #24]
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	9304      	str	r3, [sp, #16]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e4c8:	4663      	mov	r3, ip
 800e4ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e4ce:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e4d2:	440a      	add	r2, r1
 800e4d4:	9f06      	ldr	r7, [sp, #24]
 800e4d6:	9e07      	ldr	r6, [sp, #28]
 800e4d8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800e4dc:	920d      	str	r2, [sp, #52]	; 0x34
 800e4de:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800e4e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4e4:	9d08      	ldr	r5, [sp, #32]
 800e4e6:	4442      	add	r2, r8
 800e4e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e4ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4ec:	eb02 0108 	add.w	r1, r2, r8
 800e4f0:	ed92 ea00 	vldr	s28, [r2]
 800e4f4:	eb01 0208 	add.w	r2, r1, r8
 800e4f8:	edd1 da00 	vldr	s27, [r1]
 800e4fc:	eb02 0108 	add.w	r1, r2, r8
 800e500:	ed92 da00 	vldr	s26, [r2]
 800e504:	eb01 0208 	add.w	r2, r1, r8
 800e508:	edd1 ca00 	vldr	s25, [r1]
 800e50c:	eb02 0108 	add.w	r1, r2, r8
 800e510:	ed92 ca00 	vldr	s24, [r2]
 800e514:	eb01 0208 	add.w	r2, r1, r8
 800e518:	edd1 ba00 	vldr	s23, [r1]
 800e51c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e51e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800e522:	ed92 ba00 	vldr	s22, [r2]
 800e526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e528:	eb0e 0908 	add.w	r9, lr, r8
 800e52c:	910e      	str	r1, [sp, #56]	; 0x38
 800e52e:	9201      	str	r2, [sp, #4]
 800e530:	eb09 0208 	add.w	r2, r9, r8
 800e534:	ed99 aa01 	vldr	s20, [r9, #4]
 800e538:	edde aa01 	vldr	s21, [lr, #4]
 800e53c:	eb02 0908 	add.w	r9, r2, r8
 800e540:	edd2 9a01 	vldr	s19, [r2, #4]
 800e544:	f8dd e010 	ldr.w	lr, [sp, #16]
 800e548:	eb09 0208 	add.w	r2, r9, r8
 800e54c:	ed99 9a01 	vldr	s18, [r9, #4]
 800e550:	eb02 0908 	add.w	r9, r2, r8
 800e554:	ed92 8a01 	vldr	s16, [r2, #4]
 800e558:	9a01      	ldr	r2, [sp, #4]
 800e55a:	edd9 7a01 	vldr	s15, [r9, #4]
 800e55e:	44c8      	add	r8, r9
 800e560:	edcd 7a02 	vstr	s15, [sp, #8]
 800e564:	edd8 7a01 	vldr	s15, [r8, #4]
 800e568:	edcd 7a03 	vstr	s15, [sp, #12]
 800e56c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e56e:	e001      	b.n	800e574 <arm_radix8_butterfly_f32+0x300>
 800e570:	3f3504f3 	.word	0x3f3504f3
 800e574:	ed92 7a00 	vldr	s14, [r2]
 800e578:	44de      	add	lr, fp
 800e57a:	ed17 1a01 	vldr	s2, [r7, #-4]
 800e57e:	ed90 5a00 	vldr	s10, [r0]
 800e582:	45f2      	cmp	sl, lr
 800e584:	ed1c fa01 	vldr	s30, [ip, #-4]
 800e588:	ee31 3a07 	vadd.f32	s6, s2, s14
 800e58c:	edd6 5a00 	vldr	s11, [r6]
 800e590:	ee31 1a47 	vsub.f32	s2, s2, s14
 800e594:	edd4 7a00 	vldr	s15, [r4]
 800e598:	ed95 7a00 	vldr	s14, [r5]
 800e59c:	ed91 4a00 	vldr	s8, [r1]
 800e5a0:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800e5a4:	ee77 6a25 	vadd.f32	s13, s14, s11
 800e5a8:	edd7 ea00 	vldr	s29, [r7]
 800e5ac:	ee74 fa05 	vadd.f32	s31, s8, s10
 800e5b0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e5b4:	ee34 4a45 	vsub.f32	s8, s8, s10
 800e5b8:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800e5bc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e5c0:	ee33 3a46 	vsub.f32	s6, s6, s12
 800e5c4:	ee31 6a85 	vadd.f32	s12, s3, s10
 800e5c8:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800e5cc:	ee34 fa07 	vadd.f32	s30, s8, s14
 800e5d0:	ed07 6a01 	vstr	s12, [r7, #-4]
 800e5d4:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e5d8:	edd5 3a01 	vldr	s7, [r5, #4]
 800e5dc:	ee7f fae6 	vsub.f32	s31, s31, s13
 800e5e0:	ed90 7a01 	vldr	s14, [r0, #4]
 800e5e4:	ee2f fa28 	vmul.f32	s30, s30, s17
 800e5e8:	edd1 5a01 	vldr	s11, [r1, #4]
 800e5ec:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e5f0:	ed96 6a01 	vldr	s12, [r6, #4]
 800e5f4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800e5f8:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800e5fc:	edd2 6a01 	vldr	s13, [r2, #4]
 800e600:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800e604:	edd4 4a01 	vldr	s9, [r4, #4]
 800e608:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e60c:	ed9c 7a00 	vldr	s14, [ip]
 800e610:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800e614:	ee33 6a86 	vadd.f32	s12, s7, s12
 800e618:	ee37 facf 	vsub.f32	s30, s15, s30
 800e61c:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800e620:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800e624:	ee7e eae6 	vsub.f32	s29, s29, s13
 800e628:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800e62c:	ee77 6a24 	vadd.f32	s13, s14, s9
 800e630:	ee75 0a86 	vadd.f32	s1, s11, s12
 800e634:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e638:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800e63c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e640:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800e644:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800e648:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800e64c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800e650:	ee77 4a22 	vadd.f32	s9, s14, s5
 800e654:	ee7e eae7 	vsub.f32	s29, s29, s15
 800e658:	ee77 7a62 	vsub.f32	s15, s14, s5
 800e65c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800e660:	ee31 7a44 	vsub.f32	s14, s2, s8
 800e664:	ee30 1a60 	vsub.f32	s2, s0, s1
 800e668:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e66c:	ee33 6a46 	vsub.f32	s12, s6, s12
 800e670:	ee33 3aef 	vsub.f32	s6, s7, s31
 800e674:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800e678:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800e67c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800e680:	ee72 5a25 	vadd.f32	s11, s4, s11
 800e684:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e688:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e68c:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e690:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e694:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800e698:	ee2c fa85 	vmul.f32	s30, s25, s10
 800e69c:	ee69 ea01 	vmul.f32	s29, s18, s2
 800e6a0:	ee29 5a05 	vmul.f32	s10, s18, s10
 800e6a4:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e6a8:	ee6d faa1 	vmul.f32	s31, s27, s3
 800e6ac:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e6b0:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800e6b4:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800e6b8:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800e6bc:	edc7 0a00 	vstr	s1, [r7]
 800e6c0:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800e6c4:	441f      	add	r7, r3
 800e6c6:	ee2a faa3 	vmul.f32	s30, s21, s7
 800e6ca:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e6ce:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800e6d2:	edc2 ea00 	vstr	s29, [r2]
 800e6d6:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800e6da:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e6de:	ed82 5a01 	vstr	s10, [r2, #4]
 800e6e2:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800e6e6:	edcd 3a01 	vstr	s7, [sp, #4]
 800e6ea:	ed9d 5a03 	vldr	s10, [sp, #12]
 800e6ee:	ee6b ea86 	vmul.f32	s29, s23, s12
 800e6f2:	eddd 3a02 	vldr	s7, [sp, #8]
 800e6f6:	ee6b fa24 	vmul.f32	s31, s22, s9
 800e6fa:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800e6fe:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e702:	ed8c 3a00 	vstr	s6, [ip]
 800e706:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e70a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e70e:	eddd 3a01 	vldr	s7, [sp, #4]
 800e712:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e716:	441a      	add	r2, r3
 800e718:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800e71c:	449c      	add	ip, r3
 800e71e:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e722:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e726:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e72a:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e72e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e732:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e736:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e73a:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e73e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e742:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e746:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e74a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e74e:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e752:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e756:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e75a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e75e:	edc4 ea00 	vstr	s29, [r4]
 800e762:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e766:	ed84 6a01 	vstr	s12, [r4, #4]
 800e76a:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e76e:	edc1 0a00 	vstr	s1, [r1]
 800e772:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e776:	edc1 3a01 	vstr	s7, [r1, #4]
 800e77a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e77e:	ed86 5a00 	vstr	s10, [r6]
 800e782:	edc6 4a01 	vstr	s9, [r6, #4]
 800e786:	4419      	add	r1, r3
 800e788:	ed80 0a00 	vstr	s0, [r0]
 800e78c:	441c      	add	r4, r3
 800e78e:	edc0 2a01 	vstr	s5, [r0, #4]
 800e792:	441e      	add	r6, r3
 800e794:	ed85 3a00 	vstr	s6, [r5]
 800e798:	4418      	add	r0, r3
 800e79a:	ed85 7a01 	vstr	s14, [r5, #4]
 800e79e:	441d      	add	r5, r3
 800e7a0:	f63f aee8 	bhi.w	800e574 <arm_radix8_butterfly_f32+0x300>
 800e7a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e7a6:	9a04      	ldr	r2, [sp, #16]
 800e7a8:	3108      	adds	r1, #8
 800e7aa:	3201      	adds	r2, #1
 800e7ac:	910c      	str	r1, [sp, #48]	; 0x30
 800e7ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7b0:	9204      	str	r2, [sp, #16]
 800e7b2:	3108      	adds	r1, #8
 800e7b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800e7b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e7b8:	3108      	adds	r1, #8
 800e7ba:	910a      	str	r1, [sp, #40]	; 0x28
 800e7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7be:	3108      	adds	r1, #8
 800e7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800e7c2:	9908      	ldr	r1, [sp, #32]
 800e7c4:	3108      	adds	r1, #8
 800e7c6:	9108      	str	r1, [sp, #32]
 800e7c8:	9907      	ldr	r1, [sp, #28]
 800e7ca:	3108      	adds	r1, #8
 800e7cc:	9107      	str	r1, [sp, #28]
 800e7ce:	9906      	ldr	r1, [sp, #24]
 800e7d0:	3108      	adds	r1, #8
 800e7d2:	9106      	str	r1, [sp, #24]
 800e7d4:	9905      	ldr	r1, [sp, #20]
 800e7d6:	3108      	adds	r1, #8
 800e7d8:	9105      	str	r1, [sp, #20]
 800e7da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e7dc:	4291      	cmp	r1, r2
 800e7de:	f47f ae74 	bne.w	800e4ca <arm_radix8_butterfly_f32+0x256>
 800e7e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7e4:	468b      	mov	fp, r1
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	9310      	str	r3, [sp, #64]	; 0x40
 800e7ec:	e551      	b.n	800e292 <arm_radix8_butterfly_f32+0x1e>
 800e7ee:	b015      	add	sp, #84	; 0x54
 800e7f0:	ecbd 8b10 	vpop	{d8-d15}
 800e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7f8 <__errno>:
 800e7f8:	4b01      	ldr	r3, [pc, #4]	; (800e800 <__errno+0x8>)
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	24000378 	.word	0x24000378

0800e804 <__libc_init_array>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	4d0d      	ldr	r5, [pc, #52]	; (800e83c <__libc_init_array+0x38>)
 800e808:	4c0d      	ldr	r4, [pc, #52]	; (800e840 <__libc_init_array+0x3c>)
 800e80a:	1b64      	subs	r4, r4, r5
 800e80c:	10a4      	asrs	r4, r4, #2
 800e80e:	2600      	movs	r6, #0
 800e810:	42a6      	cmp	r6, r4
 800e812:	d109      	bne.n	800e828 <__libc_init_array+0x24>
 800e814:	4d0b      	ldr	r5, [pc, #44]	; (800e844 <__libc_init_array+0x40>)
 800e816:	4c0c      	ldr	r4, [pc, #48]	; (800e848 <__libc_init_array+0x44>)
 800e818:	f003 ffa0 	bl	801275c <_init>
 800e81c:	1b64      	subs	r4, r4, r5
 800e81e:	10a4      	asrs	r4, r4, #2
 800e820:	2600      	movs	r6, #0
 800e822:	42a6      	cmp	r6, r4
 800e824:	d105      	bne.n	800e832 <__libc_init_array+0x2e>
 800e826:	bd70      	pop	{r4, r5, r6, pc}
 800e828:	f855 3b04 	ldr.w	r3, [r5], #4
 800e82c:	4798      	blx	r3
 800e82e:	3601      	adds	r6, #1
 800e830:	e7ee      	b.n	800e810 <__libc_init_array+0xc>
 800e832:	f855 3b04 	ldr.w	r3, [r5], #4
 800e836:	4798      	blx	r3
 800e838:	3601      	adds	r6, #1
 800e83a:	e7f2      	b.n	800e822 <__libc_init_array+0x1e>
 800e83c:	0801cf58 	.word	0x0801cf58
 800e840:	0801cf58 	.word	0x0801cf58
 800e844:	0801cf58 	.word	0x0801cf58
 800e848:	0801cf5c 	.word	0x0801cf5c

0800e84c <memcpy>:
 800e84c:	440a      	add	r2, r1
 800e84e:	4291      	cmp	r1, r2
 800e850:	f100 33ff 	add.w	r3, r0, #4294967295
 800e854:	d100      	bne.n	800e858 <memcpy+0xc>
 800e856:	4770      	bx	lr
 800e858:	b510      	push	{r4, lr}
 800e85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e862:	4291      	cmp	r1, r2
 800e864:	d1f9      	bne.n	800e85a <memcpy+0xe>
 800e866:	bd10      	pop	{r4, pc}

0800e868 <memset>:
 800e868:	4402      	add	r2, r0
 800e86a:	4603      	mov	r3, r0
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d100      	bne.n	800e872 <memset+0xa>
 800e870:	4770      	bx	lr
 800e872:	f803 1b01 	strb.w	r1, [r3], #1
 800e876:	e7f9      	b.n	800e86c <memset+0x4>

0800e878 <__cvt>:
 800e878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87a:	ed2d 8b02 	vpush	{d8}
 800e87e:	eeb0 8b40 	vmov.f64	d8, d0
 800e882:	b085      	sub	sp, #20
 800e884:	4617      	mov	r7, r2
 800e886:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e888:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e88a:	ee18 2a90 	vmov	r2, s17
 800e88e:	f025 0520 	bic.w	r5, r5, #32
 800e892:	2a00      	cmp	r2, #0
 800e894:	bfb6      	itet	lt
 800e896:	222d      	movlt	r2, #45	; 0x2d
 800e898:	2200      	movge	r2, #0
 800e89a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e89e:	2d46      	cmp	r5, #70	; 0x46
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	701a      	strb	r2, [r3, #0]
 800e8a4:	d004      	beq.n	800e8b0 <__cvt+0x38>
 800e8a6:	2d45      	cmp	r5, #69	; 0x45
 800e8a8:	d100      	bne.n	800e8ac <__cvt+0x34>
 800e8aa:	3401      	adds	r4, #1
 800e8ac:	2102      	movs	r1, #2
 800e8ae:	e000      	b.n	800e8b2 <__cvt+0x3a>
 800e8b0:	2103      	movs	r1, #3
 800e8b2:	ab03      	add	r3, sp, #12
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	ab02      	add	r3, sp, #8
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	4622      	mov	r2, r4
 800e8bc:	4633      	mov	r3, r6
 800e8be:	eeb0 0b48 	vmov.f64	d0, d8
 800e8c2:	f000 fce9 	bl	800f298 <_dtoa_r>
 800e8c6:	2d47      	cmp	r5, #71	; 0x47
 800e8c8:	d109      	bne.n	800e8de <__cvt+0x66>
 800e8ca:	07fb      	lsls	r3, r7, #31
 800e8cc:	d407      	bmi.n	800e8de <__cvt+0x66>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8d2:	1a1b      	subs	r3, r3, r0
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	b005      	add	sp, #20
 800e8d8:	ecbd 8b02 	vpop	{d8}
 800e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8de:	2d46      	cmp	r5, #70	; 0x46
 800e8e0:	eb00 0204 	add.w	r2, r0, r4
 800e8e4:	d10c      	bne.n	800e900 <__cvt+0x88>
 800e8e6:	7803      	ldrb	r3, [r0, #0]
 800e8e8:	2b30      	cmp	r3, #48	; 0x30
 800e8ea:	d107      	bne.n	800e8fc <__cvt+0x84>
 800e8ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f4:	bf1c      	itt	ne
 800e8f6:	f1c4 0401 	rsbne	r4, r4, #1
 800e8fa:	6034      	strne	r4, [r6, #0]
 800e8fc:	6833      	ldr	r3, [r6, #0]
 800e8fe:	441a      	add	r2, r3
 800e900:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e908:	bf08      	it	eq
 800e90a:	9203      	streq	r2, [sp, #12]
 800e90c:	2130      	movs	r1, #48	; 0x30
 800e90e:	9b03      	ldr	r3, [sp, #12]
 800e910:	4293      	cmp	r3, r2
 800e912:	d2dc      	bcs.n	800e8ce <__cvt+0x56>
 800e914:	1c5c      	adds	r4, r3, #1
 800e916:	9403      	str	r4, [sp, #12]
 800e918:	7019      	strb	r1, [r3, #0]
 800e91a:	e7f8      	b.n	800e90e <__cvt+0x96>

0800e91c <__exponent>:
 800e91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e91e:	4603      	mov	r3, r0
 800e920:	2900      	cmp	r1, #0
 800e922:	bfb8      	it	lt
 800e924:	4249      	neglt	r1, r1
 800e926:	f803 2b02 	strb.w	r2, [r3], #2
 800e92a:	bfb4      	ite	lt
 800e92c:	222d      	movlt	r2, #45	; 0x2d
 800e92e:	222b      	movge	r2, #43	; 0x2b
 800e930:	2909      	cmp	r1, #9
 800e932:	7042      	strb	r2, [r0, #1]
 800e934:	dd2a      	ble.n	800e98c <__exponent+0x70>
 800e936:	f10d 0407 	add.w	r4, sp, #7
 800e93a:	46a4      	mov	ip, r4
 800e93c:	270a      	movs	r7, #10
 800e93e:	46a6      	mov	lr, r4
 800e940:	460a      	mov	r2, r1
 800e942:	fb91 f6f7 	sdiv	r6, r1, r7
 800e946:	fb07 1516 	mls	r5, r7, r6, r1
 800e94a:	3530      	adds	r5, #48	; 0x30
 800e94c:	2a63      	cmp	r2, #99	; 0x63
 800e94e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e952:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e956:	4631      	mov	r1, r6
 800e958:	dcf1      	bgt.n	800e93e <__exponent+0x22>
 800e95a:	3130      	adds	r1, #48	; 0x30
 800e95c:	f1ae 0502 	sub.w	r5, lr, #2
 800e960:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e964:	1c44      	adds	r4, r0, #1
 800e966:	4629      	mov	r1, r5
 800e968:	4561      	cmp	r1, ip
 800e96a:	d30a      	bcc.n	800e982 <__exponent+0x66>
 800e96c:	f10d 0209 	add.w	r2, sp, #9
 800e970:	eba2 020e 	sub.w	r2, r2, lr
 800e974:	4565      	cmp	r5, ip
 800e976:	bf88      	it	hi
 800e978:	2200      	movhi	r2, #0
 800e97a:	4413      	add	r3, r2
 800e97c:	1a18      	subs	r0, r3, r0
 800e97e:	b003      	add	sp, #12
 800e980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e986:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e98a:	e7ed      	b.n	800e968 <__exponent+0x4c>
 800e98c:	2330      	movs	r3, #48	; 0x30
 800e98e:	3130      	adds	r1, #48	; 0x30
 800e990:	7083      	strb	r3, [r0, #2]
 800e992:	70c1      	strb	r1, [r0, #3]
 800e994:	1d03      	adds	r3, r0, #4
 800e996:	e7f1      	b.n	800e97c <__exponent+0x60>

0800e998 <_printf_float>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	b08b      	sub	sp, #44	; 0x2c
 800e99e:	460c      	mov	r4, r1
 800e9a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e9a4:	4616      	mov	r6, r2
 800e9a6:	461f      	mov	r7, r3
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	f001 f9f7 	bl	800fd9c <_localeconv_r>
 800e9ae:	f8d0 b000 	ldr.w	fp, [r0]
 800e9b2:	4658      	mov	r0, fp
 800e9b4:	f7f1 fc94 	bl	80002e0 <strlen>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	9308      	str	r3, [sp, #32]
 800e9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e9c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	3307      	adds	r3, #7
 800e9c8:	f023 0307 	bic.w	r3, r3, #7
 800e9cc:	f103 0108 	add.w	r1, r3, #8
 800e9d0:	f8c8 1000 	str.w	r1, [r8]
 800e9d4:	4682      	mov	sl, r0
 800e9d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e9de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ec40 <_printf_float+0x2a8>
 800e9e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e9e6:	eeb0 6bc0 	vabs.f64	d6, d0
 800e9ea:	eeb4 6b47 	vcmp.f64	d6, d7
 800e9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f2:	dd24      	ble.n	800ea3e <_printf_float+0xa6>
 800e9f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fc:	d502      	bpl.n	800ea04 <_printf_float+0x6c>
 800e9fe:	232d      	movs	r3, #45	; 0x2d
 800ea00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea04:	4b90      	ldr	r3, [pc, #576]	; (800ec48 <_printf_float+0x2b0>)
 800ea06:	4891      	ldr	r0, [pc, #580]	; (800ec4c <_printf_float+0x2b4>)
 800ea08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ea0c:	bf94      	ite	ls
 800ea0e:	4698      	movls	r8, r3
 800ea10:	4680      	movhi	r8, r0
 800ea12:	2303      	movs	r3, #3
 800ea14:	6123      	str	r3, [r4, #16]
 800ea16:	f022 0204 	bic.w	r2, r2, #4
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	6022      	str	r2, [r4, #0]
 800ea1e:	9304      	str	r3, [sp, #16]
 800ea20:	9700      	str	r7, [sp, #0]
 800ea22:	4633      	mov	r3, r6
 800ea24:	aa09      	add	r2, sp, #36	; 0x24
 800ea26:	4621      	mov	r1, r4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f000 f9d3 	bl	800edd4 <_printf_common>
 800ea2e:	3001      	adds	r0, #1
 800ea30:	f040 808a 	bne.w	800eb48 <_printf_float+0x1b0>
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	b00b      	add	sp, #44	; 0x2c
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ea42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea46:	d709      	bvc.n	800ea5c <_printf_float+0xc4>
 800ea48:	ee10 3a90 	vmov	r3, s1
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	bfbc      	itt	lt
 800ea50:	232d      	movlt	r3, #45	; 0x2d
 800ea52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea56:	487e      	ldr	r0, [pc, #504]	; (800ec50 <_printf_float+0x2b8>)
 800ea58:	4b7e      	ldr	r3, [pc, #504]	; (800ec54 <_printf_float+0x2bc>)
 800ea5a:	e7d5      	b.n	800ea08 <_printf_float+0x70>
 800ea5c:	6863      	ldr	r3, [r4, #4]
 800ea5e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ea62:	9104      	str	r1, [sp, #16]
 800ea64:	1c59      	adds	r1, r3, #1
 800ea66:	d13c      	bne.n	800eae2 <_printf_float+0x14a>
 800ea68:	2306      	movs	r3, #6
 800ea6a:	6063      	str	r3, [r4, #4]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	9303      	str	r3, [sp, #12]
 800ea70:	ab08      	add	r3, sp, #32
 800ea72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ea76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea7a:	ab07      	add	r3, sp, #28
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	6022      	str	r2, [r4, #0]
 800ea82:	f10d 031b 	add.w	r3, sp, #27
 800ea86:	4628      	mov	r0, r5
 800ea88:	f7ff fef6 	bl	800e878 <__cvt>
 800ea8c:	9b04      	ldr	r3, [sp, #16]
 800ea8e:	9907      	ldr	r1, [sp, #28]
 800ea90:	2b47      	cmp	r3, #71	; 0x47
 800ea92:	4680      	mov	r8, r0
 800ea94:	d108      	bne.n	800eaa8 <_printf_float+0x110>
 800ea96:	1cc8      	adds	r0, r1, #3
 800ea98:	db02      	blt.n	800eaa0 <_printf_float+0x108>
 800ea9a:	6863      	ldr	r3, [r4, #4]
 800ea9c:	4299      	cmp	r1, r3
 800ea9e:	dd41      	ble.n	800eb24 <_printf_float+0x18c>
 800eaa0:	f1a9 0902 	sub.w	r9, r9, #2
 800eaa4:	fa5f f989 	uxtb.w	r9, r9
 800eaa8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eaac:	d820      	bhi.n	800eaf0 <_printf_float+0x158>
 800eaae:	3901      	subs	r1, #1
 800eab0:	464a      	mov	r2, r9
 800eab2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eab6:	9107      	str	r1, [sp, #28]
 800eab8:	f7ff ff30 	bl	800e91c <__exponent>
 800eabc:	9a08      	ldr	r2, [sp, #32]
 800eabe:	9004      	str	r0, [sp, #16]
 800eac0:	1813      	adds	r3, r2, r0
 800eac2:	2a01      	cmp	r2, #1
 800eac4:	6123      	str	r3, [r4, #16]
 800eac6:	dc02      	bgt.n	800eace <_printf_float+0x136>
 800eac8:	6822      	ldr	r2, [r4, #0]
 800eaca:	07d2      	lsls	r2, r2, #31
 800eacc:	d501      	bpl.n	800ead2 <_printf_float+0x13a>
 800eace:	3301      	adds	r3, #1
 800ead0:	6123      	str	r3, [r4, #16]
 800ead2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0a2      	beq.n	800ea20 <_printf_float+0x88>
 800eada:	232d      	movs	r3, #45	; 0x2d
 800eadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eae0:	e79e      	b.n	800ea20 <_printf_float+0x88>
 800eae2:	9904      	ldr	r1, [sp, #16]
 800eae4:	2947      	cmp	r1, #71	; 0x47
 800eae6:	d1c1      	bne.n	800ea6c <_printf_float+0xd4>
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1bf      	bne.n	800ea6c <_printf_float+0xd4>
 800eaec:	2301      	movs	r3, #1
 800eaee:	e7bc      	b.n	800ea6a <_printf_float+0xd2>
 800eaf0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800eaf4:	d118      	bne.n	800eb28 <_printf_float+0x190>
 800eaf6:	2900      	cmp	r1, #0
 800eaf8:	6863      	ldr	r3, [r4, #4]
 800eafa:	dd0b      	ble.n	800eb14 <_printf_float+0x17c>
 800eafc:	6121      	str	r1, [r4, #16]
 800eafe:	b913      	cbnz	r3, 800eb06 <_printf_float+0x16e>
 800eb00:	6822      	ldr	r2, [r4, #0]
 800eb02:	07d0      	lsls	r0, r2, #31
 800eb04:	d502      	bpl.n	800eb0c <_printf_float+0x174>
 800eb06:	3301      	adds	r3, #1
 800eb08:	440b      	add	r3, r1
 800eb0a:	6123      	str	r3, [r4, #16]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	e7de      	b.n	800ead2 <_printf_float+0x13a>
 800eb14:	b913      	cbnz	r3, 800eb1c <_printf_float+0x184>
 800eb16:	6822      	ldr	r2, [r4, #0]
 800eb18:	07d2      	lsls	r2, r2, #31
 800eb1a:	d501      	bpl.n	800eb20 <_printf_float+0x188>
 800eb1c:	3302      	adds	r3, #2
 800eb1e:	e7f4      	b.n	800eb0a <_printf_float+0x172>
 800eb20:	2301      	movs	r3, #1
 800eb22:	e7f2      	b.n	800eb0a <_printf_float+0x172>
 800eb24:	f04f 0967 	mov.w	r9, #103	; 0x67
 800eb28:	9b08      	ldr	r3, [sp, #32]
 800eb2a:	4299      	cmp	r1, r3
 800eb2c:	db05      	blt.n	800eb3a <_printf_float+0x1a2>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	6121      	str	r1, [r4, #16]
 800eb32:	07d8      	lsls	r0, r3, #31
 800eb34:	d5ea      	bpl.n	800eb0c <_printf_float+0x174>
 800eb36:	1c4b      	adds	r3, r1, #1
 800eb38:	e7e7      	b.n	800eb0a <_printf_float+0x172>
 800eb3a:	2900      	cmp	r1, #0
 800eb3c:	bfd4      	ite	le
 800eb3e:	f1c1 0202 	rsble	r2, r1, #2
 800eb42:	2201      	movgt	r2, #1
 800eb44:	4413      	add	r3, r2
 800eb46:	e7e0      	b.n	800eb0a <_printf_float+0x172>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	055a      	lsls	r2, r3, #21
 800eb4c:	d407      	bmi.n	800eb5e <_printf_float+0x1c6>
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	4642      	mov	r2, r8
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	d12a      	bne.n	800ebb2 <_printf_float+0x21a>
 800eb5c:	e76a      	b.n	800ea34 <_printf_float+0x9c>
 800eb5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eb62:	f240 80e2 	bls.w	800ed2a <_printf_float+0x392>
 800eb66:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eb6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb72:	d133      	bne.n	800ebdc <_printf_float+0x244>
 800eb74:	4a38      	ldr	r2, [pc, #224]	; (800ec58 <_printf_float+0x2c0>)
 800eb76:	2301      	movs	r3, #1
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f af58 	beq.w	800ea34 <_printf_float+0x9c>
 800eb84:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	db02      	blt.n	800eb92 <_printf_float+0x1fa>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	07d8      	lsls	r0, r3, #31
 800eb90:	d50f      	bpl.n	800ebb2 <_printf_float+0x21a>
 800eb92:	4653      	mov	r3, sl
 800eb94:	465a      	mov	r2, fp
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b8      	blx	r7
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	f43f af49 	beq.w	800ea34 <_printf_float+0x9c>
 800eba2:	f04f 0800 	mov.w	r8, #0
 800eba6:	f104 091a 	add.w	r9, r4, #26
 800ebaa:	9b08      	ldr	r3, [sp, #32]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	4543      	cmp	r3, r8
 800ebb0:	dc09      	bgt.n	800ebc6 <_printf_float+0x22e>
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	079b      	lsls	r3, r3, #30
 800ebb6:	f100 8108 	bmi.w	800edca <_printf_float+0x432>
 800ebba:	68e0      	ldr	r0, [r4, #12]
 800ebbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebbe:	4298      	cmp	r0, r3
 800ebc0:	bfb8      	it	lt
 800ebc2:	4618      	movlt	r0, r3
 800ebc4:	e738      	b.n	800ea38 <_printf_float+0xa0>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	464a      	mov	r2, r9
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4628      	mov	r0, r5
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f43f af2f 	beq.w	800ea34 <_printf_float+0x9c>
 800ebd6:	f108 0801 	add.w	r8, r8, #1
 800ebda:	e7e6      	b.n	800ebaa <_printf_float+0x212>
 800ebdc:	9b07      	ldr	r3, [sp, #28]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	dc3c      	bgt.n	800ec5c <_printf_float+0x2c4>
 800ebe2:	4a1d      	ldr	r2, [pc, #116]	; (800ec58 <_printf_float+0x2c0>)
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b8      	blx	r7
 800ebec:	3001      	adds	r0, #1
 800ebee:	f43f af21 	beq.w	800ea34 <_printf_float+0x9c>
 800ebf2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	d102      	bne.n	800ec00 <_printf_float+0x268>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	07d9      	lsls	r1, r3, #31
 800ebfe:	d5d8      	bpl.n	800ebb2 <_printf_float+0x21a>
 800ec00:	4653      	mov	r3, sl
 800ec02:	465a      	mov	r2, fp
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	f43f af12 	beq.w	800ea34 <_printf_float+0x9c>
 800ec10:	f04f 0900 	mov.w	r9, #0
 800ec14:	f104 0a1a 	add.w	sl, r4, #26
 800ec18:	9b07      	ldr	r3, [sp, #28]
 800ec1a:	425b      	negs	r3, r3
 800ec1c:	454b      	cmp	r3, r9
 800ec1e:	dc01      	bgt.n	800ec24 <_printf_float+0x28c>
 800ec20:	9b08      	ldr	r3, [sp, #32]
 800ec22:	e795      	b.n	800eb50 <_printf_float+0x1b8>
 800ec24:	2301      	movs	r3, #1
 800ec26:	4652      	mov	r2, sl
 800ec28:	4631      	mov	r1, r6
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	47b8      	blx	r7
 800ec2e:	3001      	adds	r0, #1
 800ec30:	f43f af00 	beq.w	800ea34 <_printf_float+0x9c>
 800ec34:	f109 0901 	add.w	r9, r9, #1
 800ec38:	e7ee      	b.n	800ec18 <_printf_float+0x280>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
 800ec40:	ffffffff 	.word	0xffffffff
 800ec44:	7fefffff 	.word	0x7fefffff
 800ec48:	0801b898 	.word	0x0801b898
 800ec4c:	0801b89c 	.word	0x0801b89c
 800ec50:	0801b8a4 	.word	0x0801b8a4
 800ec54:	0801b8a0 	.word	0x0801b8a0
 800ec58:	0801b8a8 	.word	0x0801b8a8
 800ec5c:	9a08      	ldr	r2, [sp, #32]
 800ec5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec60:	429a      	cmp	r2, r3
 800ec62:	bfa8      	it	ge
 800ec64:	461a      	movge	r2, r3
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	4691      	mov	r9, r2
 800ec6a:	dc38      	bgt.n	800ecde <_printf_float+0x346>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	9305      	str	r3, [sp, #20]
 800ec70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec74:	f104 021a 	add.w	r2, r4, #26
 800ec78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec7a:	9905      	ldr	r1, [sp, #20]
 800ec7c:	9304      	str	r3, [sp, #16]
 800ec7e:	eba3 0309 	sub.w	r3, r3, r9
 800ec82:	428b      	cmp	r3, r1
 800ec84:	dc33      	bgt.n	800ecee <_printf_float+0x356>
 800ec86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	db3c      	blt.n	800ed08 <_printf_float+0x370>
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	07da      	lsls	r2, r3, #31
 800ec92:	d439      	bmi.n	800ed08 <_printf_float+0x370>
 800ec94:	9a08      	ldr	r2, [sp, #32]
 800ec96:	9b04      	ldr	r3, [sp, #16]
 800ec98:	9907      	ldr	r1, [sp, #28]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	eba2 0901 	sub.w	r9, r2, r1
 800eca0:	4599      	cmp	r9, r3
 800eca2:	bfa8      	it	ge
 800eca4:	4699      	movge	r9, r3
 800eca6:	f1b9 0f00 	cmp.w	r9, #0
 800ecaa:	dc35      	bgt.n	800ed18 <_printf_float+0x380>
 800ecac:	f04f 0800 	mov.w	r8, #0
 800ecb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecb4:	f104 0a1a 	add.w	sl, r4, #26
 800ecb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ecbc:	1a9b      	subs	r3, r3, r2
 800ecbe:	eba3 0309 	sub.w	r3, r3, r9
 800ecc2:	4543      	cmp	r3, r8
 800ecc4:	f77f af75 	ble.w	800ebb2 <_printf_float+0x21a>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	4652      	mov	r2, sl
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	f43f aeae 	beq.w	800ea34 <_printf_float+0x9c>
 800ecd8:	f108 0801 	add.w	r8, r8, #1
 800ecdc:	e7ec      	b.n	800ecb8 <_printf_float+0x320>
 800ecde:	4613      	mov	r3, r2
 800ece0:	4631      	mov	r1, r6
 800ece2:	4642      	mov	r2, r8
 800ece4:	4628      	mov	r0, r5
 800ece6:	47b8      	blx	r7
 800ece8:	3001      	adds	r0, #1
 800ecea:	d1bf      	bne.n	800ec6c <_printf_float+0x2d4>
 800ecec:	e6a2      	b.n	800ea34 <_printf_float+0x9c>
 800ecee:	2301      	movs	r3, #1
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	9204      	str	r2, [sp, #16]
 800ecf6:	47b8      	blx	r7
 800ecf8:	3001      	adds	r0, #1
 800ecfa:	f43f ae9b 	beq.w	800ea34 <_printf_float+0x9c>
 800ecfe:	9b05      	ldr	r3, [sp, #20]
 800ed00:	9a04      	ldr	r2, [sp, #16]
 800ed02:	3301      	adds	r3, #1
 800ed04:	9305      	str	r3, [sp, #20]
 800ed06:	e7b7      	b.n	800ec78 <_printf_float+0x2e0>
 800ed08:	4653      	mov	r3, sl
 800ed0a:	465a      	mov	r2, fp
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	4628      	mov	r0, r5
 800ed10:	47b8      	blx	r7
 800ed12:	3001      	adds	r0, #1
 800ed14:	d1be      	bne.n	800ec94 <_printf_float+0x2fc>
 800ed16:	e68d      	b.n	800ea34 <_printf_float+0x9c>
 800ed18:	9a04      	ldr	r2, [sp, #16]
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	4442      	add	r2, r8
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4628      	mov	r0, r5
 800ed22:	47b8      	blx	r7
 800ed24:	3001      	adds	r0, #1
 800ed26:	d1c1      	bne.n	800ecac <_printf_float+0x314>
 800ed28:	e684      	b.n	800ea34 <_printf_float+0x9c>
 800ed2a:	9a08      	ldr	r2, [sp, #32]
 800ed2c:	2a01      	cmp	r2, #1
 800ed2e:	dc01      	bgt.n	800ed34 <_printf_float+0x39c>
 800ed30:	07db      	lsls	r3, r3, #31
 800ed32:	d537      	bpl.n	800eda4 <_printf_float+0x40c>
 800ed34:	2301      	movs	r3, #1
 800ed36:	4642      	mov	r2, r8
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	47b8      	blx	r7
 800ed3e:	3001      	adds	r0, #1
 800ed40:	f43f ae78 	beq.w	800ea34 <_printf_float+0x9c>
 800ed44:	4653      	mov	r3, sl
 800ed46:	465a      	mov	r2, fp
 800ed48:	4631      	mov	r1, r6
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	47b8      	blx	r7
 800ed4e:	3001      	adds	r0, #1
 800ed50:	f43f ae70 	beq.w	800ea34 <_printf_float+0x9c>
 800ed54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ed58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed60:	d01b      	beq.n	800ed9a <_printf_float+0x402>
 800ed62:	9b08      	ldr	r3, [sp, #32]
 800ed64:	f108 0201 	add.w	r2, r8, #1
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	47b8      	blx	r7
 800ed70:	3001      	adds	r0, #1
 800ed72:	d10e      	bne.n	800ed92 <_printf_float+0x3fa>
 800ed74:	e65e      	b.n	800ea34 <_printf_float+0x9c>
 800ed76:	2301      	movs	r3, #1
 800ed78:	464a      	mov	r2, r9
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	47b8      	blx	r7
 800ed80:	3001      	adds	r0, #1
 800ed82:	f43f ae57 	beq.w	800ea34 <_printf_float+0x9c>
 800ed86:	f108 0801 	add.w	r8, r8, #1
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	4543      	cmp	r3, r8
 800ed90:	dcf1      	bgt.n	800ed76 <_printf_float+0x3de>
 800ed92:	9b04      	ldr	r3, [sp, #16]
 800ed94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed98:	e6db      	b.n	800eb52 <_printf_float+0x1ba>
 800ed9a:	f04f 0800 	mov.w	r8, #0
 800ed9e:	f104 091a 	add.w	r9, r4, #26
 800eda2:	e7f2      	b.n	800ed8a <_printf_float+0x3f2>
 800eda4:	2301      	movs	r3, #1
 800eda6:	4642      	mov	r2, r8
 800eda8:	e7df      	b.n	800ed6a <_printf_float+0x3d2>
 800edaa:	2301      	movs	r3, #1
 800edac:	464a      	mov	r2, r9
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b8      	blx	r7
 800edb4:	3001      	adds	r0, #1
 800edb6:	f43f ae3d 	beq.w	800ea34 <_printf_float+0x9c>
 800edba:	f108 0801 	add.w	r8, r8, #1
 800edbe:	68e3      	ldr	r3, [r4, #12]
 800edc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edc2:	1a5b      	subs	r3, r3, r1
 800edc4:	4543      	cmp	r3, r8
 800edc6:	dcf0      	bgt.n	800edaa <_printf_float+0x412>
 800edc8:	e6f7      	b.n	800ebba <_printf_float+0x222>
 800edca:	f04f 0800 	mov.w	r8, #0
 800edce:	f104 0919 	add.w	r9, r4, #25
 800edd2:	e7f4      	b.n	800edbe <_printf_float+0x426>

0800edd4 <_printf_common>:
 800edd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd8:	4616      	mov	r6, r2
 800edda:	4699      	mov	r9, r3
 800eddc:	688a      	ldr	r2, [r1, #8]
 800edde:	690b      	ldr	r3, [r1, #16]
 800ede0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	bfb8      	it	lt
 800ede8:	4613      	movlt	r3, r2
 800edea:	6033      	str	r3, [r6, #0]
 800edec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edf0:	4607      	mov	r7, r0
 800edf2:	460c      	mov	r4, r1
 800edf4:	b10a      	cbz	r2, 800edfa <_printf_common+0x26>
 800edf6:	3301      	adds	r3, #1
 800edf8:	6033      	str	r3, [r6, #0]
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	0699      	lsls	r1, r3, #26
 800edfe:	bf42      	ittt	mi
 800ee00:	6833      	ldrmi	r3, [r6, #0]
 800ee02:	3302      	addmi	r3, #2
 800ee04:	6033      	strmi	r3, [r6, #0]
 800ee06:	6825      	ldr	r5, [r4, #0]
 800ee08:	f015 0506 	ands.w	r5, r5, #6
 800ee0c:	d106      	bne.n	800ee1c <_printf_common+0x48>
 800ee0e:	f104 0a19 	add.w	sl, r4, #25
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	6832      	ldr	r2, [r6, #0]
 800ee16:	1a9b      	subs	r3, r3, r2
 800ee18:	42ab      	cmp	r3, r5
 800ee1a:	dc26      	bgt.n	800ee6a <_printf_common+0x96>
 800ee1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee20:	1e13      	subs	r3, r2, #0
 800ee22:	6822      	ldr	r2, [r4, #0]
 800ee24:	bf18      	it	ne
 800ee26:	2301      	movne	r3, #1
 800ee28:	0692      	lsls	r2, r2, #26
 800ee2a:	d42b      	bmi.n	800ee84 <_printf_common+0xb0>
 800ee2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee30:	4649      	mov	r1, r9
 800ee32:	4638      	mov	r0, r7
 800ee34:	47c0      	blx	r8
 800ee36:	3001      	adds	r0, #1
 800ee38:	d01e      	beq.n	800ee78 <_printf_common+0xa4>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	68e5      	ldr	r5, [r4, #12]
 800ee3e:	6832      	ldr	r2, [r6, #0]
 800ee40:	f003 0306 	and.w	r3, r3, #6
 800ee44:	2b04      	cmp	r3, #4
 800ee46:	bf08      	it	eq
 800ee48:	1aad      	subeq	r5, r5, r2
 800ee4a:	68a3      	ldr	r3, [r4, #8]
 800ee4c:	6922      	ldr	r2, [r4, #16]
 800ee4e:	bf0c      	ite	eq
 800ee50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee54:	2500      	movne	r5, #0
 800ee56:	4293      	cmp	r3, r2
 800ee58:	bfc4      	itt	gt
 800ee5a:	1a9b      	subgt	r3, r3, r2
 800ee5c:	18ed      	addgt	r5, r5, r3
 800ee5e:	2600      	movs	r6, #0
 800ee60:	341a      	adds	r4, #26
 800ee62:	42b5      	cmp	r5, r6
 800ee64:	d11a      	bne.n	800ee9c <_printf_common+0xc8>
 800ee66:	2000      	movs	r0, #0
 800ee68:	e008      	b.n	800ee7c <_printf_common+0xa8>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	4649      	mov	r1, r9
 800ee70:	4638      	mov	r0, r7
 800ee72:	47c0      	blx	r8
 800ee74:	3001      	adds	r0, #1
 800ee76:	d103      	bne.n	800ee80 <_printf_common+0xac>
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee80:	3501      	adds	r5, #1
 800ee82:	e7c6      	b.n	800ee12 <_printf_common+0x3e>
 800ee84:	18e1      	adds	r1, r4, r3
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	2030      	movs	r0, #48	; 0x30
 800ee8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee8e:	4422      	add	r2, r4
 800ee90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee98:	3302      	adds	r3, #2
 800ee9a:	e7c7      	b.n	800ee2c <_printf_common+0x58>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	4622      	mov	r2, r4
 800eea0:	4649      	mov	r1, r9
 800eea2:	4638      	mov	r0, r7
 800eea4:	47c0      	blx	r8
 800eea6:	3001      	adds	r0, #1
 800eea8:	d0e6      	beq.n	800ee78 <_printf_common+0xa4>
 800eeaa:	3601      	adds	r6, #1
 800eeac:	e7d9      	b.n	800ee62 <_printf_common+0x8e>
	...

0800eeb0 <_printf_i>:
 800eeb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	4691      	mov	r9, r2
 800eeb8:	7e27      	ldrb	r7, [r4, #24]
 800eeba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eebc:	2f78      	cmp	r7, #120	; 0x78
 800eebe:	4680      	mov	r8, r0
 800eec0:	469a      	mov	sl, r3
 800eec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eec6:	d807      	bhi.n	800eed8 <_printf_i+0x28>
 800eec8:	2f62      	cmp	r7, #98	; 0x62
 800eeca:	d80a      	bhi.n	800eee2 <_printf_i+0x32>
 800eecc:	2f00      	cmp	r7, #0
 800eece:	f000 80d8 	beq.w	800f082 <_printf_i+0x1d2>
 800eed2:	2f58      	cmp	r7, #88	; 0x58
 800eed4:	f000 80a3 	beq.w	800f01e <_printf_i+0x16e>
 800eed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eedc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eee0:	e03a      	b.n	800ef58 <_printf_i+0xa8>
 800eee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eee6:	2b15      	cmp	r3, #21
 800eee8:	d8f6      	bhi.n	800eed8 <_printf_i+0x28>
 800eeea:	a001      	add	r0, pc, #4	; (adr r0, 800eef0 <_printf_i+0x40>)
 800eeec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eef0:	0800ef49 	.word	0x0800ef49
 800eef4:	0800ef5d 	.word	0x0800ef5d
 800eef8:	0800eed9 	.word	0x0800eed9
 800eefc:	0800eed9 	.word	0x0800eed9
 800ef00:	0800eed9 	.word	0x0800eed9
 800ef04:	0800eed9 	.word	0x0800eed9
 800ef08:	0800ef5d 	.word	0x0800ef5d
 800ef0c:	0800eed9 	.word	0x0800eed9
 800ef10:	0800eed9 	.word	0x0800eed9
 800ef14:	0800eed9 	.word	0x0800eed9
 800ef18:	0800eed9 	.word	0x0800eed9
 800ef1c:	0800f069 	.word	0x0800f069
 800ef20:	0800ef8d 	.word	0x0800ef8d
 800ef24:	0800f04b 	.word	0x0800f04b
 800ef28:	0800eed9 	.word	0x0800eed9
 800ef2c:	0800eed9 	.word	0x0800eed9
 800ef30:	0800f08b 	.word	0x0800f08b
 800ef34:	0800eed9 	.word	0x0800eed9
 800ef38:	0800ef8d 	.word	0x0800ef8d
 800ef3c:	0800eed9 	.word	0x0800eed9
 800ef40:	0800eed9 	.word	0x0800eed9
 800ef44:	0800f053 	.word	0x0800f053
 800ef48:	680b      	ldr	r3, [r1, #0]
 800ef4a:	1d1a      	adds	r2, r3, #4
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	600a      	str	r2, [r1, #0]
 800ef50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e0a3      	b.n	800f0a4 <_printf_i+0x1f4>
 800ef5c:	6825      	ldr	r5, [r4, #0]
 800ef5e:	6808      	ldr	r0, [r1, #0]
 800ef60:	062e      	lsls	r6, r5, #24
 800ef62:	f100 0304 	add.w	r3, r0, #4
 800ef66:	d50a      	bpl.n	800ef7e <_printf_i+0xce>
 800ef68:	6805      	ldr	r5, [r0, #0]
 800ef6a:	600b      	str	r3, [r1, #0]
 800ef6c:	2d00      	cmp	r5, #0
 800ef6e:	da03      	bge.n	800ef78 <_printf_i+0xc8>
 800ef70:	232d      	movs	r3, #45	; 0x2d
 800ef72:	426d      	negs	r5, r5
 800ef74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef78:	485e      	ldr	r0, [pc, #376]	; (800f0f4 <_printf_i+0x244>)
 800ef7a:	230a      	movs	r3, #10
 800ef7c:	e019      	b.n	800efb2 <_printf_i+0x102>
 800ef7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef82:	6805      	ldr	r5, [r0, #0]
 800ef84:	600b      	str	r3, [r1, #0]
 800ef86:	bf18      	it	ne
 800ef88:	b22d      	sxthne	r5, r5
 800ef8a:	e7ef      	b.n	800ef6c <_printf_i+0xbc>
 800ef8c:	680b      	ldr	r3, [r1, #0]
 800ef8e:	6825      	ldr	r5, [r4, #0]
 800ef90:	1d18      	adds	r0, r3, #4
 800ef92:	6008      	str	r0, [r1, #0]
 800ef94:	0628      	lsls	r0, r5, #24
 800ef96:	d501      	bpl.n	800ef9c <_printf_i+0xec>
 800ef98:	681d      	ldr	r5, [r3, #0]
 800ef9a:	e002      	b.n	800efa2 <_printf_i+0xf2>
 800ef9c:	0669      	lsls	r1, r5, #25
 800ef9e:	d5fb      	bpl.n	800ef98 <_printf_i+0xe8>
 800efa0:	881d      	ldrh	r5, [r3, #0]
 800efa2:	4854      	ldr	r0, [pc, #336]	; (800f0f4 <_printf_i+0x244>)
 800efa4:	2f6f      	cmp	r7, #111	; 0x6f
 800efa6:	bf0c      	ite	eq
 800efa8:	2308      	moveq	r3, #8
 800efaa:	230a      	movne	r3, #10
 800efac:	2100      	movs	r1, #0
 800efae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efb2:	6866      	ldr	r6, [r4, #4]
 800efb4:	60a6      	str	r6, [r4, #8]
 800efb6:	2e00      	cmp	r6, #0
 800efb8:	bfa2      	ittt	ge
 800efba:	6821      	ldrge	r1, [r4, #0]
 800efbc:	f021 0104 	bicge.w	r1, r1, #4
 800efc0:	6021      	strge	r1, [r4, #0]
 800efc2:	b90d      	cbnz	r5, 800efc8 <_printf_i+0x118>
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	d04d      	beq.n	800f064 <_printf_i+0x1b4>
 800efc8:	4616      	mov	r6, r2
 800efca:	fbb5 f1f3 	udiv	r1, r5, r3
 800efce:	fb03 5711 	mls	r7, r3, r1, r5
 800efd2:	5dc7      	ldrb	r7, [r0, r7]
 800efd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800efd8:	462f      	mov	r7, r5
 800efda:	42bb      	cmp	r3, r7
 800efdc:	460d      	mov	r5, r1
 800efde:	d9f4      	bls.n	800efca <_printf_i+0x11a>
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d10b      	bne.n	800effc <_printf_i+0x14c>
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	07df      	lsls	r7, r3, #31
 800efe8:	d508      	bpl.n	800effc <_printf_i+0x14c>
 800efea:	6923      	ldr	r3, [r4, #16]
 800efec:	6861      	ldr	r1, [r4, #4]
 800efee:	4299      	cmp	r1, r3
 800eff0:	bfde      	ittt	le
 800eff2:	2330      	movle	r3, #48	; 0x30
 800eff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800effc:	1b92      	subs	r2, r2, r6
 800effe:	6122      	str	r2, [r4, #16]
 800f000:	f8cd a000 	str.w	sl, [sp]
 800f004:	464b      	mov	r3, r9
 800f006:	aa03      	add	r2, sp, #12
 800f008:	4621      	mov	r1, r4
 800f00a:	4640      	mov	r0, r8
 800f00c:	f7ff fee2 	bl	800edd4 <_printf_common>
 800f010:	3001      	adds	r0, #1
 800f012:	d14c      	bne.n	800f0ae <_printf_i+0x1fe>
 800f014:	f04f 30ff 	mov.w	r0, #4294967295
 800f018:	b004      	add	sp, #16
 800f01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01e:	4835      	ldr	r0, [pc, #212]	; (800f0f4 <_printf_i+0x244>)
 800f020:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	680e      	ldr	r6, [r1, #0]
 800f028:	061f      	lsls	r7, r3, #24
 800f02a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f02e:	600e      	str	r6, [r1, #0]
 800f030:	d514      	bpl.n	800f05c <_printf_i+0x1ac>
 800f032:	07d9      	lsls	r1, r3, #31
 800f034:	bf44      	itt	mi
 800f036:	f043 0320 	orrmi.w	r3, r3, #32
 800f03a:	6023      	strmi	r3, [r4, #0]
 800f03c:	b91d      	cbnz	r5, 800f046 <_printf_i+0x196>
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	f023 0320 	bic.w	r3, r3, #32
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	2310      	movs	r3, #16
 800f048:	e7b0      	b.n	800efac <_printf_i+0xfc>
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	f043 0320 	orr.w	r3, r3, #32
 800f050:	6023      	str	r3, [r4, #0]
 800f052:	2378      	movs	r3, #120	; 0x78
 800f054:	4828      	ldr	r0, [pc, #160]	; (800f0f8 <_printf_i+0x248>)
 800f056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f05a:	e7e3      	b.n	800f024 <_printf_i+0x174>
 800f05c:	065e      	lsls	r6, r3, #25
 800f05e:	bf48      	it	mi
 800f060:	b2ad      	uxthmi	r5, r5
 800f062:	e7e6      	b.n	800f032 <_printf_i+0x182>
 800f064:	4616      	mov	r6, r2
 800f066:	e7bb      	b.n	800efe0 <_printf_i+0x130>
 800f068:	680b      	ldr	r3, [r1, #0]
 800f06a:	6826      	ldr	r6, [r4, #0]
 800f06c:	6960      	ldr	r0, [r4, #20]
 800f06e:	1d1d      	adds	r5, r3, #4
 800f070:	600d      	str	r5, [r1, #0]
 800f072:	0635      	lsls	r5, r6, #24
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	d501      	bpl.n	800f07c <_printf_i+0x1cc>
 800f078:	6018      	str	r0, [r3, #0]
 800f07a:	e002      	b.n	800f082 <_printf_i+0x1d2>
 800f07c:	0671      	lsls	r1, r6, #25
 800f07e:	d5fb      	bpl.n	800f078 <_printf_i+0x1c8>
 800f080:	8018      	strh	r0, [r3, #0]
 800f082:	2300      	movs	r3, #0
 800f084:	6123      	str	r3, [r4, #16]
 800f086:	4616      	mov	r6, r2
 800f088:	e7ba      	b.n	800f000 <_printf_i+0x150>
 800f08a:	680b      	ldr	r3, [r1, #0]
 800f08c:	1d1a      	adds	r2, r3, #4
 800f08e:	600a      	str	r2, [r1, #0]
 800f090:	681e      	ldr	r6, [r3, #0]
 800f092:	6862      	ldr	r2, [r4, #4]
 800f094:	2100      	movs	r1, #0
 800f096:	4630      	mov	r0, r6
 800f098:	f7f1 f92a 	bl	80002f0 <memchr>
 800f09c:	b108      	cbz	r0, 800f0a2 <_printf_i+0x1f2>
 800f09e:	1b80      	subs	r0, r0, r6
 800f0a0:	6060      	str	r0, [r4, #4]
 800f0a2:	6863      	ldr	r3, [r4, #4]
 800f0a4:	6123      	str	r3, [r4, #16]
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0ac:	e7a8      	b.n	800f000 <_printf_i+0x150>
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	4632      	mov	r2, r6
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	47d0      	blx	sl
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d0ab      	beq.n	800f014 <_printf_i+0x164>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	079b      	lsls	r3, r3, #30
 800f0c0:	d413      	bmi.n	800f0ea <_printf_i+0x23a>
 800f0c2:	68e0      	ldr	r0, [r4, #12]
 800f0c4:	9b03      	ldr	r3, [sp, #12]
 800f0c6:	4298      	cmp	r0, r3
 800f0c8:	bfb8      	it	lt
 800f0ca:	4618      	movlt	r0, r3
 800f0cc:	e7a4      	b.n	800f018 <_printf_i+0x168>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	4632      	mov	r2, r6
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	47d0      	blx	sl
 800f0d8:	3001      	adds	r0, #1
 800f0da:	d09b      	beq.n	800f014 <_printf_i+0x164>
 800f0dc:	3501      	adds	r5, #1
 800f0de:	68e3      	ldr	r3, [r4, #12]
 800f0e0:	9903      	ldr	r1, [sp, #12]
 800f0e2:	1a5b      	subs	r3, r3, r1
 800f0e4:	42ab      	cmp	r3, r5
 800f0e6:	dcf2      	bgt.n	800f0ce <_printf_i+0x21e>
 800f0e8:	e7eb      	b.n	800f0c2 <_printf_i+0x212>
 800f0ea:	2500      	movs	r5, #0
 800f0ec:	f104 0619 	add.w	r6, r4, #25
 800f0f0:	e7f5      	b.n	800f0de <_printf_i+0x22e>
 800f0f2:	bf00      	nop
 800f0f4:	0801b8aa 	.word	0x0801b8aa
 800f0f8:	0801b8bb 	.word	0x0801b8bb

0800f0fc <siprintf>:
 800f0fc:	b40e      	push	{r1, r2, r3}
 800f0fe:	b500      	push	{lr}
 800f100:	b09c      	sub	sp, #112	; 0x70
 800f102:	ab1d      	add	r3, sp, #116	; 0x74
 800f104:	9002      	str	r0, [sp, #8]
 800f106:	9006      	str	r0, [sp, #24]
 800f108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f10c:	4809      	ldr	r0, [pc, #36]	; (800f134 <siprintf+0x38>)
 800f10e:	9107      	str	r1, [sp, #28]
 800f110:	9104      	str	r1, [sp, #16]
 800f112:	4909      	ldr	r1, [pc, #36]	; (800f138 <siprintf+0x3c>)
 800f114:	f853 2b04 	ldr.w	r2, [r3], #4
 800f118:	9105      	str	r1, [sp, #20]
 800f11a:	6800      	ldr	r0, [r0, #0]
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	a902      	add	r1, sp, #8
 800f120:	f001 fadc 	bl	80106dc <_svfiprintf_r>
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	2200      	movs	r2, #0
 800f128:	701a      	strb	r2, [r3, #0]
 800f12a:	b01c      	add	sp, #112	; 0x70
 800f12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f130:	b003      	add	sp, #12
 800f132:	4770      	bx	lr
 800f134:	24000378 	.word	0x24000378
 800f138:	ffff0208 	.word	0xffff0208

0800f13c <stpcpy>:
 800f13c:	4603      	mov	r3, r0
 800f13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f142:	4618      	mov	r0, r3
 800f144:	f803 2b01 	strb.w	r2, [r3], #1
 800f148:	2a00      	cmp	r2, #0
 800f14a:	d1f8      	bne.n	800f13e <stpcpy+0x2>
 800f14c:	4770      	bx	lr

0800f14e <strcat>:
 800f14e:	b510      	push	{r4, lr}
 800f150:	4602      	mov	r2, r0
 800f152:	7814      	ldrb	r4, [r2, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	3201      	adds	r2, #1
 800f158:	2c00      	cmp	r4, #0
 800f15a:	d1fa      	bne.n	800f152 <strcat+0x4>
 800f15c:	3b01      	subs	r3, #1
 800f15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f166:	2a00      	cmp	r2, #0
 800f168:	d1f9      	bne.n	800f15e <strcat+0x10>
 800f16a:	bd10      	pop	{r4, pc}

0800f16c <strcpy>:
 800f16c:	4603      	mov	r3, r0
 800f16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f172:	f803 2b01 	strb.w	r2, [r3], #1
 800f176:	2a00      	cmp	r2, #0
 800f178:	d1f9      	bne.n	800f16e <strcpy+0x2>
 800f17a:	4770      	bx	lr

0800f17c <quorem>:
 800f17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	6903      	ldr	r3, [r0, #16]
 800f182:	690c      	ldr	r4, [r1, #16]
 800f184:	42a3      	cmp	r3, r4
 800f186:	4607      	mov	r7, r0
 800f188:	f2c0 8081 	blt.w	800f28e <quorem+0x112>
 800f18c:	3c01      	subs	r4, #1
 800f18e:	f101 0814 	add.w	r8, r1, #20
 800f192:	f100 0514 	add.w	r5, r0, #20
 800f196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f1ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1b4:	d331      	bcc.n	800f21a <quorem+0x9e>
 800f1b6:	f04f 0e00 	mov.w	lr, #0
 800f1ba:	4640      	mov	r0, r8
 800f1bc:	46ac      	mov	ip, r5
 800f1be:	46f2      	mov	sl, lr
 800f1c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800f1c4:	b293      	uxth	r3, r2
 800f1c6:	fb06 e303 	mla	r3, r6, r3, lr
 800f1ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	ebaa 0303 	sub.w	r3, sl, r3
 800f1d4:	0c12      	lsrs	r2, r2, #16
 800f1d6:	f8dc a000 	ldr.w	sl, [ip]
 800f1da:	fb06 e202 	mla	r2, r6, r2, lr
 800f1de:	fa13 f38a 	uxtah	r3, r3, sl
 800f1e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f1e6:	fa1f fa82 	uxth.w	sl, r2
 800f1ea:	f8dc 2000 	ldr.w	r2, [ip]
 800f1ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f1f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1fc:	4581      	cmp	r9, r0
 800f1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800f202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f206:	d2db      	bcs.n	800f1c0 <quorem+0x44>
 800f208:	f855 300b 	ldr.w	r3, [r5, fp]
 800f20c:	b92b      	cbnz	r3, 800f21a <quorem+0x9e>
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	3b04      	subs	r3, #4
 800f212:	429d      	cmp	r5, r3
 800f214:	461a      	mov	r2, r3
 800f216:	d32e      	bcc.n	800f276 <quorem+0xfa>
 800f218:	613c      	str	r4, [r7, #16]
 800f21a:	4638      	mov	r0, r7
 800f21c:	f001 f848 	bl	80102b0 <__mcmp>
 800f220:	2800      	cmp	r0, #0
 800f222:	db24      	blt.n	800f26e <quorem+0xf2>
 800f224:	3601      	adds	r6, #1
 800f226:	4628      	mov	r0, r5
 800f228:	f04f 0c00 	mov.w	ip, #0
 800f22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f230:	f8d0 e000 	ldr.w	lr, [r0]
 800f234:	b293      	uxth	r3, r2
 800f236:	ebac 0303 	sub.w	r3, ip, r3
 800f23a:	0c12      	lsrs	r2, r2, #16
 800f23c:	fa13 f38e 	uxtah	r3, r3, lr
 800f240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f248:	b29b      	uxth	r3, r3
 800f24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f24e:	45c1      	cmp	r9, r8
 800f250:	f840 3b04 	str.w	r3, [r0], #4
 800f254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f258:	d2e8      	bcs.n	800f22c <quorem+0xb0>
 800f25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f262:	b922      	cbnz	r2, 800f26e <quorem+0xf2>
 800f264:	3b04      	subs	r3, #4
 800f266:	429d      	cmp	r5, r3
 800f268:	461a      	mov	r2, r3
 800f26a:	d30a      	bcc.n	800f282 <quorem+0x106>
 800f26c:	613c      	str	r4, [r7, #16]
 800f26e:	4630      	mov	r0, r6
 800f270:	b003      	add	sp, #12
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	6812      	ldr	r2, [r2, #0]
 800f278:	3b04      	subs	r3, #4
 800f27a:	2a00      	cmp	r2, #0
 800f27c:	d1cc      	bne.n	800f218 <quorem+0x9c>
 800f27e:	3c01      	subs	r4, #1
 800f280:	e7c7      	b.n	800f212 <quorem+0x96>
 800f282:	6812      	ldr	r2, [r2, #0]
 800f284:	3b04      	subs	r3, #4
 800f286:	2a00      	cmp	r2, #0
 800f288:	d1f0      	bne.n	800f26c <quorem+0xf0>
 800f28a:	3c01      	subs	r4, #1
 800f28c:	e7eb      	b.n	800f266 <quorem+0xea>
 800f28e:	2000      	movs	r0, #0
 800f290:	e7ee      	b.n	800f270 <quorem+0xf4>
 800f292:	0000      	movs	r0, r0
 800f294:	0000      	movs	r0, r0
	...

0800f298 <_dtoa_r>:
 800f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	ec59 8b10 	vmov	r8, r9, d0
 800f2a0:	b095      	sub	sp, #84	; 0x54
 800f2a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f2a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f2a6:	9107      	str	r1, [sp, #28]
 800f2a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f2b0:	9310      	str	r3, [sp, #64]	; 0x40
 800f2b2:	b975      	cbnz	r5, 800f2d2 <_dtoa_r+0x3a>
 800f2b4:	2010      	movs	r0, #16
 800f2b6:	f000 fd75 	bl	800fda4 <malloc>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	6270      	str	r0, [r6, #36]	; 0x24
 800f2be:	b920      	cbnz	r0, 800f2ca <_dtoa_r+0x32>
 800f2c0:	4bab      	ldr	r3, [pc, #684]	; (800f570 <_dtoa_r+0x2d8>)
 800f2c2:	21ea      	movs	r1, #234	; 0xea
 800f2c4:	48ab      	ldr	r0, [pc, #684]	; (800f574 <_dtoa_r+0x2dc>)
 800f2c6:	f001 fb19 	bl	80108fc <__assert_func>
 800f2ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2ce:	6005      	str	r5, [r0, #0]
 800f2d0:	60c5      	str	r5, [r0, #12]
 800f2d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f2d4:	6819      	ldr	r1, [r3, #0]
 800f2d6:	b151      	cbz	r1, 800f2ee <_dtoa_r+0x56>
 800f2d8:	685a      	ldr	r2, [r3, #4]
 800f2da:	604a      	str	r2, [r1, #4]
 800f2dc:	2301      	movs	r3, #1
 800f2de:	4093      	lsls	r3, r2
 800f2e0:	608b      	str	r3, [r1, #8]
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f000 fda6 	bl	800fe34 <_Bfree>
 800f2e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	f1b9 0300 	subs.w	r3, r9, #0
 800f2f2:	bfbb      	ittet	lt
 800f2f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2f8:	9303      	strlt	r3, [sp, #12]
 800f2fa:	2300      	movge	r3, #0
 800f2fc:	2201      	movlt	r2, #1
 800f2fe:	bfac      	ite	ge
 800f300:	6023      	strge	r3, [r4, #0]
 800f302:	6022      	strlt	r2, [r4, #0]
 800f304:	4b9c      	ldr	r3, [pc, #624]	; (800f578 <_dtoa_r+0x2e0>)
 800f306:	9c03      	ldr	r4, [sp, #12]
 800f308:	43a3      	bics	r3, r4
 800f30a:	d11a      	bne.n	800f342 <_dtoa_r+0xaa>
 800f30c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f30e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f318:	ea53 0308 	orrs.w	r3, r3, r8
 800f31c:	f000 8512 	beq.w	800fd44 <_dtoa_r+0xaac>
 800f320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f322:	b953      	cbnz	r3, 800f33a <_dtoa_r+0xa2>
 800f324:	4b95      	ldr	r3, [pc, #596]	; (800f57c <_dtoa_r+0x2e4>)
 800f326:	e01f      	b.n	800f368 <_dtoa_r+0xd0>
 800f328:	4b95      	ldr	r3, [pc, #596]	; (800f580 <_dtoa_r+0x2e8>)
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	3308      	adds	r3, #8
 800f32e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f330:	6013      	str	r3, [r2, #0]
 800f332:	9800      	ldr	r0, [sp, #0]
 800f334:	b015      	add	sp, #84	; 0x54
 800f336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33a:	4b90      	ldr	r3, [pc, #576]	; (800f57c <_dtoa_r+0x2e4>)
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	3303      	adds	r3, #3
 800f340:	e7f5      	b.n	800f32e <_dtoa_r+0x96>
 800f342:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f346:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f352:	d10b      	bne.n	800f36c <_dtoa_r+0xd4>
 800f354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f356:	2301      	movs	r3, #1
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	f000 84ee 	beq.w	800fd3e <_dtoa_r+0xaa6>
 800f362:	4888      	ldr	r0, [pc, #544]	; (800f584 <_dtoa_r+0x2ec>)
 800f364:	6018      	str	r0, [r3, #0]
 800f366:	1e43      	subs	r3, r0, #1
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	e7e2      	b.n	800f332 <_dtoa_r+0x9a>
 800f36c:	a913      	add	r1, sp, #76	; 0x4c
 800f36e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f372:	aa12      	add	r2, sp, #72	; 0x48
 800f374:	4630      	mov	r0, r6
 800f376:	f001 f83f 	bl	80103f8 <__d2b>
 800f37a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f37e:	4605      	mov	r5, r0
 800f380:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f382:	2900      	cmp	r1, #0
 800f384:	d047      	beq.n	800f416 <_dtoa_r+0x17e>
 800f386:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f38c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f390:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f398:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f39c:	2400      	movs	r4, #0
 800f39e:	ec43 2b16 	vmov	d6, r2, r3
 800f3a2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f3a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f558 <_dtoa_r+0x2c0>
 800f3aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3ae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f560 <_dtoa_r+0x2c8>
 800f3b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f3b6:	eeb0 7b46 	vmov.f64	d7, d6
 800f3ba:	ee06 1a90 	vmov	s13, r1
 800f3be:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800f3c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f568 <_dtoa_r+0x2d0>
 800f3c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f3ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f3ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d6:	ee16 ba90 	vmov	fp, s13
 800f3da:	9411      	str	r4, [sp, #68]	; 0x44
 800f3dc:	d508      	bpl.n	800f3f0 <_dtoa_r+0x158>
 800f3de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f3e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	bf18      	it	ne
 800f3ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f3f0:	f1bb 0f16 	cmp.w	fp, #22
 800f3f4:	d832      	bhi.n	800f45c <_dtoa_r+0x1c4>
 800f3f6:	4b64      	ldr	r3, [pc, #400]	; (800f588 <_dtoa_r+0x2f0>)
 800f3f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f3fc:	ed93 7b00 	vldr	d7, [r3]
 800f400:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f404:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40c:	d501      	bpl.n	800f412 <_dtoa_r+0x17a>
 800f40e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f412:	2300      	movs	r3, #0
 800f414:	e023      	b.n	800f45e <_dtoa_r+0x1c6>
 800f416:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f418:	4401      	add	r1, r0
 800f41a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f41e:	2b20      	cmp	r3, #32
 800f420:	bfc3      	ittte	gt
 800f422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f426:	fa04 f303 	lslgt.w	r3, r4, r3
 800f42a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f42e:	f1c3 0320 	rsble	r3, r3, #32
 800f432:	bfc6      	itte	gt
 800f434:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f438:	ea43 0308 	orrgt.w	r3, r3, r8
 800f43c:	fa08 f303 	lslle.w	r3, r8, r3
 800f440:	ee07 3a90 	vmov	s15, r3
 800f444:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f448:	3901      	subs	r1, #1
 800f44a:	ed8d 7b00 	vstr	d7, [sp]
 800f44e:	9c01      	ldr	r4, [sp, #4]
 800f450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f454:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f458:	2401      	movs	r4, #1
 800f45a:	e7a0      	b.n	800f39e <_dtoa_r+0x106>
 800f45c:	2301      	movs	r3, #1
 800f45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f460:	1a43      	subs	r3, r0, r1
 800f462:	1e5a      	subs	r2, r3, #1
 800f464:	bf45      	ittet	mi
 800f466:	f1c3 0301 	rsbmi	r3, r3, #1
 800f46a:	9305      	strmi	r3, [sp, #20]
 800f46c:	2300      	movpl	r3, #0
 800f46e:	2300      	movmi	r3, #0
 800f470:	9206      	str	r2, [sp, #24]
 800f472:	bf54      	ite	pl
 800f474:	9305      	strpl	r3, [sp, #20]
 800f476:	9306      	strmi	r3, [sp, #24]
 800f478:	f1bb 0f00 	cmp.w	fp, #0
 800f47c:	db18      	blt.n	800f4b0 <_dtoa_r+0x218>
 800f47e:	9b06      	ldr	r3, [sp, #24]
 800f480:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f484:	445b      	add	r3, fp
 800f486:	9306      	str	r3, [sp, #24]
 800f488:	2300      	movs	r3, #0
 800f48a:	9a07      	ldr	r2, [sp, #28]
 800f48c:	2a09      	cmp	r2, #9
 800f48e:	d849      	bhi.n	800f524 <_dtoa_r+0x28c>
 800f490:	2a05      	cmp	r2, #5
 800f492:	bfc4      	itt	gt
 800f494:	3a04      	subgt	r2, #4
 800f496:	9207      	strgt	r2, [sp, #28]
 800f498:	9a07      	ldr	r2, [sp, #28]
 800f49a:	f1a2 0202 	sub.w	r2, r2, #2
 800f49e:	bfcc      	ite	gt
 800f4a0:	2400      	movgt	r4, #0
 800f4a2:	2401      	movle	r4, #1
 800f4a4:	2a03      	cmp	r2, #3
 800f4a6:	d848      	bhi.n	800f53a <_dtoa_r+0x2a2>
 800f4a8:	e8df f002 	tbb	[pc, r2]
 800f4ac:	3a2c2e0b 	.word	0x3a2c2e0b
 800f4b0:	9b05      	ldr	r3, [sp, #20]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	eba3 030b 	sub.w	r3, r3, fp
 800f4b8:	9305      	str	r3, [sp, #20]
 800f4ba:	920e      	str	r2, [sp, #56]	; 0x38
 800f4bc:	f1cb 0300 	rsb	r3, fp, #0
 800f4c0:	e7e3      	b.n	800f48a <_dtoa_r+0x1f2>
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	9208      	str	r2, [sp, #32]
 800f4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4c8:	2a00      	cmp	r2, #0
 800f4ca:	dc39      	bgt.n	800f540 <_dtoa_r+0x2a8>
 800f4cc:	f04f 0a01 	mov.w	sl, #1
 800f4d0:	46d1      	mov	r9, sl
 800f4d2:	4652      	mov	r2, sl
 800f4d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f4d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f4da:	2100      	movs	r1, #0
 800f4dc:	6079      	str	r1, [r7, #4]
 800f4de:	2004      	movs	r0, #4
 800f4e0:	f100 0c14 	add.w	ip, r0, #20
 800f4e4:	4594      	cmp	ip, r2
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	d92f      	bls.n	800f54a <_dtoa_r+0x2b2>
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	930c      	str	r3, [sp, #48]	; 0x30
 800f4ee:	f000 fc61 	bl	800fdb4 <_Balloc>
 800f4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4f4:	9000      	str	r0, [sp, #0]
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d149      	bne.n	800f590 <_dtoa_r+0x2f8>
 800f4fc:	4b23      	ldr	r3, [pc, #140]	; (800f58c <_dtoa_r+0x2f4>)
 800f4fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f502:	e6df      	b.n	800f2c4 <_dtoa_r+0x2c>
 800f504:	2201      	movs	r2, #1
 800f506:	e7dd      	b.n	800f4c4 <_dtoa_r+0x22c>
 800f508:	2200      	movs	r2, #0
 800f50a:	9208      	str	r2, [sp, #32]
 800f50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f50e:	eb0b 0a02 	add.w	sl, fp, r2
 800f512:	f10a 0901 	add.w	r9, sl, #1
 800f516:	464a      	mov	r2, r9
 800f518:	2a01      	cmp	r2, #1
 800f51a:	bfb8      	it	lt
 800f51c:	2201      	movlt	r2, #1
 800f51e:	e7db      	b.n	800f4d8 <_dtoa_r+0x240>
 800f520:	2201      	movs	r2, #1
 800f522:	e7f2      	b.n	800f50a <_dtoa_r+0x272>
 800f524:	2401      	movs	r4, #1
 800f526:	2200      	movs	r2, #0
 800f528:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f52c:	f04f 3aff 	mov.w	sl, #4294967295
 800f530:	2100      	movs	r1, #0
 800f532:	46d1      	mov	r9, sl
 800f534:	2212      	movs	r2, #18
 800f536:	9109      	str	r1, [sp, #36]	; 0x24
 800f538:	e7ce      	b.n	800f4d8 <_dtoa_r+0x240>
 800f53a:	2201      	movs	r2, #1
 800f53c:	9208      	str	r2, [sp, #32]
 800f53e:	e7f5      	b.n	800f52c <_dtoa_r+0x294>
 800f540:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f544:	46d1      	mov	r9, sl
 800f546:	4652      	mov	r2, sl
 800f548:	e7c6      	b.n	800f4d8 <_dtoa_r+0x240>
 800f54a:	3101      	adds	r1, #1
 800f54c:	6079      	str	r1, [r7, #4]
 800f54e:	0040      	lsls	r0, r0, #1
 800f550:	e7c6      	b.n	800f4e0 <_dtoa_r+0x248>
 800f552:	bf00      	nop
 800f554:	f3af 8000 	nop.w
 800f558:	636f4361 	.word	0x636f4361
 800f55c:	3fd287a7 	.word	0x3fd287a7
 800f560:	8b60c8b3 	.word	0x8b60c8b3
 800f564:	3fc68a28 	.word	0x3fc68a28
 800f568:	509f79fb 	.word	0x509f79fb
 800f56c:	3fd34413 	.word	0x3fd34413
 800f570:	0801b8d9 	.word	0x0801b8d9
 800f574:	0801b8f0 	.word	0x0801b8f0
 800f578:	7ff00000 	.word	0x7ff00000
 800f57c:	0801b8d5 	.word	0x0801b8d5
 800f580:	0801b8cc 	.word	0x0801b8cc
 800f584:	0801b8a9 	.word	0x0801b8a9
 800f588:	0801b9e8 	.word	0x0801b9e8
 800f58c:	0801b94f 	.word	0x0801b94f
 800f590:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f592:	9900      	ldr	r1, [sp, #0]
 800f594:	6011      	str	r1, [r2, #0]
 800f596:	f1b9 0f0e 	cmp.w	r9, #14
 800f59a:	d872      	bhi.n	800f682 <_dtoa_r+0x3ea>
 800f59c:	2c00      	cmp	r4, #0
 800f59e:	d070      	beq.n	800f682 <_dtoa_r+0x3ea>
 800f5a0:	f1bb 0f00 	cmp.w	fp, #0
 800f5a4:	f340 80a6 	ble.w	800f6f4 <_dtoa_r+0x45c>
 800f5a8:	49ca      	ldr	r1, [pc, #808]	; (800f8d4 <_dtoa_r+0x63c>)
 800f5aa:	f00b 020f 	and.w	r2, fp, #15
 800f5ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f5b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f5b6:	ed92 7b00 	vldr	d7, [r2]
 800f5ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f5be:	f000 808d 	beq.w	800f6dc <_dtoa_r+0x444>
 800f5c2:	4ac5      	ldr	r2, [pc, #788]	; (800f8d8 <_dtoa_r+0x640>)
 800f5c4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f5c8:	ed92 6b08 	vldr	d6, [r2, #32]
 800f5cc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f5d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f5d4:	f001 010f 	and.w	r1, r1, #15
 800f5d8:	2203      	movs	r2, #3
 800f5da:	48bf      	ldr	r0, [pc, #764]	; (800f8d8 <_dtoa_r+0x640>)
 800f5dc:	2900      	cmp	r1, #0
 800f5de:	d17f      	bne.n	800f6e0 <_dtoa_r+0x448>
 800f5e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f5e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f5e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	f000 80b2 	beq.w	800f758 <_dtoa_r+0x4c0>
 800f5f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f604:	f140 80a8 	bpl.w	800f758 <_dtoa_r+0x4c0>
 800f608:	f1b9 0f00 	cmp.w	r9, #0
 800f60c:	f000 80a4 	beq.w	800f758 <_dtoa_r+0x4c0>
 800f610:	f1ba 0f00 	cmp.w	sl, #0
 800f614:	dd31      	ble.n	800f67a <_dtoa_r+0x3e2>
 800f616:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f61a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f61e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f622:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f626:	3201      	adds	r2, #1
 800f628:	4650      	mov	r0, sl
 800f62a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f62e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f632:	ee07 2a90 	vmov	s15, r2
 800f636:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f63a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f63e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f642:	9c03      	ldr	r4, [sp, #12]
 800f644:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f648:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f64c:	2800      	cmp	r0, #0
 800f64e:	f040 8086 	bne.w	800f75e <_dtoa_r+0x4c6>
 800f652:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f656:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f65a:	ec42 1b17 	vmov	d7, r1, r2
 800f65e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f666:	f300 8272 	bgt.w	800fb4e <_dtoa_r+0x8b6>
 800f66a:	eeb1 7b47 	vneg.f64	d7, d7
 800f66e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	f100 8267 	bmi.w	800fb48 <_dtoa_r+0x8b0>
 800f67a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f67e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f684:	2a00      	cmp	r2, #0
 800f686:	f2c0 8129 	blt.w	800f8dc <_dtoa_r+0x644>
 800f68a:	f1bb 0f0e 	cmp.w	fp, #14
 800f68e:	f300 8125 	bgt.w	800f8dc <_dtoa_r+0x644>
 800f692:	4b90      	ldr	r3, [pc, #576]	; (800f8d4 <_dtoa_r+0x63c>)
 800f694:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f698:	ed93 6b00 	vldr	d6, [r3]
 800f69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f280 80c3 	bge.w	800f82a <_dtoa_r+0x592>
 800f6a4:	f1b9 0f00 	cmp.w	r9, #0
 800f6a8:	f300 80bf 	bgt.w	800f82a <_dtoa_r+0x592>
 800f6ac:	f040 824c 	bne.w	800fb48 <_dtoa_r+0x8b0>
 800f6b0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f6b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c4:	464c      	mov	r4, r9
 800f6c6:	464f      	mov	r7, r9
 800f6c8:	f280 8222 	bge.w	800fb10 <_dtoa_r+0x878>
 800f6cc:	f8dd 8000 	ldr.w	r8, [sp]
 800f6d0:	2331      	movs	r3, #49	; 0x31
 800f6d2:	f808 3b01 	strb.w	r3, [r8], #1
 800f6d6:	f10b 0b01 	add.w	fp, fp, #1
 800f6da:	e21e      	b.n	800fb1a <_dtoa_r+0x882>
 800f6dc:	2202      	movs	r2, #2
 800f6de:	e77c      	b.n	800f5da <_dtoa_r+0x342>
 800f6e0:	07cc      	lsls	r4, r1, #31
 800f6e2:	d504      	bpl.n	800f6ee <_dtoa_r+0x456>
 800f6e4:	ed90 6b00 	vldr	d6, [r0]
 800f6e8:	3201      	adds	r2, #1
 800f6ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ee:	1049      	asrs	r1, r1, #1
 800f6f0:	3008      	adds	r0, #8
 800f6f2:	e773      	b.n	800f5dc <_dtoa_r+0x344>
 800f6f4:	d02e      	beq.n	800f754 <_dtoa_r+0x4bc>
 800f6f6:	f1cb 0100 	rsb	r1, fp, #0
 800f6fa:	4a76      	ldr	r2, [pc, #472]	; (800f8d4 <_dtoa_r+0x63c>)
 800f6fc:	f001 000f 	and.w	r0, r1, #15
 800f700:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f704:	ed92 7b00 	vldr	d7, [r2]
 800f708:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f70c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f710:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f714:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f718:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f71c:	486e      	ldr	r0, [pc, #440]	; (800f8d8 <_dtoa_r+0x640>)
 800f71e:	1109      	asrs	r1, r1, #4
 800f720:	2400      	movs	r4, #0
 800f722:	2202      	movs	r2, #2
 800f724:	b939      	cbnz	r1, 800f736 <_dtoa_r+0x49e>
 800f726:	2c00      	cmp	r4, #0
 800f728:	f43f af60 	beq.w	800f5ec <_dtoa_r+0x354>
 800f72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f734:	e75a      	b.n	800f5ec <_dtoa_r+0x354>
 800f736:	07cf      	lsls	r7, r1, #31
 800f738:	d509      	bpl.n	800f74e <_dtoa_r+0x4b6>
 800f73a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f73e:	ed90 7b00 	vldr	d7, [r0]
 800f742:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f746:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f74a:	3201      	adds	r2, #1
 800f74c:	2401      	movs	r4, #1
 800f74e:	1049      	asrs	r1, r1, #1
 800f750:	3008      	adds	r0, #8
 800f752:	e7e7      	b.n	800f724 <_dtoa_r+0x48c>
 800f754:	2202      	movs	r2, #2
 800f756:	e749      	b.n	800f5ec <_dtoa_r+0x354>
 800f758:	465f      	mov	r7, fp
 800f75a:	4648      	mov	r0, r9
 800f75c:	e765      	b.n	800f62a <_dtoa_r+0x392>
 800f75e:	ec42 1b17 	vmov	d7, r1, r2
 800f762:	4a5c      	ldr	r2, [pc, #368]	; (800f8d4 <_dtoa_r+0x63c>)
 800f764:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f768:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f76c:	9a00      	ldr	r2, [sp, #0]
 800f76e:	1814      	adds	r4, r2, r0
 800f770:	9a08      	ldr	r2, [sp, #32]
 800f772:	b352      	cbz	r2, 800f7ca <_dtoa_r+0x532>
 800f774:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f778:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f77c:	f8dd 8000 	ldr.w	r8, [sp]
 800f780:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f784:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f788:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f78c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f790:	ee14 2a90 	vmov	r2, s9
 800f794:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f798:	3230      	adds	r2, #48	; 0x30
 800f79a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a6:	f808 2b01 	strb.w	r2, [r8], #1
 800f7aa:	d439      	bmi.n	800f820 <_dtoa_r+0x588>
 800f7ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f7b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b8:	d472      	bmi.n	800f8a0 <_dtoa_r+0x608>
 800f7ba:	45a0      	cmp	r8, r4
 800f7bc:	f43f af5d 	beq.w	800f67a <_dtoa_r+0x3e2>
 800f7c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f7c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f7c8:	e7e0      	b.n	800f78c <_dtoa_r+0x4f4>
 800f7ca:	f8dd 8000 	ldr.w	r8, [sp]
 800f7ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f7d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f7dc:	ee14 2a90 	vmov	r2, s9
 800f7e0:	3230      	adds	r2, #48	; 0x30
 800f7e2:	f808 2b01 	strb.w	r2, [r8], #1
 800f7e6:	45a0      	cmp	r8, r4
 800f7e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f7ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f7f0:	d118      	bne.n	800f824 <_dtoa_r+0x58c>
 800f7f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f7f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f7fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f802:	dc4d      	bgt.n	800f8a0 <_dtoa_r+0x608>
 800f804:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	f57f af33 	bpl.w	800f67a <_dtoa_r+0x3e2>
 800f814:	4688      	mov	r8, r1
 800f816:	3901      	subs	r1, #1
 800f818:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f81c:	2b30      	cmp	r3, #48	; 0x30
 800f81e:	d0f9      	beq.n	800f814 <_dtoa_r+0x57c>
 800f820:	46bb      	mov	fp, r7
 800f822:	e02a      	b.n	800f87a <_dtoa_r+0x5e2>
 800f824:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f828:	e7d6      	b.n	800f7d8 <_dtoa_r+0x540>
 800f82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f82e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f832:	f8dd 8000 	ldr.w	r8, [sp]
 800f836:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f83a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f83e:	ee15 3a10 	vmov	r3, s10
 800f842:	3330      	adds	r3, #48	; 0x30
 800f844:	f808 3b01 	strb.w	r3, [r8], #1
 800f848:	9b00      	ldr	r3, [sp, #0]
 800f84a:	eba8 0303 	sub.w	r3, r8, r3
 800f84e:	4599      	cmp	r9, r3
 800f850:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f854:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f858:	d133      	bne.n	800f8c2 <_dtoa_r+0x62a>
 800f85a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f85e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f866:	dc1a      	bgt.n	800f89e <_dtoa_r+0x606>
 800f868:	eeb4 7b46 	vcmp.f64	d7, d6
 800f86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f870:	d103      	bne.n	800f87a <_dtoa_r+0x5e2>
 800f872:	ee15 3a10 	vmov	r3, s10
 800f876:	07d9      	lsls	r1, r3, #31
 800f878:	d411      	bmi.n	800f89e <_dtoa_r+0x606>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4630      	mov	r0, r6
 800f87e:	f000 fad9 	bl	800fe34 <_Bfree>
 800f882:	2300      	movs	r3, #0
 800f884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f886:	f888 3000 	strb.w	r3, [r8]
 800f88a:	f10b 0301 	add.w	r3, fp, #1
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f892:	2b00      	cmp	r3, #0
 800f894:	f43f ad4d 	beq.w	800f332 <_dtoa_r+0x9a>
 800f898:	f8c3 8000 	str.w	r8, [r3]
 800f89c:	e549      	b.n	800f332 <_dtoa_r+0x9a>
 800f89e:	465f      	mov	r7, fp
 800f8a0:	4643      	mov	r3, r8
 800f8a2:	4698      	mov	r8, r3
 800f8a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8a8:	2a39      	cmp	r2, #57	; 0x39
 800f8aa:	d106      	bne.n	800f8ba <_dtoa_r+0x622>
 800f8ac:	9a00      	ldr	r2, [sp, #0]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d1f7      	bne.n	800f8a2 <_dtoa_r+0x60a>
 800f8b2:	9900      	ldr	r1, [sp, #0]
 800f8b4:	2230      	movs	r2, #48	; 0x30
 800f8b6:	3701      	adds	r7, #1
 800f8b8:	700a      	strb	r2, [r1, #0]
 800f8ba:	781a      	ldrb	r2, [r3, #0]
 800f8bc:	3201      	adds	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]
 800f8c0:	e7ae      	b.n	800f820 <_dtoa_r+0x588>
 800f8c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ce:	d1b2      	bne.n	800f836 <_dtoa_r+0x59e>
 800f8d0:	e7d3      	b.n	800f87a <_dtoa_r+0x5e2>
 800f8d2:	bf00      	nop
 800f8d4:	0801b9e8 	.word	0x0801b9e8
 800f8d8:	0801b9c0 	.word	0x0801b9c0
 800f8dc:	9908      	ldr	r1, [sp, #32]
 800f8de:	2900      	cmp	r1, #0
 800f8e0:	f000 80d1 	beq.w	800fa86 <_dtoa_r+0x7ee>
 800f8e4:	9907      	ldr	r1, [sp, #28]
 800f8e6:	2901      	cmp	r1, #1
 800f8e8:	f300 80b4 	bgt.w	800fa54 <_dtoa_r+0x7bc>
 800f8ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f8ee:	2900      	cmp	r1, #0
 800f8f0:	f000 80ac 	beq.w	800fa4c <_dtoa_r+0x7b4>
 800f8f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f8fc:	461c      	mov	r4, r3
 800f8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f900:	9b05      	ldr	r3, [sp, #20]
 800f902:	4413      	add	r3, r2
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	9b06      	ldr	r3, [sp, #24]
 800f908:	2101      	movs	r1, #1
 800f90a:	4413      	add	r3, r2
 800f90c:	4630      	mov	r0, r6
 800f90e:	9306      	str	r3, [sp, #24]
 800f910:	f000 fb4c 	bl	800ffac <__i2b>
 800f914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f916:	4607      	mov	r7, r0
 800f918:	f1b8 0f00 	cmp.w	r8, #0
 800f91c:	dd0d      	ble.n	800f93a <_dtoa_r+0x6a2>
 800f91e:	9a06      	ldr	r2, [sp, #24]
 800f920:	2a00      	cmp	r2, #0
 800f922:	dd0a      	ble.n	800f93a <_dtoa_r+0x6a2>
 800f924:	4542      	cmp	r2, r8
 800f926:	9905      	ldr	r1, [sp, #20]
 800f928:	bfa8      	it	ge
 800f92a:	4642      	movge	r2, r8
 800f92c:	1a89      	subs	r1, r1, r2
 800f92e:	9105      	str	r1, [sp, #20]
 800f930:	9906      	ldr	r1, [sp, #24]
 800f932:	eba8 0802 	sub.w	r8, r8, r2
 800f936:	1a8a      	subs	r2, r1, r2
 800f938:	9206      	str	r2, [sp, #24]
 800f93a:	b303      	cbz	r3, 800f97e <_dtoa_r+0x6e6>
 800f93c:	9a08      	ldr	r2, [sp, #32]
 800f93e:	2a00      	cmp	r2, #0
 800f940:	f000 80a6 	beq.w	800fa90 <_dtoa_r+0x7f8>
 800f944:	2c00      	cmp	r4, #0
 800f946:	dd13      	ble.n	800f970 <_dtoa_r+0x6d8>
 800f948:	4639      	mov	r1, r7
 800f94a:	4622      	mov	r2, r4
 800f94c:	4630      	mov	r0, r6
 800f94e:	930c      	str	r3, [sp, #48]	; 0x30
 800f950:	f000 fbe8 	bl	8010124 <__pow5mult>
 800f954:	462a      	mov	r2, r5
 800f956:	4601      	mov	r1, r0
 800f958:	4607      	mov	r7, r0
 800f95a:	4630      	mov	r0, r6
 800f95c:	f000 fb3c 	bl	800ffd8 <__multiply>
 800f960:	4629      	mov	r1, r5
 800f962:	900a      	str	r0, [sp, #40]	; 0x28
 800f964:	4630      	mov	r0, r6
 800f966:	f000 fa65 	bl	800fe34 <_Bfree>
 800f96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f96e:	4615      	mov	r5, r2
 800f970:	1b1a      	subs	r2, r3, r4
 800f972:	d004      	beq.n	800f97e <_dtoa_r+0x6e6>
 800f974:	4629      	mov	r1, r5
 800f976:	4630      	mov	r0, r6
 800f978:	f000 fbd4 	bl	8010124 <__pow5mult>
 800f97c:	4605      	mov	r5, r0
 800f97e:	2101      	movs	r1, #1
 800f980:	4630      	mov	r0, r6
 800f982:	f000 fb13 	bl	800ffac <__i2b>
 800f986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f988:	2b00      	cmp	r3, #0
 800f98a:	4604      	mov	r4, r0
 800f98c:	f340 8082 	ble.w	800fa94 <_dtoa_r+0x7fc>
 800f990:	461a      	mov	r2, r3
 800f992:	4601      	mov	r1, r0
 800f994:	4630      	mov	r0, r6
 800f996:	f000 fbc5 	bl	8010124 <__pow5mult>
 800f99a:	9b07      	ldr	r3, [sp, #28]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	4604      	mov	r4, r0
 800f9a0:	dd7b      	ble.n	800fa9a <_dtoa_r+0x802>
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f9a6:	6922      	ldr	r2, [r4, #16]
 800f9a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f9ac:	6910      	ldr	r0, [r2, #16]
 800f9ae:	f000 faad 	bl	800ff0c <__hi0bits>
 800f9b2:	f1c0 0020 	rsb	r0, r0, #32
 800f9b6:	9b06      	ldr	r3, [sp, #24]
 800f9b8:	4418      	add	r0, r3
 800f9ba:	f010 001f 	ands.w	r0, r0, #31
 800f9be:	f000 808d 	beq.w	800fadc <_dtoa_r+0x844>
 800f9c2:	f1c0 0220 	rsb	r2, r0, #32
 800f9c6:	2a04      	cmp	r2, #4
 800f9c8:	f340 8086 	ble.w	800fad8 <_dtoa_r+0x840>
 800f9cc:	f1c0 001c 	rsb	r0, r0, #28
 800f9d0:	9b05      	ldr	r3, [sp, #20]
 800f9d2:	4403      	add	r3, r0
 800f9d4:	9305      	str	r3, [sp, #20]
 800f9d6:	9b06      	ldr	r3, [sp, #24]
 800f9d8:	4403      	add	r3, r0
 800f9da:	4480      	add	r8, r0
 800f9dc:	9306      	str	r3, [sp, #24]
 800f9de:	9b05      	ldr	r3, [sp, #20]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	dd05      	ble.n	800f9f0 <_dtoa_r+0x758>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f000 fbf5 	bl	80101d8 <__lshift>
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	9b06      	ldr	r3, [sp, #24]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd05      	ble.n	800fa02 <_dtoa_r+0x76a>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f000 fbec 	bl	80101d8 <__lshift>
 800fa00:	4604      	mov	r4, r0
 800fa02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d06b      	beq.n	800fae0 <_dtoa_r+0x848>
 800fa08:	4621      	mov	r1, r4
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f000 fc50 	bl	80102b0 <__mcmp>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	da65      	bge.n	800fae0 <_dtoa_r+0x848>
 800fa14:	2300      	movs	r3, #0
 800fa16:	4629      	mov	r1, r5
 800fa18:	220a      	movs	r2, #10
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f000 fa2c 	bl	800fe78 <__multadd>
 800fa20:	9b08      	ldr	r3, [sp, #32]
 800fa22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa26:	4605      	mov	r5, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f000 8192 	beq.w	800fd52 <_dtoa_r+0xaba>
 800fa2e:	4639      	mov	r1, r7
 800fa30:	2300      	movs	r3, #0
 800fa32:	220a      	movs	r2, #10
 800fa34:	4630      	mov	r0, r6
 800fa36:	f000 fa1f 	bl	800fe78 <__multadd>
 800fa3a:	f1ba 0f00 	cmp.w	sl, #0
 800fa3e:	4607      	mov	r7, r0
 800fa40:	f300 808e 	bgt.w	800fb60 <_dtoa_r+0x8c8>
 800fa44:	9b07      	ldr	r3, [sp, #28]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	dc51      	bgt.n	800faee <_dtoa_r+0x856>
 800fa4a:	e089      	b.n	800fb60 <_dtoa_r+0x8c8>
 800fa4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fa52:	e751      	b.n	800f8f8 <_dtoa_r+0x660>
 800fa54:	f109 34ff 	add.w	r4, r9, #4294967295
 800fa58:	42a3      	cmp	r3, r4
 800fa5a:	bfbf      	itttt	lt
 800fa5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800fa5e:	1ae3      	sublt	r3, r4, r3
 800fa60:	18d2      	addlt	r2, r2, r3
 800fa62:	4613      	movlt	r3, r2
 800fa64:	bfb7      	itett	lt
 800fa66:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa68:	1b1c      	subge	r4, r3, r4
 800fa6a:	4623      	movlt	r3, r4
 800fa6c:	2400      	movlt	r4, #0
 800fa6e:	f1b9 0f00 	cmp.w	r9, #0
 800fa72:	bfb5      	itete	lt
 800fa74:	9a05      	ldrlt	r2, [sp, #20]
 800fa76:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800fa7a:	eba2 0809 	sublt.w	r8, r2, r9
 800fa7e:	464a      	movge	r2, r9
 800fa80:	bfb8      	it	lt
 800fa82:	2200      	movlt	r2, #0
 800fa84:	e73b      	b.n	800f8fe <_dtoa_r+0x666>
 800fa86:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fa8a:	9f08      	ldr	r7, [sp, #32]
 800fa8c:	461c      	mov	r4, r3
 800fa8e:	e743      	b.n	800f918 <_dtoa_r+0x680>
 800fa90:	461a      	mov	r2, r3
 800fa92:	e76f      	b.n	800f974 <_dtoa_r+0x6dc>
 800fa94:	9b07      	ldr	r3, [sp, #28]
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	dc18      	bgt.n	800facc <_dtoa_r+0x834>
 800fa9a:	9b02      	ldr	r3, [sp, #8]
 800fa9c:	b9b3      	cbnz	r3, 800facc <_dtoa_r+0x834>
 800fa9e:	9b03      	ldr	r3, [sp, #12]
 800faa0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800faa4:	b9a2      	cbnz	r2, 800fad0 <_dtoa_r+0x838>
 800faa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800faaa:	0d12      	lsrs	r2, r2, #20
 800faac:	0512      	lsls	r2, r2, #20
 800faae:	b18a      	cbz	r2, 800fad4 <_dtoa_r+0x83c>
 800fab0:	9b05      	ldr	r3, [sp, #20]
 800fab2:	3301      	adds	r3, #1
 800fab4:	9305      	str	r3, [sp, #20]
 800fab6:	9b06      	ldr	r3, [sp, #24]
 800fab8:	3301      	adds	r3, #1
 800faba:	9306      	str	r3, [sp, #24]
 800fabc:	2301      	movs	r3, #1
 800fabe:	930a      	str	r3, [sp, #40]	; 0x28
 800fac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f47f af6f 	bne.w	800f9a6 <_dtoa_r+0x70e>
 800fac8:	2001      	movs	r0, #1
 800faca:	e774      	b.n	800f9b6 <_dtoa_r+0x71e>
 800facc:	2300      	movs	r3, #0
 800face:	e7f6      	b.n	800fabe <_dtoa_r+0x826>
 800fad0:	9b02      	ldr	r3, [sp, #8]
 800fad2:	e7f4      	b.n	800fabe <_dtoa_r+0x826>
 800fad4:	920a      	str	r2, [sp, #40]	; 0x28
 800fad6:	e7f3      	b.n	800fac0 <_dtoa_r+0x828>
 800fad8:	d081      	beq.n	800f9de <_dtoa_r+0x746>
 800fada:	4610      	mov	r0, r2
 800fadc:	301c      	adds	r0, #28
 800fade:	e777      	b.n	800f9d0 <_dtoa_r+0x738>
 800fae0:	f1b9 0f00 	cmp.w	r9, #0
 800fae4:	dc37      	bgt.n	800fb56 <_dtoa_r+0x8be>
 800fae6:	9b07      	ldr	r3, [sp, #28]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	dd34      	ble.n	800fb56 <_dtoa_r+0x8be>
 800faec:	46ca      	mov	sl, r9
 800faee:	f1ba 0f00 	cmp.w	sl, #0
 800faf2:	d10d      	bne.n	800fb10 <_dtoa_r+0x878>
 800faf4:	4621      	mov	r1, r4
 800faf6:	4653      	mov	r3, sl
 800faf8:	2205      	movs	r2, #5
 800fafa:	4630      	mov	r0, r6
 800fafc:	f000 f9bc 	bl	800fe78 <__multadd>
 800fb00:	4601      	mov	r1, r0
 800fb02:	4604      	mov	r4, r0
 800fb04:	4628      	mov	r0, r5
 800fb06:	f000 fbd3 	bl	80102b0 <__mcmp>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	f73f adde 	bgt.w	800f6cc <_dtoa_r+0x434>
 800fb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb12:	f8dd 8000 	ldr.w	r8, [sp]
 800fb16:	ea6f 0b03 	mvn.w	fp, r3
 800fb1a:	f04f 0900 	mov.w	r9, #0
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4630      	mov	r0, r6
 800fb22:	f000 f987 	bl	800fe34 <_Bfree>
 800fb26:	2f00      	cmp	r7, #0
 800fb28:	f43f aea7 	beq.w	800f87a <_dtoa_r+0x5e2>
 800fb2c:	f1b9 0f00 	cmp.w	r9, #0
 800fb30:	d005      	beq.n	800fb3e <_dtoa_r+0x8a6>
 800fb32:	45b9      	cmp	r9, r7
 800fb34:	d003      	beq.n	800fb3e <_dtoa_r+0x8a6>
 800fb36:	4649      	mov	r1, r9
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 f97b 	bl	800fe34 <_Bfree>
 800fb3e:	4639      	mov	r1, r7
 800fb40:	4630      	mov	r0, r6
 800fb42:	f000 f977 	bl	800fe34 <_Bfree>
 800fb46:	e698      	b.n	800f87a <_dtoa_r+0x5e2>
 800fb48:	2400      	movs	r4, #0
 800fb4a:	4627      	mov	r7, r4
 800fb4c:	e7e0      	b.n	800fb10 <_dtoa_r+0x878>
 800fb4e:	46bb      	mov	fp, r7
 800fb50:	4604      	mov	r4, r0
 800fb52:	4607      	mov	r7, r0
 800fb54:	e5ba      	b.n	800f6cc <_dtoa_r+0x434>
 800fb56:	9b08      	ldr	r3, [sp, #32]
 800fb58:	46ca      	mov	sl, r9
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 8100 	beq.w	800fd60 <_dtoa_r+0xac8>
 800fb60:	f1b8 0f00 	cmp.w	r8, #0
 800fb64:	dd05      	ble.n	800fb72 <_dtoa_r+0x8da>
 800fb66:	4639      	mov	r1, r7
 800fb68:	4642      	mov	r2, r8
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f000 fb34 	bl	80101d8 <__lshift>
 800fb70:	4607      	mov	r7, r0
 800fb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d05d      	beq.n	800fc34 <_dtoa_r+0x99c>
 800fb78:	6879      	ldr	r1, [r7, #4]
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	f000 f91a 	bl	800fdb4 <_Balloc>
 800fb80:	4680      	mov	r8, r0
 800fb82:	b928      	cbnz	r0, 800fb90 <_dtoa_r+0x8f8>
 800fb84:	4b82      	ldr	r3, [pc, #520]	; (800fd90 <_dtoa_r+0xaf8>)
 800fb86:	4602      	mov	r2, r0
 800fb88:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb8c:	f7ff bb9a 	b.w	800f2c4 <_dtoa_r+0x2c>
 800fb90:	693a      	ldr	r2, [r7, #16]
 800fb92:	3202      	adds	r2, #2
 800fb94:	0092      	lsls	r2, r2, #2
 800fb96:	f107 010c 	add.w	r1, r7, #12
 800fb9a:	300c      	adds	r0, #12
 800fb9c:	f7fe fe56 	bl	800e84c <memcpy>
 800fba0:	2201      	movs	r2, #1
 800fba2:	4641      	mov	r1, r8
 800fba4:	4630      	mov	r0, r6
 800fba6:	f000 fb17 	bl	80101d8 <__lshift>
 800fbaa:	9b00      	ldr	r3, [sp, #0]
 800fbac:	3301      	adds	r3, #1
 800fbae:	9305      	str	r3, [sp, #20]
 800fbb0:	9b00      	ldr	r3, [sp, #0]
 800fbb2:	4453      	add	r3, sl
 800fbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb6:	9b02      	ldr	r3, [sp, #8]
 800fbb8:	f003 0301 	and.w	r3, r3, #1
 800fbbc:	46b9      	mov	r9, r7
 800fbbe:	9308      	str	r3, [sp, #32]
 800fbc0:	4607      	mov	r7, r0
 800fbc2:	9b05      	ldr	r3, [sp, #20]
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	4628      	mov	r0, r5
 800fbca:	9302      	str	r3, [sp, #8]
 800fbcc:	f7ff fad6 	bl	800f17c <quorem>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	3330      	adds	r3, #48	; 0x30
 800fbd4:	9006      	str	r0, [sp, #24]
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	4628      	mov	r0, r5
 800fbda:	930a      	str	r3, [sp, #40]	; 0x28
 800fbdc:	f000 fb68 	bl	80102b0 <__mcmp>
 800fbe0:	463a      	mov	r2, r7
 800fbe2:	4682      	mov	sl, r0
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f000 fb7e 	bl	80102e8 <__mdiff>
 800fbec:	68c2      	ldr	r2, [r0, #12]
 800fbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbf0:	4680      	mov	r8, r0
 800fbf2:	bb0a      	cbnz	r2, 800fc38 <_dtoa_r+0x9a0>
 800fbf4:	4601      	mov	r1, r0
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 fb5a 	bl	80102b0 <__mcmp>
 800fbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbfe:	4602      	mov	r2, r0
 800fc00:	4641      	mov	r1, r8
 800fc02:	4630      	mov	r0, r6
 800fc04:	920e      	str	r2, [sp, #56]	; 0x38
 800fc06:	930a      	str	r3, [sp, #40]	; 0x28
 800fc08:	f000 f914 	bl	800fe34 <_Bfree>
 800fc0c:	9b07      	ldr	r3, [sp, #28]
 800fc0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fc14:	ea43 0102 	orr.w	r1, r3, r2
 800fc18:	9b08      	ldr	r3, [sp, #32]
 800fc1a:	430b      	orrs	r3, r1
 800fc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc1e:	d10d      	bne.n	800fc3c <_dtoa_r+0x9a4>
 800fc20:	2b39      	cmp	r3, #57	; 0x39
 800fc22:	d029      	beq.n	800fc78 <_dtoa_r+0x9e0>
 800fc24:	f1ba 0f00 	cmp.w	sl, #0
 800fc28:	dd01      	ble.n	800fc2e <_dtoa_r+0x996>
 800fc2a:	9b06      	ldr	r3, [sp, #24]
 800fc2c:	3331      	adds	r3, #49	; 0x31
 800fc2e:	9a02      	ldr	r2, [sp, #8]
 800fc30:	7013      	strb	r3, [r2, #0]
 800fc32:	e774      	b.n	800fb1e <_dtoa_r+0x886>
 800fc34:	4638      	mov	r0, r7
 800fc36:	e7b8      	b.n	800fbaa <_dtoa_r+0x912>
 800fc38:	2201      	movs	r2, #1
 800fc3a:	e7e1      	b.n	800fc00 <_dtoa_r+0x968>
 800fc3c:	f1ba 0f00 	cmp.w	sl, #0
 800fc40:	db06      	blt.n	800fc50 <_dtoa_r+0x9b8>
 800fc42:	9907      	ldr	r1, [sp, #28]
 800fc44:	ea41 0a0a 	orr.w	sl, r1, sl
 800fc48:	9908      	ldr	r1, [sp, #32]
 800fc4a:	ea5a 0101 	orrs.w	r1, sl, r1
 800fc4e:	d120      	bne.n	800fc92 <_dtoa_r+0x9fa>
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	ddec      	ble.n	800fc2e <_dtoa_r+0x996>
 800fc54:	4629      	mov	r1, r5
 800fc56:	2201      	movs	r2, #1
 800fc58:	4630      	mov	r0, r6
 800fc5a:	9305      	str	r3, [sp, #20]
 800fc5c:	f000 fabc 	bl	80101d8 <__lshift>
 800fc60:	4621      	mov	r1, r4
 800fc62:	4605      	mov	r5, r0
 800fc64:	f000 fb24 	bl	80102b0 <__mcmp>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	9b05      	ldr	r3, [sp, #20]
 800fc6c:	dc02      	bgt.n	800fc74 <_dtoa_r+0x9dc>
 800fc6e:	d1de      	bne.n	800fc2e <_dtoa_r+0x996>
 800fc70:	07da      	lsls	r2, r3, #31
 800fc72:	d5dc      	bpl.n	800fc2e <_dtoa_r+0x996>
 800fc74:	2b39      	cmp	r3, #57	; 0x39
 800fc76:	d1d8      	bne.n	800fc2a <_dtoa_r+0x992>
 800fc78:	9a02      	ldr	r2, [sp, #8]
 800fc7a:	2339      	movs	r3, #57	; 0x39
 800fc7c:	7013      	strb	r3, [r2, #0]
 800fc7e:	4643      	mov	r3, r8
 800fc80:	4698      	mov	r8, r3
 800fc82:	3b01      	subs	r3, #1
 800fc84:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fc88:	2a39      	cmp	r2, #57	; 0x39
 800fc8a:	d051      	beq.n	800fd30 <_dtoa_r+0xa98>
 800fc8c:	3201      	adds	r2, #1
 800fc8e:	701a      	strb	r2, [r3, #0]
 800fc90:	e745      	b.n	800fb1e <_dtoa_r+0x886>
 800fc92:	2a00      	cmp	r2, #0
 800fc94:	dd03      	ble.n	800fc9e <_dtoa_r+0xa06>
 800fc96:	2b39      	cmp	r3, #57	; 0x39
 800fc98:	d0ee      	beq.n	800fc78 <_dtoa_r+0x9e0>
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	e7c7      	b.n	800fc2e <_dtoa_r+0x996>
 800fc9e:	9a05      	ldr	r2, [sp, #20]
 800fca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fca2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fca6:	428a      	cmp	r2, r1
 800fca8:	d02b      	beq.n	800fd02 <_dtoa_r+0xa6a>
 800fcaa:	4629      	mov	r1, r5
 800fcac:	2300      	movs	r3, #0
 800fcae:	220a      	movs	r2, #10
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f000 f8e1 	bl	800fe78 <__multadd>
 800fcb6:	45b9      	cmp	r9, r7
 800fcb8:	4605      	mov	r5, r0
 800fcba:	f04f 0300 	mov.w	r3, #0
 800fcbe:	f04f 020a 	mov.w	r2, #10
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	d107      	bne.n	800fcd8 <_dtoa_r+0xa40>
 800fcc8:	f000 f8d6 	bl	800fe78 <__multadd>
 800fccc:	4681      	mov	r9, r0
 800fcce:	4607      	mov	r7, r0
 800fcd0:	9b05      	ldr	r3, [sp, #20]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	9305      	str	r3, [sp, #20]
 800fcd6:	e774      	b.n	800fbc2 <_dtoa_r+0x92a>
 800fcd8:	f000 f8ce 	bl	800fe78 <__multadd>
 800fcdc:	4639      	mov	r1, r7
 800fcde:	4681      	mov	r9, r0
 800fce0:	2300      	movs	r3, #0
 800fce2:	220a      	movs	r2, #10
 800fce4:	4630      	mov	r0, r6
 800fce6:	f000 f8c7 	bl	800fe78 <__multadd>
 800fcea:	4607      	mov	r7, r0
 800fcec:	e7f0      	b.n	800fcd0 <_dtoa_r+0xa38>
 800fcee:	f1ba 0f00 	cmp.w	sl, #0
 800fcf2:	9a00      	ldr	r2, [sp, #0]
 800fcf4:	bfcc      	ite	gt
 800fcf6:	46d0      	movgt	r8, sl
 800fcf8:	f04f 0801 	movle.w	r8, #1
 800fcfc:	4490      	add	r8, r2
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	4629      	mov	r1, r5
 800fd04:	2201      	movs	r2, #1
 800fd06:	4630      	mov	r0, r6
 800fd08:	9302      	str	r3, [sp, #8]
 800fd0a:	f000 fa65 	bl	80101d8 <__lshift>
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4605      	mov	r5, r0
 800fd12:	f000 facd 	bl	80102b0 <__mcmp>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	dcb1      	bgt.n	800fc7e <_dtoa_r+0x9e6>
 800fd1a:	d102      	bne.n	800fd22 <_dtoa_r+0xa8a>
 800fd1c:	9b02      	ldr	r3, [sp, #8]
 800fd1e:	07db      	lsls	r3, r3, #31
 800fd20:	d4ad      	bmi.n	800fc7e <_dtoa_r+0x9e6>
 800fd22:	4643      	mov	r3, r8
 800fd24:	4698      	mov	r8, r3
 800fd26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd2a:	2a30      	cmp	r2, #48	; 0x30
 800fd2c:	d0fa      	beq.n	800fd24 <_dtoa_r+0xa8c>
 800fd2e:	e6f6      	b.n	800fb1e <_dtoa_r+0x886>
 800fd30:	9a00      	ldr	r2, [sp, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d1a4      	bne.n	800fc80 <_dtoa_r+0x9e8>
 800fd36:	f10b 0b01 	add.w	fp, fp, #1
 800fd3a:	2331      	movs	r3, #49	; 0x31
 800fd3c:	e778      	b.n	800fc30 <_dtoa_r+0x998>
 800fd3e:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <_dtoa_r+0xafc>)
 800fd40:	f7ff bb12 	b.w	800f368 <_dtoa_r+0xd0>
 800fd44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f47f aaee 	bne.w	800f328 <_dtoa_r+0x90>
 800fd4c:	4b12      	ldr	r3, [pc, #72]	; (800fd98 <_dtoa_r+0xb00>)
 800fd4e:	f7ff bb0b 	b.w	800f368 <_dtoa_r+0xd0>
 800fd52:	f1ba 0f00 	cmp.w	sl, #0
 800fd56:	dc03      	bgt.n	800fd60 <_dtoa_r+0xac8>
 800fd58:	9b07      	ldr	r3, [sp, #28]
 800fd5a:	2b02      	cmp	r3, #2
 800fd5c:	f73f aec7 	bgt.w	800faee <_dtoa_r+0x856>
 800fd60:	f8dd 8000 	ldr.w	r8, [sp]
 800fd64:	4621      	mov	r1, r4
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7ff fa08 	bl	800f17c <quorem>
 800fd6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fd70:	f808 3b01 	strb.w	r3, [r8], #1
 800fd74:	9a00      	ldr	r2, [sp, #0]
 800fd76:	eba8 0202 	sub.w	r2, r8, r2
 800fd7a:	4592      	cmp	sl, r2
 800fd7c:	ddb7      	ble.n	800fcee <_dtoa_r+0xa56>
 800fd7e:	4629      	mov	r1, r5
 800fd80:	2300      	movs	r3, #0
 800fd82:	220a      	movs	r2, #10
 800fd84:	4630      	mov	r0, r6
 800fd86:	f000 f877 	bl	800fe78 <__multadd>
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	e7ea      	b.n	800fd64 <_dtoa_r+0xacc>
 800fd8e:	bf00      	nop
 800fd90:	0801b94f 	.word	0x0801b94f
 800fd94:	0801b8a8 	.word	0x0801b8a8
 800fd98:	0801b8cc 	.word	0x0801b8cc

0800fd9c <_localeconv_r>:
 800fd9c:	4800      	ldr	r0, [pc, #0]	; (800fda0 <_localeconv_r+0x4>)
 800fd9e:	4770      	bx	lr
 800fda0:	240004cc 	.word	0x240004cc

0800fda4 <malloc>:
 800fda4:	4b02      	ldr	r3, [pc, #8]	; (800fdb0 <malloc+0xc>)
 800fda6:	4601      	mov	r1, r0
 800fda8:	6818      	ldr	r0, [r3, #0]
 800fdaa:	f000 bbe1 	b.w	8010570 <_malloc_r>
 800fdae:	bf00      	nop
 800fdb0:	24000378 	.word	0x24000378

0800fdb4 <_Balloc>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	b976      	cbnz	r6, 800fddc <_Balloc+0x28>
 800fdbe:	2010      	movs	r0, #16
 800fdc0:	f7ff fff0 	bl	800fda4 <malloc>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	6260      	str	r0, [r4, #36]	; 0x24
 800fdc8:	b920      	cbnz	r0, 800fdd4 <_Balloc+0x20>
 800fdca:	4b18      	ldr	r3, [pc, #96]	; (800fe2c <_Balloc+0x78>)
 800fdcc:	4818      	ldr	r0, [pc, #96]	; (800fe30 <_Balloc+0x7c>)
 800fdce:	2166      	movs	r1, #102	; 0x66
 800fdd0:	f000 fd94 	bl	80108fc <__assert_func>
 800fdd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd8:	6006      	str	r6, [r0, #0]
 800fdda:	60c6      	str	r6, [r0, #12]
 800fddc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fdde:	68f3      	ldr	r3, [r6, #12]
 800fde0:	b183      	cbz	r3, 800fe04 <_Balloc+0x50>
 800fde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdea:	b9b8      	cbnz	r0, 800fe1c <_Balloc+0x68>
 800fdec:	2101      	movs	r1, #1
 800fdee:	fa01 f605 	lsl.w	r6, r1, r5
 800fdf2:	1d72      	adds	r2, r6, #5
 800fdf4:	0092      	lsls	r2, r2, #2
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f000 fb5a 	bl	80104b0 <_calloc_r>
 800fdfc:	b160      	cbz	r0, 800fe18 <_Balloc+0x64>
 800fdfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe02:	e00e      	b.n	800fe22 <_Balloc+0x6e>
 800fe04:	2221      	movs	r2, #33	; 0x21
 800fe06:	2104      	movs	r1, #4
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 fb51 	bl	80104b0 <_calloc_r>
 800fe0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe10:	60f0      	str	r0, [r6, #12]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1e4      	bne.n	800fde2 <_Balloc+0x2e>
 800fe18:	2000      	movs	r0, #0
 800fe1a:	bd70      	pop	{r4, r5, r6, pc}
 800fe1c:	6802      	ldr	r2, [r0, #0]
 800fe1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe22:	2300      	movs	r3, #0
 800fe24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe28:	e7f7      	b.n	800fe1a <_Balloc+0x66>
 800fe2a:	bf00      	nop
 800fe2c:	0801b8d9 	.word	0x0801b8d9
 800fe30:	0801b960 	.word	0x0801b960

0800fe34 <_Bfree>:
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe38:	4605      	mov	r5, r0
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	b976      	cbnz	r6, 800fe5c <_Bfree+0x28>
 800fe3e:	2010      	movs	r0, #16
 800fe40:	f7ff ffb0 	bl	800fda4 <malloc>
 800fe44:	4602      	mov	r2, r0
 800fe46:	6268      	str	r0, [r5, #36]	; 0x24
 800fe48:	b920      	cbnz	r0, 800fe54 <_Bfree+0x20>
 800fe4a:	4b09      	ldr	r3, [pc, #36]	; (800fe70 <_Bfree+0x3c>)
 800fe4c:	4809      	ldr	r0, [pc, #36]	; (800fe74 <_Bfree+0x40>)
 800fe4e:	218a      	movs	r1, #138	; 0x8a
 800fe50:	f000 fd54 	bl	80108fc <__assert_func>
 800fe54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe58:	6006      	str	r6, [r0, #0]
 800fe5a:	60c6      	str	r6, [r0, #12]
 800fe5c:	b13c      	cbz	r4, 800fe6e <_Bfree+0x3a>
 800fe5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe60:	6862      	ldr	r2, [r4, #4]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe68:	6021      	str	r1, [r4, #0]
 800fe6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}
 800fe70:	0801b8d9 	.word	0x0801b8d9
 800fe74:	0801b960 	.word	0x0801b960

0800fe78 <__multadd>:
 800fe78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7c:	690e      	ldr	r6, [r1, #16]
 800fe7e:	4607      	mov	r7, r0
 800fe80:	4698      	mov	r8, r3
 800fe82:	460c      	mov	r4, r1
 800fe84:	f101 0014 	add.w	r0, r1, #20
 800fe88:	2300      	movs	r3, #0
 800fe8a:	6805      	ldr	r5, [r0, #0]
 800fe8c:	b2a9      	uxth	r1, r5
 800fe8e:	fb02 8101 	mla	r1, r2, r1, r8
 800fe92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fe96:	0c2d      	lsrs	r5, r5, #16
 800fe98:	fb02 c505 	mla	r5, r2, r5, ip
 800fe9c:	b289      	uxth	r1, r1
 800fe9e:	3301      	adds	r3, #1
 800fea0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fea4:	429e      	cmp	r6, r3
 800fea6:	f840 1b04 	str.w	r1, [r0], #4
 800feaa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800feae:	dcec      	bgt.n	800fe8a <__multadd+0x12>
 800feb0:	f1b8 0f00 	cmp.w	r8, #0
 800feb4:	d022      	beq.n	800fefc <__multadd+0x84>
 800feb6:	68a3      	ldr	r3, [r4, #8]
 800feb8:	42b3      	cmp	r3, r6
 800feba:	dc19      	bgt.n	800fef0 <__multadd+0x78>
 800febc:	6861      	ldr	r1, [r4, #4]
 800febe:	4638      	mov	r0, r7
 800fec0:	3101      	adds	r1, #1
 800fec2:	f7ff ff77 	bl	800fdb4 <_Balloc>
 800fec6:	4605      	mov	r5, r0
 800fec8:	b928      	cbnz	r0, 800fed6 <__multadd+0x5e>
 800feca:	4602      	mov	r2, r0
 800fecc:	4b0d      	ldr	r3, [pc, #52]	; (800ff04 <__multadd+0x8c>)
 800fece:	480e      	ldr	r0, [pc, #56]	; (800ff08 <__multadd+0x90>)
 800fed0:	21b5      	movs	r1, #181	; 0xb5
 800fed2:	f000 fd13 	bl	80108fc <__assert_func>
 800fed6:	6922      	ldr	r2, [r4, #16]
 800fed8:	3202      	adds	r2, #2
 800feda:	f104 010c 	add.w	r1, r4, #12
 800fede:	0092      	lsls	r2, r2, #2
 800fee0:	300c      	adds	r0, #12
 800fee2:	f7fe fcb3 	bl	800e84c <memcpy>
 800fee6:	4621      	mov	r1, r4
 800fee8:	4638      	mov	r0, r7
 800feea:	f7ff ffa3 	bl	800fe34 <_Bfree>
 800feee:	462c      	mov	r4, r5
 800fef0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fef4:	3601      	adds	r6, #1
 800fef6:	f8c3 8014 	str.w	r8, [r3, #20]
 800fefa:	6126      	str	r6, [r4, #16]
 800fefc:	4620      	mov	r0, r4
 800fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff02:	bf00      	nop
 800ff04:	0801b94f 	.word	0x0801b94f
 800ff08:	0801b960 	.word	0x0801b960

0800ff0c <__hi0bits>:
 800ff0c:	0c03      	lsrs	r3, r0, #16
 800ff0e:	041b      	lsls	r3, r3, #16
 800ff10:	b9d3      	cbnz	r3, 800ff48 <__hi0bits+0x3c>
 800ff12:	0400      	lsls	r0, r0, #16
 800ff14:	2310      	movs	r3, #16
 800ff16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff1a:	bf04      	itt	eq
 800ff1c:	0200      	lsleq	r0, r0, #8
 800ff1e:	3308      	addeq	r3, #8
 800ff20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff24:	bf04      	itt	eq
 800ff26:	0100      	lsleq	r0, r0, #4
 800ff28:	3304      	addeq	r3, #4
 800ff2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff2e:	bf04      	itt	eq
 800ff30:	0080      	lsleq	r0, r0, #2
 800ff32:	3302      	addeq	r3, #2
 800ff34:	2800      	cmp	r0, #0
 800ff36:	db05      	blt.n	800ff44 <__hi0bits+0x38>
 800ff38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff3c:	f103 0301 	add.w	r3, r3, #1
 800ff40:	bf08      	it	eq
 800ff42:	2320      	moveq	r3, #32
 800ff44:	4618      	mov	r0, r3
 800ff46:	4770      	bx	lr
 800ff48:	2300      	movs	r3, #0
 800ff4a:	e7e4      	b.n	800ff16 <__hi0bits+0xa>

0800ff4c <__lo0bits>:
 800ff4c:	6803      	ldr	r3, [r0, #0]
 800ff4e:	f013 0207 	ands.w	r2, r3, #7
 800ff52:	4601      	mov	r1, r0
 800ff54:	d00b      	beq.n	800ff6e <__lo0bits+0x22>
 800ff56:	07da      	lsls	r2, r3, #31
 800ff58:	d424      	bmi.n	800ffa4 <__lo0bits+0x58>
 800ff5a:	0798      	lsls	r0, r3, #30
 800ff5c:	bf49      	itett	mi
 800ff5e:	085b      	lsrmi	r3, r3, #1
 800ff60:	089b      	lsrpl	r3, r3, #2
 800ff62:	2001      	movmi	r0, #1
 800ff64:	600b      	strmi	r3, [r1, #0]
 800ff66:	bf5c      	itt	pl
 800ff68:	600b      	strpl	r3, [r1, #0]
 800ff6a:	2002      	movpl	r0, #2
 800ff6c:	4770      	bx	lr
 800ff6e:	b298      	uxth	r0, r3
 800ff70:	b9b0      	cbnz	r0, 800ffa0 <__lo0bits+0x54>
 800ff72:	0c1b      	lsrs	r3, r3, #16
 800ff74:	2010      	movs	r0, #16
 800ff76:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff7a:	bf04      	itt	eq
 800ff7c:	0a1b      	lsreq	r3, r3, #8
 800ff7e:	3008      	addeq	r0, #8
 800ff80:	071a      	lsls	r2, r3, #28
 800ff82:	bf04      	itt	eq
 800ff84:	091b      	lsreq	r3, r3, #4
 800ff86:	3004      	addeq	r0, #4
 800ff88:	079a      	lsls	r2, r3, #30
 800ff8a:	bf04      	itt	eq
 800ff8c:	089b      	lsreq	r3, r3, #2
 800ff8e:	3002      	addeq	r0, #2
 800ff90:	07da      	lsls	r2, r3, #31
 800ff92:	d403      	bmi.n	800ff9c <__lo0bits+0x50>
 800ff94:	085b      	lsrs	r3, r3, #1
 800ff96:	f100 0001 	add.w	r0, r0, #1
 800ff9a:	d005      	beq.n	800ffa8 <__lo0bits+0x5c>
 800ff9c:	600b      	str	r3, [r1, #0]
 800ff9e:	4770      	bx	lr
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	e7e8      	b.n	800ff76 <__lo0bits+0x2a>
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	4770      	bx	lr
 800ffa8:	2020      	movs	r0, #32
 800ffaa:	4770      	bx	lr

0800ffac <__i2b>:
 800ffac:	b510      	push	{r4, lr}
 800ffae:	460c      	mov	r4, r1
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	f7ff feff 	bl	800fdb4 <_Balloc>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	b928      	cbnz	r0, 800ffc6 <__i2b+0x1a>
 800ffba:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <__i2b+0x24>)
 800ffbc:	4805      	ldr	r0, [pc, #20]	; (800ffd4 <__i2b+0x28>)
 800ffbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ffc2:	f000 fc9b 	bl	80108fc <__assert_func>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	6144      	str	r4, [r0, #20]
 800ffca:	6103      	str	r3, [r0, #16]
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop
 800ffd0:	0801b94f 	.word	0x0801b94f
 800ffd4:	0801b960 	.word	0x0801b960

0800ffd8 <__multiply>:
 800ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	4614      	mov	r4, r2
 800ffde:	690a      	ldr	r2, [r1, #16]
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	bfb8      	it	lt
 800ffe6:	460b      	movlt	r3, r1
 800ffe8:	460d      	mov	r5, r1
 800ffea:	bfbc      	itt	lt
 800ffec:	4625      	movlt	r5, r4
 800ffee:	461c      	movlt	r4, r3
 800fff0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fff4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fff8:	68ab      	ldr	r3, [r5, #8]
 800fffa:	6869      	ldr	r1, [r5, #4]
 800fffc:	eb0a 0709 	add.w	r7, sl, r9
 8010000:	42bb      	cmp	r3, r7
 8010002:	b085      	sub	sp, #20
 8010004:	bfb8      	it	lt
 8010006:	3101      	addlt	r1, #1
 8010008:	f7ff fed4 	bl	800fdb4 <_Balloc>
 801000c:	b930      	cbnz	r0, 801001c <__multiply+0x44>
 801000e:	4602      	mov	r2, r0
 8010010:	4b42      	ldr	r3, [pc, #264]	; (801011c <__multiply+0x144>)
 8010012:	4843      	ldr	r0, [pc, #268]	; (8010120 <__multiply+0x148>)
 8010014:	f240 115d 	movw	r1, #349	; 0x15d
 8010018:	f000 fc70 	bl	80108fc <__assert_func>
 801001c:	f100 0614 	add.w	r6, r0, #20
 8010020:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010024:	4633      	mov	r3, r6
 8010026:	2200      	movs	r2, #0
 8010028:	4543      	cmp	r3, r8
 801002a:	d31e      	bcc.n	801006a <__multiply+0x92>
 801002c:	f105 0c14 	add.w	ip, r5, #20
 8010030:	f104 0314 	add.w	r3, r4, #20
 8010034:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010038:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801003c:	9202      	str	r2, [sp, #8]
 801003e:	ebac 0205 	sub.w	r2, ip, r5
 8010042:	3a15      	subs	r2, #21
 8010044:	f022 0203 	bic.w	r2, r2, #3
 8010048:	3204      	adds	r2, #4
 801004a:	f105 0115 	add.w	r1, r5, #21
 801004e:	458c      	cmp	ip, r1
 8010050:	bf38      	it	cc
 8010052:	2204      	movcc	r2, #4
 8010054:	9201      	str	r2, [sp, #4]
 8010056:	9a02      	ldr	r2, [sp, #8]
 8010058:	9303      	str	r3, [sp, #12]
 801005a:	429a      	cmp	r2, r3
 801005c:	d808      	bhi.n	8010070 <__multiply+0x98>
 801005e:	2f00      	cmp	r7, #0
 8010060:	dc55      	bgt.n	801010e <__multiply+0x136>
 8010062:	6107      	str	r7, [r0, #16]
 8010064:	b005      	add	sp, #20
 8010066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006a:	f843 2b04 	str.w	r2, [r3], #4
 801006e:	e7db      	b.n	8010028 <__multiply+0x50>
 8010070:	f8b3 a000 	ldrh.w	sl, [r3]
 8010074:	f1ba 0f00 	cmp.w	sl, #0
 8010078:	d020      	beq.n	80100bc <__multiply+0xe4>
 801007a:	f105 0e14 	add.w	lr, r5, #20
 801007e:	46b1      	mov	r9, r6
 8010080:	2200      	movs	r2, #0
 8010082:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010086:	f8d9 b000 	ldr.w	fp, [r9]
 801008a:	b2a1      	uxth	r1, r4
 801008c:	fa1f fb8b 	uxth.w	fp, fp
 8010090:	fb0a b101 	mla	r1, sl, r1, fp
 8010094:	4411      	add	r1, r2
 8010096:	f8d9 2000 	ldr.w	r2, [r9]
 801009a:	0c24      	lsrs	r4, r4, #16
 801009c:	0c12      	lsrs	r2, r2, #16
 801009e:	fb0a 2404 	mla	r4, sl, r4, r2
 80100a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80100a6:	b289      	uxth	r1, r1
 80100a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80100ac:	45f4      	cmp	ip, lr
 80100ae:	f849 1b04 	str.w	r1, [r9], #4
 80100b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80100b6:	d8e4      	bhi.n	8010082 <__multiply+0xaa>
 80100b8:	9901      	ldr	r1, [sp, #4]
 80100ba:	5072      	str	r2, [r6, r1]
 80100bc:	9a03      	ldr	r2, [sp, #12]
 80100be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100c2:	3304      	adds	r3, #4
 80100c4:	f1b9 0f00 	cmp.w	r9, #0
 80100c8:	d01f      	beq.n	801010a <__multiply+0x132>
 80100ca:	6834      	ldr	r4, [r6, #0]
 80100cc:	f105 0114 	add.w	r1, r5, #20
 80100d0:	46b6      	mov	lr, r6
 80100d2:	f04f 0a00 	mov.w	sl, #0
 80100d6:	880a      	ldrh	r2, [r1, #0]
 80100d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80100dc:	fb09 b202 	mla	r2, r9, r2, fp
 80100e0:	4492      	add	sl, r2
 80100e2:	b2a4      	uxth	r4, r4
 80100e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80100e8:	f84e 4b04 	str.w	r4, [lr], #4
 80100ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80100f0:	f8be 2000 	ldrh.w	r2, [lr]
 80100f4:	0c24      	lsrs	r4, r4, #16
 80100f6:	fb09 2404 	mla	r4, r9, r4, r2
 80100fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80100fe:	458c      	cmp	ip, r1
 8010100:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010104:	d8e7      	bhi.n	80100d6 <__multiply+0xfe>
 8010106:	9a01      	ldr	r2, [sp, #4]
 8010108:	50b4      	str	r4, [r6, r2]
 801010a:	3604      	adds	r6, #4
 801010c:	e7a3      	b.n	8010056 <__multiply+0x7e>
 801010e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1a5      	bne.n	8010062 <__multiply+0x8a>
 8010116:	3f01      	subs	r7, #1
 8010118:	e7a1      	b.n	801005e <__multiply+0x86>
 801011a:	bf00      	nop
 801011c:	0801b94f 	.word	0x0801b94f
 8010120:	0801b960 	.word	0x0801b960

08010124 <__pow5mult>:
 8010124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010128:	4615      	mov	r5, r2
 801012a:	f012 0203 	ands.w	r2, r2, #3
 801012e:	4606      	mov	r6, r0
 8010130:	460f      	mov	r7, r1
 8010132:	d007      	beq.n	8010144 <__pow5mult+0x20>
 8010134:	4c25      	ldr	r4, [pc, #148]	; (80101cc <__pow5mult+0xa8>)
 8010136:	3a01      	subs	r2, #1
 8010138:	2300      	movs	r3, #0
 801013a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801013e:	f7ff fe9b 	bl	800fe78 <__multadd>
 8010142:	4607      	mov	r7, r0
 8010144:	10ad      	asrs	r5, r5, #2
 8010146:	d03d      	beq.n	80101c4 <__pow5mult+0xa0>
 8010148:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801014a:	b97c      	cbnz	r4, 801016c <__pow5mult+0x48>
 801014c:	2010      	movs	r0, #16
 801014e:	f7ff fe29 	bl	800fda4 <malloc>
 8010152:	4602      	mov	r2, r0
 8010154:	6270      	str	r0, [r6, #36]	; 0x24
 8010156:	b928      	cbnz	r0, 8010164 <__pow5mult+0x40>
 8010158:	4b1d      	ldr	r3, [pc, #116]	; (80101d0 <__pow5mult+0xac>)
 801015a:	481e      	ldr	r0, [pc, #120]	; (80101d4 <__pow5mult+0xb0>)
 801015c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010160:	f000 fbcc 	bl	80108fc <__assert_func>
 8010164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010168:	6004      	str	r4, [r0, #0]
 801016a:	60c4      	str	r4, [r0, #12]
 801016c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010174:	b94c      	cbnz	r4, 801018a <__pow5mult+0x66>
 8010176:	f240 2171 	movw	r1, #625	; 0x271
 801017a:	4630      	mov	r0, r6
 801017c:	f7ff ff16 	bl	800ffac <__i2b>
 8010180:	2300      	movs	r3, #0
 8010182:	f8c8 0008 	str.w	r0, [r8, #8]
 8010186:	4604      	mov	r4, r0
 8010188:	6003      	str	r3, [r0, #0]
 801018a:	f04f 0900 	mov.w	r9, #0
 801018e:	07eb      	lsls	r3, r5, #31
 8010190:	d50a      	bpl.n	80101a8 <__pow5mult+0x84>
 8010192:	4639      	mov	r1, r7
 8010194:	4622      	mov	r2, r4
 8010196:	4630      	mov	r0, r6
 8010198:	f7ff ff1e 	bl	800ffd8 <__multiply>
 801019c:	4639      	mov	r1, r7
 801019e:	4680      	mov	r8, r0
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7ff fe47 	bl	800fe34 <_Bfree>
 80101a6:	4647      	mov	r7, r8
 80101a8:	106d      	asrs	r5, r5, #1
 80101aa:	d00b      	beq.n	80101c4 <__pow5mult+0xa0>
 80101ac:	6820      	ldr	r0, [r4, #0]
 80101ae:	b938      	cbnz	r0, 80101c0 <__pow5mult+0x9c>
 80101b0:	4622      	mov	r2, r4
 80101b2:	4621      	mov	r1, r4
 80101b4:	4630      	mov	r0, r6
 80101b6:	f7ff ff0f 	bl	800ffd8 <__multiply>
 80101ba:	6020      	str	r0, [r4, #0]
 80101bc:	f8c0 9000 	str.w	r9, [r0]
 80101c0:	4604      	mov	r4, r0
 80101c2:	e7e4      	b.n	801018e <__pow5mult+0x6a>
 80101c4:	4638      	mov	r0, r7
 80101c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ca:	bf00      	nop
 80101cc:	0801bab0 	.word	0x0801bab0
 80101d0:	0801b8d9 	.word	0x0801b8d9
 80101d4:	0801b960 	.word	0x0801b960

080101d8 <__lshift>:
 80101d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101dc:	460c      	mov	r4, r1
 80101de:	6849      	ldr	r1, [r1, #4]
 80101e0:	6923      	ldr	r3, [r4, #16]
 80101e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101e6:	68a3      	ldr	r3, [r4, #8]
 80101e8:	4607      	mov	r7, r0
 80101ea:	4691      	mov	r9, r2
 80101ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101f0:	f108 0601 	add.w	r6, r8, #1
 80101f4:	42b3      	cmp	r3, r6
 80101f6:	db0b      	blt.n	8010210 <__lshift+0x38>
 80101f8:	4638      	mov	r0, r7
 80101fa:	f7ff fddb 	bl	800fdb4 <_Balloc>
 80101fe:	4605      	mov	r5, r0
 8010200:	b948      	cbnz	r0, 8010216 <__lshift+0x3e>
 8010202:	4602      	mov	r2, r0
 8010204:	4b28      	ldr	r3, [pc, #160]	; (80102a8 <__lshift+0xd0>)
 8010206:	4829      	ldr	r0, [pc, #164]	; (80102ac <__lshift+0xd4>)
 8010208:	f240 11d9 	movw	r1, #473	; 0x1d9
 801020c:	f000 fb76 	bl	80108fc <__assert_func>
 8010210:	3101      	adds	r1, #1
 8010212:	005b      	lsls	r3, r3, #1
 8010214:	e7ee      	b.n	80101f4 <__lshift+0x1c>
 8010216:	2300      	movs	r3, #0
 8010218:	f100 0114 	add.w	r1, r0, #20
 801021c:	f100 0210 	add.w	r2, r0, #16
 8010220:	4618      	mov	r0, r3
 8010222:	4553      	cmp	r3, sl
 8010224:	db33      	blt.n	801028e <__lshift+0xb6>
 8010226:	6920      	ldr	r0, [r4, #16]
 8010228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801022c:	f104 0314 	add.w	r3, r4, #20
 8010230:	f019 091f 	ands.w	r9, r9, #31
 8010234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801023c:	d02b      	beq.n	8010296 <__lshift+0xbe>
 801023e:	f1c9 0e20 	rsb	lr, r9, #32
 8010242:	468a      	mov	sl, r1
 8010244:	2200      	movs	r2, #0
 8010246:	6818      	ldr	r0, [r3, #0]
 8010248:	fa00 f009 	lsl.w	r0, r0, r9
 801024c:	4302      	orrs	r2, r0
 801024e:	f84a 2b04 	str.w	r2, [sl], #4
 8010252:	f853 2b04 	ldr.w	r2, [r3], #4
 8010256:	459c      	cmp	ip, r3
 8010258:	fa22 f20e 	lsr.w	r2, r2, lr
 801025c:	d8f3      	bhi.n	8010246 <__lshift+0x6e>
 801025e:	ebac 0304 	sub.w	r3, ip, r4
 8010262:	3b15      	subs	r3, #21
 8010264:	f023 0303 	bic.w	r3, r3, #3
 8010268:	3304      	adds	r3, #4
 801026a:	f104 0015 	add.w	r0, r4, #21
 801026e:	4584      	cmp	ip, r0
 8010270:	bf38      	it	cc
 8010272:	2304      	movcc	r3, #4
 8010274:	50ca      	str	r2, [r1, r3]
 8010276:	b10a      	cbz	r2, 801027c <__lshift+0xa4>
 8010278:	f108 0602 	add.w	r6, r8, #2
 801027c:	3e01      	subs	r6, #1
 801027e:	4638      	mov	r0, r7
 8010280:	612e      	str	r6, [r5, #16]
 8010282:	4621      	mov	r1, r4
 8010284:	f7ff fdd6 	bl	800fe34 <_Bfree>
 8010288:	4628      	mov	r0, r5
 801028a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801028e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010292:	3301      	adds	r3, #1
 8010294:	e7c5      	b.n	8010222 <__lshift+0x4a>
 8010296:	3904      	subs	r1, #4
 8010298:	f853 2b04 	ldr.w	r2, [r3], #4
 801029c:	f841 2f04 	str.w	r2, [r1, #4]!
 80102a0:	459c      	cmp	ip, r3
 80102a2:	d8f9      	bhi.n	8010298 <__lshift+0xc0>
 80102a4:	e7ea      	b.n	801027c <__lshift+0xa4>
 80102a6:	bf00      	nop
 80102a8:	0801b94f 	.word	0x0801b94f
 80102ac:	0801b960 	.word	0x0801b960

080102b0 <__mcmp>:
 80102b0:	b530      	push	{r4, r5, lr}
 80102b2:	6902      	ldr	r2, [r0, #16]
 80102b4:	690c      	ldr	r4, [r1, #16]
 80102b6:	1b12      	subs	r2, r2, r4
 80102b8:	d10e      	bne.n	80102d8 <__mcmp+0x28>
 80102ba:	f100 0314 	add.w	r3, r0, #20
 80102be:	3114      	adds	r1, #20
 80102c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80102c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80102cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80102d0:	42a5      	cmp	r5, r4
 80102d2:	d003      	beq.n	80102dc <__mcmp+0x2c>
 80102d4:	d305      	bcc.n	80102e2 <__mcmp+0x32>
 80102d6:	2201      	movs	r2, #1
 80102d8:	4610      	mov	r0, r2
 80102da:	bd30      	pop	{r4, r5, pc}
 80102dc:	4283      	cmp	r3, r0
 80102de:	d3f3      	bcc.n	80102c8 <__mcmp+0x18>
 80102e0:	e7fa      	b.n	80102d8 <__mcmp+0x28>
 80102e2:	f04f 32ff 	mov.w	r2, #4294967295
 80102e6:	e7f7      	b.n	80102d8 <__mcmp+0x28>

080102e8 <__mdiff>:
 80102e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ec:	460c      	mov	r4, r1
 80102ee:	4606      	mov	r6, r0
 80102f0:	4611      	mov	r1, r2
 80102f2:	4620      	mov	r0, r4
 80102f4:	4617      	mov	r7, r2
 80102f6:	f7ff ffdb 	bl	80102b0 <__mcmp>
 80102fa:	1e05      	subs	r5, r0, #0
 80102fc:	d110      	bne.n	8010320 <__mdiff+0x38>
 80102fe:	4629      	mov	r1, r5
 8010300:	4630      	mov	r0, r6
 8010302:	f7ff fd57 	bl	800fdb4 <_Balloc>
 8010306:	b930      	cbnz	r0, 8010316 <__mdiff+0x2e>
 8010308:	4b39      	ldr	r3, [pc, #228]	; (80103f0 <__mdiff+0x108>)
 801030a:	4602      	mov	r2, r0
 801030c:	f240 2132 	movw	r1, #562	; 0x232
 8010310:	4838      	ldr	r0, [pc, #224]	; (80103f4 <__mdiff+0x10c>)
 8010312:	f000 faf3 	bl	80108fc <__assert_func>
 8010316:	2301      	movs	r3, #1
 8010318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801031c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	bfa4      	itt	ge
 8010322:	463b      	movge	r3, r7
 8010324:	4627      	movge	r7, r4
 8010326:	4630      	mov	r0, r6
 8010328:	6879      	ldr	r1, [r7, #4]
 801032a:	bfa6      	itte	ge
 801032c:	461c      	movge	r4, r3
 801032e:	2500      	movge	r5, #0
 8010330:	2501      	movlt	r5, #1
 8010332:	f7ff fd3f 	bl	800fdb4 <_Balloc>
 8010336:	b920      	cbnz	r0, 8010342 <__mdiff+0x5a>
 8010338:	4b2d      	ldr	r3, [pc, #180]	; (80103f0 <__mdiff+0x108>)
 801033a:	4602      	mov	r2, r0
 801033c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010340:	e7e6      	b.n	8010310 <__mdiff+0x28>
 8010342:	693e      	ldr	r6, [r7, #16]
 8010344:	60c5      	str	r5, [r0, #12]
 8010346:	6925      	ldr	r5, [r4, #16]
 8010348:	f107 0114 	add.w	r1, r7, #20
 801034c:	f104 0914 	add.w	r9, r4, #20
 8010350:	f100 0e14 	add.w	lr, r0, #20
 8010354:	f107 0210 	add.w	r2, r7, #16
 8010358:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801035c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010360:	46f2      	mov	sl, lr
 8010362:	2700      	movs	r7, #0
 8010364:	f859 3b04 	ldr.w	r3, [r9], #4
 8010368:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801036c:	fa1f f883 	uxth.w	r8, r3
 8010370:	fa17 f78b 	uxtah	r7, r7, fp
 8010374:	0c1b      	lsrs	r3, r3, #16
 8010376:	eba7 0808 	sub.w	r8, r7, r8
 801037a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801037e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010382:	fa1f f888 	uxth.w	r8, r8
 8010386:	141f      	asrs	r7, r3, #16
 8010388:	454d      	cmp	r5, r9
 801038a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801038e:	f84a 3b04 	str.w	r3, [sl], #4
 8010392:	d8e7      	bhi.n	8010364 <__mdiff+0x7c>
 8010394:	1b2b      	subs	r3, r5, r4
 8010396:	3b15      	subs	r3, #21
 8010398:	f023 0303 	bic.w	r3, r3, #3
 801039c:	3304      	adds	r3, #4
 801039e:	3415      	adds	r4, #21
 80103a0:	42a5      	cmp	r5, r4
 80103a2:	bf38      	it	cc
 80103a4:	2304      	movcc	r3, #4
 80103a6:	4419      	add	r1, r3
 80103a8:	4473      	add	r3, lr
 80103aa:	469e      	mov	lr, r3
 80103ac:	460d      	mov	r5, r1
 80103ae:	4565      	cmp	r5, ip
 80103b0:	d30e      	bcc.n	80103d0 <__mdiff+0xe8>
 80103b2:	f10c 0203 	add.w	r2, ip, #3
 80103b6:	1a52      	subs	r2, r2, r1
 80103b8:	f022 0203 	bic.w	r2, r2, #3
 80103bc:	3903      	subs	r1, #3
 80103be:	458c      	cmp	ip, r1
 80103c0:	bf38      	it	cc
 80103c2:	2200      	movcc	r2, #0
 80103c4:	441a      	add	r2, r3
 80103c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80103ca:	b17b      	cbz	r3, 80103ec <__mdiff+0x104>
 80103cc:	6106      	str	r6, [r0, #16]
 80103ce:	e7a5      	b.n	801031c <__mdiff+0x34>
 80103d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80103d4:	fa17 f488 	uxtah	r4, r7, r8
 80103d8:	1422      	asrs	r2, r4, #16
 80103da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80103de:	b2a4      	uxth	r4, r4
 80103e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80103e4:	f84e 4b04 	str.w	r4, [lr], #4
 80103e8:	1417      	asrs	r7, r2, #16
 80103ea:	e7e0      	b.n	80103ae <__mdiff+0xc6>
 80103ec:	3e01      	subs	r6, #1
 80103ee:	e7ea      	b.n	80103c6 <__mdiff+0xde>
 80103f0:	0801b94f 	.word	0x0801b94f
 80103f4:	0801b960 	.word	0x0801b960

080103f8 <__d2b>:
 80103f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103fc:	4689      	mov	r9, r1
 80103fe:	2101      	movs	r1, #1
 8010400:	ec57 6b10 	vmov	r6, r7, d0
 8010404:	4690      	mov	r8, r2
 8010406:	f7ff fcd5 	bl	800fdb4 <_Balloc>
 801040a:	4604      	mov	r4, r0
 801040c:	b930      	cbnz	r0, 801041c <__d2b+0x24>
 801040e:	4602      	mov	r2, r0
 8010410:	4b25      	ldr	r3, [pc, #148]	; (80104a8 <__d2b+0xb0>)
 8010412:	4826      	ldr	r0, [pc, #152]	; (80104ac <__d2b+0xb4>)
 8010414:	f240 310a 	movw	r1, #778	; 0x30a
 8010418:	f000 fa70 	bl	80108fc <__assert_func>
 801041c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010424:	bb35      	cbnz	r5, 8010474 <__d2b+0x7c>
 8010426:	2e00      	cmp	r6, #0
 8010428:	9301      	str	r3, [sp, #4]
 801042a:	d028      	beq.n	801047e <__d2b+0x86>
 801042c:	4668      	mov	r0, sp
 801042e:	9600      	str	r6, [sp, #0]
 8010430:	f7ff fd8c 	bl	800ff4c <__lo0bits>
 8010434:	9900      	ldr	r1, [sp, #0]
 8010436:	b300      	cbz	r0, 801047a <__d2b+0x82>
 8010438:	9a01      	ldr	r2, [sp, #4]
 801043a:	f1c0 0320 	rsb	r3, r0, #32
 801043e:	fa02 f303 	lsl.w	r3, r2, r3
 8010442:	430b      	orrs	r3, r1
 8010444:	40c2      	lsrs	r2, r0
 8010446:	6163      	str	r3, [r4, #20]
 8010448:	9201      	str	r2, [sp, #4]
 801044a:	9b01      	ldr	r3, [sp, #4]
 801044c:	61a3      	str	r3, [r4, #24]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bf14      	ite	ne
 8010452:	2202      	movne	r2, #2
 8010454:	2201      	moveq	r2, #1
 8010456:	6122      	str	r2, [r4, #16]
 8010458:	b1d5      	cbz	r5, 8010490 <__d2b+0x98>
 801045a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801045e:	4405      	add	r5, r0
 8010460:	f8c9 5000 	str.w	r5, [r9]
 8010464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010468:	f8c8 0000 	str.w	r0, [r8]
 801046c:	4620      	mov	r0, r4
 801046e:	b003      	add	sp, #12
 8010470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010478:	e7d5      	b.n	8010426 <__d2b+0x2e>
 801047a:	6161      	str	r1, [r4, #20]
 801047c:	e7e5      	b.n	801044a <__d2b+0x52>
 801047e:	a801      	add	r0, sp, #4
 8010480:	f7ff fd64 	bl	800ff4c <__lo0bits>
 8010484:	9b01      	ldr	r3, [sp, #4]
 8010486:	6163      	str	r3, [r4, #20]
 8010488:	2201      	movs	r2, #1
 801048a:	6122      	str	r2, [r4, #16]
 801048c:	3020      	adds	r0, #32
 801048e:	e7e3      	b.n	8010458 <__d2b+0x60>
 8010490:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010498:	f8c9 0000 	str.w	r0, [r9]
 801049c:	6918      	ldr	r0, [r3, #16]
 801049e:	f7ff fd35 	bl	800ff0c <__hi0bits>
 80104a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104a6:	e7df      	b.n	8010468 <__d2b+0x70>
 80104a8:	0801b94f 	.word	0x0801b94f
 80104ac:	0801b960 	.word	0x0801b960

080104b0 <_calloc_r>:
 80104b0:	b513      	push	{r0, r1, r4, lr}
 80104b2:	434a      	muls	r2, r1
 80104b4:	4611      	mov	r1, r2
 80104b6:	9201      	str	r2, [sp, #4]
 80104b8:	f000 f85a 	bl	8010570 <_malloc_r>
 80104bc:	4604      	mov	r4, r0
 80104be:	b118      	cbz	r0, 80104c8 <_calloc_r+0x18>
 80104c0:	9a01      	ldr	r2, [sp, #4]
 80104c2:	2100      	movs	r1, #0
 80104c4:	f7fe f9d0 	bl	800e868 <memset>
 80104c8:	4620      	mov	r0, r4
 80104ca:	b002      	add	sp, #8
 80104cc:	bd10      	pop	{r4, pc}
	...

080104d0 <_free_r>:
 80104d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104d2:	2900      	cmp	r1, #0
 80104d4:	d048      	beq.n	8010568 <_free_r+0x98>
 80104d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104da:	9001      	str	r0, [sp, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f1a1 0404 	sub.w	r4, r1, #4
 80104e2:	bfb8      	it	lt
 80104e4:	18e4      	addlt	r4, r4, r3
 80104e6:	f000 fa65 	bl	80109b4 <__malloc_lock>
 80104ea:	4a20      	ldr	r2, [pc, #128]	; (801056c <_free_r+0x9c>)
 80104ec:	9801      	ldr	r0, [sp, #4]
 80104ee:	6813      	ldr	r3, [r2, #0]
 80104f0:	4615      	mov	r5, r2
 80104f2:	b933      	cbnz	r3, 8010502 <_free_r+0x32>
 80104f4:	6063      	str	r3, [r4, #4]
 80104f6:	6014      	str	r4, [r2, #0]
 80104f8:	b003      	add	sp, #12
 80104fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104fe:	f000 ba5f 	b.w	80109c0 <__malloc_unlock>
 8010502:	42a3      	cmp	r3, r4
 8010504:	d90b      	bls.n	801051e <_free_r+0x4e>
 8010506:	6821      	ldr	r1, [r4, #0]
 8010508:	1862      	adds	r2, r4, r1
 801050a:	4293      	cmp	r3, r2
 801050c:	bf04      	itt	eq
 801050e:	681a      	ldreq	r2, [r3, #0]
 8010510:	685b      	ldreq	r3, [r3, #4]
 8010512:	6063      	str	r3, [r4, #4]
 8010514:	bf04      	itt	eq
 8010516:	1852      	addeq	r2, r2, r1
 8010518:	6022      	streq	r2, [r4, #0]
 801051a:	602c      	str	r4, [r5, #0]
 801051c:	e7ec      	b.n	80104f8 <_free_r+0x28>
 801051e:	461a      	mov	r2, r3
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	b10b      	cbz	r3, 8010528 <_free_r+0x58>
 8010524:	42a3      	cmp	r3, r4
 8010526:	d9fa      	bls.n	801051e <_free_r+0x4e>
 8010528:	6811      	ldr	r1, [r2, #0]
 801052a:	1855      	adds	r5, r2, r1
 801052c:	42a5      	cmp	r5, r4
 801052e:	d10b      	bne.n	8010548 <_free_r+0x78>
 8010530:	6824      	ldr	r4, [r4, #0]
 8010532:	4421      	add	r1, r4
 8010534:	1854      	adds	r4, r2, r1
 8010536:	42a3      	cmp	r3, r4
 8010538:	6011      	str	r1, [r2, #0]
 801053a:	d1dd      	bne.n	80104f8 <_free_r+0x28>
 801053c:	681c      	ldr	r4, [r3, #0]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	6053      	str	r3, [r2, #4]
 8010542:	4421      	add	r1, r4
 8010544:	6011      	str	r1, [r2, #0]
 8010546:	e7d7      	b.n	80104f8 <_free_r+0x28>
 8010548:	d902      	bls.n	8010550 <_free_r+0x80>
 801054a:	230c      	movs	r3, #12
 801054c:	6003      	str	r3, [r0, #0]
 801054e:	e7d3      	b.n	80104f8 <_free_r+0x28>
 8010550:	6825      	ldr	r5, [r4, #0]
 8010552:	1961      	adds	r1, r4, r5
 8010554:	428b      	cmp	r3, r1
 8010556:	bf04      	itt	eq
 8010558:	6819      	ldreq	r1, [r3, #0]
 801055a:	685b      	ldreq	r3, [r3, #4]
 801055c:	6063      	str	r3, [r4, #4]
 801055e:	bf04      	itt	eq
 8010560:	1949      	addeq	r1, r1, r5
 8010562:	6021      	streq	r1, [r4, #0]
 8010564:	6054      	str	r4, [r2, #4]
 8010566:	e7c7      	b.n	80104f8 <_free_r+0x28>
 8010568:	b003      	add	sp, #12
 801056a:	bd30      	pop	{r4, r5, pc}
 801056c:	240008a8 	.word	0x240008a8

08010570 <_malloc_r>:
 8010570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010572:	1ccd      	adds	r5, r1, #3
 8010574:	f025 0503 	bic.w	r5, r5, #3
 8010578:	3508      	adds	r5, #8
 801057a:	2d0c      	cmp	r5, #12
 801057c:	bf38      	it	cc
 801057e:	250c      	movcc	r5, #12
 8010580:	2d00      	cmp	r5, #0
 8010582:	4606      	mov	r6, r0
 8010584:	db01      	blt.n	801058a <_malloc_r+0x1a>
 8010586:	42a9      	cmp	r1, r5
 8010588:	d903      	bls.n	8010592 <_malloc_r+0x22>
 801058a:	230c      	movs	r3, #12
 801058c:	6033      	str	r3, [r6, #0]
 801058e:	2000      	movs	r0, #0
 8010590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010592:	f000 fa0f 	bl	80109b4 <__malloc_lock>
 8010596:	4921      	ldr	r1, [pc, #132]	; (801061c <_malloc_r+0xac>)
 8010598:	680a      	ldr	r2, [r1, #0]
 801059a:	4614      	mov	r4, r2
 801059c:	b99c      	cbnz	r4, 80105c6 <_malloc_r+0x56>
 801059e:	4f20      	ldr	r7, [pc, #128]	; (8010620 <_malloc_r+0xb0>)
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	b923      	cbnz	r3, 80105ae <_malloc_r+0x3e>
 80105a4:	4621      	mov	r1, r4
 80105a6:	4630      	mov	r0, r6
 80105a8:	f000 f998 	bl	80108dc <_sbrk_r>
 80105ac:	6038      	str	r0, [r7, #0]
 80105ae:	4629      	mov	r1, r5
 80105b0:	4630      	mov	r0, r6
 80105b2:	f000 f993 	bl	80108dc <_sbrk_r>
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	d123      	bne.n	8010602 <_malloc_r+0x92>
 80105ba:	230c      	movs	r3, #12
 80105bc:	6033      	str	r3, [r6, #0]
 80105be:	4630      	mov	r0, r6
 80105c0:	f000 f9fe 	bl	80109c0 <__malloc_unlock>
 80105c4:	e7e3      	b.n	801058e <_malloc_r+0x1e>
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	1b5b      	subs	r3, r3, r5
 80105ca:	d417      	bmi.n	80105fc <_malloc_r+0x8c>
 80105cc:	2b0b      	cmp	r3, #11
 80105ce:	d903      	bls.n	80105d8 <_malloc_r+0x68>
 80105d0:	6023      	str	r3, [r4, #0]
 80105d2:	441c      	add	r4, r3
 80105d4:	6025      	str	r5, [r4, #0]
 80105d6:	e004      	b.n	80105e2 <_malloc_r+0x72>
 80105d8:	6863      	ldr	r3, [r4, #4]
 80105da:	42a2      	cmp	r2, r4
 80105dc:	bf0c      	ite	eq
 80105de:	600b      	streq	r3, [r1, #0]
 80105e0:	6053      	strne	r3, [r2, #4]
 80105e2:	4630      	mov	r0, r6
 80105e4:	f000 f9ec 	bl	80109c0 <__malloc_unlock>
 80105e8:	f104 000b 	add.w	r0, r4, #11
 80105ec:	1d23      	adds	r3, r4, #4
 80105ee:	f020 0007 	bic.w	r0, r0, #7
 80105f2:	1ac2      	subs	r2, r0, r3
 80105f4:	d0cc      	beq.n	8010590 <_malloc_r+0x20>
 80105f6:	1a1b      	subs	r3, r3, r0
 80105f8:	50a3      	str	r3, [r4, r2]
 80105fa:	e7c9      	b.n	8010590 <_malloc_r+0x20>
 80105fc:	4622      	mov	r2, r4
 80105fe:	6864      	ldr	r4, [r4, #4]
 8010600:	e7cc      	b.n	801059c <_malloc_r+0x2c>
 8010602:	1cc4      	adds	r4, r0, #3
 8010604:	f024 0403 	bic.w	r4, r4, #3
 8010608:	42a0      	cmp	r0, r4
 801060a:	d0e3      	beq.n	80105d4 <_malloc_r+0x64>
 801060c:	1a21      	subs	r1, r4, r0
 801060e:	4630      	mov	r0, r6
 8010610:	f000 f964 	bl	80108dc <_sbrk_r>
 8010614:	3001      	adds	r0, #1
 8010616:	d1dd      	bne.n	80105d4 <_malloc_r+0x64>
 8010618:	e7cf      	b.n	80105ba <_malloc_r+0x4a>
 801061a:	bf00      	nop
 801061c:	240008a8 	.word	0x240008a8
 8010620:	240008ac 	.word	0x240008ac

08010624 <__ssputs_r>:
 8010624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010628:	688e      	ldr	r6, [r1, #8]
 801062a:	429e      	cmp	r6, r3
 801062c:	4682      	mov	sl, r0
 801062e:	460c      	mov	r4, r1
 8010630:	4690      	mov	r8, r2
 8010632:	461f      	mov	r7, r3
 8010634:	d838      	bhi.n	80106a8 <__ssputs_r+0x84>
 8010636:	898a      	ldrh	r2, [r1, #12]
 8010638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801063c:	d032      	beq.n	80106a4 <__ssputs_r+0x80>
 801063e:	6825      	ldr	r5, [r4, #0]
 8010640:	6909      	ldr	r1, [r1, #16]
 8010642:	eba5 0901 	sub.w	r9, r5, r1
 8010646:	6965      	ldr	r5, [r4, #20]
 8010648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801064c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010650:	3301      	adds	r3, #1
 8010652:	444b      	add	r3, r9
 8010654:	106d      	asrs	r5, r5, #1
 8010656:	429d      	cmp	r5, r3
 8010658:	bf38      	it	cc
 801065a:	461d      	movcc	r5, r3
 801065c:	0553      	lsls	r3, r2, #21
 801065e:	d531      	bpl.n	80106c4 <__ssputs_r+0xa0>
 8010660:	4629      	mov	r1, r5
 8010662:	f7ff ff85 	bl	8010570 <_malloc_r>
 8010666:	4606      	mov	r6, r0
 8010668:	b950      	cbnz	r0, 8010680 <__ssputs_r+0x5c>
 801066a:	230c      	movs	r3, #12
 801066c:	f8ca 3000 	str.w	r3, [sl]
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010676:	81a3      	strh	r3, [r4, #12]
 8010678:	f04f 30ff 	mov.w	r0, #4294967295
 801067c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010680:	6921      	ldr	r1, [r4, #16]
 8010682:	464a      	mov	r2, r9
 8010684:	f7fe f8e2 	bl	800e84c <memcpy>
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801068e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010692:	81a3      	strh	r3, [r4, #12]
 8010694:	6126      	str	r6, [r4, #16]
 8010696:	6165      	str	r5, [r4, #20]
 8010698:	444e      	add	r6, r9
 801069a:	eba5 0509 	sub.w	r5, r5, r9
 801069e:	6026      	str	r6, [r4, #0]
 80106a0:	60a5      	str	r5, [r4, #8]
 80106a2:	463e      	mov	r6, r7
 80106a4:	42be      	cmp	r6, r7
 80106a6:	d900      	bls.n	80106aa <__ssputs_r+0x86>
 80106a8:	463e      	mov	r6, r7
 80106aa:	4632      	mov	r2, r6
 80106ac:	6820      	ldr	r0, [r4, #0]
 80106ae:	4641      	mov	r1, r8
 80106b0:	f000 f966 	bl	8010980 <memmove>
 80106b4:	68a3      	ldr	r3, [r4, #8]
 80106b6:	6822      	ldr	r2, [r4, #0]
 80106b8:	1b9b      	subs	r3, r3, r6
 80106ba:	4432      	add	r2, r6
 80106bc:	60a3      	str	r3, [r4, #8]
 80106be:	6022      	str	r2, [r4, #0]
 80106c0:	2000      	movs	r0, #0
 80106c2:	e7db      	b.n	801067c <__ssputs_r+0x58>
 80106c4:	462a      	mov	r2, r5
 80106c6:	f000 f981 	bl	80109cc <_realloc_r>
 80106ca:	4606      	mov	r6, r0
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d1e1      	bne.n	8010694 <__ssputs_r+0x70>
 80106d0:	6921      	ldr	r1, [r4, #16]
 80106d2:	4650      	mov	r0, sl
 80106d4:	f7ff fefc 	bl	80104d0 <_free_r>
 80106d8:	e7c7      	b.n	801066a <__ssputs_r+0x46>
	...

080106dc <_svfiprintf_r>:
 80106dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	4698      	mov	r8, r3
 80106e2:	898b      	ldrh	r3, [r1, #12]
 80106e4:	061b      	lsls	r3, r3, #24
 80106e6:	b09d      	sub	sp, #116	; 0x74
 80106e8:	4607      	mov	r7, r0
 80106ea:	460d      	mov	r5, r1
 80106ec:	4614      	mov	r4, r2
 80106ee:	d50e      	bpl.n	801070e <_svfiprintf_r+0x32>
 80106f0:	690b      	ldr	r3, [r1, #16]
 80106f2:	b963      	cbnz	r3, 801070e <_svfiprintf_r+0x32>
 80106f4:	2140      	movs	r1, #64	; 0x40
 80106f6:	f7ff ff3b 	bl	8010570 <_malloc_r>
 80106fa:	6028      	str	r0, [r5, #0]
 80106fc:	6128      	str	r0, [r5, #16]
 80106fe:	b920      	cbnz	r0, 801070a <_svfiprintf_r+0x2e>
 8010700:	230c      	movs	r3, #12
 8010702:	603b      	str	r3, [r7, #0]
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e0d1      	b.n	80108ae <_svfiprintf_r+0x1d2>
 801070a:	2340      	movs	r3, #64	; 0x40
 801070c:	616b      	str	r3, [r5, #20]
 801070e:	2300      	movs	r3, #0
 8010710:	9309      	str	r3, [sp, #36]	; 0x24
 8010712:	2320      	movs	r3, #32
 8010714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010718:	f8cd 800c 	str.w	r8, [sp, #12]
 801071c:	2330      	movs	r3, #48	; 0x30
 801071e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108c8 <_svfiprintf_r+0x1ec>
 8010722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010726:	f04f 0901 	mov.w	r9, #1
 801072a:	4623      	mov	r3, r4
 801072c:	469a      	mov	sl, r3
 801072e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010732:	b10a      	cbz	r2, 8010738 <_svfiprintf_r+0x5c>
 8010734:	2a25      	cmp	r2, #37	; 0x25
 8010736:	d1f9      	bne.n	801072c <_svfiprintf_r+0x50>
 8010738:	ebba 0b04 	subs.w	fp, sl, r4
 801073c:	d00b      	beq.n	8010756 <_svfiprintf_r+0x7a>
 801073e:	465b      	mov	r3, fp
 8010740:	4622      	mov	r2, r4
 8010742:	4629      	mov	r1, r5
 8010744:	4638      	mov	r0, r7
 8010746:	f7ff ff6d 	bl	8010624 <__ssputs_r>
 801074a:	3001      	adds	r0, #1
 801074c:	f000 80aa 	beq.w	80108a4 <_svfiprintf_r+0x1c8>
 8010750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010752:	445a      	add	r2, fp
 8010754:	9209      	str	r2, [sp, #36]	; 0x24
 8010756:	f89a 3000 	ldrb.w	r3, [sl]
 801075a:	2b00      	cmp	r3, #0
 801075c:	f000 80a2 	beq.w	80108a4 <_svfiprintf_r+0x1c8>
 8010760:	2300      	movs	r3, #0
 8010762:	f04f 32ff 	mov.w	r2, #4294967295
 8010766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801076a:	f10a 0a01 	add.w	sl, sl, #1
 801076e:	9304      	str	r3, [sp, #16]
 8010770:	9307      	str	r3, [sp, #28]
 8010772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010776:	931a      	str	r3, [sp, #104]	; 0x68
 8010778:	4654      	mov	r4, sl
 801077a:	2205      	movs	r2, #5
 801077c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010780:	4851      	ldr	r0, [pc, #324]	; (80108c8 <_svfiprintf_r+0x1ec>)
 8010782:	f7ef fdb5 	bl	80002f0 <memchr>
 8010786:	9a04      	ldr	r2, [sp, #16]
 8010788:	b9d8      	cbnz	r0, 80107c2 <_svfiprintf_r+0xe6>
 801078a:	06d0      	lsls	r0, r2, #27
 801078c:	bf44      	itt	mi
 801078e:	2320      	movmi	r3, #32
 8010790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010794:	0711      	lsls	r1, r2, #28
 8010796:	bf44      	itt	mi
 8010798:	232b      	movmi	r3, #43	; 0x2b
 801079a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801079e:	f89a 3000 	ldrb.w	r3, [sl]
 80107a2:	2b2a      	cmp	r3, #42	; 0x2a
 80107a4:	d015      	beq.n	80107d2 <_svfiprintf_r+0xf6>
 80107a6:	9a07      	ldr	r2, [sp, #28]
 80107a8:	4654      	mov	r4, sl
 80107aa:	2000      	movs	r0, #0
 80107ac:	f04f 0c0a 	mov.w	ip, #10
 80107b0:	4621      	mov	r1, r4
 80107b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107b6:	3b30      	subs	r3, #48	; 0x30
 80107b8:	2b09      	cmp	r3, #9
 80107ba:	d94e      	bls.n	801085a <_svfiprintf_r+0x17e>
 80107bc:	b1b0      	cbz	r0, 80107ec <_svfiprintf_r+0x110>
 80107be:	9207      	str	r2, [sp, #28]
 80107c0:	e014      	b.n	80107ec <_svfiprintf_r+0x110>
 80107c2:	eba0 0308 	sub.w	r3, r0, r8
 80107c6:	fa09 f303 	lsl.w	r3, r9, r3
 80107ca:	4313      	orrs	r3, r2
 80107cc:	9304      	str	r3, [sp, #16]
 80107ce:	46a2      	mov	sl, r4
 80107d0:	e7d2      	b.n	8010778 <_svfiprintf_r+0x9c>
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	1d19      	adds	r1, r3, #4
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	9103      	str	r1, [sp, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	bfbb      	ittet	lt
 80107de:	425b      	neglt	r3, r3
 80107e0:	f042 0202 	orrlt.w	r2, r2, #2
 80107e4:	9307      	strge	r3, [sp, #28]
 80107e6:	9307      	strlt	r3, [sp, #28]
 80107e8:	bfb8      	it	lt
 80107ea:	9204      	strlt	r2, [sp, #16]
 80107ec:	7823      	ldrb	r3, [r4, #0]
 80107ee:	2b2e      	cmp	r3, #46	; 0x2e
 80107f0:	d10c      	bne.n	801080c <_svfiprintf_r+0x130>
 80107f2:	7863      	ldrb	r3, [r4, #1]
 80107f4:	2b2a      	cmp	r3, #42	; 0x2a
 80107f6:	d135      	bne.n	8010864 <_svfiprintf_r+0x188>
 80107f8:	9b03      	ldr	r3, [sp, #12]
 80107fa:	1d1a      	adds	r2, r3, #4
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	9203      	str	r2, [sp, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	bfb8      	it	lt
 8010804:	f04f 33ff 	movlt.w	r3, #4294967295
 8010808:	3402      	adds	r4, #2
 801080a:	9305      	str	r3, [sp, #20]
 801080c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108d8 <_svfiprintf_r+0x1fc>
 8010810:	7821      	ldrb	r1, [r4, #0]
 8010812:	2203      	movs	r2, #3
 8010814:	4650      	mov	r0, sl
 8010816:	f7ef fd6b 	bl	80002f0 <memchr>
 801081a:	b140      	cbz	r0, 801082e <_svfiprintf_r+0x152>
 801081c:	2340      	movs	r3, #64	; 0x40
 801081e:	eba0 000a 	sub.w	r0, r0, sl
 8010822:	fa03 f000 	lsl.w	r0, r3, r0
 8010826:	9b04      	ldr	r3, [sp, #16]
 8010828:	4303      	orrs	r3, r0
 801082a:	3401      	adds	r4, #1
 801082c:	9304      	str	r3, [sp, #16]
 801082e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010832:	4826      	ldr	r0, [pc, #152]	; (80108cc <_svfiprintf_r+0x1f0>)
 8010834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010838:	2206      	movs	r2, #6
 801083a:	f7ef fd59 	bl	80002f0 <memchr>
 801083e:	2800      	cmp	r0, #0
 8010840:	d038      	beq.n	80108b4 <_svfiprintf_r+0x1d8>
 8010842:	4b23      	ldr	r3, [pc, #140]	; (80108d0 <_svfiprintf_r+0x1f4>)
 8010844:	bb1b      	cbnz	r3, 801088e <_svfiprintf_r+0x1b2>
 8010846:	9b03      	ldr	r3, [sp, #12]
 8010848:	3307      	adds	r3, #7
 801084a:	f023 0307 	bic.w	r3, r3, #7
 801084e:	3308      	adds	r3, #8
 8010850:	9303      	str	r3, [sp, #12]
 8010852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010854:	4433      	add	r3, r6
 8010856:	9309      	str	r3, [sp, #36]	; 0x24
 8010858:	e767      	b.n	801072a <_svfiprintf_r+0x4e>
 801085a:	fb0c 3202 	mla	r2, ip, r2, r3
 801085e:	460c      	mov	r4, r1
 8010860:	2001      	movs	r0, #1
 8010862:	e7a5      	b.n	80107b0 <_svfiprintf_r+0xd4>
 8010864:	2300      	movs	r3, #0
 8010866:	3401      	adds	r4, #1
 8010868:	9305      	str	r3, [sp, #20]
 801086a:	4619      	mov	r1, r3
 801086c:	f04f 0c0a 	mov.w	ip, #10
 8010870:	4620      	mov	r0, r4
 8010872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010876:	3a30      	subs	r2, #48	; 0x30
 8010878:	2a09      	cmp	r2, #9
 801087a:	d903      	bls.n	8010884 <_svfiprintf_r+0x1a8>
 801087c:	2b00      	cmp	r3, #0
 801087e:	d0c5      	beq.n	801080c <_svfiprintf_r+0x130>
 8010880:	9105      	str	r1, [sp, #20]
 8010882:	e7c3      	b.n	801080c <_svfiprintf_r+0x130>
 8010884:	fb0c 2101 	mla	r1, ip, r1, r2
 8010888:	4604      	mov	r4, r0
 801088a:	2301      	movs	r3, #1
 801088c:	e7f0      	b.n	8010870 <_svfiprintf_r+0x194>
 801088e:	ab03      	add	r3, sp, #12
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	462a      	mov	r2, r5
 8010894:	4b0f      	ldr	r3, [pc, #60]	; (80108d4 <_svfiprintf_r+0x1f8>)
 8010896:	a904      	add	r1, sp, #16
 8010898:	4638      	mov	r0, r7
 801089a:	f7fe f87d 	bl	800e998 <_printf_float>
 801089e:	1c42      	adds	r2, r0, #1
 80108a0:	4606      	mov	r6, r0
 80108a2:	d1d6      	bne.n	8010852 <_svfiprintf_r+0x176>
 80108a4:	89ab      	ldrh	r3, [r5, #12]
 80108a6:	065b      	lsls	r3, r3, #25
 80108a8:	f53f af2c 	bmi.w	8010704 <_svfiprintf_r+0x28>
 80108ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108ae:	b01d      	add	sp, #116	; 0x74
 80108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b4:	ab03      	add	r3, sp, #12
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	462a      	mov	r2, r5
 80108ba:	4b06      	ldr	r3, [pc, #24]	; (80108d4 <_svfiprintf_r+0x1f8>)
 80108bc:	a904      	add	r1, sp, #16
 80108be:	4638      	mov	r0, r7
 80108c0:	f7fe faf6 	bl	800eeb0 <_printf_i>
 80108c4:	e7eb      	b.n	801089e <_svfiprintf_r+0x1c2>
 80108c6:	bf00      	nop
 80108c8:	0801babc 	.word	0x0801babc
 80108cc:	0801bac6 	.word	0x0801bac6
 80108d0:	0800e999 	.word	0x0800e999
 80108d4:	08010625 	.word	0x08010625
 80108d8:	0801bac2 	.word	0x0801bac2

080108dc <_sbrk_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4d06      	ldr	r5, [pc, #24]	; (80108f8 <_sbrk_r+0x1c>)
 80108e0:	2300      	movs	r3, #0
 80108e2:	4604      	mov	r4, r0
 80108e4:	4608      	mov	r0, r1
 80108e6:	602b      	str	r3, [r5, #0]
 80108e8:	f7f3 fc82 	bl	80041f0 <_sbrk>
 80108ec:	1c43      	adds	r3, r0, #1
 80108ee:	d102      	bne.n	80108f6 <_sbrk_r+0x1a>
 80108f0:	682b      	ldr	r3, [r5, #0]
 80108f2:	b103      	cbz	r3, 80108f6 <_sbrk_r+0x1a>
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	bd38      	pop	{r3, r4, r5, pc}
 80108f8:	24010dc8 	.word	0x24010dc8

080108fc <__assert_func>:
 80108fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108fe:	4614      	mov	r4, r2
 8010900:	461a      	mov	r2, r3
 8010902:	4b09      	ldr	r3, [pc, #36]	; (8010928 <__assert_func+0x2c>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4605      	mov	r5, r0
 8010908:	68d8      	ldr	r0, [r3, #12]
 801090a:	b14c      	cbz	r4, 8010920 <__assert_func+0x24>
 801090c:	4b07      	ldr	r3, [pc, #28]	; (801092c <__assert_func+0x30>)
 801090e:	9100      	str	r1, [sp, #0]
 8010910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010914:	4906      	ldr	r1, [pc, #24]	; (8010930 <__assert_func+0x34>)
 8010916:	462b      	mov	r3, r5
 8010918:	f000 f80e 	bl	8010938 <fiprintf>
 801091c:	f000 faa4 	bl	8010e68 <abort>
 8010920:	4b04      	ldr	r3, [pc, #16]	; (8010934 <__assert_func+0x38>)
 8010922:	461c      	mov	r4, r3
 8010924:	e7f3      	b.n	801090e <__assert_func+0x12>
 8010926:	bf00      	nop
 8010928:	24000378 	.word	0x24000378
 801092c:	0801bacd 	.word	0x0801bacd
 8010930:	0801bada 	.word	0x0801bada
 8010934:	0801bb08 	.word	0x0801bb08

08010938 <fiprintf>:
 8010938:	b40e      	push	{r1, r2, r3}
 801093a:	b503      	push	{r0, r1, lr}
 801093c:	4601      	mov	r1, r0
 801093e:	ab03      	add	r3, sp, #12
 8010940:	4805      	ldr	r0, [pc, #20]	; (8010958 <fiprintf+0x20>)
 8010942:	f853 2b04 	ldr.w	r2, [r3], #4
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	9301      	str	r3, [sp, #4]
 801094a:	f000 f88f 	bl	8010a6c <_vfiprintf_r>
 801094e:	b002      	add	sp, #8
 8010950:	f85d eb04 	ldr.w	lr, [sp], #4
 8010954:	b003      	add	sp, #12
 8010956:	4770      	bx	lr
 8010958:	24000378 	.word	0x24000378

0801095c <__ascii_mbtowc>:
 801095c:	b082      	sub	sp, #8
 801095e:	b901      	cbnz	r1, 8010962 <__ascii_mbtowc+0x6>
 8010960:	a901      	add	r1, sp, #4
 8010962:	b142      	cbz	r2, 8010976 <__ascii_mbtowc+0x1a>
 8010964:	b14b      	cbz	r3, 801097a <__ascii_mbtowc+0x1e>
 8010966:	7813      	ldrb	r3, [r2, #0]
 8010968:	600b      	str	r3, [r1, #0]
 801096a:	7812      	ldrb	r2, [r2, #0]
 801096c:	1e10      	subs	r0, r2, #0
 801096e:	bf18      	it	ne
 8010970:	2001      	movne	r0, #1
 8010972:	b002      	add	sp, #8
 8010974:	4770      	bx	lr
 8010976:	4610      	mov	r0, r2
 8010978:	e7fb      	b.n	8010972 <__ascii_mbtowc+0x16>
 801097a:	f06f 0001 	mvn.w	r0, #1
 801097e:	e7f8      	b.n	8010972 <__ascii_mbtowc+0x16>

08010980 <memmove>:
 8010980:	4288      	cmp	r0, r1
 8010982:	b510      	push	{r4, lr}
 8010984:	eb01 0402 	add.w	r4, r1, r2
 8010988:	d902      	bls.n	8010990 <memmove+0x10>
 801098a:	4284      	cmp	r4, r0
 801098c:	4623      	mov	r3, r4
 801098e:	d807      	bhi.n	80109a0 <memmove+0x20>
 8010990:	1e43      	subs	r3, r0, #1
 8010992:	42a1      	cmp	r1, r4
 8010994:	d008      	beq.n	80109a8 <memmove+0x28>
 8010996:	f811 2b01 	ldrb.w	r2, [r1], #1
 801099a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801099e:	e7f8      	b.n	8010992 <memmove+0x12>
 80109a0:	4402      	add	r2, r0
 80109a2:	4601      	mov	r1, r0
 80109a4:	428a      	cmp	r2, r1
 80109a6:	d100      	bne.n	80109aa <memmove+0x2a>
 80109a8:	bd10      	pop	{r4, pc}
 80109aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109b2:	e7f7      	b.n	80109a4 <memmove+0x24>

080109b4 <__malloc_lock>:
 80109b4:	4801      	ldr	r0, [pc, #4]	; (80109bc <__malloc_lock+0x8>)
 80109b6:	f000 bc17 	b.w	80111e8 <__retarget_lock_acquire_recursive>
 80109ba:	bf00      	nop
 80109bc:	24010dd0 	.word	0x24010dd0

080109c0 <__malloc_unlock>:
 80109c0:	4801      	ldr	r0, [pc, #4]	; (80109c8 <__malloc_unlock+0x8>)
 80109c2:	f000 bc12 	b.w	80111ea <__retarget_lock_release_recursive>
 80109c6:	bf00      	nop
 80109c8:	24010dd0 	.word	0x24010dd0

080109cc <_realloc_r>:
 80109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ce:	4607      	mov	r7, r0
 80109d0:	4614      	mov	r4, r2
 80109d2:	460e      	mov	r6, r1
 80109d4:	b921      	cbnz	r1, 80109e0 <_realloc_r+0x14>
 80109d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80109da:	4611      	mov	r1, r2
 80109dc:	f7ff bdc8 	b.w	8010570 <_malloc_r>
 80109e0:	b922      	cbnz	r2, 80109ec <_realloc_r+0x20>
 80109e2:	f7ff fd75 	bl	80104d0 <_free_r>
 80109e6:	4625      	mov	r5, r4
 80109e8:	4628      	mov	r0, r5
 80109ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ec:	f000 fc62 	bl	80112b4 <_malloc_usable_size_r>
 80109f0:	42a0      	cmp	r0, r4
 80109f2:	d20f      	bcs.n	8010a14 <_realloc_r+0x48>
 80109f4:	4621      	mov	r1, r4
 80109f6:	4638      	mov	r0, r7
 80109f8:	f7ff fdba 	bl	8010570 <_malloc_r>
 80109fc:	4605      	mov	r5, r0
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d0f2      	beq.n	80109e8 <_realloc_r+0x1c>
 8010a02:	4631      	mov	r1, r6
 8010a04:	4622      	mov	r2, r4
 8010a06:	f7fd ff21 	bl	800e84c <memcpy>
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	4638      	mov	r0, r7
 8010a0e:	f7ff fd5f 	bl	80104d0 <_free_r>
 8010a12:	e7e9      	b.n	80109e8 <_realloc_r+0x1c>
 8010a14:	4635      	mov	r5, r6
 8010a16:	e7e7      	b.n	80109e8 <_realloc_r+0x1c>

08010a18 <__sfputc_r>:
 8010a18:	6893      	ldr	r3, [r2, #8]
 8010a1a:	3b01      	subs	r3, #1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	b410      	push	{r4}
 8010a20:	6093      	str	r3, [r2, #8]
 8010a22:	da08      	bge.n	8010a36 <__sfputc_r+0x1e>
 8010a24:	6994      	ldr	r4, [r2, #24]
 8010a26:	42a3      	cmp	r3, r4
 8010a28:	db01      	blt.n	8010a2e <__sfputc_r+0x16>
 8010a2a:	290a      	cmp	r1, #10
 8010a2c:	d103      	bne.n	8010a36 <__sfputc_r+0x1e>
 8010a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a32:	f000 b94b 	b.w	8010ccc <__swbuf_r>
 8010a36:	6813      	ldr	r3, [r2, #0]
 8010a38:	1c58      	adds	r0, r3, #1
 8010a3a:	6010      	str	r0, [r2, #0]
 8010a3c:	7019      	strb	r1, [r3, #0]
 8010a3e:	4608      	mov	r0, r1
 8010a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <__sfputs_r>:
 8010a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a48:	4606      	mov	r6, r0
 8010a4a:	460f      	mov	r7, r1
 8010a4c:	4614      	mov	r4, r2
 8010a4e:	18d5      	adds	r5, r2, r3
 8010a50:	42ac      	cmp	r4, r5
 8010a52:	d101      	bne.n	8010a58 <__sfputs_r+0x12>
 8010a54:	2000      	movs	r0, #0
 8010a56:	e007      	b.n	8010a68 <__sfputs_r+0x22>
 8010a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5c:	463a      	mov	r2, r7
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f7ff ffda 	bl	8010a18 <__sfputc_r>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d1f3      	bne.n	8010a50 <__sfputs_r+0xa>
 8010a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a6c <_vfiprintf_r>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	460d      	mov	r5, r1
 8010a72:	b09d      	sub	sp, #116	; 0x74
 8010a74:	4614      	mov	r4, r2
 8010a76:	4698      	mov	r8, r3
 8010a78:	4606      	mov	r6, r0
 8010a7a:	b118      	cbz	r0, 8010a84 <_vfiprintf_r+0x18>
 8010a7c:	6983      	ldr	r3, [r0, #24]
 8010a7e:	b90b      	cbnz	r3, 8010a84 <_vfiprintf_r+0x18>
 8010a80:	f000 fb14 	bl	80110ac <__sinit>
 8010a84:	4b89      	ldr	r3, [pc, #548]	; (8010cac <_vfiprintf_r+0x240>)
 8010a86:	429d      	cmp	r5, r3
 8010a88:	d11b      	bne.n	8010ac2 <_vfiprintf_r+0x56>
 8010a8a:	6875      	ldr	r5, [r6, #4]
 8010a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a8e:	07d9      	lsls	r1, r3, #31
 8010a90:	d405      	bmi.n	8010a9e <_vfiprintf_r+0x32>
 8010a92:	89ab      	ldrh	r3, [r5, #12]
 8010a94:	059a      	lsls	r2, r3, #22
 8010a96:	d402      	bmi.n	8010a9e <_vfiprintf_r+0x32>
 8010a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a9a:	f000 fba5 	bl	80111e8 <__retarget_lock_acquire_recursive>
 8010a9e:	89ab      	ldrh	r3, [r5, #12]
 8010aa0:	071b      	lsls	r3, r3, #28
 8010aa2:	d501      	bpl.n	8010aa8 <_vfiprintf_r+0x3c>
 8010aa4:	692b      	ldr	r3, [r5, #16]
 8010aa6:	b9eb      	cbnz	r3, 8010ae4 <_vfiprintf_r+0x78>
 8010aa8:	4629      	mov	r1, r5
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 f96e 	bl	8010d8c <__swsetup_r>
 8010ab0:	b1c0      	cbz	r0, 8010ae4 <_vfiprintf_r+0x78>
 8010ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ab4:	07dc      	lsls	r4, r3, #31
 8010ab6:	d50e      	bpl.n	8010ad6 <_vfiprintf_r+0x6a>
 8010ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8010abc:	b01d      	add	sp, #116	; 0x74
 8010abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac2:	4b7b      	ldr	r3, [pc, #492]	; (8010cb0 <_vfiprintf_r+0x244>)
 8010ac4:	429d      	cmp	r5, r3
 8010ac6:	d101      	bne.n	8010acc <_vfiprintf_r+0x60>
 8010ac8:	68b5      	ldr	r5, [r6, #8]
 8010aca:	e7df      	b.n	8010a8c <_vfiprintf_r+0x20>
 8010acc:	4b79      	ldr	r3, [pc, #484]	; (8010cb4 <_vfiprintf_r+0x248>)
 8010ace:	429d      	cmp	r5, r3
 8010ad0:	bf08      	it	eq
 8010ad2:	68f5      	ldreq	r5, [r6, #12]
 8010ad4:	e7da      	b.n	8010a8c <_vfiprintf_r+0x20>
 8010ad6:	89ab      	ldrh	r3, [r5, #12]
 8010ad8:	0598      	lsls	r0, r3, #22
 8010ada:	d4ed      	bmi.n	8010ab8 <_vfiprintf_r+0x4c>
 8010adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ade:	f000 fb84 	bl	80111ea <__retarget_lock_release_recursive>
 8010ae2:	e7e9      	b.n	8010ab8 <_vfiprintf_r+0x4c>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae8:	2320      	movs	r3, #32
 8010aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8010af2:	2330      	movs	r3, #48	; 0x30
 8010af4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010cb8 <_vfiprintf_r+0x24c>
 8010af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010afc:	f04f 0901 	mov.w	r9, #1
 8010b00:	4623      	mov	r3, r4
 8010b02:	469a      	mov	sl, r3
 8010b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b08:	b10a      	cbz	r2, 8010b0e <_vfiprintf_r+0xa2>
 8010b0a:	2a25      	cmp	r2, #37	; 0x25
 8010b0c:	d1f9      	bne.n	8010b02 <_vfiprintf_r+0x96>
 8010b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010b12:	d00b      	beq.n	8010b2c <_vfiprintf_r+0xc0>
 8010b14:	465b      	mov	r3, fp
 8010b16:	4622      	mov	r2, r4
 8010b18:	4629      	mov	r1, r5
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	f7ff ff93 	bl	8010a46 <__sfputs_r>
 8010b20:	3001      	adds	r0, #1
 8010b22:	f000 80aa 	beq.w	8010c7a <_vfiprintf_r+0x20e>
 8010b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b28:	445a      	add	r2, fp
 8010b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f000 80a2 	beq.w	8010c7a <_vfiprintf_r+0x20e>
 8010b36:	2300      	movs	r3, #0
 8010b38:	f04f 32ff 	mov.w	r2, #4294967295
 8010b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b40:	f10a 0a01 	add.w	sl, sl, #1
 8010b44:	9304      	str	r3, [sp, #16]
 8010b46:	9307      	str	r3, [sp, #28]
 8010b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010b4e:	4654      	mov	r4, sl
 8010b50:	2205      	movs	r2, #5
 8010b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b56:	4858      	ldr	r0, [pc, #352]	; (8010cb8 <_vfiprintf_r+0x24c>)
 8010b58:	f7ef fbca 	bl	80002f0 <memchr>
 8010b5c:	9a04      	ldr	r2, [sp, #16]
 8010b5e:	b9d8      	cbnz	r0, 8010b98 <_vfiprintf_r+0x12c>
 8010b60:	06d1      	lsls	r1, r2, #27
 8010b62:	bf44      	itt	mi
 8010b64:	2320      	movmi	r3, #32
 8010b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b6a:	0713      	lsls	r3, r2, #28
 8010b6c:	bf44      	itt	mi
 8010b6e:	232b      	movmi	r3, #43	; 0x2b
 8010b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b74:	f89a 3000 	ldrb.w	r3, [sl]
 8010b78:	2b2a      	cmp	r3, #42	; 0x2a
 8010b7a:	d015      	beq.n	8010ba8 <_vfiprintf_r+0x13c>
 8010b7c:	9a07      	ldr	r2, [sp, #28]
 8010b7e:	4654      	mov	r4, sl
 8010b80:	2000      	movs	r0, #0
 8010b82:	f04f 0c0a 	mov.w	ip, #10
 8010b86:	4621      	mov	r1, r4
 8010b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b8c:	3b30      	subs	r3, #48	; 0x30
 8010b8e:	2b09      	cmp	r3, #9
 8010b90:	d94e      	bls.n	8010c30 <_vfiprintf_r+0x1c4>
 8010b92:	b1b0      	cbz	r0, 8010bc2 <_vfiprintf_r+0x156>
 8010b94:	9207      	str	r2, [sp, #28]
 8010b96:	e014      	b.n	8010bc2 <_vfiprintf_r+0x156>
 8010b98:	eba0 0308 	sub.w	r3, r0, r8
 8010b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	9304      	str	r3, [sp, #16]
 8010ba4:	46a2      	mov	sl, r4
 8010ba6:	e7d2      	b.n	8010b4e <_vfiprintf_r+0xe2>
 8010ba8:	9b03      	ldr	r3, [sp, #12]
 8010baa:	1d19      	adds	r1, r3, #4
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	9103      	str	r1, [sp, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	bfbb      	ittet	lt
 8010bb4:	425b      	neglt	r3, r3
 8010bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010bba:	9307      	strge	r3, [sp, #28]
 8010bbc:	9307      	strlt	r3, [sp, #28]
 8010bbe:	bfb8      	it	lt
 8010bc0:	9204      	strlt	r2, [sp, #16]
 8010bc2:	7823      	ldrb	r3, [r4, #0]
 8010bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8010bc6:	d10c      	bne.n	8010be2 <_vfiprintf_r+0x176>
 8010bc8:	7863      	ldrb	r3, [r4, #1]
 8010bca:	2b2a      	cmp	r3, #42	; 0x2a
 8010bcc:	d135      	bne.n	8010c3a <_vfiprintf_r+0x1ce>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	1d1a      	adds	r2, r3, #4
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	9203      	str	r2, [sp, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfb8      	it	lt
 8010bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bde:	3402      	adds	r4, #2
 8010be0:	9305      	str	r3, [sp, #20]
 8010be2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010cc8 <_vfiprintf_r+0x25c>
 8010be6:	7821      	ldrb	r1, [r4, #0]
 8010be8:	2203      	movs	r2, #3
 8010bea:	4650      	mov	r0, sl
 8010bec:	f7ef fb80 	bl	80002f0 <memchr>
 8010bf0:	b140      	cbz	r0, 8010c04 <_vfiprintf_r+0x198>
 8010bf2:	2340      	movs	r3, #64	; 0x40
 8010bf4:	eba0 000a 	sub.w	r0, r0, sl
 8010bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	4303      	orrs	r3, r0
 8010c00:	3401      	adds	r4, #1
 8010c02:	9304      	str	r3, [sp, #16]
 8010c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c08:	482c      	ldr	r0, [pc, #176]	; (8010cbc <_vfiprintf_r+0x250>)
 8010c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c0e:	2206      	movs	r2, #6
 8010c10:	f7ef fb6e 	bl	80002f0 <memchr>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d03f      	beq.n	8010c98 <_vfiprintf_r+0x22c>
 8010c18:	4b29      	ldr	r3, [pc, #164]	; (8010cc0 <_vfiprintf_r+0x254>)
 8010c1a:	bb1b      	cbnz	r3, 8010c64 <_vfiprintf_r+0x1f8>
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	3307      	adds	r3, #7
 8010c20:	f023 0307 	bic.w	r3, r3, #7
 8010c24:	3308      	adds	r3, #8
 8010c26:	9303      	str	r3, [sp, #12]
 8010c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2a:	443b      	add	r3, r7
 8010c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c2e:	e767      	b.n	8010b00 <_vfiprintf_r+0x94>
 8010c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c34:	460c      	mov	r4, r1
 8010c36:	2001      	movs	r0, #1
 8010c38:	e7a5      	b.n	8010b86 <_vfiprintf_r+0x11a>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	3401      	adds	r4, #1
 8010c3e:	9305      	str	r3, [sp, #20]
 8010c40:	4619      	mov	r1, r3
 8010c42:	f04f 0c0a 	mov.w	ip, #10
 8010c46:	4620      	mov	r0, r4
 8010c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c4c:	3a30      	subs	r2, #48	; 0x30
 8010c4e:	2a09      	cmp	r2, #9
 8010c50:	d903      	bls.n	8010c5a <_vfiprintf_r+0x1ee>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0c5      	beq.n	8010be2 <_vfiprintf_r+0x176>
 8010c56:	9105      	str	r1, [sp, #20]
 8010c58:	e7c3      	b.n	8010be2 <_vfiprintf_r+0x176>
 8010c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c5e:	4604      	mov	r4, r0
 8010c60:	2301      	movs	r3, #1
 8010c62:	e7f0      	b.n	8010c46 <_vfiprintf_r+0x1da>
 8010c64:	ab03      	add	r3, sp, #12
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	462a      	mov	r2, r5
 8010c6a:	4b16      	ldr	r3, [pc, #88]	; (8010cc4 <_vfiprintf_r+0x258>)
 8010c6c:	a904      	add	r1, sp, #16
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f7fd fe92 	bl	800e998 <_printf_float>
 8010c74:	4607      	mov	r7, r0
 8010c76:	1c78      	adds	r0, r7, #1
 8010c78:	d1d6      	bne.n	8010c28 <_vfiprintf_r+0x1bc>
 8010c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c7c:	07d9      	lsls	r1, r3, #31
 8010c7e:	d405      	bmi.n	8010c8c <_vfiprintf_r+0x220>
 8010c80:	89ab      	ldrh	r3, [r5, #12]
 8010c82:	059a      	lsls	r2, r3, #22
 8010c84:	d402      	bmi.n	8010c8c <_vfiprintf_r+0x220>
 8010c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c88:	f000 faaf 	bl	80111ea <__retarget_lock_release_recursive>
 8010c8c:	89ab      	ldrh	r3, [r5, #12]
 8010c8e:	065b      	lsls	r3, r3, #25
 8010c90:	f53f af12 	bmi.w	8010ab8 <_vfiprintf_r+0x4c>
 8010c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c96:	e711      	b.n	8010abc <_vfiprintf_r+0x50>
 8010c98:	ab03      	add	r3, sp, #12
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	462a      	mov	r2, r5
 8010c9e:	4b09      	ldr	r3, [pc, #36]	; (8010cc4 <_vfiprintf_r+0x258>)
 8010ca0:	a904      	add	r1, sp, #16
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f7fe f904 	bl	800eeb0 <_printf_i>
 8010ca8:	e7e4      	b.n	8010c74 <_vfiprintf_r+0x208>
 8010caa:	bf00      	nop
 8010cac:	0801bc34 	.word	0x0801bc34
 8010cb0:	0801bc54 	.word	0x0801bc54
 8010cb4:	0801bc14 	.word	0x0801bc14
 8010cb8:	0801babc 	.word	0x0801babc
 8010cbc:	0801bac6 	.word	0x0801bac6
 8010cc0:	0800e999 	.word	0x0800e999
 8010cc4:	08010a47 	.word	0x08010a47
 8010cc8:	0801bac2 	.word	0x0801bac2

08010ccc <__swbuf_r>:
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cce:	460e      	mov	r6, r1
 8010cd0:	4614      	mov	r4, r2
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	b118      	cbz	r0, 8010cde <__swbuf_r+0x12>
 8010cd6:	6983      	ldr	r3, [r0, #24]
 8010cd8:	b90b      	cbnz	r3, 8010cde <__swbuf_r+0x12>
 8010cda:	f000 f9e7 	bl	80110ac <__sinit>
 8010cde:	4b21      	ldr	r3, [pc, #132]	; (8010d64 <__swbuf_r+0x98>)
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	d12b      	bne.n	8010d3c <__swbuf_r+0x70>
 8010ce4:	686c      	ldr	r4, [r5, #4]
 8010ce6:	69a3      	ldr	r3, [r4, #24]
 8010ce8:	60a3      	str	r3, [r4, #8]
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	071a      	lsls	r2, r3, #28
 8010cee:	d52f      	bpl.n	8010d50 <__swbuf_r+0x84>
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	b36b      	cbz	r3, 8010d50 <__swbuf_r+0x84>
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	6820      	ldr	r0, [r4, #0]
 8010cf8:	1ac0      	subs	r0, r0, r3
 8010cfa:	6963      	ldr	r3, [r4, #20]
 8010cfc:	b2f6      	uxtb	r6, r6
 8010cfe:	4283      	cmp	r3, r0
 8010d00:	4637      	mov	r7, r6
 8010d02:	dc04      	bgt.n	8010d0e <__swbuf_r+0x42>
 8010d04:	4621      	mov	r1, r4
 8010d06:	4628      	mov	r0, r5
 8010d08:	f000 f93c 	bl	8010f84 <_fflush_r>
 8010d0c:	bb30      	cbnz	r0, 8010d5c <__swbuf_r+0x90>
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	60a3      	str	r3, [r4, #8]
 8010d14:	6823      	ldr	r3, [r4, #0]
 8010d16:	1c5a      	adds	r2, r3, #1
 8010d18:	6022      	str	r2, [r4, #0]
 8010d1a:	701e      	strb	r6, [r3, #0]
 8010d1c:	6963      	ldr	r3, [r4, #20]
 8010d1e:	3001      	adds	r0, #1
 8010d20:	4283      	cmp	r3, r0
 8010d22:	d004      	beq.n	8010d2e <__swbuf_r+0x62>
 8010d24:	89a3      	ldrh	r3, [r4, #12]
 8010d26:	07db      	lsls	r3, r3, #31
 8010d28:	d506      	bpl.n	8010d38 <__swbuf_r+0x6c>
 8010d2a:	2e0a      	cmp	r6, #10
 8010d2c:	d104      	bne.n	8010d38 <__swbuf_r+0x6c>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f000 f927 	bl	8010f84 <_fflush_r>
 8010d36:	b988      	cbnz	r0, 8010d5c <__swbuf_r+0x90>
 8010d38:	4638      	mov	r0, r7
 8010d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <__swbuf_r+0x9c>)
 8010d3e:	429c      	cmp	r4, r3
 8010d40:	d101      	bne.n	8010d46 <__swbuf_r+0x7a>
 8010d42:	68ac      	ldr	r4, [r5, #8]
 8010d44:	e7cf      	b.n	8010ce6 <__swbuf_r+0x1a>
 8010d46:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <__swbuf_r+0xa0>)
 8010d48:	429c      	cmp	r4, r3
 8010d4a:	bf08      	it	eq
 8010d4c:	68ec      	ldreq	r4, [r5, #12]
 8010d4e:	e7ca      	b.n	8010ce6 <__swbuf_r+0x1a>
 8010d50:	4621      	mov	r1, r4
 8010d52:	4628      	mov	r0, r5
 8010d54:	f000 f81a 	bl	8010d8c <__swsetup_r>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d0cb      	beq.n	8010cf4 <__swbuf_r+0x28>
 8010d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8010d60:	e7ea      	b.n	8010d38 <__swbuf_r+0x6c>
 8010d62:	bf00      	nop
 8010d64:	0801bc34 	.word	0x0801bc34
 8010d68:	0801bc54 	.word	0x0801bc54
 8010d6c:	0801bc14 	.word	0x0801bc14

08010d70 <__ascii_wctomb>:
 8010d70:	b149      	cbz	r1, 8010d86 <__ascii_wctomb+0x16>
 8010d72:	2aff      	cmp	r2, #255	; 0xff
 8010d74:	bf85      	ittet	hi
 8010d76:	238a      	movhi	r3, #138	; 0x8a
 8010d78:	6003      	strhi	r3, [r0, #0]
 8010d7a:	700a      	strbls	r2, [r1, #0]
 8010d7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d80:	bf98      	it	ls
 8010d82:	2001      	movls	r0, #1
 8010d84:	4770      	bx	lr
 8010d86:	4608      	mov	r0, r1
 8010d88:	4770      	bx	lr
	...

08010d8c <__swsetup_r>:
 8010d8c:	4b32      	ldr	r3, [pc, #200]	; (8010e58 <__swsetup_r+0xcc>)
 8010d8e:	b570      	push	{r4, r5, r6, lr}
 8010d90:	681d      	ldr	r5, [r3, #0]
 8010d92:	4606      	mov	r6, r0
 8010d94:	460c      	mov	r4, r1
 8010d96:	b125      	cbz	r5, 8010da2 <__swsetup_r+0x16>
 8010d98:	69ab      	ldr	r3, [r5, #24]
 8010d9a:	b913      	cbnz	r3, 8010da2 <__swsetup_r+0x16>
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	f000 f985 	bl	80110ac <__sinit>
 8010da2:	4b2e      	ldr	r3, [pc, #184]	; (8010e5c <__swsetup_r+0xd0>)
 8010da4:	429c      	cmp	r4, r3
 8010da6:	d10f      	bne.n	8010dc8 <__swsetup_r+0x3c>
 8010da8:	686c      	ldr	r4, [r5, #4]
 8010daa:	89a3      	ldrh	r3, [r4, #12]
 8010dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010db0:	0719      	lsls	r1, r3, #28
 8010db2:	d42c      	bmi.n	8010e0e <__swsetup_r+0x82>
 8010db4:	06dd      	lsls	r5, r3, #27
 8010db6:	d411      	bmi.n	8010ddc <__swsetup_r+0x50>
 8010db8:	2309      	movs	r3, #9
 8010dba:	6033      	str	r3, [r6, #0]
 8010dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010dc0:	81a3      	strh	r3, [r4, #12]
 8010dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc6:	e03e      	b.n	8010e46 <__swsetup_r+0xba>
 8010dc8:	4b25      	ldr	r3, [pc, #148]	; (8010e60 <__swsetup_r+0xd4>)
 8010dca:	429c      	cmp	r4, r3
 8010dcc:	d101      	bne.n	8010dd2 <__swsetup_r+0x46>
 8010dce:	68ac      	ldr	r4, [r5, #8]
 8010dd0:	e7eb      	b.n	8010daa <__swsetup_r+0x1e>
 8010dd2:	4b24      	ldr	r3, [pc, #144]	; (8010e64 <__swsetup_r+0xd8>)
 8010dd4:	429c      	cmp	r4, r3
 8010dd6:	bf08      	it	eq
 8010dd8:	68ec      	ldreq	r4, [r5, #12]
 8010dda:	e7e6      	b.n	8010daa <__swsetup_r+0x1e>
 8010ddc:	0758      	lsls	r0, r3, #29
 8010dde:	d512      	bpl.n	8010e06 <__swsetup_r+0x7a>
 8010de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010de2:	b141      	cbz	r1, 8010df6 <__swsetup_r+0x6a>
 8010de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010de8:	4299      	cmp	r1, r3
 8010dea:	d002      	beq.n	8010df2 <__swsetup_r+0x66>
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7ff fb6f 	bl	80104d0 <_free_r>
 8010df2:	2300      	movs	r3, #0
 8010df4:	6363      	str	r3, [r4, #52]	; 0x34
 8010df6:	89a3      	ldrh	r3, [r4, #12]
 8010df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010dfc:	81a3      	strh	r3, [r4, #12]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	6063      	str	r3, [r4, #4]
 8010e02:	6923      	ldr	r3, [r4, #16]
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	89a3      	ldrh	r3, [r4, #12]
 8010e08:	f043 0308 	orr.w	r3, r3, #8
 8010e0c:	81a3      	strh	r3, [r4, #12]
 8010e0e:	6923      	ldr	r3, [r4, #16]
 8010e10:	b94b      	cbnz	r3, 8010e26 <__swsetup_r+0x9a>
 8010e12:	89a3      	ldrh	r3, [r4, #12]
 8010e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e1c:	d003      	beq.n	8010e26 <__swsetup_r+0x9a>
 8010e1e:	4621      	mov	r1, r4
 8010e20:	4630      	mov	r0, r6
 8010e22:	f000 fa07 	bl	8011234 <__smakebuf_r>
 8010e26:	89a0      	ldrh	r0, [r4, #12]
 8010e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e2c:	f010 0301 	ands.w	r3, r0, #1
 8010e30:	d00a      	beq.n	8010e48 <__swsetup_r+0xbc>
 8010e32:	2300      	movs	r3, #0
 8010e34:	60a3      	str	r3, [r4, #8]
 8010e36:	6963      	ldr	r3, [r4, #20]
 8010e38:	425b      	negs	r3, r3
 8010e3a:	61a3      	str	r3, [r4, #24]
 8010e3c:	6923      	ldr	r3, [r4, #16]
 8010e3e:	b943      	cbnz	r3, 8010e52 <__swsetup_r+0xc6>
 8010e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e44:	d1ba      	bne.n	8010dbc <__swsetup_r+0x30>
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	0781      	lsls	r1, r0, #30
 8010e4a:	bf58      	it	pl
 8010e4c:	6963      	ldrpl	r3, [r4, #20]
 8010e4e:	60a3      	str	r3, [r4, #8]
 8010e50:	e7f4      	b.n	8010e3c <__swsetup_r+0xb0>
 8010e52:	2000      	movs	r0, #0
 8010e54:	e7f7      	b.n	8010e46 <__swsetup_r+0xba>
 8010e56:	bf00      	nop
 8010e58:	24000378 	.word	0x24000378
 8010e5c:	0801bc34 	.word	0x0801bc34
 8010e60:	0801bc54 	.word	0x0801bc54
 8010e64:	0801bc14 	.word	0x0801bc14

08010e68 <abort>:
 8010e68:	b508      	push	{r3, lr}
 8010e6a:	2006      	movs	r0, #6
 8010e6c:	f000 fa52 	bl	8011314 <raise>
 8010e70:	2001      	movs	r0, #1
 8010e72:	f7f3 f98d 	bl	8004190 <_exit>
	...

08010e78 <__sflush_r>:
 8010e78:	898a      	ldrh	r2, [r1, #12]
 8010e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e7e:	4605      	mov	r5, r0
 8010e80:	0710      	lsls	r0, r2, #28
 8010e82:	460c      	mov	r4, r1
 8010e84:	d458      	bmi.n	8010f38 <__sflush_r+0xc0>
 8010e86:	684b      	ldr	r3, [r1, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dc05      	bgt.n	8010e98 <__sflush_r+0x20>
 8010e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	dc02      	bgt.n	8010e98 <__sflush_r+0x20>
 8010e92:	2000      	movs	r0, #0
 8010e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e9a:	2e00      	cmp	r6, #0
 8010e9c:	d0f9      	beq.n	8010e92 <__sflush_r+0x1a>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ea4:	682f      	ldr	r7, [r5, #0]
 8010ea6:	602b      	str	r3, [r5, #0]
 8010ea8:	d032      	beq.n	8010f10 <__sflush_r+0x98>
 8010eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	075a      	lsls	r2, r3, #29
 8010eb0:	d505      	bpl.n	8010ebe <__sflush_r+0x46>
 8010eb2:	6863      	ldr	r3, [r4, #4]
 8010eb4:	1ac0      	subs	r0, r0, r3
 8010eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010eb8:	b10b      	cbz	r3, 8010ebe <__sflush_r+0x46>
 8010eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ebc:	1ac0      	subs	r0, r0, r3
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ec4:	6a21      	ldr	r1, [r4, #32]
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	47b0      	blx	r6
 8010eca:	1c43      	adds	r3, r0, #1
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	d106      	bne.n	8010ede <__sflush_r+0x66>
 8010ed0:	6829      	ldr	r1, [r5, #0]
 8010ed2:	291d      	cmp	r1, #29
 8010ed4:	d82c      	bhi.n	8010f30 <__sflush_r+0xb8>
 8010ed6:	4a2a      	ldr	r2, [pc, #168]	; (8010f80 <__sflush_r+0x108>)
 8010ed8:	40ca      	lsrs	r2, r1
 8010eda:	07d6      	lsls	r6, r2, #31
 8010edc:	d528      	bpl.n	8010f30 <__sflush_r+0xb8>
 8010ede:	2200      	movs	r2, #0
 8010ee0:	6062      	str	r2, [r4, #4]
 8010ee2:	04d9      	lsls	r1, r3, #19
 8010ee4:	6922      	ldr	r2, [r4, #16]
 8010ee6:	6022      	str	r2, [r4, #0]
 8010ee8:	d504      	bpl.n	8010ef4 <__sflush_r+0x7c>
 8010eea:	1c42      	adds	r2, r0, #1
 8010eec:	d101      	bne.n	8010ef2 <__sflush_r+0x7a>
 8010eee:	682b      	ldr	r3, [r5, #0]
 8010ef0:	b903      	cbnz	r3, 8010ef4 <__sflush_r+0x7c>
 8010ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8010ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ef6:	602f      	str	r7, [r5, #0]
 8010ef8:	2900      	cmp	r1, #0
 8010efa:	d0ca      	beq.n	8010e92 <__sflush_r+0x1a>
 8010efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f00:	4299      	cmp	r1, r3
 8010f02:	d002      	beq.n	8010f0a <__sflush_r+0x92>
 8010f04:	4628      	mov	r0, r5
 8010f06:	f7ff fae3 	bl	80104d0 <_free_r>
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8010f0e:	e7c1      	b.n	8010e94 <__sflush_r+0x1c>
 8010f10:	6a21      	ldr	r1, [r4, #32]
 8010f12:	2301      	movs	r3, #1
 8010f14:	4628      	mov	r0, r5
 8010f16:	47b0      	blx	r6
 8010f18:	1c41      	adds	r1, r0, #1
 8010f1a:	d1c7      	bne.n	8010eac <__sflush_r+0x34>
 8010f1c:	682b      	ldr	r3, [r5, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d0c4      	beq.n	8010eac <__sflush_r+0x34>
 8010f22:	2b1d      	cmp	r3, #29
 8010f24:	d001      	beq.n	8010f2a <__sflush_r+0xb2>
 8010f26:	2b16      	cmp	r3, #22
 8010f28:	d101      	bne.n	8010f2e <__sflush_r+0xb6>
 8010f2a:	602f      	str	r7, [r5, #0]
 8010f2c:	e7b1      	b.n	8010e92 <__sflush_r+0x1a>
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	e7ad      	b.n	8010e94 <__sflush_r+0x1c>
 8010f38:	690f      	ldr	r7, [r1, #16]
 8010f3a:	2f00      	cmp	r7, #0
 8010f3c:	d0a9      	beq.n	8010e92 <__sflush_r+0x1a>
 8010f3e:	0793      	lsls	r3, r2, #30
 8010f40:	680e      	ldr	r6, [r1, #0]
 8010f42:	bf08      	it	eq
 8010f44:	694b      	ldreq	r3, [r1, #20]
 8010f46:	600f      	str	r7, [r1, #0]
 8010f48:	bf18      	it	ne
 8010f4a:	2300      	movne	r3, #0
 8010f4c:	eba6 0807 	sub.w	r8, r6, r7
 8010f50:	608b      	str	r3, [r1, #8]
 8010f52:	f1b8 0f00 	cmp.w	r8, #0
 8010f56:	dd9c      	ble.n	8010e92 <__sflush_r+0x1a>
 8010f58:	6a21      	ldr	r1, [r4, #32]
 8010f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f5c:	4643      	mov	r3, r8
 8010f5e:	463a      	mov	r2, r7
 8010f60:	4628      	mov	r0, r5
 8010f62:	47b0      	blx	r6
 8010f64:	2800      	cmp	r0, #0
 8010f66:	dc06      	bgt.n	8010f76 <__sflush_r+0xfe>
 8010f68:	89a3      	ldrh	r3, [r4, #12]
 8010f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f6e:	81a3      	strh	r3, [r4, #12]
 8010f70:	f04f 30ff 	mov.w	r0, #4294967295
 8010f74:	e78e      	b.n	8010e94 <__sflush_r+0x1c>
 8010f76:	4407      	add	r7, r0
 8010f78:	eba8 0800 	sub.w	r8, r8, r0
 8010f7c:	e7e9      	b.n	8010f52 <__sflush_r+0xda>
 8010f7e:	bf00      	nop
 8010f80:	20400001 	.word	0x20400001

08010f84 <_fflush_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	690b      	ldr	r3, [r1, #16]
 8010f88:	4605      	mov	r5, r0
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	b913      	cbnz	r3, 8010f94 <_fflush_r+0x10>
 8010f8e:	2500      	movs	r5, #0
 8010f90:	4628      	mov	r0, r5
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	b118      	cbz	r0, 8010f9e <_fflush_r+0x1a>
 8010f96:	6983      	ldr	r3, [r0, #24]
 8010f98:	b90b      	cbnz	r3, 8010f9e <_fflush_r+0x1a>
 8010f9a:	f000 f887 	bl	80110ac <__sinit>
 8010f9e:	4b14      	ldr	r3, [pc, #80]	; (8010ff0 <_fflush_r+0x6c>)
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	d11b      	bne.n	8010fdc <_fflush_r+0x58>
 8010fa4:	686c      	ldr	r4, [r5, #4]
 8010fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d0ef      	beq.n	8010f8e <_fflush_r+0xa>
 8010fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fb0:	07d0      	lsls	r0, r2, #31
 8010fb2:	d404      	bmi.n	8010fbe <_fflush_r+0x3a>
 8010fb4:	0599      	lsls	r1, r3, #22
 8010fb6:	d402      	bmi.n	8010fbe <_fflush_r+0x3a>
 8010fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fba:	f000 f915 	bl	80111e8 <__retarget_lock_acquire_recursive>
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	f7ff ff59 	bl	8010e78 <__sflush_r>
 8010fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fc8:	07da      	lsls	r2, r3, #31
 8010fca:	4605      	mov	r5, r0
 8010fcc:	d4e0      	bmi.n	8010f90 <_fflush_r+0xc>
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	059b      	lsls	r3, r3, #22
 8010fd2:	d4dd      	bmi.n	8010f90 <_fflush_r+0xc>
 8010fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fd6:	f000 f908 	bl	80111ea <__retarget_lock_release_recursive>
 8010fda:	e7d9      	b.n	8010f90 <_fflush_r+0xc>
 8010fdc:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <_fflush_r+0x70>)
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	d101      	bne.n	8010fe6 <_fflush_r+0x62>
 8010fe2:	68ac      	ldr	r4, [r5, #8]
 8010fe4:	e7df      	b.n	8010fa6 <_fflush_r+0x22>
 8010fe6:	4b04      	ldr	r3, [pc, #16]	; (8010ff8 <_fflush_r+0x74>)
 8010fe8:	429c      	cmp	r4, r3
 8010fea:	bf08      	it	eq
 8010fec:	68ec      	ldreq	r4, [r5, #12]
 8010fee:	e7da      	b.n	8010fa6 <_fflush_r+0x22>
 8010ff0:	0801bc34 	.word	0x0801bc34
 8010ff4:	0801bc54 	.word	0x0801bc54
 8010ff8:	0801bc14 	.word	0x0801bc14

08010ffc <std>:
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	b510      	push	{r4, lr}
 8011000:	4604      	mov	r4, r0
 8011002:	e9c0 3300 	strd	r3, r3, [r0]
 8011006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801100a:	6083      	str	r3, [r0, #8]
 801100c:	8181      	strh	r1, [r0, #12]
 801100e:	6643      	str	r3, [r0, #100]	; 0x64
 8011010:	81c2      	strh	r2, [r0, #14]
 8011012:	6183      	str	r3, [r0, #24]
 8011014:	4619      	mov	r1, r3
 8011016:	2208      	movs	r2, #8
 8011018:	305c      	adds	r0, #92	; 0x5c
 801101a:	f7fd fc25 	bl	800e868 <memset>
 801101e:	4b05      	ldr	r3, [pc, #20]	; (8011034 <std+0x38>)
 8011020:	6263      	str	r3, [r4, #36]	; 0x24
 8011022:	4b05      	ldr	r3, [pc, #20]	; (8011038 <std+0x3c>)
 8011024:	62a3      	str	r3, [r4, #40]	; 0x28
 8011026:	4b05      	ldr	r3, [pc, #20]	; (801103c <std+0x40>)
 8011028:	62e3      	str	r3, [r4, #44]	; 0x2c
 801102a:	4b05      	ldr	r3, [pc, #20]	; (8011040 <std+0x44>)
 801102c:	6224      	str	r4, [r4, #32]
 801102e:	6323      	str	r3, [r4, #48]	; 0x30
 8011030:	bd10      	pop	{r4, pc}
 8011032:	bf00      	nop
 8011034:	0801134d 	.word	0x0801134d
 8011038:	0801136f 	.word	0x0801136f
 801103c:	080113a7 	.word	0x080113a7
 8011040:	080113cb 	.word	0x080113cb

08011044 <_cleanup_r>:
 8011044:	4901      	ldr	r1, [pc, #4]	; (801104c <_cleanup_r+0x8>)
 8011046:	f000 b8af 	b.w	80111a8 <_fwalk_reent>
 801104a:	bf00      	nop
 801104c:	08010f85 	.word	0x08010f85

08011050 <__sfmoreglue>:
 8011050:	b570      	push	{r4, r5, r6, lr}
 8011052:	1e4a      	subs	r2, r1, #1
 8011054:	2568      	movs	r5, #104	; 0x68
 8011056:	4355      	muls	r5, r2
 8011058:	460e      	mov	r6, r1
 801105a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801105e:	f7ff fa87 	bl	8010570 <_malloc_r>
 8011062:	4604      	mov	r4, r0
 8011064:	b140      	cbz	r0, 8011078 <__sfmoreglue+0x28>
 8011066:	2100      	movs	r1, #0
 8011068:	e9c0 1600 	strd	r1, r6, [r0]
 801106c:	300c      	adds	r0, #12
 801106e:	60a0      	str	r0, [r4, #8]
 8011070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011074:	f7fd fbf8 	bl	800e868 <memset>
 8011078:	4620      	mov	r0, r4
 801107a:	bd70      	pop	{r4, r5, r6, pc}

0801107c <__sfp_lock_acquire>:
 801107c:	4801      	ldr	r0, [pc, #4]	; (8011084 <__sfp_lock_acquire+0x8>)
 801107e:	f000 b8b3 	b.w	80111e8 <__retarget_lock_acquire_recursive>
 8011082:	bf00      	nop
 8011084:	24010dd4 	.word	0x24010dd4

08011088 <__sfp_lock_release>:
 8011088:	4801      	ldr	r0, [pc, #4]	; (8011090 <__sfp_lock_release+0x8>)
 801108a:	f000 b8ae 	b.w	80111ea <__retarget_lock_release_recursive>
 801108e:	bf00      	nop
 8011090:	24010dd4 	.word	0x24010dd4

08011094 <__sinit_lock_acquire>:
 8011094:	4801      	ldr	r0, [pc, #4]	; (801109c <__sinit_lock_acquire+0x8>)
 8011096:	f000 b8a7 	b.w	80111e8 <__retarget_lock_acquire_recursive>
 801109a:	bf00      	nop
 801109c:	24010dcf 	.word	0x24010dcf

080110a0 <__sinit_lock_release>:
 80110a0:	4801      	ldr	r0, [pc, #4]	; (80110a8 <__sinit_lock_release+0x8>)
 80110a2:	f000 b8a2 	b.w	80111ea <__retarget_lock_release_recursive>
 80110a6:	bf00      	nop
 80110a8:	24010dcf 	.word	0x24010dcf

080110ac <__sinit>:
 80110ac:	b510      	push	{r4, lr}
 80110ae:	4604      	mov	r4, r0
 80110b0:	f7ff fff0 	bl	8011094 <__sinit_lock_acquire>
 80110b4:	69a3      	ldr	r3, [r4, #24]
 80110b6:	b11b      	cbz	r3, 80110c0 <__sinit+0x14>
 80110b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110bc:	f7ff bff0 	b.w	80110a0 <__sinit_lock_release>
 80110c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110c4:	6523      	str	r3, [r4, #80]	; 0x50
 80110c6:	4b13      	ldr	r3, [pc, #76]	; (8011114 <__sinit+0x68>)
 80110c8:	4a13      	ldr	r2, [pc, #76]	; (8011118 <__sinit+0x6c>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80110ce:	42a3      	cmp	r3, r4
 80110d0:	bf04      	itt	eq
 80110d2:	2301      	moveq	r3, #1
 80110d4:	61a3      	streq	r3, [r4, #24]
 80110d6:	4620      	mov	r0, r4
 80110d8:	f000 f820 	bl	801111c <__sfp>
 80110dc:	6060      	str	r0, [r4, #4]
 80110de:	4620      	mov	r0, r4
 80110e0:	f000 f81c 	bl	801111c <__sfp>
 80110e4:	60a0      	str	r0, [r4, #8]
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 f818 	bl	801111c <__sfp>
 80110ec:	2200      	movs	r2, #0
 80110ee:	60e0      	str	r0, [r4, #12]
 80110f0:	2104      	movs	r1, #4
 80110f2:	6860      	ldr	r0, [r4, #4]
 80110f4:	f7ff ff82 	bl	8010ffc <std>
 80110f8:	68a0      	ldr	r0, [r4, #8]
 80110fa:	2201      	movs	r2, #1
 80110fc:	2109      	movs	r1, #9
 80110fe:	f7ff ff7d 	bl	8010ffc <std>
 8011102:	68e0      	ldr	r0, [r4, #12]
 8011104:	2202      	movs	r2, #2
 8011106:	2112      	movs	r1, #18
 8011108:	f7ff ff78 	bl	8010ffc <std>
 801110c:	2301      	movs	r3, #1
 801110e:	61a3      	str	r3, [r4, #24]
 8011110:	e7d2      	b.n	80110b8 <__sinit+0xc>
 8011112:	bf00      	nop
 8011114:	0801b894 	.word	0x0801b894
 8011118:	08011045 	.word	0x08011045

0801111c <__sfp>:
 801111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111e:	4607      	mov	r7, r0
 8011120:	f7ff ffac 	bl	801107c <__sfp_lock_acquire>
 8011124:	4b1e      	ldr	r3, [pc, #120]	; (80111a0 <__sfp+0x84>)
 8011126:	681e      	ldr	r6, [r3, #0]
 8011128:	69b3      	ldr	r3, [r6, #24]
 801112a:	b913      	cbnz	r3, 8011132 <__sfp+0x16>
 801112c:	4630      	mov	r0, r6
 801112e:	f7ff ffbd 	bl	80110ac <__sinit>
 8011132:	3648      	adds	r6, #72	; 0x48
 8011134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011138:	3b01      	subs	r3, #1
 801113a:	d503      	bpl.n	8011144 <__sfp+0x28>
 801113c:	6833      	ldr	r3, [r6, #0]
 801113e:	b30b      	cbz	r3, 8011184 <__sfp+0x68>
 8011140:	6836      	ldr	r6, [r6, #0]
 8011142:	e7f7      	b.n	8011134 <__sfp+0x18>
 8011144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011148:	b9d5      	cbnz	r5, 8011180 <__sfp+0x64>
 801114a:	4b16      	ldr	r3, [pc, #88]	; (80111a4 <__sfp+0x88>)
 801114c:	60e3      	str	r3, [r4, #12]
 801114e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011152:	6665      	str	r5, [r4, #100]	; 0x64
 8011154:	f000 f847 	bl	80111e6 <__retarget_lock_init_recursive>
 8011158:	f7ff ff96 	bl	8011088 <__sfp_lock_release>
 801115c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011164:	6025      	str	r5, [r4, #0]
 8011166:	61a5      	str	r5, [r4, #24]
 8011168:	2208      	movs	r2, #8
 801116a:	4629      	mov	r1, r5
 801116c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011170:	f7fd fb7a 	bl	800e868 <memset>
 8011174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801117c:	4620      	mov	r0, r4
 801117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011180:	3468      	adds	r4, #104	; 0x68
 8011182:	e7d9      	b.n	8011138 <__sfp+0x1c>
 8011184:	2104      	movs	r1, #4
 8011186:	4638      	mov	r0, r7
 8011188:	f7ff ff62 	bl	8011050 <__sfmoreglue>
 801118c:	4604      	mov	r4, r0
 801118e:	6030      	str	r0, [r6, #0]
 8011190:	2800      	cmp	r0, #0
 8011192:	d1d5      	bne.n	8011140 <__sfp+0x24>
 8011194:	f7ff ff78 	bl	8011088 <__sfp_lock_release>
 8011198:	230c      	movs	r3, #12
 801119a:	603b      	str	r3, [r7, #0]
 801119c:	e7ee      	b.n	801117c <__sfp+0x60>
 801119e:	bf00      	nop
 80111a0:	0801b894 	.word	0x0801b894
 80111a4:	ffff0001 	.word	0xffff0001

080111a8 <_fwalk_reent>:
 80111a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ac:	4606      	mov	r6, r0
 80111ae:	4688      	mov	r8, r1
 80111b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111b4:	2700      	movs	r7, #0
 80111b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111ba:	f1b9 0901 	subs.w	r9, r9, #1
 80111be:	d505      	bpl.n	80111cc <_fwalk_reent+0x24>
 80111c0:	6824      	ldr	r4, [r4, #0]
 80111c2:	2c00      	cmp	r4, #0
 80111c4:	d1f7      	bne.n	80111b6 <_fwalk_reent+0xe>
 80111c6:	4638      	mov	r0, r7
 80111c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111cc:	89ab      	ldrh	r3, [r5, #12]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d907      	bls.n	80111e2 <_fwalk_reent+0x3a>
 80111d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111d6:	3301      	adds	r3, #1
 80111d8:	d003      	beq.n	80111e2 <_fwalk_reent+0x3a>
 80111da:	4629      	mov	r1, r5
 80111dc:	4630      	mov	r0, r6
 80111de:	47c0      	blx	r8
 80111e0:	4307      	orrs	r7, r0
 80111e2:	3568      	adds	r5, #104	; 0x68
 80111e4:	e7e9      	b.n	80111ba <_fwalk_reent+0x12>

080111e6 <__retarget_lock_init_recursive>:
 80111e6:	4770      	bx	lr

080111e8 <__retarget_lock_acquire_recursive>:
 80111e8:	4770      	bx	lr

080111ea <__retarget_lock_release_recursive>:
 80111ea:	4770      	bx	lr

080111ec <__swhatbuf_r>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	460e      	mov	r6, r1
 80111f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f4:	2900      	cmp	r1, #0
 80111f6:	b096      	sub	sp, #88	; 0x58
 80111f8:	4614      	mov	r4, r2
 80111fa:	461d      	mov	r5, r3
 80111fc:	da07      	bge.n	801120e <__swhatbuf_r+0x22>
 80111fe:	2300      	movs	r3, #0
 8011200:	602b      	str	r3, [r5, #0]
 8011202:	89b3      	ldrh	r3, [r6, #12]
 8011204:	061a      	lsls	r2, r3, #24
 8011206:	d410      	bmi.n	801122a <__swhatbuf_r+0x3e>
 8011208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801120c:	e00e      	b.n	801122c <__swhatbuf_r+0x40>
 801120e:	466a      	mov	r2, sp
 8011210:	f000 f902 	bl	8011418 <_fstat_r>
 8011214:	2800      	cmp	r0, #0
 8011216:	dbf2      	blt.n	80111fe <__swhatbuf_r+0x12>
 8011218:	9a01      	ldr	r2, [sp, #4]
 801121a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801121e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011222:	425a      	negs	r2, r3
 8011224:	415a      	adcs	r2, r3
 8011226:	602a      	str	r2, [r5, #0]
 8011228:	e7ee      	b.n	8011208 <__swhatbuf_r+0x1c>
 801122a:	2340      	movs	r3, #64	; 0x40
 801122c:	2000      	movs	r0, #0
 801122e:	6023      	str	r3, [r4, #0]
 8011230:	b016      	add	sp, #88	; 0x58
 8011232:	bd70      	pop	{r4, r5, r6, pc}

08011234 <__smakebuf_r>:
 8011234:	898b      	ldrh	r3, [r1, #12]
 8011236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011238:	079d      	lsls	r5, r3, #30
 801123a:	4606      	mov	r6, r0
 801123c:	460c      	mov	r4, r1
 801123e:	d507      	bpl.n	8011250 <__smakebuf_r+0x1c>
 8011240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	2301      	movs	r3, #1
 801124a:	6163      	str	r3, [r4, #20]
 801124c:	b002      	add	sp, #8
 801124e:	bd70      	pop	{r4, r5, r6, pc}
 8011250:	ab01      	add	r3, sp, #4
 8011252:	466a      	mov	r2, sp
 8011254:	f7ff ffca 	bl	80111ec <__swhatbuf_r>
 8011258:	9900      	ldr	r1, [sp, #0]
 801125a:	4605      	mov	r5, r0
 801125c:	4630      	mov	r0, r6
 801125e:	f7ff f987 	bl	8010570 <_malloc_r>
 8011262:	b948      	cbnz	r0, 8011278 <__smakebuf_r+0x44>
 8011264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011268:	059a      	lsls	r2, r3, #22
 801126a:	d4ef      	bmi.n	801124c <__smakebuf_r+0x18>
 801126c:	f023 0303 	bic.w	r3, r3, #3
 8011270:	f043 0302 	orr.w	r3, r3, #2
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	e7e3      	b.n	8011240 <__smakebuf_r+0xc>
 8011278:	4b0d      	ldr	r3, [pc, #52]	; (80112b0 <__smakebuf_r+0x7c>)
 801127a:	62b3      	str	r3, [r6, #40]	; 0x28
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	6020      	str	r0, [r4, #0]
 8011280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011284:	81a3      	strh	r3, [r4, #12]
 8011286:	9b00      	ldr	r3, [sp, #0]
 8011288:	6163      	str	r3, [r4, #20]
 801128a:	9b01      	ldr	r3, [sp, #4]
 801128c:	6120      	str	r0, [r4, #16]
 801128e:	b15b      	cbz	r3, 80112a8 <__smakebuf_r+0x74>
 8011290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011294:	4630      	mov	r0, r6
 8011296:	f000 f8d1 	bl	801143c <_isatty_r>
 801129a:	b128      	cbz	r0, 80112a8 <__smakebuf_r+0x74>
 801129c:	89a3      	ldrh	r3, [r4, #12]
 801129e:	f023 0303 	bic.w	r3, r3, #3
 80112a2:	f043 0301 	orr.w	r3, r3, #1
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	89a0      	ldrh	r0, [r4, #12]
 80112aa:	4305      	orrs	r5, r0
 80112ac:	81a5      	strh	r5, [r4, #12]
 80112ae:	e7cd      	b.n	801124c <__smakebuf_r+0x18>
 80112b0:	08011045 	.word	0x08011045

080112b4 <_malloc_usable_size_r>:
 80112b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112b8:	1f18      	subs	r0, r3, #4
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	bfbc      	itt	lt
 80112be:	580b      	ldrlt	r3, [r1, r0]
 80112c0:	18c0      	addlt	r0, r0, r3
 80112c2:	4770      	bx	lr

080112c4 <_raise_r>:
 80112c4:	291f      	cmp	r1, #31
 80112c6:	b538      	push	{r3, r4, r5, lr}
 80112c8:	4604      	mov	r4, r0
 80112ca:	460d      	mov	r5, r1
 80112cc:	d904      	bls.n	80112d8 <_raise_r+0x14>
 80112ce:	2316      	movs	r3, #22
 80112d0:	6003      	str	r3, [r0, #0]
 80112d2:	f04f 30ff 	mov.w	r0, #4294967295
 80112d6:	bd38      	pop	{r3, r4, r5, pc}
 80112d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112da:	b112      	cbz	r2, 80112e2 <_raise_r+0x1e>
 80112dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112e0:	b94b      	cbnz	r3, 80112f6 <_raise_r+0x32>
 80112e2:	4620      	mov	r0, r4
 80112e4:	f000 f830 	bl	8011348 <_getpid_r>
 80112e8:	462a      	mov	r2, r5
 80112ea:	4601      	mov	r1, r0
 80112ec:	4620      	mov	r0, r4
 80112ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f2:	f000 b817 	b.w	8011324 <_kill_r>
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d00a      	beq.n	8011310 <_raise_r+0x4c>
 80112fa:	1c59      	adds	r1, r3, #1
 80112fc:	d103      	bne.n	8011306 <_raise_r+0x42>
 80112fe:	2316      	movs	r3, #22
 8011300:	6003      	str	r3, [r0, #0]
 8011302:	2001      	movs	r0, #1
 8011304:	e7e7      	b.n	80112d6 <_raise_r+0x12>
 8011306:	2400      	movs	r4, #0
 8011308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801130c:	4628      	mov	r0, r5
 801130e:	4798      	blx	r3
 8011310:	2000      	movs	r0, #0
 8011312:	e7e0      	b.n	80112d6 <_raise_r+0x12>

08011314 <raise>:
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <raise+0xc>)
 8011316:	4601      	mov	r1, r0
 8011318:	6818      	ldr	r0, [r3, #0]
 801131a:	f7ff bfd3 	b.w	80112c4 <_raise_r>
 801131e:	bf00      	nop
 8011320:	24000378 	.word	0x24000378

08011324 <_kill_r>:
 8011324:	b538      	push	{r3, r4, r5, lr}
 8011326:	4d07      	ldr	r5, [pc, #28]	; (8011344 <_kill_r+0x20>)
 8011328:	2300      	movs	r3, #0
 801132a:	4604      	mov	r4, r0
 801132c:	4608      	mov	r0, r1
 801132e:	4611      	mov	r1, r2
 8011330:	602b      	str	r3, [r5, #0]
 8011332:	f7f2 ff23 	bl	800417c <_kill>
 8011336:	1c43      	adds	r3, r0, #1
 8011338:	d102      	bne.n	8011340 <_kill_r+0x1c>
 801133a:	682b      	ldr	r3, [r5, #0]
 801133c:	b103      	cbz	r3, 8011340 <_kill_r+0x1c>
 801133e:	6023      	str	r3, [r4, #0]
 8011340:	bd38      	pop	{r3, r4, r5, pc}
 8011342:	bf00      	nop
 8011344:	24010dc8 	.word	0x24010dc8

08011348 <_getpid_r>:
 8011348:	f7f2 bf16 	b.w	8004178 <_getpid>

0801134c <__sread>:
 801134c:	b510      	push	{r4, lr}
 801134e:	460c      	mov	r4, r1
 8011350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011354:	f000 f894 	bl	8011480 <_read_r>
 8011358:	2800      	cmp	r0, #0
 801135a:	bfab      	itete	ge
 801135c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801135e:	89a3      	ldrhlt	r3, [r4, #12]
 8011360:	181b      	addge	r3, r3, r0
 8011362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011366:	bfac      	ite	ge
 8011368:	6563      	strge	r3, [r4, #84]	; 0x54
 801136a:	81a3      	strhlt	r3, [r4, #12]
 801136c:	bd10      	pop	{r4, pc}

0801136e <__swrite>:
 801136e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011372:	461f      	mov	r7, r3
 8011374:	898b      	ldrh	r3, [r1, #12]
 8011376:	05db      	lsls	r3, r3, #23
 8011378:	4605      	mov	r5, r0
 801137a:	460c      	mov	r4, r1
 801137c:	4616      	mov	r6, r2
 801137e:	d505      	bpl.n	801138c <__swrite+0x1e>
 8011380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011384:	2302      	movs	r3, #2
 8011386:	2200      	movs	r2, #0
 8011388:	f000 f868 	bl	801145c <_lseek_r>
 801138c:	89a3      	ldrh	r3, [r4, #12]
 801138e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011396:	81a3      	strh	r3, [r4, #12]
 8011398:	4632      	mov	r2, r6
 801139a:	463b      	mov	r3, r7
 801139c:	4628      	mov	r0, r5
 801139e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113a2:	f000 b817 	b.w	80113d4 <_write_r>

080113a6 <__sseek>:
 80113a6:	b510      	push	{r4, lr}
 80113a8:	460c      	mov	r4, r1
 80113aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ae:	f000 f855 	bl	801145c <_lseek_r>
 80113b2:	1c43      	adds	r3, r0, #1
 80113b4:	89a3      	ldrh	r3, [r4, #12]
 80113b6:	bf15      	itete	ne
 80113b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80113ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80113be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113c2:	81a3      	strheq	r3, [r4, #12]
 80113c4:	bf18      	it	ne
 80113c6:	81a3      	strhne	r3, [r4, #12]
 80113c8:	bd10      	pop	{r4, pc}

080113ca <__sclose>:
 80113ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ce:	f000 b813 	b.w	80113f8 <_close_r>
	...

080113d4 <_write_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4d07      	ldr	r5, [pc, #28]	; (80113f4 <_write_r+0x20>)
 80113d8:	4604      	mov	r4, r0
 80113da:	4608      	mov	r0, r1
 80113dc:	4611      	mov	r1, r2
 80113de:	2200      	movs	r2, #0
 80113e0:	602a      	str	r2, [r5, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	f7f2 fee8 	bl	80041b8 <_write>
 80113e8:	1c43      	adds	r3, r0, #1
 80113ea:	d102      	bne.n	80113f2 <_write_r+0x1e>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	b103      	cbz	r3, 80113f2 <_write_r+0x1e>
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	24010dc8 	.word	0x24010dc8

080113f8 <_close_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4d06      	ldr	r5, [pc, #24]	; (8011414 <_close_r+0x1c>)
 80113fc:	2300      	movs	r3, #0
 80113fe:	4604      	mov	r4, r0
 8011400:	4608      	mov	r0, r1
 8011402:	602b      	str	r3, [r5, #0]
 8011404:	f7f2 fee6 	bl	80041d4 <_close>
 8011408:	1c43      	adds	r3, r0, #1
 801140a:	d102      	bne.n	8011412 <_close_r+0x1a>
 801140c:	682b      	ldr	r3, [r5, #0]
 801140e:	b103      	cbz	r3, 8011412 <_close_r+0x1a>
 8011410:	6023      	str	r3, [r4, #0]
 8011412:	bd38      	pop	{r3, r4, r5, pc}
 8011414:	24010dc8 	.word	0x24010dc8

08011418 <_fstat_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4d07      	ldr	r5, [pc, #28]	; (8011438 <_fstat_r+0x20>)
 801141c:	2300      	movs	r3, #0
 801141e:	4604      	mov	r4, r0
 8011420:	4608      	mov	r0, r1
 8011422:	4611      	mov	r1, r2
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	f7f2 fed9 	bl	80041dc <_fstat>
 801142a:	1c43      	adds	r3, r0, #1
 801142c:	d102      	bne.n	8011434 <_fstat_r+0x1c>
 801142e:	682b      	ldr	r3, [r5, #0]
 8011430:	b103      	cbz	r3, 8011434 <_fstat_r+0x1c>
 8011432:	6023      	str	r3, [r4, #0]
 8011434:	bd38      	pop	{r3, r4, r5, pc}
 8011436:	bf00      	nop
 8011438:	24010dc8 	.word	0x24010dc8

0801143c <_isatty_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	4d06      	ldr	r5, [pc, #24]	; (8011458 <_isatty_r+0x1c>)
 8011440:	2300      	movs	r3, #0
 8011442:	4604      	mov	r4, r0
 8011444:	4608      	mov	r0, r1
 8011446:	602b      	str	r3, [r5, #0]
 8011448:	f7f2 fece 	bl	80041e8 <_isatty>
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	d102      	bne.n	8011456 <_isatty_r+0x1a>
 8011450:	682b      	ldr	r3, [r5, #0]
 8011452:	b103      	cbz	r3, 8011456 <_isatty_r+0x1a>
 8011454:	6023      	str	r3, [r4, #0]
 8011456:	bd38      	pop	{r3, r4, r5, pc}
 8011458:	24010dc8 	.word	0x24010dc8

0801145c <_lseek_r>:
 801145c:	b538      	push	{r3, r4, r5, lr}
 801145e:	4d07      	ldr	r5, [pc, #28]	; (801147c <_lseek_r+0x20>)
 8011460:	4604      	mov	r4, r0
 8011462:	4608      	mov	r0, r1
 8011464:	4611      	mov	r1, r2
 8011466:	2200      	movs	r2, #0
 8011468:	602a      	str	r2, [r5, #0]
 801146a:	461a      	mov	r2, r3
 801146c:	f7f2 febe 	bl	80041ec <_lseek>
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	d102      	bne.n	801147a <_lseek_r+0x1e>
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	b103      	cbz	r3, 801147a <_lseek_r+0x1e>
 8011478:	6023      	str	r3, [r4, #0]
 801147a:	bd38      	pop	{r3, r4, r5, pc}
 801147c:	24010dc8 	.word	0x24010dc8

08011480 <_read_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4d07      	ldr	r5, [pc, #28]	; (80114a0 <_read_r+0x20>)
 8011484:	4604      	mov	r4, r0
 8011486:	4608      	mov	r0, r1
 8011488:	4611      	mov	r1, r2
 801148a:	2200      	movs	r2, #0
 801148c:	602a      	str	r2, [r5, #0]
 801148e:	461a      	mov	r2, r3
 8011490:	f7f2 fe84 	bl	800419c <_read>
 8011494:	1c43      	adds	r3, r0, #1
 8011496:	d102      	bne.n	801149e <_read_r+0x1e>
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	b103      	cbz	r3, 801149e <_read_r+0x1e>
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	bd38      	pop	{r3, r4, r5, pc}
 80114a0:	24010dc8 	.word	0x24010dc8
 80114a4:	00000000 	.word	0x00000000

080114a8 <exp>:
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	b087      	sub	sp, #28
 80114ae:	ed8d 0b00 	vstr	d0, [sp]
 80114b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114b6:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 80114ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80114be:	18f7      	adds	r7, r6, r3
 80114c0:	2f3e      	cmp	r7, #62	; 0x3e
 80114c2:	d929      	bls.n	8011518 <exp+0x70>
 80114c4:	2f00      	cmp	r7, #0
 80114c6:	da08      	bge.n	80114da <exp+0x32>
 80114c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80114cc:	ed9d 7b00 	vldr	d7, [sp]
 80114d0:	ee37 0b00 	vadd.f64	d0, d7, d0
 80114d4:	b007      	add	sp, #28
 80114d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114da:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80114de:	d91a      	bls.n	8011516 <exp+0x6e>
 80114e0:	4b65      	ldr	r3, [pc, #404]	; (8011678 <exp+0x1d0>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	4299      	cmp	r1, r3
 80114e6:	bf08      	it	eq
 80114e8:	4290      	cmpeq	r0, r2
 80114ea:	f000 80b6 	beq.w	801165a <exp+0x1b2>
 80114ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80114f2:	429e      	cmp	r6, r3
 80114f4:	d0e8      	beq.n	80114c8 <exp+0x20>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	f171 0300 	sbcs.w	r3, r1, #0
 80114fc:	f04f 0000 	mov.w	r0, #0
 8011500:	da04      	bge.n	801150c <exp+0x64>
 8011502:	b007      	add	sp, #28
 8011504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	f000 b9f6 	b.w	80118f8 <__math_uflow>
 801150c:	b007      	add	sp, #28
 801150e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011512:	f000 b9f9 	b.w	8011908 <__math_oflow>
 8011516:	2600      	movs	r6, #0
 8011518:	4858      	ldr	r0, [pc, #352]	; (801167c <exp+0x1d4>)
 801151a:	ed9d 3b00 	vldr	d3, [sp]
 801151e:	ed90 6b02 	vldr	d6, [r0, #8]
 8011522:	ed90 7b00 	vldr	d7, [r0]
 8011526:	eeb0 4b46 	vmov.f64	d4, d6
 801152a:	eea7 4b03 	vfma.f64	d4, d7, d3
 801152e:	ee34 7b46 	vsub.f64	d7, d4, d6
 8011532:	ed90 6b04 	vldr	d6, [r0, #16]
 8011536:	ee14 ca10 	vmov	ip, s8
 801153a:	eeb0 4b43 	vmov.f64	d4, d3
 801153e:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 8011542:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011546:	eeb0 6b44 	vmov.f64	d6, d4
 801154a:	ed90 4b06 	vldr	d4, [r0, #24]
 801154e:	1849      	adds	r1, r1, r1
 8011550:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 8011554:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011558:	eea4 6b07 	vfma.f64	d6, d4, d7
 801155c:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 8011560:	ee26 2b06 	vmul.f64	d2, d6, d6
 8011564:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8011568:	ed90 4b08 	vldr	d4, [r0, #32]
 801156c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011570:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 8011574:	eea3 4b06 	vfma.f64	d4, d3, d6
 8011578:	eea4 7b02 	vfma.f64	d7, d4, d2
 801157c:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 8011580:	ee22 2b02 	vmul.f64	d2, d2, d2
 8011584:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 8011588:	2700      	movs	r7, #0
 801158a:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 801158e:	eb17 0a08 	adds.w	sl, r7, r8
 8011592:	eea3 4b06 	vfma.f64	d4, d3, d6
 8011596:	eb4e 0b09 	adc.w	fp, lr, r9
 801159a:	eea2 7b04 	vfma.f64	d7, d2, d4
 801159e:	2e00      	cmp	r6, #0
 80115a0:	d156      	bne.n	8011650 <exp+0x1a8>
 80115a2:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80115a6:	4631      	mov	r1, r6
 80115a8:	ea50 0301 	orrs.w	r3, r0, r1
 80115ac:	d113      	bne.n	80115d6 <exp+0x12e>
 80115ae:	4a34      	ldr	r2, [pc, #208]	; (8011680 <exp+0x1d8>)
 80115b0:	eb1a 0407 	adds.w	r4, sl, r7
 80115b4:	eb4b 0502 	adc.w	r5, fp, r2
 80115b8:	ec45 4b10 	vmov	d0, r4, r5
 80115bc:	ec45 4b16 	vmov	d6, r4, r5
 80115c0:	eea7 0b06 	vfma.f64	d0, d7, d6
 80115c4:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8011660 <exp+0x1b8>
 80115c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115cc:	b007      	add	sp, #28
 80115ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d2:	f000 b9d1 	b.w	8011978 <__math_check_oflow>
 80115d6:	4a2b      	ldr	r2, [pc, #172]	; (8011684 <exp+0x1dc>)
 80115d8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80115dc:	2100      	movs	r1, #0
 80115de:	eb1a 0301 	adds.w	r3, sl, r1
 80115e2:	ee05 3a10 	vmov	s10, r3
 80115e6:	eb4b 0302 	adc.w	r3, fp, r2
 80115ea:	ee05 3a90 	vmov	s11, r3
 80115ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115f2:	ee35 6b07 	vadd.f64	d6, d5, d7
 80115f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80115fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fe:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011668 <exp+0x1c0>
 8011602:	d51e      	bpl.n	8011642 <exp+0x19a>
 8011604:	ee35 5b46 	vsub.f64	d5, d5, d6
 8011608:	ee36 3b04 	vadd.f64	d3, d6, d4
 801160c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011610:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011614:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011618:	ee36 6b07 	vadd.f64	d6, d6, d7
 801161c:	ee36 6b03 	vadd.f64	d6, d6, d3
 8011620:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011624:	eeb5 6b40 	vcmp.f64	d6, #0.0
 8011628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162c:	d101      	bne.n	8011632 <exp+0x18a>
 801162e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8011670 <exp+0x1c8>
 8011632:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011636:	ed9d 7b02 	vldr	d7, [sp, #8]
 801163a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801163e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011642:	ee26 0b00 	vmul.f64	d0, d6, d0
 8011646:	b007      	add	sp, #28
 8011648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164c:	f000 b98b 	b.w	8011966 <__math_check_uflow>
 8011650:	ec4b ab10 	vmov	d0, sl, fp
 8011654:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011658:	e73c      	b.n	80114d4 <exp+0x2c>
 801165a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011670 <exp+0x1c8>
 801165e:	e739      	b.n	80114d4 <exp+0x2c>
 8011660:	00000000 	.word	0x00000000
 8011664:	7f000000 	.word	0x7f000000
 8011668:	00000000 	.word	0x00000000
 801166c:	00100000 	.word	0x00100000
	...
 8011678:	fff00000 	.word	0xfff00000
 801167c:	0801bc78 	.word	0x0801bc78
 8011680:	c0f00000 	.word	0xc0f00000
 8011684:	3fe00000 	.word	0x3fe00000

08011688 <log>:
 8011688:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801168c:	ed2d 8b02 	vpush	{d8}
 8011690:	b082      	sub	sp, #8
 8011692:	ed8d 0b00 	vstr	d0, [sp]
 8011696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801169a:	2600      	movs	r6, #0
 801169c:	1994      	adds	r4, r2, r6
 801169e:	4e80      	ldr	r6, [pc, #512]	; (80118a0 <log+0x218>)
 80116a0:	4f80      	ldr	r7, [pc, #512]	; (80118a4 <log+0x21c>)
 80116a2:	eb43 0506 	adc.w	r5, r3, r6
 80116a6:	42af      	cmp	r7, r5
 80116a8:	f04f 36ff 	mov.w	r6, #4294967295
 80116ac:	bf08      	it	eq
 80116ae:	42a6      	cmpeq	r6, r4
 80116b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80116b4:	d363      	bcc.n	801177e <log+0xf6>
 80116b6:	497c      	ldr	r1, [pc, #496]	; (80118a8 <log+0x220>)
 80116b8:	2000      	movs	r0, #0
 80116ba:	428b      	cmp	r3, r1
 80116bc:	bf08      	it	eq
 80116be:	4282      	cmpeq	r2, r0
 80116c0:	f000 80de 	beq.w	8011880 <log+0x1f8>
 80116c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80116c8:	ee30 7b47 	vsub.f64	d7, d0, d7
 80116cc:	4b77      	ldr	r3, [pc, #476]	; (80118ac <log+0x224>)
 80116ce:	ee27 1b07 	vmul.f64	d1, d7, d7
 80116d2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80116d6:	ee27 3b01 	vmul.f64	d3, d7, d1
 80116da:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 80116de:	eea6 4b07 	vfma.f64	d4, d6, d7
 80116e2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80116e6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80116ea:	eea6 4b01 	vfma.f64	d4, d6, d1
 80116ee:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80116f2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80116f6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80116fa:	eea5 6b01 	vfma.f64	d6, d5, d1
 80116fe:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8011702:	eeb0 2b46 	vmov.f64	d2, d6
 8011706:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 801170a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801170e:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 8011712:	eea5 6b01 	vfma.f64	d6, d5, d1
 8011716:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 801171a:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 801171e:	eea5 6b03 	vfma.f64	d6, d5, d3
 8011722:	eea6 2b03 	vfma.f64	d2, d6, d3
 8011726:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8011888 <log+0x200>
 801172a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801172e:	eeb0 2b47 	vmov.f64	d2, d7
 8011732:	eea7 2b06 	vfma.f64	d2, d7, d6
 8011736:	eea7 2b46 	vfms.f64	d2, d7, d6
 801173a:	eeb0 6b47 	vmov.f64	d6, d7
 801173e:	ee37 8b42 	vsub.f64	d8, d7, d2
 8011742:	ee22 0b02 	vmul.f64	d0, d2, d2
 8011746:	eea0 6b01 	vfma.f64	d6, d0, d1
 801174a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801174e:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011752:	eea0 5b01 	vfma.f64	d5, d0, d1
 8011756:	ee21 1b08 	vmul.f64	d1, d1, d8
 801175a:	eea1 5b07 	vfma.f64	d5, d1, d7
 801175e:	eeb0 7b45 	vmov.f64	d7, d5
 8011762:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011766:	ee36 7b07 	vadd.f64	d7, d6, d7
 801176a:	ed8d 7b00 	vstr	d7, [sp]
 801176e:	ed9d 0b00 	vldr	d0, [sp]
 8011772:	b002      	add	sp, #8
 8011774:	ecbd 8b02 	vpop	{d8}
 8011778:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801177c:	4770      	bx	lr
 801177e:	f1ac 0510 	sub.w	r5, ip, #16
 8011782:	f647 74df 	movw	r4, #32735	; 0x7fdf
 8011786:	42a5      	cmp	r5, r4
 8011788:	d930      	bls.n	80117ec <log+0x164>
 801178a:	1890      	adds	r0, r2, r2
 801178c:	eb43 0103 	adc.w	r1, r3, r3
 8011790:	4301      	orrs	r1, r0
 8011792:	d107      	bne.n	80117a4 <log+0x11c>
 8011794:	2001      	movs	r0, #1
 8011796:	b002      	add	sp, #8
 8011798:	ecbd 8b02 	vpop	{d8}
 801179c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80117a0:	f000 b8ba 	b.w	8011918 <__math_divzero>
 80117a4:	4942      	ldr	r1, [pc, #264]	; (80118b0 <log+0x228>)
 80117a6:	2000      	movs	r0, #0
 80117a8:	428b      	cmp	r3, r1
 80117aa:	bf08      	it	eq
 80117ac:	4282      	cmpeq	r2, r0
 80117ae:	d0de      	beq.n	801176e <log+0xe6>
 80117b0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80117b4:	d104      	bne.n	80117c0 <log+0x138>
 80117b6:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 80117ba:	ea31 010c 	bics.w	r1, r1, ip
 80117be:	d108      	bne.n	80117d2 <log+0x14a>
 80117c0:	ed9d 0b00 	vldr	d0, [sp]
 80117c4:	b002      	add	sp, #8
 80117c6:	ecbd 8b02 	vpop	{d8}
 80117ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80117ce:	f000 b8bb 	b.w	8011948 <__math_invalid>
 80117d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011890 <log+0x208>
 80117d6:	ed9d 6b00 	vldr	d6, [sp]
 80117da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117de:	ec56 5b17 	vmov	r5, r6, d7
 80117e2:	4834      	ldr	r0, [pc, #208]	; (80118b4 <log+0x22c>)
 80117e4:	2400      	movs	r4, #0
 80117e6:	192a      	adds	r2, r5, r4
 80117e8:	eb46 0300 	adc.w	r3, r6, r0
 80117ec:	2100      	movs	r1, #0
 80117ee:	1851      	adds	r1, r2, r1
 80117f0:	4931      	ldr	r1, [pc, #196]	; (80118b8 <log+0x230>)
 80117f2:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80117f6:	eb43 0101 	adc.w	r1, r3, r1
 80117fa:	0d0c      	lsrs	r4, r1, #20
 80117fc:	2500      	movs	r5, #0
 80117fe:	ebb2 0805 	subs.w	r8, r2, r5
 8011802:	ea4f 5404 	mov.w	r4, r4, lsl #20
 8011806:	eb63 0904 	sbc.w	r9, r3, r4
 801180a:	4b28      	ldr	r3, [pc, #160]	; (80118ac <log+0x224>)
 801180c:	f3c1 3046 	ubfx	r0, r1, #13, #7
 8011810:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8011814:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 8011818:	ec49 8b16 	vmov	d6, r8, r9
 801181c:	1509      	asrs	r1, r1, #20
 801181e:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011822:	ee07 1a90 	vmov	s15, r1
 8011826:	ee24 1b04 	vmul.f64	d1, d4, d4
 801182a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801182e:	ed93 5b00 	vldr	d5, [r3]
 8011832:	ee24 0b01 	vmul.f64	d0, d4, d1
 8011836:	ed93 3b02 	vldr	d3, [r3, #8]
 801183a:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 801183e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011842:	ee34 5b07 	vadd.f64	d5, d4, d7
 8011846:	ee37 7b45 	vsub.f64	d7, d7, d5
 801184a:	ee37 7b04 	vadd.f64	d7, d7, d4
 801184e:	eea3 7b06 	vfma.f64	d7, d3, d6
 8011852:	ed93 6b04 	vldr	d6, [r3, #16]
 8011856:	ed93 3b08 	vldr	d3, [r3, #32]
 801185a:	eea6 7b01 	vfma.f64	d7, d6, d1
 801185e:	ed93 6b06 	vldr	d6, [r3, #24]
 8011862:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8011866:	eea3 6b04 	vfma.f64	d6, d3, d4
 801186a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801186e:	eea2 3b04 	vfma.f64	d3, d2, d4
 8011872:	eea3 6b01 	vfma.f64	d6, d3, d1
 8011876:	eea0 7b06 	vfma.f64	d7, d0, d6
 801187a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801187e:	e774      	b.n	801176a <log+0xe2>
 8011880:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8011898 <log+0x210>
 8011884:	e771      	b.n	801176a <log+0xe2>
 8011886:	bf00      	nop
 8011888:	00000000 	.word	0x00000000
 801188c:	41a00000 	.word	0x41a00000
 8011890:	00000000 	.word	0x00000000
 8011894:	43300000 	.word	0x43300000
	...
 80118a0:	c0120000 	.word	0xc0120000
 80118a4:	000308ff 	.word	0x000308ff
 80118a8:	3ff00000 	.word	0x3ff00000
 80118ac:	0801c4e8 	.word	0x0801c4e8
 80118b0:	7ff00000 	.word	0x7ff00000
 80118b4:	fcc00000 	.word	0xfcc00000
 80118b8:	c01a0000 	.word	0xc01a0000

080118bc <with_errno>:
 80118bc:	b513      	push	{r0, r1, r4, lr}
 80118be:	4604      	mov	r4, r0
 80118c0:	ed8d 0b00 	vstr	d0, [sp]
 80118c4:	f7fc ff98 	bl	800e7f8 <__errno>
 80118c8:	ed9d 0b00 	vldr	d0, [sp]
 80118cc:	6004      	str	r4, [r0, #0]
 80118ce:	b002      	add	sp, #8
 80118d0:	bd10      	pop	{r4, pc}

080118d2 <xflow>:
 80118d2:	b082      	sub	sp, #8
 80118d4:	b158      	cbz	r0, 80118ee <xflow+0x1c>
 80118d6:	eeb1 7b40 	vneg.f64	d7, d0
 80118da:	ed8d 7b00 	vstr	d7, [sp]
 80118de:	ed9d 7b00 	vldr	d7, [sp]
 80118e2:	2022      	movs	r0, #34	; 0x22
 80118e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80118e8:	b002      	add	sp, #8
 80118ea:	f7ff bfe7 	b.w	80118bc <with_errno>
 80118ee:	eeb0 7b40 	vmov.f64	d7, d0
 80118f2:	e7f2      	b.n	80118da <xflow+0x8>
 80118f4:	0000      	movs	r0, r0
	...

080118f8 <__math_uflow>:
 80118f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011900 <__math_uflow+0x8>
 80118fc:	f7ff bfe9 	b.w	80118d2 <xflow>
 8011900:	00000000 	.word	0x00000000
 8011904:	10000000 	.word	0x10000000

08011908 <__math_oflow>:
 8011908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011910 <__math_oflow+0x8>
 801190c:	f7ff bfe1 	b.w	80118d2 <xflow>
 8011910:	00000000 	.word	0x00000000
 8011914:	70000000 	.word	0x70000000

08011918 <__math_divzero>:
 8011918:	b082      	sub	sp, #8
 801191a:	2800      	cmp	r0, #0
 801191c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011920:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011924:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011928:	ed8d 7b00 	vstr	d7, [sp]
 801192c:	ed9d 0b00 	vldr	d0, [sp]
 8011930:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011940 <__math_divzero+0x28>
 8011934:	2022      	movs	r0, #34	; 0x22
 8011936:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801193a:	b002      	add	sp, #8
 801193c:	f7ff bfbe 	b.w	80118bc <with_errno>
	...

08011948 <__math_invalid>:
 8011948:	eeb0 7b40 	vmov.f64	d7, d0
 801194c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011958:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801195c:	d602      	bvs.n	8011964 <__math_invalid+0x1c>
 801195e:	2021      	movs	r0, #33	; 0x21
 8011960:	f7ff bfac 	b.w	80118bc <with_errno>
 8011964:	4770      	bx	lr

08011966 <__math_check_uflow>:
 8011966:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	d102      	bne.n	8011976 <__math_check_uflow+0x10>
 8011970:	2022      	movs	r0, #34	; 0x22
 8011972:	f7ff bfa3 	b.w	80118bc <with_errno>
 8011976:	4770      	bx	lr

08011978 <__math_check_oflow>:
 8011978:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011998 <__math_check_oflow+0x20>
 801197c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011980:	eeb4 7b46 	vcmp.f64	d7, d6
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	dd02      	ble.n	8011990 <__math_check_oflow+0x18>
 801198a:	2022      	movs	r0, #34	; 0x22
 801198c:	f7ff bf96 	b.w	80118bc <with_errno>
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	f3af 8000 	nop.w
 8011998:	ffffffff 	.word	0xffffffff
 801199c:	7fefffff 	.word	0x7fefffff

080119a0 <cos>:
 80119a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119a2:	eeb0 7b40 	vmov.f64	d7, d0
 80119a6:	ee17 3a90 	vmov	r3, s15
 80119aa:	4a1f      	ldr	r2, [pc, #124]	; (8011a28 <cos+0x88>)
 80119ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119b0:	4293      	cmp	r3, r2
 80119b2:	dc04      	bgt.n	80119be <cos+0x1e>
 80119b4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011a20 <cos+0x80>
 80119b8:	f000 fa72 	bl	8011ea0 <__kernel_cos>
 80119bc:	e004      	b.n	80119c8 <cos+0x28>
 80119be:	4a1b      	ldr	r2, [pc, #108]	; (8011a2c <cos+0x8c>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	dd04      	ble.n	80119ce <cos+0x2e>
 80119c4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80119c8:	b005      	add	sp, #20
 80119ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80119ce:	4668      	mov	r0, sp
 80119d0:	f000 f926 	bl	8011c20 <__ieee754_rem_pio2>
 80119d4:	f000 0003 	and.w	r0, r0, #3
 80119d8:	2801      	cmp	r0, #1
 80119da:	d007      	beq.n	80119ec <cos+0x4c>
 80119dc:	2802      	cmp	r0, #2
 80119de:	d00e      	beq.n	80119fe <cos+0x5e>
 80119e0:	b9a0      	cbnz	r0, 8011a0c <cos+0x6c>
 80119e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119e6:	ed9d 0b00 	vldr	d0, [sp]
 80119ea:	e7e5      	b.n	80119b8 <cos+0x18>
 80119ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119f0:	ed9d 0b00 	vldr	d0, [sp]
 80119f4:	f000 fd40 	bl	8012478 <__kernel_sin>
 80119f8:	eeb1 0b40 	vneg.f64	d0, d0
 80119fc:	e7e4      	b.n	80119c8 <cos+0x28>
 80119fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a02:	ed9d 0b00 	vldr	d0, [sp]
 8011a06:	f000 fa4b 	bl	8011ea0 <__kernel_cos>
 8011a0a:	e7f5      	b.n	80119f8 <cos+0x58>
 8011a0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a10:	ed9d 0b00 	vldr	d0, [sp]
 8011a14:	2001      	movs	r0, #1
 8011a16:	f000 fd2f 	bl	8012478 <__kernel_sin>
 8011a1a:	e7d5      	b.n	80119c8 <cos+0x28>
 8011a1c:	f3af 8000 	nop.w
	...
 8011a28:	3fe921fb 	.word	0x3fe921fb
 8011a2c:	7fefffff 	.word	0x7fefffff

08011a30 <sin>:
 8011a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a32:	eeb0 7b40 	vmov.f64	d7, d0
 8011a36:	ee17 3a90 	vmov	r3, s15
 8011a3a:	4a1f      	ldr	r2, [pc, #124]	; (8011ab8 <sin+0x88>)
 8011a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a40:	4293      	cmp	r3, r2
 8011a42:	dc05      	bgt.n	8011a50 <sin+0x20>
 8011a44:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011ab0 <sin+0x80>
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f000 fd15 	bl	8012478 <__kernel_sin>
 8011a4e:	e004      	b.n	8011a5a <sin+0x2a>
 8011a50:	4a1a      	ldr	r2, [pc, #104]	; (8011abc <sin+0x8c>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	dd04      	ble.n	8011a60 <sin+0x30>
 8011a56:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011a5a:	b005      	add	sp, #20
 8011a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a60:	4668      	mov	r0, sp
 8011a62:	f000 f8dd 	bl	8011c20 <__ieee754_rem_pio2>
 8011a66:	f000 0003 	and.w	r0, r0, #3
 8011a6a:	2801      	cmp	r0, #1
 8011a6c:	d008      	beq.n	8011a80 <sin+0x50>
 8011a6e:	2802      	cmp	r0, #2
 8011a70:	d00d      	beq.n	8011a8e <sin+0x5e>
 8011a72:	b9b0      	cbnz	r0, 8011aa2 <sin+0x72>
 8011a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a78:	ed9d 0b00 	vldr	d0, [sp]
 8011a7c:	2001      	movs	r0, #1
 8011a7e:	e7e4      	b.n	8011a4a <sin+0x1a>
 8011a80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a84:	ed9d 0b00 	vldr	d0, [sp]
 8011a88:	f000 fa0a 	bl	8011ea0 <__kernel_cos>
 8011a8c:	e7e5      	b.n	8011a5a <sin+0x2a>
 8011a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a92:	ed9d 0b00 	vldr	d0, [sp]
 8011a96:	2001      	movs	r0, #1
 8011a98:	f000 fcee 	bl	8012478 <__kernel_sin>
 8011a9c:	eeb1 0b40 	vneg.f64	d0, d0
 8011aa0:	e7db      	b.n	8011a5a <sin+0x2a>
 8011aa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011aa6:	ed9d 0b00 	vldr	d0, [sp]
 8011aaa:	f000 f9f9 	bl	8011ea0 <__kernel_cos>
 8011aae:	e7f5      	b.n	8011a9c <sin+0x6c>
	...
 8011ab8:	3fe921fb 	.word	0x3fe921fb
 8011abc:	7fefffff 	.word	0x7fefffff

08011ac0 <log10>:
 8011ac0:	b508      	push	{r3, lr}
 8011ac2:	ed2d 8b02 	vpush	{d8}
 8011ac6:	eeb0 8b40 	vmov.f64	d8, d0
 8011aca:	f000 f831 	bl	8011b30 <__ieee754_log10>
 8011ace:	4b16      	ldr	r3, [pc, #88]	; (8011b28 <log10+0x68>)
 8011ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	d014      	beq.n	8011b02 <log10+0x42>
 8011ad8:	eeb4 8b48 	vcmp.f64	d8, d8
 8011adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae0:	d60f      	bvs.n	8011b02 <log10+0x42>
 8011ae2:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8011ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aea:	d80a      	bhi.n	8011b02 <log10+0x42>
 8011aec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af4:	d108      	bne.n	8011b08 <log10+0x48>
 8011af6:	f7fc fe7f 	bl	800e7f8 <__errno>
 8011afa:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011b20 <log10+0x60>
 8011afe:	2322      	movs	r3, #34	; 0x22
 8011b00:	6003      	str	r3, [r0, #0]
 8011b02:	ecbd 8b02 	vpop	{d8}
 8011b06:	bd08      	pop	{r3, pc}
 8011b08:	f7fc fe76 	bl	800e7f8 <__errno>
 8011b0c:	ecbd 8b02 	vpop	{d8}
 8011b10:	2321      	movs	r3, #33	; 0x21
 8011b12:	6003      	str	r3, [r0, #0]
 8011b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011b18:	4804      	ldr	r0, [pc, #16]	; (8011b2c <log10+0x6c>)
 8011b1a:	f000 bd85 	b.w	8012628 <nan>
 8011b1e:	bf00      	nop
 8011b20:	00000000 	.word	0x00000000
 8011b24:	fff00000 	.word	0xfff00000
 8011b28:	24000548 	.word	0x24000548
 8011b2c:	0801bb08 	.word	0x0801bb08

08011b30 <__ieee754_log10>:
 8011b30:	b510      	push	{r4, lr}
 8011b32:	ed2d 8b02 	vpush	{d8}
 8011b36:	b082      	sub	sp, #8
 8011b38:	ed8d 0b00 	vstr	d0, [sp]
 8011b3c:	9b01      	ldr	r3, [sp, #4]
 8011b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b42:	da28      	bge.n	8011b96 <__ieee754_log10+0x66>
 8011b44:	9900      	ldr	r1, [sp, #0]
 8011b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011b4a:	430a      	orrs	r2, r1
 8011b4c:	d109      	bne.n	8011b62 <__ieee754_log10+0x32>
 8011b4e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8011be8 <__ieee754_log10+0xb8>
 8011b52:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011bf0 <__ieee754_log10+0xc0>
 8011b56:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8011b5a:	b002      	add	sp, #8
 8011b5c:	ecbd 8b02 	vpop	{d8}
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	da04      	bge.n	8011b70 <__ieee754_log10+0x40>
 8011b66:	ed9d 7b00 	vldr	d7, [sp]
 8011b6a:	ee37 6b47 	vsub.f64	d6, d7, d7
 8011b6e:	e7f0      	b.n	8011b52 <__ieee754_log10+0x22>
 8011b70:	ed9d 6b00 	vldr	d6, [sp]
 8011b74:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011bf8 <__ieee754_log10+0xc8>
 8011b78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011b7c:	ed8d 7b00 	vstr	d7, [sp]
 8011b80:	9b01      	ldr	r3, [sp, #4]
 8011b82:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011b86:	4924      	ldr	r1, [pc, #144]	; (8011c18 <__ieee754_log10+0xe8>)
 8011b88:	428b      	cmp	r3, r1
 8011b8a:	dd06      	ble.n	8011b9a <__ieee754_log10+0x6a>
 8011b8c:	ed9d 7b00 	vldr	d7, [sp]
 8011b90:	ee37 0b07 	vadd.f64	d0, d7, d7
 8011b94:	e7e1      	b.n	8011b5a <__ieee754_log10+0x2a>
 8011b96:	2200      	movs	r2, #0
 8011b98:	e7f5      	b.n	8011b86 <__ieee754_log10+0x56>
 8011b9a:	1518      	asrs	r0, r3, #20
 8011b9c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011ba0:	4410      	add	r0, r2
 8011ba2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8011ba6:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8011baa:	ee08 3a10 	vmov	s16, r3
 8011bae:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8011bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bb6:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8011bba:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011bbe:	ec43 2b10 	vmov	d0, r2, r3
 8011bc2:	f7ff fd61 	bl	8011688 <log>
 8011bc6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011c00 <__ieee754_log10+0xd0>
 8011bca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011bce:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011c08 <__ieee754_log10+0xd8>
 8011bd2:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8011bd6:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011bda:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011c10 <__ieee754_log10+0xe0>
 8011bde:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011be2:	e7ba      	b.n	8011b5a <__ieee754_log10+0x2a>
 8011be4:	f3af 8000 	nop.w
 8011be8:	00000000 	.word	0x00000000
 8011bec:	c3500000 	.word	0xc3500000
	...
 8011bfc:	43500000 	.word	0x43500000
 8011c00:	1526e50e 	.word	0x1526e50e
 8011c04:	3fdbcb7b 	.word	0x3fdbcb7b
 8011c08:	11f12b36 	.word	0x11f12b36
 8011c0c:	3d59fef3 	.word	0x3d59fef3
 8011c10:	509f6000 	.word	0x509f6000
 8011c14:	3fd34413 	.word	0x3fd34413
 8011c18:	7fefffff 	.word	0x7fefffff
 8011c1c:	00000000 	.word	0x00000000

08011c20 <__ieee754_rem_pio2>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	eeb0 7b40 	vmov.f64	d7, d0
 8011c26:	ee17 5a90 	vmov	r5, s15
 8011c2a:	4b97      	ldr	r3, [pc, #604]	; (8011e88 <__ieee754_rem_pio2+0x268>)
 8011c2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011c30:	429e      	cmp	r6, r3
 8011c32:	b088      	sub	sp, #32
 8011c34:	4604      	mov	r4, r0
 8011c36:	dc07      	bgt.n	8011c48 <__ieee754_rem_pio2+0x28>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	ed84 0b00 	vstr	d0, [r4]
 8011c40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c44:	2000      	movs	r0, #0
 8011c46:	e01b      	b.n	8011c80 <__ieee754_rem_pio2+0x60>
 8011c48:	4b90      	ldr	r3, [pc, #576]	; (8011e8c <__ieee754_rem_pio2+0x26c>)
 8011c4a:	429e      	cmp	r6, r3
 8011c4c:	dc3b      	bgt.n	8011cc6 <__ieee754_rem_pio2+0xa6>
 8011c4e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011c52:	2d00      	cmp	r5, #0
 8011c54:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011e48 <__ieee754_rem_pio2+0x228>
 8011c58:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011c5c:	dd19      	ble.n	8011c92 <__ieee754_rem_pio2+0x72>
 8011c5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011c62:	429e      	cmp	r6, r3
 8011c64:	d00e      	beq.n	8011c84 <__ieee754_rem_pio2+0x64>
 8011c66:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011e50 <__ieee754_rem_pio2+0x230>
 8011c6a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011c6e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011c72:	ed84 5b00 	vstr	d5, [r4]
 8011c76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c7a:	ed84 7b02 	vstr	d7, [r4, #8]
 8011c7e:	2001      	movs	r0, #1
 8011c80:	b008      	add	sp, #32
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011e58 <__ieee754_rem_pio2+0x238>
 8011c88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c8c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011e60 <__ieee754_rem_pio2+0x240>
 8011c90:	e7eb      	b.n	8011c6a <__ieee754_rem_pio2+0x4a>
 8011c92:	429e      	cmp	r6, r3
 8011c94:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011c98:	d00e      	beq.n	8011cb8 <__ieee754_rem_pio2+0x98>
 8011c9a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011e50 <__ieee754_rem_pio2+0x230>
 8011c9e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011ca2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011ca6:	ed84 5b00 	vstr	d5, [r4]
 8011caa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011cae:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb2:	ed84 7b02 	vstr	d7, [r4, #8]
 8011cb6:	e7e3      	b.n	8011c80 <__ieee754_rem_pio2+0x60>
 8011cb8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011e58 <__ieee754_rem_pio2+0x238>
 8011cbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011cc0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011e60 <__ieee754_rem_pio2+0x240>
 8011cc4:	e7eb      	b.n	8011c9e <__ieee754_rem_pio2+0x7e>
 8011cc6:	4b72      	ldr	r3, [pc, #456]	; (8011e90 <__ieee754_rem_pio2+0x270>)
 8011cc8:	429e      	cmp	r6, r3
 8011cca:	dc6e      	bgt.n	8011daa <__ieee754_rem_pio2+0x18a>
 8011ccc:	f000 fc2c 	bl	8012528 <fabs>
 8011cd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011cd4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011e68 <__ieee754_rem_pio2+0x248>
 8011cd8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011cdc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011ce0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011ce4:	ee17 0a90 	vmov	r0, s15
 8011ce8:	eeb1 4b45 	vneg.f64	d4, d5
 8011cec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011e48 <__ieee754_rem_pio2+0x228>
 8011cf0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011cf4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011e50 <__ieee754_rem_pio2+0x230>
 8011cf8:	281f      	cmp	r0, #31
 8011cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011cfe:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011d02:	dc08      	bgt.n	8011d16 <__ieee754_rem_pio2+0xf6>
 8011d04:	4b63      	ldr	r3, [pc, #396]	; (8011e94 <__ieee754_rem_pio2+0x274>)
 8011d06:	1e42      	subs	r2, r0, #1
 8011d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d0c:	42b3      	cmp	r3, r6
 8011d0e:	d002      	beq.n	8011d16 <__ieee754_rem_pio2+0xf6>
 8011d10:	ed84 6b00 	vstr	d6, [r4]
 8011d14:	e024      	b.n	8011d60 <__ieee754_rem_pio2+0x140>
 8011d16:	ee16 3a90 	vmov	r3, s13
 8011d1a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011d1e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011d22:	2b10      	cmp	r3, #16
 8011d24:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011d28:	ddf2      	ble.n	8011d10 <__ieee754_rem_pio2+0xf0>
 8011d2a:	eeb0 6b40 	vmov.f64	d6, d0
 8011d2e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011e58 <__ieee754_rem_pio2+0x238>
 8011d32:	eea4 6b03 	vfma.f64	d6, d4, d3
 8011d36:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011d3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011d3e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011e60 <__ieee754_rem_pio2+0x240>
 8011d42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011d46:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011d4a:	ee13 3a90 	vmov	r3, s7
 8011d4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	2b31      	cmp	r3, #49	; 0x31
 8011d56:	dc17      	bgt.n	8011d88 <__ieee754_rem_pio2+0x168>
 8011d58:	eeb0 0b46 	vmov.f64	d0, d6
 8011d5c:	ed84 3b00 	vstr	d3, [r4]
 8011d60:	ed94 6b00 	vldr	d6, [r4]
 8011d64:	2d00      	cmp	r5, #0
 8011d66:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011d6a:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011d6e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011d72:	da85      	bge.n	8011c80 <__ieee754_rem_pio2+0x60>
 8011d74:	eeb1 6b46 	vneg.f64	d6, d6
 8011d78:	ed84 6b00 	vstr	d6, [r4]
 8011d7c:	eeb1 7b47 	vneg.f64	d7, d7
 8011d80:	4240      	negs	r0, r0
 8011d82:	ed84 7b02 	vstr	d7, [r4, #8]
 8011d86:	e77b      	b.n	8011c80 <__ieee754_rem_pio2+0x60>
 8011d88:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011e70 <__ieee754_rem_pio2+0x250>
 8011d8c:	eeb0 0b46 	vmov.f64	d0, d6
 8011d90:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011d94:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011d98:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011e78 <__ieee754_rem_pio2+0x258>
 8011d9c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011da0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011da4:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011da8:	e7b2      	b.n	8011d10 <__ieee754_rem_pio2+0xf0>
 8011daa:	4b3b      	ldr	r3, [pc, #236]	; (8011e98 <__ieee754_rem_pio2+0x278>)
 8011dac:	429e      	cmp	r6, r3
 8011dae:	dd06      	ble.n	8011dbe <__ieee754_rem_pio2+0x19e>
 8011db0:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011db4:	ed80 7b02 	vstr	d7, [r0, #8]
 8011db8:	ed80 7b00 	vstr	d7, [r0]
 8011dbc:	e742      	b.n	8011c44 <__ieee754_rem_pio2+0x24>
 8011dbe:	1532      	asrs	r2, r6, #20
 8011dc0:	ee10 0a10 	vmov	r0, s0
 8011dc4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011dc8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011dcc:	ec41 0b17 	vmov	d7, r0, r1
 8011dd0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011dd4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011e80 <__ieee754_rem_pio2+0x260>
 8011dd8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011ddc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011de0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011de4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011de8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011dec:	a902      	add	r1, sp, #8
 8011dee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011df2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011df6:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011dfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011dfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011e02:	2603      	movs	r6, #3
 8011e04:	4608      	mov	r0, r1
 8011e06:	ed91 7b04 	vldr	d7, [r1, #16]
 8011e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e12:	4633      	mov	r3, r6
 8011e14:	f1a1 0108 	sub.w	r1, r1, #8
 8011e18:	f106 36ff 	add.w	r6, r6, #4294967295
 8011e1c:	d0f3      	beq.n	8011e06 <__ieee754_rem_pio2+0x1e6>
 8011e1e:	491f      	ldr	r1, [pc, #124]	; (8011e9c <__ieee754_rem_pio2+0x27c>)
 8011e20:	9101      	str	r1, [sp, #4]
 8011e22:	2102      	movs	r1, #2
 8011e24:	9100      	str	r1, [sp, #0]
 8011e26:	4621      	mov	r1, r4
 8011e28:	f000 f8a6 	bl	8011f78 <__kernel_rem_pio2>
 8011e2c:	2d00      	cmp	r5, #0
 8011e2e:	f6bf af27 	bge.w	8011c80 <__ieee754_rem_pio2+0x60>
 8011e32:	ed94 7b00 	vldr	d7, [r4]
 8011e36:	eeb1 7b47 	vneg.f64	d7, d7
 8011e3a:	ed84 7b00 	vstr	d7, [r4]
 8011e3e:	ed94 7b02 	vldr	d7, [r4, #8]
 8011e42:	e79b      	b.n	8011d7c <__ieee754_rem_pio2+0x15c>
 8011e44:	f3af 8000 	nop.w
 8011e48:	54400000 	.word	0x54400000
 8011e4c:	3ff921fb 	.word	0x3ff921fb
 8011e50:	1a626331 	.word	0x1a626331
 8011e54:	3dd0b461 	.word	0x3dd0b461
 8011e58:	1a600000 	.word	0x1a600000
 8011e5c:	3dd0b461 	.word	0x3dd0b461
 8011e60:	2e037073 	.word	0x2e037073
 8011e64:	3ba3198a 	.word	0x3ba3198a
 8011e68:	6dc9c883 	.word	0x6dc9c883
 8011e6c:	3fe45f30 	.word	0x3fe45f30
 8011e70:	2e000000 	.word	0x2e000000
 8011e74:	3ba3198a 	.word	0x3ba3198a
 8011e78:	252049c1 	.word	0x252049c1
 8011e7c:	397b839a 	.word	0x397b839a
 8011e80:	00000000 	.word	0x00000000
 8011e84:	41700000 	.word	0x41700000
 8011e88:	3fe921fb 	.word	0x3fe921fb
 8011e8c:	4002d97b 	.word	0x4002d97b
 8011e90:	413921fb 	.word	0x413921fb
 8011e94:	0801cd78 	.word	0x0801cd78
 8011e98:	7fefffff 	.word	0x7fefffff
 8011e9c:	0801cdf8 	.word	0x0801cdf8

08011ea0 <__kernel_cos>:
 8011ea0:	ee10 1a90 	vmov	r1, s1
 8011ea4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011eac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011eb0:	da05      	bge.n	8011ebe <__kernel_cos+0x1e>
 8011eb2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011eb6:	ee17 3a90 	vmov	r3, s15
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d03d      	beq.n	8011f3a <__kernel_cos+0x9a>
 8011ebe:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011ec2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011f40 <__kernel_cos+0xa0>
 8011ec6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011f48 <__kernel_cos+0xa8>
 8011eca:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011ece:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011f50 <__kernel_cos+0xb0>
 8011ed2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011ed6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011f58 <__kernel_cos+0xb8>
 8011eda:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011ede:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011f60 <__kernel_cos+0xc0>
 8011ee2:	4b23      	ldr	r3, [pc, #140]	; (8011f70 <__kernel_cos+0xd0>)
 8011ee4:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011ee8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011f68 <__kernel_cos+0xc8>
 8011eec:	4299      	cmp	r1, r3
 8011eee:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011ef2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011ef6:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011efa:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011efe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011f02:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011f06:	dc04      	bgt.n	8011f12 <__kernel_cos+0x72>
 8011f08:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011f0c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011f10:	4770      	bx	lr
 8011f12:	4b18      	ldr	r3, [pc, #96]	; (8011f74 <__kernel_cos+0xd4>)
 8011f14:	4299      	cmp	r1, r3
 8011f16:	dc0d      	bgt.n	8011f34 <__kernel_cos+0x94>
 8011f18:	2200      	movs	r2, #0
 8011f1a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011f1e:	ec43 2b15 	vmov	d5, r2, r3
 8011f22:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011f26:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011f2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011f32:	4770      	bx	lr
 8011f34:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011f38:	e7f3      	b.n	8011f22 <__kernel_cos+0x82>
 8011f3a:	eeb0 0b44 	vmov.f64	d0, d4
 8011f3e:	4770      	bx	lr
 8011f40:	be8838d4 	.word	0xbe8838d4
 8011f44:	bda8fae9 	.word	0xbda8fae9
 8011f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8011f4c:	3e21ee9e 	.word	0x3e21ee9e
 8011f50:	809c52ad 	.word	0x809c52ad
 8011f54:	be927e4f 	.word	0xbe927e4f
 8011f58:	19cb1590 	.word	0x19cb1590
 8011f5c:	3efa01a0 	.word	0x3efa01a0
 8011f60:	16c15177 	.word	0x16c15177
 8011f64:	bf56c16c 	.word	0xbf56c16c
 8011f68:	5555554c 	.word	0x5555554c
 8011f6c:	3fa55555 	.word	0x3fa55555
 8011f70:	3fd33332 	.word	0x3fd33332
 8011f74:	3fe90000 	.word	0x3fe90000

08011f78 <__kernel_rem_pio2>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	ed2d 8b06 	vpush	{d8-d10}
 8011f80:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8011f84:	469b      	mov	fp, r3
 8011f86:	460f      	mov	r7, r1
 8011f88:	4bcf      	ldr	r3, [pc, #828]	; (80122c8 <__kernel_rem_pio2+0x350>)
 8011f8a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011f8c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011f90:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8011f94:	9000      	str	r0, [sp, #0]
 8011f96:	f112 0f14 	cmn.w	r2, #20
 8011f9a:	bfa8      	it	ge
 8011f9c:	2318      	movge	r3, #24
 8011f9e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8011fa2:	bfb8      	it	lt
 8011fa4:	2300      	movlt	r3, #0
 8011fa6:	f06f 0417 	mvn.w	r4, #23
 8011faa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80122b0 <__kernel_rem_pio2+0x338>
 8011fae:	bfa4      	itt	ge
 8011fb0:	f1a2 0a03 	subge.w	sl, r2, #3
 8011fb4:	fb9a f3f3 	sdivge	r3, sl, r3
 8011fb8:	fb03 4404 	mla	r4, r3, r4, r4
 8011fbc:	1a5d      	subs	r5, r3, r1
 8011fbe:	4414      	add	r4, r2
 8011fc0:	eb09 0601 	add.w	r6, r9, r1
 8011fc4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011fc8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8011fcc:	2200      	movs	r2, #0
 8011fce:	42b2      	cmp	r2, r6
 8011fd0:	dd12      	ble.n	8011ff8 <__kernel_rem_pio2+0x80>
 8011fd2:	aa18      	add	r2, sp, #96	; 0x60
 8011fd4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011fd8:	460e      	mov	r6, r1
 8011fda:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8011fde:	f1cb 0a01 	rsb	sl, fp, #1
 8011fe2:	eb0a 0006 	add.w	r0, sl, r6
 8011fe6:	4581      	cmp	r9, r0
 8011fe8:	db25      	blt.n	8012036 <__kernel_rem_pio2+0xbe>
 8011fea:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80122b0 <__kernel_rem_pio2+0x338>
 8011fee:	f8dd e000 	ldr.w	lr, [sp]
 8011ff2:	4615      	mov	r5, r2
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e015      	b.n	8012024 <__kernel_rem_pio2+0xac>
 8011ff8:	42d5      	cmn	r5, r2
 8011ffa:	d409      	bmi.n	8012010 <__kernel_rem_pio2+0x98>
 8011ffc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8012000:	ee07 0a90 	vmov	s15, r0
 8012004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012008:	eca8 7b02 	vstmia	r8!, {d7}
 801200c:	3201      	adds	r2, #1
 801200e:	e7de      	b.n	8011fce <__kernel_rem_pio2+0x56>
 8012010:	eeb0 7b46 	vmov.f64	d7, d6
 8012014:	e7f8      	b.n	8012008 <__kernel_rem_pio2+0x90>
 8012016:	ecbe 5b02 	vldmia	lr!, {d5}
 801201a:	ed95 6b00 	vldr	d6, [r5]
 801201e:	3001      	adds	r0, #1
 8012020:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012024:	4288      	cmp	r0, r1
 8012026:	f1a5 0508 	sub.w	r5, r5, #8
 801202a:	ddf4      	ble.n	8012016 <__kernel_rem_pio2+0x9e>
 801202c:	eca8 7b02 	vstmia	r8!, {d7}
 8012030:	3208      	adds	r2, #8
 8012032:	3601      	adds	r6, #1
 8012034:	e7d5      	b.n	8011fe2 <__kernel_rem_pio2+0x6a>
 8012036:	aa04      	add	r2, sp, #16
 8012038:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80122b8 <__kernel_rem_pio2+0x340>
 801203c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80122c0 <__kernel_rem_pio2+0x348>
 8012040:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8012044:	9201      	str	r2, [sp, #4]
 8012046:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801204a:	464e      	mov	r6, r9
 801204c:	ab90      	add	r3, sp, #576	; 0x240
 801204e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012052:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8012056:	ab04      	add	r3, sp, #16
 8012058:	4618      	mov	r0, r3
 801205a:	4632      	mov	r2, r6
 801205c:	2a00      	cmp	r2, #0
 801205e:	dc4e      	bgt.n	80120fe <__kernel_rem_pio2+0x186>
 8012060:	4620      	mov	r0, r4
 8012062:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8012066:	f000 fae7 	bl	8012638 <scalbn>
 801206a:	eeb0 8b40 	vmov.f64	d8, d0
 801206e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8012072:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012076:	f000 fa63 	bl	8012540 <floor>
 801207a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801207e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8012082:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012086:	2c00      	cmp	r4, #0
 8012088:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801208c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8012090:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012094:	ee17 8a90 	vmov	r8, s15
 8012098:	dd46      	ble.n	8012128 <__kernel_rem_pio2+0x1b0>
 801209a:	1e70      	subs	r0, r6, #1
 801209c:	aa04      	add	r2, sp, #16
 801209e:	f1c4 0c18 	rsb	ip, r4, #24
 80120a2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80120a6:	fa45 f20c 	asr.w	r2, r5, ip
 80120aa:	4490      	add	r8, r2
 80120ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80120b0:	1aad      	subs	r5, r5, r2
 80120b2:	aa04      	add	r2, sp, #16
 80120b4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80120b8:	f1c4 0217 	rsb	r2, r4, #23
 80120bc:	4115      	asrs	r5, r2
 80120be:	2d00      	cmp	r5, #0
 80120c0:	dd41      	ble.n	8012146 <__kernel_rem_pio2+0x1ce>
 80120c2:	f04f 0c00 	mov.w	ip, #0
 80120c6:	f108 0801 	add.w	r8, r8, #1
 80120ca:	4660      	mov	r0, ip
 80120cc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80120d0:	4566      	cmp	r6, ip
 80120d2:	dc69      	bgt.n	80121a8 <__kernel_rem_pio2+0x230>
 80120d4:	2c00      	cmp	r4, #0
 80120d6:	dd03      	ble.n	80120e0 <__kernel_rem_pio2+0x168>
 80120d8:	2c01      	cmp	r4, #1
 80120da:	d076      	beq.n	80121ca <__kernel_rem_pio2+0x252>
 80120dc:	2c02      	cmp	r4, #2
 80120de:	d07f      	beq.n	80121e0 <__kernel_rem_pio2+0x268>
 80120e0:	2d02      	cmp	r5, #2
 80120e2:	d130      	bne.n	8012146 <__kernel_rem_pio2+0x1ce>
 80120e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80120e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80120ec:	b358      	cbz	r0, 8012146 <__kernel_rem_pio2+0x1ce>
 80120ee:	4620      	mov	r0, r4
 80120f0:	9102      	str	r1, [sp, #8]
 80120f2:	f000 faa1 	bl	8012638 <scalbn>
 80120f6:	9902      	ldr	r1, [sp, #8]
 80120f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80120fc:	e023      	b.n	8012146 <__kernel_rem_pio2+0x1ce>
 80120fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012102:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012106:	3a01      	subs	r2, #1
 8012108:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801210c:	ad68      	add	r5, sp, #416	; 0x1a0
 801210e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012112:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012116:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801211a:	eca0 0a01 	vstmia	r0!, {s0}
 801211e:	ed95 0b00 	vldr	d0, [r5]
 8012122:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012126:	e799      	b.n	801205c <__kernel_rem_pio2+0xe4>
 8012128:	d105      	bne.n	8012136 <__kernel_rem_pio2+0x1be>
 801212a:	1e72      	subs	r2, r6, #1
 801212c:	a804      	add	r0, sp, #16
 801212e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8012132:	15ed      	asrs	r5, r5, #23
 8012134:	e7c3      	b.n	80120be <__kernel_rem_pio2+0x146>
 8012136:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801213a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	da2f      	bge.n	80121a4 <__kernel_rem_pio2+0x22c>
 8012144:	2500      	movs	r5, #0
 8012146:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	f040 8087 	bne.w	8012260 <__kernel_rem_pio2+0x2e8>
 8012152:	1e73      	subs	r3, r6, #1
 8012154:	4618      	mov	r0, r3
 8012156:	f04f 0c00 	mov.w	ip, #0
 801215a:	4548      	cmp	r0, r9
 801215c:	da47      	bge.n	80121ee <__kernel_rem_pio2+0x276>
 801215e:	f1bc 0f00 	cmp.w	ip, #0
 8012162:	d070      	beq.n	8012246 <__kernel_rem_pio2+0x2ce>
 8012164:	aa04      	add	r2, sp, #16
 8012166:	3c18      	subs	r4, #24
 8012168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801216c:	2a00      	cmp	r2, #0
 801216e:	d075      	beq.n	801225c <__kernel_rem_pio2+0x2e4>
 8012170:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012174:	4620      	mov	r0, r4
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	f000 fa5e 	bl	8012638 <scalbn>
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80122b8 <__kernel_rem_pio2+0x340>
 8012182:	461a      	mov	r2, r3
 8012184:	2a00      	cmp	r2, #0
 8012186:	f280 80ac 	bge.w	80122e2 <__kernel_rem_pio2+0x36a>
 801218a:	4619      	mov	r1, r3
 801218c:	2000      	movs	r0, #0
 801218e:	2900      	cmp	r1, #0
 8012190:	f2c0 80cd 	blt.w	801232e <__kernel_rem_pio2+0x3b6>
 8012194:	aa68      	add	r2, sp, #416	; 0x1a0
 8012196:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 801219a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80122b0 <__kernel_rem_pio2+0x338>
 801219e:	4e4b      	ldr	r6, [pc, #300]	; (80122cc <__kernel_rem_pio2+0x354>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	e0b8      	b.n	8012316 <__kernel_rem_pio2+0x39e>
 80121a4:	2502      	movs	r5, #2
 80121a6:	e78c      	b.n	80120c2 <__kernel_rem_pio2+0x14a>
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	b948      	cbnz	r0, 80121c0 <__kernel_rem_pio2+0x248>
 80121ac:	b11a      	cbz	r2, 80121b6 <__kernel_rem_pio2+0x23e>
 80121ae:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80121b2:	601a      	str	r2, [r3, #0]
 80121b4:	2201      	movs	r2, #1
 80121b6:	f10c 0c01 	add.w	ip, ip, #1
 80121ba:	3304      	adds	r3, #4
 80121bc:	4610      	mov	r0, r2
 80121be:	e787      	b.n	80120d0 <__kernel_rem_pio2+0x158>
 80121c0:	ebae 0202 	sub.w	r2, lr, r2
 80121c4:	601a      	str	r2, [r3, #0]
 80121c6:	4602      	mov	r2, r0
 80121c8:	e7f5      	b.n	80121b6 <__kernel_rem_pio2+0x23e>
 80121ca:	1e72      	subs	r2, r6, #1
 80121cc:	ab04      	add	r3, sp, #16
 80121ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80121d6:	f10d 0c10 	add.w	ip, sp, #16
 80121da:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80121de:	e77f      	b.n	80120e0 <__kernel_rem_pio2+0x168>
 80121e0:	1e72      	subs	r2, r6, #1
 80121e2:	ab04      	add	r3, sp, #16
 80121e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80121ec:	e7f3      	b.n	80121d6 <__kernel_rem_pio2+0x25e>
 80121ee:	aa04      	add	r2, sp, #16
 80121f0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80121f4:	3801      	subs	r0, #1
 80121f6:	ea4c 0c02 	orr.w	ip, ip, r2
 80121fa:	e7ae      	b.n	801215a <__kernel_rem_pio2+0x1e2>
 80121fc:	3001      	adds	r0, #1
 80121fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012202:	2a00      	cmp	r2, #0
 8012204:	d0fa      	beq.n	80121fc <__kernel_rem_pio2+0x284>
 8012206:	eb06 020b 	add.w	r2, r6, fp
 801220a:	ad18      	add	r5, sp, #96	; 0x60
 801220c:	1c73      	adds	r3, r6, #1
 801220e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8012212:	4406      	add	r6, r0
 8012214:	429e      	cmp	r6, r3
 8012216:	f6ff af19 	blt.w	801204c <__kernel_rem_pio2+0xd4>
 801221a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801221e:	9d00      	ldr	r5, [sp, #0]
 8012220:	ee07 0a90 	vmov	s15, r0
 8012224:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012228:	2000      	movs	r0, #0
 801222a:	eca2 7b02 	vstmia	r2!, {d7}
 801222e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80122b0 <__kernel_rem_pio2+0x338>
 8012232:	4694      	mov	ip, r2
 8012234:	4288      	cmp	r0, r1
 8012236:	dd09      	ble.n	801224c <__kernel_rem_pio2+0x2d4>
 8012238:	a868      	add	r0, sp, #416	; 0x1a0
 801223a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801223e:	ed80 7b00 	vstr	d7, [r0]
 8012242:	3301      	adds	r3, #1
 8012244:	e7e6      	b.n	8012214 <__kernel_rem_pio2+0x29c>
 8012246:	9b01      	ldr	r3, [sp, #4]
 8012248:	2001      	movs	r0, #1
 801224a:	e7d8      	b.n	80121fe <__kernel_rem_pio2+0x286>
 801224c:	ecb5 5b02 	vldmia	r5!, {d5}
 8012250:	ed3c 6b02 	vldmdb	ip!, {d6}
 8012254:	3001      	adds	r0, #1
 8012256:	eea5 7b06 	vfma.f64	d7, d5, d6
 801225a:	e7eb      	b.n	8012234 <__kernel_rem_pio2+0x2bc>
 801225c:	3b01      	subs	r3, #1
 801225e:	e781      	b.n	8012164 <__kernel_rem_pio2+0x1ec>
 8012260:	4260      	negs	r0, r4
 8012262:	eeb0 0b48 	vmov.f64	d0, d8
 8012266:	f000 f9e7 	bl	8012638 <scalbn>
 801226a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80122c0 <__kernel_rem_pio2+0x348>
 801226e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012276:	db2b      	blt.n	80122d0 <__kernel_rem_pio2+0x358>
 8012278:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80122b8 <__kernel_rem_pio2+0x340>
 801227c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012280:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012284:	aa04      	add	r2, sp, #16
 8012286:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801228a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801228e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012292:	a904      	add	r1, sp, #16
 8012294:	ee10 3a10 	vmov	r3, s0
 8012298:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801229c:	ee17 2a10 	vmov	r2, s14
 80122a0:	1c73      	adds	r3, r6, #1
 80122a2:	3418      	adds	r4, #24
 80122a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80122a8:	e762      	b.n	8012170 <__kernel_rem_pio2+0x1f8>
 80122aa:	bf00      	nop
 80122ac:	f3af 8000 	nop.w
	...
 80122bc:	3e700000 	.word	0x3e700000
 80122c0:	00000000 	.word	0x00000000
 80122c4:	41700000 	.word	0x41700000
 80122c8:	0801cf40 	.word	0x0801cf40
 80122cc:	0801cf00 	.word	0x0801cf00
 80122d0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80122d4:	aa04      	add	r2, sp, #16
 80122d6:	ee10 3a10 	vmov	r3, s0
 80122da:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80122de:	4633      	mov	r3, r6
 80122e0:	e746      	b.n	8012170 <__kernel_rem_pio2+0x1f8>
 80122e2:	a804      	add	r0, sp, #16
 80122e4:	a968      	add	r1, sp, #416	; 0x1a0
 80122e6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80122ea:	9000      	str	r0, [sp, #0]
 80122ec:	ee07 0a90 	vmov	s15, r0
 80122f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80122f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80122f8:	3a01      	subs	r2, #1
 80122fa:	ee27 7b00 	vmul.f64	d7, d7, d0
 80122fe:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012302:	ed81 7b00 	vstr	d7, [r1]
 8012306:	e73d      	b.n	8012184 <__kernel_rem_pio2+0x20c>
 8012308:	ecb6 5b02 	vldmia	r6!, {d5}
 801230c:	ecb4 6b02 	vldmia	r4!, {d6}
 8012310:	3201      	adds	r2, #1
 8012312:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012316:	454a      	cmp	r2, r9
 8012318:	dc01      	bgt.n	801231e <__kernel_rem_pio2+0x3a6>
 801231a:	4290      	cmp	r0, r2
 801231c:	daf4      	bge.n	8012308 <__kernel_rem_pio2+0x390>
 801231e:	aa40      	add	r2, sp, #256	; 0x100
 8012320:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012324:	ed82 7b00 	vstr	d7, [r2]
 8012328:	3901      	subs	r1, #1
 801232a:	3001      	adds	r0, #1
 801232c:	e72f      	b.n	801218e <__kernel_rem_pio2+0x216>
 801232e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8012330:	2a02      	cmp	r2, #2
 8012332:	dc0a      	bgt.n	801234a <__kernel_rem_pio2+0x3d2>
 8012334:	2a00      	cmp	r2, #0
 8012336:	dc5a      	bgt.n	80123ee <__kernel_rem_pio2+0x476>
 8012338:	d039      	beq.n	80123ae <__kernel_rem_pio2+0x436>
 801233a:	f008 0007 	and.w	r0, r8, #7
 801233e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8012342:	ecbd 8b06 	vpop	{d8-d10}
 8012346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801234c:	2a03      	cmp	r2, #3
 801234e:	d1f4      	bne.n	801233a <__kernel_rem_pio2+0x3c2>
 8012350:	aa40      	add	r2, sp, #256	; 0x100
 8012352:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012356:	4611      	mov	r1, r2
 8012358:	4618      	mov	r0, r3
 801235a:	2800      	cmp	r0, #0
 801235c:	f1a1 0108 	sub.w	r1, r1, #8
 8012360:	dc52      	bgt.n	8012408 <__kernel_rem_pio2+0x490>
 8012362:	4619      	mov	r1, r3
 8012364:	2901      	cmp	r1, #1
 8012366:	f1a2 0208 	sub.w	r2, r2, #8
 801236a:	dc5d      	bgt.n	8012428 <__kernel_rem_pio2+0x4b0>
 801236c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8012470 <__kernel_rem_pio2+0x4f8>
 8012370:	2b01      	cmp	r3, #1
 8012372:	dc69      	bgt.n	8012448 <__kernel_rem_pio2+0x4d0>
 8012374:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8012378:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 801237c:	2d00      	cmp	r5, #0
 801237e:	d16c      	bne.n	801245a <__kernel_rem_pio2+0x4e2>
 8012380:	ed87 5b00 	vstr	d5, [r7]
 8012384:	ed87 6b02 	vstr	d6, [r7, #8]
 8012388:	ed87 7b04 	vstr	d7, [r7, #16]
 801238c:	e7d5      	b.n	801233a <__kernel_rem_pio2+0x3c2>
 801238e:	aa40      	add	r2, sp, #256	; 0x100
 8012390:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012394:	ed92 6b00 	vldr	d6, [r2]
 8012398:	3b01      	subs	r3, #1
 801239a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801239e:	2b00      	cmp	r3, #0
 80123a0:	daf5      	bge.n	801238e <__kernel_rem_pio2+0x416>
 80123a2:	b10d      	cbz	r5, 80123a8 <__kernel_rem_pio2+0x430>
 80123a4:	eeb1 7b47 	vneg.f64	d7, d7
 80123a8:	ed87 7b00 	vstr	d7, [r7]
 80123ac:	e7c5      	b.n	801233a <__kernel_rem_pio2+0x3c2>
 80123ae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012470 <__kernel_rem_pio2+0x4f8>
 80123b2:	e7f4      	b.n	801239e <__kernel_rem_pio2+0x426>
 80123b4:	a940      	add	r1, sp, #256	; 0x100
 80123b6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80123ba:	ed91 7b00 	vldr	d7, [r1]
 80123be:	3a01      	subs	r2, #1
 80123c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80123c4:	2a00      	cmp	r2, #0
 80123c6:	daf5      	bge.n	80123b4 <__kernel_rem_pio2+0x43c>
 80123c8:	b1ad      	cbz	r5, 80123f6 <__kernel_rem_pio2+0x47e>
 80123ca:	eeb1 7b46 	vneg.f64	d7, d6
 80123ce:	ed87 7b00 	vstr	d7, [r7]
 80123d2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80123d6:	a942      	add	r1, sp, #264	; 0x108
 80123d8:	2201      	movs	r2, #1
 80123da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80123de:	4293      	cmp	r3, r2
 80123e0:	da0c      	bge.n	80123fc <__kernel_rem_pio2+0x484>
 80123e2:	b10d      	cbz	r5, 80123e8 <__kernel_rem_pio2+0x470>
 80123e4:	eeb1 7b47 	vneg.f64	d7, d7
 80123e8:	ed87 7b02 	vstr	d7, [r7, #8]
 80123ec:	e7a5      	b.n	801233a <__kernel_rem_pio2+0x3c2>
 80123ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012470 <__kernel_rem_pio2+0x4f8>
 80123f2:	461a      	mov	r2, r3
 80123f4:	e7e6      	b.n	80123c4 <__kernel_rem_pio2+0x44c>
 80123f6:	eeb0 7b46 	vmov.f64	d7, d6
 80123fa:	e7e8      	b.n	80123ce <__kernel_rem_pio2+0x456>
 80123fc:	ecb1 6b02 	vldmia	r1!, {d6}
 8012400:	3201      	adds	r2, #1
 8012402:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012406:	e7ea      	b.n	80123de <__kernel_rem_pio2+0x466>
 8012408:	ed91 7b00 	vldr	d7, [r1]
 801240c:	ed91 5b02 	vldr	d5, [r1, #8]
 8012410:	3801      	subs	r0, #1
 8012412:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012416:	ee37 7b46 	vsub.f64	d7, d7, d6
 801241a:	ed81 6b00 	vstr	d6, [r1]
 801241e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012422:	ed81 7b02 	vstr	d7, [r1, #8]
 8012426:	e798      	b.n	801235a <__kernel_rem_pio2+0x3e2>
 8012428:	ed92 7b00 	vldr	d7, [r2]
 801242c:	ed92 5b02 	vldr	d5, [r2, #8]
 8012430:	3901      	subs	r1, #1
 8012432:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012436:	ee37 7b46 	vsub.f64	d7, d7, d6
 801243a:	ed82 6b00 	vstr	d6, [r2]
 801243e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012442:	ed82 7b02 	vstr	d7, [r2, #8]
 8012446:	e78d      	b.n	8012364 <__kernel_rem_pio2+0x3ec>
 8012448:	aa40      	add	r2, sp, #256	; 0x100
 801244a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801244e:	ed92 6b00 	vldr	d6, [r2]
 8012452:	3b01      	subs	r3, #1
 8012454:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012458:	e78a      	b.n	8012370 <__kernel_rem_pio2+0x3f8>
 801245a:	eeb1 5b45 	vneg.f64	d5, d5
 801245e:	eeb1 6b46 	vneg.f64	d6, d6
 8012462:	ed87 5b00 	vstr	d5, [r7]
 8012466:	eeb1 7b47 	vneg.f64	d7, d7
 801246a:	ed87 6b02 	vstr	d6, [r7, #8]
 801246e:	e78b      	b.n	8012388 <__kernel_rem_pio2+0x410>
	...

08012478 <__kernel_sin>:
 8012478:	ee10 3a90 	vmov	r3, s1
 801247c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012480:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012484:	da04      	bge.n	8012490 <__kernel_sin+0x18>
 8012486:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801248a:	ee17 3a90 	vmov	r3, s15
 801248e:	b35b      	cbz	r3, 80124e8 <__kernel_sin+0x70>
 8012490:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012494:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012498:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80124f0 <__kernel_sin+0x78>
 801249c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80124f8 <__kernel_sin+0x80>
 80124a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80124a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012500 <__kernel_sin+0x88>
 80124a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80124ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012508 <__kernel_sin+0x90>
 80124b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80124b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012510 <__kernel_sin+0x98>
 80124b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80124bc:	b930      	cbnz	r0, 80124cc <__kernel_sin+0x54>
 80124be:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012518 <__kernel_sin+0xa0>
 80124c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80124c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80124ca:	4770      	bx	lr
 80124cc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80124d0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80124d4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80124d8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80124dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012520 <__kernel_sin+0xa8>
 80124e0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80124e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop
 80124ec:	f3af 8000 	nop.w
 80124f0:	5acfd57c 	.word	0x5acfd57c
 80124f4:	3de5d93a 	.word	0x3de5d93a
 80124f8:	8a2b9ceb 	.word	0x8a2b9ceb
 80124fc:	be5ae5e6 	.word	0xbe5ae5e6
 8012500:	57b1fe7d 	.word	0x57b1fe7d
 8012504:	3ec71de3 	.word	0x3ec71de3
 8012508:	19c161d5 	.word	0x19c161d5
 801250c:	bf2a01a0 	.word	0xbf2a01a0
 8012510:	1110f8a6 	.word	0x1110f8a6
 8012514:	3f811111 	.word	0x3f811111
 8012518:	55555549 	.word	0x55555549
 801251c:	bfc55555 	.word	0xbfc55555
 8012520:	55555549 	.word	0x55555549
 8012524:	3fc55555 	.word	0x3fc55555

08012528 <fabs>:
 8012528:	ec51 0b10 	vmov	r0, r1, d0
 801252c:	ee10 2a10 	vmov	r2, s0
 8012530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012534:	ec43 2b10 	vmov	d0, r2, r3
 8012538:	4770      	bx	lr
 801253a:	0000      	movs	r0, r0
 801253c:	0000      	movs	r0, r0
	...

08012540 <floor>:
 8012540:	ee10 1a90 	vmov	r1, s1
 8012544:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012548:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801254c:	2b13      	cmp	r3, #19
 801254e:	b530      	push	{r4, r5, lr}
 8012550:	ee10 0a10 	vmov	r0, s0
 8012554:	ee10 5a10 	vmov	r5, s0
 8012558:	dc31      	bgt.n	80125be <floor+0x7e>
 801255a:	2b00      	cmp	r3, #0
 801255c:	da15      	bge.n	801258a <floor+0x4a>
 801255e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012618 <floor+0xd8>
 8012562:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012566:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	dd07      	ble.n	8012580 <floor+0x40>
 8012570:	2900      	cmp	r1, #0
 8012572:	da4e      	bge.n	8012612 <floor+0xd2>
 8012574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012578:	4318      	orrs	r0, r3
 801257a:	d001      	beq.n	8012580 <floor+0x40>
 801257c:	4928      	ldr	r1, [pc, #160]	; (8012620 <floor+0xe0>)
 801257e:	2000      	movs	r0, #0
 8012580:	460b      	mov	r3, r1
 8012582:	4602      	mov	r2, r0
 8012584:	ec43 2b10 	vmov	d0, r2, r3
 8012588:	e020      	b.n	80125cc <floor+0x8c>
 801258a:	4a26      	ldr	r2, [pc, #152]	; (8012624 <floor+0xe4>)
 801258c:	411a      	asrs	r2, r3
 801258e:	ea01 0402 	and.w	r4, r1, r2
 8012592:	4304      	orrs	r4, r0
 8012594:	d01a      	beq.n	80125cc <floor+0x8c>
 8012596:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012618 <floor+0xd8>
 801259a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801259e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80125a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a6:	ddeb      	ble.n	8012580 <floor+0x40>
 80125a8:	2900      	cmp	r1, #0
 80125aa:	bfbe      	ittt	lt
 80125ac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80125b0:	fa40 f303 	asrlt.w	r3, r0, r3
 80125b4:	18c9      	addlt	r1, r1, r3
 80125b6:	ea21 0102 	bic.w	r1, r1, r2
 80125ba:	2000      	movs	r0, #0
 80125bc:	e7e0      	b.n	8012580 <floor+0x40>
 80125be:	2b33      	cmp	r3, #51	; 0x33
 80125c0:	dd05      	ble.n	80125ce <floor+0x8e>
 80125c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80125c6:	d101      	bne.n	80125cc <floor+0x8c>
 80125c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80125cc:	bd30      	pop	{r4, r5, pc}
 80125ce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80125d2:	f04f 32ff 	mov.w	r2, #4294967295
 80125d6:	40e2      	lsrs	r2, r4
 80125d8:	4202      	tst	r2, r0
 80125da:	d0f7      	beq.n	80125cc <floor+0x8c>
 80125dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012618 <floor+0xd8>
 80125e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80125e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80125e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ec:	ddc8      	ble.n	8012580 <floor+0x40>
 80125ee:	2900      	cmp	r1, #0
 80125f0:	da02      	bge.n	80125f8 <floor+0xb8>
 80125f2:	2b14      	cmp	r3, #20
 80125f4:	d103      	bne.n	80125fe <floor+0xbe>
 80125f6:	3101      	adds	r1, #1
 80125f8:	ea20 0002 	bic.w	r0, r0, r2
 80125fc:	e7c0      	b.n	8012580 <floor+0x40>
 80125fe:	2401      	movs	r4, #1
 8012600:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012604:	fa04 f303 	lsl.w	r3, r4, r3
 8012608:	4418      	add	r0, r3
 801260a:	42a8      	cmp	r0, r5
 801260c:	bf38      	it	cc
 801260e:	1909      	addcc	r1, r1, r4
 8012610:	e7f2      	b.n	80125f8 <floor+0xb8>
 8012612:	2000      	movs	r0, #0
 8012614:	4601      	mov	r1, r0
 8012616:	e7b3      	b.n	8012580 <floor+0x40>
 8012618:	8800759c 	.word	0x8800759c
 801261c:	7e37e43c 	.word	0x7e37e43c
 8012620:	bff00000 	.word	0xbff00000
 8012624:	000fffff 	.word	0x000fffff

08012628 <nan>:
 8012628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012630 <nan+0x8>
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	00000000 	.word	0x00000000
 8012634:	7ff80000 	.word	0x7ff80000

08012638 <scalbn>:
 8012638:	b082      	sub	sp, #8
 801263a:	ed8d 0b00 	vstr	d0, [sp]
 801263e:	9b01      	ldr	r3, [sp, #4]
 8012640:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012644:	b9a2      	cbnz	r2, 8012670 <scalbn+0x38>
 8012646:	9a00      	ldr	r2, [sp, #0]
 8012648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801264c:	4313      	orrs	r3, r2
 801264e:	d03a      	beq.n	80126c6 <scalbn+0x8e>
 8012650:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012728 <scalbn+0xf0>
 8012654:	4b40      	ldr	r3, [pc, #256]	; (8012758 <scalbn+0x120>)
 8012656:	ee20 7b07 	vmul.f64	d7, d0, d7
 801265a:	4298      	cmp	r0, r3
 801265c:	ed8d 7b00 	vstr	d7, [sp]
 8012660:	da11      	bge.n	8012686 <scalbn+0x4e>
 8012662:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8012730 <scalbn+0xf8>
 8012666:	ed9d 6b00 	vldr	d6, [sp]
 801266a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801266e:	e007      	b.n	8012680 <scalbn+0x48>
 8012670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012674:	428a      	cmp	r2, r1
 8012676:	d10a      	bne.n	801268e <scalbn+0x56>
 8012678:	ed9d 7b00 	vldr	d7, [sp]
 801267c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012680:	ed8d 7b00 	vstr	d7, [sp]
 8012684:	e01f      	b.n	80126c6 <scalbn+0x8e>
 8012686:	9b01      	ldr	r3, [sp, #4]
 8012688:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801268c:	3a36      	subs	r2, #54	; 0x36
 801268e:	4402      	add	r2, r0
 8012690:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012694:	428a      	cmp	r2, r1
 8012696:	dd0a      	ble.n	80126ae <scalbn+0x76>
 8012698:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012738 <scalbn+0x100>
 801269c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012740 <scalbn+0x108>
 80126a0:	eeb0 6b47 	vmov.f64	d6, d7
 80126a4:	9b01      	ldr	r3, [sp, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80126ac:	e7dd      	b.n	801266a <scalbn+0x32>
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	dd0d      	ble.n	80126ce <scalbn+0x96>
 80126b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80126ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80126be:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80126c2:	e9cd 0100 	strd	r0, r1, [sp]
 80126c6:	ed9d 0b00 	vldr	d0, [sp]
 80126ca:	b002      	add	sp, #8
 80126cc:	4770      	bx	lr
 80126ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80126d2:	da18      	bge.n	8012706 <scalbn+0xce>
 80126d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80126d8:	4298      	cmp	r0, r3
 80126da:	9b01      	ldr	r3, [sp, #4]
 80126dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126e0:	dd09      	ble.n	80126f6 <scalbn+0xbe>
 80126e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012738 <scalbn+0x100>
 80126e6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8012740 <scalbn+0x108>
 80126ea:	eeb0 6b47 	vmov.f64	d6, d7
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80126f4:	e7b9      	b.n	801266a <scalbn+0x32>
 80126f6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012730 <scalbn+0xf8>
 80126fa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8012748 <scalbn+0x110>
 80126fe:	eeb0 6b47 	vmov.f64	d6, d7
 8012702:	2b00      	cmp	r3, #0
 8012704:	e7f4      	b.n	80126f0 <scalbn+0xb8>
 8012706:	e9dd 0100 	ldrd	r0, r1, [sp]
 801270a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801270e:	3236      	adds	r2, #54	; 0x36
 8012710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012714:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012718:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8012750 <scalbn+0x118>
 801271c:	ec41 0b17 	vmov	d7, r0, r1
 8012720:	e7a3      	b.n	801266a <scalbn+0x32>
 8012722:	bf00      	nop
 8012724:	f3af 8000 	nop.w
 8012728:	00000000 	.word	0x00000000
 801272c:	43500000 	.word	0x43500000
 8012730:	c2f8f359 	.word	0xc2f8f359
 8012734:	01a56e1f 	.word	0x01a56e1f
 8012738:	8800759c 	.word	0x8800759c
 801273c:	7e37e43c 	.word	0x7e37e43c
 8012740:	8800759c 	.word	0x8800759c
 8012744:	fe37e43c 	.word	0xfe37e43c
 8012748:	c2f8f359 	.word	0xc2f8f359
 801274c:	81a56e1f 	.word	0x81a56e1f
 8012750:	00000000 	.word	0x00000000
 8012754:	3c900000 	.word	0x3c900000
 8012758:	ffff3cb0 	.word	0xffff3cb0

0801275c <_init>:
 801275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801275e:	bf00      	nop
 8012760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012762:	bc08      	pop	{r3}
 8012764:	469e      	mov	lr, r3
 8012766:	4770      	bx	lr

08012768 <_fini>:
 8012768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801276a:	bf00      	nop
 801276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801276e:	bc08      	pop	{r3}
 8012770:	469e      	mov	lr, r3
 8012772:	4770      	bx	lr
